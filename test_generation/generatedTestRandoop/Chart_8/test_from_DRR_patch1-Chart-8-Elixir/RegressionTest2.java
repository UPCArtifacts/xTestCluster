import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest2 {

    public static boolean debug = false;

    @Test
    public void test1001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1001");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        long long5 = week2.getLastMillisecond();
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod9 = week8.next();
        java.lang.Class<?> wildcardClass10 = week8.getClass();
        java.lang.Class class11 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass10);
        int int12 = week2.compareTo((java.lang.Object) wildcardClass10);
        long long13 = week2.getMiddleMillisecond();
        java.util.Date date14 = week2.getEnd();
        int int15 = week2.getWeek();
        long long16 = week2.getLastMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod17 = week2.next();
        long long18 = week2.getFirstMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod19 = week2.next();
        java.util.Date date20 = week2.getStart();
        java.util.Date date21 = week2.getEnd();
        java.lang.String str22 = week2.toString();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-60505750800001L) + "'", long5 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod9);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNotNull(class11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-60506053200001L) + "'", long13 == (-60506053200001L));
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 35 + "'", int15 == 35);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-60505750800001L) + "'", long16 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-60506355600000L) + "'", long18 == (-60506355600000L));
        org.junit.Assert.assertNotNull(regularTimePeriod19);
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Week 35, 52" + "'", str22, "Week 35, 52");
    }

    @Test
    public void test1002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1002");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) (short) 100, (int) (byte) 100);
        int int3 = week2.getWeek();
        java.util.Calendar calendar4 = null;
        // The following exception was thrown during execution in test generation
        try {
            week2.peg(calendar4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100);
    }

    @Test
    public void test1003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1003");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, (int) 'a');
        org.jfree.data.time.Week week5 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod6 = week5.next();
        long long7 = week5.getMiddleMillisecond();
        java.lang.String str8 = week5.toString();
        boolean boolean9 = week2.equals((java.lang.Object) week5);
        long long10 = week2.getMiddleMillisecond();
        org.jfree.data.time.Week week13 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str14 = week13.toString();
        long long15 = week13.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod16 = week13.next();
        java.util.Date date17 = week13.getEnd();
        int int18 = week13.getYearValue();
        boolean boolean19 = week2.equals((java.lang.Object) int18);
        long long20 = week2.getSerialIndex();
        int int21 = week2.getYearValue();
        org.junit.Assert.assertNotNull(regularTimePeriod6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-60506053200001L) + "'", long7 == (-60506053200001L));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Week 35, 52" + "'", str8, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-59101102800001L) + "'", long10 == (-59101102800001L));
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Week 35, 52" + "'", str14, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-60506053200001L) + "'", long15 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod16);
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 52 + "'", int18 == 52);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 5150L + "'", long20 == 5150L);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 97 + "'", int21 == 97);
    }

    @Test
    public void test1004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1004");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '4', 11);
    }

    @Test
    public void test1005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1005");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date3 = week2.getStart();
        java.util.Date date4 = week2.getEnd();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.next();
        long long6 = week2.getLastMillisecond();
        org.jfree.data.time.Week week9 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week9.next();
        int int11 = week9.getYearValue();
        java.util.TimeZone timeZone12 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int13 = week9.compareTo((java.lang.Object) timeZone12);
        int int14 = week9.getYearValue();
        int int16 = week9.compareTo((java.lang.Object) 9);
        java.util.Date date17 = week9.getStart();
        org.jfree.data.time.Week week18 = new org.jfree.data.time.Week(date17);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod19 = week18.next();
        boolean boolean20 = week2.equals((java.lang.Object) week18);
        long long21 = week2.getFirstMillisecond();
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-59100800400001L) + "'", long6 == (-59100800400001L));
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertNotNull(timeZone12);
// flaky:         org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 52 + "'", int14 == 52);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-59101405200000L) + "'", long21 == (-59101405200000L));
    }

    @Test
    public void test1006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1006");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, (int) 'a');
        org.jfree.data.time.Week week5 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod6 = week5.next();
        long long7 = week5.getMiddleMillisecond();
        java.lang.String str8 = week5.toString();
        boolean boolean9 = week2.equals((java.lang.Object) week5);
        java.lang.String str10 = week2.toString();
        java.util.Calendar calendar11 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long12 = week2.getMiddleMillisecond(calendar11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-60506053200001L) + "'", long7 == (-60506053200001L));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Week 35, 52" + "'", str8, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Week 9, 97" + "'", str10, "Week 9, 97");
    }

    @Test
    public void test1007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1007");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.util.Date date3 = week2.getStart();
        org.jfree.data.time.Week week6 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.util.Date date7 = week6.getStart();
        int int8 = week6.getYearValue();
        java.util.Date date9 = week6.getEnd();
        org.jfree.data.time.Week week12 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod13 = week12.next();
        java.lang.Class<?> wildcardClass14 = week12.getClass();
        java.lang.Class class15 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass14);
        java.lang.Class class16 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass14);
        org.jfree.data.time.Week week19 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod20 = week19.next();
        int int21 = week19.getYearValue();
        java.util.TimeZone timeZone22 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int23 = week19.compareTo((java.lang.Object) timeZone22);
        int int24 = week19.getYearValue();
        int int26 = week19.compareTo((java.lang.Object) 9);
        java.util.Date date27 = week19.getStart();
        org.jfree.data.time.Week week28 = new org.jfree.data.time.Week(date27);
        org.jfree.data.time.Week week31 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod32 = week31.next();
        int int33 = week31.getYearValue();
        java.util.TimeZone timeZone34 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int35 = week31.compareTo((java.lang.Object) timeZone34);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod36 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass14, date27, timeZone34);
        org.jfree.data.time.Week week39 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod40 = week39.previous();
        int int41 = week39.getYearValue();
        java.util.Date date42 = week39.getStart();
        java.util.TimeZone timeZone43 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.Week week44 = new org.jfree.data.time.Week(date42, timeZone43);
        org.jfree.data.time.Week week45 = new org.jfree.data.time.Week(date27, timeZone43);
        org.jfree.data.time.Week week46 = new org.jfree.data.time.Week(date9, timeZone43);
        boolean boolean47 = week2.equals((java.lang.Object) date9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod48 = week2.previous();
        long long49 = regularTimePeriod48.getMiddleMillisecond();
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 52 + "'", int8 == 52);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod13);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(class15);
        org.junit.Assert.assertNotNull(class16);
        org.junit.Assert.assertNotNull(regularTimePeriod20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 52 + "'", int21 == 52);
        org.junit.Assert.assertNotNull(timeZone22);
// flaky:         org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 52 + "'", int24 == 52);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 52 + "'", int33 == 52);
        org.junit.Assert.assertNotNull(timeZone34);
// flaky:         org.junit.Assert.assertEquals(timeZone34.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod36);
        org.junit.Assert.assertNotNull(regularTimePeriod40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 52 + "'", int41 == 52);
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(timeZone43);
// flaky:         org.junit.Assert.assertEquals(timeZone43.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(regularTimePeriod48);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + (-60506658000001L) + "'", long49 == (-60506658000001L));
    }

    @Test
    public void test1008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1008");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        long long7 = week2.getFirstMillisecond();
        java.lang.String str8 = week2.toString();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod9 = week2.previous();
        java.lang.String str10 = week2.toString();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-60506355600000L) + "'", long7 == (-60506355600000L));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Week 35, 52" + "'", str8, "Week 35, 52");
        org.junit.Assert.assertNotNull(regularTimePeriod9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Week 35, 52" + "'", str10, "Week 35, 52");
    }

    @Test
    public void test1009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1009");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.next();
        java.util.Date date6 = week2.getEnd();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week(date6);
        int int8 = week7.getWeek();
        boolean boolean10 = week7.equals((java.lang.Object) 1637449200000L);
        org.jfree.data.time.Week week13 = new org.jfree.data.time.Week(9, (int) 'a');
        org.jfree.data.time.Week week16 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod17 = week16.next();
        long long18 = week16.getMiddleMillisecond();
        java.lang.String str19 = week16.toString();
        boolean boolean20 = week13.equals((java.lang.Object) week16);
        int int21 = week16.getWeek();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod22 = week16.next();
        boolean boolean23 = week7.equals((java.lang.Object) week16);
        java.util.Calendar calendar24 = null;
        // The following exception was thrown during execution in test generation
        try {
            week16.peg(calendar24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 35 + "'", int8 == 35);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(regularTimePeriod17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-60506053200001L) + "'", long18 == (-60506053200001L));
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Week 35, 52" + "'", str19, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 35 + "'", int21 == 35);
        org.junit.Assert.assertNotNull(regularTimePeriod22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
    }

    @Test
    public void test1010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1010");
        org.jfree.data.time.Week week0 = new org.jfree.data.time.Week();
        long long1 = week0.getFirstMillisecond();
        long long2 = week0.getSerialIndex();
        int int3 = week0.getYearValue();
        java.util.Date date4 = week0.getEnd();
        java.util.Calendar calendar5 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long6 = week0.getLastMillisecond(calendar5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1637449200000L + "'", long1 == 1637449200000L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 107161L + "'", long2 == 107161L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2021 + "'", int3 == 2021);
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Sat Nov 27 23:59:59 CET 2021");
    }

    @Test
    public void test1011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1011");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date3 = week2.getStart();
        java.util.Date date4 = week2.getEnd();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod8 = week7.next();
        java.lang.Class<?> wildcardClass9 = week7.getClass();
        java.lang.Class class10 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass9);
        org.jfree.data.time.Week week13 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date14 = week13.getStart();
        java.lang.Class class15 = null;
        java.util.Date date16 = null;
        java.util.TimeZone timeZone17 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod18 = org.jfree.data.time.RegularTimePeriod.createInstance(class15, date16, timeZone17);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod19 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass9, date14, timeZone17);
        org.jfree.data.time.Week week20 = new org.jfree.data.time.Week(date4, timeZone17);
        java.util.Date date21 = week20.getEnd();
        int int22 = week20.getWeek();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod23 = week20.previous();
        long long24 = week20.getFirstMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod25 = week20.next();
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(class10);
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone17);
// flaky:         org.junit.Assert.assertEquals(timeZone17.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod18);
        org.junit.Assert.assertNotNull(regularTimePeriod19);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 9 + "'", int22 == 9);
        org.junit.Assert.assertNotNull(regularTimePeriod23);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-59101405200000L) + "'", long24 == (-59101405200000L));
        org.junit.Assert.assertNotNull(regularTimePeriod25);
    }

    @Test
    public void test1012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1012");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '4', (int) ' ');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.previous();
        int int4 = week2.getWeek();
        int int5 = week2.getYearValue();
        java.util.Date date6 = week2.getStart();
        java.util.Calendar calendar7 = null;
        // The following exception was thrown during execution in test generation
        try {
            week2.peg(calendar7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 32 + "'", int5 == 32);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sun Dec 21 00:00:00 CET 32");
    }

    @Test
    public void test1013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1013");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) (short) 100, (int) (byte) -1);
        long long3 = week2.getMiddleMillisecond();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-62139013200001L) + "'", long3 == (-62139013200001L));
    }

    @Test
    public void test1014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1014");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) (short) 10, (int) (byte) 100);
        int int3 = week2.getWeek();
        java.util.Calendar calendar4 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long5 = week2.getFirstMillisecond(calendar4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 10 + "'", int3 == 10);
    }

    @Test
    public void test1015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1015");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date3 = week2.getStart();
        org.jfree.data.time.Week week4 = new org.jfree.data.time.Week(date3);
        long long5 = week4.getSerialIndex();
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str9 = week8.toString();
        long long10 = week8.getSerialIndex();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod11 = week8.next();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod12 = week8.previous();
        java.lang.Class<?> wildcardClass13 = week8.getClass();
        java.lang.Class class14 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass13);
        boolean boolean15 = week4.equals((java.lang.Object) wildcardClass13);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod16 = week4.previous();
        java.util.Calendar calendar17 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long18 = regularTimePeriod16.getMiddleMillisecond(calendar17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 5150L + "'", long5 == 5150L);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Week 35, 52" + "'", str9, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 2791L + "'", long10 == 2791L);
        org.junit.Assert.assertNotNull(regularTimePeriod11);
        org.junit.Assert.assertNotNull(regularTimePeriod12);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(class14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(regularTimePeriod16);
    }

    @Test
    public void test1016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1016");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week();
        long long3 = week2.getFirstMillisecond();
        org.jfree.data.time.Year year4 = week2.getYear();
        org.jfree.data.time.Week week5 = new org.jfree.data.time.Week(0, year4);
        java.util.Date date6 = year4.getStart();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week(48, year4);
        java.util.Calendar calendar8 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long9 = week7.getFirstMillisecond(calendar8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1637449200000L + "'", long3 == 1637449200000L);
        org.junit.Assert.assertNotNull(year4);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Fri Jan 01 00:00:00 CET 2021");
    }

    @Test
    public void test1017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1017");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        java.util.Date date10 = week2.getStart();
        org.jfree.data.time.Week week11 = new org.jfree.data.time.Week(date10);
        org.jfree.data.time.Week week14 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod15 = week14.next();
        int int16 = week14.getYearValue();
        long long17 = week14.getLastMillisecond();
        java.util.Date date18 = week14.getEnd();
        org.jfree.data.time.Week week21 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str22 = week21.toString();
        long long23 = week21.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod24 = week21.next();
        java.util.Date date25 = week21.getEnd();
        org.jfree.data.time.Week week26 = new org.jfree.data.time.Week(date25);
        org.jfree.data.time.Week week29 = new org.jfree.data.time.Week(100, 10);
        java.util.Date date30 = week29.getEnd();
        org.jfree.data.time.Week week33 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date34 = week33.getStart();
        java.util.Date date35 = week33.getEnd();
        int int36 = week33.getYearValue();
        long long37 = week33.getLastMillisecond();
        java.lang.Class<?> wildcardClass38 = week33.getClass();
        java.util.Date date39 = null;
        org.jfree.data.time.Week week42 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.util.Date date43 = week42.getStart();
        int int44 = week42.getYearValue();
        java.util.Date date45 = week42.getEnd();
        org.jfree.data.time.Week week48 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod49 = week48.next();
        java.lang.Class<?> wildcardClass50 = week48.getClass();
        java.lang.Class class51 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass50);
        java.lang.Class class52 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass50);
        org.jfree.data.time.Week week55 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod56 = week55.next();
        int int57 = week55.getYearValue();
        java.util.TimeZone timeZone58 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int59 = week55.compareTo((java.lang.Object) timeZone58);
        int int60 = week55.getYearValue();
        int int62 = week55.compareTo((java.lang.Object) 9);
        java.util.Date date63 = week55.getStart();
        org.jfree.data.time.Week week64 = new org.jfree.data.time.Week(date63);
        org.jfree.data.time.Week week67 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod68 = week67.next();
        int int69 = week67.getYearValue();
        java.util.TimeZone timeZone70 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int71 = week67.compareTo((java.lang.Object) timeZone70);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod72 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass50, date63, timeZone70);
        org.jfree.data.time.Week week75 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod76 = week75.previous();
        int int77 = week75.getYearValue();
        java.util.Date date78 = week75.getStart();
        java.util.TimeZone timeZone79 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.Week week80 = new org.jfree.data.time.Week(date78, timeZone79);
        org.jfree.data.time.Week week81 = new org.jfree.data.time.Week(date63, timeZone79);
        org.jfree.data.time.Week week82 = new org.jfree.data.time.Week(date45, timeZone79);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod83 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass38, date39, timeZone79);
        org.jfree.data.time.Week week84 = new org.jfree.data.time.Week(date30, timeZone79);
        org.jfree.data.time.Week week85 = new org.jfree.data.time.Week(date25, timeZone79);
        org.jfree.data.time.Week week86 = new org.jfree.data.time.Week(date18, timeZone79);
        java.util.Locale locale87 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Week week88 = new org.jfree.data.time.Week(date10, timeZone79, locale87);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'locale' argument.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 52 + "'", int16 == 52);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-60505750800001L) + "'", long17 == (-60505750800001L));
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Week 35, 52" + "'", str22, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-60506053200001L) + "'", long23 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod24);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Sat Nov 28 23:59:59 CET 11");
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 97 + "'", int36 == 97);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + (-59100800400001L) + "'", long37 == (-59100800400001L));
        org.junit.Assert.assertNotNull(wildcardClass38);
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 52 + "'", int44 == 52);
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod49);
        org.junit.Assert.assertNotNull(wildcardClass50);
        org.junit.Assert.assertNotNull(class51);
        org.junit.Assert.assertNotNull(class52);
        org.junit.Assert.assertNotNull(regularTimePeriod56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 52 + "'", int57 == 52);
        org.junit.Assert.assertNotNull(timeZone58);
// flaky:         org.junit.Assert.assertEquals(timeZone58.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 52 + "'", int60 == 52);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertNotNull(date63);
        org.junit.Assert.assertEquals(date63.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 52 + "'", int69 == 52);
        org.junit.Assert.assertNotNull(timeZone70);
// flaky:         org.junit.Assert.assertEquals(timeZone70.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod72);
        org.junit.Assert.assertNotNull(regularTimePeriod76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 52 + "'", int77 == 52);
        org.junit.Assert.assertNotNull(date78);
        org.junit.Assert.assertEquals(date78.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(timeZone79);
// flaky:         org.junit.Assert.assertEquals(timeZone79.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod83);
    }

    @Test
    public void test1018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1018");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date3 = week2.getStart();
        java.util.Date date4 = week2.getEnd();
        int int5 = week2.getYearValue();
        java.util.Date date6 = week2.getEnd();
        java.util.Date date7 = week2.getStart();
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week(date7);
        org.jfree.data.time.Week week11 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod12 = week11.next();
        int int13 = week11.getYearValue();
        java.util.TimeZone timeZone14 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int15 = week11.compareTo((java.lang.Object) timeZone14);
        int int16 = week11.getYearValue();
        int int18 = week11.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod19 = week11.previous();
        int int20 = week11.getYearValue();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod21 = week11.next();
        java.lang.Class<?> wildcardClass22 = regularTimePeriod21.getClass();
        org.jfree.data.time.Week week25 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod26 = week25.next();
        int int27 = week25.getYearValue();
        java.util.TimeZone timeZone28 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int29 = week25.compareTo((java.lang.Object) timeZone28);
        int int30 = week25.getYearValue();
        int int32 = week25.compareTo((java.lang.Object) 9);
        int int33 = week25.getYearValue();
        long long34 = week25.getLastMillisecond();
        int int35 = week25.getWeek();
        java.util.Date date36 = week25.getEnd();
        org.jfree.data.time.Week week39 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date40 = week39.getStart();
        java.util.Date date41 = week39.getEnd();
        org.jfree.data.time.Week week44 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod45 = week44.next();
        java.lang.Class<?> wildcardClass46 = week44.getClass();
        java.lang.Class class47 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass46);
        org.jfree.data.time.Week week50 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date51 = week50.getStart();
        java.lang.Class class52 = null;
        java.util.Date date53 = null;
        java.util.TimeZone timeZone54 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod55 = org.jfree.data.time.RegularTimePeriod.createInstance(class52, date53, timeZone54);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod56 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass46, date51, timeZone54);
        org.jfree.data.time.Week week57 = new org.jfree.data.time.Week(date41, timeZone54);
        org.jfree.data.time.Week week58 = new org.jfree.data.time.Week(date36, timeZone54);
        java.util.Date date59 = week58.getStart();
        java.lang.Class class60 = null;
        java.util.Date date61 = null;
        java.util.TimeZone timeZone62 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod63 = org.jfree.data.time.RegularTimePeriod.createInstance(class60, date61, timeZone62);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod64 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass22, date59, timeZone62);
        java.util.Locale locale65 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Week week66 = new org.jfree.data.time.Week(date7, timeZone62, locale65);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'locale' argument.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 97 + "'", int5 == 97);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 52 + "'", int13 == 52);
        org.junit.Assert.assertNotNull(timeZone14);
// flaky:         org.junit.Assert.assertEquals(timeZone14.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 52 + "'", int16 == 52);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 52 + "'", int20 == 52);
        org.junit.Assert.assertNotNull(regularTimePeriod21);
        org.junit.Assert.assertNotNull(wildcardClass22);
        org.junit.Assert.assertNotNull(regularTimePeriod26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 52 + "'", int27 == 52);
        org.junit.Assert.assertNotNull(timeZone28);
// flaky:         org.junit.Assert.assertEquals(timeZone28.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 52 + "'", int30 == 52);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 52 + "'", int33 == 52);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + (-60505750800001L) + "'", long34 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 35 + "'", int35 == 35);
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod45);
        org.junit.Assert.assertNotNull(wildcardClass46);
        org.junit.Assert.assertNotNull(class47);
        org.junit.Assert.assertNotNull(date51);
        org.junit.Assert.assertEquals(date51.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone54);
// flaky:         org.junit.Assert.assertEquals(timeZone54.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod55);
        org.junit.Assert.assertNotNull(regularTimePeriod56);
        org.junit.Assert.assertNotNull(date59);
        org.junit.Assert.assertEquals(date59.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(timeZone62);
// flaky:         org.junit.Assert.assertEquals(timeZone62.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod63);
        org.junit.Assert.assertNotNull(regularTimePeriod64);
    }

    @Test
    public void test1019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1019");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date3 = week2.getStart();
        org.jfree.data.time.Week week4 = new org.jfree.data.time.Week(date3);
        long long5 = week4.getSerialIndex();
        java.lang.String str6 = week4.toString();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod7 = week4.previous();
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 5150L + "'", long5 == 5150L);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Week 9, 97" + "'", str6, "Week 9, 97");
        org.junit.Assert.assertNotNull(regularTimePeriod7);
    }

    @Test
    public void test1020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1020");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(8, (int) (short) 0);
    }

    @Test
    public void test1021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1021");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        long long5 = week2.getLastMillisecond();
        boolean boolean7 = week2.equals((java.lang.Object) (short) 10);
        long long8 = week2.getMiddleMillisecond();
        java.lang.Class<?> wildcardClass9 = week2.getClass();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-60505750800001L) + "'", long5 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-60506053200001L) + "'", long8 == (-60506053200001L));
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test1022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1022");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        java.util.Date date10 = week2.getStart();
        long long11 = week2.getLastMillisecond();
        java.util.Calendar calendar12 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long13 = week2.getFirstMillisecond(calendar12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-60505750800001L) + "'", long11 == (-60505750800001L));
    }

    @Test
    public void test1023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1023");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        int int11 = week2.getYearValue();
        long long12 = week2.getLastMillisecond();
        org.jfree.data.time.Week week15 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod16 = week15.next();
        java.lang.Class<?> wildcardClass17 = week15.getClass();
        java.lang.Class class18 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass17);
        boolean boolean19 = week2.equals((java.lang.Object) wildcardClass17);
        int int20 = week2.getYearValue();
        int int21 = week2.getWeek();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-60505750800001L) + "'", long12 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(class18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 52 + "'", int20 == 52);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 35 + "'", int21 == 35);
    }

    @Test
    public void test1024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1024");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(48, 5);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        long long4 = week2.getMiddleMillisecond();
        java.util.Calendar calendar5 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long6 = week2.getLastMillisecond(calendar5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-61981160400001L) + "'", long4 == (-61981160400001L));
    }

    @Test
    public void test1025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1025");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(35, 0);
        long long3 = week2.getSerialIndex();
        long long4 = week2.getFirstMillisecond();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod8 = week7.next();
        int int9 = week7.getYearValue();
        java.util.TimeZone timeZone10 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int11 = week7.compareTo((java.lang.Object) timeZone10);
        int int12 = week7.getYearValue();
        int int14 = week7.compareTo((java.lang.Object) 9);
        java.util.Date date15 = week7.getStart();
        org.jfree.data.time.Week week18 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod19 = week18.next();
        java.lang.Class<?> wildcardClass20 = week18.getClass();
        java.lang.Class class21 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass20);
        java.lang.Class class22 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass20);
        org.jfree.data.time.Week week25 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod26 = week25.next();
        int int27 = week25.getYearValue();
        java.util.TimeZone timeZone28 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int29 = week25.compareTo((java.lang.Object) timeZone28);
        int int30 = week25.getYearValue();
        int int32 = week25.compareTo((java.lang.Object) 9);
        java.util.Date date33 = week25.getStart();
        org.jfree.data.time.Week week34 = new org.jfree.data.time.Week(date33);
        org.jfree.data.time.Week week37 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod38 = week37.next();
        int int39 = week37.getYearValue();
        java.util.TimeZone timeZone40 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int41 = week37.compareTo((java.lang.Object) timeZone40);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod42 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass20, date33, timeZone40);
        org.jfree.data.time.Week week45 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod46 = week45.previous();
        int int47 = week45.getYearValue();
        java.util.Date date48 = week45.getStart();
        java.util.TimeZone timeZone49 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.Week week50 = new org.jfree.data.time.Week(date48, timeZone49);
        org.jfree.data.time.Week week51 = new org.jfree.data.time.Week(date33, timeZone49);
        org.jfree.data.time.Week week52 = new org.jfree.data.time.Week(date15, timeZone49);
        int int53 = week52.getWeek();
        org.jfree.data.time.Week week56 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod57 = week56.previous();
        int int58 = week56.getYearValue();
        long long59 = week56.getSerialIndex();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod60 = week56.next();
        long long61 = week56.getSerialIndex();
        int int62 = week52.compareTo((java.lang.Object) long61);
        // The following exception was thrown during execution in test generation
        try {
            int int63 = week2.compareTo((java.lang.Object) week52);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Year constructor: year (52) outside valid range.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 35L + "'", long3 == 35L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-62147178000000L) + "'", long4 == (-62147178000000L));
        org.junit.Assert.assertNotNull(regularTimePeriod8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 52 + "'", int9 == 52);
        org.junit.Assert.assertNotNull(timeZone10);
// flaky:         org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertNotNull(class21);
        org.junit.Assert.assertNotNull(class22);
        org.junit.Assert.assertNotNull(regularTimePeriod26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 52 + "'", int27 == 52);
        org.junit.Assert.assertNotNull(timeZone28);
// flaky:         org.junit.Assert.assertEquals(timeZone28.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 52 + "'", int30 == 52);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 52 + "'", int39 == 52);
        org.junit.Assert.assertNotNull(timeZone40);
// flaky:         org.junit.Assert.assertEquals(timeZone40.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod42);
        org.junit.Assert.assertNotNull(regularTimePeriod46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 52 + "'", int47 == 52);
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(timeZone49);
// flaky:         org.junit.Assert.assertEquals(timeZone49.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 35 + "'", int53 == 35);
        org.junit.Assert.assertNotNull(regularTimePeriod57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 52 + "'", int58 == 52);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 2791L + "'", long59 == 2791L);
        org.junit.Assert.assertNotNull(regularTimePeriod60);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 2791L + "'", long61 == 2791L);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
    }

    @Test
    public void test1026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1026");
        org.jfree.data.time.Week week4 = new org.jfree.data.time.Week();
        long long5 = week4.getFirstMillisecond();
        org.jfree.data.time.Year year6 = week4.getYear();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week(0, year6);
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week(11, year6);
        org.jfree.data.time.Week week9 = new org.jfree.data.time.Week(3, year6);
        org.jfree.data.time.Week week10 = new org.jfree.data.time.Week((int) (short) 100, year6);
        java.util.Date date11 = week10.getEnd();
        java.util.Date date12 = week10.getStart();
        java.lang.Class class13 = null;
        java.util.Date date14 = null;
        java.util.TimeZone timeZone15 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod16 = org.jfree.data.time.RegularTimePeriod.createInstance(class13, date14, timeZone15);
        java.util.Locale locale17 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Week week18 = new org.jfree.data.time.Week(date12, timeZone15, locale17);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'locale' argument.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1637449200000L + "'", long5 == 1637449200000L);
        org.junit.Assert.assertNotNull(year6);
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Sat Nov 26 23:59:59 CET 2022");
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Sun Nov 20 00:00:00 CET 2022");
        org.junit.Assert.assertNotNull(timeZone15);
// flaky:         org.junit.Assert.assertEquals(timeZone15.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod16);
    }

    @Test
    public void test1027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1027");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        int int10 = week2.getYearValue();
        long long11 = week2.getLastMillisecond();
        long long12 = week2.getSerialIndex();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod13 = week2.next();
        int int14 = week2.getYearValue();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod15 = week2.previous();
        org.jfree.data.time.Week week18 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str19 = week18.toString();
        long long20 = week18.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod21 = week18.next();
        java.util.Date date22 = week18.getEnd();
        org.jfree.data.time.Week week23 = new org.jfree.data.time.Week(date22);
        java.lang.Class<?> wildcardClass24 = week23.getClass();
        boolean boolean25 = week2.equals((java.lang.Object) wildcardClass24);
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 52 + "'", int10 == 52);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-60505750800001L) + "'", long11 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 2791L + "'", long12 == 2791L);
        org.junit.Assert.assertNotNull(regularTimePeriod13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 52 + "'", int14 == 52);
        org.junit.Assert.assertNotNull(regularTimePeriod15);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Week 35, 52" + "'", str19, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-60506053200001L) + "'", long20 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test1028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1028");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, 2);
        java.lang.String str3 = week2.toString();
        int int4 = week2.getYearValue();
        org.jfree.data.time.Week week5 = new org.jfree.data.time.Week();
        long long6 = week5.getFirstMillisecond();
        org.jfree.data.time.Year year7 = week5.getYear();
        int int8 = week5.getWeek();
        java.util.Date date9 = week5.getStart();
        int int10 = week2.compareTo((java.lang.Object) week5);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 9, 2" + "'", str3, "Week 9, 2");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2 + "'", int4 == 2);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1637449200000L + "'", long6 == 1637449200000L);
        org.junit.Assert.assertNotNull(year7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 48 + "'", int8 == 48);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Sun Nov 21 00:00:00 CET 2021");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-2019) + "'", int10 == (-2019));
    }

    @Test
    public void test1029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1029");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date3 = week2.getStart();
        java.util.Date date4 = week2.getEnd();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.previous();
        java.util.Calendar calendar6 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long7 = regularTimePeriod5.getMiddleMillisecond(calendar6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod5);
    }

    @Test
    public void test1030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1030");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) (byte) 1, (int) (byte) 0);
        org.jfree.data.time.Week week5 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod6 = week5.next();
        int int7 = week5.getYearValue();
        java.util.TimeZone timeZone8 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int9 = week5.compareTo((java.lang.Object) timeZone8);
        int int10 = week5.getYearValue();
        int int12 = week5.compareTo((java.lang.Object) 9);
        java.util.Date date13 = week5.getStart();
        int int15 = week5.compareTo((java.lang.Object) (short) 100);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod16 = week5.next();
        int int17 = week5.getWeek();
        boolean boolean18 = week2.equals((java.lang.Object) week5);
        long long19 = week2.getMiddleMillisecond();
        int int20 = week2.getWeek();
        org.junit.Assert.assertNotNull(regularTimePeriod6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertNotNull(timeZone8);
// flaky:         org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 52 + "'", int10 == 52);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 35 + "'", int17 == 35);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-62167438800001L) + "'", long19 == (-62167438800001L));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
    }

    @Test
    public void test1031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1031");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(35, 10);
        java.util.Date date3 = week2.getEnd();
        org.jfree.data.time.Week week4 = new org.jfree.data.time.Week(date3);
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Year year5 = week4.getYear();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Year constructor: year (10) outside valid range.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sat Aug 30 23:59:59 CET 10");
    }

    @Test
    public void test1032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1032");
        org.jfree.data.time.Week week1 = new org.jfree.data.time.Week();
        long long2 = week1.getFirstMillisecond();
        org.jfree.data.time.Year year3 = week1.getYear();
        org.jfree.data.time.Week week4 = new org.jfree.data.time.Week((int) (byte) 100, year3);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week4.next();
        java.util.Date date6 = week4.getEnd();
        int int7 = week4.getYearValue();
        java.util.Calendar calendar8 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long9 = week4.getLastMillisecond(calendar8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1637449200000L + "'", long2 == 1637449200000L);
        org.junit.Assert.assertNotNull(year3);
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Nov 26 23:59:59 CET 2022");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2021 + "'", int7 == 2021);
    }

    @Test
    public void test1033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1033");
        org.jfree.data.time.Week week3 = new org.jfree.data.time.Week();
        long long4 = week3.getFirstMillisecond();
        org.jfree.data.time.Year year5 = week3.getYear();
        org.jfree.data.time.Week week6 = new org.jfree.data.time.Week(0, year5);
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week(11, year5);
        long long8 = week7.getSerialIndex();
        org.jfree.data.time.Year year9 = week7.getYear();
        org.jfree.data.time.Week week10 = new org.jfree.data.time.Week((int) (short) 1, year9);
        long long11 = week10.getLastMillisecond();
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1637449200000L + "'", long4 == 1637449200000L);
        org.junit.Assert.assertNotNull(year5);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 107124L + "'", long8 == 107124L);
        org.junit.Assert.assertNotNull(year9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1609628399999L + "'", long11 == 1609628399999L);
    }

    @Test
    public void test1034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1034");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(0, 32);
    }

    @Test
    public void test1035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1035");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.util.Date date3 = week2.getStart();
        org.jfree.data.time.Week week6 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.util.Date date7 = week6.getStart();
        int int8 = week6.getYearValue();
        java.util.Date date9 = week6.getEnd();
        org.jfree.data.time.Week week12 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod13 = week12.next();
        java.lang.Class<?> wildcardClass14 = week12.getClass();
        java.lang.Class class15 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass14);
        java.lang.Class class16 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass14);
        org.jfree.data.time.Week week19 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod20 = week19.next();
        int int21 = week19.getYearValue();
        java.util.TimeZone timeZone22 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int23 = week19.compareTo((java.lang.Object) timeZone22);
        int int24 = week19.getYearValue();
        int int26 = week19.compareTo((java.lang.Object) 9);
        java.util.Date date27 = week19.getStart();
        org.jfree.data.time.Week week28 = new org.jfree.data.time.Week(date27);
        org.jfree.data.time.Week week31 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod32 = week31.next();
        int int33 = week31.getYearValue();
        java.util.TimeZone timeZone34 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int35 = week31.compareTo((java.lang.Object) timeZone34);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod36 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass14, date27, timeZone34);
        org.jfree.data.time.Week week39 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod40 = week39.previous();
        int int41 = week39.getYearValue();
        java.util.Date date42 = week39.getStart();
        java.util.TimeZone timeZone43 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.Week week44 = new org.jfree.data.time.Week(date42, timeZone43);
        org.jfree.data.time.Week week45 = new org.jfree.data.time.Week(date27, timeZone43);
        org.jfree.data.time.Week week46 = new org.jfree.data.time.Week(date9, timeZone43);
        boolean boolean47 = week2.equals((java.lang.Object) date9);
        org.jfree.data.time.Week week48 = new org.jfree.data.time.Week(date9);
        java.util.Calendar calendar49 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long50 = week48.getLastMillisecond(calendar49);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 52 + "'", int8 == 52);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod13);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(class15);
        org.junit.Assert.assertNotNull(class16);
        org.junit.Assert.assertNotNull(regularTimePeriod20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 52 + "'", int21 == 52);
        org.junit.Assert.assertNotNull(timeZone22);
// flaky:         org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 52 + "'", int24 == 52);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 52 + "'", int33 == 52);
        org.junit.Assert.assertNotNull(timeZone34);
// flaky:         org.junit.Assert.assertEquals(timeZone34.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod36);
        org.junit.Assert.assertNotNull(regularTimePeriod40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 52 + "'", int41 == 52);
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(timeZone43);
// flaky:         org.junit.Assert.assertEquals(timeZone43.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    public void test1036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1036");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        int int11 = week2.getYearValue();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod12 = week2.next();
        java.lang.Class<?> wildcardClass13 = regularTimePeriod12.getClass();
        org.jfree.data.time.Week week16 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod17 = week16.next();
        java.lang.Class<?> wildcardClass18 = week16.getClass();
        java.lang.Class class19 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass18);
        java.lang.Class class20 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass18);
        org.jfree.data.time.Week week23 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod24 = week23.next();
        int int25 = week23.getYearValue();
        java.util.TimeZone timeZone26 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int27 = week23.compareTo((java.lang.Object) timeZone26);
        int int28 = week23.getYearValue();
        int int30 = week23.compareTo((java.lang.Object) 9);
        java.util.Date date31 = week23.getStart();
        org.jfree.data.time.Week week32 = new org.jfree.data.time.Week(date31);
        org.jfree.data.time.Week week35 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod36 = week35.next();
        int int37 = week35.getYearValue();
        java.util.TimeZone timeZone38 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int39 = week35.compareTo((java.lang.Object) timeZone38);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod40 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass18, date31, timeZone38);
        org.jfree.data.time.Week week43 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str44 = week43.toString();
        long long45 = week43.getMiddleMillisecond();
        long long46 = week43.getLastMillisecond();
        org.jfree.data.time.Week week49 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod50 = week49.next();
        java.lang.Class<?> wildcardClass51 = week49.getClass();
        java.lang.Class class52 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass51);
        int int53 = week43.compareTo((java.lang.Object) wildcardClass51);
        java.lang.Class class54 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass51);
        org.jfree.data.time.Week week57 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod58 = week57.next();
        java.lang.Class<?> wildcardClass59 = week57.getClass();
        java.lang.Class class60 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass59);
        org.jfree.data.time.Week week63 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date64 = week63.getStart();
        java.lang.Class class65 = null;
        java.util.Date date66 = null;
        java.util.TimeZone timeZone67 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod68 = org.jfree.data.time.RegularTimePeriod.createInstance(class65, date66, timeZone67);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod69 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass59, date64, timeZone67);
        java.util.TimeZone timeZone70 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod71 = org.jfree.data.time.RegularTimePeriod.createInstance(class54, date64, timeZone70);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod72 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass13, date31, timeZone70);
        org.jfree.data.time.Week week73 = new org.jfree.data.time.Week(date31);
        int int74 = week73.getYearValue();
        long long75 = week73.getSerialIndex();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod76 = week73.next();
        long long77 = week73.getMiddleMillisecond();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertNotNull(regularTimePeriod12);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(regularTimePeriod17);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(class19);
        org.junit.Assert.assertNotNull(class20);
        org.junit.Assert.assertNotNull(regularTimePeriod24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 52 + "'", int25 == 52);
        org.junit.Assert.assertNotNull(timeZone26);
// flaky:         org.junit.Assert.assertEquals(timeZone26.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 52 + "'", int28 == 52);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 52 + "'", int37 == 52);
        org.junit.Assert.assertNotNull(timeZone38);
// flaky:         org.junit.Assert.assertEquals(timeZone38.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod40);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Week 35, 52" + "'", str44, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + (-60506053200001L) + "'", long45 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + (-60505750800001L) + "'", long46 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod50);
        org.junit.Assert.assertNotNull(wildcardClass51);
        org.junit.Assert.assertNotNull(class52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(class54);
        org.junit.Assert.assertNotNull(regularTimePeriod58);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(class60);
        org.junit.Assert.assertNotNull(date64);
        org.junit.Assert.assertEquals(date64.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone67);
// flaky:         org.junit.Assert.assertEquals(timeZone67.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod68);
        org.junit.Assert.assertNotNull(regularTimePeriod69);
        org.junit.Assert.assertNotNull(timeZone70);
// flaky:         org.junit.Assert.assertEquals(timeZone70.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod71);
        org.junit.Assert.assertNotNull(regularTimePeriod72);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 52 + "'", int74 == 52);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 2791L + "'", long75 == 2791L);
        org.junit.Assert.assertNotNull(regularTimePeriod76);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + (-60506053200001L) + "'", long77 == (-60506053200001L));
    }

    @Test
    public void test1037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1037");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.util.Date date3 = week2.getStart();
        int int4 = week2.getYearValue();
        long long5 = week2.getLastMillisecond();
        int int6 = week2.getYearValue();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod7 = week2.next();
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-60505750800001L) + "'", long5 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 52 + "'", int6 == 52);
        org.junit.Assert.assertNotNull(regularTimePeriod7);
    }

    @Test
    public void test1038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1038");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        java.lang.String str7 = week2.toString();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod8 = week2.previous();
        java.lang.String str9 = week2.toString();
        java.lang.String str10 = week2.toString();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Week 35, 52" + "'", str7, "Week 35, 52");
        org.junit.Assert.assertNotNull(regularTimePeriod8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Week 35, 52" + "'", str9, "Week 35, 52");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Week 35, 52" + "'", str10, "Week 35, 52");
    }

    @Test
    public void test1039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1039");
        java.util.Date date0 = null;
        org.jfree.data.time.Week week3 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod4 = week3.previous();
        int int5 = week3.getYearValue();
        java.util.Date date6 = week3.getEnd();
        long long7 = week3.getMiddleMillisecond();
        org.jfree.data.time.Week week10 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod11 = week10.next();
        int int12 = week10.getYearValue();
        java.util.TimeZone timeZone13 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int14 = week10.compareTo((java.lang.Object) timeZone13);
        int int15 = week10.getYearValue();
        int int17 = week10.compareTo((java.lang.Object) 9);
        java.util.Date date18 = week10.getStart();
        boolean boolean19 = week3.equals((java.lang.Object) date18);
        java.util.Date date20 = week3.getEnd();
        org.jfree.data.time.Week week23 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod24 = week23.next();
        java.lang.Class<?> wildcardClass25 = week23.getClass();
        java.lang.Class class26 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass25);
        java.lang.Class class27 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass25);
        java.lang.Class class28 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass25);
        org.jfree.data.time.Week week31 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date32 = week31.getStart();
        org.jfree.data.time.Week week33 = new org.jfree.data.time.Week(date32);
        java.util.TimeZone timeZone34 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod35 = org.jfree.data.time.RegularTimePeriod.createInstance(class28, date32, timeZone34);
        org.jfree.data.time.Week week36 = new org.jfree.data.time.Week(date20, timeZone34);
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Week week37 = new org.jfree.data.time.Week(date0, timeZone34);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'time' argument.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 52 + "'", int5 == 52);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-60506053200001L) + "'", long7 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
        org.junit.Assert.assertNotNull(timeZone13);
// flaky:         org.junit.Assert.assertEquals(timeZone13.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 52 + "'", int15 == 52);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod24);
        org.junit.Assert.assertNotNull(wildcardClass25);
        org.junit.Assert.assertNotNull(class26);
        org.junit.Assert.assertNotNull(class27);
        org.junit.Assert.assertNotNull(class28);
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone34);
// flaky:         org.junit.Assert.assertEquals(timeZone34.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod35);
    }

    @Test
    public void test1040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1040");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        int int11 = week2.getYearValue();
        long long12 = week2.getLastMillisecond();
        int int13 = week2.getWeek();
        int int15 = week2.compareTo((java.lang.Object) 0);
        long long16 = week2.getFirstMillisecond();
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Year year17 = week2.getYear();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Year constructor: year (52) outside valid range.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-60505750800001L) + "'", long12 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-60506355600000L) + "'", long16 == (-60506355600000L));
    }

    @Test
    public void test1041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1041");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        int int10 = week2.getYearValue();
        long long11 = week2.getLastMillisecond();
        long long12 = week2.getSerialIndex();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod13 = week2.next();
        java.util.Calendar calendar14 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long15 = week2.getFirstMillisecond(calendar14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 52 + "'", int10 == 52);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-60505750800001L) + "'", long11 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 2791L + "'", long12 == 2791L);
        org.junit.Assert.assertNotNull(regularTimePeriod13);
    }

    @Test
    public void test1042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1042");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        int int11 = week2.getYearValue();
        long long12 = week2.getLastMillisecond();
        int int13 = week2.getWeek();
        int int14 = week2.getYearValue();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod15 = week2.next();
        long long16 = week2.getSerialIndex();
        java.util.Date date17 = week2.getEnd();
        java.util.Calendar calendar18 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long19 = week2.getLastMillisecond(calendar18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-60505750800001L) + "'", long12 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 52 + "'", int14 == 52);
        org.junit.Assert.assertNotNull(regularTimePeriod15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 2791L + "'", long16 == 2791L);
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Sat Aug 26 23:59:59 CET 52");
    }

    @Test
    public void test1043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1043");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        int int11 = week2.getYearValue();
        long long12 = week2.getLastMillisecond();
        org.jfree.data.time.Week week15 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod16 = week15.next();
        java.lang.Class<?> wildcardClass17 = week15.getClass();
        java.lang.Class class18 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass17);
        boolean boolean19 = week2.equals((java.lang.Object) wildcardClass17);
        int int20 = week2.getYearValue();
        org.jfree.data.time.Week week23 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod24 = week23.next();
        int int25 = week23.getYearValue();
        java.util.TimeZone timeZone26 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int27 = week23.compareTo((java.lang.Object) timeZone26);
        int int28 = week23.getYearValue();
        int int30 = week23.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod31 = week23.previous();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod32 = week23.next();
        org.jfree.data.time.Week week35 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod36 = week35.next();
        java.lang.Class<?> wildcardClass37 = week35.getClass();
        java.lang.Class class38 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass37);
        java.lang.Class class39 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass37);
        boolean boolean40 = week23.equals((java.lang.Object) wildcardClass37);
        long long41 = week23.getSerialIndex();
        java.util.Date date42 = week23.getEnd();
        boolean boolean43 = week2.equals((java.lang.Object) date42);
        long long44 = week2.getMiddleMillisecond();
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Year year45 = week2.getYear();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Year constructor: year (52) outside valid range.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-60505750800001L) + "'", long12 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(class18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 52 + "'", int20 == 52);
        org.junit.Assert.assertNotNull(regularTimePeriod24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 52 + "'", int25 == 52);
        org.junit.Assert.assertNotNull(timeZone26);
// flaky:         org.junit.Assert.assertEquals(timeZone26.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 52 + "'", int28 == 52);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod31);
        org.junit.Assert.assertNotNull(regularTimePeriod32);
        org.junit.Assert.assertNotNull(regularTimePeriod36);
        org.junit.Assert.assertNotNull(wildcardClass37);
        org.junit.Assert.assertNotNull(class38);
        org.junit.Assert.assertNotNull(class39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 2791L + "'", long41 == 2791L);
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + (-60506053200001L) + "'", long44 == (-60506053200001L));
    }

    @Test
    public void test1044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1044");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date3 = week2.getStart();
        java.util.Date date4 = week2.getEnd();
        int int5 = week2.getYearValue();
        java.lang.String str6 = week2.toString();
        java.lang.Object obj7 = null;
        int int8 = week2.compareTo(obj7);
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Year year9 = week2.getYear();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Year constructor: year (97) outside valid range.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 97 + "'", int5 == 97);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Week 9, 97" + "'", str6, "Week 9, 97");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
    }

    @Test
    public void test1045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1045");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(35, 0);
        java.util.Calendar calendar3 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long4 = week2.getLastMillisecond(calendar3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1046");
        org.jfree.data.time.Week week6 = new org.jfree.data.time.Week();
        long long7 = week6.getFirstMillisecond();
        org.jfree.data.time.Year year8 = week6.getYear();
        org.jfree.data.time.Week week9 = new org.jfree.data.time.Week(0, year8);
        org.jfree.data.time.Week week10 = new org.jfree.data.time.Week(53, year8);
        org.jfree.data.time.Week week11 = new org.jfree.data.time.Week((int) '4', year8);
        org.jfree.data.time.Week week12 = new org.jfree.data.time.Week(52, year8);
        org.jfree.data.time.Week week13 = new org.jfree.data.time.Week(2021, year8);
        org.jfree.data.time.Week week14 = new org.jfree.data.time.Week((int) (byte) 0, year8);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1637449200000L + "'", long7 == 1637449200000L);
        org.junit.Assert.assertNotNull(year8);
    }

    @Test
    public void test1047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1047");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) (short) 100, (int) (byte) 100);
        long long3 = week2.getLastMillisecond();
        java.lang.String str4 = week2.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Year year5 = week2.getYear();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Year constructor: year (100) outside valid range.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-58951414800001L) + "'", long3 == (-58951414800001L));
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Week 100, 100" + "'", str4, "Week 100, 100");
    }

    @Test
    public void test1048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1048");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.previous();
        int int4 = week2.getYearValue();
        java.util.Date date5 = week2.getEnd();
        long long6 = week2.getMiddleMillisecond();
        org.jfree.data.time.Week week9 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week9.next();
        int int11 = week9.getYearValue();
        java.util.TimeZone timeZone12 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int13 = week9.compareTo((java.lang.Object) timeZone12);
        int int14 = week9.getYearValue();
        int int16 = week9.compareTo((java.lang.Object) 9);
        java.util.Date date17 = week9.getStart();
        boolean boolean18 = week2.equals((java.lang.Object) date17);
        java.util.Date date19 = week2.getEnd();
        org.jfree.data.time.Week week20 = new org.jfree.data.time.Week(date19);
        java.util.Calendar calendar21 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long22 = week20.getLastMillisecond(calendar21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-60506053200001L) + "'", long6 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertNotNull(timeZone12);
// flaky:         org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 52 + "'", int14 == 52);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Sat Aug 26 23:59:59 CET 52");
    }

    @Test
    public void test1049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1049");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        int int10 = week2.getYearValue();
        long long11 = week2.getLastMillisecond();
        int int12 = week2.getYearValue();
        java.lang.String str13 = week2.toString();
        long long14 = week2.getMiddleMillisecond();
        long long15 = week2.getSerialIndex();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 52 + "'", int10 == 52);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-60505750800001L) + "'", long11 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Week 35, 52" + "'", str13, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-60506053200001L) + "'", long14 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 2791L + "'", long15 == 2791L);
    }

    @Test
    public void test1050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1050");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod11 = week2.next();
        java.util.Date date12 = week2.getStart();
        org.jfree.data.time.Week week13 = new org.jfree.data.time.Week(date12);
        org.jfree.data.time.Week week16 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod17 = week16.previous();
        int int18 = week16.getYearValue();
        java.util.Date date19 = week16.getEnd();
        long long20 = week16.getMiddleMillisecond();
        org.jfree.data.time.Week week23 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod24 = week23.next();
        int int25 = week23.getYearValue();
        java.util.TimeZone timeZone26 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int27 = week23.compareTo((java.lang.Object) timeZone26);
        int int28 = week23.getYearValue();
        int int30 = week23.compareTo((java.lang.Object) 9);
        java.util.Date date31 = week23.getStart();
        boolean boolean32 = week16.equals((java.lang.Object) date31);
        java.lang.Class class33 = null;
        org.jfree.data.time.Week week36 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod37 = week36.next();
        int int38 = week36.getYearValue();
        java.util.TimeZone timeZone39 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int40 = week36.compareTo((java.lang.Object) timeZone39);
        int int41 = week36.getYearValue();
        int int43 = week36.compareTo((java.lang.Object) 9);
        java.util.Date date44 = week36.getStart();
        org.jfree.data.time.Week week45 = new org.jfree.data.time.Week(date44);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod46 = week45.next();
        int int47 = week45.getYearValue();
        java.util.Date date48 = week45.getStart();
        org.jfree.data.time.Week week51 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod52 = week51.next();
        int int53 = week51.getYearValue();
        java.util.TimeZone timeZone54 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int55 = week51.compareTo((java.lang.Object) timeZone54);
        int int56 = week51.getYearValue();
        long long57 = week51.getMiddleMillisecond();
        java.lang.Class<?> wildcardClass58 = week51.getClass();
        org.jfree.data.time.Week week61 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date62 = week61.getStart();
        org.jfree.data.time.Week week65 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod66 = week65.next();
        int int67 = week65.getYearValue();
        java.util.TimeZone timeZone68 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int69 = week65.compareTo((java.lang.Object) timeZone68);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod70 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass58, date62, timeZone68);
        org.jfree.data.time.Week week73 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod74 = week73.next();
        java.lang.Class<?> wildcardClass75 = week73.getClass();
        java.lang.Class class76 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass75);
        org.jfree.data.time.Week week79 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date80 = week79.getStart();
        java.lang.Class class81 = null;
        java.util.Date date82 = null;
        java.util.TimeZone timeZone83 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod84 = org.jfree.data.time.RegularTimePeriod.createInstance(class81, date82, timeZone83);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod85 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass75, date80, timeZone83);
        org.jfree.data.time.Week week88 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date89 = week88.getStart();
        org.jfree.data.time.Week week90 = new org.jfree.data.time.Week(date89);
        java.util.TimeZone timeZone91 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod92 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass75, date89, timeZone91);
        org.jfree.data.time.Week week93 = new org.jfree.data.time.Week(date62, timeZone91);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod94 = org.jfree.data.time.RegularTimePeriod.createInstance(class33, date48, timeZone91);
        org.jfree.data.time.Week week95 = new org.jfree.data.time.Week(date31, timeZone91);
        // The following exception was thrown during execution in test generation
        try {
            int int96 = week13.compareTo((java.lang.Object) week95);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Year constructor: year (52) outside valid range.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertNotNull(regularTimePeriod11);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 52 + "'", int18 == 52);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-60506053200001L) + "'", long20 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 52 + "'", int25 == 52);
        org.junit.Assert.assertNotNull(timeZone26);
// flaky:         org.junit.Assert.assertEquals(timeZone26.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 52 + "'", int28 == 52);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(regularTimePeriod37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 52 + "'", int38 == 52);
        org.junit.Assert.assertNotNull(timeZone39);
// flaky:         org.junit.Assert.assertEquals(timeZone39.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 52 + "'", int41 == 52);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 52 + "'", int47 == 52);
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 52 + "'", int53 == 52);
        org.junit.Assert.assertNotNull(timeZone54);
// flaky:         org.junit.Assert.assertEquals(timeZone54.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 52 + "'", int56 == 52);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + (-60506053200001L) + "'", long57 == (-60506053200001L));
        org.junit.Assert.assertNotNull(wildcardClass58);
        org.junit.Assert.assertNotNull(date62);
        org.junit.Assert.assertEquals(date62.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 52 + "'", int67 == 52);
        org.junit.Assert.assertNotNull(timeZone68);
// flaky:         org.junit.Assert.assertEquals(timeZone68.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1 + "'", int69 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod70);
        org.junit.Assert.assertNotNull(regularTimePeriod74);
        org.junit.Assert.assertNotNull(wildcardClass75);
        org.junit.Assert.assertNotNull(class76);
        org.junit.Assert.assertNotNull(date80);
        org.junit.Assert.assertEquals(date80.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone83);
// flaky:         org.junit.Assert.assertEquals(timeZone83.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod84);
        org.junit.Assert.assertNotNull(regularTimePeriod85);
        org.junit.Assert.assertNotNull(date89);
        org.junit.Assert.assertEquals(date89.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone91);
// flaky:         org.junit.Assert.assertEquals(timeZone91.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNotNull(regularTimePeriod92);
        org.junit.Assert.assertNull(regularTimePeriod94);
    }

    @Test
    public void test1051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1051");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getWeek();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod8 = week2.next();
        boolean boolean10 = week2.equals((java.lang.Object) 3);
        java.lang.String str11 = week2.toString();
        int int12 = week2.getWeek();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 35 + "'", int7 == 35);
        org.junit.Assert.assertNotNull(regularTimePeriod8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Week 35, 52" + "'", str11, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 35 + "'", int12 == 35);
    }

    @Test
    public void test1052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1052");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(2021, (int) (short) 10);
        long long3 = week2.getSerialIndex();
        java.util.Calendar calendar4 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long5 = week2.getLastMillisecond(calendar4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 503L + "'", long3 == 503L);
    }

    @Test
    public void test1053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1053");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getWeek();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod8 = week2.next();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod9 = week2.previous();
        long long10 = week2.getLastMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod11 = week2.next();
        long long12 = week2.getMiddleMillisecond();
        java.util.Calendar calendar13 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long14 = week2.getLastMillisecond(calendar13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 35 + "'", int7 == 35);
        org.junit.Assert.assertNotNull(regularTimePeriod8);
        org.junit.Assert.assertNotNull(regularTimePeriod9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-60505750800001L) + "'", long10 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-60506053200001L) + "'", long12 == (-60506053200001L));
    }

    @Test
    public void test1054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1054");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        int int11 = week2.getYearValue();
        long long12 = week2.getLastMillisecond();
        long long13 = week2.getMiddleMillisecond();
        long long14 = week2.getLastMillisecond();
        long long15 = week2.getLastMillisecond();
        org.jfree.data.time.Week week18 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod19 = week18.next();
        int int20 = week18.getYearValue();
        java.util.TimeZone timeZone21 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int22 = week18.compareTo((java.lang.Object) timeZone21);
        java.lang.String str23 = week18.toString();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod24 = week18.previous();
        boolean boolean25 = week2.equals((java.lang.Object) regularTimePeriod24);
        java.util.Calendar calendar26 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long27 = week2.getMiddleMillisecond(calendar26);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-60505750800001L) + "'", long12 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-60506053200001L) + "'", long13 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-60505750800001L) + "'", long14 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-60505750800001L) + "'", long15 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 52 + "'", int20 == 52);
        org.junit.Assert.assertNotNull(timeZone21);
// flaky:         org.junit.Assert.assertEquals(timeZone21.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Week 35, 52" + "'", str23, "Week 35, 52");
        org.junit.Assert.assertNotNull(regularTimePeriod24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test1055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1055");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.previous();
        int int4 = week2.getYearValue();
        java.util.Date date5 = week2.getStart();
        long long6 = week2.getSerialIndex();
        long long7 = week2.getFirstMillisecond();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 2791L + "'", long6 == 2791L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-60506355600000L) + "'", long7 == (-60506355600000L));
    }

    @Test
    public void test1056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1056");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date3 = week2.getStart();
        java.util.Date date4 = week2.getEnd();
        int int5 = week2.getYearValue();
        java.util.Date date6 = week2.getStart();
        int int7 = week2.getWeek();
        java.util.Date date8 = week2.getStart();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod9 = week2.previous();
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 97 + "'", int5 == 97);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 9 + "'", int7 == 9);
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod9);
    }

    @Test
    public void test1057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1057");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        java.lang.Class<?> wildcardClass4 = week2.getClass();
        java.lang.Class class5 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass4);
        java.lang.Class class6 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass4);
        org.jfree.data.time.Week week9 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week9.next();
        int int11 = week9.getYearValue();
        java.util.TimeZone timeZone12 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int13 = week9.compareTo((java.lang.Object) timeZone12);
        int int14 = week9.getYearValue();
        int int16 = week9.compareTo((java.lang.Object) 9);
        java.util.Date date17 = week9.getStart();
        org.jfree.data.time.Week week18 = new org.jfree.data.time.Week(date17);
        org.jfree.data.time.Week week21 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod22 = week21.next();
        int int23 = week21.getYearValue();
        java.util.TimeZone timeZone24 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int25 = week21.compareTo((java.lang.Object) timeZone24);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod26 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass4, date17, timeZone24);
        org.jfree.data.time.Week week29 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date30 = week29.getStart();
        java.util.Date date31 = week29.getEnd();
        org.jfree.data.time.Week week32 = new org.jfree.data.time.Week(date31);
        java.util.Date date33 = week32.getEnd();
        org.jfree.data.time.Week week36 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod37 = week36.next();
        int int38 = week36.getYearValue();
        java.util.TimeZone timeZone39 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int40 = week36.compareTo((java.lang.Object) timeZone39);
        int int41 = week36.getYearValue();
        int int43 = week36.compareTo((java.lang.Object) 9);
        int int44 = week36.getYearValue();
        long long45 = week36.getLastMillisecond();
        int int46 = week36.getWeek();
        java.util.Date date47 = week36.getEnd();
        org.jfree.data.time.Week week48 = new org.jfree.data.time.Week(date47);
        org.jfree.data.time.Week week50 = new org.jfree.data.time.Week();
        long long51 = week50.getFirstMillisecond();
        org.jfree.data.time.Year year52 = week50.getYear();
        org.jfree.data.time.Week week53 = new org.jfree.data.time.Week(0, year52);
        java.util.Date date54 = week53.getStart();
        org.jfree.data.time.Week week57 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str58 = week57.toString();
        long long59 = week57.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod60 = week57.next();
        java.util.Date date61 = week57.getEnd();
        org.jfree.data.time.Week week62 = new org.jfree.data.time.Week(date61);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod63 = week62.next();
        java.util.Date date64 = week62.getEnd();
        java.util.TimeZone timeZone65 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.Week week66 = new org.jfree.data.time.Week(date64, timeZone65);
        org.jfree.data.time.Week week67 = new org.jfree.data.time.Week(date54, timeZone65);
        org.jfree.data.time.Week week68 = new org.jfree.data.time.Week(date47, timeZone65);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod69 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass4, date33, timeZone65);
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(class5);
        org.junit.Assert.assertNotNull(class6);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertNotNull(timeZone12);
// flaky:         org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 52 + "'", int14 == 52);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 52 + "'", int23 == 52);
        org.junit.Assert.assertNotNull(timeZone24);
// flaky:         org.junit.Assert.assertEquals(timeZone24.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod26);
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 52 + "'", int38 == 52);
        org.junit.Assert.assertNotNull(timeZone39);
// flaky:         org.junit.Assert.assertEquals(timeZone39.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 52 + "'", int41 == 52);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 52 + "'", int44 == 52);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + (-60505750800001L) + "'", long45 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 35 + "'", int46 == 35);
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 1637449200000L + "'", long51 == 1637449200000L);
        org.junit.Assert.assertNotNull(year52);
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Sun Dec 20 00:00:00 CET 2020");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "Week 35, 52" + "'", str58, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + (-60506053200001L) + "'", long59 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod60);
        org.junit.Assert.assertNotNull(date61);
        org.junit.Assert.assertEquals(date61.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod63);
        org.junit.Assert.assertNotNull(date64);
        org.junit.Assert.assertEquals(date64.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(timeZone65);
// flaky:         org.junit.Assert.assertEquals(timeZone65.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNotNull(regularTimePeriod69);
    }

    @Test
    public void test1058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1058");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getSerialIndex();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.next();
        java.util.Date date6 = regularTimePeriod5.getEnd();
        org.jfree.data.time.Week week9 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date10 = week9.getStart();
        org.jfree.data.time.Week week13 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod14 = week13.next();
        int int15 = week13.getYearValue();
        java.util.TimeZone timeZone16 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int17 = week13.compareTo((java.lang.Object) timeZone16);
        org.jfree.data.time.Week week18 = new org.jfree.data.time.Week(date10, timeZone16);
        org.jfree.data.time.Week week19 = new org.jfree.data.time.Week(date6, timeZone16);
        java.util.TimeZone timeZone20 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Week week21 = new org.jfree.data.time.Week(date6, timeZone20);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'zone' argument.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 2791L + "'", long4 == 2791L);
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Sep 02 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 52 + "'", int15 == 52);
        org.junit.Assert.assertNotNull(timeZone16);
// flaky:         org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
    }

    @Test
    public void test1059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1059");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        long long4 = week2.getMiddleMillisecond();
        int int5 = week2.getWeek();
        long long6 = week2.getLastMillisecond();
        long long7 = week2.getMiddleMillisecond();
        int int8 = week2.getWeek();
        java.util.Date date9 = week2.getStart();
        java.util.Calendar calendar10 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long11 = week2.getMiddleMillisecond(calendar10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 35 + "'", int5 == 35);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-60505750800001L) + "'", long6 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-60506053200001L) + "'", long7 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 35 + "'", int8 == 35);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Sun Aug 20 00:00:00 CET 52");
    }

    @Test
    public void test1060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1060");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod7 = week2.next();
        long long8 = week2.getSerialIndex();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 2791L + "'", long8 == 2791L);
    }

    @Test
    public void test1061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1061");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        int int11 = week2.getYearValue();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod12 = week2.next();
        java.lang.Class<?> wildcardClass13 = regularTimePeriod12.getClass();
        org.jfree.data.time.Week week16 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod17 = week16.next();
        java.lang.Class<?> wildcardClass18 = week16.getClass();
        java.lang.Class class19 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass18);
        java.lang.Class class20 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass18);
        org.jfree.data.time.Week week23 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod24 = week23.next();
        int int25 = week23.getYearValue();
        java.util.TimeZone timeZone26 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int27 = week23.compareTo((java.lang.Object) timeZone26);
        int int28 = week23.getYearValue();
        int int30 = week23.compareTo((java.lang.Object) 9);
        java.util.Date date31 = week23.getStart();
        org.jfree.data.time.Week week32 = new org.jfree.data.time.Week(date31);
        org.jfree.data.time.Week week35 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod36 = week35.next();
        int int37 = week35.getYearValue();
        java.util.TimeZone timeZone38 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int39 = week35.compareTo((java.lang.Object) timeZone38);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod40 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass18, date31, timeZone38);
        org.jfree.data.time.Week week43 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str44 = week43.toString();
        long long45 = week43.getMiddleMillisecond();
        long long46 = week43.getLastMillisecond();
        org.jfree.data.time.Week week49 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod50 = week49.next();
        java.lang.Class<?> wildcardClass51 = week49.getClass();
        java.lang.Class class52 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass51);
        int int53 = week43.compareTo((java.lang.Object) wildcardClass51);
        java.lang.Class class54 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass51);
        org.jfree.data.time.Week week57 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod58 = week57.next();
        java.lang.Class<?> wildcardClass59 = week57.getClass();
        java.lang.Class class60 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass59);
        org.jfree.data.time.Week week63 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date64 = week63.getStart();
        java.lang.Class class65 = null;
        java.util.Date date66 = null;
        java.util.TimeZone timeZone67 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod68 = org.jfree.data.time.RegularTimePeriod.createInstance(class65, date66, timeZone67);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod69 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass59, date64, timeZone67);
        java.util.TimeZone timeZone70 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod71 = org.jfree.data.time.RegularTimePeriod.createInstance(class54, date64, timeZone70);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod72 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass13, date31, timeZone70);
        org.jfree.data.time.Week week73 = new org.jfree.data.time.Week(date31);
        java.util.Date date74 = week73.getEnd();
        java.util.Calendar calendar75 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long76 = week73.getLastMillisecond(calendar75);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertNotNull(regularTimePeriod12);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(regularTimePeriod17);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(class19);
        org.junit.Assert.assertNotNull(class20);
        org.junit.Assert.assertNotNull(regularTimePeriod24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 52 + "'", int25 == 52);
        org.junit.Assert.assertNotNull(timeZone26);
// flaky:         org.junit.Assert.assertEquals(timeZone26.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 52 + "'", int28 == 52);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 52 + "'", int37 == 52);
        org.junit.Assert.assertNotNull(timeZone38);
// flaky:         org.junit.Assert.assertEquals(timeZone38.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod40);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Week 35, 52" + "'", str44, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + (-60506053200001L) + "'", long45 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + (-60505750800001L) + "'", long46 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod50);
        org.junit.Assert.assertNotNull(wildcardClass51);
        org.junit.Assert.assertNotNull(class52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(class54);
        org.junit.Assert.assertNotNull(regularTimePeriod58);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(class60);
        org.junit.Assert.assertNotNull(date64);
        org.junit.Assert.assertEquals(date64.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone67);
// flaky:         org.junit.Assert.assertEquals(timeZone67.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod68);
        org.junit.Assert.assertNotNull(regularTimePeriod69);
        org.junit.Assert.assertNotNull(timeZone70);
// flaky:         org.junit.Assert.assertEquals(timeZone70.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod71);
        org.junit.Assert.assertNotNull(regularTimePeriod72);
        org.junit.Assert.assertNotNull(date74);
        org.junit.Assert.assertEquals(date74.toString(), "Sat Aug 26 23:59:59 CET 52");
    }

    @Test
    public void test1062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1062");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) (byte) 1, (-1));
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod4 = week2.next();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertNotNull(regularTimePeriod4);
    }

    @Test
    public void test1063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1063");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.next();
        java.util.Date date6 = week2.getEnd();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week(date6);
        java.util.Date date8 = week7.getStart();
        long long9 = week7.getMiddleMillisecond();
        int int10 = week7.getWeek();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-60506053200001L) + "'", long9 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 35 + "'", int10 == 35);
    }

    @Test
    public void test1064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1064");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, (int) 'a');
        org.jfree.data.time.Week week5 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod6 = week5.next();
        long long7 = week5.getMiddleMillisecond();
        java.lang.String str8 = week5.toString();
        boolean boolean9 = week2.equals((java.lang.Object) week5);
        java.util.Date date10 = week2.getStart();
        java.util.Date date11 = week2.getStart();
        org.jfree.data.time.Week week12 = new org.jfree.data.time.Week(date11);
        int int13 = week12.getYearValue();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod14 = week12.previous();
        java.util.Calendar calendar15 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long16 = week12.getMiddleMillisecond(calendar15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-60506053200001L) + "'", long7 == (-60506053200001L));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Week 35, 52" + "'", str8, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 97 + "'", int13 == 97);
        org.junit.Assert.assertNotNull(regularTimePeriod14);
    }

    @Test
    public void test1065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1065");
        org.jfree.data.time.Week week0 = new org.jfree.data.time.Week();
        long long1 = week0.getFirstMillisecond();
        org.jfree.data.time.Year year2 = week0.getYear();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week0.previous();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1637449200000L + "'", long1 == 1637449200000L);
        org.junit.Assert.assertNotNull(year2);
        org.junit.Assert.assertNotNull(regularTimePeriod3);
    }

    @Test
    public void test1066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1066");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date3 = week2.getStart();
        java.util.Date date4 = week2.getEnd();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod8 = week7.next();
        java.lang.Class<?> wildcardClass9 = week7.getClass();
        java.lang.Class class10 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass9);
        org.jfree.data.time.Week week13 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date14 = week13.getStart();
        java.lang.Class class15 = null;
        java.util.Date date16 = null;
        java.util.TimeZone timeZone17 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod18 = org.jfree.data.time.RegularTimePeriod.createInstance(class15, date16, timeZone17);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod19 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass9, date14, timeZone17);
        org.jfree.data.time.Week week20 = new org.jfree.data.time.Week(date4, timeZone17);
        java.util.Date date21 = week20.getEnd();
        int int22 = week20.getWeek();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod23 = week20.previous();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod24 = week20.previous();
        java.util.Calendar calendar25 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long26 = week20.getLastMillisecond(calendar25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(class10);
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone17);
// flaky:         org.junit.Assert.assertEquals(timeZone17.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod18);
        org.junit.Assert.assertNotNull(regularTimePeriod19);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 9 + "'", int22 == 9);
        org.junit.Assert.assertNotNull(regularTimePeriod23);
        org.junit.Assert.assertNotNull(regularTimePeriod24);
    }

    @Test
    public void test1067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1067");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.util.Date date3 = week2.getStart();
        org.jfree.data.time.Week week6 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.util.Date date7 = week6.getStart();
        int int8 = week6.getYearValue();
        java.util.Date date9 = week6.getEnd();
        org.jfree.data.time.Week week12 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod13 = week12.next();
        java.lang.Class<?> wildcardClass14 = week12.getClass();
        java.lang.Class class15 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass14);
        java.lang.Class class16 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass14);
        org.jfree.data.time.Week week19 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod20 = week19.next();
        int int21 = week19.getYearValue();
        java.util.TimeZone timeZone22 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int23 = week19.compareTo((java.lang.Object) timeZone22);
        int int24 = week19.getYearValue();
        int int26 = week19.compareTo((java.lang.Object) 9);
        java.util.Date date27 = week19.getStart();
        org.jfree.data.time.Week week28 = new org.jfree.data.time.Week(date27);
        org.jfree.data.time.Week week31 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod32 = week31.next();
        int int33 = week31.getYearValue();
        java.util.TimeZone timeZone34 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int35 = week31.compareTo((java.lang.Object) timeZone34);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod36 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass14, date27, timeZone34);
        org.jfree.data.time.Week week39 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod40 = week39.previous();
        int int41 = week39.getYearValue();
        java.util.Date date42 = week39.getStart();
        java.util.TimeZone timeZone43 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.Week week44 = new org.jfree.data.time.Week(date42, timeZone43);
        org.jfree.data.time.Week week45 = new org.jfree.data.time.Week(date27, timeZone43);
        org.jfree.data.time.Week week46 = new org.jfree.data.time.Week(date9, timeZone43);
        boolean boolean47 = week2.equals((java.lang.Object) date9);
        org.jfree.data.time.Week week50 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date51 = week50.getStart();
        org.jfree.data.time.Week week54 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod55 = week54.next();
        int int56 = week54.getYearValue();
        java.util.TimeZone timeZone57 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int58 = week54.compareTo((java.lang.Object) timeZone57);
        org.jfree.data.time.Week week59 = new org.jfree.data.time.Week(date51, timeZone57);
        org.jfree.data.time.Week week60 = new org.jfree.data.time.Week(date51);
        org.jfree.data.time.Week week63 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod64 = week63.next();
        int int65 = week63.getYearValue();
        java.util.TimeZone timeZone66 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int67 = week63.compareTo((java.lang.Object) timeZone66);
        int int68 = week63.getYearValue();
        long long69 = week63.getMiddleMillisecond();
        java.lang.Class<?> wildcardClass70 = week63.getClass();
        org.jfree.data.time.Week week73 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date74 = week73.getStart();
        org.jfree.data.time.Week week77 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod78 = week77.next();
        int int79 = week77.getYearValue();
        java.util.TimeZone timeZone80 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int81 = week77.compareTo((java.lang.Object) timeZone80);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod82 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass70, date74, timeZone80);
        org.jfree.data.time.Week week83 = new org.jfree.data.time.Week(date74);
        org.jfree.data.time.Week week86 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod87 = week86.next();
        int int88 = week86.getYearValue();
        java.util.TimeZone timeZone89 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int90 = week86.compareTo((java.lang.Object) timeZone89);
        org.jfree.data.time.Week week91 = new org.jfree.data.time.Week(date74, timeZone89);
        int int92 = week60.compareTo((java.lang.Object) timeZone89);
        org.jfree.data.time.Week week93 = new org.jfree.data.time.Week(date9, timeZone89);
        java.util.Date date94 = week93.getEnd();
        long long95 = week93.getSerialIndex();
        long long96 = week93.getSerialIndex();
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 52 + "'", int8 == 52);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod13);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(class15);
        org.junit.Assert.assertNotNull(class16);
        org.junit.Assert.assertNotNull(regularTimePeriod20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 52 + "'", int21 == 52);
        org.junit.Assert.assertNotNull(timeZone22);
// flaky:         org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 52 + "'", int24 == 52);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 52 + "'", int33 == 52);
        org.junit.Assert.assertNotNull(timeZone34);
// flaky:         org.junit.Assert.assertEquals(timeZone34.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod36);
        org.junit.Assert.assertNotNull(regularTimePeriod40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 52 + "'", int41 == 52);
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(timeZone43);
// flaky:         org.junit.Assert.assertEquals(timeZone43.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(date51);
        org.junit.Assert.assertEquals(date51.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 52 + "'", int56 == 52);
        org.junit.Assert.assertNotNull(timeZone57);
// flaky:         org.junit.Assert.assertEquals(timeZone57.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 52 + "'", int65 == 52);
        org.junit.Assert.assertNotNull(timeZone66);
// flaky:         org.junit.Assert.assertEquals(timeZone66.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 52 + "'", int68 == 52);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + (-60506053200001L) + "'", long69 == (-60506053200001L));
        org.junit.Assert.assertNotNull(wildcardClass70);
        org.junit.Assert.assertNotNull(date74);
        org.junit.Assert.assertEquals(date74.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 52 + "'", int79 == 52);
        org.junit.Assert.assertNotNull(timeZone80);
// flaky:         org.junit.Assert.assertEquals(timeZone80.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 1 + "'", int81 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod82);
        org.junit.Assert.assertNotNull(regularTimePeriod87);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 52 + "'", int88 == 52);
        org.junit.Assert.assertNotNull(timeZone89);
// flaky:         org.junit.Assert.assertEquals(timeZone89.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 1 + "'", int90 == 1);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 1 + "'", int92 == 1);
        org.junit.Assert.assertNotNull(date94);
        org.junit.Assert.assertEquals(date94.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + long95 + "' != '" + 2791L + "'", long95 == 2791L);
        org.junit.Assert.assertTrue("'" + long96 + "' != '" + 2791L + "'", long96 == 2791L);
    }

    @Test
    public void test1068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1068");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        int int10 = week2.getYearValue();
        long long11 = week2.getLastMillisecond();
        int int12 = week2.getYearValue();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod13 = week2.previous();
        java.util.Date date14 = week2.getEnd();
        java.util.Date date15 = week2.getEnd();
        java.lang.String str16 = week2.toString();
        int int17 = week2.getYearValue();
        java.util.Calendar calendar18 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long19 = week2.getFirstMillisecond(calendar18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 52 + "'", int10 == 52);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-60505750800001L) + "'", long11 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
        org.junit.Assert.assertNotNull(regularTimePeriod13);
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Week 35, 52" + "'", str16, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 52 + "'", int17 == 52);
    }

    @Test
    public void test1069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1069");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod11 = week2.next();
        java.util.Date date12 = week2.getStart();
        java.util.Calendar calendar13 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long14 = week2.getFirstMillisecond(calendar13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertNotNull(regularTimePeriod11);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Sun Aug 20 00:00:00 CET 52");
    }

    @Test
    public void test1070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1070");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(0, 53);
        org.jfree.data.time.Week week5 = new org.jfree.data.time.Week(2, 7);
        int int6 = week2.compareTo((java.lang.Object) 2);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
    }

    @Test
    public void test1071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1071");
        org.jfree.data.time.Week week3 = new org.jfree.data.time.Week();
        long long4 = week3.getFirstMillisecond();
        org.jfree.data.time.Year year5 = week3.getYear();
        org.jfree.data.time.Week week6 = new org.jfree.data.time.Week(52, year5);
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week((int) (byte) -1, year5);
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week(0, year5);
        java.util.Date date9 = year5.getEnd();
        org.jfree.data.time.Week week10 = new org.jfree.data.time.Week(date9);
        org.jfree.data.time.Week week13 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod14 = week13.next();
        int int15 = week13.getYearValue();
        java.util.TimeZone timeZone16 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int17 = week13.compareTo((java.lang.Object) timeZone16);
        int int18 = week13.getYearValue();
        int int20 = week13.compareTo((java.lang.Object) 9);
        java.util.Date date21 = week13.getStart();
        java.lang.Class<?> wildcardClass22 = week13.getClass();
        org.jfree.data.time.Week week25 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date26 = week25.getStart();
        java.util.Date date27 = week25.getEnd();
        int int28 = week25.getYearValue();
        java.util.Date date29 = week25.getEnd();
        java.util.Date date30 = week25.getStart();
        java.lang.Class class31 = null;
        org.jfree.data.time.Week week34 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str35 = week34.toString();
        long long36 = week34.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod37 = week34.next();
        java.util.Date date38 = week34.getEnd();
        long long39 = week34.getLastMillisecond();
        java.util.Date date40 = week34.getEnd();
        org.jfree.data.time.Week week43 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str44 = week43.toString();
        long long45 = week43.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod46 = week43.next();
        java.util.Date date47 = week43.getEnd();
        org.jfree.data.time.Week week48 = new org.jfree.data.time.Week(date47);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod49 = week48.next();
        java.util.Date date50 = week48.getEnd();
        java.util.TimeZone timeZone51 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.Week week52 = new org.jfree.data.time.Week(date50, timeZone51);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod53 = org.jfree.data.time.RegularTimePeriod.createInstance(class31, date40, timeZone51);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod54 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass22, date30, timeZone51);
        java.util.Locale locale55 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Week week56 = new org.jfree.data.time.Week(date9, timeZone51, locale55);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'locale' argument.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1637449200000L + "'", long4 == 1637449200000L);
        org.junit.Assert.assertNotNull(year5);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Fri Dec 31 23:59:59 CET 2021");
        org.junit.Assert.assertNotNull(regularTimePeriod14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 52 + "'", int15 == 52);
        org.junit.Assert.assertNotNull(timeZone16);
// flaky:         org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 52 + "'", int18 == 52);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(wildcardClass22);
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 97 + "'", int28 == 97);
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Week 35, 52" + "'", str35, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + (-60506053200001L) + "'", long36 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod37);
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + (-60505750800001L) + "'", long39 == (-60505750800001L));
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Week 35, 52" + "'", str44, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + (-60506053200001L) + "'", long45 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod46);
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod49);
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(timeZone51);
// flaky:         org.junit.Assert.assertEquals(timeZone51.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod53);
        org.junit.Assert.assertNotNull(regularTimePeriod54);
    }

    @Test
    public void test1072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1072");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date3 = week2.getStart();
        java.util.Date date4 = week2.getEnd();
        java.util.Date date5 = week2.getStart();
        long long6 = week2.getLastMillisecond();
        java.lang.String str7 = week2.toString();
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-59100800400001L) + "'", long6 == (-59100800400001L));
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Week 9, 97" + "'", str7, "Week 9, 97");
    }

    @Test
    public void test1073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1073");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week();
        long long3 = week2.getFirstMillisecond();
        org.jfree.data.time.Year year4 = week2.getYear();
        org.jfree.data.time.Week week5 = new org.jfree.data.time.Week(52, year4);
        java.util.Date date6 = year4.getStart();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week(52, year4);
        long long8 = week7.getLastMillisecond();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1637449200000L + "'", long3 == 1637449200000L);
        org.junit.Assert.assertNotNull(year4);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Fri Jan 01 00:00:00 CET 2021");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1640473199999L + "'", long8 == 1640473199999L);
    }

    @Test
    public void test1074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1074");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(52, (int) 'a');
        java.util.Calendar calendar3 = null;
        // The following exception was thrown during execution in test generation
        try {
            week2.peg(calendar3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1075");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date3 = week2.getStart();
        java.util.Date date4 = week2.getEnd();
        java.util.Calendar calendar5 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long6 = week2.getLastMillisecond(calendar5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Sat Mar 04 23:59:59 CET 97");
    }

    @Test
    public void test1076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1076");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        int int11 = week2.getYearValue();
        long long12 = week2.getLastMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod13 = week2.previous();
        int int14 = week2.getWeek();
        long long15 = week2.getSerialIndex();
        java.util.Date date16 = week2.getStart();
        org.jfree.data.time.Week week17 = new org.jfree.data.time.Week(date16);
        long long18 = week17.getMiddleMillisecond();
        long long19 = week17.getLastMillisecond();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-60505750800001L) + "'", long12 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 35 + "'", int14 == 35);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 2791L + "'", long15 == 2791L);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-60506053200001L) + "'", long18 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-60505750800001L) + "'", long19 == (-60505750800001L));
    }

    @Test
    public void test1077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1077");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(48, 3);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.previous();
        java.lang.String str4 = week2.toString();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Week 48, 3" + "'", str4, "Week 48, 3");
    }

    @Test
    public void test1078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1078");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(48, (-1));
        long long3 = week2.getSerialIndex();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-5L) + "'", long3 == (-5L));
    }

    @Test
    public void test1079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1079");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        int int10 = week2.getYearValue();
        long long11 = week2.getLastMillisecond();
        long long12 = week2.getSerialIndex();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod13 = week2.next();
        int int14 = week2.getYearValue();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod15 = week2.previous();
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Year year16 = week2.getYear();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Year constructor: year (52) outside valid range.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 52 + "'", int10 == 52);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-60505750800001L) + "'", long11 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 2791L + "'", long12 == 2791L);
        org.junit.Assert.assertNotNull(regularTimePeriod13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 52 + "'", int14 == 52);
        org.junit.Assert.assertNotNull(regularTimePeriod15);
    }

    @Test
    public void test1080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1080");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.next();
        java.util.Date date6 = week2.getEnd();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week(date6);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod8 = week7.next();
        java.lang.Class<?> wildcardClass9 = regularTimePeriod8.getClass();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test1081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1081");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(97, (int) (short) -1);
        java.util.Date date3 = week2.getEnd();
        long long4 = week2.getSerialIndex();
        int int5 = week2.getWeek();
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Year year6 = week2.getYear();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Year constructor: year (-1) outside valid range.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sat Nov 06 23:59:59 CET 1");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 44L + "'", long4 == 44L);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 97 + "'", int5 == 97);
    }

    @Test
    public void test1082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1082");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        java.lang.Class<?> wildcardClass4 = week2.getClass();
        java.lang.Class class5 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass4);
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date9 = week8.getStart();
        java.lang.Class class10 = null;
        java.util.Date date11 = null;
        java.util.TimeZone timeZone12 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod13 = org.jfree.data.time.RegularTimePeriod.createInstance(class10, date11, timeZone12);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod14 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass4, date9, timeZone12);
        org.jfree.data.time.Week week17 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str18 = week17.toString();
        long long19 = week17.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod20 = week17.next();
        java.util.Date date21 = week17.getEnd();
        org.jfree.data.time.Week week22 = new org.jfree.data.time.Week(date21);
        org.jfree.data.time.Week week25 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date26 = week25.getStart();
        org.jfree.data.time.Week week29 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod30 = week29.next();
        int int31 = week29.getYearValue();
        java.util.TimeZone timeZone32 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int33 = week29.compareTo((java.lang.Object) timeZone32);
        org.jfree.data.time.Week week34 = new org.jfree.data.time.Week(date26, timeZone32);
        org.jfree.data.time.Week week35 = new org.jfree.data.time.Week(date21, timeZone32);
        org.jfree.data.time.Week week36 = new org.jfree.data.time.Week(date9, timeZone32);
        java.lang.Class<?> wildcardClass37 = week36.getClass();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(class5);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone12);
// flaky:         org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod13);
        org.junit.Assert.assertNotNull(regularTimePeriod14);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Week 35, 52" + "'", str18, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-60506053200001L) + "'", long19 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod20);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 52 + "'", int31 == 52);
        org.junit.Assert.assertNotNull(timeZone32);
// flaky:         org.junit.Assert.assertEquals(timeZone32.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(wildcardClass37);
    }

    @Test
    public void test1083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1083");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week();
        long long3 = week2.getFirstMillisecond();
        org.jfree.data.time.Year year4 = week2.getYear();
        org.jfree.data.time.Week week5 = new org.jfree.data.time.Week(0, year4);
        org.jfree.data.time.Year year6 = week5.getYear();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week((int) (short) 0, year6);
        org.jfree.data.time.Week week10 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date11 = week10.getStart();
        java.util.Date date12 = week10.getEnd();
        int int13 = week10.getYearValue();
        java.util.Date date14 = week10.getEnd();
        int int15 = week10.getYearValue();
        long long16 = week10.getMiddleMillisecond();
        boolean boolean17 = week7.equals((java.lang.Object) long16);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1637449200000L + "'", long3 == 1637449200000L);
        org.junit.Assert.assertNotNull(year4);
        org.junit.Assert.assertNotNull(year6);
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 97 + "'", int13 == 97);
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 97 + "'", int15 == 97);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-59101102800001L) + "'", long16 == (-59101102800001L));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test1084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1084");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod11 = week2.next();
        org.jfree.data.time.Week week14 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod15 = week14.next();
        java.lang.Class<?> wildcardClass16 = week14.getClass();
        java.lang.Class class17 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass16);
        java.lang.Class class18 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass16);
        boolean boolean19 = week2.equals((java.lang.Object) wildcardClass16);
        java.lang.Class class20 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass16);
        org.jfree.data.time.Week week23 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod24 = week23.next();
        int int25 = week23.getYearValue();
        long long26 = week23.getLastMillisecond();
        java.util.Date date27 = week23.getEnd();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod28 = week23.previous();
        long long29 = week23.getMiddleMillisecond();
        org.jfree.data.time.Week week32 = new org.jfree.data.time.Week(9, (int) 'a');
        org.jfree.data.time.Week week35 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod36 = week35.next();
        long long37 = week35.getMiddleMillisecond();
        java.lang.String str38 = week35.toString();
        boolean boolean39 = week32.equals((java.lang.Object) week35);
        java.util.Date date40 = week32.getStart();
        int int41 = week23.compareTo((java.lang.Object) date40);
        org.jfree.data.time.Week week44 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date45 = week44.getStart();
        java.util.Date date46 = week44.getEnd();
        org.jfree.data.time.Week week49 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod50 = week49.next();
        java.lang.Class<?> wildcardClass51 = week49.getClass();
        java.lang.Class class52 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass51);
        org.jfree.data.time.Week week55 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date56 = week55.getStart();
        java.lang.Class class57 = null;
        java.util.Date date58 = null;
        java.util.TimeZone timeZone59 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod60 = org.jfree.data.time.RegularTimePeriod.createInstance(class57, date58, timeZone59);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod61 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass51, date56, timeZone59);
        org.jfree.data.time.Week week62 = new org.jfree.data.time.Week(date46, timeZone59);
        java.util.TimeZone timeZone63 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.Week week64 = new org.jfree.data.time.Week(date46, timeZone63);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod65 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass16, date40, timeZone63);
        java.lang.Class class66 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass16);
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertNotNull(regularTimePeriod11);
        org.junit.Assert.assertNotNull(regularTimePeriod15);
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertNotNull(class17);
        org.junit.Assert.assertNotNull(class18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(class20);
        org.junit.Assert.assertNotNull(regularTimePeriod24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 52 + "'", int25 == 52);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + (-60505750800001L) + "'", long26 == (-60505750800001L));
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod28);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + (-60506053200001L) + "'", long29 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod36);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + (-60506053200001L) + "'", long37 == (-60506053200001L));
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Week 35, 52" + "'", str38, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod50);
        org.junit.Assert.assertNotNull(wildcardClass51);
        org.junit.Assert.assertNotNull(class52);
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone59);
// flaky:         org.junit.Assert.assertEquals(timeZone59.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod60);
        org.junit.Assert.assertNotNull(regularTimePeriod61);
        org.junit.Assert.assertNotNull(timeZone63);
// flaky:         org.junit.Assert.assertEquals(timeZone63.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNotNull(regularTimePeriod65);
        org.junit.Assert.assertNotNull(class66);
    }

    @Test
    public void test1085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1085");
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Week week1 = org.jfree.data.time.Week.parseWeek("Week 48, 3");
            org.junit.Assert.fail("Expected exception of type org.jfree.data.time.TimePeriodFormatException; message: Can't evaluate the year.");
        } catch (org.jfree.data.time.TimePeriodFormatException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1086");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod11 = week2.next();
        java.util.Date date12 = week2.getStart();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod13 = week2.previous();
        long long14 = week2.getMiddleMillisecond();
        java.util.Date date15 = week2.getEnd();
        long long16 = week2.getMiddleMillisecond();
        org.jfree.data.time.Week week19 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date20 = week19.getStart();
        java.util.Date date21 = week19.getEnd();
        org.jfree.data.time.Week week24 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod25 = week24.next();
        java.lang.Class<?> wildcardClass26 = week24.getClass();
        java.lang.Class class27 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass26);
        org.jfree.data.time.Week week30 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date31 = week30.getStart();
        java.lang.Class class32 = null;
        java.util.Date date33 = null;
        java.util.TimeZone timeZone34 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod35 = org.jfree.data.time.RegularTimePeriod.createInstance(class32, date33, timeZone34);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod36 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass26, date31, timeZone34);
        org.jfree.data.time.Week week37 = new org.jfree.data.time.Week(date21, timeZone34);
        java.util.Date date38 = week37.getEnd();
        int int39 = week37.getWeek();
        long long40 = week37.getSerialIndex();
        java.util.Date date41 = week37.getStart();
        int int42 = week2.compareTo((java.lang.Object) date41);
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertNotNull(regularTimePeriod11);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-60506053200001L) + "'", long14 == (-60506053200001L));
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-60506053200001L) + "'", long16 == (-60506053200001L));
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod25);
        org.junit.Assert.assertNotNull(wildcardClass26);
        org.junit.Assert.assertNotNull(class27);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone34);
// flaky:         org.junit.Assert.assertEquals(timeZone34.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod35);
        org.junit.Assert.assertNotNull(regularTimePeriod36);
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 9 + "'", int39 == 9);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 5150L + "'", long40 == 5150L);
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
    }

    @Test
    public void test1087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1087");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        long long5 = week2.getLastMillisecond();
        long long6 = week2.getFirstMillisecond();
        java.util.Date date7 = week2.getStart();
        java.util.Calendar calendar8 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long9 = week2.getLastMillisecond(calendar8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-60505750800001L) + "'", long5 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-60506355600000L) + "'", long6 == (-60506355600000L));
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Sun Aug 20 00:00:00 CET 52");
    }

    @Test
    public void test1088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1088");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date3 = week2.getStart();
        java.util.Date date4 = week2.getEnd();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod8 = week7.next();
        java.lang.Class<?> wildcardClass9 = week7.getClass();
        java.lang.Class class10 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass9);
        org.jfree.data.time.Week week13 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date14 = week13.getStart();
        java.lang.Class class15 = null;
        java.util.Date date16 = null;
        java.util.TimeZone timeZone17 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod18 = org.jfree.data.time.RegularTimePeriod.createInstance(class15, date16, timeZone17);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod19 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass9, date14, timeZone17);
        org.jfree.data.time.Week week20 = new org.jfree.data.time.Week(date4, timeZone17);
        long long21 = week20.getFirstMillisecond();
        int int23 = week20.compareTo((java.lang.Object) 1.0f);
        long long24 = week20.getMiddleMillisecond();
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(class10);
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone17);
// flaky:         org.junit.Assert.assertEquals(timeZone17.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod18);
        org.junit.Assert.assertNotNull(regularTimePeriod19);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-59101405200000L) + "'", long21 == (-59101405200000L));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-59101102800001L) + "'", long24 == (-59101102800001L));
    }

    @Test
    public void test1089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1089");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(0, 0);
        java.util.Calendar calendar3 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long4 = week2.getMiddleMillisecond(calendar3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1090");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod11 = week2.next();
        java.util.Date date12 = week2.getStart();
        java.lang.String str13 = week2.toString();
        long long14 = week2.getSerialIndex();
        long long15 = week2.getSerialIndex();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertNotNull(regularTimePeriod11);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Week 35, 52" + "'", str13, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 2791L + "'", long14 == 2791L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 2791L + "'", long15 == 2791L);
    }

    @Test
    public void test1091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1091");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.next();
        java.util.Date date6 = week2.getEnd();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week(date6);
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week(date6);
        org.jfree.data.time.Week week11 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str12 = week11.toString();
        long long13 = week11.getMiddleMillisecond();
        long long14 = week11.getLastMillisecond();
        org.jfree.data.time.Week week17 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod18 = week17.next();
        java.lang.Class<?> wildcardClass19 = week17.getClass();
        java.lang.Class class20 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass19);
        int int21 = week11.compareTo((java.lang.Object) wildcardClass19);
        java.lang.Class class22 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass19);
        org.jfree.data.time.Week week25 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod26 = week25.next();
        java.lang.Class<?> wildcardClass27 = week25.getClass();
        java.lang.Class class28 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass27);
        org.jfree.data.time.Week week31 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date32 = week31.getStart();
        java.lang.Class class33 = null;
        java.util.Date date34 = null;
        java.util.TimeZone timeZone35 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod36 = org.jfree.data.time.RegularTimePeriod.createInstance(class33, date34, timeZone35);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod37 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass27, date32, timeZone35);
        java.util.TimeZone timeZone38 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod39 = org.jfree.data.time.RegularTimePeriod.createInstance(class22, date32, timeZone38);
        org.jfree.data.time.Week week40 = new org.jfree.data.time.Week(date6, timeZone38);
        java.util.Date date41 = week40.getEnd();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Week 35, 52" + "'", str12, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-60506053200001L) + "'", long13 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-60505750800001L) + "'", long14 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod18);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(class20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(class22);
        org.junit.Assert.assertNotNull(regularTimePeriod26);
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertNotNull(class28);
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone35);
// flaky:         org.junit.Assert.assertEquals(timeZone35.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod36);
        org.junit.Assert.assertNotNull(regularTimePeriod37);
        org.junit.Assert.assertNotNull(timeZone38);
// flaky:         org.junit.Assert.assertEquals(timeZone38.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod39);
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Sat Aug 26 23:59:59 CET 52");
    }

    @Test
    public void test1092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1092");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        int int10 = week2.getYearValue();
        java.lang.String str11 = week2.toString();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod12 = week2.previous();
        org.jfree.data.time.Week week15 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod16 = week15.next();
        int int17 = week15.getYearValue();
        java.util.TimeZone timeZone18 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int19 = week15.compareTo((java.lang.Object) timeZone18);
        int int20 = week15.getYearValue();
        int int22 = week15.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod23 = week15.previous();
        int int24 = week15.getYearValue();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod25 = week15.next();
        java.lang.Class<?> wildcardClass26 = regularTimePeriod25.getClass();
        org.jfree.data.time.Week week29 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod30 = week29.next();
        java.lang.Class<?> wildcardClass31 = week29.getClass();
        java.lang.Class class32 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass31);
        java.lang.Class class33 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass31);
        org.jfree.data.time.Week week36 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod37 = week36.next();
        int int38 = week36.getYearValue();
        java.util.TimeZone timeZone39 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int40 = week36.compareTo((java.lang.Object) timeZone39);
        int int41 = week36.getYearValue();
        int int43 = week36.compareTo((java.lang.Object) 9);
        java.util.Date date44 = week36.getStart();
        org.jfree.data.time.Week week45 = new org.jfree.data.time.Week(date44);
        org.jfree.data.time.Week week48 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod49 = week48.next();
        int int50 = week48.getYearValue();
        java.util.TimeZone timeZone51 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int52 = week48.compareTo((java.lang.Object) timeZone51);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod53 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass31, date44, timeZone51);
        org.jfree.data.time.Week week56 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str57 = week56.toString();
        long long58 = week56.getMiddleMillisecond();
        long long59 = week56.getLastMillisecond();
        org.jfree.data.time.Week week62 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod63 = week62.next();
        java.lang.Class<?> wildcardClass64 = week62.getClass();
        java.lang.Class class65 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass64);
        int int66 = week56.compareTo((java.lang.Object) wildcardClass64);
        java.lang.Class class67 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass64);
        org.jfree.data.time.Week week70 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod71 = week70.next();
        java.lang.Class<?> wildcardClass72 = week70.getClass();
        java.lang.Class class73 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass72);
        org.jfree.data.time.Week week76 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date77 = week76.getStart();
        java.lang.Class class78 = null;
        java.util.Date date79 = null;
        java.util.TimeZone timeZone80 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod81 = org.jfree.data.time.RegularTimePeriod.createInstance(class78, date79, timeZone80);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod82 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass72, date77, timeZone80);
        java.util.TimeZone timeZone83 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod84 = org.jfree.data.time.RegularTimePeriod.createInstance(class67, date77, timeZone83);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod85 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass26, date44, timeZone83);
        org.jfree.data.time.Week week86 = new org.jfree.data.time.Week(date44);
        java.util.Date date87 = week86.getEnd();
        int int88 = week2.compareTo((java.lang.Object) date87);
        int int89 = week2.getYearValue();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 52 + "'", int10 == 52);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Week 35, 52" + "'", str11, "Week 35, 52");
        org.junit.Assert.assertNotNull(regularTimePeriod12);
        org.junit.Assert.assertNotNull(regularTimePeriod16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 52 + "'", int17 == 52);
        org.junit.Assert.assertNotNull(timeZone18);
// flaky:         org.junit.Assert.assertEquals(timeZone18.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 52 + "'", int20 == 52);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 52 + "'", int24 == 52);
        org.junit.Assert.assertNotNull(regularTimePeriod25);
        org.junit.Assert.assertNotNull(wildcardClass26);
        org.junit.Assert.assertNotNull(regularTimePeriod30);
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertNotNull(class32);
        org.junit.Assert.assertNotNull(class33);
        org.junit.Assert.assertNotNull(regularTimePeriod37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 52 + "'", int38 == 52);
        org.junit.Assert.assertNotNull(timeZone39);
// flaky:         org.junit.Assert.assertEquals(timeZone39.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 52 + "'", int41 == 52);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 52 + "'", int50 == 52);
        org.junit.Assert.assertNotNull(timeZone51);
// flaky:         org.junit.Assert.assertEquals(timeZone51.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod53);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "Week 35, 52" + "'", str57, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + (-60506053200001L) + "'", long58 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + (-60505750800001L) + "'", long59 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod63);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertNotNull(class65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertNotNull(class67);
        org.junit.Assert.assertNotNull(regularTimePeriod71);
        org.junit.Assert.assertNotNull(wildcardClass72);
        org.junit.Assert.assertNotNull(class73);
        org.junit.Assert.assertNotNull(date77);
        org.junit.Assert.assertEquals(date77.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone80);
// flaky:         org.junit.Assert.assertEquals(timeZone80.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod81);
        org.junit.Assert.assertNotNull(regularTimePeriod82);
        org.junit.Assert.assertNotNull(timeZone83);
// flaky:         org.junit.Assert.assertEquals(timeZone83.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod84);
        org.junit.Assert.assertNotNull(regularTimePeriod85);
        org.junit.Assert.assertNotNull(date87);
        org.junit.Assert.assertEquals(date87.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 1 + "'", int88 == 1);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 52 + "'", int89 == 52);
    }

    @Test
    public void test1093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1093");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, (int) 'a');
        org.jfree.data.time.Week week5 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod6 = week5.next();
        long long7 = week5.getMiddleMillisecond();
        java.lang.String str8 = week5.toString();
        boolean boolean9 = week2.equals((java.lang.Object) week5);
        java.util.Date date10 = week2.getStart();
        java.util.Date date11 = week2.getStart();
        long long12 = week2.getSerialIndex();
        java.util.Date date13 = week2.getStart();
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Year year14 = week2.getYear();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Year constructor: year (97) outside valid range.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-60506053200001L) + "'", long7 == (-60506053200001L));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Week 35, 52" + "'", str8, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 5150L + "'", long12 == 5150L);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sun Feb 26 00:00:00 CET 97");
    }

    @Test
    public void test1094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1094");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.previous();
        int int4 = week2.getYearValue();
        java.util.Date date5 = week2.getEnd();
        int int6 = week2.getWeek();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 35 + "'", int6 == 35);
    }

    @Test
    public void test1095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1095");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        int int10 = week2.getYearValue();
        long long11 = week2.getLastMillisecond();
        int int12 = week2.getWeek();
        java.util.Date date13 = week2.getEnd();
        org.jfree.data.time.Week week16 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date17 = week16.getStart();
        java.util.Date date18 = week16.getEnd();
        org.jfree.data.time.Week week21 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod22 = week21.next();
        java.lang.Class<?> wildcardClass23 = week21.getClass();
        java.lang.Class class24 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass23);
        org.jfree.data.time.Week week27 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date28 = week27.getStart();
        java.lang.Class class29 = null;
        java.util.Date date30 = null;
        java.util.TimeZone timeZone31 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod32 = org.jfree.data.time.RegularTimePeriod.createInstance(class29, date30, timeZone31);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod33 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass23, date28, timeZone31);
        org.jfree.data.time.Week week34 = new org.jfree.data.time.Week(date18, timeZone31);
        org.jfree.data.time.Week week35 = new org.jfree.data.time.Week(date13, timeZone31);
        java.util.Date date36 = week35.getStart();
        int int37 = week35.getWeek();
        java.util.Date date38 = week35.getStart();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 52 + "'", int10 == 52);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-60505750800001L) + "'", long11 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 35 + "'", int12 == 35);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod22);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertNotNull(class24);
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone31);
// flaky:         org.junit.Assert.assertEquals(timeZone31.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod32);
        org.junit.Assert.assertNotNull(regularTimePeriod33);
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 35 + "'", int37 == 35);
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Sun Aug 20 00:00:00 CET 52");
    }

    @Test
    public void test1096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1096");
        java.util.Date date0 = null;
        java.lang.Class class1 = null;
        java.util.Date date2 = null;
        java.util.TimeZone timeZone3 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod4 = org.jfree.data.time.RegularTimePeriod.createInstance(class1, date2, timeZone3);
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Week week5 = new org.jfree.data.time.Week(date0, timeZone3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'time' argument.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone3);
// flaky:         org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod4);
    }

    @Test
    public void test1097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1097");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        long long4 = week2.getMiddleMillisecond();
        int int5 = week2.getWeek();
        long long6 = week2.getLastMillisecond();
        long long7 = week2.getMiddleMillisecond();
        int int8 = week2.getWeek();
        java.util.Date date9 = week2.getStart();
        java.util.Date date10 = week2.getEnd();
        long long11 = week2.getSerialIndex();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 35 + "'", int5 == 35);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-60505750800001L) + "'", long6 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-60506053200001L) + "'", long7 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 35 + "'", int8 == 35);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 2791L + "'", long11 == 2791L);
    }

    @Test
    public void test1098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1098");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week();
        long long3 = week2.getFirstMillisecond();
        org.jfree.data.time.Year year4 = week2.getYear();
        org.jfree.data.time.Week week5 = new org.jfree.data.time.Week(5, year4);
        org.jfree.data.time.Week week6 = new org.jfree.data.time.Week(10, year4);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod7 = week6.previous();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1637449200000L + "'", long3 == 1637449200000L);
        org.junit.Assert.assertNotNull(year4);
        org.junit.Assert.assertNotNull(regularTimePeriod7);
    }

    @Test
    public void test1099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1099");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date3 = week2.getStart();
        java.util.Date date4 = week2.getEnd();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod8 = week7.next();
        java.lang.Class<?> wildcardClass9 = week7.getClass();
        java.lang.Class class10 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass9);
        org.jfree.data.time.Week week13 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date14 = week13.getStart();
        java.lang.Class class15 = null;
        java.util.Date date16 = null;
        java.util.TimeZone timeZone17 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod18 = org.jfree.data.time.RegularTimePeriod.createInstance(class15, date16, timeZone17);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod19 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass9, date14, timeZone17);
        org.jfree.data.time.Week week20 = new org.jfree.data.time.Week(date4, timeZone17);
        java.util.Date date21 = week20.getEnd();
        int int22 = week20.getWeek();
        long long23 = week20.getSerialIndex();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod24 = week20.previous();
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(class10);
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone17);
// flaky:         org.junit.Assert.assertEquals(timeZone17.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod18);
        org.junit.Assert.assertNotNull(regularTimePeriod19);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 9 + "'", int22 == 9);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 5150L + "'", long23 == 5150L);
        org.junit.Assert.assertNotNull(regularTimePeriod24);
    }

    @Test
    public void test1100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1100");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date3 = week2.getStart();
        java.util.Date date4 = week2.getEnd();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod8 = week7.next();
        java.lang.Class<?> wildcardClass9 = week7.getClass();
        java.lang.Class class10 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass9);
        org.jfree.data.time.Week week13 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date14 = week13.getStart();
        java.lang.Class class15 = null;
        java.util.Date date16 = null;
        java.util.TimeZone timeZone17 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod18 = org.jfree.data.time.RegularTimePeriod.createInstance(class15, date16, timeZone17);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod19 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass9, date14, timeZone17);
        org.jfree.data.time.Week week20 = new org.jfree.data.time.Week(date4, timeZone17);
        java.util.Date date21 = week20.getEnd();
        int int22 = week20.getWeek();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod23 = week20.previous();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod24 = week20.previous();
        org.jfree.data.time.Week week26 = new org.jfree.data.time.Week();
        long long27 = week26.getFirstMillisecond();
        org.jfree.data.time.Year year28 = week26.getYear();
        org.jfree.data.time.Week week29 = new org.jfree.data.time.Week(0, year28);
        java.util.Date date30 = week29.getStart();
        long long31 = week29.getLastMillisecond();
        int int32 = week20.compareTo((java.lang.Object) long31);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(class10);
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone17);
// flaky:         org.junit.Assert.assertEquals(timeZone17.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod18);
        org.junit.Assert.assertNotNull(regularTimePeriod19);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 9 + "'", int22 == 9);
        org.junit.Assert.assertNotNull(regularTimePeriod23);
        org.junit.Assert.assertNotNull(regularTimePeriod24);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 1637449200000L + "'", long27 == 1637449200000L);
        org.junit.Assert.assertNotNull(year28);
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Sun Dec 20 00:00:00 CET 2020");
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 1609023599999L + "'", long31 == 1609023599999L);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
    }

    @Test
    public void test1101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1101");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date3 = week2.getStart();
        java.util.Date date4 = week2.getEnd();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod8 = week7.next();
        java.lang.Class<?> wildcardClass9 = week7.getClass();
        java.lang.Class class10 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass9);
        org.jfree.data.time.Week week13 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date14 = week13.getStart();
        java.lang.Class class15 = null;
        java.util.Date date16 = null;
        java.util.TimeZone timeZone17 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod18 = org.jfree.data.time.RegularTimePeriod.createInstance(class15, date16, timeZone17);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod19 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass9, date14, timeZone17);
        org.jfree.data.time.Week week20 = new org.jfree.data.time.Week(date4, timeZone17);
        java.util.Date date21 = week20.getEnd();
        int int22 = week20.getWeek();
        org.jfree.data.time.Week week25 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.util.Date date26 = week25.getStart();
        int int27 = week25.getYearValue();
        java.util.Date date28 = week25.getEnd();
        org.jfree.data.time.Week week31 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod32 = week31.previous();
        int int33 = week31.getYearValue();
        java.util.Date date34 = week31.getStart();
        java.util.TimeZone timeZone35 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.Week week36 = new org.jfree.data.time.Week(date34, timeZone35);
        java.lang.Class<?> wildcardClass37 = timeZone35.getClass();
        java.lang.Class class38 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass37);
        org.jfree.data.time.Week week41 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str42 = week41.toString();
        long long43 = week41.getSerialIndex();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod44 = week41.next();
        java.util.Date date45 = regularTimePeriod44.getEnd();
        java.util.Date date46 = regularTimePeriod44.getStart();
        org.jfree.data.time.Week week49 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str50 = week49.toString();
        long long51 = week49.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod52 = week49.next();
        java.util.Date date53 = week49.getEnd();
        org.jfree.data.time.Week week56 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date57 = week56.getStart();
        org.jfree.data.time.Week week58 = new org.jfree.data.time.Week(date57);
        java.util.Date date59 = week58.getStart();
        org.jfree.data.time.Week week62 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod63 = week62.next();
        int int64 = week62.getYearValue();
        java.util.TimeZone timeZone65 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int66 = week62.compareTo((java.lang.Object) timeZone65);
        int int67 = week62.getYearValue();
        long long68 = week62.getMiddleMillisecond();
        java.lang.Class<?> wildcardClass69 = week62.getClass();
        org.jfree.data.time.Week week72 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date73 = week72.getStart();
        org.jfree.data.time.Week week76 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod77 = week76.next();
        int int78 = week76.getYearValue();
        java.util.TimeZone timeZone79 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int80 = week76.compareTo((java.lang.Object) timeZone79);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod81 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass69, date73, timeZone79);
        org.jfree.data.time.Week week82 = new org.jfree.data.time.Week(date59, timeZone79);
        org.jfree.data.time.Week week83 = new org.jfree.data.time.Week(date53, timeZone79);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod84 = org.jfree.data.time.RegularTimePeriod.createInstance(class38, date46, timeZone79);
        org.jfree.data.time.Week week85 = new org.jfree.data.time.Week(date28, timeZone79);
        int int86 = week20.compareTo((java.lang.Object) date28);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(class10);
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone17);
// flaky:         org.junit.Assert.assertEquals(timeZone17.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod18);
        org.junit.Assert.assertNotNull(regularTimePeriod19);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 9 + "'", int22 == 9);
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 52 + "'", int27 == 52);
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 52 + "'", int33 == 52);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(timeZone35);
// flaky:         org.junit.Assert.assertEquals(timeZone35.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNotNull(wildcardClass37);
        org.junit.Assert.assertNotNull(class38);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Week 35, 52" + "'", str42, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 2791L + "'", long43 == 2791L);
        org.junit.Assert.assertNotNull(regularTimePeriod44);
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Sat Sep 02 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Sun Aug 27 00:00:00 CET 52");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "Week 35, 52" + "'", str50, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + (-60506053200001L) + "'", long51 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod52);
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date57);
        org.junit.Assert.assertEquals(date57.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date59);
        org.junit.Assert.assertEquals(date59.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 52 + "'", int64 == 52);
        org.junit.Assert.assertNotNull(timeZone65);
// flaky:         org.junit.Assert.assertEquals(timeZone65.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 52 + "'", int67 == 52);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + (-60506053200001L) + "'", long68 == (-60506053200001L));
        org.junit.Assert.assertNotNull(wildcardClass69);
        org.junit.Assert.assertNotNull(date73);
        org.junit.Assert.assertEquals(date73.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 52 + "'", int78 == 52);
        org.junit.Assert.assertNotNull(timeZone79);
// flaky:         org.junit.Assert.assertEquals(timeZone79.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 1 + "'", int80 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod81);
        org.junit.Assert.assertNull(regularTimePeriod84);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 1 + "'", int86 == 1);
    }

    @Test
    public void test1102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1102");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(35, 0);
        java.util.Calendar calendar3 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long4 = week2.getMiddleMillisecond(calendar3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1103");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getSerialIndex();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.next();
        java.util.Date date6 = regularTimePeriod5.getEnd();
        org.jfree.data.time.Week week9 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date10 = week9.getStart();
        java.util.Date date11 = week9.getEnd();
        org.jfree.data.time.Week week14 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod15 = week14.next();
        java.lang.Class<?> wildcardClass16 = week14.getClass();
        java.lang.Class class17 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass16);
        org.jfree.data.time.Week week20 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date21 = week20.getStart();
        java.lang.Class class22 = null;
        java.util.Date date23 = null;
        java.util.TimeZone timeZone24 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod25 = org.jfree.data.time.RegularTimePeriod.createInstance(class22, date23, timeZone24);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod26 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass16, date21, timeZone24);
        org.jfree.data.time.Week week27 = new org.jfree.data.time.Week(date11, timeZone24);
        org.jfree.data.time.Week week28 = new org.jfree.data.time.Week(date6, timeZone24);
        long long29 = week28.getLastMillisecond();
        int int30 = week28.getYearValue();
        long long31 = week28.getLastMillisecond();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 2791L + "'", long4 == 2791L);
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Sep 02 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod15);
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertNotNull(class17);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone24);
// flaky:         org.junit.Assert.assertEquals(timeZone24.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod25);
        org.junit.Assert.assertNotNull(regularTimePeriod26);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + (-60505146000001L) + "'", long29 == (-60505146000001L));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 52 + "'", int30 == 52);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + (-60505146000001L) + "'", long31 == (-60505146000001L));
    }

    @Test
    public void test1104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1104");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week();
        long long3 = week2.getFirstMillisecond();
        org.jfree.data.time.Year year4 = week2.getYear();
        org.jfree.data.time.Week week5 = new org.jfree.data.time.Week(0, year4);
        org.jfree.data.time.Week week6 = new org.jfree.data.time.Week(11, year4);
        org.jfree.data.time.Year year7 = week6.getYear();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1637449200000L + "'", long3 == 1637449200000L);
        org.junit.Assert.assertNotNull(year4);
        org.junit.Assert.assertNotNull(year7);
    }

    @Test
    public void test1105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1105");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        java.util.Date date10 = week2.getStart();
        org.jfree.data.time.Week week11 = new org.jfree.data.time.Week(date10);
        long long12 = week11.getFirstMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod13 = week11.previous();
        org.jfree.data.time.Week week16 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str17 = week16.toString();
        long long18 = week16.getSerialIndex();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod19 = week16.next();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod20 = week16.previous();
        long long21 = regularTimePeriod20.getMiddleMillisecond();
        int int22 = week11.compareTo((java.lang.Object) long21);
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-60506355600000L) + "'", long12 == (-60506355600000L));
        org.junit.Assert.assertNotNull(regularTimePeriod13);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Week 35, 52" + "'", str17, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 2791L + "'", long18 == 2791L);
        org.junit.Assert.assertNotNull(regularTimePeriod19);
        org.junit.Assert.assertNotNull(regularTimePeriod20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-60506658000001L) + "'", long21 == (-60506658000001L));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
    }

    @Test
    public void test1106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1106");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        int int11 = week2.getYearValue();
        java.lang.String str12 = week2.toString();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod13 = week2.previous();
        java.util.Date date14 = week2.getEnd();
        org.jfree.data.time.Week week17 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date18 = week17.getStart();
        org.jfree.data.time.Week week19 = new org.jfree.data.time.Week(date18);
        java.util.Date date20 = week19.getStart();
        org.jfree.data.time.Week week23 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod24 = week23.next();
        int int25 = week23.getYearValue();
        java.util.TimeZone timeZone26 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int27 = week23.compareTo((java.lang.Object) timeZone26);
        int int28 = week23.getYearValue();
        long long29 = week23.getMiddleMillisecond();
        java.lang.Class<?> wildcardClass30 = week23.getClass();
        org.jfree.data.time.Week week33 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date34 = week33.getStart();
        org.jfree.data.time.Week week37 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod38 = week37.next();
        int int39 = week37.getYearValue();
        java.util.TimeZone timeZone40 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int41 = week37.compareTo((java.lang.Object) timeZone40);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod42 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass30, date34, timeZone40);
        org.jfree.data.time.Week week43 = new org.jfree.data.time.Week(date20, timeZone40);
        java.util.Locale locale44 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Week week45 = new org.jfree.data.time.Week(date14, timeZone40, locale44);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'locale' argument.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Week 35, 52" + "'", str12, "Week 35, 52");
        org.junit.Assert.assertNotNull(regularTimePeriod13);
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 52 + "'", int25 == 52);
        org.junit.Assert.assertNotNull(timeZone26);
// flaky:         org.junit.Assert.assertEquals(timeZone26.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 52 + "'", int28 == 52);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + (-60506053200001L) + "'", long29 == (-60506053200001L));
        org.junit.Assert.assertNotNull(wildcardClass30);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 52 + "'", int39 == 52);
        org.junit.Assert.assertNotNull(timeZone40);
// flaky:         org.junit.Assert.assertEquals(timeZone40.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod42);
    }

    @Test
    public void test1107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1107");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        int int11 = week2.getYearValue();
        java.lang.String str12 = week2.toString();
        org.jfree.data.time.Week week15 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod16 = week15.next();
        int int17 = week15.getYearValue();
        java.util.TimeZone timeZone18 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int19 = week15.compareTo((java.lang.Object) timeZone18);
        int int20 = week15.getYearValue();
        int int22 = week15.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod23 = week15.previous();
        int int24 = week15.getYearValue();
        long long25 = week15.getLastMillisecond();
        int int26 = week15.getWeek();
        int int27 = week15.getYearValue();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod28 = week15.next();
        int int29 = week15.getYearValue();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod30 = week15.next();
        int int31 = week15.getYearValue();
        org.jfree.data.time.Week week34 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod35 = week34.next();
        long long36 = week34.getMiddleMillisecond();
        java.lang.String str37 = week34.toString();
        org.jfree.data.time.Week week40 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod41 = week40.next();
        java.lang.Class<?> wildcardClass42 = week40.getClass();
        java.lang.Class class43 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass42);
        org.jfree.data.time.Week week46 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date47 = week46.getStart();
        java.lang.Class class48 = null;
        java.util.Date date49 = null;
        java.util.TimeZone timeZone50 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod51 = org.jfree.data.time.RegularTimePeriod.createInstance(class48, date49, timeZone50);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod52 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass42, date47, timeZone50);
        java.lang.Class<?> wildcardClass53 = timeZone50.getClass();
        boolean boolean54 = week34.equals((java.lang.Object) wildcardClass53);
        int int55 = week15.compareTo((java.lang.Object) wildcardClass53);
        // The following exception was thrown during execution in test generation
        try {
            int int56 = week2.compareTo((java.lang.Object) week15);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Year constructor: year (52) outside valid range.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Week 35, 52" + "'", str12, "Week 35, 52");
        org.junit.Assert.assertNotNull(regularTimePeriod16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 52 + "'", int17 == 52);
        org.junit.Assert.assertNotNull(timeZone18);
// flaky:         org.junit.Assert.assertEquals(timeZone18.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 52 + "'", int20 == 52);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 52 + "'", int24 == 52);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-60505750800001L) + "'", long25 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 35 + "'", int26 == 35);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 52 + "'", int27 == 52);
        org.junit.Assert.assertNotNull(regularTimePeriod28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 52 + "'", int29 == 52);
        org.junit.Assert.assertNotNull(regularTimePeriod30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 52 + "'", int31 == 52);
        org.junit.Assert.assertNotNull(regularTimePeriod35);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + (-60506053200001L) + "'", long36 == (-60506053200001L));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Week 35, 52" + "'", str37, "Week 35, 52");
        org.junit.Assert.assertNotNull(regularTimePeriod41);
        org.junit.Assert.assertNotNull(wildcardClass42);
        org.junit.Assert.assertNotNull(class43);
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone50);
// flaky:         org.junit.Assert.assertEquals(timeZone50.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod51);
        org.junit.Assert.assertNotNull(regularTimePeriod52);
        org.junit.Assert.assertNotNull(wildcardClass53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
    }

    @Test
    public void test1108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1108");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        long long8 = week2.getMiddleMillisecond();
        java.lang.Class<?> wildcardClass9 = week2.getClass();
        org.jfree.data.time.Week week12 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date13 = week12.getStart();
        org.jfree.data.time.Week week16 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod17 = week16.next();
        int int18 = week16.getYearValue();
        java.util.TimeZone timeZone19 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int20 = week16.compareTo((java.lang.Object) timeZone19);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod21 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass9, date13, timeZone19);
        org.jfree.data.time.Week week22 = new org.jfree.data.time.Week(date13);
        org.jfree.data.time.Week week25 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod26 = week25.next();
        int int27 = week25.getYearValue();
        java.util.TimeZone timeZone28 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int29 = week25.compareTo((java.lang.Object) timeZone28);
        org.jfree.data.time.Week week30 = new org.jfree.data.time.Week(date13, timeZone28);
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Year year31 = week30.getYear();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Year constructor: year (97) outside valid range.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-60506053200001L) + "'", long8 == (-60506053200001L));
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 52 + "'", int18 == 52);
        org.junit.Assert.assertNotNull(timeZone19);
// flaky:         org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod21);
        org.junit.Assert.assertNotNull(regularTimePeriod26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 52 + "'", int27 == 52);
        org.junit.Assert.assertNotNull(timeZone28);
// flaky:         org.junit.Assert.assertEquals(timeZone28.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
    }

    @Test
    public void test1109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1109");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(35, (int) '4');
        int int3 = week2.getYearValue();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 52 + "'", int3 == 52);
    }

    @Test
    public void test1110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1110");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '4', (int) ' ');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.previous();
        int int4 = week2.getWeek();
        int int5 = week2.getYearValue();
        java.util.Date date6 = week2.getStart();
        org.jfree.data.time.Week week9 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str10 = week9.toString();
        long long11 = week9.getSerialIndex();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod12 = week9.next();
        java.util.Date date13 = regularTimePeriod12.getEnd();
        org.jfree.data.time.Week week16 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date17 = week16.getStart();
        org.jfree.data.time.Week week20 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod21 = week20.next();
        int int22 = week20.getYearValue();
        java.util.TimeZone timeZone23 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int24 = week20.compareTo((java.lang.Object) timeZone23);
        org.jfree.data.time.Week week25 = new org.jfree.data.time.Week(date17, timeZone23);
        org.jfree.data.time.Week week26 = new org.jfree.data.time.Week(date13, timeZone23);
        org.jfree.data.time.Week week29 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str30 = week29.toString();
        long long31 = week29.getSerialIndex();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod32 = week29.next();
        java.util.Date date33 = regularTimePeriod32.getEnd();
        org.jfree.data.time.Week week36 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date37 = week36.getStart();
        org.jfree.data.time.Week week40 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod41 = week40.next();
        int int42 = week40.getYearValue();
        java.util.TimeZone timeZone43 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int44 = week40.compareTo((java.lang.Object) timeZone43);
        org.jfree.data.time.Week week45 = new org.jfree.data.time.Week(date37, timeZone43);
        org.jfree.data.time.Week week46 = new org.jfree.data.time.Week(date33, timeZone43);
        org.jfree.data.time.Week week47 = new org.jfree.data.time.Week(date13, timeZone43);
        java.util.Locale locale48 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Week week49 = new org.jfree.data.time.Week(date6, timeZone43, locale48);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'locale' argument.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 32 + "'", int5 == 32);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sun Dec 21 00:00:00 CET 32");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Week 35, 52" + "'", str10, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 2791L + "'", long11 == 2791L);
        org.junit.Assert.assertNotNull(regularTimePeriod12);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sat Sep 02 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 52 + "'", int22 == 52);
        org.junit.Assert.assertNotNull(timeZone23);
// flaky:         org.junit.Assert.assertEquals(timeZone23.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Week 35, 52" + "'", str30, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 2791L + "'", long31 == 2791L);
        org.junit.Assert.assertNotNull(regularTimePeriod32);
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Sat Sep 02 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 52 + "'", int42 == 52);
        org.junit.Assert.assertNotNull(timeZone43);
// flaky:         org.junit.Assert.assertEquals(timeZone43.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
    }

    @Test
    public void test1111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1111");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date3 = week2.getStart();
        org.jfree.data.time.Week week4 = new org.jfree.data.time.Week(date3);
        long long5 = week4.getSerialIndex();
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str9 = week8.toString();
        long long10 = week8.getSerialIndex();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod11 = week8.next();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod12 = week8.previous();
        java.lang.Class<?> wildcardClass13 = week8.getClass();
        java.lang.Class class14 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass13);
        boolean boolean15 = week4.equals((java.lang.Object) wildcardClass13);
        org.jfree.data.time.Week week18 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod19 = week18.previous();
        java.util.Date date20 = week18.getEnd();
        int int21 = week18.getWeek();
        boolean boolean22 = week4.equals((java.lang.Object) int21);
        long long23 = week4.getLastMillisecond();
        int int24 = week4.getYearValue();
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 5150L + "'", long5 == 5150L);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Week 35, 52" + "'", str9, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 2791L + "'", long10 == 2791L);
        org.junit.Assert.assertNotNull(regularTimePeriod11);
        org.junit.Assert.assertNotNull(regularTimePeriod12);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(class14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(regularTimePeriod19);
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 35 + "'", int21 == 35);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-59100800400001L) + "'", long23 == (-59100800400001L));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 97 + "'", int24 == 97);
    }

    @Test
    public void test1112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1112");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.next();
        java.util.Date date6 = week2.getEnd();
        long long7 = week2.getLastMillisecond();
        java.util.Calendar calendar8 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long9 = week2.getLastMillisecond(calendar8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-60505750800001L) + "'", long7 == (-60505750800001L));
    }

    @Test
    public void test1113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1113");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.next();
        long long6 = week2.getMiddleMillisecond();
        java.util.Date date7 = week2.getStart();
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week(date7);
        long long9 = week8.getLastMillisecond();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-60506053200001L) + "'", long6 == (-60506053200001L));
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-60505750800001L) + "'", long9 == (-60505750800001L));
    }

    @Test
    public void test1114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1114");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date3 = week2.getStart();
        java.util.Date date4 = week2.getEnd();
        int int5 = week2.getYearValue();
        java.util.Date date6 = week2.getEnd();
        java.util.Date date7 = week2.getStart();
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week(date7);
        org.jfree.data.time.Week week11 = new org.jfree.data.time.Week((int) (byte) 1, (int) (byte) 0);
        org.jfree.data.time.Week week14 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod15 = week14.next();
        int int16 = week14.getYearValue();
        java.util.TimeZone timeZone17 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int18 = week14.compareTo((java.lang.Object) timeZone17);
        int int19 = week14.getYearValue();
        int int21 = week14.compareTo((java.lang.Object) 9);
        java.util.Date date22 = week14.getStart();
        int int24 = week14.compareTo((java.lang.Object) (short) 100);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod25 = week14.next();
        int int26 = week14.getWeek();
        boolean boolean27 = week11.equals((java.lang.Object) week14);
        long long28 = week11.getMiddleMillisecond();
        boolean boolean29 = week8.equals((java.lang.Object) long28);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 97 + "'", int5 == 97);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 52 + "'", int16 == 52);
        org.junit.Assert.assertNotNull(timeZone17);
// flaky:         org.junit.Assert.assertEquals(timeZone17.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 52 + "'", int19 == 52);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 35 + "'", int26 == 35);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + (-62167438800001L) + "'", long28 == (-62167438800001L));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test1115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1115");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, (int) 'a');
        org.jfree.data.time.Week week5 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod6 = week5.next();
        long long7 = week5.getMiddleMillisecond();
        java.lang.String str8 = week5.toString();
        boolean boolean9 = week2.equals((java.lang.Object) week5);
        java.util.Date date10 = week2.getStart();
        java.util.Date date11 = week2.getStart();
        long long12 = week2.getSerialIndex();
        java.lang.String str13 = week2.toString();
        int int14 = week2.getWeek();
        org.junit.Assert.assertNotNull(regularTimePeriod6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-60506053200001L) + "'", long7 == (-60506053200001L));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Week 35, 52" + "'", str8, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 5150L + "'", long12 == 5150L);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Week 9, 97" + "'", str13, "Week 9, 97");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 9 + "'", int14 == 9);
    }

    @Test
    public void test1116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1116");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        java.lang.Class<?> wildcardClass4 = week2.getClass();
        java.lang.Class class5 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass4);
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date9 = week8.getStart();
        java.lang.Class class10 = null;
        java.util.Date date11 = null;
        java.util.TimeZone timeZone12 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod13 = org.jfree.data.time.RegularTimePeriod.createInstance(class10, date11, timeZone12);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod14 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass4, date9, timeZone12);
        org.jfree.data.time.Week week15 = new org.jfree.data.time.Week(date9);
        java.util.Date date16 = week15.getStart();
        org.jfree.data.time.Week week17 = new org.jfree.data.time.Week(date16);
        long long18 = week17.getSerialIndex();
        java.util.Calendar calendar19 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long20 = week17.getLastMillisecond(calendar19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(class5);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone12);
// flaky:         org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod13);
        org.junit.Assert.assertNotNull(regularTimePeriod14);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 5150L + "'", long18 == 5150L);
    }

    @Test
    public void test1117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1117");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.next();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
    }

    @Test
    public void test1118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1118");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week();
        long long3 = week2.getFirstMillisecond();
        org.jfree.data.time.Year year4 = week2.getYear();
        org.jfree.data.time.Week week5 = new org.jfree.data.time.Week(0, year4);
        org.jfree.data.time.Week week6 = new org.jfree.data.time.Week(11, year4);
        int int7 = week6.getYearValue();
        int int8 = week6.getWeek();
        java.util.Calendar calendar9 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long10 = week6.getMiddleMillisecond(calendar9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1637449200000L + "'", long3 == 1637449200000L);
        org.junit.Assert.assertNotNull(year4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2021 + "'", int7 == 2021);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 11 + "'", int8 == 11);
    }

    @Test
    public void test1119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1119");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, (int) 'a');
        org.jfree.data.time.Week week5 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod6 = week5.next();
        long long7 = week5.getMiddleMillisecond();
        java.lang.String str8 = week5.toString();
        boolean boolean9 = week2.equals((java.lang.Object) week5);
        java.util.Date date10 = week2.getStart();
        java.util.Date date11 = week2.getStart();
        long long12 = week2.getSerialIndex();
        java.lang.String str13 = week2.toString();
        org.jfree.data.time.Week week16 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str17 = week16.toString();
        long long18 = week16.getSerialIndex();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod19 = week16.next();
        java.util.Date date20 = regularTimePeriod19.getEnd();
        org.jfree.data.time.Week week23 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date24 = week23.getStart();
        org.jfree.data.time.Week week27 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod28 = week27.next();
        int int29 = week27.getYearValue();
        java.util.TimeZone timeZone30 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int31 = week27.compareTo((java.lang.Object) timeZone30);
        org.jfree.data.time.Week week32 = new org.jfree.data.time.Week(date24, timeZone30);
        org.jfree.data.time.Week week33 = new org.jfree.data.time.Week(date20, timeZone30);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod34 = week33.next();
        int int35 = week33.getWeek();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod36 = week33.next();
        boolean boolean37 = week2.equals((java.lang.Object) regularTimePeriod36);
        org.junit.Assert.assertNotNull(regularTimePeriod6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-60506053200001L) + "'", long7 == (-60506053200001L));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Week 35, 52" + "'", str8, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 5150L + "'", long12 == 5150L);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Week 9, 97" + "'", str13, "Week 9, 97");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Week 35, 52" + "'", str17, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 2791L + "'", long18 == 2791L);
        org.junit.Assert.assertNotNull(regularTimePeriod19);
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Sat Sep 02 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 52 + "'", int29 == 52);
        org.junit.Assert.assertNotNull(timeZone30);
// flaky:         org.junit.Assert.assertEquals(timeZone30.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 36 + "'", int35 == 36);
        org.junit.Assert.assertNotNull(regularTimePeriod36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test1120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1120");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date3 = week2.getStart();
        org.jfree.data.time.Week week6 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod7 = week6.next();
        int int8 = week6.getYearValue();
        java.util.TimeZone timeZone9 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int10 = week6.compareTo((java.lang.Object) timeZone9);
        org.jfree.data.time.Week week11 = new org.jfree.data.time.Week(date3, timeZone9);
        org.jfree.data.time.Week week12 = new org.jfree.data.time.Week(date3);
        org.jfree.data.time.Week week15 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod16 = week15.next();
        int int17 = week15.getYearValue();
        java.util.TimeZone timeZone18 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int19 = week15.compareTo((java.lang.Object) timeZone18);
        int int20 = week15.getYearValue();
        int int22 = week15.compareTo((java.lang.Object) 9);
        int int23 = week15.getYearValue();
        long long24 = week15.getLastMillisecond();
        int int25 = week15.getWeek();
        java.util.Date date26 = week15.getEnd();
        org.jfree.data.time.Week week29 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date30 = week29.getStart();
        java.util.Date date31 = week29.getEnd();
        org.jfree.data.time.Week week34 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod35 = week34.next();
        java.lang.Class<?> wildcardClass36 = week34.getClass();
        java.lang.Class class37 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass36);
        org.jfree.data.time.Week week40 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date41 = week40.getStart();
        java.lang.Class class42 = null;
        java.util.Date date43 = null;
        java.util.TimeZone timeZone44 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod45 = org.jfree.data.time.RegularTimePeriod.createInstance(class42, date43, timeZone44);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod46 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass36, date41, timeZone44);
        org.jfree.data.time.Week week47 = new org.jfree.data.time.Week(date31, timeZone44);
        org.jfree.data.time.Week week48 = new org.jfree.data.time.Week(date26, timeZone44);
        org.jfree.data.time.Week week51 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str52 = week51.toString();
        long long53 = week51.getSerialIndex();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod54 = week51.next();
        java.util.Date date55 = regularTimePeriod54.getEnd();
        org.jfree.data.time.Week week58 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date59 = week58.getStart();
        org.jfree.data.time.Week week62 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod63 = week62.next();
        int int64 = week62.getYearValue();
        java.util.TimeZone timeZone65 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int66 = week62.compareTo((java.lang.Object) timeZone65);
        org.jfree.data.time.Week week67 = new org.jfree.data.time.Week(date59, timeZone65);
        org.jfree.data.time.Week week68 = new org.jfree.data.time.Week(date55, timeZone65);
        org.jfree.data.time.Week week69 = new org.jfree.data.time.Week(date26, timeZone65);
        org.jfree.data.time.Week week70 = new org.jfree.data.time.Week(date3, timeZone65);
        long long71 = week70.getFirstMillisecond();
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 52 + "'", int8 == 52);
        org.junit.Assert.assertNotNull(timeZone9);
// flaky:         org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 52 + "'", int17 == 52);
        org.junit.Assert.assertNotNull(timeZone18);
// flaky:         org.junit.Assert.assertEquals(timeZone18.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 52 + "'", int20 == 52);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 52 + "'", int23 == 52);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-60505750800001L) + "'", long24 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 35 + "'", int25 == 35);
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod35);
        org.junit.Assert.assertNotNull(wildcardClass36);
        org.junit.Assert.assertNotNull(class37);
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone44);
// flaky:         org.junit.Assert.assertEquals(timeZone44.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod45);
        org.junit.Assert.assertNotNull(regularTimePeriod46);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "Week 35, 52" + "'", str52, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 2791L + "'", long53 == 2791L);
        org.junit.Assert.assertNotNull(regularTimePeriod54);
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Sat Sep 02 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date59);
        org.junit.Assert.assertEquals(date59.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 52 + "'", int64 == 52);
        org.junit.Assert.assertNotNull(timeZone65);
// flaky:         org.junit.Assert.assertEquals(timeZone65.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + (-59101405200000L) + "'", long71 == (-59101405200000L));
    }

    @Test
    public void test1121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1121");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        int int11 = week2.getYearValue();
        long long12 = week2.getLastMillisecond();
        int int13 = week2.getWeek();
        int int14 = week2.getYearValue();
        long long15 = week2.getFirstMillisecond();
        int int16 = week2.getYearValue();
        int int17 = week2.getYearValue();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-60505750800001L) + "'", long12 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 52 + "'", int14 == 52);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-60506355600000L) + "'", long15 == (-60506355600000L));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 52 + "'", int16 == 52);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 52 + "'", int17 == 52);
    }

    @Test
    public void test1122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1122");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.next();
        java.util.Date date6 = week2.getEnd();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week(date6);
        java.util.Date date8 = week7.getStart();
        org.jfree.data.time.Week week9 = new org.jfree.data.time.Week(date8);
        java.util.Date date10 = week9.getEnd();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sat Aug 26 23:59:59 CET 52");
    }

    @Test
    public void test1123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1123");
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Week week1 = org.jfree.data.time.Week.parseWeek("Week 1, 1");
            org.junit.Assert.fail("Expected exception of type org.jfree.data.time.TimePeriodFormatException; message: Can't evaluate the year.");
        } catch (org.jfree.data.time.TimePeriodFormatException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1124");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.next();
        java.lang.Class<?> wildcardClass6 = regularTimePeriod5.getClass();
        java.lang.Class class7 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass6);
        java.lang.Class class8 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass6);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(class7);
        org.junit.Assert.assertNotNull(class8);
    }

    @Test
    public void test1125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1125");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date3 = week2.getStart();
        java.util.Date date4 = week2.getEnd();
        org.jfree.data.time.Week week5 = new org.jfree.data.time.Week(date4);
        java.lang.Class<?> wildcardClass6 = date4.getClass();
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test1126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1126");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.util.Date date3 = week2.getStart();
        int int4 = week2.getYearValue();
        long long5 = week2.getLastMillisecond();
        java.util.Calendar calendar6 = null;
        // The following exception was thrown during execution in test generation
        try {
            week2.peg(calendar6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-60505750800001L) + "'", long5 == (-60505750800001L));
    }

    @Test
    public void test1127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1127");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week();
        long long3 = week2.getFirstMillisecond();
        org.jfree.data.time.Year year4 = week2.getYear();
        org.jfree.data.time.Week week5 = new org.jfree.data.time.Week(0, year4);
        org.jfree.data.time.Year year6 = week5.getYear();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week(97, year6);
        java.util.Date date8 = week7.getEnd();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1637449200000L + "'", long3 == 1637449200000L);
        org.junit.Assert.assertNotNull(year4);
        org.junit.Assert.assertNotNull(year6);
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Sat Nov 05 23:59:59 CET 2022");
    }

    @Test
    public void test1128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1128");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        java.lang.Class<?> wildcardClass4 = week2.getClass();
        java.lang.Class class5 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass4);
        java.lang.Class class6 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass4);
        java.lang.Class class7 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass4);
        org.jfree.data.time.Week week10 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str11 = week10.toString();
        long long12 = week10.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod13 = week10.next();
        int int15 = week10.compareTo((java.lang.Object) 0.0d);
        org.jfree.data.time.Week week18 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str19 = week18.toString();
        long long20 = week18.getMiddleMillisecond();
        long long21 = week18.getLastMillisecond();
        org.jfree.data.time.Week week24 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod25 = week24.next();
        java.lang.Class<?> wildcardClass26 = week24.getClass();
        java.lang.Class class27 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass26);
        int int28 = week18.compareTo((java.lang.Object) wildcardClass26);
        java.lang.Class class29 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass26);
        int int30 = week10.compareTo((java.lang.Object) class29);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod31 = week10.next();
        java.util.Date date32 = week10.getStart();
        org.jfree.data.time.Week week35 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date36 = week35.getStart();
        java.util.Date date37 = week35.getEnd();
        org.jfree.data.time.Week week40 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date41 = week40.getStart();
        java.util.Date date42 = week40.getEnd();
        org.jfree.data.time.Week week45 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod46 = week45.next();
        java.lang.Class<?> wildcardClass47 = week45.getClass();
        java.lang.Class class48 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass47);
        org.jfree.data.time.Week week51 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date52 = week51.getStart();
        java.lang.Class class53 = null;
        java.util.Date date54 = null;
        java.util.TimeZone timeZone55 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod56 = org.jfree.data.time.RegularTimePeriod.createInstance(class53, date54, timeZone55);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod57 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass47, date52, timeZone55);
        org.jfree.data.time.Week week58 = new org.jfree.data.time.Week(date42, timeZone55);
        org.jfree.data.time.Week week59 = new org.jfree.data.time.Week(date37, timeZone55);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod60 = org.jfree.data.time.RegularTimePeriod.createInstance(class7, date32, timeZone55);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass61 = regularTimePeriod60.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(class5);
        org.junit.Assert.assertNotNull(class6);
        org.junit.Assert.assertNotNull(class7);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Week 35, 52" + "'", str11, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-60506053200001L) + "'", long12 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Week 35, 52" + "'", str19, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-60506053200001L) + "'", long20 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-60505750800001L) + "'", long21 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod25);
        org.junit.Assert.assertNotNull(wildcardClass26);
        org.junit.Assert.assertNotNull(class27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(class29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod31);
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod46);
        org.junit.Assert.assertNotNull(wildcardClass47);
        org.junit.Assert.assertNotNull(class48);
        org.junit.Assert.assertNotNull(date52);
        org.junit.Assert.assertEquals(date52.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone55);
// flaky:         org.junit.Assert.assertEquals(timeZone55.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod56);
        org.junit.Assert.assertNotNull(regularTimePeriod57);
        org.junit.Assert.assertNull(regularTimePeriod60);
    }

    @Test
    public void test1129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1129");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        int int11 = week2.getYearValue();
        long long12 = week2.getLastMillisecond();
        int int13 = week2.getWeek();
        int int14 = week2.getYearValue();
        long long15 = week2.getFirstMillisecond();
        int int16 = week2.getYearValue();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod17 = week2.previous();
        long long18 = week2.getSerialIndex();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-60505750800001L) + "'", long12 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 52 + "'", int14 == 52);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-60506355600000L) + "'", long15 == (-60506355600000L));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 52 + "'", int16 == 52);
        org.junit.Assert.assertNotNull(regularTimePeriod17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 2791L + "'", long18 == 2791L);
    }

    @Test
    public void test1130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1130");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        java.util.Date date10 = week2.getStart();
        org.jfree.data.time.Week week11 = new org.jfree.data.time.Week(date10);
        long long12 = week11.getFirstMillisecond();
        java.util.Date date13 = week11.getEnd();
        long long14 = week11.getFirstMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod15 = week11.next();
        long long16 = week11.getLastMillisecond();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-60506355600000L) + "'", long12 == (-60506355600000L));
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-60506355600000L) + "'", long14 == (-60506355600000L));
        org.junit.Assert.assertNotNull(regularTimePeriod15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-60505750800001L) + "'", long16 == (-60505750800001L));
    }

    @Test
    public void test1131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1131");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '4', (int) ' ');
        java.util.Date date3 = week2.getStart();
        java.util.Calendar calendar4 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long5 = week2.getMiddleMillisecond(calendar4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Dec 21 00:00:00 CET 32");
    }

    @Test
    public void test1132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1132");
        java.lang.Class class0 = null;
        org.jfree.data.time.Week week3 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str4 = week3.toString();
        long long5 = week3.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod6 = week3.next();
        int int8 = week3.compareTo((java.lang.Object) 0.0d);
        org.jfree.data.time.Week week11 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str12 = week11.toString();
        long long13 = week11.getMiddleMillisecond();
        long long14 = week11.getLastMillisecond();
        org.jfree.data.time.Week week17 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod18 = week17.next();
        java.lang.Class<?> wildcardClass19 = week17.getClass();
        java.lang.Class class20 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass19);
        int int21 = week11.compareTo((java.lang.Object) wildcardClass19);
        java.lang.Class class22 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass19);
        int int23 = week3.compareTo((java.lang.Object) class22);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod24 = week3.next();
        java.util.Date date25 = week3.getStart();
        long long26 = week3.getFirstMillisecond();
        java.util.Date date27 = week3.getEnd();
        org.jfree.data.time.Week week30 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str31 = week30.toString();
        long long32 = week30.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod33 = week30.next();
        java.util.Date date34 = week30.getEnd();
        org.jfree.data.time.Week week35 = new org.jfree.data.time.Week(date34);
        org.jfree.data.time.Week week38 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date39 = week38.getStart();
        org.jfree.data.time.Week week42 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod43 = week42.next();
        int int44 = week42.getYearValue();
        java.util.TimeZone timeZone45 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int46 = week42.compareTo((java.lang.Object) timeZone45);
        org.jfree.data.time.Week week47 = new org.jfree.data.time.Week(date39, timeZone45);
        org.jfree.data.time.Week week48 = new org.jfree.data.time.Week(date34, timeZone45);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod49 = org.jfree.data.time.RegularTimePeriod.createInstance(class0, date27, timeZone45);
        org.jfree.data.time.Week week50 = new org.jfree.data.time.Week(date27);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Week 35, 52" + "'", str4, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-60506053200001L) + "'", long5 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Week 35, 52" + "'", str12, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-60506053200001L) + "'", long13 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-60505750800001L) + "'", long14 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod18);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(class20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(class22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod24);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + (-60506355600000L) + "'", long26 == (-60506355600000L));
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Week 35, 52" + "'", str31, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + (-60506053200001L) + "'", long32 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod33);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 52 + "'", int44 == 52);
        org.junit.Assert.assertNotNull(timeZone45);
// flaky:         org.junit.Assert.assertEquals(timeZone45.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertNull(regularTimePeriod49);
    }

    @Test
    public void test1133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1133");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        long long8 = week2.getMiddleMillisecond();
        java.lang.Class<?> wildcardClass9 = week2.getClass();
        org.jfree.data.time.Week week12 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date13 = week12.getStart();
        org.jfree.data.time.Week week16 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod17 = week16.next();
        int int18 = week16.getYearValue();
        java.util.TimeZone timeZone19 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int20 = week16.compareTo((java.lang.Object) timeZone19);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod21 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass9, date13, timeZone19);
        org.jfree.data.time.Week week24 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod25 = week24.next();
        java.lang.Class<?> wildcardClass26 = week24.getClass();
        java.lang.Class class27 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass26);
        org.jfree.data.time.Week week30 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date31 = week30.getStart();
        java.lang.Class class32 = null;
        java.util.Date date33 = null;
        java.util.TimeZone timeZone34 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod35 = org.jfree.data.time.RegularTimePeriod.createInstance(class32, date33, timeZone34);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod36 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass26, date31, timeZone34);
        org.jfree.data.time.Week week39 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date40 = week39.getStart();
        org.jfree.data.time.Week week41 = new org.jfree.data.time.Week(date40);
        java.util.TimeZone timeZone42 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod43 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass26, date40, timeZone42);
        org.jfree.data.time.Week week44 = new org.jfree.data.time.Week(date13, timeZone42);
        int int45 = week44.getYearValue();
        int int46 = week44.getWeek();
        org.jfree.data.time.Week week49 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod50 = week49.next();
        long long51 = week49.getMiddleMillisecond();
        java.lang.String str52 = week49.toString();
        org.jfree.data.time.Week week55 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod56 = week55.next();
        java.lang.Class<?> wildcardClass57 = week55.getClass();
        java.lang.Class class58 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass57);
        org.jfree.data.time.Week week61 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date62 = week61.getStart();
        java.lang.Class class63 = null;
        java.util.Date date64 = null;
        java.util.TimeZone timeZone65 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod66 = org.jfree.data.time.RegularTimePeriod.createInstance(class63, date64, timeZone65);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod67 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass57, date62, timeZone65);
        java.lang.Class<?> wildcardClass68 = timeZone65.getClass();
        boolean boolean69 = week49.equals((java.lang.Object) wildcardClass68);
        java.lang.Class class70 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass68);
        int int71 = week44.compareTo((java.lang.Object) wildcardClass68);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod72 = week44.next();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-60506053200001L) + "'", long8 == (-60506053200001L));
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 52 + "'", int18 == 52);
        org.junit.Assert.assertNotNull(timeZone19);
// flaky:         org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod21);
        org.junit.Assert.assertNotNull(regularTimePeriod25);
        org.junit.Assert.assertNotNull(wildcardClass26);
        org.junit.Assert.assertNotNull(class27);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone34);
// flaky:         org.junit.Assert.assertEquals(timeZone34.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod35);
        org.junit.Assert.assertNotNull(regularTimePeriod36);
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone42);
// flaky:         org.junit.Assert.assertEquals(timeZone42.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNotNull(regularTimePeriod43);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 97 + "'", int45 == 97);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 9 + "'", int46 == 9);
        org.junit.Assert.assertNotNull(regularTimePeriod50);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + (-60506053200001L) + "'", long51 == (-60506053200001L));
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "Week 35, 52" + "'", str52, "Week 35, 52");
        org.junit.Assert.assertNotNull(regularTimePeriod56);
        org.junit.Assert.assertNotNull(wildcardClass57);
        org.junit.Assert.assertNotNull(class58);
        org.junit.Assert.assertNotNull(date62);
        org.junit.Assert.assertEquals(date62.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone65);
// flaky:         org.junit.Assert.assertEquals(timeZone65.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod66);
        org.junit.Assert.assertNotNull(regularTimePeriod67);
        org.junit.Assert.assertNotNull(wildcardClass68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(class70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod72);
    }

    @Test
    public void test1134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1134");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.previous();
        java.util.Date date4 = week2.getEnd();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod8 = week7.next();
        int int9 = week7.getYearValue();
        java.util.TimeZone timeZone10 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int11 = week7.compareTo((java.lang.Object) timeZone10);
        int int12 = week7.getYearValue();
        int int14 = week7.compareTo((java.lang.Object) 9);
        int int15 = week7.getYearValue();
        long long16 = week7.getLastMillisecond();
        int int17 = week7.getWeek();
        java.util.Date date18 = week7.getEnd();
        org.jfree.data.time.Week week21 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date22 = week21.getStart();
        java.util.Date date23 = week21.getEnd();
        org.jfree.data.time.Week week26 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod27 = week26.next();
        java.lang.Class<?> wildcardClass28 = week26.getClass();
        java.lang.Class class29 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass28);
        org.jfree.data.time.Week week32 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date33 = week32.getStart();
        java.lang.Class class34 = null;
        java.util.Date date35 = null;
        java.util.TimeZone timeZone36 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod37 = org.jfree.data.time.RegularTimePeriod.createInstance(class34, date35, timeZone36);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod38 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass28, date33, timeZone36);
        org.jfree.data.time.Week week39 = new org.jfree.data.time.Week(date23, timeZone36);
        org.jfree.data.time.Week week40 = new org.jfree.data.time.Week(date18, timeZone36);
        org.jfree.data.time.Week week41 = new org.jfree.data.time.Week(date4, timeZone36);
        java.lang.String str42 = week41.toString();
        int int43 = week41.getWeek();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 52 + "'", int9 == 52);
        org.junit.Assert.assertNotNull(timeZone10);
// flaky:         org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 52 + "'", int15 == 52);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-60505750800001L) + "'", long16 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 35 + "'", int17 == 35);
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod27);
        org.junit.Assert.assertNotNull(wildcardClass28);
        org.junit.Assert.assertNotNull(class29);
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone36);
// flaky:         org.junit.Assert.assertEquals(timeZone36.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod37);
        org.junit.Assert.assertNotNull(regularTimePeriod38);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Week 35, 52" + "'", str42, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 35 + "'", int43 == 35);
    }

    @Test
    public void test1135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1135");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        org.jfree.data.time.Week week6 = new org.jfree.data.time.Week();
        long long7 = week6.getFirstMillisecond();
        org.jfree.data.time.Year year8 = week6.getYear();
        org.jfree.data.time.Week week9 = new org.jfree.data.time.Week(0, year8);
        org.jfree.data.time.Week week10 = new org.jfree.data.time.Week(53, year8);
        int int11 = week2.compareTo((java.lang.Object) 53);
        long long12 = week2.getFirstMillisecond();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1637449200000L + "'", long7 == 1637449200000L);
        org.junit.Assert.assertNotNull(year8);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-60506355600000L) + "'", long12 == (-60506355600000L));
    }

    @Test
    public void test1136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1136");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        long long8 = week2.getFirstMillisecond();
        boolean boolean10 = week2.equals((java.lang.Object) 12);
        int int11 = week2.getWeek();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-60506355600000L) + "'", long8 == (-60506355600000L));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 35 + "'", int11 == 35);
    }

    @Test
    public void test1137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1137");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.next();
        java.lang.Class<?> wildcardClass6 = regularTimePeriod5.getClass();
        java.lang.Class class7 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass6);
        java.lang.Class class8 = org.jfree.data.time.RegularTimePeriod.downsize(class7);
        org.jfree.data.time.Week week11 = new org.jfree.data.time.Week((int) '4', (int) ' ');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod12 = week11.previous();
        int int13 = week11.getWeek();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod14 = week11.next();
        java.util.Date date15 = regularTimePeriod14.getEnd();
        org.jfree.data.time.Week week18 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod19 = week18.next();
        int int20 = week18.getYearValue();
        java.util.TimeZone timeZone21 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int22 = week18.compareTo((java.lang.Object) timeZone21);
        int int23 = week18.getYearValue();
        int int25 = week18.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod26 = week18.previous();
        int int27 = week18.getYearValue();
        long long28 = week18.getLastMillisecond();
        org.jfree.data.time.Week week31 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod32 = week31.next();
        java.lang.Class<?> wildcardClass33 = week31.getClass();
        java.lang.Class class34 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass33);
        boolean boolean35 = week18.equals((java.lang.Object) wildcardClass33);
        int int36 = week18.getYearValue();
        org.jfree.data.time.Week week39 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod40 = week39.next();
        int int41 = week39.getYearValue();
        java.util.TimeZone timeZone42 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int43 = week39.compareTo((java.lang.Object) timeZone42);
        int int44 = week39.getYearValue();
        int int46 = week39.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod47 = week39.previous();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod48 = week39.next();
        org.jfree.data.time.Week week51 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod52 = week51.next();
        java.lang.Class<?> wildcardClass53 = week51.getClass();
        java.lang.Class class54 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass53);
        java.lang.Class class55 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass53);
        boolean boolean56 = week39.equals((java.lang.Object) wildcardClass53);
        long long57 = week39.getSerialIndex();
        java.util.Date date58 = week39.getEnd();
        boolean boolean59 = week18.equals((java.lang.Object) date58);
        org.jfree.data.time.Week week62 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod63 = week62.previous();
        java.util.Date date64 = week62.getEnd();
        org.jfree.data.time.Week week67 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date68 = week67.getStart();
        java.util.Date date69 = week67.getEnd();
        java.util.Date date70 = week67.getStart();
        org.jfree.data.time.Week week73 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date74 = week73.getStart();
        org.jfree.data.time.Week week77 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod78 = week77.next();
        int int79 = week77.getYearValue();
        java.util.TimeZone timeZone80 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int81 = week77.compareTo((java.lang.Object) timeZone80);
        org.jfree.data.time.Week week82 = new org.jfree.data.time.Week(date74, timeZone80);
        org.jfree.data.time.Week week83 = new org.jfree.data.time.Week(date70, timeZone80);
        org.jfree.data.time.Week week84 = new org.jfree.data.time.Week(date64, timeZone80);
        org.jfree.data.time.Week week85 = new org.jfree.data.time.Week(date58, timeZone80);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod86 = org.jfree.data.time.RegularTimePeriod.createInstance(class7, date15, timeZone80);
        java.lang.Class<?> wildcardClass87 = timeZone80.getClass();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(class7);
        org.junit.Assert.assertNotNull(class8);
        org.junit.Assert.assertNotNull(regularTimePeriod12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 52 + "'", int13 == 52);
        org.junit.Assert.assertNotNull(regularTimePeriod14);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Sat Jan 03 23:59:59 CET 33");
        org.junit.Assert.assertNotNull(regularTimePeriod19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 52 + "'", int20 == 52);
        org.junit.Assert.assertNotNull(timeZone21);
// flaky:         org.junit.Assert.assertEquals(timeZone21.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 52 + "'", int23 == 52);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 52 + "'", int27 == 52);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + (-60505750800001L) + "'", long28 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod32);
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertNotNull(class34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 52 + "'", int36 == 52);
        org.junit.Assert.assertNotNull(regularTimePeriod40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 52 + "'", int41 == 52);
        org.junit.Assert.assertNotNull(timeZone42);
// flaky:         org.junit.Assert.assertEquals(timeZone42.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 52 + "'", int44 == 52);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod47);
        org.junit.Assert.assertNotNull(regularTimePeriod48);
        org.junit.Assert.assertNotNull(regularTimePeriod52);
        org.junit.Assert.assertNotNull(wildcardClass53);
        org.junit.Assert.assertNotNull(class54);
        org.junit.Assert.assertNotNull(class55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 2791L + "'", long57 == 2791L);
        org.junit.Assert.assertNotNull(date58);
        org.junit.Assert.assertEquals(date58.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(regularTimePeriod63);
        org.junit.Assert.assertNotNull(date64);
        org.junit.Assert.assertEquals(date64.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date68);
        org.junit.Assert.assertEquals(date68.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date69);
        org.junit.Assert.assertEquals(date69.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(date70);
        org.junit.Assert.assertEquals(date70.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date74);
        org.junit.Assert.assertEquals(date74.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 52 + "'", int79 == 52);
        org.junit.Assert.assertNotNull(timeZone80);
// flaky:         org.junit.Assert.assertEquals(timeZone80.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 1 + "'", int81 == 1);
        org.junit.Assert.assertNull(regularTimePeriod86);
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test1138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1138");
        org.jfree.data.time.Week week0 = new org.jfree.data.time.Week();
        long long1 = week0.getFirstMillisecond();
        org.jfree.data.time.Year year2 = week0.getYear();
        long long3 = week0.getLastMillisecond();
        long long4 = week0.getMiddleMillisecond();
        java.util.Calendar calendar5 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long6 = week0.getLastMillisecond(calendar5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1637449200000L + "'", long1 == 1637449200000L);
        org.junit.Assert.assertNotNull(year2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1638053999999L + "'", long3 == 1638053999999L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1637751599999L + "'", long4 == 1637751599999L);
    }

    @Test
    public void test1139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1139");
        org.jfree.data.time.Week week4 = new org.jfree.data.time.Week();
        long long5 = week4.getFirstMillisecond();
        org.jfree.data.time.Year year6 = week4.getYear();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week((int) (byte) 100, year6);
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week((int) (short) 10, year6);
        org.jfree.data.time.Week week9 = new org.jfree.data.time.Week(1, year6);
        org.jfree.data.time.Week week10 = new org.jfree.data.time.Week(0, year6);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod11 = week10.next();
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1637449200000L + "'", long5 == 1637449200000L);
        org.junit.Assert.assertNotNull(year6);
        org.junit.Assert.assertNotNull(regularTimePeriod11);
    }

    @Test
    public void test1140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1140");
        org.jfree.data.time.Week week3 = new org.jfree.data.time.Week();
        long long4 = week3.getFirstMillisecond();
        org.jfree.data.time.Year year5 = week3.getYear();
        org.jfree.data.time.Week week6 = new org.jfree.data.time.Week((int) (byte) 100, year5);
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week((int) (short) 10, year5);
        org.jfree.data.time.Week week11 = new org.jfree.data.time.Week();
        long long12 = week11.getFirstMillisecond();
        org.jfree.data.time.Year year13 = week11.getYear();
        org.jfree.data.time.Week week14 = new org.jfree.data.time.Week(52, year13);
        java.util.Date date15 = year13.getStart();
        org.jfree.data.time.Week week16 = new org.jfree.data.time.Week(100, year13);
        org.jfree.data.time.Week week17 = new org.jfree.data.time.Week(1, year13);
        int int18 = week7.compareTo((java.lang.Object) year13);
        org.jfree.data.time.Week week19 = new org.jfree.data.time.Week(5, year13);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1637449200000L + "'", long4 == 1637449200000L);
        org.junit.Assert.assertNotNull(year5);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1637449200000L + "'", long12 == 1637449200000L);
        org.junit.Assert.assertNotNull(year13);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Fri Jan 01 00:00:00 CET 2021");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
    }

    @Test
    public void test1141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1141");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date3 = week2.getStart();
        org.jfree.data.time.Week week4 = new org.jfree.data.time.Week(date3);
        long long5 = week4.getSerialIndex();
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str9 = week8.toString();
        long long10 = week8.getSerialIndex();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod11 = week8.next();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod12 = week8.previous();
        java.lang.Class<?> wildcardClass13 = week8.getClass();
        java.lang.Class class14 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass13);
        boolean boolean15 = week4.equals((java.lang.Object) wildcardClass13);
        org.jfree.data.time.Week week18 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod19 = week18.previous();
        java.util.Date date20 = week18.getEnd();
        int int21 = week18.getWeek();
        boolean boolean22 = week4.equals((java.lang.Object) int21);
        org.jfree.data.time.Week week25 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod26 = week25.next();
        int int27 = week25.getYearValue();
        java.util.TimeZone timeZone28 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int29 = week25.compareTo((java.lang.Object) timeZone28);
        int int30 = week25.getYearValue();
        int int32 = week25.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod33 = week25.previous();
        int int34 = week25.getYearValue();
        long long35 = week25.getLastMillisecond();
        org.jfree.data.time.Week week38 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod39 = week38.next();
        java.lang.Class<?> wildcardClass40 = week38.getClass();
        java.lang.Class class41 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass40);
        boolean boolean42 = week25.equals((java.lang.Object) wildcardClass40);
        int int43 = week25.getYearValue();
        org.jfree.data.time.Week week46 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod47 = week46.next();
        int int48 = week46.getYearValue();
        java.util.TimeZone timeZone49 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int50 = week46.compareTo((java.lang.Object) timeZone49);
        int int51 = week46.getYearValue();
        int int53 = week46.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod54 = week46.previous();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod55 = week46.next();
        org.jfree.data.time.Week week58 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod59 = week58.next();
        java.lang.Class<?> wildcardClass60 = week58.getClass();
        java.lang.Class class61 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass60);
        java.lang.Class class62 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass60);
        boolean boolean63 = week46.equals((java.lang.Object) wildcardClass60);
        long long64 = week46.getSerialIndex();
        java.util.Date date65 = week46.getEnd();
        boolean boolean66 = week25.equals((java.lang.Object) date65);
        int int67 = week4.compareTo((java.lang.Object) boolean66);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 5150L + "'", long5 == 5150L);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Week 35, 52" + "'", str9, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 2791L + "'", long10 == 2791L);
        org.junit.Assert.assertNotNull(regularTimePeriod11);
        org.junit.Assert.assertNotNull(regularTimePeriod12);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(class14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(regularTimePeriod19);
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 35 + "'", int21 == 35);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(regularTimePeriod26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 52 + "'", int27 == 52);
        org.junit.Assert.assertNotNull(timeZone28);
// flaky:         org.junit.Assert.assertEquals(timeZone28.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 52 + "'", int30 == 52);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 52 + "'", int34 == 52);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + (-60505750800001L) + "'", long35 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod39);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertNotNull(class41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 52 + "'", int43 == 52);
        org.junit.Assert.assertNotNull(regularTimePeriod47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 52 + "'", int48 == 52);
        org.junit.Assert.assertNotNull(timeZone49);
// flaky:         org.junit.Assert.assertEquals(timeZone49.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 52 + "'", int51 == 52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod54);
        org.junit.Assert.assertNotNull(regularTimePeriod55);
        org.junit.Assert.assertNotNull(regularTimePeriod59);
        org.junit.Assert.assertNotNull(wildcardClass60);
        org.junit.Assert.assertNotNull(class61);
        org.junit.Assert.assertNotNull(class62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 2791L + "'", long64 == 2791L);
        org.junit.Assert.assertNotNull(date65);
        org.junit.Assert.assertEquals(date65.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
    }

    @Test
    public void test1142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1142");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date3 = week2.getStart();
        java.util.Date date4 = week2.getEnd();
        int int5 = week2.getYearValue();
        java.util.Date date6 = week2.getStart();
        long long7 = week2.getMiddleMillisecond();
        long long8 = week2.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod9 = week2.previous();
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 97 + "'", int5 == 97);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-59101102800001L) + "'", long7 == (-59101102800001L));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-59101102800001L) + "'", long8 == (-59101102800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod9);
    }

    @Test
    public void test1143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1143");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(3, 2022);
        int int3 = week2.getWeek();
        java.util.Calendar calendar4 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long5 = week2.getMiddleMillisecond(calendar4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 3 + "'", int3 == 3);
    }

    @Test
    public void test1144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1144");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        long long5 = week2.getLastMillisecond();
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod9 = week8.next();
        java.lang.Class<?> wildcardClass10 = week8.getClass();
        java.lang.Class class11 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass10);
        int int12 = week2.compareTo((java.lang.Object) wildcardClass10);
        long long13 = week2.getMiddleMillisecond();
        java.util.Date date14 = week2.getEnd();
        int int15 = week2.getWeek();
        long long16 = week2.getLastMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod17 = week2.next();
        long long18 = week2.getFirstMillisecond();
        long long19 = week2.getFirstMillisecond();
        java.util.Calendar calendar20 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long21 = week2.getFirstMillisecond(calendar20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-60505750800001L) + "'", long5 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod9);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNotNull(class11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-60506053200001L) + "'", long13 == (-60506053200001L));
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 35 + "'", int15 == 35);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-60505750800001L) + "'", long16 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-60506355600000L) + "'", long18 == (-60506355600000L));
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-60506355600000L) + "'", long19 == (-60506355600000L));
    }

    @Test
    public void test1145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1145");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        int int11 = week2.getYearValue();
        long long12 = week2.getLastMillisecond();
        org.jfree.data.time.Week week15 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod16 = week15.next();
        java.lang.Class<?> wildcardClass17 = week15.getClass();
        java.lang.Class class18 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass17);
        boolean boolean19 = week2.equals((java.lang.Object) wildcardClass17);
        int int20 = week2.getYearValue();
        java.lang.Object obj21 = null;
        int int22 = week2.compareTo(obj21);
        long long23 = week2.getSerialIndex();
        int int24 = week2.getYearValue();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-60505750800001L) + "'", long12 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(class18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 52 + "'", int20 == 52);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 2791L + "'", long23 == 2791L);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 52 + "'", int24 == 52);
    }

    @Test
    public void test1146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1146");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        int int11 = week2.getYearValue();
        long long12 = week2.getLastMillisecond();
        int int13 = week2.getWeek();
        int int14 = week2.getYearValue();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod15 = week2.next();
        int int16 = week2.getYearValue();
        long long17 = week2.getSerialIndex();
        long long18 = week2.getFirstMillisecond();
        java.lang.String str19 = week2.toString();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-60505750800001L) + "'", long12 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 52 + "'", int14 == 52);
        org.junit.Assert.assertNotNull(regularTimePeriod15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 52 + "'", int16 == 52);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 2791L + "'", long17 == 2791L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-60506355600000L) + "'", long18 == (-60506355600000L));
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Week 35, 52" + "'", str19, "Week 35, 52");
    }

    @Test
    public void test1147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1147");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getSerialIndex();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.next();
        java.util.Date date6 = regularTimePeriod5.getEnd();
        org.jfree.data.time.Week week9 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date10 = week9.getStart();
        org.jfree.data.time.Week week13 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod14 = week13.next();
        int int15 = week13.getYearValue();
        java.util.TimeZone timeZone16 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int17 = week13.compareTo((java.lang.Object) timeZone16);
        org.jfree.data.time.Week week18 = new org.jfree.data.time.Week(date10, timeZone16);
        org.jfree.data.time.Week week19 = new org.jfree.data.time.Week(date6, timeZone16);
        org.jfree.data.time.Week week22 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str23 = week22.toString();
        long long24 = week22.getSerialIndex();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod25 = week22.next();
        java.util.Date date26 = regularTimePeriod25.getEnd();
        org.jfree.data.time.Week week29 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date30 = week29.getStart();
        org.jfree.data.time.Week week33 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod34 = week33.next();
        int int35 = week33.getYearValue();
        java.util.TimeZone timeZone36 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int37 = week33.compareTo((java.lang.Object) timeZone36);
        org.jfree.data.time.Week week38 = new org.jfree.data.time.Week(date30, timeZone36);
        org.jfree.data.time.Week week39 = new org.jfree.data.time.Week(date26, timeZone36);
        org.jfree.data.time.Week week40 = new org.jfree.data.time.Week(date6, timeZone36);
        java.util.Date date41 = week40.getStart();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 2791L + "'", long4 == 2791L);
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Sep 02 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 52 + "'", int15 == 52);
        org.junit.Assert.assertNotNull(timeZone16);
// flaky:         org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Week 35, 52" + "'", str23, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 2791L + "'", long24 == 2791L);
        org.junit.Assert.assertNotNull(regularTimePeriod25);
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Sat Sep 02 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 52 + "'", int35 == 52);
        org.junit.Assert.assertNotNull(timeZone36);
// flaky:         org.junit.Assert.assertEquals(timeZone36.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Sun Aug 27 00:00:00 CET 52");
    }

    @Test
    public void test1148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1148");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        int int11 = week2.getYearValue();
        long long12 = week2.getLastMillisecond();
        org.jfree.data.time.Week week15 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod16 = week15.next();
        java.lang.Class<?> wildcardClass17 = week15.getClass();
        java.lang.Class class18 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass17);
        boolean boolean19 = week2.equals((java.lang.Object) wildcardClass17);
        int int20 = week2.getYearValue();
        java.lang.Object obj21 = null;
        int int22 = week2.compareTo(obj21);
        long long23 = week2.getLastMillisecond();
        java.lang.String str24 = week2.toString();
        org.jfree.data.time.Week week27 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod28 = week27.next();
        int int29 = week27.getYearValue();
        java.util.TimeZone timeZone30 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int31 = week27.compareTo((java.lang.Object) timeZone30);
        int int32 = week27.getYearValue();
        int int34 = week27.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod35 = week27.previous();
        int int36 = week27.getYearValue();
        long long37 = week27.getLastMillisecond();
        int int38 = week27.getWeek();
        int int39 = week27.getYearValue();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod40 = week27.next();
        int int41 = week27.getYearValue();
        long long42 = week27.getSerialIndex();
        // The following exception was thrown during execution in test generation
        try {
            int int43 = week2.compareTo((java.lang.Object) week27);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Year constructor: year (52) outside valid range.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-60505750800001L) + "'", long12 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(class18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 52 + "'", int20 == 52);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-60505750800001L) + "'", long23 == (-60505750800001L));
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Week 35, 52" + "'", str24, "Week 35, 52");
        org.junit.Assert.assertNotNull(regularTimePeriod28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 52 + "'", int29 == 52);
        org.junit.Assert.assertNotNull(timeZone30);
// flaky:         org.junit.Assert.assertEquals(timeZone30.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 52 + "'", int32 == 52);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 52 + "'", int36 == 52);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + (-60505750800001L) + "'", long37 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 35 + "'", int38 == 35);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 52 + "'", int39 == 52);
        org.junit.Assert.assertNotNull(regularTimePeriod40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 52 + "'", int41 == 52);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 2791L + "'", long42 == 2791L);
    }

    @Test
    public void test1149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1149");
        org.jfree.data.time.Week week1 = new org.jfree.data.time.Week();
        long long2 = week1.getFirstMillisecond();
        org.jfree.data.time.Year year3 = week1.getYear();
        org.jfree.data.time.Week week4 = new org.jfree.data.time.Week((int) (byte) 100, year3);
        java.lang.Class<?> wildcardClass5 = year3.getClass();
        java.lang.Class class6 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass5);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1637449200000L + "'", long2 == 1637449200000L);
        org.junit.Assert.assertNotNull(year3);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(class6);
    }

    @Test
    public void test1150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1150");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) (byte) 0, (int) (byte) -1);
        long long3 = week2.getSerialIndex();
        java.util.Calendar calendar4 = null;
        // The following exception was thrown during execution in test generation
        try {
            week2.peg(calendar4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-53L) + "'", long3 == (-53L));
    }

    @Test
    public void test1151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1151");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod11 = week2.next();
        java.util.Date date12 = week2.getStart();
        java.util.Date date13 = week2.getStart();
        org.jfree.data.time.Week week16 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod17 = week16.next();
        int int18 = week16.getYearValue();
        java.util.TimeZone timeZone19 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int20 = week16.compareTo((java.lang.Object) timeZone19);
        int int21 = week16.getYearValue();
        int int23 = week16.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod24 = week16.previous();
        int int25 = week16.getYearValue();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod26 = week16.next();
        java.lang.Class<?> wildcardClass27 = regularTimePeriod26.getClass();
        org.jfree.data.time.Week week30 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod31 = week30.next();
        java.lang.Class<?> wildcardClass32 = week30.getClass();
        java.lang.Class class33 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass32);
        java.lang.Class class34 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass32);
        org.jfree.data.time.Week week37 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod38 = week37.next();
        int int39 = week37.getYearValue();
        java.util.TimeZone timeZone40 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int41 = week37.compareTo((java.lang.Object) timeZone40);
        int int42 = week37.getYearValue();
        int int44 = week37.compareTo((java.lang.Object) 9);
        java.util.Date date45 = week37.getStart();
        org.jfree.data.time.Week week46 = new org.jfree.data.time.Week(date45);
        org.jfree.data.time.Week week49 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod50 = week49.next();
        int int51 = week49.getYearValue();
        java.util.TimeZone timeZone52 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int53 = week49.compareTo((java.lang.Object) timeZone52);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod54 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass32, date45, timeZone52);
        org.jfree.data.time.Week week57 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str58 = week57.toString();
        long long59 = week57.getMiddleMillisecond();
        long long60 = week57.getLastMillisecond();
        org.jfree.data.time.Week week63 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod64 = week63.next();
        java.lang.Class<?> wildcardClass65 = week63.getClass();
        java.lang.Class class66 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass65);
        int int67 = week57.compareTo((java.lang.Object) wildcardClass65);
        java.lang.Class class68 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass65);
        org.jfree.data.time.Week week71 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod72 = week71.next();
        java.lang.Class<?> wildcardClass73 = week71.getClass();
        java.lang.Class class74 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass73);
        org.jfree.data.time.Week week77 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date78 = week77.getStart();
        java.lang.Class class79 = null;
        java.util.Date date80 = null;
        java.util.TimeZone timeZone81 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod82 = org.jfree.data.time.RegularTimePeriod.createInstance(class79, date80, timeZone81);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod83 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass73, date78, timeZone81);
        java.util.TimeZone timeZone84 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod85 = org.jfree.data.time.RegularTimePeriod.createInstance(class68, date78, timeZone84);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod86 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass27, date45, timeZone84);
        org.jfree.data.time.Week week87 = new org.jfree.data.time.Week(date13, timeZone84);
        int int88 = week87.getWeek();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod89 = week87.previous();
        long long90 = regularTimePeriod89.getMiddleMillisecond();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertNotNull(regularTimePeriod11);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 52 + "'", int18 == 52);
        org.junit.Assert.assertNotNull(timeZone19);
// flaky:         org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 52 + "'", int21 == 52);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 52 + "'", int25 == 52);
        org.junit.Assert.assertNotNull(regularTimePeriod26);
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertNotNull(regularTimePeriod31);
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertNotNull(class33);
        org.junit.Assert.assertNotNull(class34);
        org.junit.Assert.assertNotNull(regularTimePeriod38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 52 + "'", int39 == 52);
        org.junit.Assert.assertNotNull(timeZone40);
// flaky:         org.junit.Assert.assertEquals(timeZone40.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 52 + "'", int42 == 52);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 52 + "'", int51 == 52);
        org.junit.Assert.assertNotNull(timeZone52);
// flaky:         org.junit.Assert.assertEquals(timeZone52.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod54);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "Week 35, 52" + "'", str58, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + (-60506053200001L) + "'", long59 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + (-60505750800001L) + "'", long60 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod64);
        org.junit.Assert.assertNotNull(wildcardClass65);
        org.junit.Assert.assertNotNull(class66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertNotNull(class68);
        org.junit.Assert.assertNotNull(regularTimePeriod72);
        org.junit.Assert.assertNotNull(wildcardClass73);
        org.junit.Assert.assertNotNull(class74);
        org.junit.Assert.assertNotNull(date78);
        org.junit.Assert.assertEquals(date78.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone81);
// flaky:         org.junit.Assert.assertEquals(timeZone81.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod82);
        org.junit.Assert.assertNotNull(regularTimePeriod83);
        org.junit.Assert.assertNotNull(timeZone84);
// flaky:         org.junit.Assert.assertEquals(timeZone84.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod85);
        org.junit.Assert.assertNotNull(regularTimePeriod86);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 35 + "'", int88 == 35);
        org.junit.Assert.assertNotNull(regularTimePeriod89);
        org.junit.Assert.assertTrue("'" + long90 + "' != '" + (-60506658000001L) + "'", long90 == (-60506658000001L));
    }

    @Test
    public void test1152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1152");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.previous();
        java.util.Date date4 = week2.getEnd();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod8 = week7.next();
        int int9 = week7.getYearValue();
        java.util.TimeZone timeZone10 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int11 = week7.compareTo((java.lang.Object) timeZone10);
        int int12 = week7.getYearValue();
        int int14 = week7.compareTo((java.lang.Object) 9);
        int int15 = week7.getYearValue();
        long long16 = week7.getLastMillisecond();
        int int17 = week7.getWeek();
        java.util.Date date18 = week7.getEnd();
        org.jfree.data.time.Week week21 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date22 = week21.getStart();
        java.util.Date date23 = week21.getEnd();
        org.jfree.data.time.Week week26 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod27 = week26.next();
        java.lang.Class<?> wildcardClass28 = week26.getClass();
        java.lang.Class class29 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass28);
        org.jfree.data.time.Week week32 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date33 = week32.getStart();
        java.lang.Class class34 = null;
        java.util.Date date35 = null;
        java.util.TimeZone timeZone36 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod37 = org.jfree.data.time.RegularTimePeriod.createInstance(class34, date35, timeZone36);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod38 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass28, date33, timeZone36);
        org.jfree.data.time.Week week39 = new org.jfree.data.time.Week(date23, timeZone36);
        org.jfree.data.time.Week week40 = new org.jfree.data.time.Week(date18, timeZone36);
        org.jfree.data.time.Week week41 = new org.jfree.data.time.Week(date4, timeZone36);
        org.jfree.data.time.Week week44 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str45 = week44.toString();
        long long46 = week44.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod47 = week44.next();
        int int49 = week44.compareTo((java.lang.Object) 0.0d);
        org.jfree.data.time.Week week52 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str53 = week52.toString();
        long long54 = week52.getMiddleMillisecond();
        long long55 = week52.getLastMillisecond();
        org.jfree.data.time.Week week58 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod59 = week58.next();
        java.lang.Class<?> wildcardClass60 = week58.getClass();
        java.lang.Class class61 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass60);
        int int62 = week52.compareTo((java.lang.Object) wildcardClass60);
        java.lang.Class class63 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass60);
        int int64 = week44.compareTo((java.lang.Object) class63);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod65 = week44.next();
        java.util.Date date66 = week44.getStart();
        long long67 = week44.getFirstMillisecond();
        java.util.Date date68 = week44.getEnd();
        int int69 = week41.compareTo((java.lang.Object) date68);
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 52 + "'", int9 == 52);
        org.junit.Assert.assertNotNull(timeZone10);
// flaky:         org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 52 + "'", int15 == 52);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-60505750800001L) + "'", long16 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 35 + "'", int17 == 35);
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod27);
        org.junit.Assert.assertNotNull(wildcardClass28);
        org.junit.Assert.assertNotNull(class29);
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone36);
// flaky:         org.junit.Assert.assertEquals(timeZone36.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod37);
        org.junit.Assert.assertNotNull(regularTimePeriod38);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Week 35, 52" + "'", str45, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + (-60506053200001L) + "'", long46 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod47);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "Week 35, 52" + "'", str53, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + (-60506053200001L) + "'", long54 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + (-60505750800001L) + "'", long55 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod59);
        org.junit.Assert.assertNotNull(wildcardClass60);
        org.junit.Assert.assertNotNull(class61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertNotNull(class63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod65);
        org.junit.Assert.assertNotNull(date66);
        org.junit.Assert.assertEquals(date66.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + (-60506355600000L) + "'", long67 == (-60506355600000L));
        org.junit.Assert.assertNotNull(date68);
        org.junit.Assert.assertEquals(date68.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1 + "'", int69 == 1);
    }

    @Test
    public void test1153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1153");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getWeek();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod8 = week2.next();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod9 = week2.previous();
        long long10 = week2.getLastMillisecond();
        long long11 = week2.getSerialIndex();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 35 + "'", int7 == 35);
        org.junit.Assert.assertNotNull(regularTimePeriod8);
        org.junit.Assert.assertNotNull(regularTimePeriod9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-60505750800001L) + "'", long10 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 2791L + "'", long11 == 2791L);
    }

    @Test
    public void test1154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1154");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.next();
        java.util.Date date6 = week2.getEnd();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week(date6);
        long long8 = week7.getLastMillisecond();
        java.lang.String str9 = week7.toString();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week7.next();
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Year year11 = week7.getYear();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Year constructor: year (52) outside valid range.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-60505750800001L) + "'", long8 == (-60505750800001L));
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Week 35, 52" + "'", str9, "Week 35, 52");
        org.junit.Assert.assertNotNull(regularTimePeriod10);
    }

    @Test
    public void test1155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1155");
        org.jfree.data.time.Week week4 = new org.jfree.data.time.Week();
        long long5 = week4.getFirstMillisecond();
        org.jfree.data.time.Year year6 = week4.getYear();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week(0, year6);
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week(11, year6);
        org.jfree.data.time.Week week9 = new org.jfree.data.time.Week(3, year6);
        org.jfree.data.time.Week week10 = new org.jfree.data.time.Week((int) (short) 100, year6);
        java.util.Date date11 = week10.getEnd();
        org.jfree.data.time.Week week14 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod15 = week14.next();
        int int16 = week14.getYearValue();
        java.util.TimeZone timeZone17 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int18 = week14.compareTo((java.lang.Object) timeZone17);
        int int19 = week14.getYearValue();
        int int21 = week14.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod22 = week14.previous();
        int int23 = week14.getYearValue();
        long long24 = week14.getLastMillisecond();
        int int25 = week14.getWeek();
        int int26 = week14.getYearValue();
        long long27 = week14.getSerialIndex();
        java.util.Date date28 = week14.getEnd();
        org.jfree.data.time.Week week31 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date32 = week31.getStart();
        java.util.Date date33 = week31.getEnd();
        java.util.Date date34 = week31.getStart();
        org.jfree.data.time.Week week37 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date38 = week37.getStart();
        org.jfree.data.time.Week week41 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod42 = week41.next();
        int int43 = week41.getYearValue();
        java.util.TimeZone timeZone44 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int45 = week41.compareTo((java.lang.Object) timeZone44);
        org.jfree.data.time.Week week46 = new org.jfree.data.time.Week(date38, timeZone44);
        org.jfree.data.time.Week week47 = new org.jfree.data.time.Week(date34, timeZone44);
        org.jfree.data.time.Week week48 = new org.jfree.data.time.Week(date28, timeZone44);
        org.jfree.data.time.Week week49 = new org.jfree.data.time.Week(date11, timeZone44);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1637449200000L + "'", long5 == 1637449200000L);
        org.junit.Assert.assertNotNull(year6);
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Sat Nov 26 23:59:59 CET 2022");
        org.junit.Assert.assertNotNull(regularTimePeriod15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 52 + "'", int16 == 52);
        org.junit.Assert.assertNotNull(timeZone17);
// flaky:         org.junit.Assert.assertEquals(timeZone17.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 52 + "'", int19 == 52);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 52 + "'", int23 == 52);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-60505750800001L) + "'", long24 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 35 + "'", int25 == 35);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 52 + "'", int26 == 52);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 2791L + "'", long27 == 2791L);
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 52 + "'", int43 == 52);
        org.junit.Assert.assertNotNull(timeZone44);
// flaky:         org.junit.Assert.assertEquals(timeZone44.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
    }

    @Test
    public void test1156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1156");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getWeek();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod8 = week2.next();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod9 = week2.previous();
        long long10 = week2.getLastMillisecond();
        long long11 = week2.getMiddleMillisecond();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 35 + "'", int7 == 35);
        org.junit.Assert.assertNotNull(regularTimePeriod8);
        org.junit.Assert.assertNotNull(regularTimePeriod9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-60505750800001L) + "'", long10 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-60506053200001L) + "'", long11 == (-60506053200001L));
    }

    @Test
    public void test1157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1157");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        long long5 = week2.getLastMillisecond();
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod9 = week8.next();
        java.lang.Class<?> wildcardClass10 = week8.getClass();
        java.lang.Class class11 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass10);
        int int12 = week2.compareTo((java.lang.Object) wildcardClass10);
        long long13 = week2.getMiddleMillisecond();
        java.util.Date date14 = week2.getEnd();
        int int15 = week2.getWeek();
        long long16 = week2.getLastMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod17 = week2.next();
        long long18 = week2.getFirstMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod19 = week2.next();
        org.jfree.data.time.Week week22 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str23 = week22.toString();
        long long24 = week22.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod25 = week22.next();
        long long26 = week22.getMiddleMillisecond();
        java.util.Date date27 = week22.getStart();
        int int28 = week22.getWeek();
        boolean boolean29 = week2.equals((java.lang.Object) week22);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-60505750800001L) + "'", long5 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod9);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNotNull(class11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-60506053200001L) + "'", long13 == (-60506053200001L));
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 35 + "'", int15 == 35);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-60505750800001L) + "'", long16 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-60506355600000L) + "'", long18 == (-60506355600000L));
        org.junit.Assert.assertNotNull(regularTimePeriod19);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Week 35, 52" + "'", str23, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-60506053200001L) + "'", long24 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod25);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + (-60506053200001L) + "'", long26 == (-60506053200001L));
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 35 + "'", int28 == 35);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
    }

    @Test
    public void test1158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1158");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, 2);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.previous();
        java.util.Calendar calendar4 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long5 = week2.getLastMillisecond(calendar4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
    }

    @Test
    public void test1159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1159");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        long long8 = week2.getFirstMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod9 = week2.previous();
        java.lang.Class<?> wildcardClass10 = regularTimePeriod9.getClass();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-60506355600000L) + "'", long8 == (-60506355600000L));
        org.junit.Assert.assertNotNull(regularTimePeriod9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test1160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1160");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week();
        long long3 = week2.getFirstMillisecond();
        org.jfree.data.time.Year year4 = week2.getYear();
        org.jfree.data.time.Week week5 = new org.jfree.data.time.Week(0, year4);
        java.util.Date date6 = week5.getStart();
        java.util.Date date7 = week5.getStart();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod8 = week5.next();
        org.jfree.data.time.Year year9 = week5.getYear();
        org.jfree.data.time.Week week10 = new org.jfree.data.time.Week(52, year9);
        java.util.Calendar calendar11 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long12 = year9.getMiddleMillisecond(calendar11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1637449200000L + "'", long3 == 1637449200000L);
        org.junit.Assert.assertNotNull(year4);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sun Dec 20 00:00:00 CET 2020");
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Sun Dec 20 00:00:00 CET 2020");
        org.junit.Assert.assertNotNull(regularTimePeriod8);
        org.junit.Assert.assertNotNull(year9);
    }

    @Test
    public void test1161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1161");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((-1), (int) (byte) 100);
    }

    @Test
    public void test1162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1162");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(2, 0);
    }

    @Test
    public void test1163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1163");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week();
        long long3 = week2.getFirstMillisecond();
        org.jfree.data.time.Year year4 = week2.getYear();
        org.jfree.data.time.Week week5 = new org.jfree.data.time.Week(0, year4);
        org.jfree.data.time.Week week6 = new org.jfree.data.time.Week((int) (short) 10, year4);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1637449200000L + "'", long3 == 1637449200000L);
        org.junit.Assert.assertNotNull(year4);
    }

    @Test
    public void test1164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1164");
        java.util.Date date0 = null;
        org.jfree.data.time.Week week3 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date4 = week3.getStart();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod8 = week7.next();
        int int9 = week7.getYearValue();
        java.util.TimeZone timeZone10 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int11 = week7.compareTo((java.lang.Object) timeZone10);
        org.jfree.data.time.Week week12 = new org.jfree.data.time.Week(date4, timeZone10);
        org.jfree.data.time.Week week13 = new org.jfree.data.time.Week(date4);
        org.jfree.data.time.Week week16 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod17 = week16.next();
        int int18 = week16.getYearValue();
        java.util.TimeZone timeZone19 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int20 = week16.compareTo((java.lang.Object) timeZone19);
        int int21 = week16.getYearValue();
        int int23 = week16.compareTo((java.lang.Object) 9);
        int int24 = week16.getYearValue();
        long long25 = week16.getLastMillisecond();
        int int26 = week16.getWeek();
        java.util.Date date27 = week16.getEnd();
        org.jfree.data.time.Week week30 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date31 = week30.getStart();
        java.util.Date date32 = week30.getEnd();
        org.jfree.data.time.Week week35 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod36 = week35.next();
        java.lang.Class<?> wildcardClass37 = week35.getClass();
        java.lang.Class class38 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass37);
        org.jfree.data.time.Week week41 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date42 = week41.getStart();
        java.lang.Class class43 = null;
        java.util.Date date44 = null;
        java.util.TimeZone timeZone45 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod46 = org.jfree.data.time.RegularTimePeriod.createInstance(class43, date44, timeZone45);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod47 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass37, date42, timeZone45);
        org.jfree.data.time.Week week48 = new org.jfree.data.time.Week(date32, timeZone45);
        org.jfree.data.time.Week week49 = new org.jfree.data.time.Week(date27, timeZone45);
        org.jfree.data.time.Week week52 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str53 = week52.toString();
        long long54 = week52.getSerialIndex();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod55 = week52.next();
        java.util.Date date56 = regularTimePeriod55.getEnd();
        org.jfree.data.time.Week week59 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date60 = week59.getStart();
        org.jfree.data.time.Week week63 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod64 = week63.next();
        int int65 = week63.getYearValue();
        java.util.TimeZone timeZone66 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int67 = week63.compareTo((java.lang.Object) timeZone66);
        org.jfree.data.time.Week week68 = new org.jfree.data.time.Week(date60, timeZone66);
        org.jfree.data.time.Week week69 = new org.jfree.data.time.Week(date56, timeZone66);
        org.jfree.data.time.Week week70 = new org.jfree.data.time.Week(date27, timeZone66);
        org.jfree.data.time.Week week71 = new org.jfree.data.time.Week(date4, timeZone66);
        java.util.Locale locale72 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Week week73 = new org.jfree.data.time.Week(date0, timeZone66, locale72);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'time' argument.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 52 + "'", int9 == 52);
        org.junit.Assert.assertNotNull(timeZone10);
// flaky:         org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 52 + "'", int18 == 52);
        org.junit.Assert.assertNotNull(timeZone19);
// flaky:         org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 52 + "'", int21 == 52);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 52 + "'", int24 == 52);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-60505750800001L) + "'", long25 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 35 + "'", int26 == 35);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod36);
        org.junit.Assert.assertNotNull(wildcardClass37);
        org.junit.Assert.assertNotNull(class38);
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone45);
// flaky:         org.junit.Assert.assertEquals(timeZone45.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod46);
        org.junit.Assert.assertNotNull(regularTimePeriod47);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "Week 35, 52" + "'", str53, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 2791L + "'", long54 == 2791L);
        org.junit.Assert.assertNotNull(regularTimePeriod55);
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Sat Sep 02 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date60);
        org.junit.Assert.assertEquals(date60.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 52 + "'", int65 == 52);
        org.junit.Assert.assertNotNull(timeZone66);
// flaky:         org.junit.Assert.assertEquals(timeZone66.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
    }

    @Test
    public void test1165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1165");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.next();
        java.util.Date date6 = week2.getEnd();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week(date6);
        long long8 = week7.getLastMillisecond();
        java.lang.String str9 = week7.toString();
        long long10 = week7.getSerialIndex();
        java.util.Date date11 = week7.getStart();
        long long12 = week7.getMiddleMillisecond();
        java.util.Calendar calendar13 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long14 = week7.getMiddleMillisecond(calendar13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-60505750800001L) + "'", long8 == (-60505750800001L));
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Week 35, 52" + "'", str9, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 2791L + "'", long10 == 2791L);
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-60506053200001L) + "'", long12 == (-60506053200001L));
    }

    @Test
    public void test1166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1166");
        org.jfree.data.time.Week week1 = new org.jfree.data.time.Week();
        long long2 = week1.getFirstMillisecond();
        org.jfree.data.time.Year year3 = week1.getYear();
        org.jfree.data.time.Week week4 = new org.jfree.data.time.Week(0, year3);
        java.util.Date date5 = year3.getStart();
        org.jfree.data.time.Week week6 = new org.jfree.data.time.Week(date5);
        long long7 = week6.getLastMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod8 = week6.next();
        long long9 = week6.getSerialIndex();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1637449200000L + "'", long2 == 1637449200000L);
        org.junit.Assert.assertNotNull(year3);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Fri Jan 01 00:00:00 CET 2021");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1609628399999L + "'", long7 == 1609628399999L);
        org.junit.Assert.assertNotNull(regularTimePeriod8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 107114L + "'", long9 == 107114L);
    }

    @Test
    public void test1167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1167");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod11 = week2.next();
        org.jfree.data.time.Week week14 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod15 = week14.next();
        java.lang.Class<?> wildcardClass16 = week14.getClass();
        java.lang.Class class17 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass16);
        java.lang.Class class18 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass16);
        boolean boolean19 = week2.equals((java.lang.Object) wildcardClass16);
        java.lang.Class class20 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass16);
        org.jfree.data.time.Week week23 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date24 = week23.getStart();
        java.util.Date date25 = week23.getEnd();
        org.jfree.data.time.Week week28 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod29 = week28.next();
        java.lang.Class<?> wildcardClass30 = week28.getClass();
        java.lang.Class class31 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass30);
        org.jfree.data.time.Week week34 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date35 = week34.getStart();
        java.lang.Class class36 = null;
        java.util.Date date37 = null;
        java.util.TimeZone timeZone38 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod39 = org.jfree.data.time.RegularTimePeriod.createInstance(class36, date37, timeZone38);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod40 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass30, date35, timeZone38);
        org.jfree.data.time.Week week41 = new org.jfree.data.time.Week(date25, timeZone38);
        java.lang.Class class42 = null;
        java.util.Date date43 = null;
        java.util.TimeZone timeZone44 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod45 = org.jfree.data.time.RegularTimePeriod.createInstance(class42, date43, timeZone44);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod46 = org.jfree.data.time.RegularTimePeriod.createInstance(class20, date25, timeZone44);
        org.jfree.data.time.Week week47 = new org.jfree.data.time.Week(date25);
        long long48 = week47.getMiddleMillisecond();
        java.lang.Class<?> wildcardClass49 = week47.getClass();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertNotNull(regularTimePeriod11);
        org.junit.Assert.assertNotNull(regularTimePeriod15);
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertNotNull(class17);
        org.junit.Assert.assertNotNull(class18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(class20);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod29);
        org.junit.Assert.assertNotNull(wildcardClass30);
        org.junit.Assert.assertNotNull(class31);
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone38);
// flaky:         org.junit.Assert.assertEquals(timeZone38.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod39);
        org.junit.Assert.assertNotNull(regularTimePeriod40);
        org.junit.Assert.assertNotNull(timeZone44);
// flaky:         org.junit.Assert.assertEquals(timeZone44.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod45);
        org.junit.Assert.assertNull(regularTimePeriod46);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + (-59101102800001L) + "'", long48 == (-59101102800001L));
        org.junit.Assert.assertNotNull(wildcardClass49);
    }

    @Test
    public void test1168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1168");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        long long5 = week2.getLastMillisecond();
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod9 = week8.next();
        java.lang.Class<?> wildcardClass10 = week8.getClass();
        java.lang.Class class11 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass10);
        int int12 = week2.compareTo((java.lang.Object) wildcardClass10);
        java.lang.Class class13 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass10);
        org.jfree.data.time.Week week16 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod17 = week16.next();
        java.lang.Class<?> wildcardClass18 = week16.getClass();
        java.lang.Class class19 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass18);
        org.jfree.data.time.Week week22 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date23 = week22.getStart();
        java.lang.Class class24 = null;
        java.util.Date date25 = null;
        java.util.TimeZone timeZone26 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod27 = org.jfree.data.time.RegularTimePeriod.createInstance(class24, date25, timeZone26);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod28 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass18, date23, timeZone26);
        java.util.TimeZone timeZone29 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod30 = org.jfree.data.time.RegularTimePeriod.createInstance(class13, date23, timeZone29);
        org.jfree.data.time.Week week31 = new org.jfree.data.time.Week(date23);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod32 = week31.previous();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod33 = week31.next();
        java.util.Date date34 = week31.getStart();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod35 = week31.previous();
        java.lang.Class<?> wildcardClass36 = regularTimePeriod35.getClass();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-60505750800001L) + "'", long5 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod9);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNotNull(class11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(class13);
        org.junit.Assert.assertNotNull(regularTimePeriod17);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(class19);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone26);
// flaky:         org.junit.Assert.assertEquals(timeZone26.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod27);
        org.junit.Assert.assertNotNull(regularTimePeriod28);
        org.junit.Assert.assertNotNull(timeZone29);
// flaky:         org.junit.Assert.assertEquals(timeZone29.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod30);
        org.junit.Assert.assertNotNull(regularTimePeriod32);
        org.junit.Assert.assertNotNull(regularTimePeriod33);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod35);
        org.junit.Assert.assertNotNull(wildcardClass36);
    }

    @Test
    public void test1169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1169");
        org.jfree.data.time.Week week0 = new org.jfree.data.time.Week();
        long long1 = week0.getFirstMillisecond();
        long long2 = week0.getSerialIndex();
        int int3 = week0.getYearValue();
        int int4 = week0.getYearValue();
        int int5 = week0.getWeek();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1637449200000L + "'", long1 == 1637449200000L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 107161L + "'", long2 == 107161L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2021 + "'", int3 == 2021);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2021 + "'", int4 == 2021);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 48 + "'", int5 == 48);
    }

    @Test
    public void test1170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1170");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date3 = week2.getStart();
        java.util.Date date4 = week2.getEnd();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.next();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod6 = week2.previous();
        java.util.Calendar calendar7 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long8 = week2.getLastMillisecond(calendar7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertNotNull(regularTimePeriod6);
    }

    @Test
    public void test1171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1171");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getWeek();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod8 = week2.next();
        boolean boolean10 = week2.equals((java.lang.Object) 3);
        long long11 = week2.getLastMillisecond();
        java.lang.String str12 = week2.toString();
        java.util.Date date13 = week2.getEnd();
        org.jfree.data.time.Week week16 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod17 = week16.next();
        int int18 = week16.getYearValue();
        java.util.TimeZone timeZone19 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int20 = week16.compareTo((java.lang.Object) timeZone19);
        int int21 = week16.getYearValue();
        int int23 = week16.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod24 = week16.previous();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod25 = week16.next();
        org.jfree.data.time.Week week28 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod29 = week28.next();
        java.lang.Class<?> wildcardClass30 = week28.getClass();
        java.lang.Class class31 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass30);
        java.lang.Class class32 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass30);
        boolean boolean33 = week16.equals((java.lang.Object) wildcardClass30);
        java.lang.Class class34 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass30);
        org.jfree.data.time.Week week37 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date38 = week37.getStart();
        java.util.Date date39 = week37.getEnd();
        org.jfree.data.time.Week week42 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod43 = week42.next();
        java.lang.Class<?> wildcardClass44 = week42.getClass();
        java.lang.Class class45 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass44);
        org.jfree.data.time.Week week48 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date49 = week48.getStart();
        java.lang.Class class50 = null;
        java.util.Date date51 = null;
        java.util.TimeZone timeZone52 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod53 = org.jfree.data.time.RegularTimePeriod.createInstance(class50, date51, timeZone52);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod54 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass44, date49, timeZone52);
        org.jfree.data.time.Week week55 = new org.jfree.data.time.Week(date39, timeZone52);
        java.lang.Class class56 = null;
        java.util.Date date57 = null;
        java.util.TimeZone timeZone58 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod59 = org.jfree.data.time.RegularTimePeriod.createInstance(class56, date57, timeZone58);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod60 = org.jfree.data.time.RegularTimePeriod.createInstance(class34, date39, timeZone58);
        org.jfree.data.time.Week week61 = new org.jfree.data.time.Week(date13, timeZone58);
        org.jfree.data.time.Week week64 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str65 = week64.toString();
        long long66 = week64.getSerialIndex();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod67 = week64.next();
        java.util.Date date68 = regularTimePeriod67.getEnd();
        org.jfree.data.time.Week week71 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date72 = week71.getStart();
        org.jfree.data.time.Week week75 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod76 = week75.next();
        int int77 = week75.getYearValue();
        java.util.TimeZone timeZone78 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int79 = week75.compareTo((java.lang.Object) timeZone78);
        org.jfree.data.time.Week week80 = new org.jfree.data.time.Week(date72, timeZone78);
        org.jfree.data.time.Week week81 = new org.jfree.data.time.Week(date68, timeZone78);
        org.jfree.data.time.Week week82 = new org.jfree.data.time.Week(date13, timeZone78);
        org.jfree.data.time.Week week83 = new org.jfree.data.time.Week(date13);
        org.jfree.data.time.Week week84 = new org.jfree.data.time.Week(date13);
        java.lang.Class<?> wildcardClass85 = date13.getClass();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 35 + "'", int7 == 35);
        org.junit.Assert.assertNotNull(regularTimePeriod8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-60505750800001L) + "'", long11 == (-60505750800001L));
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Week 35, 52" + "'", str12, "Week 35, 52");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 52 + "'", int18 == 52);
        org.junit.Assert.assertNotNull(timeZone19);
// flaky:         org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 52 + "'", int21 == 52);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod24);
        org.junit.Assert.assertNotNull(regularTimePeriod25);
        org.junit.Assert.assertNotNull(regularTimePeriod29);
        org.junit.Assert.assertNotNull(wildcardClass30);
        org.junit.Assert.assertNotNull(class31);
        org.junit.Assert.assertNotNull(class32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(class34);
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod43);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(class45);
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone52);
// flaky:         org.junit.Assert.assertEquals(timeZone52.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod53);
        org.junit.Assert.assertNotNull(regularTimePeriod54);
        org.junit.Assert.assertNotNull(timeZone58);
// flaky:         org.junit.Assert.assertEquals(timeZone58.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod59);
        org.junit.Assert.assertNull(regularTimePeriod60);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "Week 35, 52" + "'", str65, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 2791L + "'", long66 == 2791L);
        org.junit.Assert.assertNotNull(regularTimePeriod67);
        org.junit.Assert.assertNotNull(date68);
        org.junit.Assert.assertEquals(date68.toString(), "Sat Sep 02 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date72);
        org.junit.Assert.assertEquals(date72.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 52 + "'", int77 == 52);
        org.junit.Assert.assertNotNull(timeZone78);
// flaky:         org.junit.Assert.assertEquals(timeZone78.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 1 + "'", int79 == 1);
        org.junit.Assert.assertNotNull(wildcardClass85);
    }

    @Test
    public void test1172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1172");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(3, 2022);
        long long3 = week2.getSerialIndex();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 107169L + "'", long3 == 107169L);
    }

    @Test
    public void test1173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1173");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.next();
        java.util.Date date6 = week2.getEnd();
        long long7 = week2.getLastMillisecond();
        java.lang.Class<?> wildcardClass8 = week2.getClass();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-60505750800001L) + "'", long7 == (-60505750800001L));
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test1174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1174");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.next();
        java.util.Date date6 = week2.getEnd();
        org.jfree.data.time.Week week9 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date10 = week9.getStart();
        boolean boolean11 = week2.equals((java.lang.Object) date10);
        org.jfree.data.time.Week week13 = new org.jfree.data.time.Week();
        long long14 = week13.getFirstMillisecond();
        org.jfree.data.time.Year year15 = week13.getYear();
        org.jfree.data.time.Week week16 = new org.jfree.data.time.Week(0, year15);
        org.jfree.data.time.Year year17 = week16.getYear();
        java.util.Date date18 = week16.getEnd();
        int int19 = week2.compareTo((java.lang.Object) date18);
        org.jfree.data.time.Week week22 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod23 = week22.previous();
        java.util.Date date24 = week22.getEnd();
        org.jfree.data.time.Week week27 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date28 = week27.getStart();
        java.util.Date date29 = week27.getEnd();
        java.util.Date date30 = week27.getStart();
        org.jfree.data.time.Week week33 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date34 = week33.getStart();
        org.jfree.data.time.Week week37 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod38 = week37.next();
        int int39 = week37.getYearValue();
        java.util.TimeZone timeZone40 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int41 = week37.compareTo((java.lang.Object) timeZone40);
        org.jfree.data.time.Week week42 = new org.jfree.data.time.Week(date34, timeZone40);
        org.jfree.data.time.Week week43 = new org.jfree.data.time.Week(date30, timeZone40);
        org.jfree.data.time.Week week44 = new org.jfree.data.time.Week(date24, timeZone40);
        java.util.Locale locale45 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Week week46 = new org.jfree.data.time.Week(date18, timeZone40, locale45);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'locale' argument.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1637449200000L + "'", long14 == 1637449200000L);
        org.junit.Assert.assertNotNull(year15);
        org.junit.Assert.assertNotNull(year17);
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Sat Dec 26 23:59:59 CET 2020");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod23);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 52 + "'", int39 == 52);
        org.junit.Assert.assertNotNull(timeZone40);
// flaky:         org.junit.Assert.assertEquals(timeZone40.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
    }

    @Test
    public void test1175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1175");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date3 = week2.getStart();
        org.jfree.data.time.Week week6 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod7 = week6.next();
        int int8 = week6.getYearValue();
        java.util.TimeZone timeZone9 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int10 = week6.compareTo((java.lang.Object) timeZone9);
        org.jfree.data.time.Week week11 = new org.jfree.data.time.Week(date3, timeZone9);
        org.jfree.data.time.Week week12 = new org.jfree.data.time.Week(date3);
        org.jfree.data.time.Week week15 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod16 = week15.next();
        int int17 = week15.getYearValue();
        java.util.TimeZone timeZone18 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int19 = week15.compareTo((java.lang.Object) timeZone18);
        int int20 = week15.getYearValue();
        int int22 = week15.compareTo((java.lang.Object) 9);
        int int23 = week15.getYearValue();
        long long24 = week15.getLastMillisecond();
        int int25 = week15.getWeek();
        java.util.Date date26 = week15.getEnd();
        org.jfree.data.time.Week week29 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date30 = week29.getStart();
        java.util.Date date31 = week29.getEnd();
        org.jfree.data.time.Week week34 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod35 = week34.next();
        java.lang.Class<?> wildcardClass36 = week34.getClass();
        java.lang.Class class37 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass36);
        org.jfree.data.time.Week week40 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date41 = week40.getStart();
        java.lang.Class class42 = null;
        java.util.Date date43 = null;
        java.util.TimeZone timeZone44 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod45 = org.jfree.data.time.RegularTimePeriod.createInstance(class42, date43, timeZone44);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod46 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass36, date41, timeZone44);
        org.jfree.data.time.Week week47 = new org.jfree.data.time.Week(date31, timeZone44);
        org.jfree.data.time.Week week48 = new org.jfree.data.time.Week(date26, timeZone44);
        org.jfree.data.time.Week week51 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str52 = week51.toString();
        long long53 = week51.getSerialIndex();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod54 = week51.next();
        java.util.Date date55 = regularTimePeriod54.getEnd();
        org.jfree.data.time.Week week58 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date59 = week58.getStart();
        org.jfree.data.time.Week week62 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod63 = week62.next();
        int int64 = week62.getYearValue();
        java.util.TimeZone timeZone65 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int66 = week62.compareTo((java.lang.Object) timeZone65);
        org.jfree.data.time.Week week67 = new org.jfree.data.time.Week(date59, timeZone65);
        org.jfree.data.time.Week week68 = new org.jfree.data.time.Week(date55, timeZone65);
        org.jfree.data.time.Week week69 = new org.jfree.data.time.Week(date26, timeZone65);
        org.jfree.data.time.Week week70 = new org.jfree.data.time.Week(date3, timeZone65);
        org.jfree.data.time.Week week73 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod74 = week73.next();
        long long75 = week73.getMiddleMillisecond();
        java.lang.String str76 = week73.toString();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod77 = week73.next();
        // The following exception was thrown during execution in test generation
        try {
            int int78 = week70.compareTo((java.lang.Object) regularTimePeriod77);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Year constructor: year (52) outside valid range.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 52 + "'", int8 == 52);
        org.junit.Assert.assertNotNull(timeZone9);
// flaky:         org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 52 + "'", int17 == 52);
        org.junit.Assert.assertNotNull(timeZone18);
// flaky:         org.junit.Assert.assertEquals(timeZone18.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 52 + "'", int20 == 52);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 52 + "'", int23 == 52);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-60505750800001L) + "'", long24 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 35 + "'", int25 == 35);
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod35);
        org.junit.Assert.assertNotNull(wildcardClass36);
        org.junit.Assert.assertNotNull(class37);
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone44);
// flaky:         org.junit.Assert.assertEquals(timeZone44.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod45);
        org.junit.Assert.assertNotNull(regularTimePeriod46);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "Week 35, 52" + "'", str52, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 2791L + "'", long53 == 2791L);
        org.junit.Assert.assertNotNull(regularTimePeriod54);
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Sat Sep 02 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date59);
        org.junit.Assert.assertEquals(date59.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 52 + "'", int64 == 52);
        org.junit.Assert.assertNotNull(timeZone65);
// flaky:         org.junit.Assert.assertEquals(timeZone65.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod74);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + (-60506053200001L) + "'", long75 == (-60506053200001L));
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "Week 35, 52" + "'", str76, "Week 35, 52");
        org.junit.Assert.assertNotNull(regularTimePeriod77);
    }

    @Test
    public void test1176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1176");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) (short) 1, 4);
        org.jfree.data.time.Week week5 = new org.jfree.data.time.Week((int) (short) 100, (int) (byte) 100);
        long long6 = week5.getMiddleMillisecond();
        java.lang.Class<?> wildcardClass7 = week5.getClass();
        // The following exception was thrown during execution in test generation
        try {
            int int8 = week2.compareTo((java.lang.Object) week5);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Year constructor: year (100) outside valid range.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-58951717200001L) + "'", long6 == (-58951717200001L));
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test1177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1177");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getWeek();
        org.jfree.data.time.Week week10 = new org.jfree.data.time.Week();
        long long11 = week10.getFirstMillisecond();
        org.jfree.data.time.Year year12 = week10.getYear();
        org.jfree.data.time.Week week13 = new org.jfree.data.time.Week(52, year12);
        java.util.Date date14 = year12.getStart();
        org.jfree.data.time.Week week15 = new org.jfree.data.time.Week((-1969), year12);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod16 = week15.next();
        int int17 = week2.compareTo((java.lang.Object) week15);
        java.util.Calendar calendar18 = null;
        // The following exception was thrown during execution in test generation
        try {
            week15.peg(calendar18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 35 + "'", int7 == 35);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1637449200000L + "'", long11 == 1637449200000L);
        org.junit.Assert.assertNotNull(year12);
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Fri Jan 01 00:00:00 CET 2021");
        org.junit.Assert.assertNotNull(regularTimePeriod16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1969) + "'", int17 == (-1969));
    }

    @Test
    public void test1178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1178");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.next();
        java.util.Date date6 = week2.getEnd();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week(date6);
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week(date6);
        org.jfree.data.time.Week week11 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str12 = week11.toString();
        long long13 = week11.getMiddleMillisecond();
        long long14 = week11.getLastMillisecond();
        org.jfree.data.time.Week week17 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod18 = week17.next();
        java.lang.Class<?> wildcardClass19 = week17.getClass();
        java.lang.Class class20 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass19);
        int int21 = week11.compareTo((java.lang.Object) wildcardClass19);
        java.lang.Class class22 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass19);
        org.jfree.data.time.Week week25 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod26 = week25.next();
        java.lang.Class<?> wildcardClass27 = week25.getClass();
        java.lang.Class class28 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass27);
        org.jfree.data.time.Week week31 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date32 = week31.getStart();
        java.lang.Class class33 = null;
        java.util.Date date34 = null;
        java.util.TimeZone timeZone35 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod36 = org.jfree.data.time.RegularTimePeriod.createInstance(class33, date34, timeZone35);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod37 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass27, date32, timeZone35);
        java.util.TimeZone timeZone38 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod39 = org.jfree.data.time.RegularTimePeriod.createInstance(class22, date32, timeZone38);
        org.jfree.data.time.Week week40 = new org.jfree.data.time.Week(date6, timeZone38);
        org.jfree.data.time.Week week43 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod44 = week43.previous();
        java.util.Date date45 = week43.getEnd();
        org.jfree.data.time.Week week48 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date49 = week48.getStart();
        java.util.Date date50 = week48.getEnd();
        java.util.Date date51 = week48.getStart();
        org.jfree.data.time.Week week54 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date55 = week54.getStart();
        org.jfree.data.time.Week week58 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod59 = week58.next();
        int int60 = week58.getYearValue();
        java.util.TimeZone timeZone61 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int62 = week58.compareTo((java.lang.Object) timeZone61);
        org.jfree.data.time.Week week63 = new org.jfree.data.time.Week(date55, timeZone61);
        org.jfree.data.time.Week week64 = new org.jfree.data.time.Week(date51, timeZone61);
        org.jfree.data.time.Week week65 = new org.jfree.data.time.Week(date45, timeZone61);
        java.util.Locale locale66 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Week week67 = new org.jfree.data.time.Week(date6, timeZone61, locale66);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'locale' argument.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Week 35, 52" + "'", str12, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-60506053200001L) + "'", long13 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-60505750800001L) + "'", long14 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod18);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(class20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(class22);
        org.junit.Assert.assertNotNull(regularTimePeriod26);
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertNotNull(class28);
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone35);
// flaky:         org.junit.Assert.assertEquals(timeZone35.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod36);
        org.junit.Assert.assertNotNull(regularTimePeriod37);
        org.junit.Assert.assertNotNull(timeZone38);
// flaky:         org.junit.Assert.assertEquals(timeZone38.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod39);
        org.junit.Assert.assertNotNull(regularTimePeriod44);
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(date51);
        org.junit.Assert.assertEquals(date51.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 52 + "'", int60 == 52);
        org.junit.Assert.assertNotNull(timeZone61);
// flaky:         org.junit.Assert.assertEquals(timeZone61.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
    }

    @Test
    public void test1179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1179");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week();
        long long3 = week2.getFirstMillisecond();
        org.jfree.data.time.Year year4 = week2.getYear();
        org.jfree.data.time.Week week5 = new org.jfree.data.time.Week(52, year4);
        java.util.Date date6 = year4.getStart();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week((-1969), year4);
        int int8 = week7.getYearValue();
        java.util.Calendar calendar9 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long10 = week7.getFirstMillisecond(calendar9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1637449200000L + "'", long3 == 1637449200000L);
        org.junit.Assert.assertNotNull(year4);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Fri Jan 01 00:00:00 CET 2021");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2021 + "'", int8 == 2021);
    }

    @Test
    public void test1180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1180");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        int int10 = week2.getYearValue();
        java.util.Calendar calendar11 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long12 = week2.getLastMillisecond(calendar11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 52 + "'", int10 == 52);
    }

    @Test
    public void test1181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1181");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.next();
        java.util.Date date6 = week2.getEnd();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week(date6);
        int int8 = week7.getWeek();
        boolean boolean10 = week7.equals((java.lang.Object) 1637449200000L);
        org.jfree.data.time.Week week13 = new org.jfree.data.time.Week(9, (int) 'a');
        org.jfree.data.time.Week week16 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod17 = week16.next();
        long long18 = week16.getMiddleMillisecond();
        java.lang.String str19 = week16.toString();
        boolean boolean20 = week13.equals((java.lang.Object) week16);
        int int21 = week16.getWeek();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod22 = week16.next();
        boolean boolean23 = week7.equals((java.lang.Object) week16);
        long long24 = week16.getLastMillisecond();
        java.lang.String str25 = week16.toString();
        long long26 = week16.getLastMillisecond();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 35 + "'", int8 == 35);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(regularTimePeriod17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-60506053200001L) + "'", long18 == (-60506053200001L));
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Week 35, 52" + "'", str19, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 35 + "'", int21 == 35);
        org.junit.Assert.assertNotNull(regularTimePeriod22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-60505750800001L) + "'", long24 == (-60505750800001L));
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Week 35, 52" + "'", str25, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + (-60505750800001L) + "'", long26 == (-60505750800001L));
    }

    @Test
    public void test1182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1182");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(3, 2022);
        org.jfree.data.time.Week week5 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod6 = week5.next();
        int int7 = week5.getYearValue();
        java.util.TimeZone timeZone8 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int9 = week5.compareTo((java.lang.Object) timeZone8);
        int int10 = week5.getYearValue();
        int int12 = week5.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod13 = week5.previous();
        int int14 = week5.getYearValue();
        java.util.Date date15 = week5.getEnd();
        boolean boolean16 = week2.equals((java.lang.Object) date15);
        org.junit.Assert.assertNotNull(regularTimePeriod6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertNotNull(timeZone8);
// flaky:         org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 52 + "'", int10 == 52);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 52 + "'", int14 == 52);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test1183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1183");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.util.Date date3 = week2.getStart();
        int int4 = week2.getYearValue();
        java.util.Date date5 = week2.getEnd();
        long long6 = week2.getMiddleMillisecond();
        long long7 = week2.getSerialIndex();
        long long8 = week2.getFirstMillisecond();
        long long9 = week2.getSerialIndex();
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-60506053200001L) + "'", long6 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 2791L + "'", long7 == 2791L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-60506355600000L) + "'", long8 == (-60506355600000L));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 2791L + "'", long9 == 2791L);
    }

    @Test
    public void test1184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1184");
        org.jfree.data.time.Week week1 = new org.jfree.data.time.Week();
        long long2 = week1.getFirstMillisecond();
        org.jfree.data.time.Year year3 = week1.getYear();
        org.jfree.data.time.Week week4 = new org.jfree.data.time.Week(0, year3);
        java.util.Date date5 = week4.getStart();
        java.util.Date date6 = week4.getStart();
        org.jfree.data.time.Week week9 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week9.next();
        int int11 = week9.getYearValue();
        java.util.TimeZone timeZone12 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int13 = week9.compareTo((java.lang.Object) timeZone12);
        int int14 = week9.getYearValue();
        int int16 = week9.compareTo((java.lang.Object) 9);
        int int17 = week9.getYearValue();
        long long18 = week9.getLastMillisecond();
        long long19 = week9.getSerialIndex();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod20 = week9.next();
        int int21 = week9.getYearValue();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod22 = week9.previous();
        // The following exception was thrown during execution in test generation
        try {
            int int23 = week4.compareTo((java.lang.Object) week9);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Year constructor: year (52) outside valid range.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1637449200000L + "'", long2 == 1637449200000L);
        org.junit.Assert.assertNotNull(year3);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Sun Dec 20 00:00:00 CET 2020");
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sun Dec 20 00:00:00 CET 2020");
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertNotNull(timeZone12);
// flaky:         org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 52 + "'", int14 == 52);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 52 + "'", int17 == 52);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-60505750800001L) + "'", long18 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 2791L + "'", long19 == 2791L);
        org.junit.Assert.assertNotNull(regularTimePeriod20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 52 + "'", int21 == 52);
        org.junit.Assert.assertNotNull(regularTimePeriod22);
    }

    @Test
    public void test1185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1185");
        org.jfree.data.time.Week week5 = new org.jfree.data.time.Week();
        long long6 = week5.getFirstMillisecond();
        org.jfree.data.time.Year year7 = week5.getYear();
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week(0, year7);
        org.jfree.data.time.Year year9 = week8.getYear();
        org.jfree.data.time.Week week10 = new org.jfree.data.time.Week(97, year9);
        org.jfree.data.time.Week week11 = new org.jfree.data.time.Week(0, year9);
        org.jfree.data.time.Week week12 = new org.jfree.data.time.Week((int) '#', year9);
        org.jfree.data.time.Week week13 = new org.jfree.data.time.Week(100, year9);
        java.util.Calendar calendar14 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long15 = week13.getLastMillisecond(calendar14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1637449200000L + "'", long6 == 1637449200000L);
        org.junit.Assert.assertNotNull(year7);
        org.junit.Assert.assertNotNull(year9);
    }

    @Test
    public void test1186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1186");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.previous();
        int int4 = week2.getYearValue();
        java.lang.String str5 = week2.toString();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod6 = week2.previous();
        java.util.Date date7 = week2.getEnd();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod8 = week2.next();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Week 35, 52" + "'", str5, "Week 35, 52");
        org.junit.Assert.assertNotNull(regularTimePeriod6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod8);
    }

    @Test
    public void test1187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1187");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.previous();
        int int4 = week2.getYearValue();
        java.util.Date date5 = week2.getEnd();
        long long6 = week2.getFirstMillisecond();
        java.lang.String str7 = week2.toString();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod8 = week2.previous();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-60506355600000L) + "'", long6 == (-60506355600000L));
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Week 35, 52" + "'", str7, "Week 35, 52");
        org.junit.Assert.assertNotNull(regularTimePeriod8);
    }

    @Test
    public void test1188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1188");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) (short) 100, (int) (byte) 100);
        long long3 = week2.getLastMillisecond();
        java.lang.String str4 = week2.toString();
        long long5 = week2.getFirstMillisecond();
        java.util.Date date6 = week2.getStart();
        java.util.Date date7 = week2.getStart();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-58951414800001L) + "'", long3 == (-58951414800001L));
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Week 100, 100" + "'", str4, "Week 100, 100");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-58952019600000L) + "'", long5 == (-58952019600000L));
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sun Nov 21 00:00:00 CET 101");
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Sun Nov 21 00:00:00 CET 101");
    }

    @Test
    public void test1189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1189");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) (byte) 10, 2);
        java.lang.Class<?> wildcardClass3 = week2.getClass();
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test1190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1190");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        java.util.Date date10 = week2.getStart();
        long long11 = week2.getSerialIndex();
        long long12 = week2.getMiddleMillisecond();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 2791L + "'", long11 == 2791L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-60506053200001L) + "'", long12 == (-60506053200001L));
    }

    @Test
    public void test1191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1191");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(3, (int) (short) 0);
        java.lang.Class<?> wildcardClass3 = week2.getClass();
        org.jfree.data.time.Week week6 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str7 = week6.toString();
        long long8 = week6.getMiddleMillisecond();
        long long9 = week6.getLastMillisecond();
        org.jfree.data.time.Week week12 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod13 = week12.next();
        java.lang.Class<?> wildcardClass14 = week12.getClass();
        java.lang.Class class15 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass14);
        int int16 = week6.compareTo((java.lang.Object) wildcardClass14);
        java.lang.Class class17 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass14);
        org.jfree.data.time.Week week20 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod21 = week20.next();
        java.lang.Class<?> wildcardClass22 = week20.getClass();
        java.lang.Class class23 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass22);
        org.jfree.data.time.Week week26 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date27 = week26.getStart();
        java.lang.Class class28 = null;
        java.util.Date date29 = null;
        java.util.TimeZone timeZone30 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod31 = org.jfree.data.time.RegularTimePeriod.createInstance(class28, date29, timeZone30);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod32 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass22, date27, timeZone30);
        java.util.TimeZone timeZone33 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod34 = org.jfree.data.time.RegularTimePeriod.createInstance(class17, date27, timeZone33);
        org.jfree.data.time.Week week35 = new org.jfree.data.time.Week(date27);
        java.util.Date date36 = week35.getStart();
        org.jfree.data.time.Week week37 = new org.jfree.data.time.Week(date36);
        org.jfree.data.time.Week week40 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod41 = week40.next();
        java.lang.Class<?> wildcardClass42 = week40.getClass();
        java.lang.Class class43 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass42);
        org.jfree.data.time.Week week46 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date47 = week46.getStart();
        java.lang.Class class48 = null;
        java.util.Date date49 = null;
        java.util.TimeZone timeZone50 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod51 = org.jfree.data.time.RegularTimePeriod.createInstance(class48, date49, timeZone50);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod52 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass42, date47, timeZone50);
        org.jfree.data.time.Week week55 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date56 = week55.getStart();
        org.jfree.data.time.Week week57 = new org.jfree.data.time.Week(date56);
        java.util.TimeZone timeZone58 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod59 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass42, date56, timeZone58);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod60 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass3, date36, timeZone58);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Week 35, 52" + "'", str7, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-60506053200001L) + "'", long8 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-60505750800001L) + "'", long9 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod13);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(class15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(class17);
        org.junit.Assert.assertNotNull(regularTimePeriod21);
        org.junit.Assert.assertNotNull(wildcardClass22);
        org.junit.Assert.assertNotNull(class23);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone30);
// flaky:         org.junit.Assert.assertEquals(timeZone30.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod31);
        org.junit.Assert.assertNotNull(regularTimePeriod32);
        org.junit.Assert.assertNotNull(timeZone33);
// flaky:         org.junit.Assert.assertEquals(timeZone33.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod34);
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod41);
        org.junit.Assert.assertNotNull(wildcardClass42);
        org.junit.Assert.assertNotNull(class43);
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone50);
// flaky:         org.junit.Assert.assertEquals(timeZone50.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod51);
        org.junit.Assert.assertNotNull(regularTimePeriod52);
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone58);
// flaky:         org.junit.Assert.assertEquals(timeZone58.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNotNull(regularTimePeriod59);
        org.junit.Assert.assertNotNull(regularTimePeriod60);
    }

    @Test
    public void test1192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1192");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(97, (int) (byte) 10);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getWeek();
        java.util.Calendar calendar5 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long6 = week2.getMiddleMillisecond(calendar5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 97 + "'", int4 == 97);
    }

    @Test
    public void test1193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1193");
        org.jfree.data.time.Week week5 = new org.jfree.data.time.Week();
        long long6 = week5.getFirstMillisecond();
        org.jfree.data.time.Year year7 = week5.getYear();
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week(52, year7);
        java.util.Date date9 = year7.getStart();
        org.jfree.data.time.Week week10 = new org.jfree.data.time.Week(52, year7);
        org.jfree.data.time.Week week11 = new org.jfree.data.time.Week(9, year7);
        org.jfree.data.time.Week week12 = new org.jfree.data.time.Week(35, year7);
        org.jfree.data.time.Week week13 = new org.jfree.data.time.Week(32, year7);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1637449200000L + "'", long6 == 1637449200000L);
        org.junit.Assert.assertNotNull(year7);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Fri Jan 01 00:00:00 CET 2021");
    }

    @Test
    public void test1194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1194");
        org.jfree.data.time.Week week1 = new org.jfree.data.time.Week();
        long long2 = week1.getFirstMillisecond();
        org.jfree.data.time.Year year3 = week1.getYear();
        org.jfree.data.time.Week week4 = new org.jfree.data.time.Week(0, year3);
        int int5 = week4.getYearValue();
        java.util.Calendar calendar6 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long7 = week4.getMiddleMillisecond(calendar6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1637449200000L + "'", long2 == 1637449200000L);
        org.junit.Assert.assertNotNull(year3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2021 + "'", int5 == 2021);
    }

    @Test
    public void test1195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1195");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getSerialIndex();
        int int6 = week2.compareTo((java.lang.Object) 1637449200000L);
        java.lang.String str7 = week2.toString();
        int int9 = week2.compareTo((java.lang.Object) 630L);
        java.util.Date date10 = week2.getEnd();
        java.util.Calendar calendar11 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long12 = week2.getMiddleMillisecond(calendar11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 2791L + "'", long4 == 2791L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Week 35, 52" + "'", str7, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sat Aug 26 23:59:59 CET 52");
    }

    @Test
    public void test1196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1196");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.previous();
        int int4 = week2.getYearValue();
        java.util.Date date5 = week2.getEnd();
        java.lang.String str6 = week2.toString();
        java.util.Date date7 = week2.getEnd();
        org.jfree.data.time.Week week10 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod11 = week10.next();
        int int12 = week10.getYearValue();
        java.util.TimeZone timeZone13 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int14 = week10.compareTo((java.lang.Object) timeZone13);
        int int15 = week10.getYearValue();
        long long16 = week10.getMiddleMillisecond();
        java.lang.Class<?> wildcardClass17 = week10.getClass();
        org.jfree.data.time.Week week20 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date21 = week20.getStart();
        org.jfree.data.time.Week week24 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod25 = week24.next();
        int int26 = week24.getYearValue();
        java.util.TimeZone timeZone27 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int28 = week24.compareTo((java.lang.Object) timeZone27);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod29 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass17, date21, timeZone27);
        org.jfree.data.time.Week week30 = new org.jfree.data.time.Week(date21);
        org.jfree.data.time.Week week33 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod34 = week33.next();
        int int35 = week33.getYearValue();
        java.util.TimeZone timeZone36 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int37 = week33.compareTo((java.lang.Object) timeZone36);
        org.jfree.data.time.Week week38 = new org.jfree.data.time.Week(date21, timeZone36);
        org.jfree.data.time.Week week39 = new org.jfree.data.time.Week(date7, timeZone36);
        org.jfree.data.time.Week week42 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod43 = week42.next();
        int int44 = week42.getYearValue();
        java.util.TimeZone timeZone45 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int46 = week42.compareTo((java.lang.Object) timeZone45);
        int int47 = week42.getYearValue();
        int int49 = week42.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod50 = week42.previous();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod51 = week42.next();
        java.util.Date date52 = week42.getStart();
        java.util.Date date53 = week42.getStart();
        long long54 = week42.getLastMillisecond();
        // The following exception was thrown during execution in test generation
        try {
            int int55 = week39.compareTo((java.lang.Object) week42);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Year constructor: year (52) outside valid range.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Week 35, 52" + "'", str6, "Week 35, 52");
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
        org.junit.Assert.assertNotNull(timeZone13);
// flaky:         org.junit.Assert.assertEquals(timeZone13.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 52 + "'", int15 == 52);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-60506053200001L) + "'", long16 == (-60506053200001L));
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 52 + "'", int26 == 52);
        org.junit.Assert.assertNotNull(timeZone27);
// flaky:         org.junit.Assert.assertEquals(timeZone27.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod29);
        org.junit.Assert.assertNotNull(regularTimePeriod34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 52 + "'", int35 == 52);
        org.junit.Assert.assertNotNull(timeZone36);
// flaky:         org.junit.Assert.assertEquals(timeZone36.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 52 + "'", int44 == 52);
        org.junit.Assert.assertNotNull(timeZone45);
// flaky:         org.junit.Assert.assertEquals(timeZone45.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 52 + "'", int47 == 52);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod50);
        org.junit.Assert.assertNotNull(regularTimePeriod51);
        org.junit.Assert.assertNotNull(date52);
        org.junit.Assert.assertEquals(date52.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + (-60505750800001L) + "'", long54 == (-60505750800001L));
    }

    @Test
    public void test1197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1197");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        java.util.Date date10 = week2.getStart();
        int int11 = week2.getWeek();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 35 + "'", int11 == 35);
    }

    @Test
    public void test1198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1198");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        int int11 = week2.getYearValue();
        long long12 = week2.getLastMillisecond();
        int int13 = week2.getWeek();
        int int14 = week2.getYearValue();
        long long15 = week2.getFirstMillisecond();
        int int16 = week2.getYearValue();
        java.lang.String str17 = week2.toString();
        java.util.Calendar calendar18 = null;
        // The following exception was thrown during execution in test generation
        try {
            week2.peg(calendar18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-60505750800001L) + "'", long12 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 52 + "'", int14 == 52);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-60506355600000L) + "'", long15 == (-60506355600000L));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 52 + "'", int16 == 52);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Week 35, 52" + "'", str17, "Week 35, 52");
    }

    @Test
    public void test1199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1199");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(5, 8);
        long long3 = week2.getLastMillisecond();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-61911910800001L) + "'", long3 == (-61911910800001L));
    }

    @Test
    public void test1200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1200");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) (short) 1, 4);
        java.util.Date date3 = week2.getEnd();
        org.jfree.data.time.Week week6 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod7 = week6.next();
        int int8 = week6.getYearValue();
        java.util.TimeZone timeZone9 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int10 = week6.compareTo((java.lang.Object) timeZone9);
        int int11 = week6.getYearValue();
        int int13 = week6.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod14 = week6.previous();
        int int15 = week6.getYearValue();
        java.util.Date date16 = week6.getEnd();
        int int17 = week2.compareTo((java.lang.Object) date16);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sat Jan 05 23:59:59 CET 4");
        org.junit.Assert.assertNotNull(regularTimePeriod7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 52 + "'", int8 == 52);
        org.junit.Assert.assertNotNull(timeZone9);
// flaky:         org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 52 + "'", int15 == 52);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
    }

    @Test
    public void test1201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1201");
        org.jfree.data.time.Week week4 = new org.jfree.data.time.Week();
        long long5 = week4.getFirstMillisecond();
        org.jfree.data.time.Year year6 = week4.getYear();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week(0, year6);
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week(11, year6);
        long long9 = week8.getSerialIndex();
        org.jfree.data.time.Year year10 = week8.getYear();
        org.jfree.data.time.Week week11 = new org.jfree.data.time.Week((int) (short) 1, year10);
        org.jfree.data.time.Week week12 = new org.jfree.data.time.Week(4, year10);
        java.util.Date date13 = year10.getEnd();
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1637449200000L + "'", long5 == 1637449200000L);
        org.junit.Assert.assertNotNull(year6);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 107124L + "'", long9 == 107124L);
        org.junit.Assert.assertNotNull(year10);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Fri Dec 31 23:59:59 CET 2021");
    }

    @Test
    public void test1202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1202");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getWeek();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod8 = week2.next();
        boolean boolean10 = week2.equals((java.lang.Object) 3);
        long long11 = week2.getLastMillisecond();
        java.lang.String str12 = week2.toString();
        java.util.Date date13 = week2.getEnd();
        org.jfree.data.time.Week week16 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod17 = week16.next();
        int int18 = week16.getYearValue();
        java.util.TimeZone timeZone19 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int20 = week16.compareTo((java.lang.Object) timeZone19);
        int int21 = week16.getYearValue();
        int int23 = week16.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod24 = week16.previous();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod25 = week16.next();
        org.jfree.data.time.Week week28 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod29 = week28.next();
        java.lang.Class<?> wildcardClass30 = week28.getClass();
        java.lang.Class class31 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass30);
        java.lang.Class class32 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass30);
        boolean boolean33 = week16.equals((java.lang.Object) wildcardClass30);
        java.lang.Class class34 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass30);
        org.jfree.data.time.Week week37 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date38 = week37.getStart();
        java.util.Date date39 = week37.getEnd();
        org.jfree.data.time.Week week42 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod43 = week42.next();
        java.lang.Class<?> wildcardClass44 = week42.getClass();
        java.lang.Class class45 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass44);
        org.jfree.data.time.Week week48 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date49 = week48.getStart();
        java.lang.Class class50 = null;
        java.util.Date date51 = null;
        java.util.TimeZone timeZone52 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod53 = org.jfree.data.time.RegularTimePeriod.createInstance(class50, date51, timeZone52);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod54 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass44, date49, timeZone52);
        org.jfree.data.time.Week week55 = new org.jfree.data.time.Week(date39, timeZone52);
        java.lang.Class class56 = null;
        java.util.Date date57 = null;
        java.util.TimeZone timeZone58 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod59 = org.jfree.data.time.RegularTimePeriod.createInstance(class56, date57, timeZone58);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod60 = org.jfree.data.time.RegularTimePeriod.createInstance(class34, date39, timeZone58);
        org.jfree.data.time.Week week61 = new org.jfree.data.time.Week(date13, timeZone58);
        org.jfree.data.time.Week week64 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str65 = week64.toString();
        long long66 = week64.getSerialIndex();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod67 = week64.next();
        java.util.Date date68 = regularTimePeriod67.getEnd();
        org.jfree.data.time.Week week71 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date72 = week71.getStart();
        org.jfree.data.time.Week week75 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod76 = week75.next();
        int int77 = week75.getYearValue();
        java.util.TimeZone timeZone78 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int79 = week75.compareTo((java.lang.Object) timeZone78);
        org.jfree.data.time.Week week80 = new org.jfree.data.time.Week(date72, timeZone78);
        org.jfree.data.time.Week week81 = new org.jfree.data.time.Week(date68, timeZone78);
        org.jfree.data.time.Week week82 = new org.jfree.data.time.Week(date13, timeZone78);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod83 = week82.next();
        java.util.Calendar calendar84 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long85 = week82.getMiddleMillisecond(calendar84);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 35 + "'", int7 == 35);
        org.junit.Assert.assertNotNull(regularTimePeriod8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-60505750800001L) + "'", long11 == (-60505750800001L));
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Week 35, 52" + "'", str12, "Week 35, 52");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 52 + "'", int18 == 52);
        org.junit.Assert.assertNotNull(timeZone19);
// flaky:         org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 52 + "'", int21 == 52);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod24);
        org.junit.Assert.assertNotNull(regularTimePeriod25);
        org.junit.Assert.assertNotNull(regularTimePeriod29);
        org.junit.Assert.assertNotNull(wildcardClass30);
        org.junit.Assert.assertNotNull(class31);
        org.junit.Assert.assertNotNull(class32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(class34);
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod43);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(class45);
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone52);
// flaky:         org.junit.Assert.assertEquals(timeZone52.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod53);
        org.junit.Assert.assertNotNull(regularTimePeriod54);
        org.junit.Assert.assertNotNull(timeZone58);
// flaky:         org.junit.Assert.assertEquals(timeZone58.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod59);
        org.junit.Assert.assertNull(regularTimePeriod60);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "Week 35, 52" + "'", str65, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 2791L + "'", long66 == 2791L);
        org.junit.Assert.assertNotNull(regularTimePeriod67);
        org.junit.Assert.assertNotNull(date68);
        org.junit.Assert.assertEquals(date68.toString(), "Sat Sep 02 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date72);
        org.junit.Assert.assertEquals(date72.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 52 + "'", int77 == 52);
        org.junit.Assert.assertNotNull(timeZone78);
// flaky:         org.junit.Assert.assertEquals(timeZone78.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 1 + "'", int79 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod83);
    }

    @Test
    public void test1203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1203");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod11 = week2.next();
        java.util.Date date12 = week2.getStart();
        org.jfree.data.time.Week week13 = new org.jfree.data.time.Week();
        long long14 = week13.getFirstMillisecond();
        org.jfree.data.time.Year year15 = week13.getYear();
        int int16 = week13.getWeek();
        int int17 = week13.getWeek();
        int int18 = week2.compareTo((java.lang.Object) week13);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod19 = week13.next();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod20 = week13.next();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertNotNull(regularTimePeriod11);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1637449200000L + "'", long14 == 1637449200000L);
        org.junit.Assert.assertNotNull(year15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 48 + "'", int16 == 48);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 48 + "'", int17 == 48);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1969) + "'", int18 == (-1969));
        org.junit.Assert.assertNotNull(regularTimePeriod19);
        org.junit.Assert.assertNotNull(regularTimePeriod20);
    }

    @Test
    public void test1204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1204");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week();
        long long3 = week2.getFirstMillisecond();
        org.jfree.data.time.Year year4 = week2.getYear();
        org.jfree.data.time.Week week5 = new org.jfree.data.time.Week(0, year4);
        org.jfree.data.time.Year year6 = week5.getYear();
        long long7 = year6.getMiddleMillisecond();
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week(9, year6);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1637449200000L + "'", long3 == 1637449200000L);
        org.junit.Assert.assertNotNull(year4);
        org.junit.Assert.assertNotNull(year6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1625223599999L + "'", long7 == 1625223599999L);
    }

    @Test
    public void test1205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1205");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(8, 32);
        java.lang.String str3 = week2.toString();
        java.lang.Class<?> wildcardClass4 = week2.getClass();
        java.lang.Class class5 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass4);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 8, 32" + "'", str3, "Week 8, 32");
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(class5);
    }

    @Test
    public void test1206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1206");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        java.lang.Class<?> wildcardClass4 = week2.getClass();
        java.lang.Class class5 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass4);
        java.lang.Class class6 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass4);
        org.jfree.data.time.Week week9 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week9.next();
        int int11 = week9.getYearValue();
        java.util.TimeZone timeZone12 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int13 = week9.compareTo((java.lang.Object) timeZone12);
        int int14 = week9.getYearValue();
        int int16 = week9.compareTo((java.lang.Object) 9);
        java.util.Date date17 = week9.getStart();
        org.jfree.data.time.Week week18 = new org.jfree.data.time.Week(date17);
        org.jfree.data.time.Week week21 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod22 = week21.next();
        int int23 = week21.getYearValue();
        java.util.TimeZone timeZone24 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int25 = week21.compareTo((java.lang.Object) timeZone24);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod26 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass4, date17, timeZone24);
        java.util.Date date27 = regularTimePeriod26.getEnd();
        org.jfree.data.time.Week week30 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod31 = week30.next();
        int int32 = week30.getYearValue();
        java.util.TimeZone timeZone33 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int34 = week30.compareTo((java.lang.Object) timeZone33);
        int int35 = week30.getYearValue();
        int int37 = week30.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod38 = week30.previous();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod39 = week30.next();
        org.jfree.data.time.Week week42 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod43 = week42.next();
        java.lang.Class<?> wildcardClass44 = week42.getClass();
        java.lang.Class class45 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass44);
        java.lang.Class class46 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass44);
        boolean boolean47 = week30.equals((java.lang.Object) wildcardClass44);
        java.lang.Class class48 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass44);
        org.jfree.data.time.Week week51 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date52 = week51.getStart();
        java.util.Date date53 = week51.getEnd();
        org.jfree.data.time.Week week56 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod57 = week56.next();
        java.lang.Class<?> wildcardClass58 = week56.getClass();
        java.lang.Class class59 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass58);
        org.jfree.data.time.Week week62 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date63 = week62.getStart();
        java.lang.Class class64 = null;
        java.util.Date date65 = null;
        java.util.TimeZone timeZone66 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod67 = org.jfree.data.time.RegularTimePeriod.createInstance(class64, date65, timeZone66);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod68 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass58, date63, timeZone66);
        org.jfree.data.time.Week week69 = new org.jfree.data.time.Week(date53, timeZone66);
        java.lang.Class class70 = null;
        java.util.Date date71 = null;
        java.util.TimeZone timeZone72 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod73 = org.jfree.data.time.RegularTimePeriod.createInstance(class70, date71, timeZone72);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod74 = org.jfree.data.time.RegularTimePeriod.createInstance(class48, date53, timeZone72);
        org.jfree.data.time.Week week75 = new org.jfree.data.time.Week(date27, timeZone72);
        java.util.Date date76 = week75.getEnd();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(class5);
        org.junit.Assert.assertNotNull(class6);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertNotNull(timeZone12);
// flaky:         org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 52 + "'", int14 == 52);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 52 + "'", int23 == 52);
        org.junit.Assert.assertNotNull(timeZone24);
// flaky:         org.junit.Assert.assertEquals(timeZone24.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod26);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 52 + "'", int32 == 52);
        org.junit.Assert.assertNotNull(timeZone33);
// flaky:         org.junit.Assert.assertEquals(timeZone33.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 52 + "'", int35 == 52);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod38);
        org.junit.Assert.assertNotNull(regularTimePeriod39);
        org.junit.Assert.assertNotNull(regularTimePeriod43);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(class45);
        org.junit.Assert.assertNotNull(class46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(class48);
        org.junit.Assert.assertNotNull(date52);
        org.junit.Assert.assertEquals(date52.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod57);
        org.junit.Assert.assertNotNull(wildcardClass58);
        org.junit.Assert.assertNotNull(class59);
        org.junit.Assert.assertNotNull(date63);
        org.junit.Assert.assertEquals(date63.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone66);
// flaky:         org.junit.Assert.assertEquals(timeZone66.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod67);
        org.junit.Assert.assertNotNull(regularTimePeriod68);
        org.junit.Assert.assertNotNull(timeZone72);
// flaky:         org.junit.Assert.assertEquals(timeZone72.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod73);
        org.junit.Assert.assertNull(regularTimePeriod74);
        org.junit.Assert.assertNotNull(date76);
        org.junit.Assert.assertEquals(date76.toString(), "Sat Aug 26 23:59:59 CET 52");
    }

    @Test
    public void test1207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1207");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        int int10 = week2.getYearValue();
        long long11 = week2.getLastMillisecond();
        int int12 = week2.getWeek();
        java.util.Date date13 = week2.getEnd();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod14 = week2.previous();
        long long15 = regularTimePeriod14.getMiddleMillisecond();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 52 + "'", int10 == 52);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-60505750800001L) + "'", long11 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 35 + "'", int12 == 35);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-60506658000001L) + "'", long15 == (-60506658000001L));
    }

    @Test
    public void test1208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1208");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        long long3 = week2.getMiddleMillisecond();
        long long4 = week2.getFirstMillisecond();
        java.lang.Class<?> wildcardClass5 = week2.getClass();
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod9 = week8.next();
        int int10 = week8.getYearValue();
        java.util.TimeZone timeZone11 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int12 = week8.compareTo((java.lang.Object) timeZone11);
        int int13 = week8.getYearValue();
        int int15 = week8.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod16 = week8.previous();
        int int17 = week8.getYearValue();
        long long18 = week8.getLastMillisecond();
        int int19 = week8.getWeek();
        int int20 = week8.getYearValue();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod21 = week8.next();
        long long22 = week8.getSerialIndex();
        java.util.Date date23 = week8.getEnd();
        java.util.TimeZone timeZone24 = null;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod25 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass5, date23, timeZone24);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-60506053200001L) + "'", long3 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506355600000L) + "'", long4 == (-60506355600000L));
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(regularTimePeriod9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 52 + "'", int10 == 52);
        org.junit.Assert.assertNotNull(timeZone11);
// flaky:         org.junit.Assert.assertEquals(timeZone11.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 52 + "'", int13 == 52);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 52 + "'", int17 == 52);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-60505750800001L) + "'", long18 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 35 + "'", int19 == 35);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 52 + "'", int20 == 52);
        org.junit.Assert.assertNotNull(regularTimePeriod21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 2791L + "'", long22 == 2791L);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNull(regularTimePeriod25);
    }

    @Test
    public void test1209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1209");
        java.util.Date date0 = null;
        org.jfree.data.time.Week week3 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date4 = week3.getStart();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod8 = week7.next();
        int int9 = week7.getYearValue();
        java.util.TimeZone timeZone10 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int11 = week7.compareTo((java.lang.Object) timeZone10);
        org.jfree.data.time.Week week12 = new org.jfree.data.time.Week(date4, timeZone10);
        java.util.TimeZone timeZone13 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.Week week14 = new org.jfree.data.time.Week(date4, timeZone13);
        java.util.Locale locale15 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Week week16 = new org.jfree.data.time.Week(date0, timeZone13, locale15);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'time' argument.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 52 + "'", int9 == 52);
        org.junit.Assert.assertNotNull(timeZone10);
// flaky:         org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(timeZone13);
// flaky:         org.junit.Assert.assertEquals(timeZone13.getDisplayName(), "Central European Time");
    }

    @Test
    public void test1210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1210");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(7, 1);
        java.util.Date date3 = week2.getStart();
        java.util.Calendar calendar4 = null;
        // The following exception was thrown during execution in test generation
        try {
            week2.peg(calendar4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Feb 06 00:00:00 CET 1");
    }

    @Test
    public void test1211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1211");
        org.jfree.data.time.Week week4 = new org.jfree.data.time.Week();
        long long5 = week4.getFirstMillisecond();
        org.jfree.data.time.Year year6 = week4.getYear();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week((int) (byte) 100, year6);
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week(12, year6);
        org.jfree.data.time.Week week9 = new org.jfree.data.time.Week(2021, year6);
        org.jfree.data.time.Week week10 = new org.jfree.data.time.Week((int) (byte) -1, year6);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1637449200000L + "'", long5 == 1637449200000L);
        org.junit.Assert.assertNotNull(year6);
    }

    @Test
    public void test1212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1212");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        java.lang.Class<?> wildcardClass4 = week2.getClass();
        java.lang.Class class5 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass4);
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date9 = week8.getStart();
        java.lang.Class class10 = null;
        java.util.Date date11 = null;
        java.util.TimeZone timeZone12 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod13 = org.jfree.data.time.RegularTimePeriod.createInstance(class10, date11, timeZone12);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod14 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass4, date9, timeZone12);
        org.jfree.data.time.Week week15 = new org.jfree.data.time.Week(date9);
        long long16 = week15.getSerialIndex();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod17 = week15.next();
        java.util.Date date18 = week15.getEnd();
        org.jfree.data.time.Week week21 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod22 = week21.next();
        int int23 = week21.getYearValue();
        java.util.TimeZone timeZone24 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int25 = week21.compareTo((java.lang.Object) timeZone24);
        int int26 = week21.getYearValue();
        int int28 = week21.compareTo((java.lang.Object) 9);
        int int29 = week21.getYearValue();
        long long30 = week21.getLastMillisecond();
        int int31 = week21.getWeek();
        java.util.Date date32 = week21.getEnd();
        org.jfree.data.time.Week week35 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date36 = week35.getStart();
        java.util.Date date37 = week35.getEnd();
        org.jfree.data.time.Week week40 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod41 = week40.next();
        java.lang.Class<?> wildcardClass42 = week40.getClass();
        java.lang.Class class43 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass42);
        org.jfree.data.time.Week week46 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date47 = week46.getStart();
        java.lang.Class class48 = null;
        java.util.Date date49 = null;
        java.util.TimeZone timeZone50 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod51 = org.jfree.data.time.RegularTimePeriod.createInstance(class48, date49, timeZone50);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod52 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass42, date47, timeZone50);
        org.jfree.data.time.Week week53 = new org.jfree.data.time.Week(date37, timeZone50);
        org.jfree.data.time.Week week54 = new org.jfree.data.time.Week(date32, timeZone50);
        org.jfree.data.time.Week week55 = new org.jfree.data.time.Week(date18, timeZone50);
        long long56 = week55.getFirstMillisecond();
        java.util.Calendar calendar57 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long58 = week55.getMiddleMillisecond(calendar57);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(class5);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone12);
// flaky:         org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod13);
        org.junit.Assert.assertNotNull(regularTimePeriod14);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 5150L + "'", long16 == 5150L);
        org.junit.Assert.assertNotNull(regularTimePeriod17);
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 52 + "'", int23 == 52);
        org.junit.Assert.assertNotNull(timeZone24);
// flaky:         org.junit.Assert.assertEquals(timeZone24.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 52 + "'", int26 == 52);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 52 + "'", int29 == 52);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + (-60505750800001L) + "'", long30 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 35 + "'", int31 == 35);
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod41);
        org.junit.Assert.assertNotNull(wildcardClass42);
        org.junit.Assert.assertNotNull(class43);
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone50);
// flaky:         org.junit.Assert.assertEquals(timeZone50.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod51);
        org.junit.Assert.assertNotNull(regularTimePeriod52);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + (-59101405200000L) + "'", long56 == (-59101405200000L));
    }

    @Test
    public void test1213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1213");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week();
        long long3 = week2.getFirstMillisecond();
        org.jfree.data.time.Year year4 = week2.getYear();
        org.jfree.data.time.Week week5 = new org.jfree.data.time.Week(0, year4);
        long long6 = year4.getMiddleMillisecond();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week(97, year4);
        int int8 = week7.getWeek();
        long long9 = week7.getLastMillisecond();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1637449200000L + "'", long3 == 1637449200000L);
        org.junit.Assert.assertNotNull(year4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1625223599999L + "'", long6 == 1625223599999L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 97 + "'", int8 == 97);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1667689199999L + "'", long9 == 1667689199999L);
    }

    @Test
    public void test1214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1214");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.previous();
        int int4 = week2.getYearValue();
        long long5 = week2.getSerialIndex();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod6 = week2.next();
        java.util.Date date7 = regularTimePeriod6.getEnd();
        java.util.Date date8 = regularTimePeriod6.getStart();
        org.jfree.data.time.Week week9 = new org.jfree.data.time.Week(date8);
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Year year10 = week9.getYear();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Year constructor: year (52) outside valid range.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 2791L + "'", long5 == 2791L);
        org.junit.Assert.assertNotNull(regularTimePeriod6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Sat Sep 02 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Sun Aug 27 00:00:00 CET 52");
    }

    @Test
    public void test1215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1215");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((-1969), (-1));
        java.lang.Object obj3 = null;
        int int4 = week2.compareTo(obj3);
        java.util.Calendar calendar5 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long6 = week2.getFirstMillisecond(calendar5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
    }

    @Test
    public void test1216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1216");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.previous();
        int int4 = week2.getYearValue();
        java.util.Date date5 = week2.getStart();
        int int6 = week2.getYearValue();
        long long7 = week2.getSerialIndex();
        long long8 = week2.getFirstMillisecond();
        long long9 = week2.getLastMillisecond();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 52 + "'", int6 == 52);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 2791L + "'", long7 == 2791L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-60506355600000L) + "'", long8 == (-60506355600000L));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-60505750800001L) + "'", long9 == (-60505750800001L));
    }

    @Test
    public void test1217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1217");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        int int10 = week2.getYearValue();
        long long11 = week2.getLastMillisecond();
        long long12 = week2.getSerialIndex();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod13 = week2.next();
        java.lang.String str14 = week2.toString();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod15 = week2.next();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 52 + "'", int10 == 52);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-60505750800001L) + "'", long11 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 2791L + "'", long12 == 2791L);
        org.junit.Assert.assertNotNull(regularTimePeriod13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Week 35, 52" + "'", str14, "Week 35, 52");
        org.junit.Assert.assertNotNull(regularTimePeriod15);
    }

    @Test
    public void test1218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1218");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.util.Date date3 = week2.getStart();
        int int4 = week2.getWeek();
        long long5 = week2.getMiddleMillisecond();
        int int6 = week2.getWeek();
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-60506053200001L) + "'", long5 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 35 + "'", int6 == 35);
    }

    @Test
    public void test1219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1219");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(48, (-1924));
    }

    @Test
    public void test1220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1220");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        int int10 = week2.getYearValue();
        long long11 = week2.getLastMillisecond();
        long long12 = week2.getSerialIndex();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod13 = week2.next();
        int int14 = week2.getYearValue();
        long long15 = week2.getSerialIndex();
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Year year16 = week2.getYear();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Year constructor: year (52) outside valid range.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 52 + "'", int10 == 52);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-60505750800001L) + "'", long11 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 2791L + "'", long12 == 2791L);
        org.junit.Assert.assertNotNull(regularTimePeriod13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 52 + "'", int14 == 52);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 2791L + "'", long15 == 2791L);
    }

    @Test
    public void test1221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1221");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        int int10 = week2.getYearValue();
        long long11 = week2.getLastMillisecond();
        long long12 = week2.getMiddleMillisecond();
        long long13 = week2.getLastMillisecond();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 52 + "'", int10 == 52);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-60505750800001L) + "'", long11 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-60506053200001L) + "'", long12 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-60505750800001L) + "'", long13 == (-60505750800001L));
    }

    @Test
    public void test1222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1222");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.next();
        long long6 = week2.getMiddleMillisecond();
        java.util.Date date7 = week2.getStart();
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week(date7);
        long long9 = week8.getFirstMillisecond();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-60506053200001L) + "'", long6 == (-60506053200001L));
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-60506355600000L) + "'", long9 == (-60506355600000L));
    }

    @Test
    public void test1223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1223");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(1, 35);
    }

    @Test
    public void test1224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1224");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        long long5 = week2.getLastMillisecond();
        java.util.Date date6 = week2.getEnd();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod7 = week2.next();
        java.util.Date date8 = week2.getEnd();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod9 = week2.next();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-60505750800001L) + "'", long5 == (-60505750800001L));
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod7);
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod9);
    }

    @Test
    public void test1225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1225");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.previous();
        int int4 = week2.getYearValue();
        java.util.Date date5 = week2.getEnd();
        long long6 = week2.getMiddleMillisecond();
        java.util.Date date7 = week2.getEnd();
        org.jfree.data.time.Week week10 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod11 = week10.next();
        java.lang.Class<?> wildcardClass12 = week10.getClass();
        java.lang.Class class13 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass12);
        org.jfree.data.time.Week week16 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date17 = week16.getStart();
        java.lang.Class class18 = null;
        java.util.Date date19 = null;
        java.util.TimeZone timeZone20 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod21 = org.jfree.data.time.RegularTimePeriod.createInstance(class18, date19, timeZone20);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod22 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass12, date17, timeZone20);
        org.jfree.data.time.Week week23 = new org.jfree.data.time.Week(date17);
        long long24 = week23.getSerialIndex();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod25 = week23.next();
        java.lang.Class<?> wildcardClass26 = regularTimePeriod25.getClass();
        org.jfree.data.time.Week week29 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod30 = week29.next();
        int int31 = week29.getYearValue();
        java.util.TimeZone timeZone32 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int33 = week29.compareTo((java.lang.Object) timeZone32);
        int int34 = week29.getYearValue();
        int int36 = week29.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod37 = week29.previous();
        int int38 = week29.getYearValue();
        long long39 = week29.getLastMillisecond();
        org.jfree.data.time.Week week42 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod43 = week42.next();
        java.lang.Class<?> wildcardClass44 = week42.getClass();
        java.lang.Class class45 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass44);
        boolean boolean46 = week29.equals((java.lang.Object) wildcardClass44);
        int int47 = week29.getYearValue();
        java.lang.Object obj48 = null;
        int int49 = week29.compareTo(obj48);
        long long50 = week29.getSerialIndex();
        java.util.Date date51 = week29.getEnd();
        org.jfree.data.time.Week week54 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str55 = week54.toString();
        long long56 = week54.getMiddleMillisecond();
        long long57 = week54.getLastMillisecond();
        long long58 = week54.getFirstMillisecond();
        java.util.Date date59 = week54.getStart();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod60 = week54.next();
        java.util.Date date61 = week54.getEnd();
        java.util.Date date62 = week54.getStart();
        java.lang.Class class63 = null;
        java.util.Date date64 = null;
        java.util.TimeZone timeZone65 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod66 = org.jfree.data.time.RegularTimePeriod.createInstance(class63, date64, timeZone65);
        org.jfree.data.time.Week week67 = new org.jfree.data.time.Week(date62, timeZone65);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod68 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass26, date51, timeZone65);
        java.util.Locale locale69 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Week week70 = new org.jfree.data.time.Week(date7, timeZone65, locale69);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'locale' argument.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-60506053200001L) + "'", long6 == (-60506053200001L));
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod11);
        org.junit.Assert.assertNotNull(wildcardClass12);
        org.junit.Assert.assertNotNull(class13);
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone20);
// flaky:         org.junit.Assert.assertEquals(timeZone20.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod21);
        org.junit.Assert.assertNotNull(regularTimePeriod22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 5150L + "'", long24 == 5150L);
        org.junit.Assert.assertNotNull(regularTimePeriod25);
        org.junit.Assert.assertNotNull(wildcardClass26);
        org.junit.Assert.assertNotNull(regularTimePeriod30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 52 + "'", int31 == 52);
        org.junit.Assert.assertNotNull(timeZone32);
// flaky:         org.junit.Assert.assertEquals(timeZone32.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 52 + "'", int34 == 52);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 52 + "'", int38 == 52);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + (-60505750800001L) + "'", long39 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod43);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(class45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 52 + "'", int47 == 52);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 2791L + "'", long50 == 2791L);
        org.junit.Assert.assertNotNull(date51);
        org.junit.Assert.assertEquals(date51.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "Week 35, 52" + "'", str55, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + (-60506053200001L) + "'", long56 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + (-60505750800001L) + "'", long57 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + (-60506355600000L) + "'", long58 == (-60506355600000L));
        org.junit.Assert.assertNotNull(date59);
        org.junit.Assert.assertEquals(date59.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod60);
        org.junit.Assert.assertNotNull(date61);
        org.junit.Assert.assertEquals(date61.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date62);
        org.junit.Assert.assertEquals(date62.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(timeZone65);
// flaky:         org.junit.Assert.assertEquals(timeZone65.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod66);
        org.junit.Assert.assertNotNull(regularTimePeriod68);
    }

    @Test
    public void test1226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1226");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.next();
        java.util.Date date6 = week2.getEnd();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week(date6);
        long long8 = week7.getFirstMillisecond();
        java.lang.Object obj9 = null;
        int int10 = week7.compareTo(obj9);
        org.jfree.data.time.Week week13 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod14 = week13.next();
        java.lang.Class<?> wildcardClass15 = week13.getClass();
        java.lang.Class class16 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass15);
        java.lang.Class class17 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass15);
        org.jfree.data.time.Week week20 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod21 = week20.next();
        int int22 = week20.getYearValue();
        java.util.TimeZone timeZone23 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int24 = week20.compareTo((java.lang.Object) timeZone23);
        int int25 = week20.getYearValue();
        int int27 = week20.compareTo((java.lang.Object) 9);
        java.util.Date date28 = week20.getStart();
        org.jfree.data.time.Week week29 = new org.jfree.data.time.Week(date28);
        org.jfree.data.time.Week week32 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod33 = week32.next();
        int int34 = week32.getYearValue();
        java.util.TimeZone timeZone35 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int36 = week32.compareTo((java.lang.Object) timeZone35);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod37 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass15, date28, timeZone35);
        org.jfree.data.time.Week week40 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.util.Date date41 = week40.getStart();
        org.jfree.data.time.Week week42 = new org.jfree.data.time.Week(date41);
        org.jfree.data.time.Week week45 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod46 = week45.next();
        java.lang.Class<?> wildcardClass47 = week45.getClass();
        java.lang.Class class48 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass47);
        java.lang.Class class49 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass47);
        org.jfree.data.time.Week week52 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod53 = week52.next();
        int int54 = week52.getYearValue();
        java.util.TimeZone timeZone55 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int56 = week52.compareTo((java.lang.Object) timeZone55);
        int int57 = week52.getYearValue();
        int int59 = week52.compareTo((java.lang.Object) 9);
        java.util.Date date60 = week52.getStart();
        org.jfree.data.time.Week week61 = new org.jfree.data.time.Week(date60);
        org.jfree.data.time.Week week64 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod65 = week64.next();
        int int66 = week64.getYearValue();
        java.util.TimeZone timeZone67 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int68 = week64.compareTo((java.lang.Object) timeZone67);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod69 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass47, date60, timeZone67);
        org.jfree.data.time.Week week72 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod73 = week72.previous();
        int int74 = week72.getYearValue();
        java.util.Date date75 = week72.getStart();
        java.util.TimeZone timeZone76 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.Week week77 = new org.jfree.data.time.Week(date75, timeZone76);
        org.jfree.data.time.Week week78 = new org.jfree.data.time.Week(date60, timeZone76);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod79 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass15, date41, timeZone76);
        boolean boolean80 = week7.equals((java.lang.Object) date41);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-60506355600000L) + "'", long8 == (-60506355600000L));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod14);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNotNull(class16);
        org.junit.Assert.assertNotNull(class17);
        org.junit.Assert.assertNotNull(regularTimePeriod21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 52 + "'", int22 == 52);
        org.junit.Assert.assertNotNull(timeZone23);
// flaky:         org.junit.Assert.assertEquals(timeZone23.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 52 + "'", int25 == 52);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 52 + "'", int34 == 52);
        org.junit.Assert.assertNotNull(timeZone35);
// flaky:         org.junit.Assert.assertEquals(timeZone35.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod37);
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod46);
        org.junit.Assert.assertNotNull(wildcardClass47);
        org.junit.Assert.assertNotNull(class48);
        org.junit.Assert.assertNotNull(class49);
        org.junit.Assert.assertNotNull(regularTimePeriod53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 52 + "'", int54 == 52);
        org.junit.Assert.assertNotNull(timeZone55);
// flaky:         org.junit.Assert.assertEquals(timeZone55.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 52 + "'", int57 == 52);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertNotNull(date60);
        org.junit.Assert.assertEquals(date60.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 52 + "'", int66 == 52);
        org.junit.Assert.assertNotNull(timeZone67);
// flaky:         org.junit.Assert.assertEquals(timeZone67.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod69);
        org.junit.Assert.assertNotNull(regularTimePeriod73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 52 + "'", int74 == 52);
        org.junit.Assert.assertNotNull(date75);
        org.junit.Assert.assertEquals(date75.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(timeZone76);
// flaky:         org.junit.Assert.assertEquals(timeZone76.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNotNull(regularTimePeriod79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
    }

    @Test
    public void test1227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1227");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) 'a', 32);
    }

    @Test
    public void test1228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1228");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(35, 0);
        long long3 = week2.getSerialIndex();
        long long4 = week2.getFirstMillisecond();
        long long5 = week2.getLastMillisecond();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 35L + "'", long3 == 35L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-62147178000000L) + "'", long4 == (-62147178000000L));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-62146573200001L) + "'", long5 == (-62146573200001L));
    }

    @Test
    public void test1229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1229");
        org.jfree.data.time.Week week0 = new org.jfree.data.time.Week();
        long long1 = week0.getFirstMillisecond();
        long long2 = week0.getSerialIndex();
        long long3 = week0.getMiddleMillisecond();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1637449200000L + "'", long1 == 1637449200000L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 107161L + "'", long2 == 107161L);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1637751599999L + "'", long3 == 1637751599999L);
    }

    @Test
    public void test1230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1230");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(97, (int) (byte) 10);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        java.util.Calendar calendar4 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long5 = week2.getMiddleMillisecond(calendar4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
    }

    @Test
    public void test1231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1231");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date3 = week2.getStart();
        java.util.Date date4 = week2.getEnd();
        int int5 = week2.getYearValue();
        long long6 = week2.getLastMillisecond();
        java.lang.Class<?> wildcardClass7 = week2.getClass();
        java.lang.Class class8 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass7);
        java.lang.Class class9 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass7);
        java.lang.Class class10 = org.jfree.data.time.RegularTimePeriod.downsize(class9);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 97 + "'", int5 == 97);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-59100800400001L) + "'", long6 == (-59100800400001L));
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(class8);
        org.junit.Assert.assertNotNull(class9);
        org.junit.Assert.assertNotNull(class10);
    }

    @Test
    public void test1232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1232");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '4', (int) ' ');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.previous();
        int int4 = week2.getWeek();
        long long5 = week2.getSerialIndex();
        int int6 = week2.getWeek();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod7 = week2.next();
        java.util.Calendar calendar8 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long9 = week2.getFirstMillisecond(calendar8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1748L + "'", long5 == 1748L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 52 + "'", int6 == 52);
        org.junit.Assert.assertNotNull(regularTimePeriod7);
    }

    @Test
    public void test1233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1233");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, 2);
        java.lang.String str3 = week2.toString();
        int int4 = week2.getYearValue();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date8 = week7.getStart();
        java.util.Date date9 = week7.getEnd();
        int int10 = week7.getYearValue();
        long long11 = week7.getLastMillisecond();
        java.lang.Class<?> wildcardClass12 = week7.getClass();
        java.lang.Class class13 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass12);
        java.lang.Class class14 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass12);
        org.jfree.data.time.Week week17 = new org.jfree.data.time.Week(9, (int) 'a');
        org.jfree.data.time.Week week20 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod21 = week20.next();
        long long22 = week20.getMiddleMillisecond();
        java.lang.String str23 = week20.toString();
        boolean boolean24 = week17.equals((java.lang.Object) week20);
        java.util.Date date25 = week17.getStart();
        org.jfree.data.time.Week week28 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod29 = week28.next();
        java.lang.Class<?> wildcardClass30 = week28.getClass();
        java.lang.Class class31 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass30);
        java.lang.Class class32 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass30);
        org.jfree.data.time.Week week35 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod36 = week35.next();
        int int37 = week35.getYearValue();
        java.util.TimeZone timeZone38 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int39 = week35.compareTo((java.lang.Object) timeZone38);
        int int40 = week35.getYearValue();
        int int42 = week35.compareTo((java.lang.Object) 9);
        java.util.Date date43 = week35.getStart();
        org.jfree.data.time.Week week44 = new org.jfree.data.time.Week(date43);
        org.jfree.data.time.Week week47 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod48 = week47.next();
        int int49 = week47.getYearValue();
        java.util.TimeZone timeZone50 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int51 = week47.compareTo((java.lang.Object) timeZone50);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod52 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass30, date43, timeZone50);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod53 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass12, date25, timeZone50);
        boolean boolean54 = week2.equals((java.lang.Object) regularTimePeriod53);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 9, 2" + "'", str3, "Week 9, 2");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2 + "'", int4 == 2);
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 97 + "'", int10 == 97);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-59100800400001L) + "'", long11 == (-59100800400001L));
        org.junit.Assert.assertNotNull(wildcardClass12);
        org.junit.Assert.assertNotNull(class13);
        org.junit.Assert.assertNotNull(class14);
        org.junit.Assert.assertNotNull(regularTimePeriod21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-60506053200001L) + "'", long22 == (-60506053200001L));
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Week 35, 52" + "'", str23, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod29);
        org.junit.Assert.assertNotNull(wildcardClass30);
        org.junit.Assert.assertNotNull(class31);
        org.junit.Assert.assertNotNull(class32);
        org.junit.Assert.assertNotNull(regularTimePeriod36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 52 + "'", int37 == 52);
        org.junit.Assert.assertNotNull(timeZone38);
// flaky:         org.junit.Assert.assertEquals(timeZone38.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 52 + "'", int40 == 52);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 52 + "'", int49 == 52);
        org.junit.Assert.assertNotNull(timeZone50);
// flaky:         org.junit.Assert.assertEquals(timeZone50.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod52);
        org.junit.Assert.assertNotNull(regularTimePeriod53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test1234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1234");
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Week week1 = org.jfree.data.time.Week.parseWeek("Week 4, 2021");
            org.junit.Assert.fail("Expected exception of type org.jfree.data.time.TimePeriodFormatException; message: Can't evaluate the week.");
        } catch (org.jfree.data.time.TimePeriodFormatException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1235");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date3 = week2.getStart();
        java.util.Date date4 = week2.getEnd();
        org.jfree.data.time.Week week5 = new org.jfree.data.time.Week(date4);
        java.util.Date date6 = week5.getEnd();
        org.jfree.data.time.Week week9 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date10 = week9.getStart();
        java.util.Date date11 = week9.getEnd();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod12 = week9.next();
        long long13 = week9.getLastMillisecond();
        boolean boolean14 = week5.equals((java.lang.Object) week9);
        long long15 = week5.getLastMillisecond();
        java.util.Calendar calendar16 = null;
        // The following exception was thrown during execution in test generation
        try {
            week5.peg(calendar16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-59100800400001L) + "'", long13 == (-59100800400001L));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-59100800400001L) + "'", long15 == (-59100800400001L));
    }

    @Test
    public void test1236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1236");
        org.jfree.data.time.Week week4 = new org.jfree.data.time.Week();
        long long5 = week4.getFirstMillisecond();
        org.jfree.data.time.Year year6 = week4.getYear();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week(0, year6);
        org.jfree.data.time.Year year8 = week7.getYear();
        org.jfree.data.time.Week week9 = new org.jfree.data.time.Week(97, year8);
        org.jfree.data.time.Week week10 = new org.jfree.data.time.Week(0, year8);
        org.jfree.data.time.Week week11 = new org.jfree.data.time.Week((int) (byte) 100, year8);
        java.util.Calendar calendar12 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long13 = week11.getLastMillisecond(calendar12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1637449200000L + "'", long5 == 1637449200000L);
        org.junit.Assert.assertNotNull(year6);
        org.junit.Assert.assertNotNull(year8);
    }

    @Test
    public void test1237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1237");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((-2019), (-1));
    }

    @Test
    public void test1238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1238");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getWeek();
        java.util.Calendar calendar8 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long9 = week2.getMiddleMillisecond(calendar8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 35 + "'", int7 == 35);
    }

    @Test
    public void test1239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1239");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.previous();
        java.util.Date date4 = week2.getEnd();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod8 = week7.next();
        int int9 = week7.getYearValue();
        java.util.TimeZone timeZone10 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int11 = week7.compareTo((java.lang.Object) timeZone10);
        int int12 = week7.getYearValue();
        int int14 = week7.compareTo((java.lang.Object) 9);
        int int15 = week7.getYearValue();
        long long16 = week7.getLastMillisecond();
        int int17 = week7.getWeek();
        java.util.Date date18 = week7.getEnd();
        org.jfree.data.time.Week week21 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date22 = week21.getStart();
        java.util.Date date23 = week21.getEnd();
        org.jfree.data.time.Week week26 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod27 = week26.next();
        java.lang.Class<?> wildcardClass28 = week26.getClass();
        java.lang.Class class29 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass28);
        org.jfree.data.time.Week week32 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date33 = week32.getStart();
        java.lang.Class class34 = null;
        java.util.Date date35 = null;
        java.util.TimeZone timeZone36 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod37 = org.jfree.data.time.RegularTimePeriod.createInstance(class34, date35, timeZone36);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod38 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass28, date33, timeZone36);
        org.jfree.data.time.Week week39 = new org.jfree.data.time.Week(date23, timeZone36);
        org.jfree.data.time.Week week40 = new org.jfree.data.time.Week(date18, timeZone36);
        org.jfree.data.time.Week week41 = new org.jfree.data.time.Week(date4, timeZone36);
        long long42 = week41.getLastMillisecond();
        int int44 = week41.compareTo((java.lang.Object) 1L);
        long long45 = week41.getFirstMillisecond();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 52 + "'", int9 == 52);
        org.junit.Assert.assertNotNull(timeZone10);
// flaky:         org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 52 + "'", int15 == 52);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-60505750800001L) + "'", long16 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 35 + "'", int17 == 35);
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod27);
        org.junit.Assert.assertNotNull(wildcardClass28);
        org.junit.Assert.assertNotNull(class29);
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone36);
// flaky:         org.junit.Assert.assertEquals(timeZone36.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod37);
        org.junit.Assert.assertNotNull(regularTimePeriod38);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + (-60505750800001L) + "'", long42 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + (-60506355600000L) + "'", long45 == (-60506355600000L));
    }

    @Test
    public void test1240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1240");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        int int11 = week2.getYearValue();
        long long12 = week2.getLastMillisecond();
        org.jfree.data.time.Week week15 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod16 = week15.next();
        java.lang.Class<?> wildcardClass17 = week15.getClass();
        java.lang.Class class18 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass17);
        boolean boolean19 = week2.equals((java.lang.Object) wildcardClass17);
        int int20 = week2.getYearValue();
        java.lang.Object obj21 = null;
        int int22 = week2.compareTo(obj21);
        long long23 = week2.getSerialIndex();
        java.util.Date date24 = week2.getEnd();
        org.jfree.data.time.Week week27 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str28 = week27.toString();
        long long29 = week27.getSerialIndex();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod30 = week27.next();
        java.util.Date date31 = regularTimePeriod30.getEnd();
        org.jfree.data.time.Week week34 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date35 = week34.getStart();
        java.util.Date date36 = week34.getEnd();
        org.jfree.data.time.Week week39 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod40 = week39.next();
        java.lang.Class<?> wildcardClass41 = week39.getClass();
        java.lang.Class class42 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass41);
        org.jfree.data.time.Week week45 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date46 = week45.getStart();
        java.lang.Class class47 = null;
        java.util.Date date48 = null;
        java.util.TimeZone timeZone49 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod50 = org.jfree.data.time.RegularTimePeriod.createInstance(class47, date48, timeZone49);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod51 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass41, date46, timeZone49);
        org.jfree.data.time.Week week52 = new org.jfree.data.time.Week(date36, timeZone49);
        org.jfree.data.time.Week week53 = new org.jfree.data.time.Week(date31, timeZone49);
        org.jfree.data.time.Week week54 = new org.jfree.data.time.Week(date24, timeZone49);
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-60505750800001L) + "'", long12 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(class18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 52 + "'", int20 == 52);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 2791L + "'", long23 == 2791L);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Week 35, 52" + "'", str28, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 2791L + "'", long29 == 2791L);
        org.junit.Assert.assertNotNull(regularTimePeriod30);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Sat Sep 02 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod40);
        org.junit.Assert.assertNotNull(wildcardClass41);
        org.junit.Assert.assertNotNull(class42);
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone49);
// flaky:         org.junit.Assert.assertEquals(timeZone49.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod50);
        org.junit.Assert.assertNotNull(regularTimePeriod51);
    }

    @Test
    public void test1241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1241");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) (byte) 1, (int) (byte) 0);
        java.lang.Object obj3 = null;
        boolean boolean4 = week2.equals(obj3);
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod8 = week7.next();
        int int9 = week7.getYearValue();
        java.util.TimeZone timeZone10 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int11 = week7.compareTo((java.lang.Object) timeZone10);
        java.lang.String str12 = week7.toString();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod13 = week7.previous();
        java.lang.String str14 = week7.toString();
        long long15 = week7.getFirstMillisecond();
        boolean boolean16 = week2.equals((java.lang.Object) long15);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(regularTimePeriod8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 52 + "'", int9 == 52);
        org.junit.Assert.assertNotNull(timeZone10);
// flaky:         org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Week 35, 52" + "'", str12, "Week 35, 52");
        org.junit.Assert.assertNotNull(regularTimePeriod13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Week 35, 52" + "'", str14, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-60506355600000L) + "'", long15 == (-60506355600000L));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test1242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1242");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(35, 100);
        org.jfree.data.time.Week week5 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod6 = week5.previous();
        int int7 = week5.getYearValue();
        java.util.Date date8 = week5.getEnd();
        long long9 = week5.getMiddleMillisecond();
        org.jfree.data.time.Week week12 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod13 = week12.next();
        int int14 = week12.getYearValue();
        java.util.TimeZone timeZone15 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int16 = week12.compareTo((java.lang.Object) timeZone15);
        int int17 = week12.getYearValue();
        int int19 = week12.compareTo((java.lang.Object) 9);
        java.util.Date date20 = week12.getStart();
        boolean boolean21 = week5.equals((java.lang.Object) date20);
        java.util.Date date22 = week5.getEnd();
        boolean boolean23 = week2.equals((java.lang.Object) week5);
        java.util.Date date24 = week2.getEnd();
        org.jfree.data.time.Week week27 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod28 = week27.next();
        java.lang.Class<?> wildcardClass29 = week27.getClass();
        java.lang.Class class30 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass29);
        org.jfree.data.time.Week week33 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date34 = week33.getStart();
        java.lang.Class class35 = null;
        java.util.Date date36 = null;
        java.util.TimeZone timeZone37 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod38 = org.jfree.data.time.RegularTimePeriod.createInstance(class35, date36, timeZone37);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod39 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass29, date34, timeZone37);
        org.jfree.data.time.Week week40 = new org.jfree.data.time.Week(date34);
        long long41 = week40.getSerialIndex();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod42 = week40.next();
        java.lang.Class<?> wildcardClass43 = regularTimePeriod42.getClass();
        org.jfree.data.time.Week week46 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod47 = week46.next();
        int int48 = week46.getYearValue();
        java.util.TimeZone timeZone49 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int50 = week46.compareTo((java.lang.Object) timeZone49);
        int int51 = week46.getYearValue();
        int int53 = week46.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod54 = week46.previous();
        int int55 = week46.getYearValue();
        long long56 = week46.getLastMillisecond();
        org.jfree.data.time.Week week59 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod60 = week59.next();
        java.lang.Class<?> wildcardClass61 = week59.getClass();
        java.lang.Class class62 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass61);
        boolean boolean63 = week46.equals((java.lang.Object) wildcardClass61);
        int int64 = week46.getYearValue();
        java.lang.Object obj65 = null;
        int int66 = week46.compareTo(obj65);
        long long67 = week46.getSerialIndex();
        java.util.Date date68 = week46.getEnd();
        org.jfree.data.time.Week week71 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str72 = week71.toString();
        long long73 = week71.getMiddleMillisecond();
        long long74 = week71.getLastMillisecond();
        long long75 = week71.getFirstMillisecond();
        java.util.Date date76 = week71.getStart();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod77 = week71.next();
        java.util.Date date78 = week71.getEnd();
        java.util.Date date79 = week71.getStart();
        java.lang.Class class80 = null;
        java.util.Date date81 = null;
        java.util.TimeZone timeZone82 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod83 = org.jfree.data.time.RegularTimePeriod.createInstance(class80, date81, timeZone82);
        org.jfree.data.time.Week week84 = new org.jfree.data.time.Week(date79, timeZone82);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod85 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass43, date68, timeZone82);
        org.jfree.data.time.Week week86 = new org.jfree.data.time.Week(date24, timeZone82);
        org.junit.Assert.assertNotNull(regularTimePeriod6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-60506053200001L) + "'", long9 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 52 + "'", int14 == 52);
        org.junit.Assert.assertNotNull(timeZone15);
// flaky:         org.junit.Assert.assertEquals(timeZone15.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 52 + "'", int17 == 52);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Sat Aug 29 23:59:59 CET 100");
        org.junit.Assert.assertNotNull(regularTimePeriod28);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(class30);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone37);
// flaky:         org.junit.Assert.assertEquals(timeZone37.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod38);
        org.junit.Assert.assertNotNull(regularTimePeriod39);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 5150L + "'", long41 == 5150L);
        org.junit.Assert.assertNotNull(regularTimePeriod42);
        org.junit.Assert.assertNotNull(wildcardClass43);
        org.junit.Assert.assertNotNull(regularTimePeriod47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 52 + "'", int48 == 52);
        org.junit.Assert.assertNotNull(timeZone49);
// flaky:         org.junit.Assert.assertEquals(timeZone49.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 52 + "'", int51 == 52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 52 + "'", int55 == 52);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + (-60505750800001L) + "'", long56 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod60);
        org.junit.Assert.assertNotNull(wildcardClass61);
        org.junit.Assert.assertNotNull(class62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 52 + "'", int64 == 52);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 2791L + "'", long67 == 2791L);
        org.junit.Assert.assertNotNull(date68);
        org.junit.Assert.assertEquals(date68.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "Week 35, 52" + "'", str72, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + (-60506053200001L) + "'", long73 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + (-60505750800001L) + "'", long74 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + (-60506355600000L) + "'", long75 == (-60506355600000L));
        org.junit.Assert.assertNotNull(date76);
        org.junit.Assert.assertEquals(date76.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod77);
        org.junit.Assert.assertNotNull(date78);
        org.junit.Assert.assertEquals(date78.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date79);
        org.junit.Assert.assertEquals(date79.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(timeZone82);
// flaky:         org.junit.Assert.assertEquals(timeZone82.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod83);
        org.junit.Assert.assertNotNull(regularTimePeriod85);
    }

    @Test
    public void test1243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1243");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) (byte) 1, (int) (byte) 0);
        long long3 = week2.getFirstMillisecond();
        long long4 = week2.getMiddleMillisecond();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-62167741200000L) + "'", long3 == (-62167741200000L));
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-62167438800001L) + "'", long4 == (-62167438800001L));
    }

    @Test
    public void test1244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1244");
        org.jfree.data.time.Week week4 = new org.jfree.data.time.Week();
        long long5 = week4.getFirstMillisecond();
        org.jfree.data.time.Year year6 = week4.getYear();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week(52, year6);
        java.util.Date date8 = year6.getStart();
        org.jfree.data.time.Week week9 = new org.jfree.data.time.Week(52, year6);
        org.jfree.data.time.Week week10 = new org.jfree.data.time.Week(9, year6);
        org.jfree.data.time.Week week11 = new org.jfree.data.time.Week(35, year6);
        java.util.Calendar calendar12 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long13 = week11.getLastMillisecond(calendar12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1637449200000L + "'", long5 == 1637449200000L);
        org.junit.Assert.assertNotNull(year6);
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Fri Jan 01 00:00:00 CET 2021");
    }

    @Test
    public void test1245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1245");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.previous();
        int int4 = week2.getYearValue();
        java.lang.String str5 = week2.toString();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod6 = week2.previous();
        java.util.Date date7 = week2.getEnd();
        org.jfree.data.time.Week week10 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod11 = week10.next();
        java.lang.Class<?> wildcardClass12 = week10.getClass();
        java.lang.Class class13 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass12);
        org.jfree.data.time.Week week16 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date17 = week16.getStart();
        java.lang.Class class18 = null;
        java.util.Date date19 = null;
        java.util.TimeZone timeZone20 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod21 = org.jfree.data.time.RegularTimePeriod.createInstance(class18, date19, timeZone20);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod22 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass12, date17, timeZone20);
        org.jfree.data.time.Week week25 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date26 = week25.getStart();
        org.jfree.data.time.Week week27 = new org.jfree.data.time.Week(date26);
        java.util.TimeZone timeZone28 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod29 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass12, date26, timeZone28);
        org.jfree.data.time.Week week30 = new org.jfree.data.time.Week(date7, timeZone28);
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Week 35, 52" + "'", str5, "Week 35, 52");
        org.junit.Assert.assertNotNull(regularTimePeriod6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod11);
        org.junit.Assert.assertNotNull(wildcardClass12);
        org.junit.Assert.assertNotNull(class13);
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone20);
// flaky:         org.junit.Assert.assertEquals(timeZone20.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod21);
        org.junit.Assert.assertNotNull(regularTimePeriod22);
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone28);
// flaky:         org.junit.Assert.assertEquals(timeZone28.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNotNull(regularTimePeriod29);
    }

    @Test
    public void test1246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1246");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.next();
        java.util.Date date6 = week2.getEnd();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week(date6);
        long long8 = week7.getLastMillisecond();
        java.util.Date date9 = week7.getEnd();
        org.jfree.data.time.Week week10 = new org.jfree.data.time.Week(date9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod11 = week10.next();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod12 = week10.next();
        java.util.Date date13 = week10.getStart();
        int int14 = week10.getYearValue();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-60505750800001L) + "'", long8 == (-60505750800001L));
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod11);
        org.junit.Assert.assertNotNull(regularTimePeriod12);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 52 + "'", int14 == 52);
    }

    @Test
    public void test1247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1247");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        long long5 = week2.getLastMillisecond();
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod9 = week8.next();
        java.lang.Class<?> wildcardClass10 = week8.getClass();
        java.lang.Class class11 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass10);
        int int12 = week2.compareTo((java.lang.Object) wildcardClass10);
        java.lang.Class class13 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass10);
        java.lang.Class class14 = org.jfree.data.time.RegularTimePeriod.downsize(class13);
        java.lang.Class class15 = org.jfree.data.time.RegularTimePeriod.downsize(class13);
        java.lang.Class class16 = org.jfree.data.time.RegularTimePeriod.downsize(class15);
        java.lang.Class class17 = org.jfree.data.time.RegularTimePeriod.downsize(class15);
        org.jfree.data.time.Week week20 = new org.jfree.data.time.Week((int) '4', (int) ' ');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod21 = week20.previous();
        int int22 = week20.getWeek();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod23 = week20.next();
        java.util.Date date24 = regularTimePeriod23.getEnd();
        java.util.TimeZone timeZone25 = null;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod26 = org.jfree.data.time.RegularTimePeriod.createInstance(class15, date24, timeZone25);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-60505750800001L) + "'", long5 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod9);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNotNull(class11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(class13);
        org.junit.Assert.assertNotNull(class14);
        org.junit.Assert.assertNotNull(class15);
        org.junit.Assert.assertNotNull(class16);
        org.junit.Assert.assertNotNull(class17);
        org.junit.Assert.assertNotNull(regularTimePeriod21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 52 + "'", int22 == 52);
        org.junit.Assert.assertNotNull(regularTimePeriod23);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Sat Jan 03 23:59:59 CET 33");
        org.junit.Assert.assertNull(regularTimePeriod26);
    }

    @Test
    public void test1248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1248");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getWeek();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod8 = week2.next();
        long long9 = week2.getSerialIndex();
        org.jfree.data.time.Week week12 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str13 = week12.toString();
        long long14 = week12.getMiddleMillisecond();
        long long15 = week12.getLastMillisecond();
        org.jfree.data.time.Week week18 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod19 = week18.next();
        java.lang.Class<?> wildcardClass20 = week18.getClass();
        java.lang.Class class21 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass20);
        int int22 = week12.compareTo((java.lang.Object) wildcardClass20);
        long long23 = week12.getSerialIndex();
        // The following exception was thrown during execution in test generation
        try {
            int int24 = week2.compareTo((java.lang.Object) week12);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Year constructor: year (52) outside valid range.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 35 + "'", int7 == 35);
        org.junit.Assert.assertNotNull(regularTimePeriod8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 2791L + "'", long9 == 2791L);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Week 35, 52" + "'", str13, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-60506053200001L) + "'", long14 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-60505750800001L) + "'", long15 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertNotNull(class21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 2791L + "'", long23 == 2791L);
    }

    @Test
    public void test1249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1249");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week();
        long long3 = week2.getFirstMillisecond();
        org.jfree.data.time.Year year4 = week2.getYear();
        org.jfree.data.time.Week week5 = new org.jfree.data.time.Week((int) (byte) 100, year4);
        long long6 = year4.getMiddleMillisecond();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week(100, year4);
        long long8 = week7.getLastMillisecond();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1637449200000L + "'", long3 == 1637449200000L);
        org.junit.Assert.assertNotNull(year4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1625223599999L + "'", long6 == 1625223599999L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1669503599999L + "'", long8 == 1669503599999L);
    }

    @Test
    public void test1250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1250");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, (int) 'a');
        org.jfree.data.time.Week week5 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod6 = week5.next();
        long long7 = week5.getMiddleMillisecond();
        java.lang.String str8 = week5.toString();
        boolean boolean9 = week2.equals((java.lang.Object) week5);
        java.util.Date date10 = week2.getStart();
        java.util.Date date11 = week2.getStart();
        long long12 = week2.getSerialIndex();
        long long13 = week2.getSerialIndex();
        long long14 = week2.getLastMillisecond();
        org.junit.Assert.assertNotNull(regularTimePeriod6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-60506053200001L) + "'", long7 == (-60506053200001L));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Week 35, 52" + "'", str8, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 5150L + "'", long12 == 5150L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 5150L + "'", long13 == 5150L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-59100800400001L) + "'", long14 == (-59100800400001L));
    }

    @Test
    public void test1251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1251");
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Week week1 = org.jfree.data.time.Week.parseWeek("Week 8, 32");
            org.junit.Assert.fail("Expected exception of type org.jfree.data.time.TimePeriodFormatException; message: Can't evaluate the year.");
        } catch (org.jfree.data.time.TimePeriodFormatException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1252");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.next();
        int int6 = week2.getYearValue();
        java.util.Calendar calendar7 = null;
        // The following exception was thrown during execution in test generation
        try {
            week2.peg(calendar7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 52 + "'", int6 == 52);
    }

    @Test
    public void test1253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1253");
        org.jfree.data.time.Week week3 = new org.jfree.data.time.Week();
        long long4 = week3.getFirstMillisecond();
        org.jfree.data.time.Year year5 = week3.getYear();
        org.jfree.data.time.Week week6 = new org.jfree.data.time.Week(0, year5);
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week(53, year5);
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week((int) '4', year5);
        int int9 = week8.getWeek();
        long long10 = week8.getSerialIndex();
        org.jfree.data.time.Year year11 = week8.getYear();
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1637449200000L + "'", long4 == 1637449200000L);
        org.junit.Assert.assertNotNull(year5);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 52 + "'", int9 == 52);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 107165L + "'", long10 == 107165L);
        org.junit.Assert.assertNotNull(year11);
    }

    @Test
    public void test1254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1254");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date3 = week2.getStart();
        org.jfree.data.time.Week week4 = new org.jfree.data.time.Week(date3);
        long long5 = week4.getSerialIndex();
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str9 = week8.toString();
        long long10 = week8.getSerialIndex();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod11 = week8.next();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod12 = week8.previous();
        java.lang.Class<?> wildcardClass13 = week8.getClass();
        java.lang.Class class14 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass13);
        boolean boolean15 = week4.equals((java.lang.Object) wildcardClass13);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod16 = week4.previous();
        java.util.Calendar calendar17 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long18 = week4.getLastMillisecond(calendar17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 5150L + "'", long5 == 5150L);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Week 35, 52" + "'", str9, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 2791L + "'", long10 == 2791L);
        org.junit.Assert.assertNotNull(regularTimePeriod11);
        org.junit.Assert.assertNotNull(regularTimePeriod12);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(class14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(regularTimePeriod16);
    }

    @Test
    public void test1255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1255");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.previous();
        int int4 = week2.getYearValue();
        long long5 = week2.getSerialIndex();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod6 = week2.next();
        java.util.Date date7 = regularTimePeriod6.getEnd();
        java.util.Date date8 = regularTimePeriod6.getStart();
        org.jfree.data.time.Week week9 = new org.jfree.data.time.Week(date8);
        org.jfree.data.time.Week week12 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod13 = week12.next();
        java.lang.Class<?> wildcardClass14 = week12.getClass();
        java.lang.Class class15 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass14);
        java.lang.Class class16 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass14);
        int int17 = week9.compareTo((java.lang.Object) wildcardClass14);
        org.jfree.data.time.Week week20 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod21 = week20.next();
        int int22 = week20.getYearValue();
        java.util.TimeZone timeZone23 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int24 = week20.compareTo((java.lang.Object) timeZone23);
        int int25 = week20.getYearValue();
        int int27 = week20.compareTo((java.lang.Object) 9);
        int int28 = week20.getYearValue();
        int int29 = week20.getYearValue();
        int int30 = week20.getYearValue();
        org.jfree.data.time.Week week33 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str34 = week33.toString();
        long long35 = week33.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod36 = week33.next();
        java.util.Date date37 = week33.getEnd();
        org.jfree.data.time.Week week38 = new org.jfree.data.time.Week(date37);
        long long39 = week38.getLastMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod40 = week38.next();
        boolean boolean41 = week20.equals((java.lang.Object) regularTimePeriod40);
        org.jfree.data.time.Week week43 = new org.jfree.data.time.Week();
        long long44 = week43.getFirstMillisecond();
        org.jfree.data.time.Year year45 = week43.getYear();
        org.jfree.data.time.Week week46 = new org.jfree.data.time.Week(0, year45);
        java.util.Date date47 = year45.getStart();
        int int48 = week20.compareTo((java.lang.Object) year45);
        boolean boolean49 = week9.equals((java.lang.Object) year45);
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 2791L + "'", long5 == 2791L);
        org.junit.Assert.assertNotNull(regularTimePeriod6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Sat Sep 02 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Sun Aug 27 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod13);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(class15);
        org.junit.Assert.assertNotNull(class16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 52 + "'", int22 == 52);
        org.junit.Assert.assertNotNull(timeZone23);
// flaky:         org.junit.Assert.assertEquals(timeZone23.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 52 + "'", int25 == 52);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 52 + "'", int28 == 52);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 52 + "'", int29 == 52);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 52 + "'", int30 == 52);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Week 35, 52" + "'", str34, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + (-60506053200001L) + "'", long35 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod36);
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + (-60505750800001L) + "'", long39 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 1637449200000L + "'", long44 == 1637449200000L);
        org.junit.Assert.assertNotNull(year45);
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Fri Jan 01 00:00:00 CET 2021");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test1256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1256");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        int int10 = week2.getYearValue();
        long long11 = week2.getLastMillisecond();
        long long12 = week2.getSerialIndex();
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Year year13 = week2.getYear();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Year constructor: year (52) outside valid range.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 52 + "'", int10 == 52);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-60505750800001L) + "'", long11 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 2791L + "'", long12 == 2791L);
    }

    @Test
    public void test1257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1257");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(3, 0);
    }

    @Test
    public void test1258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1258");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod8 = week2.next();
        java.lang.String str9 = week2.toString();
        int int10 = week2.getWeek();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertNotNull(regularTimePeriod8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Week 35, 52" + "'", str9, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 35 + "'", int10 == 35);
    }

    @Test
    public void test1259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1259");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        int int11 = week2.getYearValue();
        long long12 = week2.getLastMillisecond();
        org.jfree.data.time.Week week15 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod16 = week15.next();
        java.lang.Class<?> wildcardClass17 = week15.getClass();
        java.lang.Class class18 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass17);
        boolean boolean19 = week2.equals((java.lang.Object) wildcardClass17);
        int int20 = week2.getYearValue();
        org.jfree.data.time.Week week23 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod24 = week23.next();
        int int25 = week23.getYearValue();
        java.util.TimeZone timeZone26 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int27 = week23.compareTo((java.lang.Object) timeZone26);
        int int28 = week23.getYearValue();
        int int30 = week23.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod31 = week23.previous();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod32 = week23.next();
        org.jfree.data.time.Week week35 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod36 = week35.next();
        java.lang.Class<?> wildcardClass37 = week35.getClass();
        java.lang.Class class38 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass37);
        java.lang.Class class39 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass37);
        boolean boolean40 = week23.equals((java.lang.Object) wildcardClass37);
        long long41 = week23.getSerialIndex();
        java.util.Date date42 = week23.getEnd();
        boolean boolean43 = week2.equals((java.lang.Object) date42);
        org.jfree.data.time.Week week46 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod47 = week46.previous();
        java.util.Date date48 = week46.getEnd();
        org.jfree.data.time.Week week51 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date52 = week51.getStart();
        java.util.Date date53 = week51.getEnd();
        java.util.Date date54 = week51.getStart();
        org.jfree.data.time.Week week57 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date58 = week57.getStart();
        org.jfree.data.time.Week week61 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod62 = week61.next();
        int int63 = week61.getYearValue();
        java.util.TimeZone timeZone64 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int65 = week61.compareTo((java.lang.Object) timeZone64);
        org.jfree.data.time.Week week66 = new org.jfree.data.time.Week(date58, timeZone64);
        org.jfree.data.time.Week week67 = new org.jfree.data.time.Week(date54, timeZone64);
        org.jfree.data.time.Week week68 = new org.jfree.data.time.Week(date48, timeZone64);
        org.jfree.data.time.Week week69 = new org.jfree.data.time.Week(date42, timeZone64);
        java.util.Calendar calendar70 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long71 = week69.getLastMillisecond(calendar70);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-60505750800001L) + "'", long12 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(class18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 52 + "'", int20 == 52);
        org.junit.Assert.assertNotNull(regularTimePeriod24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 52 + "'", int25 == 52);
        org.junit.Assert.assertNotNull(timeZone26);
// flaky:         org.junit.Assert.assertEquals(timeZone26.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 52 + "'", int28 == 52);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod31);
        org.junit.Assert.assertNotNull(regularTimePeriod32);
        org.junit.Assert.assertNotNull(regularTimePeriod36);
        org.junit.Assert.assertNotNull(wildcardClass37);
        org.junit.Assert.assertNotNull(class38);
        org.junit.Assert.assertNotNull(class39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 2791L + "'", long41 == 2791L);
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(regularTimePeriod47);
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date52);
        org.junit.Assert.assertEquals(date52.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date58);
        org.junit.Assert.assertEquals(date58.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 52 + "'", int63 == 52);
        org.junit.Assert.assertNotNull(timeZone64);
// flaky:         org.junit.Assert.assertEquals(timeZone64.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
    }

    @Test
    public void test1260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1260");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(97, (int) (byte) 10);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getWeek();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod8 = week7.next();
        int int9 = week7.getYearValue();
        java.util.TimeZone timeZone10 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int11 = week7.compareTo((java.lang.Object) timeZone10);
        int int12 = week7.getYearValue();
        int int14 = week7.compareTo((java.lang.Object) 9);
        java.util.Date date15 = week7.getStart();
        org.jfree.data.time.Week week16 = new org.jfree.data.time.Week(date15);
        org.jfree.data.time.Week week17 = new org.jfree.data.time.Week(date15);
        int int18 = week2.compareTo((java.lang.Object) date15);
        org.jfree.data.time.Week week21 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str22 = week21.toString();
        long long23 = week21.getMiddleMillisecond();
        long long24 = week21.getLastMillisecond();
        org.jfree.data.time.Week week27 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod28 = week27.next();
        java.lang.Class<?> wildcardClass29 = week27.getClass();
        java.lang.Class class30 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass29);
        int int31 = week21.compareTo((java.lang.Object) wildcardClass29);
        java.lang.Class class32 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass29);
        java.lang.Class class33 = org.jfree.data.time.RegularTimePeriod.downsize(class32);
        java.lang.Class class34 = org.jfree.data.time.RegularTimePeriod.downsize(class32);
        java.lang.Class class35 = org.jfree.data.time.RegularTimePeriod.downsize(class34);
        org.jfree.data.time.Week week38 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod39 = week38.next();
        java.lang.Class<?> wildcardClass40 = week38.getClass();
        java.lang.Class class41 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass40);
        org.jfree.data.time.Week week44 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date45 = week44.getStart();
        java.lang.Class class46 = null;
        java.util.Date date47 = null;
        java.util.TimeZone timeZone48 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod49 = org.jfree.data.time.RegularTimePeriod.createInstance(class46, date47, timeZone48);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod50 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass40, date45, timeZone48);
        java.lang.Class class51 = null;
        org.jfree.data.time.Week week54 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod55 = week54.next();
        int int56 = week54.getYearValue();
        java.util.TimeZone timeZone57 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int58 = week54.compareTo((java.lang.Object) timeZone57);
        int int59 = week54.getYearValue();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod60 = week54.previous();
        java.util.Date date61 = regularTimePeriod60.getEnd();
        org.jfree.data.time.Week week64 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod65 = week64.next();
        java.lang.Class<?> wildcardClass66 = week64.getClass();
        java.lang.Class class67 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass66);
        org.jfree.data.time.Week week70 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date71 = week70.getStart();
        java.lang.Class class72 = null;
        java.util.Date date73 = null;
        java.util.TimeZone timeZone74 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod75 = org.jfree.data.time.RegularTimePeriod.createInstance(class72, date73, timeZone74);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod76 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass66, date71, timeZone74);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod77 = org.jfree.data.time.RegularTimePeriod.createInstance(class51, date61, timeZone74);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod78 = org.jfree.data.time.RegularTimePeriod.createInstance(class35, date45, timeZone74);
        java.util.Locale locale79 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Week week80 = new org.jfree.data.time.Week(date15, timeZone74, locale79);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'locale' argument.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 97 + "'", int4 == 97);
        org.junit.Assert.assertNotNull(regularTimePeriod8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 52 + "'", int9 == 52);
        org.junit.Assert.assertNotNull(timeZone10);
// flaky:         org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Week 35, 52" + "'", str22, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-60506053200001L) + "'", long23 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-60505750800001L) + "'", long24 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod28);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(class30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(class32);
        org.junit.Assert.assertNotNull(class33);
        org.junit.Assert.assertNotNull(class34);
        org.junit.Assert.assertNotNull(class35);
        org.junit.Assert.assertNotNull(regularTimePeriod39);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertNotNull(class41);
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone48);
// flaky:         org.junit.Assert.assertEquals(timeZone48.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod49);
        org.junit.Assert.assertNotNull(regularTimePeriod50);
        org.junit.Assert.assertNotNull(regularTimePeriod55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 52 + "'", int56 == 52);
        org.junit.Assert.assertNotNull(timeZone57);
// flaky:         org.junit.Assert.assertEquals(timeZone57.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 52 + "'", int59 == 52);
        org.junit.Assert.assertNotNull(regularTimePeriod60);
        org.junit.Assert.assertNotNull(date61);
        org.junit.Assert.assertEquals(date61.toString(), "Sat Aug 19 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod65);
        org.junit.Assert.assertNotNull(wildcardClass66);
        org.junit.Assert.assertNotNull(class67);
        org.junit.Assert.assertNotNull(date71);
        org.junit.Assert.assertEquals(date71.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone74);
// flaky:         org.junit.Assert.assertEquals(timeZone74.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod75);
        org.junit.Assert.assertNotNull(regularTimePeriod76);
        org.junit.Assert.assertNull(regularTimePeriod77);
        org.junit.Assert.assertNull(regularTimePeriod78);
    }

    @Test
    public void test1261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1261");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        long long5 = week2.getLastMillisecond();
        boolean boolean7 = week2.equals((java.lang.Object) (short) 10);
        java.lang.String str8 = week2.toString();
        java.util.Calendar calendar9 = null;
        // The following exception was thrown during execution in test generation
        try {
            week2.peg(calendar9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-60505750800001L) + "'", long5 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Week 35, 52" + "'", str8, "Week 35, 52");
    }

    @Test
    public void test1262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1262");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.next();
        java.util.Date date6 = week2.getEnd();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week(date6);
        java.util.Date date8 = week7.getStart();
        long long9 = week7.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week7.previous();
        long long11 = week7.getMiddleMillisecond();
        java.util.Date date12 = week7.getStart();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-60506053200001L) + "'", long9 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-60506053200001L) + "'", long11 == (-60506053200001L));
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Sun Aug 20 00:00:00 CET 52");
    }

    @Test
    public void test1263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1263");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date3 = week2.getStart();
        org.jfree.data.time.Week week6 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod7 = week6.next();
        int int8 = week6.getYearValue();
        java.util.TimeZone timeZone9 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int10 = week6.compareTo((java.lang.Object) timeZone9);
        org.jfree.data.time.Week week11 = new org.jfree.data.time.Week(date3, timeZone9);
        org.jfree.data.time.Week week12 = new org.jfree.data.time.Week(date3);
        org.jfree.data.time.Week week15 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod16 = week15.next();
        int int17 = week15.getYearValue();
        java.util.TimeZone timeZone18 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int19 = week15.compareTo((java.lang.Object) timeZone18);
        int int20 = week15.getYearValue();
        long long21 = week15.getMiddleMillisecond();
        java.lang.Class<?> wildcardClass22 = week15.getClass();
        org.jfree.data.time.Week week25 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date26 = week25.getStart();
        org.jfree.data.time.Week week29 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod30 = week29.next();
        int int31 = week29.getYearValue();
        java.util.TimeZone timeZone32 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int33 = week29.compareTo((java.lang.Object) timeZone32);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod34 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass22, date26, timeZone32);
        org.jfree.data.time.Week week35 = new org.jfree.data.time.Week(date26);
        org.jfree.data.time.Week week38 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod39 = week38.next();
        int int40 = week38.getYearValue();
        java.util.TimeZone timeZone41 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int42 = week38.compareTo((java.lang.Object) timeZone41);
        org.jfree.data.time.Week week43 = new org.jfree.data.time.Week(date26, timeZone41);
        int int44 = week12.compareTo((java.lang.Object) timeZone41);
        java.lang.Class<?> wildcardClass45 = week12.getClass();
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 52 + "'", int8 == 52);
        org.junit.Assert.assertNotNull(timeZone9);
// flaky:         org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 52 + "'", int17 == 52);
        org.junit.Assert.assertNotNull(timeZone18);
// flaky:         org.junit.Assert.assertEquals(timeZone18.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 52 + "'", int20 == 52);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-60506053200001L) + "'", long21 == (-60506053200001L));
        org.junit.Assert.assertNotNull(wildcardClass22);
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 52 + "'", int31 == 52);
        org.junit.Assert.assertNotNull(timeZone32);
// flaky:         org.junit.Assert.assertEquals(timeZone32.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod34);
        org.junit.Assert.assertNotNull(regularTimePeriod39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 52 + "'", int40 == 52);
        org.junit.Assert.assertNotNull(timeZone41);
// flaky:         org.junit.Assert.assertEquals(timeZone41.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(wildcardClass45);
    }

    @Test
    public void test1264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1264");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod11 = week2.next();
        java.util.Date date12 = week2.getStart();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod13 = week2.previous();
        java.lang.Class<?> wildcardClass14 = regularTimePeriod13.getClass();
        java.lang.Class class15 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass14);
        java.lang.Class class16 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass14);
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertNotNull(regularTimePeriod11);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod13);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(class15);
        org.junit.Assert.assertNotNull(class16);
    }

    @Test
    public void test1265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1265");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.next();
        java.util.Date date6 = week2.getEnd();
        org.jfree.data.time.Week week9 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date10 = week9.getStart();
        org.jfree.data.time.Week week11 = new org.jfree.data.time.Week(date10);
        java.util.Date date12 = week11.getStart();
        org.jfree.data.time.Week week15 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod16 = week15.next();
        int int17 = week15.getYearValue();
        java.util.TimeZone timeZone18 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int19 = week15.compareTo((java.lang.Object) timeZone18);
        int int20 = week15.getYearValue();
        long long21 = week15.getMiddleMillisecond();
        java.lang.Class<?> wildcardClass22 = week15.getClass();
        org.jfree.data.time.Week week25 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date26 = week25.getStart();
        org.jfree.data.time.Week week29 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod30 = week29.next();
        int int31 = week29.getYearValue();
        java.util.TimeZone timeZone32 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int33 = week29.compareTo((java.lang.Object) timeZone32);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod34 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass22, date26, timeZone32);
        org.jfree.data.time.Week week35 = new org.jfree.data.time.Week(date12, timeZone32);
        org.jfree.data.time.Week week36 = new org.jfree.data.time.Week(date6, timeZone32);
        java.util.Date date37 = week36.getEnd();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 52 + "'", int17 == 52);
        org.junit.Assert.assertNotNull(timeZone18);
// flaky:         org.junit.Assert.assertEquals(timeZone18.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 52 + "'", int20 == 52);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-60506053200001L) + "'", long21 == (-60506053200001L));
        org.junit.Assert.assertNotNull(wildcardClass22);
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 52 + "'", int31 == 52);
        org.junit.Assert.assertNotNull(timeZone32);
// flaky:         org.junit.Assert.assertEquals(timeZone32.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod34);
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Sat Aug 26 23:59:59 CET 52");
    }

    @Test
    public void test1266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1266");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '4', (int) ' ');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.previous();
        int int4 = week2.getWeek();
        long long5 = week2.getSerialIndex();
        int int6 = week2.getWeek();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod7 = week2.next();
        java.util.Date date8 = week2.getStart();
        java.util.Calendar calendar9 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long10 = week2.getFirstMillisecond(calendar9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1748L + "'", long5 == 1748L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 52 + "'", int6 == 52);
        org.junit.Assert.assertNotNull(regularTimePeriod7);
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Sun Dec 21 00:00:00 CET 32");
    }

    @Test
    public void test1267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1267");
        org.jfree.data.time.Week week3 = new org.jfree.data.time.Week();
        long long4 = week3.getFirstMillisecond();
        org.jfree.data.time.Year year5 = week3.getYear();
        org.jfree.data.time.Week week6 = new org.jfree.data.time.Week((int) (byte) 100, year5);
        long long7 = year5.getMiddleMillisecond();
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week(6, year5);
        org.jfree.data.time.Week week9 = new org.jfree.data.time.Week((-2019), year5);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1637449200000L + "'", long4 == 1637449200000L);
        org.junit.Assert.assertNotNull(year5);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1625223599999L + "'", long7 == 1625223599999L);
    }

    @Test
    public void test1268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1268");
        org.jfree.data.time.Week week4 = new org.jfree.data.time.Week();
        long long5 = week4.getFirstMillisecond();
        org.jfree.data.time.Year year6 = week4.getYear();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week((int) (byte) 100, year6);
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week(100, year6);
        org.jfree.data.time.Week week9 = new org.jfree.data.time.Week((int) (short) 0, year6);
        org.jfree.data.time.Week week10 = new org.jfree.data.time.Week(6, year6);
        int int11 = week10.getWeek();
        long long12 = week10.getFirstMillisecond();
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1637449200000L + "'", long5 == 1637449200000L);
        org.junit.Assert.assertNotNull(year6);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 6 + "'", int11 == 6);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1612047600000L + "'", long12 == 1612047600000L);
    }

    @Test
    public void test1269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1269");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) (short) 100, (int) (byte) 100);
        long long3 = week2.getLastMillisecond();
        int int4 = week2.getYearValue();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-58951414800001L) + "'", long3 == (-58951414800001L));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 100 + "'", int4 == 100);
    }

    @Test
    public void test1270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1270");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getSerialIndex();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.next();
        java.util.Date date6 = regularTimePeriod5.getEnd();
        org.jfree.data.time.Week week9 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date10 = week9.getStart();
        org.jfree.data.time.Week week13 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod14 = week13.next();
        int int15 = week13.getYearValue();
        java.util.TimeZone timeZone16 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int17 = week13.compareTo((java.lang.Object) timeZone16);
        org.jfree.data.time.Week week18 = new org.jfree.data.time.Week(date10, timeZone16);
        org.jfree.data.time.Week week19 = new org.jfree.data.time.Week(date6, timeZone16);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod20 = week19.next();
        java.lang.String str21 = week19.toString();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod22 = week19.next();
        java.util.Calendar calendar23 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long24 = week19.getFirstMillisecond(calendar23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 2791L + "'", long4 == 2791L);
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Sep 02 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 52 + "'", int15 == 52);
        org.junit.Assert.assertNotNull(timeZone16);
// flaky:         org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Week 36, 52" + "'", str21, "Week 36, 52");
        org.junit.Assert.assertNotNull(regularTimePeriod22);
    }

    @Test
    public void test1271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1271");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(32, (int) (short) 100);
        long long3 = week2.getLastMillisecond();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-58992541200001L) + "'", long3 == (-58992541200001L));
    }

    @Test
    public void test1272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1272");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getSerialIndex();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.next();
        java.util.Date date6 = regularTimePeriod5.getEnd();
        org.jfree.data.time.Week week9 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date10 = week9.getStart();
        org.jfree.data.time.Week week13 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod14 = week13.next();
        int int15 = week13.getYearValue();
        java.util.TimeZone timeZone16 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int17 = week13.compareTo((java.lang.Object) timeZone16);
        org.jfree.data.time.Week week18 = new org.jfree.data.time.Week(date10, timeZone16);
        org.jfree.data.time.Week week19 = new org.jfree.data.time.Week(date6, timeZone16);
        org.jfree.data.time.Week week22 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str23 = week22.toString();
        long long24 = week22.getSerialIndex();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod25 = week22.next();
        java.util.Date date26 = regularTimePeriod25.getEnd();
        org.jfree.data.time.Week week29 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date30 = week29.getStart();
        org.jfree.data.time.Week week33 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod34 = week33.next();
        int int35 = week33.getYearValue();
        java.util.TimeZone timeZone36 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int37 = week33.compareTo((java.lang.Object) timeZone36);
        org.jfree.data.time.Week week38 = new org.jfree.data.time.Week(date30, timeZone36);
        org.jfree.data.time.Week week39 = new org.jfree.data.time.Week(date26, timeZone36);
        org.jfree.data.time.Week week40 = new org.jfree.data.time.Week(date6, timeZone36);
        int int41 = week40.getYearValue();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 2791L + "'", long4 == 2791L);
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Sep 02 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 52 + "'", int15 == 52);
        org.junit.Assert.assertNotNull(timeZone16);
// flaky:         org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Week 35, 52" + "'", str23, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 2791L + "'", long24 == 2791L);
        org.junit.Assert.assertNotNull(regularTimePeriod25);
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Sat Sep 02 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 52 + "'", int35 == 52);
        org.junit.Assert.assertNotNull(timeZone36);
// flaky:         org.junit.Assert.assertEquals(timeZone36.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 52 + "'", int41 == 52);
    }

    @Test
    public void test1273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1273");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        int int11 = week2.getYearValue();
        long long12 = week2.getLastMillisecond();
        int int13 = week2.getWeek();
        int int15 = week2.compareTo((java.lang.Object) 0);
        int int16 = week2.getWeek();
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Year year17 = week2.getYear();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Year constructor: year (52) outside valid range.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-60505750800001L) + "'", long12 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 35 + "'", int16 == 35);
    }

    @Test
    public void test1274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1274");
        java.lang.Class class0 = null;
        org.jfree.data.time.Week week3 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod4 = week3.next();
        int int5 = week3.getYearValue();
        java.util.TimeZone timeZone6 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int7 = week3.compareTo((java.lang.Object) timeZone6);
        int int8 = week3.getYearValue();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod9 = week3.previous();
        java.util.Date date10 = regularTimePeriod9.getEnd();
        org.jfree.data.time.Week week13 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod14 = week13.next();
        java.lang.Class<?> wildcardClass15 = week13.getClass();
        java.lang.Class class16 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass15);
        org.jfree.data.time.Week week19 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date20 = week19.getStart();
        java.lang.Class class21 = null;
        java.util.Date date22 = null;
        java.util.TimeZone timeZone23 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod24 = org.jfree.data.time.RegularTimePeriod.createInstance(class21, date22, timeZone23);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod25 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass15, date20, timeZone23);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod26 = org.jfree.data.time.RegularTimePeriod.createInstance(class0, date10, timeZone23);
        java.lang.Class<?> wildcardClass27 = date10.getClass();
        org.junit.Assert.assertNotNull(regularTimePeriod4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 52 + "'", int5 == 52);
        org.junit.Assert.assertNotNull(timeZone6);
// flaky:         org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 52 + "'", int8 == 52);
        org.junit.Assert.assertNotNull(regularTimePeriod9);
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sat Aug 19 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod14);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNotNull(class16);
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone23);
// flaky:         org.junit.Assert.assertEquals(timeZone23.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod24);
        org.junit.Assert.assertNotNull(regularTimePeriod25);
        org.junit.Assert.assertNull(regularTimePeriod26);
        org.junit.Assert.assertNotNull(wildcardClass27);
    }

    @Test
    public void test1275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1275");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        int int11 = week2.getYearValue();
        long long12 = week2.getLastMillisecond();
        int int13 = week2.getWeek();
        int int14 = week2.getYearValue();
        long long15 = week2.getSerialIndex();
        java.util.Date date16 = week2.getEnd();
        org.jfree.data.time.Week week17 = new org.jfree.data.time.Week(date16);
        org.jfree.data.time.Week week18 = new org.jfree.data.time.Week(date16);
        org.jfree.data.time.Week week19 = new org.jfree.data.time.Week(date16);
        long long20 = week19.getSerialIndex();
        long long21 = week19.getMiddleMillisecond();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-60505750800001L) + "'", long12 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 52 + "'", int14 == 52);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 2791L + "'", long15 == 2791L);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 2791L + "'", long20 == 2791L);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-60506053200001L) + "'", long21 == (-60506053200001L));
    }

    @Test
    public void test1276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1276");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.next();
        java.util.Date date6 = week2.getEnd();
        long long7 = week2.getLastMillisecond();
        java.util.Date date8 = week2.getEnd();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod9 = week2.next();
        int int10 = week2.getWeek();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-60505750800001L) + "'", long7 == (-60505750800001L));
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 35 + "'", int10 == 35);
    }

    @Test
    public void test1277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1277");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.next();
        java.util.Date date6 = week2.getEnd();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week(date6);
        int int8 = week7.getWeek();
        boolean boolean10 = week7.equals((java.lang.Object) 1637449200000L);
        org.jfree.data.time.Week week13 = new org.jfree.data.time.Week(9, (int) 'a');
        org.jfree.data.time.Week week16 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod17 = week16.next();
        long long18 = week16.getMiddleMillisecond();
        java.lang.String str19 = week16.toString();
        boolean boolean20 = week13.equals((java.lang.Object) week16);
        int int21 = week16.getWeek();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod22 = week16.next();
        boolean boolean23 = week7.equals((java.lang.Object) week16);
        long long24 = week16.getLastMillisecond();
        org.jfree.data.time.Week week27 = new org.jfree.data.time.Week();
        long long28 = week27.getFirstMillisecond();
        org.jfree.data.time.Year year29 = week27.getYear();
        org.jfree.data.time.Week week30 = new org.jfree.data.time.Week((int) (byte) 100, year29);
        org.jfree.data.time.Week week31 = new org.jfree.data.time.Week(100, year29);
        int int32 = week16.compareTo((java.lang.Object) week31);
        org.jfree.data.time.Week week35 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str36 = week35.toString();
        long long37 = week35.getMiddleMillisecond();
        long long38 = week35.getLastMillisecond();
        org.jfree.data.time.Week week41 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod42 = week41.next();
        java.lang.Class<?> wildcardClass43 = week41.getClass();
        java.lang.Class class44 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass43);
        int int45 = week35.compareTo((java.lang.Object) wildcardClass43);
        long long46 = week35.getMiddleMillisecond();
        java.util.Date date47 = week35.getEnd();
        int int48 = week35.getWeek();
        long long49 = week35.getLastMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod50 = week35.next();
        long long51 = week35.getFirstMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod52 = week35.next();
        java.util.Date date53 = week35.getStart();
        boolean boolean54 = week31.equals((java.lang.Object) date53);
        org.jfree.data.time.Week week55 = new org.jfree.data.time.Week(date53);
        java.lang.String str56 = week55.toString();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 35 + "'", int8 == 35);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(regularTimePeriod17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-60506053200001L) + "'", long18 == (-60506053200001L));
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Week 35, 52" + "'", str19, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 35 + "'", int21 == 35);
        org.junit.Assert.assertNotNull(regularTimePeriod22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-60505750800001L) + "'", long24 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 1637449200000L + "'", long28 == 1637449200000L);
        org.junit.Assert.assertNotNull(year29);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1969) + "'", int32 == (-1969));
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Week 35, 52" + "'", str36, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + (-60506053200001L) + "'", long37 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + (-60505750800001L) + "'", long38 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod42);
        org.junit.Assert.assertNotNull(wildcardClass43);
        org.junit.Assert.assertNotNull(class44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + (-60506053200001L) + "'", long46 == (-60506053200001L));
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 35 + "'", int48 == 35);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + (-60505750800001L) + "'", long49 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod50);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + (-60506355600000L) + "'", long51 == (-60506355600000L));
        org.junit.Assert.assertNotNull(regularTimePeriod52);
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "Week 35, 52" + "'", str56, "Week 35, 52");
    }

    @Test
    public void test1278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1278");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(52, (-1));
    }

    @Test
    public void test1279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1279");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.previous();
        int int4 = week2.getYearValue();
        java.util.Date date5 = week2.getEnd();
        long long6 = week2.getMiddleMillisecond();
        org.jfree.data.time.Week week9 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week9.next();
        int int11 = week9.getYearValue();
        java.util.TimeZone timeZone12 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int13 = week9.compareTo((java.lang.Object) timeZone12);
        int int14 = week9.getYearValue();
        int int16 = week9.compareTo((java.lang.Object) 9);
        java.util.Date date17 = week9.getStart();
        boolean boolean18 = week2.equals((java.lang.Object) date17);
        org.jfree.data.time.Week week21 = new org.jfree.data.time.Week(7, 32);
        // The following exception was thrown during execution in test generation
        try {
            int int22 = week2.compareTo((java.lang.Object) week21);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Year constructor: year (32) outside valid range.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-60506053200001L) + "'", long6 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertNotNull(timeZone12);
// flaky:         org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 52 + "'", int14 == 52);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test1280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1280");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) (byte) -1, (int) (short) 0);
        long long3 = week2.getLastMillisecond();
        long long4 = week2.getLastMillisecond();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-62168346000001L) + "'", long3 == (-62168346000001L));
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-62168346000001L) + "'", long4 == (-62168346000001L));
    }

    @Test
    public void test1281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1281");
        java.util.Date date0 = null;
        org.jfree.data.time.Week week3 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str4 = week3.toString();
        long long5 = week3.getSerialIndex();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod6 = week3.next();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod7 = week3.previous();
        java.lang.Class<?> wildcardClass8 = week3.getClass();
        java.lang.Class class9 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass8);
        java.lang.Class class10 = org.jfree.data.time.RegularTimePeriod.downsize(class9);
        java.lang.Class class11 = org.jfree.data.time.RegularTimePeriod.downsize(class10);
        org.jfree.data.time.Week week14 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date15 = week14.getStart();
        java.util.Date date16 = week14.getEnd();
        org.jfree.data.time.Week week19 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod20 = week19.next();
        java.lang.Class<?> wildcardClass21 = week19.getClass();
        java.lang.Class class22 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass21);
        org.jfree.data.time.Week week25 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date26 = week25.getStart();
        java.lang.Class class27 = null;
        java.util.Date date28 = null;
        java.util.TimeZone timeZone29 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod30 = org.jfree.data.time.RegularTimePeriod.createInstance(class27, date28, timeZone29);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod31 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass21, date26, timeZone29);
        org.jfree.data.time.Week week32 = new org.jfree.data.time.Week(date16, timeZone29);
        org.jfree.data.time.Week week33 = new org.jfree.data.time.Week(date16);
        org.jfree.data.time.Week week36 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.util.Date date37 = week36.getStart();
        int int38 = week36.getYearValue();
        java.util.Date date39 = week36.getEnd();
        org.jfree.data.time.Week week42 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod43 = week42.next();
        java.lang.Class<?> wildcardClass44 = week42.getClass();
        java.lang.Class class45 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass44);
        java.lang.Class class46 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass44);
        org.jfree.data.time.Week week49 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod50 = week49.next();
        int int51 = week49.getYearValue();
        java.util.TimeZone timeZone52 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int53 = week49.compareTo((java.lang.Object) timeZone52);
        int int54 = week49.getYearValue();
        int int56 = week49.compareTo((java.lang.Object) 9);
        java.util.Date date57 = week49.getStart();
        org.jfree.data.time.Week week58 = new org.jfree.data.time.Week(date57);
        org.jfree.data.time.Week week61 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod62 = week61.next();
        int int63 = week61.getYearValue();
        java.util.TimeZone timeZone64 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int65 = week61.compareTo((java.lang.Object) timeZone64);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod66 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass44, date57, timeZone64);
        org.jfree.data.time.Week week69 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod70 = week69.previous();
        int int71 = week69.getYearValue();
        java.util.Date date72 = week69.getStart();
        java.util.TimeZone timeZone73 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.Week week74 = new org.jfree.data.time.Week(date72, timeZone73);
        org.jfree.data.time.Week week75 = new org.jfree.data.time.Week(date57, timeZone73);
        org.jfree.data.time.Week week76 = new org.jfree.data.time.Week(date39, timeZone73);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod77 = org.jfree.data.time.RegularTimePeriod.createInstance(class10, date16, timeZone73);
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Week week78 = new org.jfree.data.time.Week(date0, timeZone73);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'time' argument.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Week 35, 52" + "'", str4, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 2791L + "'", long5 == 2791L);
        org.junit.Assert.assertNotNull(regularTimePeriod6);
        org.junit.Assert.assertNotNull(regularTimePeriod7);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(class9);
        org.junit.Assert.assertNotNull(class10);
        org.junit.Assert.assertNotNull(class11);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod20);
        org.junit.Assert.assertNotNull(wildcardClass21);
        org.junit.Assert.assertNotNull(class22);
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone29);
// flaky:         org.junit.Assert.assertEquals(timeZone29.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod30);
        org.junit.Assert.assertNotNull(regularTimePeriod31);
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 52 + "'", int38 == 52);
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod43);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(class45);
        org.junit.Assert.assertNotNull(class46);
        org.junit.Assert.assertNotNull(regularTimePeriod50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 52 + "'", int51 == 52);
        org.junit.Assert.assertNotNull(timeZone52);
// flaky:         org.junit.Assert.assertEquals(timeZone52.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 52 + "'", int54 == 52);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertNotNull(date57);
        org.junit.Assert.assertEquals(date57.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 52 + "'", int63 == 52);
        org.junit.Assert.assertNotNull(timeZone64);
// flaky:         org.junit.Assert.assertEquals(timeZone64.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod66);
        org.junit.Assert.assertNotNull(regularTimePeriod70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 52 + "'", int71 == 52);
        org.junit.Assert.assertNotNull(date72);
        org.junit.Assert.assertEquals(date72.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(timeZone73);
// flaky:         org.junit.Assert.assertEquals(timeZone73.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod77);
    }

    @Test
    public void test1282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1282");
        org.jfree.data.time.Week week5 = new org.jfree.data.time.Week();
        long long6 = week5.getFirstMillisecond();
        org.jfree.data.time.Year year7 = week5.getYear();
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week(0, year7);
        org.jfree.data.time.Year year9 = week8.getYear();
        org.jfree.data.time.Week week10 = new org.jfree.data.time.Week(97, year9);
        org.jfree.data.time.Week week11 = new org.jfree.data.time.Week(0, year9);
        org.jfree.data.time.Week week12 = new org.jfree.data.time.Week((int) '#', year9);
        org.jfree.data.time.Week week13 = new org.jfree.data.time.Week(100, year9);
        java.lang.Class<?> wildcardClass14 = year9.getClass();
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1637449200000L + "'", long6 == 1637449200000L);
        org.junit.Assert.assertNotNull(year7);
        org.junit.Assert.assertNotNull(year9);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test1283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1283");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '4', (int) ' ');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.previous();
        java.lang.String str4 = week2.toString();
        java.util.Date date5 = week2.getStart();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod6 = week2.next();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod7 = week2.previous();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Week 52, 32" + "'", str4, "Week 52, 32");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Sun Dec 21 00:00:00 CET 32");
        org.junit.Assert.assertNotNull(regularTimePeriod6);
        org.junit.Assert.assertNotNull(regularTimePeriod7);
    }

    @Test
    public void test1284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1284");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(6, 35);
    }

    @Test
    public void test1285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1285");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getSerialIndex();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.next();
        int int6 = week2.getWeek();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 2791L + "'", long4 == 2791L);
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 35 + "'", int6 == 35);
    }

    @Test
    public void test1286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1286");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        int int11 = week2.getYearValue();
        long long12 = week2.getLastMillisecond();
        long long13 = week2.getMiddleMillisecond();
        long long14 = week2.getLastMillisecond();
        java.util.Calendar calendar15 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long16 = week2.getFirstMillisecond(calendar15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-60505750800001L) + "'", long12 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-60506053200001L) + "'", long13 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-60505750800001L) + "'", long14 == (-60505750800001L));
    }

    @Test
    public void test1287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1287");
        org.jfree.data.time.Week week4 = new org.jfree.data.time.Week();
        long long5 = week4.getFirstMillisecond();
        org.jfree.data.time.Year year6 = week4.getYear();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week((int) (byte) 100, year6);
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week(100, year6);
        org.jfree.data.time.Week week9 = new org.jfree.data.time.Week((int) (short) 0, year6);
        org.jfree.data.time.Week week10 = new org.jfree.data.time.Week(6, year6);
        int int11 = week10.getWeek();
        org.jfree.data.time.Week week14 = new org.jfree.data.time.Week();
        long long15 = week14.getFirstMillisecond();
        org.jfree.data.time.Year year16 = week14.getYear();
        org.jfree.data.time.Week week17 = new org.jfree.data.time.Week(0, year16);
        org.jfree.data.time.Week week18 = new org.jfree.data.time.Week(11, year16);
        int int19 = week10.compareTo((java.lang.Object) week18);
        int int20 = week18.getWeek();
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1637449200000L + "'", long5 == 1637449200000L);
        org.junit.Assert.assertNotNull(year6);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 6 + "'", int11 == 6);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1637449200000L + "'", long15 == 1637449200000L);
        org.junit.Assert.assertNotNull(year16);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-5) + "'", int19 == (-5));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 11 + "'", int20 == 11);
    }

    @Test
    public void test1288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1288");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.next();
        int int7 = week2.compareTo((java.lang.Object) 0.0d);
        org.jfree.data.time.Week week10 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str11 = week10.toString();
        long long12 = week10.getMiddleMillisecond();
        long long13 = week10.getLastMillisecond();
        org.jfree.data.time.Week week16 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod17 = week16.next();
        java.lang.Class<?> wildcardClass18 = week16.getClass();
        java.lang.Class class19 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass18);
        int int20 = week10.compareTo((java.lang.Object) wildcardClass18);
        java.lang.Class class21 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass18);
        int int22 = week2.compareTo((java.lang.Object) class21);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod23 = week2.previous();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod24 = week2.previous();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Week 35, 52" + "'", str11, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-60506053200001L) + "'", long12 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-60505750800001L) + "'", long13 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod17);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(class19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(class21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod23);
        org.junit.Assert.assertNotNull(regularTimePeriod24);
    }

    @Test
    public void test1289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1289");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        long long5 = week2.getLastMillisecond();
        long long6 = week2.getFirstMillisecond();
        java.util.Calendar calendar7 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long8 = week2.getFirstMillisecond(calendar7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-60505750800001L) + "'", long5 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-60506355600000L) + "'", long6 == (-60506355600000L));
    }

    @Test
    public void test1290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1290");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.next();
        java.util.Date date6 = week2.getEnd();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week(date6);
        int int8 = week7.getWeek();
        boolean boolean10 = week7.equals((java.lang.Object) 1637449200000L);
        org.jfree.data.time.Week week13 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod14 = week13.next();
        int int15 = week13.getYearValue();
        java.util.TimeZone timeZone16 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int17 = week13.compareTo((java.lang.Object) timeZone16);
        int int18 = week13.getYearValue();
        int int20 = week13.compareTo((java.lang.Object) 9);
        java.util.Date date21 = week13.getStart();
        org.jfree.data.time.Week week22 = new org.jfree.data.time.Week(date21);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod23 = week22.next();
        boolean boolean24 = week7.equals((java.lang.Object) week22);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod25 = week22.previous();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 35 + "'", int8 == 35);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(regularTimePeriod14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 52 + "'", int15 == 52);
        org.junit.Assert.assertNotNull(timeZone16);
// flaky:         org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 52 + "'", int18 == 52);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(regularTimePeriod25);
    }

    @Test
    public void test1291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1291");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date3 = week2.getStart();
        java.util.Date date4 = week2.getEnd();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod8 = week7.next();
        java.lang.Class<?> wildcardClass9 = week7.getClass();
        java.lang.Class class10 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass9);
        org.jfree.data.time.Week week13 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date14 = week13.getStart();
        java.lang.Class class15 = null;
        java.util.Date date16 = null;
        java.util.TimeZone timeZone17 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod18 = org.jfree.data.time.RegularTimePeriod.createInstance(class15, date16, timeZone17);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod19 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass9, date14, timeZone17);
        org.jfree.data.time.Week week20 = new org.jfree.data.time.Week(date4, timeZone17);
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Year year21 = week20.getYear();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Year constructor: year (97) outside valid range.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(class10);
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone17);
// flaky:         org.junit.Assert.assertEquals(timeZone17.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod18);
        org.junit.Assert.assertNotNull(regularTimePeriod19);
    }

    @Test
    public void test1292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1292");
        org.jfree.data.time.Week week4 = new org.jfree.data.time.Week();
        long long5 = week4.getFirstMillisecond();
        org.jfree.data.time.Year year6 = week4.getYear();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week(52, year6);
        java.util.Date date8 = year6.getStart();
        org.jfree.data.time.Week week9 = new org.jfree.data.time.Week(52, year6);
        org.jfree.data.time.Week week10 = new org.jfree.data.time.Week((int) '4', year6);
        org.jfree.data.time.Week week11 = new org.jfree.data.time.Week((int) (short) -1, year6);
        long long12 = week11.getFirstMillisecond();
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1637449200000L + "'", long5 == 1637449200000L);
        org.junit.Assert.assertNotNull(year6);
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Fri Jan 01 00:00:00 CET 2021");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1607814000000L + "'", long12 == 1607814000000L);
    }

    @Test
    public void test1293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1293");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        int int10 = week2.getYearValue();
        long long11 = week2.getLastMillisecond();
        int int12 = week2.getWeek();
        java.util.Date date13 = week2.getEnd();
        org.jfree.data.time.Week week16 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date17 = week16.getStart();
        java.util.Date date18 = week16.getEnd();
        org.jfree.data.time.Week week21 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod22 = week21.next();
        java.lang.Class<?> wildcardClass23 = week21.getClass();
        java.lang.Class class24 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass23);
        org.jfree.data.time.Week week27 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date28 = week27.getStart();
        java.lang.Class class29 = null;
        java.util.Date date30 = null;
        java.util.TimeZone timeZone31 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod32 = org.jfree.data.time.RegularTimePeriod.createInstance(class29, date30, timeZone31);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod33 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass23, date28, timeZone31);
        org.jfree.data.time.Week week34 = new org.jfree.data.time.Week(date18, timeZone31);
        org.jfree.data.time.Week week35 = new org.jfree.data.time.Week(date13, timeZone31);
        org.jfree.data.time.Week week38 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod39 = week38.previous();
        java.util.Date date40 = week38.getEnd();
        org.jfree.data.time.Week week43 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod44 = week43.next();
        int int45 = week43.getYearValue();
        java.util.TimeZone timeZone46 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int47 = week43.compareTo((java.lang.Object) timeZone46);
        int int48 = week43.getYearValue();
        int int50 = week43.compareTo((java.lang.Object) 9);
        int int51 = week43.getYearValue();
        long long52 = week43.getLastMillisecond();
        int int53 = week43.getWeek();
        java.util.Date date54 = week43.getEnd();
        org.jfree.data.time.Week week57 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date58 = week57.getStart();
        java.util.Date date59 = week57.getEnd();
        org.jfree.data.time.Week week62 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod63 = week62.next();
        java.lang.Class<?> wildcardClass64 = week62.getClass();
        java.lang.Class class65 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass64);
        org.jfree.data.time.Week week68 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date69 = week68.getStart();
        java.lang.Class class70 = null;
        java.util.Date date71 = null;
        java.util.TimeZone timeZone72 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod73 = org.jfree.data.time.RegularTimePeriod.createInstance(class70, date71, timeZone72);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod74 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass64, date69, timeZone72);
        org.jfree.data.time.Week week75 = new org.jfree.data.time.Week(date59, timeZone72);
        org.jfree.data.time.Week week76 = new org.jfree.data.time.Week(date54, timeZone72);
        org.jfree.data.time.Week week77 = new org.jfree.data.time.Week(date40, timeZone72);
        org.jfree.data.time.Week week78 = new org.jfree.data.time.Week(date13, timeZone72);
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Year year79 = week78.getYear();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Year constructor: year (52) outside valid range.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 52 + "'", int10 == 52);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-60505750800001L) + "'", long11 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 35 + "'", int12 == 35);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod22);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertNotNull(class24);
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone31);
// flaky:         org.junit.Assert.assertEquals(timeZone31.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod32);
        org.junit.Assert.assertNotNull(regularTimePeriod33);
        org.junit.Assert.assertNotNull(regularTimePeriod39);
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 52 + "'", int45 == 52);
        org.junit.Assert.assertNotNull(timeZone46);
// flaky:         org.junit.Assert.assertEquals(timeZone46.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 52 + "'", int48 == 52);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 52 + "'", int51 == 52);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + (-60505750800001L) + "'", long52 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 35 + "'", int53 == 35);
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date58);
        org.junit.Assert.assertEquals(date58.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date59);
        org.junit.Assert.assertEquals(date59.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod63);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertNotNull(class65);
        org.junit.Assert.assertNotNull(date69);
        org.junit.Assert.assertEquals(date69.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone72);
// flaky:         org.junit.Assert.assertEquals(timeZone72.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod73);
        org.junit.Assert.assertNotNull(regularTimePeriod74);
    }

    @Test
    public void test1294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1294");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.util.Date date3 = week2.getStart();
        int int4 = week2.getYearValue();
        java.util.Date date5 = week2.getEnd();
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod9 = week8.next();
        java.lang.Class<?> wildcardClass10 = week8.getClass();
        java.lang.Class class11 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass10);
        java.lang.Class class12 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass10);
        org.jfree.data.time.Week week15 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod16 = week15.next();
        int int17 = week15.getYearValue();
        java.util.TimeZone timeZone18 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int19 = week15.compareTo((java.lang.Object) timeZone18);
        int int20 = week15.getYearValue();
        int int22 = week15.compareTo((java.lang.Object) 9);
        java.util.Date date23 = week15.getStart();
        org.jfree.data.time.Week week24 = new org.jfree.data.time.Week(date23);
        org.jfree.data.time.Week week27 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod28 = week27.next();
        int int29 = week27.getYearValue();
        java.util.TimeZone timeZone30 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int31 = week27.compareTo((java.lang.Object) timeZone30);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod32 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass10, date23, timeZone30);
        org.jfree.data.time.Week week35 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod36 = week35.previous();
        int int37 = week35.getYearValue();
        java.util.Date date38 = week35.getStart();
        java.util.TimeZone timeZone39 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.Week week40 = new org.jfree.data.time.Week(date38, timeZone39);
        org.jfree.data.time.Week week41 = new org.jfree.data.time.Week(date23, timeZone39);
        org.jfree.data.time.Week week42 = new org.jfree.data.time.Week(date5, timeZone39);
        long long43 = week42.getLastMillisecond();
        java.lang.String str44 = week42.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Year year45 = week42.getYear();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Year constructor: year (52) outside valid range.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod9);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNotNull(class11);
        org.junit.Assert.assertNotNull(class12);
        org.junit.Assert.assertNotNull(regularTimePeriod16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 52 + "'", int17 == 52);
        org.junit.Assert.assertNotNull(timeZone18);
// flaky:         org.junit.Assert.assertEquals(timeZone18.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 52 + "'", int20 == 52);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 52 + "'", int29 == 52);
        org.junit.Assert.assertNotNull(timeZone30);
// flaky:         org.junit.Assert.assertEquals(timeZone30.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod32);
        org.junit.Assert.assertNotNull(regularTimePeriod36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 52 + "'", int37 == 52);
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(timeZone39);
// flaky:         org.junit.Assert.assertEquals(timeZone39.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + (-60505750800001L) + "'", long43 == (-60505750800001L));
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Week 35, 52" + "'", str44, "Week 35, 52");
    }

    @Test
    public void test1295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1295");
        org.jfree.data.time.Week week3 = new org.jfree.data.time.Week();
        long long4 = week3.getFirstMillisecond();
        org.jfree.data.time.Year year5 = week3.getYear();
        org.jfree.data.time.Week week6 = new org.jfree.data.time.Week(0, year5);
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week(53, year5);
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week((int) '4', year5);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod9 = week8.previous();
        long long10 = regularTimePeriod9.getMiddleMillisecond();
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1637449200000L + "'", long4 == 1637449200000L);
        org.junit.Assert.assertNotNull(year5);
        org.junit.Assert.assertNotNull(regularTimePeriod9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1639565999999L + "'", long10 == 1639565999999L);
    }

    @Test
    public void test1296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1296");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.next();
        java.util.Date date6 = week2.getEnd();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week(date6);
        long long8 = week7.getLastMillisecond();
        int int9 = week7.getYearValue();
        java.util.Calendar calendar10 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long11 = week7.getFirstMillisecond(calendar10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-60505750800001L) + "'", long8 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 52 + "'", int9 == 52);
    }

    @Test
    public void test1297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1297");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        long long5 = week2.getFirstMillisecond();
        java.lang.Class<?> wildcardClass6 = week2.getClass();
        java.lang.Class class7 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass6);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-60506355600000L) + "'", long5 == (-60506355600000L));
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(class7);
    }

    @Test
    public void test1298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1298");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) (short) 10, 3);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        java.util.Calendar calendar4 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long5 = regularTimePeriod3.getMiddleMillisecond(calendar4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
    }

    @Test
    public void test1299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1299");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        int int10 = week2.getYearValue();
        java.lang.String str11 = week2.toString();
        java.lang.String str12 = week2.toString();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod13 = week2.next();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod14 = week2.previous();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 52 + "'", int10 == 52);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Week 35, 52" + "'", str11, "Week 35, 52");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Week 35, 52" + "'", str12, "Week 35, 52");
        org.junit.Assert.assertNotNull(regularTimePeriod13);
        org.junit.Assert.assertNotNull(regularTimePeriod14);
    }

    @Test
    public void test1300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1300");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        long long4 = week2.getMiddleMillisecond();
        int int5 = week2.getWeek();
        long long6 = week2.getLastMillisecond();
        long long7 = week2.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod8 = week2.previous();
        long long9 = week2.getLastMillisecond();
        java.lang.Class<?> wildcardClass10 = week2.getClass();
        java.lang.Class class11 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass10);
        java.lang.Class class12 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass10);
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 35 + "'", int5 == 35);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-60505750800001L) + "'", long6 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-60506053200001L) + "'", long7 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-60505750800001L) + "'", long9 == (-60505750800001L));
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNotNull(class11);
        org.junit.Assert.assertNotNull(class12);
    }

    @Test
    public void test1301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1301");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.previous();
        int int4 = week2.getYearValue();
        java.util.Date date5 = week2.getStart();
        java.util.TimeZone timeZone6 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week(date5, timeZone6);
        org.jfree.data.time.Week week10 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod11 = week10.next();
        int int12 = week10.getYearValue();
        java.util.TimeZone timeZone13 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int14 = week10.compareTo((java.lang.Object) timeZone13);
        int int15 = week10.getYearValue();
        int int17 = week10.compareTo((java.lang.Object) 9);
        java.util.Date date18 = week10.getStart();
        org.jfree.data.time.Week week21 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod22 = week21.next();
        java.lang.Class<?> wildcardClass23 = week21.getClass();
        java.lang.Class class24 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass23);
        java.lang.Class class25 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass23);
        org.jfree.data.time.Week week28 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod29 = week28.next();
        int int30 = week28.getYearValue();
        java.util.TimeZone timeZone31 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int32 = week28.compareTo((java.lang.Object) timeZone31);
        int int33 = week28.getYearValue();
        int int35 = week28.compareTo((java.lang.Object) 9);
        java.util.Date date36 = week28.getStart();
        org.jfree.data.time.Week week37 = new org.jfree.data.time.Week(date36);
        org.jfree.data.time.Week week40 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod41 = week40.next();
        int int42 = week40.getYearValue();
        java.util.TimeZone timeZone43 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int44 = week40.compareTo((java.lang.Object) timeZone43);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod45 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass23, date36, timeZone43);
        org.jfree.data.time.Week week48 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod49 = week48.previous();
        int int50 = week48.getYearValue();
        java.util.Date date51 = week48.getStart();
        java.util.TimeZone timeZone52 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.Week week53 = new org.jfree.data.time.Week(date51, timeZone52);
        org.jfree.data.time.Week week54 = new org.jfree.data.time.Week(date36, timeZone52);
        org.jfree.data.time.Week week55 = new org.jfree.data.time.Week(date18, timeZone52);
        org.jfree.data.time.Week week56 = new org.jfree.data.time.Week(date5, timeZone52);
        java.util.Calendar calendar57 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long58 = week56.getLastMillisecond(calendar57);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(timeZone6);
// flaky:         org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNotNull(regularTimePeriod11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
        org.junit.Assert.assertNotNull(timeZone13);
// flaky:         org.junit.Assert.assertEquals(timeZone13.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 52 + "'", int15 == 52);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod22);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertNotNull(class24);
        org.junit.Assert.assertNotNull(class25);
        org.junit.Assert.assertNotNull(regularTimePeriod29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 52 + "'", int30 == 52);
        org.junit.Assert.assertNotNull(timeZone31);
// flaky:         org.junit.Assert.assertEquals(timeZone31.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 52 + "'", int33 == 52);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 52 + "'", int42 == 52);
        org.junit.Assert.assertNotNull(timeZone43);
// flaky:         org.junit.Assert.assertEquals(timeZone43.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod45);
        org.junit.Assert.assertNotNull(regularTimePeriod49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 52 + "'", int50 == 52);
        org.junit.Assert.assertNotNull(date51);
        org.junit.Assert.assertEquals(date51.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(timeZone52);
// flaky:         org.junit.Assert.assertEquals(timeZone52.getDisplayName(), "Central European Time");
    }

    @Test
    public void test1302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1302");
        org.jfree.data.time.Week week1 = new org.jfree.data.time.Week();
        long long2 = week1.getFirstMillisecond();
        org.jfree.data.time.Year year3 = week1.getYear();
        org.jfree.data.time.Week week4 = new org.jfree.data.time.Week(0, year3);
        java.util.Date date5 = week4.getStart();
        long long6 = week4.getLastMillisecond();
        long long7 = week4.getSerialIndex();
        java.lang.Class<?> wildcardClass8 = week4.getClass();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1637449200000L + "'", long2 == 1637449200000L);
        org.junit.Assert.assertNotNull(year3);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Sun Dec 20 00:00:00 CET 2020");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1609023599999L + "'", long6 == 1609023599999L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 107113L + "'", long7 == 107113L);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test1303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1303");
        org.jfree.data.time.Week week5 = new org.jfree.data.time.Week();
        long long6 = week5.getFirstMillisecond();
        org.jfree.data.time.Year year7 = week5.getYear();
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week(0, year7);
        org.jfree.data.time.Year year9 = week8.getYear();
        org.jfree.data.time.Week week10 = new org.jfree.data.time.Week(97, year9);
        org.jfree.data.time.Week week11 = new org.jfree.data.time.Week(0, year9);
        org.jfree.data.time.Week week12 = new org.jfree.data.time.Week((int) (byte) 100, year9);
        org.jfree.data.time.Week week13 = new org.jfree.data.time.Week(32, year9);
        long long14 = week13.getFirstMillisecond();
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1637449200000L + "'", long6 == 1637449200000L);
        org.junit.Assert.assertNotNull(year7);
        org.junit.Assert.assertNotNull(year9);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1627768800000L + "'", long14 == 1627768800000L);
    }

    @Test
    public void test1304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1304");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        int int10 = week2.getYearValue();
        int int11 = week2.getYearValue();
        int int12 = week2.getYearValue();
        org.jfree.data.time.Week week15 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str16 = week15.toString();
        long long17 = week15.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod18 = week15.next();
        java.util.Date date19 = week15.getEnd();
        org.jfree.data.time.Week week20 = new org.jfree.data.time.Week(date19);
        long long21 = week20.getLastMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod22 = week20.next();
        boolean boolean23 = week2.equals((java.lang.Object) regularTimePeriod22);
        java.lang.String str24 = week2.toString();
        org.jfree.data.time.Week week27 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str28 = week27.toString();
        long long29 = week27.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod30 = week27.next();
        java.util.Date date31 = week27.getEnd();
        org.jfree.data.time.Week week32 = new org.jfree.data.time.Week(date31);
        java.util.Date date33 = week32.getStart();
        long long34 = week32.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod35 = week32.previous();
        boolean boolean36 = week2.equals((java.lang.Object) week32);
        java.lang.String str37 = week32.toString();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 52 + "'", int10 == 52);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Week 35, 52" + "'", str16, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-60506053200001L) + "'", long17 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-60505750800001L) + "'", long21 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Week 35, 52" + "'", str24, "Week 35, 52");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Week 35, 52" + "'", str28, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + (-60506053200001L) + "'", long29 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod30);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + (-60506053200001L) + "'", long34 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Week 35, 52" + "'", str37, "Week 35, 52");
    }

    @Test
    public void test1305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1305");
        org.jfree.data.time.Week week6 = new org.jfree.data.time.Week();
        long long7 = week6.getFirstMillisecond();
        org.jfree.data.time.Year year8 = week6.getYear();
        org.jfree.data.time.Week week9 = new org.jfree.data.time.Week(52, year8);
        org.jfree.data.time.Week week10 = new org.jfree.data.time.Week((int) (byte) -1, year8);
        org.jfree.data.time.Week week11 = new org.jfree.data.time.Week(0, year8);
        java.util.Date date12 = year8.getEnd();
        org.jfree.data.time.Week week13 = new org.jfree.data.time.Week(52, year8);
        org.jfree.data.time.Week week14 = new org.jfree.data.time.Week((int) 'a', year8);
        org.jfree.data.time.Week week15 = new org.jfree.data.time.Week(32, year8);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1637449200000L + "'", long7 == 1637449200000L);
        org.junit.Assert.assertNotNull(year8);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Fri Dec 31 23:59:59 CET 2021");
    }

    @Test
    public void test1306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1306");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.previous();
        java.util.Date date4 = week2.getEnd();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod8 = week7.next();
        int int9 = week7.getYearValue();
        java.util.TimeZone timeZone10 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int11 = week7.compareTo((java.lang.Object) timeZone10);
        int int12 = week7.getYearValue();
        int int14 = week7.compareTo((java.lang.Object) 9);
        int int15 = week7.getYearValue();
        long long16 = week7.getLastMillisecond();
        int int17 = week7.getWeek();
        java.util.Date date18 = week7.getEnd();
        org.jfree.data.time.Week week21 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date22 = week21.getStart();
        java.util.Date date23 = week21.getEnd();
        org.jfree.data.time.Week week26 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod27 = week26.next();
        java.lang.Class<?> wildcardClass28 = week26.getClass();
        java.lang.Class class29 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass28);
        org.jfree.data.time.Week week32 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date33 = week32.getStart();
        java.lang.Class class34 = null;
        java.util.Date date35 = null;
        java.util.TimeZone timeZone36 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod37 = org.jfree.data.time.RegularTimePeriod.createInstance(class34, date35, timeZone36);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod38 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass28, date33, timeZone36);
        org.jfree.data.time.Week week39 = new org.jfree.data.time.Week(date23, timeZone36);
        org.jfree.data.time.Week week40 = new org.jfree.data.time.Week(date18, timeZone36);
        org.jfree.data.time.Week week41 = new org.jfree.data.time.Week(date4, timeZone36);
        long long42 = week41.getLastMillisecond();
        long long43 = week41.getLastMillisecond();
        long long44 = week41.getLastMillisecond();
        org.jfree.data.time.Week week47 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str48 = week47.toString();
        long long49 = week47.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod50 = week47.next();
        java.util.Date date51 = week47.getEnd();
        org.jfree.data.time.Week week52 = new org.jfree.data.time.Week(date51);
        long long53 = week52.getLastMillisecond();
        java.util.Date date54 = week52.getEnd();
        org.jfree.data.time.Week week55 = new org.jfree.data.time.Week(date54);
        // The following exception was thrown during execution in test generation
        try {
            int int56 = week41.compareTo((java.lang.Object) week55);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Year constructor: year (52) outside valid range.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 52 + "'", int9 == 52);
        org.junit.Assert.assertNotNull(timeZone10);
// flaky:         org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 52 + "'", int15 == 52);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-60505750800001L) + "'", long16 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 35 + "'", int17 == 35);
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod27);
        org.junit.Assert.assertNotNull(wildcardClass28);
        org.junit.Assert.assertNotNull(class29);
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone36);
// flaky:         org.junit.Assert.assertEquals(timeZone36.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod37);
        org.junit.Assert.assertNotNull(regularTimePeriod38);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + (-60505750800001L) + "'", long42 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + (-60505750800001L) + "'", long43 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + (-60505750800001L) + "'", long44 == (-60505750800001L));
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "Week 35, 52" + "'", str48, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + (-60506053200001L) + "'", long49 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod50);
        org.junit.Assert.assertNotNull(date51);
        org.junit.Assert.assertEquals(date51.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + (-60505750800001L) + "'", long53 == (-60505750800001L));
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Sat Aug 26 23:59:59 CET 52");
    }

    @Test
    public void test1307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1307");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        int int3 = week2.getYearValue();
        java.util.Calendar calendar4 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long5 = week2.getMiddleMillisecond(calendar4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 52 + "'", int3 == 52);
    }

    @Test
    public void test1308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1308");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.next();
        java.util.Date date6 = week2.getEnd();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week(date6);
        int int8 = week7.getWeek();
        boolean boolean10 = week7.equals((java.lang.Object) 1637449200000L);
        org.jfree.data.time.Week week13 = new org.jfree.data.time.Week(9, (int) 'a');
        org.jfree.data.time.Week week16 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod17 = week16.next();
        long long18 = week16.getMiddleMillisecond();
        java.lang.String str19 = week16.toString();
        boolean boolean20 = week13.equals((java.lang.Object) week16);
        int int21 = week16.getWeek();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod22 = week16.next();
        boolean boolean23 = week7.equals((java.lang.Object) week16);
        long long24 = week16.getLastMillisecond();
        java.lang.String str25 = week16.toString();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod26 = week16.previous();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 35 + "'", int8 == 35);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(regularTimePeriod17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-60506053200001L) + "'", long18 == (-60506053200001L));
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Week 35, 52" + "'", str19, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 35 + "'", int21 == 35);
        org.junit.Assert.assertNotNull(regularTimePeriod22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-60505750800001L) + "'", long24 == (-60505750800001L));
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Week 35, 52" + "'", str25, "Week 35, 52");
        org.junit.Assert.assertNotNull(regularTimePeriod26);
    }

    @Test
    public void test1309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1309");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        long long8 = week2.getFirstMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod9 = week2.previous();
        java.util.Date date10 = week2.getEnd();
        long long11 = week2.getSerialIndex();
        org.jfree.data.time.Week week14 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str15 = week14.toString();
        long long16 = week14.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod17 = week14.next();
        java.util.Date date18 = week14.getEnd();
        org.jfree.data.time.Week week19 = new org.jfree.data.time.Week(date18);
        java.lang.Class<?> wildcardClass20 = week19.getClass();
        boolean boolean21 = week2.equals((java.lang.Object) wildcardClass20);
        java.lang.Class class22 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass20);
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-60506355600000L) + "'", long8 == (-60506355600000L));
        org.junit.Assert.assertNotNull(regularTimePeriod9);
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 2791L + "'", long11 == 2791L);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Week 35, 52" + "'", str15, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-60506053200001L) + "'", long16 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod17);
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(class22);
    }

    @Test
    public void test1310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1310");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.next();
        int int7 = week2.compareTo((java.lang.Object) 0.0d);
        int int8 = week2.getYearValue();
        java.util.Calendar calendar9 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long10 = week2.getMiddleMillisecond(calendar9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 52 + "'", int8 == 52);
    }

    @Test
    public void test1311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1311");
        org.jfree.data.time.Week week3 = new org.jfree.data.time.Week();
        long long4 = week3.getFirstMillisecond();
        org.jfree.data.time.Year year5 = week3.getYear();
        org.jfree.data.time.Week week6 = new org.jfree.data.time.Week((int) (byte) 100, year5);
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week(12, year5);
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week(0, year5);
        java.util.Calendar calendar9 = null;
        // The following exception was thrown during execution in test generation
        try {
            week8.peg(calendar9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1637449200000L + "'", long4 == 1637449200000L);
        org.junit.Assert.assertNotNull(year5);
    }

    @Test
    public void test1312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1312");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(97, (int) (byte) 10);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.previous();
        java.util.Calendar calendar6 = null;
        // The following exception was thrown during execution in test generation
        try {
            week2.peg(calendar6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10 + "'", int4 == 10);
        org.junit.Assert.assertNotNull(regularTimePeriod5);
    }

    @Test
    public void test1313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1313");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.previous();
        int int4 = week2.getYearValue();
        java.util.Date date5 = week2.getEnd();
        long long6 = week2.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod7 = week2.previous();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod8 = week2.next();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-60506053200001L) + "'", long6 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod7);
        org.junit.Assert.assertNotNull(regularTimePeriod8);
    }

    @Test
    public void test1314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1314");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date3 = week2.getStart();
        java.util.Date date4 = week2.getEnd();
        int int5 = week2.getYearValue();
        java.util.Date date6 = week2.getStart();
        long long7 = week2.getMiddleMillisecond();
        long long8 = week2.getMiddleMillisecond();
        java.util.Calendar calendar9 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long10 = week2.getMiddleMillisecond(calendar9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 97 + "'", int5 == 97);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-59101102800001L) + "'", long7 == (-59101102800001L));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-59101102800001L) + "'", long8 == (-59101102800001L));
    }

    @Test
    public void test1315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1315");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        long long5 = week2.getLastMillisecond();
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod9 = week8.next();
        java.lang.Class<?> wildcardClass10 = week8.getClass();
        java.lang.Class class11 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass10);
        int int12 = week2.compareTo((java.lang.Object) wildcardClass10);
        java.lang.Class class13 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass10);
        org.jfree.data.time.Week week16 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod17 = week16.next();
        java.lang.Class<?> wildcardClass18 = week16.getClass();
        java.lang.Class class19 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass18);
        org.jfree.data.time.Week week22 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date23 = week22.getStart();
        java.lang.Class class24 = null;
        java.util.Date date25 = null;
        java.util.TimeZone timeZone26 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod27 = org.jfree.data.time.RegularTimePeriod.createInstance(class24, date25, timeZone26);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod28 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass18, date23, timeZone26);
        java.util.TimeZone timeZone29 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod30 = org.jfree.data.time.RegularTimePeriod.createInstance(class13, date23, timeZone29);
        org.jfree.data.time.Week week31 = new org.jfree.data.time.Week(date23);
        java.util.Date date32 = week31.getStart();
        org.jfree.data.time.Week week33 = new org.jfree.data.time.Week(date32);
        java.lang.Class<?> wildcardClass34 = date32.getClass();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-60505750800001L) + "'", long5 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod9);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNotNull(class11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(class13);
        org.junit.Assert.assertNotNull(regularTimePeriod17);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(class19);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone26);
// flaky:         org.junit.Assert.assertEquals(timeZone26.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod27);
        org.junit.Assert.assertNotNull(regularTimePeriod28);
        org.junit.Assert.assertNotNull(timeZone29);
// flaky:         org.junit.Assert.assertEquals(timeZone29.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod30);
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(wildcardClass34);
    }

    @Test
    public void test1316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1316");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod11 = week2.next();
        org.jfree.data.time.Week week14 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod15 = week14.next();
        java.lang.Class<?> wildcardClass16 = week14.getClass();
        java.lang.Class class17 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass16);
        java.lang.Class class18 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass16);
        boolean boolean19 = week2.equals((java.lang.Object) wildcardClass16);
        java.lang.Class class20 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass16);
        org.jfree.data.time.Week week23 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod24 = week23.next();
        int int25 = week23.getYearValue();
        long long26 = week23.getLastMillisecond();
        java.util.Date date27 = week23.getEnd();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod28 = week23.previous();
        long long29 = week23.getMiddleMillisecond();
        org.jfree.data.time.Week week32 = new org.jfree.data.time.Week(9, (int) 'a');
        org.jfree.data.time.Week week35 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod36 = week35.next();
        long long37 = week35.getMiddleMillisecond();
        java.lang.String str38 = week35.toString();
        boolean boolean39 = week32.equals((java.lang.Object) week35);
        java.util.Date date40 = week32.getStart();
        int int41 = week23.compareTo((java.lang.Object) date40);
        org.jfree.data.time.Week week44 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date45 = week44.getStart();
        java.util.Date date46 = week44.getEnd();
        org.jfree.data.time.Week week49 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod50 = week49.next();
        java.lang.Class<?> wildcardClass51 = week49.getClass();
        java.lang.Class class52 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass51);
        org.jfree.data.time.Week week55 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date56 = week55.getStart();
        java.lang.Class class57 = null;
        java.util.Date date58 = null;
        java.util.TimeZone timeZone59 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod60 = org.jfree.data.time.RegularTimePeriod.createInstance(class57, date58, timeZone59);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod61 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass51, date56, timeZone59);
        org.jfree.data.time.Week week62 = new org.jfree.data.time.Week(date46, timeZone59);
        java.util.TimeZone timeZone63 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.Week week64 = new org.jfree.data.time.Week(date46, timeZone63);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod65 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass16, date40, timeZone63);
        org.jfree.data.time.Week week66 = new org.jfree.data.time.Week(date40);
        org.jfree.data.time.Week week67 = new org.jfree.data.time.Week(date40);
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertNotNull(regularTimePeriod11);
        org.junit.Assert.assertNotNull(regularTimePeriod15);
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertNotNull(class17);
        org.junit.Assert.assertNotNull(class18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(class20);
        org.junit.Assert.assertNotNull(regularTimePeriod24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 52 + "'", int25 == 52);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + (-60505750800001L) + "'", long26 == (-60505750800001L));
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod28);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + (-60506053200001L) + "'", long29 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod36);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + (-60506053200001L) + "'", long37 == (-60506053200001L));
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Week 35, 52" + "'", str38, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod50);
        org.junit.Assert.assertNotNull(wildcardClass51);
        org.junit.Assert.assertNotNull(class52);
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone59);
// flaky:         org.junit.Assert.assertEquals(timeZone59.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod60);
        org.junit.Assert.assertNotNull(regularTimePeriod61);
        org.junit.Assert.assertNotNull(timeZone63);
// flaky:         org.junit.Assert.assertEquals(timeZone63.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNotNull(regularTimePeriod65);
    }

    @Test
    public void test1317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1317");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date3 = week2.getStart();
        java.util.Date date4 = week2.getEnd();
        org.jfree.data.time.Week week5 = new org.jfree.data.time.Week(date4);
        java.util.Date date6 = week5.getEnd();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod7 = week5.previous();
        java.util.Calendar calendar8 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long9 = week5.getMiddleMillisecond(calendar8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod7);
    }

    @Test
    public void test1318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1318");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date3 = week2.getStart();
        java.util.Date date4 = week2.getEnd();
        org.jfree.data.time.Week week5 = new org.jfree.data.time.Week(date4);
        java.util.Date date6 = week5.getEnd();
        org.jfree.data.time.Week week9 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date10 = week9.getStart();
        java.util.Date date11 = week9.getEnd();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod12 = week9.next();
        long long13 = week9.getLastMillisecond();
        boolean boolean14 = week5.equals((java.lang.Object) week9);
        org.jfree.data.time.Week week17 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str18 = week17.toString();
        long long19 = week17.getMiddleMillisecond();
        long long20 = week17.getLastMillisecond();
        org.jfree.data.time.Week week23 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod24 = week23.next();
        java.lang.Class<?> wildcardClass25 = week23.getClass();
        java.lang.Class class26 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass25);
        int int27 = week17.compareTo((java.lang.Object) wildcardClass25);
        java.lang.Class class28 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass25);
        java.lang.Class class29 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass25);
        org.jfree.data.time.Week week32 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.util.Date date33 = week32.getStart();
        int int34 = week32.getYearValue();
        java.util.Date date35 = week32.getEnd();
        org.jfree.data.time.Week week38 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod39 = week38.next();
        int int40 = week38.getYearValue();
        java.util.TimeZone timeZone41 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int42 = week38.compareTo((java.lang.Object) timeZone41);
        int int43 = week38.getYearValue();
        int int45 = week38.compareTo((java.lang.Object) 9);
        int int46 = week38.getYearValue();
        long long47 = week38.getLastMillisecond();
        int int48 = week38.getWeek();
        java.util.Date date49 = week38.getEnd();
        org.jfree.data.time.Week week52 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date53 = week52.getStart();
        java.util.Date date54 = week52.getEnd();
        org.jfree.data.time.Week week57 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod58 = week57.next();
        java.lang.Class<?> wildcardClass59 = week57.getClass();
        java.lang.Class class60 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass59);
        org.jfree.data.time.Week week63 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date64 = week63.getStart();
        java.lang.Class class65 = null;
        java.util.Date date66 = null;
        java.util.TimeZone timeZone67 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod68 = org.jfree.data.time.RegularTimePeriod.createInstance(class65, date66, timeZone67);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod69 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass59, date64, timeZone67);
        org.jfree.data.time.Week week70 = new org.jfree.data.time.Week(date54, timeZone67);
        org.jfree.data.time.Week week71 = new org.jfree.data.time.Week(date49, timeZone67);
        org.jfree.data.time.Week week74 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str75 = week74.toString();
        long long76 = week74.getSerialIndex();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod77 = week74.next();
        java.util.Date date78 = regularTimePeriod77.getEnd();
        org.jfree.data.time.Week week81 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date82 = week81.getStart();
        org.jfree.data.time.Week week85 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod86 = week85.next();
        int int87 = week85.getYearValue();
        java.util.TimeZone timeZone88 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int89 = week85.compareTo((java.lang.Object) timeZone88);
        org.jfree.data.time.Week week90 = new org.jfree.data.time.Week(date82, timeZone88);
        org.jfree.data.time.Week week91 = new org.jfree.data.time.Week(date78, timeZone88);
        org.jfree.data.time.Week week92 = new org.jfree.data.time.Week(date49, timeZone88);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod93 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass25, date35, timeZone88);
        boolean boolean94 = week5.equals((java.lang.Object) timeZone88);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod95 = week5.previous();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod96 = week5.previous();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod97 = week5.previous();
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-59100800400001L) + "'", long13 == (-59100800400001L));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Week 35, 52" + "'", str18, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-60506053200001L) + "'", long19 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-60505750800001L) + "'", long20 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod24);
        org.junit.Assert.assertNotNull(wildcardClass25);
        org.junit.Assert.assertNotNull(class26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(class28);
        org.junit.Assert.assertNotNull(class29);
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 52 + "'", int34 == 52);
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 52 + "'", int40 == 52);
        org.junit.Assert.assertNotNull(timeZone41);
// flaky:         org.junit.Assert.assertEquals(timeZone41.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 52 + "'", int43 == 52);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 52 + "'", int46 == 52);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + (-60505750800001L) + "'", long47 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 35 + "'", int48 == 35);
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod58);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(class60);
        org.junit.Assert.assertNotNull(date64);
        org.junit.Assert.assertEquals(date64.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone67);
// flaky:         org.junit.Assert.assertEquals(timeZone67.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod68);
        org.junit.Assert.assertNotNull(regularTimePeriod69);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "Week 35, 52" + "'", str75, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + 2791L + "'", long76 == 2791L);
        org.junit.Assert.assertNotNull(regularTimePeriod77);
        org.junit.Assert.assertNotNull(date78);
        org.junit.Assert.assertEquals(date78.toString(), "Sat Sep 02 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date82);
        org.junit.Assert.assertEquals(date82.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod86);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 52 + "'", int87 == 52);
        org.junit.Assert.assertNotNull(timeZone88);
// flaky:         org.junit.Assert.assertEquals(timeZone88.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 1 + "'", int89 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNotNull(regularTimePeriod95);
        org.junit.Assert.assertNotNull(regularTimePeriod96);
        org.junit.Assert.assertNotNull(regularTimePeriod97);
    }

    @Test
    public void test1319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1319");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        long long5 = week2.getLastMillisecond();
        java.util.Date date6 = week2.getEnd();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod7 = week2.next();
        long long8 = week2.getSerialIndex();
        java.util.Calendar calendar9 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long10 = week2.getLastMillisecond(calendar9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-60505750800001L) + "'", long5 == (-60505750800001L));
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 2791L + "'", long8 == 2791L);
    }

    @Test
    public void test1320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1320");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.previous();
        int int4 = week2.getYearValue();
        long long5 = week2.getSerialIndex();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod6 = week2.next();
        java.util.Calendar calendar7 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long8 = week2.getLastMillisecond(calendar7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 2791L + "'", long5 == 2791L);
        org.junit.Assert.assertNotNull(regularTimePeriod6);
    }

    @Test
    public void test1321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1321");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod11 = week2.next();
        org.jfree.data.time.Week week14 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod15 = week14.next();
        java.lang.Class<?> wildcardClass16 = week14.getClass();
        java.lang.Class class17 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass16);
        java.lang.Class class18 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass16);
        boolean boolean19 = week2.equals((java.lang.Object) wildcardClass16);
        java.lang.Class class20 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass16);
        org.jfree.data.time.Week week23 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod24 = week23.next();
        int int25 = week23.getYearValue();
        long long26 = week23.getLastMillisecond();
        java.util.Date date27 = week23.getEnd();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod28 = week23.previous();
        long long29 = week23.getMiddleMillisecond();
        org.jfree.data.time.Week week32 = new org.jfree.data.time.Week(9, (int) 'a');
        org.jfree.data.time.Week week35 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod36 = week35.next();
        long long37 = week35.getMiddleMillisecond();
        java.lang.String str38 = week35.toString();
        boolean boolean39 = week32.equals((java.lang.Object) week35);
        java.util.Date date40 = week32.getStart();
        int int41 = week23.compareTo((java.lang.Object) date40);
        org.jfree.data.time.Week week44 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date45 = week44.getStart();
        java.util.Date date46 = week44.getEnd();
        org.jfree.data.time.Week week49 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod50 = week49.next();
        java.lang.Class<?> wildcardClass51 = week49.getClass();
        java.lang.Class class52 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass51);
        org.jfree.data.time.Week week55 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date56 = week55.getStart();
        java.lang.Class class57 = null;
        java.util.Date date58 = null;
        java.util.TimeZone timeZone59 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod60 = org.jfree.data.time.RegularTimePeriod.createInstance(class57, date58, timeZone59);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod61 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass51, date56, timeZone59);
        org.jfree.data.time.Week week62 = new org.jfree.data.time.Week(date46, timeZone59);
        java.util.TimeZone timeZone63 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.Week week64 = new org.jfree.data.time.Week(date46, timeZone63);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod65 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass16, date40, timeZone63);
        java.util.Date date66 = regularTimePeriod65.getStart();
        org.jfree.data.time.Week week69 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date70 = week69.getStart();
        org.jfree.data.time.Week week71 = new org.jfree.data.time.Week(date70);
        java.util.Date date72 = week71.getStart();
        org.jfree.data.time.Week week75 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod76 = week75.next();
        int int77 = week75.getYearValue();
        java.util.TimeZone timeZone78 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int79 = week75.compareTo((java.lang.Object) timeZone78);
        int int80 = week75.getYearValue();
        long long81 = week75.getMiddleMillisecond();
        java.lang.Class<?> wildcardClass82 = week75.getClass();
        org.jfree.data.time.Week week85 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date86 = week85.getStart();
        org.jfree.data.time.Week week89 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod90 = week89.next();
        int int91 = week89.getYearValue();
        java.util.TimeZone timeZone92 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int93 = week89.compareTo((java.lang.Object) timeZone92);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod94 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass82, date86, timeZone92);
        org.jfree.data.time.Week week95 = new org.jfree.data.time.Week(date72, timeZone92);
        java.util.Locale locale96 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Week week97 = new org.jfree.data.time.Week(date66, timeZone92, locale96);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'locale' argument.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertNotNull(regularTimePeriod11);
        org.junit.Assert.assertNotNull(regularTimePeriod15);
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertNotNull(class17);
        org.junit.Assert.assertNotNull(class18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(class20);
        org.junit.Assert.assertNotNull(regularTimePeriod24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 52 + "'", int25 == 52);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + (-60505750800001L) + "'", long26 == (-60505750800001L));
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod28);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + (-60506053200001L) + "'", long29 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod36);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + (-60506053200001L) + "'", long37 == (-60506053200001L));
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Week 35, 52" + "'", str38, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod50);
        org.junit.Assert.assertNotNull(wildcardClass51);
        org.junit.Assert.assertNotNull(class52);
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone59);
// flaky:         org.junit.Assert.assertEquals(timeZone59.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod60);
        org.junit.Assert.assertNotNull(regularTimePeriod61);
        org.junit.Assert.assertNotNull(timeZone63);
// flaky:         org.junit.Assert.assertEquals(timeZone63.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNotNull(regularTimePeriod65);
        org.junit.Assert.assertNotNull(date66);
        org.junit.Assert.assertEquals(date66.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date70);
        org.junit.Assert.assertEquals(date70.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date72);
        org.junit.Assert.assertEquals(date72.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 52 + "'", int77 == 52);
        org.junit.Assert.assertNotNull(timeZone78);
// flaky:         org.junit.Assert.assertEquals(timeZone78.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 1 + "'", int79 == 1);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 52 + "'", int80 == 52);
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + (-60506053200001L) + "'", long81 == (-60506053200001L));
        org.junit.Assert.assertNotNull(wildcardClass82);
        org.junit.Assert.assertNotNull(date86);
        org.junit.Assert.assertEquals(date86.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod90);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 52 + "'", int91 == 52);
        org.junit.Assert.assertNotNull(timeZone92);
// flaky:         org.junit.Assert.assertEquals(timeZone92.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 1 + "'", int93 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod94);
    }

    @Test
    public void test1322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1322");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        java.util.Date date10 = week2.getStart();
        org.jfree.data.time.Week week11 = new org.jfree.data.time.Week(date10);
        long long12 = week11.getFirstMillisecond();
        java.util.Date date13 = week11.getEnd();
        long long14 = week11.getMiddleMillisecond();
        long long15 = week11.getFirstMillisecond();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-60506355600000L) + "'", long12 == (-60506355600000L));
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-60506053200001L) + "'", long14 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-60506355600000L) + "'", long15 == (-60506355600000L));
    }

    @Test
    public void test1323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1323");
        org.jfree.data.time.Week week3 = new org.jfree.data.time.Week();
        long long4 = week3.getFirstMillisecond();
        org.jfree.data.time.Year year5 = week3.getYear();
        org.jfree.data.time.Week week6 = new org.jfree.data.time.Week(0, year5);
        java.util.Date date7 = week6.getStart();
        java.util.Date date8 = week6.getStart();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod9 = week6.next();
        org.jfree.data.time.Year year10 = week6.getYear();
        org.jfree.data.time.Week week11 = new org.jfree.data.time.Week(52, year10);
        org.jfree.data.time.Week week12 = new org.jfree.data.time.Week(0, year10);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1637449200000L + "'", long4 == 1637449200000L);
        org.junit.Assert.assertNotNull(year5);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Sun Dec 20 00:00:00 CET 2020");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Sun Dec 20 00:00:00 CET 2020");
        org.junit.Assert.assertNotNull(regularTimePeriod9);
        org.junit.Assert.assertNotNull(year10);
    }

    @Test
    public void test1324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1324");
        org.jfree.data.time.Week week1 = new org.jfree.data.time.Week();
        long long2 = week1.getFirstMillisecond();
        org.jfree.data.time.Year year3 = week1.getYear();
        org.jfree.data.time.Week week4 = new org.jfree.data.time.Week(0, year3);
        java.util.Date date5 = year3.getStart();
        org.jfree.data.time.Week week6 = new org.jfree.data.time.Week(date5);
        long long7 = week6.getLastMillisecond();
        long long8 = week6.getFirstMillisecond();
        org.jfree.data.time.Week week12 = new org.jfree.data.time.Week();
        long long13 = week12.getFirstMillisecond();
        org.jfree.data.time.Year year14 = week12.getYear();
        org.jfree.data.time.Week week15 = new org.jfree.data.time.Week(0, year14);
        org.jfree.data.time.Week week16 = new org.jfree.data.time.Week(11, year14);
        org.jfree.data.time.Week week17 = new org.jfree.data.time.Week((-1), year14);
        boolean boolean18 = week6.equals((java.lang.Object) year14);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1637449200000L + "'", long2 == 1637449200000L);
        org.junit.Assert.assertNotNull(year3);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Fri Jan 01 00:00:00 CET 2021");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1609628399999L + "'", long7 == 1609628399999L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1609023600000L + "'", long8 == 1609023600000L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1637449200000L + "'", long13 == 1637449200000L);
        org.junit.Assert.assertNotNull(year14);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test1325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1325");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        int int11 = week2.getYearValue();
        long long12 = week2.getLastMillisecond();
        int int13 = week2.getWeek();
        int int14 = week2.getYearValue();
        long long15 = week2.getFirstMillisecond();
        int int16 = week2.getYearValue();
        java.lang.String str17 = week2.toString();
        java.util.Date date18 = week2.getEnd();
        org.jfree.data.time.Week week21 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod22 = week21.next();
        int int23 = week21.getYearValue();
        java.util.TimeZone timeZone24 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int25 = week21.compareTo((java.lang.Object) timeZone24);
        int int26 = week21.getYearValue();
        long long27 = week21.getMiddleMillisecond();
        java.lang.Class<?> wildcardClass28 = week21.getClass();
        org.jfree.data.time.Week week31 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date32 = week31.getStart();
        org.jfree.data.time.Week week35 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod36 = week35.next();
        int int37 = week35.getYearValue();
        java.util.TimeZone timeZone38 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int39 = week35.compareTo((java.lang.Object) timeZone38);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod40 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass28, date32, timeZone38);
        org.jfree.data.time.Week week43 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod44 = week43.next();
        java.lang.Class<?> wildcardClass45 = week43.getClass();
        java.lang.Class class46 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass45);
        org.jfree.data.time.Week week49 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date50 = week49.getStart();
        java.lang.Class class51 = null;
        java.util.Date date52 = null;
        java.util.TimeZone timeZone53 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod54 = org.jfree.data.time.RegularTimePeriod.createInstance(class51, date52, timeZone53);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod55 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass45, date50, timeZone53);
        org.jfree.data.time.Week week58 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date59 = week58.getStart();
        org.jfree.data.time.Week week60 = new org.jfree.data.time.Week(date59);
        java.util.TimeZone timeZone61 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod62 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass45, date59, timeZone61);
        org.jfree.data.time.Week week63 = new org.jfree.data.time.Week(date32, timeZone61);
        java.util.Locale locale64 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Week week65 = new org.jfree.data.time.Week(date18, timeZone61, locale64);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'locale' argument.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-60505750800001L) + "'", long12 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 52 + "'", int14 == 52);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-60506355600000L) + "'", long15 == (-60506355600000L));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 52 + "'", int16 == 52);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Week 35, 52" + "'", str17, "Week 35, 52");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 52 + "'", int23 == 52);
        org.junit.Assert.assertNotNull(timeZone24);
// flaky:         org.junit.Assert.assertEquals(timeZone24.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 52 + "'", int26 == 52);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + (-60506053200001L) + "'", long27 == (-60506053200001L));
        org.junit.Assert.assertNotNull(wildcardClass28);
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 52 + "'", int37 == 52);
        org.junit.Assert.assertNotNull(timeZone38);
// flaky:         org.junit.Assert.assertEquals(timeZone38.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod40);
        org.junit.Assert.assertNotNull(regularTimePeriod44);
        org.junit.Assert.assertNotNull(wildcardClass45);
        org.junit.Assert.assertNotNull(class46);
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone53);
// flaky:         org.junit.Assert.assertEquals(timeZone53.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod54);
        org.junit.Assert.assertNotNull(regularTimePeriod55);
        org.junit.Assert.assertNotNull(date59);
        org.junit.Assert.assertEquals(date59.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone61);
// flaky:         org.junit.Assert.assertEquals(timeZone61.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNotNull(regularTimePeriod62);
    }

    @Test
    public void test1326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1326");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.previous();
        java.util.Date date4 = week2.getStart();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod8 = week7.previous();
        int int9 = week7.getYearValue();
        java.util.Date date10 = week7.getStart();
        java.util.TimeZone timeZone11 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.Week week12 = new org.jfree.data.time.Week(date10, timeZone11);
        java.util.Locale locale13 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Week week14 = new org.jfree.data.time.Week(date4, timeZone11, locale13);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'locale' argument.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 52 + "'", int9 == 52);
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(timeZone11);
// flaky:         org.junit.Assert.assertEquals(timeZone11.getDisplayName(), "Central European Time");
    }

    @Test
    public void test1327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1327");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        java.lang.Class<?> wildcardClass4 = week2.getClass();
        java.lang.Class class5 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass4);
        java.lang.Class class6 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass4);
        java.lang.Class class7 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass4);
        java.lang.Class class8 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass4);
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(class5);
        org.junit.Assert.assertNotNull(class6);
        org.junit.Assert.assertNotNull(class7);
        org.junit.Assert.assertNotNull(class8);
    }

    @Test
    public void test1328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1328");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        int int10 = week2.getYearValue();
        java.lang.String str11 = week2.toString();
        java.lang.String str12 = week2.toString();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod13 = week2.next();
        java.util.Calendar calendar14 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long15 = week2.getLastMillisecond(calendar14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 52 + "'", int10 == 52);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Week 35, 52" + "'", str11, "Week 35, 52");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Week 35, 52" + "'", str12, "Week 35, 52");
        org.junit.Assert.assertNotNull(regularTimePeriod13);
    }

    @Test
    public void test1329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1329");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date3 = week2.getStart();
        java.util.Date date4 = week2.getEnd();
        int int5 = week2.getYearValue();
        java.util.Date date6 = week2.getStart();
        int int7 = week2.getWeek();
        int int8 = week2.getWeek();
        long long9 = week2.getFirstMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.next();
        org.jfree.data.time.Week week13 = new org.jfree.data.time.Week((-1), 35);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod14 = week13.previous();
        java.util.Date date15 = regularTimePeriod14.getStart();
        boolean boolean16 = week2.equals((java.lang.Object) date15);
        org.jfree.data.time.Week week19 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod20 = week19.next();
        int int21 = week19.getYearValue();
        java.util.TimeZone timeZone22 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int23 = week19.compareTo((java.lang.Object) timeZone22);
        int int24 = week19.getYearValue();
        int int26 = week19.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod27 = week19.previous();
        int int28 = week19.getYearValue();
        long long29 = week19.getLastMillisecond();
        int int30 = week19.getWeek();
        int int31 = week19.getYearValue();
        int int32 = week19.getWeek();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod33 = week19.previous();
        // The following exception was thrown during execution in test generation
        try {
            int int34 = week2.compareTo((java.lang.Object) regularTimePeriod33);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Year constructor: year (52) outside valid range.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 97 + "'", int5 == 97);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 9 + "'", int7 == 9);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 9 + "'", int8 == 9);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-59101405200000L) + "'", long9 == (-59101405200000L));
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertNotNull(regularTimePeriod14);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Sun Dec 05 00:00:00 CET 34");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(regularTimePeriod20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 52 + "'", int21 == 52);
        org.junit.Assert.assertNotNull(timeZone22);
// flaky:         org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 52 + "'", int24 == 52);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 52 + "'", int28 == 52);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + (-60505750800001L) + "'", long29 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 35 + "'", int30 == 35);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 52 + "'", int31 == 52);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 35 + "'", int32 == 35);
        org.junit.Assert.assertNotNull(regularTimePeriod33);
    }

    @Test
    public void test1330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1330");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.lang.String str5 = week2.toString();
        java.util.Calendar calendar6 = null;
        // The following exception was thrown during execution in test generation
        try {
            week2.peg(calendar6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Week 35, 52" + "'", str5, "Week 35, 52");
    }

    @Test
    public void test1331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1331");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date3 = week2.getStart();
        int int4 = week2.getWeek();
        long long5 = week2.getFirstMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod6 = week2.previous();
        org.jfree.data.time.Week week9 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week9.next();
        java.lang.Class<?> wildcardClass11 = week9.getClass();
        java.lang.Class class12 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass11);
        java.lang.Class class13 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass11);
        java.lang.Class class14 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass11);
        java.lang.Class class15 = org.jfree.data.time.RegularTimePeriod.downsize(class14);
        java.lang.Class class16 = org.jfree.data.time.RegularTimePeriod.downsize(class15);
        java.lang.Class class17 = org.jfree.data.time.RegularTimePeriod.downsize(class16);
        int int18 = week2.compareTo((java.lang.Object) class16);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-59101405200000L) + "'", long5 == (-59101405200000L));
        org.junit.Assert.assertNotNull(regularTimePeriod6);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertNotNull(wildcardClass11);
        org.junit.Assert.assertNotNull(class12);
        org.junit.Assert.assertNotNull(class13);
        org.junit.Assert.assertNotNull(class14);
        org.junit.Assert.assertNotNull(class15);
        org.junit.Assert.assertNotNull(class16);
        org.junit.Assert.assertNotNull(class17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
    }

    @Test
    public void test1332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1332");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) (short) 0, (-1969));
        long long3 = week2.getLastMillisecond();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-124304288400001L) + "'", long3 == (-124304288400001L));
    }

    @Test
    public void test1333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1333");
        org.jfree.data.time.Week week1 = new org.jfree.data.time.Week();
        long long2 = week1.getFirstMillisecond();
        org.jfree.data.time.Year year3 = week1.getYear();
        org.jfree.data.time.Week week4 = new org.jfree.data.time.Week(0, year3);
        org.jfree.data.time.Year year5 = week4.getYear();
        java.util.Date date6 = week4.getEnd();
        org.jfree.data.time.Week week9 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week9.next();
        int int11 = week9.getYearValue();
        java.util.TimeZone timeZone12 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int13 = week9.compareTo((java.lang.Object) timeZone12);
        int int14 = week9.getYearValue();
        int int16 = week9.compareTo((java.lang.Object) 9);
        int int17 = week9.getYearValue();
        long long18 = week9.getLastMillisecond();
        long long19 = week9.getSerialIndex();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod20 = week9.next();
        long long21 = week9.getFirstMillisecond();
        java.lang.String str22 = week9.toString();
        boolean boolean23 = week4.equals((java.lang.Object) week9);
        int int24 = week4.getWeek();
        java.util.Calendar calendar25 = null;
        // The following exception was thrown during execution in test generation
        try {
            week4.peg(calendar25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1637449200000L + "'", long2 == 1637449200000L);
        org.junit.Assert.assertNotNull(year3);
        org.junit.Assert.assertNotNull(year5);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Dec 26 23:59:59 CET 2020");
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertNotNull(timeZone12);
// flaky:         org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 52 + "'", int14 == 52);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 52 + "'", int17 == 52);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-60505750800001L) + "'", long18 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 2791L + "'", long19 == 2791L);
        org.junit.Assert.assertNotNull(regularTimePeriod20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-60506355600000L) + "'", long21 == (-60506355600000L));
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Week 35, 52" + "'", str22, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
    }

    @Test
    public void test1334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1334");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.next();
        java.util.Date date6 = week2.getEnd();
        int int7 = week2.getYearValue();
        int int8 = week2.getWeek();
        long long9 = week2.getMiddleMillisecond();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 35 + "'", int8 == 35);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-60506053200001L) + "'", long9 == (-60506053200001L));
    }

    @Test
    public void test1335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1335");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(35, (int) (short) 100);
    }

    @Test
    public void test1336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1336");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        int int11 = week2.getYearValue();
        long long12 = week2.getLastMillisecond();
        int int13 = week2.getWeek();
        int int14 = week2.getYearValue();
        long long15 = week2.getSerialIndex();
        java.util.Date date16 = week2.getEnd();
        org.jfree.data.time.Week week17 = new org.jfree.data.time.Week(date16);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod18 = week17.next();
        java.lang.String str19 = week17.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Year year20 = week17.getYear();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Year constructor: year (52) outside valid range.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-60505750800001L) + "'", long12 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 52 + "'", int14 == 52);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 2791L + "'", long15 == 2791L);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Week 35, 52" + "'", str19, "Week 35, 52");
    }

    @Test
    public void test1337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1337");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(35, (-5));
    }

    @Test
    public void test1338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1338");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.previous();
        int int4 = week2.getYearValue();
        java.util.Date date5 = week2.getStart();
        int int6 = week2.getYearValue();
        long long7 = week2.getLastMillisecond();
        java.util.Date date8 = week2.getEnd();
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Year year9 = week2.getYear();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Year constructor: year (52) outside valid range.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 52 + "'", int6 == 52);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-60505750800001L) + "'", long7 == (-60505750800001L));
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Sat Aug 26 23:59:59 CET 52");
    }

    @Test
    public void test1339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1339");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        int int10 = week2.getYearValue();
        long long11 = week2.getLastMillisecond();
        int int12 = week2.getYearValue();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod13 = week2.previous();
        java.util.Date date14 = week2.getEnd();
        java.util.Date date15 = week2.getEnd();
        java.lang.String str16 = week2.toString();
        org.jfree.data.time.Week week19 = new org.jfree.data.time.Week();
        long long20 = week19.getFirstMillisecond();
        org.jfree.data.time.Year year21 = week19.getYear();
        org.jfree.data.time.Week week22 = new org.jfree.data.time.Week(0, year21);
        org.jfree.data.time.Week week23 = new org.jfree.data.time.Week(53, year21);
        java.util.Date date24 = week23.getStart();
        int int25 = week2.compareTo((java.lang.Object) date24);
        java.util.Calendar calendar26 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long27 = week2.getLastMillisecond(calendar26);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 52 + "'", int10 == 52);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-60505750800001L) + "'", long11 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
        org.junit.Assert.assertNotNull(regularTimePeriod13);
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Week 35, 52" + "'", str16, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1637449200000L + "'", long20 == 1637449200000L);
        org.junit.Assert.assertNotNull(year21);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Sun Dec 26 00:00:00 CET 2021");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
    }

    @Test
    public void test1340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1340");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        int int11 = week2.getYearValue();
        long long12 = week2.getLastMillisecond();
        int int13 = week2.getWeek();
        int int14 = week2.getYearValue();
        long long15 = week2.getSerialIndex();
        java.util.Date date16 = week2.getEnd();
        org.jfree.data.time.Week week19 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date20 = week19.getStart();
        java.util.Date date21 = week19.getEnd();
        java.util.Date date22 = week19.getStart();
        org.jfree.data.time.Week week25 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date26 = week25.getStart();
        org.jfree.data.time.Week week29 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod30 = week29.next();
        int int31 = week29.getYearValue();
        java.util.TimeZone timeZone32 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int33 = week29.compareTo((java.lang.Object) timeZone32);
        org.jfree.data.time.Week week34 = new org.jfree.data.time.Week(date26, timeZone32);
        org.jfree.data.time.Week week35 = new org.jfree.data.time.Week(date22, timeZone32);
        org.jfree.data.time.Week week36 = new org.jfree.data.time.Week(date16, timeZone32);
        java.util.Calendar calendar37 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long38 = week36.getLastMillisecond(calendar37);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-60505750800001L) + "'", long12 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 52 + "'", int14 == 52);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 2791L + "'", long15 == 2791L);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 52 + "'", int31 == 52);
        org.junit.Assert.assertNotNull(timeZone32);
// flaky:         org.junit.Assert.assertEquals(timeZone32.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
    }

    @Test
    public void test1341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1341");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '4', (int) ' ');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.previous();
        int int4 = week2.getWeek();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.next();
        java.lang.String str6 = week2.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Year year7 = week2.getYear();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Year constructor: year (32) outside valid range.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Week 52, 32" + "'", str6, "Week 52, 32");
    }

    @Test
    public void test1342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1342");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.next();
        java.util.Date date6 = week2.getEnd();
        long long7 = week2.getLastMillisecond();
        java.util.Date date8 = week2.getEnd();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod9 = week2.next();
        org.jfree.data.time.Week week11 = new org.jfree.data.time.Week();
        long long12 = week11.getFirstMillisecond();
        org.jfree.data.time.Year year13 = week11.getYear();
        org.jfree.data.time.Week week14 = new org.jfree.data.time.Week(0, year13);
        long long15 = year13.getMiddleMillisecond();
        int int16 = week2.compareTo((java.lang.Object) long15);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod17 = week2.previous();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-60505750800001L) + "'", long7 == (-60505750800001L));
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod9);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1637449200000L + "'", long12 == 1637449200000L);
        org.junit.Assert.assertNotNull(year13);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1625223599999L + "'", long15 == 1625223599999L);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod17);
    }

    @Test
    public void test1343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1343");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        long long5 = week2.getFirstMillisecond();
        int int6 = week2.getWeek();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod7 = week2.previous();
        org.jfree.data.time.Week week10 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date11 = week10.getStart();
        org.jfree.data.time.Week week12 = new org.jfree.data.time.Week(date11);
        org.jfree.data.time.Week week15 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str16 = week15.toString();
        long long17 = week15.getMiddleMillisecond();
        long long18 = week15.getLastMillisecond();
        org.jfree.data.time.Week week21 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod22 = week21.next();
        java.lang.Class<?> wildcardClass23 = week21.getClass();
        java.lang.Class class24 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass23);
        int int25 = week15.compareTo((java.lang.Object) wildcardClass23);
        java.lang.Class class26 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass23);
        boolean boolean27 = week12.equals((java.lang.Object) wildcardClass23);
        org.jfree.data.time.Week week30 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod31 = week30.previous();
        int int32 = week30.getYearValue();
        java.util.Date date33 = week30.getStart();
        int int34 = week30.getYearValue();
        long long35 = week30.getSerialIndex();
        boolean boolean36 = week12.equals((java.lang.Object) week30);
        boolean boolean37 = week2.equals((java.lang.Object) boolean36);
        java.util.Date date38 = week2.getStart();
        org.jfree.data.time.Week week39 = new org.jfree.data.time.Week(date38);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod40 = week39.next();
        java.util.Date date41 = week39.getStart();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-60506355600000L) + "'", long5 == (-60506355600000L));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 35 + "'", int6 == 35);
        org.junit.Assert.assertNotNull(regularTimePeriod7);
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Week 35, 52" + "'", str16, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-60506053200001L) + "'", long17 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-60505750800001L) + "'", long18 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod22);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertNotNull(class24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(class26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(regularTimePeriod31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 52 + "'", int32 == 52);
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 52 + "'", int34 == 52);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 2791L + "'", long35 == 2791L);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod40);
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Sun Aug 20 00:00:00 CET 52");
    }

    @Test
    public void test1344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1344");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.next();
        java.util.Date date6 = week2.getEnd();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week(date6);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod8 = week7.next();
        org.jfree.data.time.Week week11 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str12 = week11.toString();
        long long13 = week11.getSerialIndex();
        boolean boolean14 = week7.equals((java.lang.Object) long13);
        java.lang.String str15 = week7.toString();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod16 = week7.next();
        long long17 = week7.getLastMillisecond();
        java.util.Calendar calendar18 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long19 = week7.getFirstMillisecond(calendar18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod8);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Week 35, 52" + "'", str12, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 2791L + "'", long13 == 2791L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Week 35, 52" + "'", str15, "Week 35, 52");
        org.junit.Assert.assertNotNull(regularTimePeriod16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-60505750800001L) + "'", long17 == (-60505750800001L));
    }

    @Test
    public void test1345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1345");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(3, (int) (byte) 10);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        java.lang.Class<?> wildcardClass4 = regularTimePeriod3.getClass();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test1346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1346");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(100, 10);
        java.util.Date date3 = week2.getEnd();
        org.jfree.data.time.Week week6 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date7 = week6.getStart();
        java.util.Date date8 = week6.getEnd();
        int int9 = week6.getYearValue();
        long long10 = week6.getLastMillisecond();
        java.lang.Class<?> wildcardClass11 = week6.getClass();
        java.util.Date date12 = null;
        org.jfree.data.time.Week week15 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.util.Date date16 = week15.getStart();
        int int17 = week15.getYearValue();
        java.util.Date date18 = week15.getEnd();
        org.jfree.data.time.Week week21 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod22 = week21.next();
        java.lang.Class<?> wildcardClass23 = week21.getClass();
        java.lang.Class class24 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass23);
        java.lang.Class class25 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass23);
        org.jfree.data.time.Week week28 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod29 = week28.next();
        int int30 = week28.getYearValue();
        java.util.TimeZone timeZone31 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int32 = week28.compareTo((java.lang.Object) timeZone31);
        int int33 = week28.getYearValue();
        int int35 = week28.compareTo((java.lang.Object) 9);
        java.util.Date date36 = week28.getStart();
        org.jfree.data.time.Week week37 = new org.jfree.data.time.Week(date36);
        org.jfree.data.time.Week week40 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod41 = week40.next();
        int int42 = week40.getYearValue();
        java.util.TimeZone timeZone43 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int44 = week40.compareTo((java.lang.Object) timeZone43);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod45 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass23, date36, timeZone43);
        org.jfree.data.time.Week week48 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod49 = week48.previous();
        int int50 = week48.getYearValue();
        java.util.Date date51 = week48.getStart();
        java.util.TimeZone timeZone52 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.Week week53 = new org.jfree.data.time.Week(date51, timeZone52);
        org.jfree.data.time.Week week54 = new org.jfree.data.time.Week(date36, timeZone52);
        org.jfree.data.time.Week week55 = new org.jfree.data.time.Week(date18, timeZone52);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod56 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass11, date12, timeZone52);
        org.jfree.data.time.Week week57 = new org.jfree.data.time.Week(date3, timeZone52);
        org.jfree.data.time.Week week58 = new org.jfree.data.time.Week(date3);
        org.jfree.data.time.Week week59 = new org.jfree.data.time.Week(date3);
        org.jfree.data.time.Week week60 = new org.jfree.data.time.Week(date3);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sat Nov 28 23:59:59 CET 11");
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 97 + "'", int9 == 97);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-59100800400001L) + "'", long10 == (-59100800400001L));
        org.junit.Assert.assertNotNull(wildcardClass11);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 52 + "'", int17 == 52);
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod22);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertNotNull(class24);
        org.junit.Assert.assertNotNull(class25);
        org.junit.Assert.assertNotNull(regularTimePeriod29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 52 + "'", int30 == 52);
        org.junit.Assert.assertNotNull(timeZone31);
// flaky:         org.junit.Assert.assertEquals(timeZone31.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 52 + "'", int33 == 52);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 52 + "'", int42 == 52);
        org.junit.Assert.assertNotNull(timeZone43);
// flaky:         org.junit.Assert.assertEquals(timeZone43.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod45);
        org.junit.Assert.assertNotNull(regularTimePeriod49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 52 + "'", int50 == 52);
        org.junit.Assert.assertNotNull(date51);
        org.junit.Assert.assertEquals(date51.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(timeZone52);
// flaky:         org.junit.Assert.assertEquals(timeZone52.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod56);
    }

    @Test
    public void test1347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1347");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) (byte) 0, (int) (byte) -1);
        long long3 = week2.getSerialIndex();
        long long4 = week2.getMiddleMillisecond();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-53L) + "'", long3 == (-53L));
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-62199493200001L) + "'", long4 == (-62199493200001L));
    }

    @Test
    public void test1348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1348");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        long long7 = week2.getFirstMillisecond();
        java.lang.String str8 = week2.toString();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod9 = week2.previous();
        java.util.Calendar calendar10 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long11 = week2.getMiddleMillisecond(calendar10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-60506355600000L) + "'", long7 == (-60506355600000L));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Week 35, 52" + "'", str8, "Week 35, 52");
        org.junit.Assert.assertNotNull(regularTimePeriod9);
    }

    @Test
    public void test1349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1349");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod11 = week2.next();
        java.util.Date date12 = week2.getStart();
        org.jfree.data.time.Week week13 = new org.jfree.data.time.Week();
        long long14 = week13.getFirstMillisecond();
        org.jfree.data.time.Year year15 = week13.getYear();
        int int16 = week13.getWeek();
        int int17 = week13.getWeek();
        int int18 = week2.compareTo((java.lang.Object) week13);
        java.lang.Class<?> wildcardClass19 = week2.getClass();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertNotNull(regularTimePeriod11);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1637449200000L + "'", long14 == 1637449200000L);
        org.junit.Assert.assertNotNull(year15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 48 + "'", int16 == 48);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 48 + "'", int17 == 48);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1969) + "'", int18 == (-1969));
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test1350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1350");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getWeek();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod8 = week2.next();
        boolean boolean10 = week2.equals((java.lang.Object) 3);
        long long11 = week2.getLastMillisecond();
        java.lang.String str12 = week2.toString();
        java.util.Date date13 = week2.getEnd();
        org.jfree.data.time.Week week16 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod17 = week16.next();
        int int18 = week16.getYearValue();
        java.util.TimeZone timeZone19 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int20 = week16.compareTo((java.lang.Object) timeZone19);
        int int21 = week16.getYearValue();
        int int23 = week16.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod24 = week16.previous();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod25 = week16.next();
        org.jfree.data.time.Week week28 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod29 = week28.next();
        java.lang.Class<?> wildcardClass30 = week28.getClass();
        java.lang.Class class31 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass30);
        java.lang.Class class32 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass30);
        boolean boolean33 = week16.equals((java.lang.Object) wildcardClass30);
        java.lang.Class class34 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass30);
        org.jfree.data.time.Week week37 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date38 = week37.getStart();
        java.util.Date date39 = week37.getEnd();
        org.jfree.data.time.Week week42 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod43 = week42.next();
        java.lang.Class<?> wildcardClass44 = week42.getClass();
        java.lang.Class class45 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass44);
        org.jfree.data.time.Week week48 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date49 = week48.getStart();
        java.lang.Class class50 = null;
        java.util.Date date51 = null;
        java.util.TimeZone timeZone52 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod53 = org.jfree.data.time.RegularTimePeriod.createInstance(class50, date51, timeZone52);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod54 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass44, date49, timeZone52);
        org.jfree.data.time.Week week55 = new org.jfree.data.time.Week(date39, timeZone52);
        java.lang.Class class56 = null;
        java.util.Date date57 = null;
        java.util.TimeZone timeZone58 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod59 = org.jfree.data.time.RegularTimePeriod.createInstance(class56, date57, timeZone58);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod60 = org.jfree.data.time.RegularTimePeriod.createInstance(class34, date39, timeZone58);
        org.jfree.data.time.Week week61 = new org.jfree.data.time.Week(date13, timeZone58);
        org.jfree.data.time.Week week64 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str65 = week64.toString();
        long long66 = week64.getSerialIndex();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod67 = week64.next();
        java.util.Date date68 = regularTimePeriod67.getEnd();
        org.jfree.data.time.Week week71 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date72 = week71.getStart();
        org.jfree.data.time.Week week75 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod76 = week75.next();
        int int77 = week75.getYearValue();
        java.util.TimeZone timeZone78 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int79 = week75.compareTo((java.lang.Object) timeZone78);
        org.jfree.data.time.Week week80 = new org.jfree.data.time.Week(date72, timeZone78);
        org.jfree.data.time.Week week81 = new org.jfree.data.time.Week(date68, timeZone78);
        org.jfree.data.time.Week week82 = new org.jfree.data.time.Week(date13, timeZone78);
        long long83 = week82.getFirstMillisecond();
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Year year84 = week82.getYear();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Year constructor: year (52) outside valid range.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 35 + "'", int7 == 35);
        org.junit.Assert.assertNotNull(regularTimePeriod8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-60505750800001L) + "'", long11 == (-60505750800001L));
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Week 35, 52" + "'", str12, "Week 35, 52");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 52 + "'", int18 == 52);
        org.junit.Assert.assertNotNull(timeZone19);
// flaky:         org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 52 + "'", int21 == 52);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod24);
        org.junit.Assert.assertNotNull(regularTimePeriod25);
        org.junit.Assert.assertNotNull(regularTimePeriod29);
        org.junit.Assert.assertNotNull(wildcardClass30);
        org.junit.Assert.assertNotNull(class31);
        org.junit.Assert.assertNotNull(class32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(class34);
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod43);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(class45);
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone52);
// flaky:         org.junit.Assert.assertEquals(timeZone52.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod53);
        org.junit.Assert.assertNotNull(regularTimePeriod54);
        org.junit.Assert.assertNotNull(timeZone58);
// flaky:         org.junit.Assert.assertEquals(timeZone58.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod59);
        org.junit.Assert.assertNull(regularTimePeriod60);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "Week 35, 52" + "'", str65, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 2791L + "'", long66 == 2791L);
        org.junit.Assert.assertNotNull(regularTimePeriod67);
        org.junit.Assert.assertNotNull(date68);
        org.junit.Assert.assertEquals(date68.toString(), "Sat Sep 02 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date72);
        org.junit.Assert.assertEquals(date72.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 52 + "'", int77 == 52);
        org.junit.Assert.assertNotNull(timeZone78);
// flaky:         org.junit.Assert.assertEquals(timeZone78.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 1 + "'", int79 == 1);
        org.junit.Assert.assertTrue("'" + long83 + "' != '" + (-60506355600000L) + "'", long83 == (-60506355600000L));
    }

    @Test
    public void test1351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1351");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(4, (int) (short) 1);
        long long3 = week2.getSerialIndex();
        java.util.Date date4 = week2.getEnd();
        org.jfree.data.time.Week week5 = new org.jfree.data.time.Week(date4);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 57L + "'", long3 == 57L);
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Sat Jan 22 23:59:59 CET 1");
    }

    @Test
    public void test1352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1352");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        java.util.Date date10 = week2.getStart();
        org.jfree.data.time.Week week11 = new org.jfree.data.time.Week(date10);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod12 = week11.next();
        int int13 = week11.getYearValue();
        java.util.Date date14 = week11.getStart();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod15 = week11.next();
        java.util.Calendar calendar16 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long17 = regularTimePeriod15.getMiddleMillisecond(calendar16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 52 + "'", int13 == 52);
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod15);
    }

    @Test
    public void test1353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1353");
        org.jfree.data.time.Week week4 = new org.jfree.data.time.Week();
        long long5 = week4.getFirstMillisecond();
        org.jfree.data.time.Year year6 = week4.getYear();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week(52, year6);
        java.util.Date date8 = year6.getStart();
        org.jfree.data.time.Week week9 = new org.jfree.data.time.Week(100, year6);
        org.jfree.data.time.Week week10 = new org.jfree.data.time.Week(35, year6);
        java.util.Date date11 = year6.getStart();
        org.jfree.data.time.Week week12 = new org.jfree.data.time.Week((-1924), year6);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1637449200000L + "'", long5 == 1637449200000L);
        org.junit.Assert.assertNotNull(year6);
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Fri Jan 01 00:00:00 CET 2021");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Fri Jan 01 00:00:00 CET 2021");
    }

    @Test
    public void test1354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1354");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        int int10 = week2.getYearValue();
        long long11 = week2.getLastMillisecond();
        int int12 = week2.getYearValue();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod13 = week2.previous();
        java.util.Date date14 = week2.getEnd();
        java.util.Date date15 = week2.getEnd();
        int int16 = week2.getWeek();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 52 + "'", int10 == 52);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-60505750800001L) + "'", long11 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
        org.junit.Assert.assertNotNull(regularTimePeriod13);
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 35 + "'", int16 == 35);
    }

    @Test
    public void test1355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1355");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        int int11 = week2.getYearValue();
        long long12 = week2.getLastMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod13 = week2.previous();
        java.util.Date date14 = week2.getStart();
        int int15 = week2.getYearValue();
        java.util.Calendar calendar16 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long17 = week2.getLastMillisecond(calendar16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-60505750800001L) + "'", long12 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod13);
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 52 + "'", int15 == 52);
    }

    @Test
    public void test1356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1356");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.util.Date date3 = week2.getStart();
        org.jfree.data.time.Week week6 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.util.Date date7 = week6.getStart();
        int int8 = week6.getYearValue();
        java.util.Date date9 = week6.getEnd();
        org.jfree.data.time.Week week12 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod13 = week12.next();
        java.lang.Class<?> wildcardClass14 = week12.getClass();
        java.lang.Class class15 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass14);
        java.lang.Class class16 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass14);
        org.jfree.data.time.Week week19 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod20 = week19.next();
        int int21 = week19.getYearValue();
        java.util.TimeZone timeZone22 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int23 = week19.compareTo((java.lang.Object) timeZone22);
        int int24 = week19.getYearValue();
        int int26 = week19.compareTo((java.lang.Object) 9);
        java.util.Date date27 = week19.getStart();
        org.jfree.data.time.Week week28 = new org.jfree.data.time.Week(date27);
        org.jfree.data.time.Week week31 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod32 = week31.next();
        int int33 = week31.getYearValue();
        java.util.TimeZone timeZone34 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int35 = week31.compareTo((java.lang.Object) timeZone34);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod36 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass14, date27, timeZone34);
        org.jfree.data.time.Week week39 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod40 = week39.previous();
        int int41 = week39.getYearValue();
        java.util.Date date42 = week39.getStart();
        java.util.TimeZone timeZone43 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.Week week44 = new org.jfree.data.time.Week(date42, timeZone43);
        org.jfree.data.time.Week week45 = new org.jfree.data.time.Week(date27, timeZone43);
        org.jfree.data.time.Week week46 = new org.jfree.data.time.Week(date9, timeZone43);
        boolean boolean47 = week2.equals((java.lang.Object) date9);
        org.jfree.data.time.Week week50 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date51 = week50.getStart();
        org.jfree.data.time.Week week54 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod55 = week54.next();
        int int56 = week54.getYearValue();
        java.util.TimeZone timeZone57 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int58 = week54.compareTo((java.lang.Object) timeZone57);
        org.jfree.data.time.Week week59 = new org.jfree.data.time.Week(date51, timeZone57);
        org.jfree.data.time.Week week60 = new org.jfree.data.time.Week(date51);
        org.jfree.data.time.Week week63 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod64 = week63.next();
        int int65 = week63.getYearValue();
        java.util.TimeZone timeZone66 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int67 = week63.compareTo((java.lang.Object) timeZone66);
        int int68 = week63.getYearValue();
        long long69 = week63.getMiddleMillisecond();
        java.lang.Class<?> wildcardClass70 = week63.getClass();
        org.jfree.data.time.Week week73 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date74 = week73.getStart();
        org.jfree.data.time.Week week77 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod78 = week77.next();
        int int79 = week77.getYearValue();
        java.util.TimeZone timeZone80 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int81 = week77.compareTo((java.lang.Object) timeZone80);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod82 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass70, date74, timeZone80);
        org.jfree.data.time.Week week83 = new org.jfree.data.time.Week(date74);
        org.jfree.data.time.Week week86 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod87 = week86.next();
        int int88 = week86.getYearValue();
        java.util.TimeZone timeZone89 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int90 = week86.compareTo((java.lang.Object) timeZone89);
        org.jfree.data.time.Week week91 = new org.jfree.data.time.Week(date74, timeZone89);
        int int92 = week60.compareTo((java.lang.Object) timeZone89);
        org.jfree.data.time.Week week93 = new org.jfree.data.time.Week(date9, timeZone89);
        java.util.Date date94 = week93.getEnd();
        long long95 = week93.getSerialIndex();
        java.lang.String str96 = week93.toString();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod97 = week93.previous();
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 52 + "'", int8 == 52);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod13);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(class15);
        org.junit.Assert.assertNotNull(class16);
        org.junit.Assert.assertNotNull(regularTimePeriod20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 52 + "'", int21 == 52);
        org.junit.Assert.assertNotNull(timeZone22);
// flaky:         org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 52 + "'", int24 == 52);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 52 + "'", int33 == 52);
        org.junit.Assert.assertNotNull(timeZone34);
// flaky:         org.junit.Assert.assertEquals(timeZone34.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod36);
        org.junit.Assert.assertNotNull(regularTimePeriod40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 52 + "'", int41 == 52);
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(timeZone43);
// flaky:         org.junit.Assert.assertEquals(timeZone43.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(date51);
        org.junit.Assert.assertEquals(date51.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 52 + "'", int56 == 52);
        org.junit.Assert.assertNotNull(timeZone57);
// flaky:         org.junit.Assert.assertEquals(timeZone57.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 52 + "'", int65 == 52);
        org.junit.Assert.assertNotNull(timeZone66);
// flaky:         org.junit.Assert.assertEquals(timeZone66.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 52 + "'", int68 == 52);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + (-60506053200001L) + "'", long69 == (-60506053200001L));
        org.junit.Assert.assertNotNull(wildcardClass70);
        org.junit.Assert.assertNotNull(date74);
        org.junit.Assert.assertEquals(date74.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 52 + "'", int79 == 52);
        org.junit.Assert.assertNotNull(timeZone80);
// flaky:         org.junit.Assert.assertEquals(timeZone80.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 1 + "'", int81 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod82);
        org.junit.Assert.assertNotNull(regularTimePeriod87);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 52 + "'", int88 == 52);
        org.junit.Assert.assertNotNull(timeZone89);
// flaky:         org.junit.Assert.assertEquals(timeZone89.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 1 + "'", int90 == 1);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 1 + "'", int92 == 1);
        org.junit.Assert.assertNotNull(date94);
        org.junit.Assert.assertEquals(date94.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + long95 + "' != '" + 2791L + "'", long95 == 2791L);
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "Week 35, 52" + "'", str96, "Week 35, 52");
        org.junit.Assert.assertNotNull(regularTimePeriod97);
    }

    @Test
    public void test1357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1357");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date3 = week2.getStart();
        org.jfree.data.time.Week week4 = new org.jfree.data.time.Week(date3);
        long long5 = week4.getSerialIndex();
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str9 = week8.toString();
        long long10 = week8.getSerialIndex();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod11 = week8.next();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod12 = week8.previous();
        java.lang.Class<?> wildcardClass13 = week8.getClass();
        java.lang.Class class14 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass13);
        boolean boolean15 = week4.equals((java.lang.Object) wildcardClass13);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod16 = week4.previous();
        java.util.Calendar calendar17 = null;
        // The following exception was thrown during execution in test generation
        try {
            week4.peg(calendar17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 5150L + "'", long5 == 5150L);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Week 35, 52" + "'", str9, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 2791L + "'", long10 == 2791L);
        org.junit.Assert.assertNotNull(regularTimePeriod11);
        org.junit.Assert.assertNotNull(regularTimePeriod12);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(class14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(regularTimePeriod16);
    }

    @Test
    public void test1358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1358");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.previous();
        java.util.Date date4 = week2.getEnd();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod8 = week7.next();
        int int9 = week7.getYearValue();
        java.util.TimeZone timeZone10 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int11 = week7.compareTo((java.lang.Object) timeZone10);
        int int12 = week7.getYearValue();
        int int14 = week7.compareTo((java.lang.Object) 9);
        int int15 = week7.getYearValue();
        long long16 = week7.getLastMillisecond();
        int int17 = week7.getWeek();
        java.util.Date date18 = week7.getEnd();
        org.jfree.data.time.Week week21 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date22 = week21.getStart();
        java.util.Date date23 = week21.getEnd();
        org.jfree.data.time.Week week26 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod27 = week26.next();
        java.lang.Class<?> wildcardClass28 = week26.getClass();
        java.lang.Class class29 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass28);
        org.jfree.data.time.Week week32 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date33 = week32.getStart();
        java.lang.Class class34 = null;
        java.util.Date date35 = null;
        java.util.TimeZone timeZone36 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod37 = org.jfree.data.time.RegularTimePeriod.createInstance(class34, date35, timeZone36);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod38 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass28, date33, timeZone36);
        org.jfree.data.time.Week week39 = new org.jfree.data.time.Week(date23, timeZone36);
        org.jfree.data.time.Week week40 = new org.jfree.data.time.Week(date18, timeZone36);
        org.jfree.data.time.Week week41 = new org.jfree.data.time.Week(date4, timeZone36);
        long long42 = week41.getLastMillisecond();
        long long43 = week41.getLastMillisecond();
        long long44 = week41.getLastMillisecond();
        java.util.Calendar calendar45 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long46 = week41.getLastMillisecond(calendar45);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 52 + "'", int9 == 52);
        org.junit.Assert.assertNotNull(timeZone10);
// flaky:         org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 52 + "'", int15 == 52);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-60505750800001L) + "'", long16 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 35 + "'", int17 == 35);
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod27);
        org.junit.Assert.assertNotNull(wildcardClass28);
        org.junit.Assert.assertNotNull(class29);
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone36);
// flaky:         org.junit.Assert.assertEquals(timeZone36.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod37);
        org.junit.Assert.assertNotNull(regularTimePeriod38);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + (-60505750800001L) + "'", long42 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + (-60505750800001L) + "'", long43 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + (-60505750800001L) + "'", long44 == (-60505750800001L));
    }

    @Test
    public void test1359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1359");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(2022, (int) 'a');
        java.util.Date date3 = week2.getStart();
        org.jfree.data.time.Week week6 = new org.jfree.data.time.Week((int) '4', (int) ' ');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod7 = week6.previous();
        int int8 = week6.getWeek();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod9 = week6.next();
        boolean boolean10 = week2.equals((java.lang.Object) regularTimePeriod9);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Jun 26 00:00:00 CET 96");
        org.junit.Assert.assertNotNull(regularTimePeriod7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 52 + "'", int8 == 52);
        org.junit.Assert.assertNotNull(regularTimePeriod9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test1360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1360");
        org.jfree.data.time.Week week1 = new org.jfree.data.time.Week();
        long long2 = week1.getFirstMillisecond();
        org.jfree.data.time.Year year3 = week1.getYear();
        org.jfree.data.time.Week week4 = new org.jfree.data.time.Week(0, year3);
        java.util.Date date5 = week4.getStart();
        java.util.Date date6 = week4.getStart();
        java.lang.Class<?> wildcardClass7 = week4.getClass();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1637449200000L + "'", long2 == 1637449200000L);
        org.junit.Assert.assertNotNull(year3);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Sun Dec 20 00:00:00 CET 2020");
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sun Dec 20 00:00:00 CET 2020");
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test1361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1361");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        int int11 = week2.getYearValue();
        long long12 = week2.getLastMillisecond();
        int int13 = week2.getWeek();
        int int14 = week2.getYearValue();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod15 = week2.next();
        int int16 = week2.getYearValue();
        long long17 = week2.getSerialIndex();
        java.util.Calendar calendar18 = null;
        // The following exception was thrown during execution in test generation
        try {
            week2.peg(calendar18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-60505750800001L) + "'", long12 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 52 + "'", int14 == 52);
        org.junit.Assert.assertNotNull(regularTimePeriod15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 52 + "'", int16 == 52);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 2791L + "'", long17 == 2791L);
    }

    @Test
    public void test1362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1362");
        org.jfree.data.time.Week week1 = new org.jfree.data.time.Week();
        long long2 = week1.getFirstMillisecond();
        org.jfree.data.time.Year year3 = week1.getYear();
        org.jfree.data.time.Week week4 = new org.jfree.data.time.Week(0, year3);
        java.util.Date date5 = week4.getStart();
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str9 = week8.toString();
        long long10 = week8.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod11 = week8.next();
        java.util.Date date12 = week8.getEnd();
        org.jfree.data.time.Week week13 = new org.jfree.data.time.Week(date12);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod14 = week13.next();
        java.util.Date date15 = week13.getEnd();
        java.util.TimeZone timeZone16 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.Week week17 = new org.jfree.data.time.Week(date15, timeZone16);
        org.jfree.data.time.Week week18 = new org.jfree.data.time.Week(date5, timeZone16);
        long long19 = week18.getMiddleMillisecond();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1637449200000L + "'", long2 == 1637449200000L);
        org.junit.Assert.assertNotNull(year3);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Sun Dec 20 00:00:00 CET 2020");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Week 35, 52" + "'", str9, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-60506053200001L) + "'", long10 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod11);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod14);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(timeZone16);
// flaky:         org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 1608721199999L + "'", long19 == 1608721199999L);
    }

    @Test
    public void test1363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1363");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        int int11 = week2.getYearValue();
        long long12 = week2.getLastMillisecond();
        int int13 = week2.getWeek();
        int int14 = week2.getYearValue();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod15 = week2.next();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod16 = week2.next();
        java.lang.String str17 = week2.toString();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-60505750800001L) + "'", long12 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 52 + "'", int14 == 52);
        org.junit.Assert.assertNotNull(regularTimePeriod15);
        org.junit.Assert.assertNotNull(regularTimePeriod16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Week 35, 52" + "'", str17, "Week 35, 52");
    }

    @Test
    public void test1364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1364");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date3 = week2.getStart();
        java.util.Date date4 = week2.getEnd();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.next();
        java.lang.Class<?> wildcardClass6 = week2.getClass();
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test1365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1365");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date3 = week2.getStart();
        org.jfree.data.time.Week week4 = new org.jfree.data.time.Week(date3);
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str8 = week7.toString();
        long long9 = week7.getMiddleMillisecond();
        long long10 = week7.getLastMillisecond();
        org.jfree.data.time.Week week13 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod14 = week13.next();
        java.lang.Class<?> wildcardClass15 = week13.getClass();
        java.lang.Class class16 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass15);
        int int17 = week7.compareTo((java.lang.Object) wildcardClass15);
        java.lang.Class class18 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass15);
        boolean boolean19 = week4.equals((java.lang.Object) wildcardClass15);
        org.jfree.data.time.Week week22 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod23 = week22.previous();
        int int24 = week22.getYearValue();
        java.util.Date date25 = week22.getStart();
        int int26 = week22.getYearValue();
        long long27 = week22.getSerialIndex();
        boolean boolean28 = week4.equals((java.lang.Object) week22);
        long long29 = week22.getLastMillisecond();
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Week 35, 52" + "'", str8, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-60506053200001L) + "'", long9 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-60505750800001L) + "'", long10 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod14);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNotNull(class16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(class18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(regularTimePeriod23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 52 + "'", int24 == 52);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 52 + "'", int26 == 52);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 2791L + "'", long27 == 2791L);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + (-60505750800001L) + "'", long29 == (-60505750800001L));
    }

    @Test
    public void test1366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1366");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date3 = week2.getStart();
        org.jfree.data.time.Week week4 = new org.jfree.data.time.Week(date3);
        long long5 = week4.getSerialIndex();
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str9 = week8.toString();
        long long10 = week8.getSerialIndex();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod11 = week8.next();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod12 = week8.previous();
        java.lang.Class<?> wildcardClass13 = week8.getClass();
        java.lang.Class class14 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass13);
        boolean boolean15 = week4.equals((java.lang.Object) wildcardClass13);
        int int16 = week4.getYearValue();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod17 = week4.next();
        java.lang.String str18 = week4.toString();
        org.jfree.data.time.Week week21 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod22 = week21.next();
        int int23 = week21.getYearValue();
        java.util.TimeZone timeZone24 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int25 = week21.compareTo((java.lang.Object) timeZone24);
        int int26 = week21.getYearValue();
        int int28 = week21.compareTo((java.lang.Object) 9);
        int int29 = week21.getYearValue();
        int int30 = week21.getYearValue();
        int int31 = week21.getYearValue();
        org.jfree.data.time.Week week34 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str35 = week34.toString();
        long long36 = week34.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod37 = week34.next();
        java.util.Date date38 = week34.getEnd();
        org.jfree.data.time.Week week39 = new org.jfree.data.time.Week(date38);
        long long40 = week39.getLastMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod41 = week39.next();
        boolean boolean42 = week21.equals((java.lang.Object) regularTimePeriod41);
        org.jfree.data.time.Week week44 = new org.jfree.data.time.Week();
        long long45 = week44.getFirstMillisecond();
        org.jfree.data.time.Year year46 = week44.getYear();
        org.jfree.data.time.Week week47 = new org.jfree.data.time.Week(0, year46);
        java.util.Date date48 = year46.getStart();
        int int49 = week21.compareTo((java.lang.Object) year46);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod50 = week21.next();
        boolean boolean51 = week4.equals((java.lang.Object) week21);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 5150L + "'", long5 == 5150L);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Week 35, 52" + "'", str9, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 2791L + "'", long10 == 2791L);
        org.junit.Assert.assertNotNull(regularTimePeriod11);
        org.junit.Assert.assertNotNull(regularTimePeriod12);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(class14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 97 + "'", int16 == 97);
        org.junit.Assert.assertNotNull(regularTimePeriod17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Week 9, 97" + "'", str18, "Week 9, 97");
        org.junit.Assert.assertNotNull(regularTimePeriod22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 52 + "'", int23 == 52);
        org.junit.Assert.assertNotNull(timeZone24);
// flaky:         org.junit.Assert.assertEquals(timeZone24.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 52 + "'", int26 == 52);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 52 + "'", int29 == 52);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 52 + "'", int30 == 52);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 52 + "'", int31 == 52);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Week 35, 52" + "'", str35, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + (-60506053200001L) + "'", long36 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod37);
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + (-60505750800001L) + "'", long40 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 1637449200000L + "'", long45 == 1637449200000L);
        org.junit.Assert.assertNotNull(year46);
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Fri Jan 01 00:00:00 CET 2021");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(regularTimePeriod50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
    }

    @Test
    public void test1367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1367");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '4', (int) ' ');
        java.util.Date date3 = week2.getStart();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod4 = week2.next();
        long long5 = week2.getLastMillisecond();
        long long6 = week2.getLastMillisecond();
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Dec 21 00:00:00 CET 32");
        org.junit.Assert.assertNotNull(regularTimePeriod4);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-61126275600001L) + "'", long5 == (-61126275600001L));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-61126275600001L) + "'", long6 == (-61126275600001L));
    }

    @Test
    public void test1368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1368");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        int int10 = week2.getYearValue();
        long long11 = week2.getLastMillisecond();
        int int12 = week2.getWeek();
        java.util.Date date13 = week2.getEnd();
        org.jfree.data.time.Week week16 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date17 = week16.getStart();
        java.util.Date date18 = week16.getEnd();
        org.jfree.data.time.Week week21 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod22 = week21.next();
        java.lang.Class<?> wildcardClass23 = week21.getClass();
        java.lang.Class class24 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass23);
        org.jfree.data.time.Week week27 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date28 = week27.getStart();
        java.lang.Class class29 = null;
        java.util.Date date30 = null;
        java.util.TimeZone timeZone31 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod32 = org.jfree.data.time.RegularTimePeriod.createInstance(class29, date30, timeZone31);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod33 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass23, date28, timeZone31);
        org.jfree.data.time.Week week34 = new org.jfree.data.time.Week(date18, timeZone31);
        org.jfree.data.time.Week week35 = new org.jfree.data.time.Week(date13, timeZone31);
        java.util.Date date36 = week35.getStart();
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Year year37 = week35.getYear();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Year constructor: year (52) outside valid range.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 52 + "'", int10 == 52);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-60505750800001L) + "'", long11 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 35 + "'", int12 == 35);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod22);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertNotNull(class24);
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone31);
// flaky:         org.junit.Assert.assertEquals(timeZone31.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod32);
        org.junit.Assert.assertNotNull(regularTimePeriod33);
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Sun Aug 20 00:00:00 CET 52");
    }

    @Test
    public void test1369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1369");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        long long5 = week2.getLastMillisecond();
        boolean boolean7 = week2.equals((java.lang.Object) (short) 10);
        long long8 = week2.getMiddleMillisecond();
        java.util.Calendar calendar9 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long10 = week2.getLastMillisecond(calendar9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-60505750800001L) + "'", long5 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-60506053200001L) + "'", long8 == (-60506053200001L));
    }

    @Test
    public void test1370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1370");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.next();
        java.util.Date date6 = week2.getEnd();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week(date6);
        long long8 = week7.getLastMillisecond();
        java.lang.String str9 = week7.toString();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week7.next();
        long long11 = week7.getFirstMillisecond();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-60505750800001L) + "'", long8 == (-60505750800001L));
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Week 35, 52" + "'", str9, "Week 35, 52");
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-60506355600000L) + "'", long11 == (-60506355600000L));
    }

    @Test
    public void test1371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1371");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        int int10 = week2.getYearValue();
        java.lang.String str11 = week2.toString();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod12 = week2.previous();
        java.util.Date date13 = regularTimePeriod12.getEnd();
        org.jfree.data.time.Week week16 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod17 = week16.previous();
        int int18 = week16.getYearValue();
        long long19 = week16.getSerialIndex();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod20 = week16.next();
        java.util.Date date21 = regularTimePeriod20.getEnd();
        java.util.Date date22 = regularTimePeriod20.getStart();
        org.jfree.data.time.Week week25 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod26 = week25.next();
        int int27 = week25.getYearValue();
        long long28 = week25.getLastMillisecond();
        java.util.Date date29 = week25.getEnd();
        org.jfree.data.time.Week week32 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str33 = week32.toString();
        long long34 = week32.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod35 = week32.next();
        java.util.Date date36 = week32.getEnd();
        org.jfree.data.time.Week week37 = new org.jfree.data.time.Week(date36);
        org.jfree.data.time.Week week40 = new org.jfree.data.time.Week(100, 10);
        java.util.Date date41 = week40.getEnd();
        org.jfree.data.time.Week week44 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date45 = week44.getStart();
        java.util.Date date46 = week44.getEnd();
        int int47 = week44.getYearValue();
        long long48 = week44.getLastMillisecond();
        java.lang.Class<?> wildcardClass49 = week44.getClass();
        java.util.Date date50 = null;
        org.jfree.data.time.Week week53 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.util.Date date54 = week53.getStart();
        int int55 = week53.getYearValue();
        java.util.Date date56 = week53.getEnd();
        org.jfree.data.time.Week week59 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod60 = week59.next();
        java.lang.Class<?> wildcardClass61 = week59.getClass();
        java.lang.Class class62 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass61);
        java.lang.Class class63 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass61);
        org.jfree.data.time.Week week66 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod67 = week66.next();
        int int68 = week66.getYearValue();
        java.util.TimeZone timeZone69 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int70 = week66.compareTo((java.lang.Object) timeZone69);
        int int71 = week66.getYearValue();
        int int73 = week66.compareTo((java.lang.Object) 9);
        java.util.Date date74 = week66.getStart();
        org.jfree.data.time.Week week75 = new org.jfree.data.time.Week(date74);
        org.jfree.data.time.Week week78 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod79 = week78.next();
        int int80 = week78.getYearValue();
        java.util.TimeZone timeZone81 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int82 = week78.compareTo((java.lang.Object) timeZone81);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod83 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass61, date74, timeZone81);
        org.jfree.data.time.Week week86 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod87 = week86.previous();
        int int88 = week86.getYearValue();
        java.util.Date date89 = week86.getStart();
        java.util.TimeZone timeZone90 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.Week week91 = new org.jfree.data.time.Week(date89, timeZone90);
        org.jfree.data.time.Week week92 = new org.jfree.data.time.Week(date74, timeZone90);
        org.jfree.data.time.Week week93 = new org.jfree.data.time.Week(date56, timeZone90);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod94 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass49, date50, timeZone90);
        org.jfree.data.time.Week week95 = new org.jfree.data.time.Week(date41, timeZone90);
        org.jfree.data.time.Week week96 = new org.jfree.data.time.Week(date36, timeZone90);
        org.jfree.data.time.Week week97 = new org.jfree.data.time.Week(date29, timeZone90);
        org.jfree.data.time.Week week98 = new org.jfree.data.time.Week(date22, timeZone90);
        org.jfree.data.time.Week week99 = new org.jfree.data.time.Week(date13, timeZone90);
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 52 + "'", int10 == 52);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Week 35, 52" + "'", str11, "Week 35, 52");
        org.junit.Assert.assertNotNull(regularTimePeriod12);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sat Aug 19 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 52 + "'", int18 == 52);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 2791L + "'", long19 == 2791L);
        org.junit.Assert.assertNotNull(regularTimePeriod20);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Sat Sep 02 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Sun Aug 27 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 52 + "'", int27 == 52);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + (-60505750800001L) + "'", long28 == (-60505750800001L));
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Week 35, 52" + "'", str33, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + (-60506053200001L) + "'", long34 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod35);
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Sat Nov 28 23:59:59 CET 11");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 97 + "'", int47 == 97);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + (-59100800400001L) + "'", long48 == (-59100800400001L));
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 52 + "'", int55 == 52);
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod60);
        org.junit.Assert.assertNotNull(wildcardClass61);
        org.junit.Assert.assertNotNull(class62);
        org.junit.Assert.assertNotNull(class63);
        org.junit.Assert.assertNotNull(regularTimePeriod67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 52 + "'", int68 == 52);
        org.junit.Assert.assertNotNull(timeZone69);
// flaky:         org.junit.Assert.assertEquals(timeZone69.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 52 + "'", int71 == 52);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 1 + "'", int73 == 1);
        org.junit.Assert.assertNotNull(date74);
        org.junit.Assert.assertEquals(date74.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 52 + "'", int80 == 52);
        org.junit.Assert.assertNotNull(timeZone81);
// flaky:         org.junit.Assert.assertEquals(timeZone81.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 1 + "'", int82 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod83);
        org.junit.Assert.assertNotNull(regularTimePeriod87);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 52 + "'", int88 == 52);
        org.junit.Assert.assertNotNull(date89);
        org.junit.Assert.assertEquals(date89.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(timeZone90);
// flaky:         org.junit.Assert.assertEquals(timeZone90.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod94);
    }

    @Test
    public void test1372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1372");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        java.lang.Class<?> wildcardClass4 = week2.getClass();
        java.lang.Class class5 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass4);
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date9 = week8.getStart();
        java.lang.Class class10 = null;
        java.util.Date date11 = null;
        java.util.TimeZone timeZone12 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod13 = org.jfree.data.time.RegularTimePeriod.createInstance(class10, date11, timeZone12);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod14 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass4, date9, timeZone12);
        java.lang.Class<?> wildcardClass15 = timeZone12.getClass();
        java.lang.Class class16 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass15);
        java.lang.Class class17 = org.jfree.data.time.RegularTimePeriod.downsize(class16);
        java.lang.Class class18 = org.jfree.data.time.RegularTimePeriod.downsize(class17);
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(class5);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone12);
// flaky:         org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod13);
        org.junit.Assert.assertNotNull(regularTimePeriod14);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNotNull(class16);
        org.junit.Assert.assertNotNull(class17);
        org.junit.Assert.assertNotNull(class18);
    }

    @Test
    public void test1373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1373");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        int int5 = week2.getWeek();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 35 + "'", int5 == 35);
    }

    @Test
    public void test1374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1374");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod11 = week2.next();
        java.util.Date date12 = week2.getStart();
        java.util.Date date13 = week2.getStart();
        long long14 = week2.getLastMillisecond();
        long long15 = week2.getSerialIndex();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertNotNull(regularTimePeriod11);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-60505750800001L) + "'", long14 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 2791L + "'", long15 == 2791L);
    }

    @Test
    public void test1375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1375");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week();
        long long3 = week2.getFirstMillisecond();
        org.jfree.data.time.Year year4 = week2.getYear();
        org.jfree.data.time.Week week5 = new org.jfree.data.time.Week(0, year4);
        org.jfree.data.time.Year year6 = week5.getYear();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week(97, year6);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod8 = week7.previous();
        long long9 = week7.getLastMillisecond();
        java.util.Calendar calendar10 = null;
        // The following exception was thrown during execution in test generation
        try {
            week7.peg(calendar10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1637449200000L + "'", long3 == 1637449200000L);
        org.junit.Assert.assertNotNull(year4);
        org.junit.Assert.assertNotNull(year6);
        org.junit.Assert.assertNotNull(regularTimePeriod8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1667689199999L + "'", long9 == 1667689199999L);
    }

    @Test
    public void test1376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1376");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.next();
        java.util.Date date6 = week2.getEnd();
        org.jfree.data.time.Week week9 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week9.next();
        int int11 = week9.getYearValue();
        java.util.TimeZone timeZone12 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int13 = week9.compareTo((java.lang.Object) timeZone12);
        int int14 = week9.getYearValue();
        int int16 = week9.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod17 = week9.previous();
        int int18 = week9.getYearValue();
        long long19 = week9.getLastMillisecond();
        org.jfree.data.time.Week week22 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod23 = week22.next();
        java.lang.Class<?> wildcardClass24 = week22.getClass();
        java.lang.Class class25 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass24);
        boolean boolean26 = week9.equals((java.lang.Object) wildcardClass24);
        boolean boolean27 = week2.equals((java.lang.Object) wildcardClass24);
        org.jfree.data.time.Week week30 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date31 = week30.getStart();
        java.util.Date date32 = week30.getEnd();
        org.jfree.data.time.Week week35 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod36 = week35.next();
        int int37 = week35.getYearValue();
        java.util.TimeZone timeZone38 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int39 = week35.compareTo((java.lang.Object) timeZone38);
        int int40 = week35.getYearValue();
        long long41 = week35.getMiddleMillisecond();
        java.lang.Class<?> wildcardClass42 = week35.getClass();
        org.jfree.data.time.Week week45 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date46 = week45.getStart();
        org.jfree.data.time.Week week49 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod50 = week49.next();
        int int51 = week49.getYearValue();
        java.util.TimeZone timeZone52 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int53 = week49.compareTo((java.lang.Object) timeZone52);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod54 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass42, date46, timeZone52);
        org.jfree.data.time.Week week57 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod58 = week57.next();
        java.lang.Class<?> wildcardClass59 = week57.getClass();
        java.lang.Class class60 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass59);
        org.jfree.data.time.Week week63 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date64 = week63.getStart();
        java.lang.Class class65 = null;
        java.util.Date date66 = null;
        java.util.TimeZone timeZone67 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod68 = org.jfree.data.time.RegularTimePeriod.createInstance(class65, date66, timeZone67);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod69 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass59, date64, timeZone67);
        org.jfree.data.time.Week week72 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date73 = week72.getStart();
        org.jfree.data.time.Week week74 = new org.jfree.data.time.Week(date73);
        java.util.TimeZone timeZone75 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod76 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass59, date73, timeZone75);
        org.jfree.data.time.Week week77 = new org.jfree.data.time.Week(date46, timeZone75);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod78 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass24, date32, timeZone75);
        org.jfree.data.time.Week week79 = new org.jfree.data.time.Week(date32);
        java.lang.Class<?> wildcardClass80 = week79.getClass();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertNotNull(timeZone12);
// flaky:         org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 52 + "'", int14 == 52);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 52 + "'", int18 == 52);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-60505750800001L) + "'", long19 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod23);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(class25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 52 + "'", int37 == 52);
        org.junit.Assert.assertNotNull(timeZone38);
// flaky:         org.junit.Assert.assertEquals(timeZone38.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 52 + "'", int40 == 52);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + (-60506053200001L) + "'", long41 == (-60506053200001L));
        org.junit.Assert.assertNotNull(wildcardClass42);
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 52 + "'", int51 == 52);
        org.junit.Assert.assertNotNull(timeZone52);
// flaky:         org.junit.Assert.assertEquals(timeZone52.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod54);
        org.junit.Assert.assertNotNull(regularTimePeriod58);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(class60);
        org.junit.Assert.assertNotNull(date64);
        org.junit.Assert.assertEquals(date64.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone67);
// flaky:         org.junit.Assert.assertEquals(timeZone67.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod68);
        org.junit.Assert.assertNotNull(regularTimePeriod69);
        org.junit.Assert.assertNotNull(date73);
        org.junit.Assert.assertEquals(date73.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone75);
// flaky:         org.junit.Assert.assertEquals(timeZone75.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNotNull(regularTimePeriod76);
        org.junit.Assert.assertNotNull(regularTimePeriod78);
        org.junit.Assert.assertNotNull(wildcardClass80);
    }

    @Test
    public void test1377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1377");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        int int11 = week2.getYearValue();
        long long12 = week2.getLastMillisecond();
        org.jfree.data.time.Week week15 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod16 = week15.next();
        java.lang.Class<?> wildcardClass17 = week15.getClass();
        java.lang.Class class18 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass17);
        boolean boolean19 = week2.equals((java.lang.Object) wildcardClass17);
        long long20 = week2.getMiddleMillisecond();
        org.jfree.data.time.Week week25 = new org.jfree.data.time.Week();
        long long26 = week25.getFirstMillisecond();
        org.jfree.data.time.Year year27 = week25.getYear();
        org.jfree.data.time.Week week28 = new org.jfree.data.time.Week(52, year27);
        java.util.Date date29 = year27.getStart();
        org.jfree.data.time.Week week30 = new org.jfree.data.time.Week(100, year27);
        org.jfree.data.time.Week week31 = new org.jfree.data.time.Week(35, year27);
        java.util.Date date32 = year27.getStart();
        org.jfree.data.time.Week week33 = new org.jfree.data.time.Week(45, year27);
        boolean boolean34 = week2.equals((java.lang.Object) year27);
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-60505750800001L) + "'", long12 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(class18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-60506053200001L) + "'", long20 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1637449200000L + "'", long26 == 1637449200000L);
        org.junit.Assert.assertNotNull(year27);
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Fri Jan 01 00:00:00 CET 2021");
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Fri Jan 01 00:00:00 CET 2021");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test1378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1378");
        org.jfree.data.time.Week week1 = new org.jfree.data.time.Week();
        long long2 = week1.getFirstMillisecond();
        org.jfree.data.time.Year year3 = week1.getYear();
        org.jfree.data.time.Week week4 = new org.jfree.data.time.Week(0, year3);
        org.jfree.data.time.Year year5 = week4.getYear();
        java.util.Date date6 = year5.getEnd();
        java.lang.Class class7 = null;
        org.jfree.data.time.Week week10 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date11 = week10.getStart();
        java.util.Date date12 = week10.getEnd();
        org.jfree.data.time.Week week15 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod16 = week15.next();
        java.lang.Class<?> wildcardClass17 = week15.getClass();
        java.lang.Class class18 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass17);
        org.jfree.data.time.Week week21 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date22 = week21.getStart();
        java.lang.Class class23 = null;
        java.util.Date date24 = null;
        java.util.TimeZone timeZone25 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod26 = org.jfree.data.time.RegularTimePeriod.createInstance(class23, date24, timeZone25);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod27 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass17, date22, timeZone25);
        org.jfree.data.time.Week week28 = new org.jfree.data.time.Week(date12, timeZone25);
        java.util.TimeZone timeZone29 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.Week week30 = new org.jfree.data.time.Week(date12, timeZone29);
        org.jfree.data.time.Week week33 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod34 = week33.next();
        int int35 = week33.getYearValue();
        java.util.TimeZone timeZone36 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int37 = week33.compareTo((java.lang.Object) timeZone36);
        int int38 = week33.getWeek();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod39 = week33.next();
        boolean boolean41 = week33.equals((java.lang.Object) 3);
        long long42 = week33.getLastMillisecond();
        java.lang.String str43 = week33.toString();
        java.util.Date date44 = week33.getEnd();
        org.jfree.data.time.Week week47 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod48 = week47.next();
        int int49 = week47.getYearValue();
        java.util.TimeZone timeZone50 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int51 = week47.compareTo((java.lang.Object) timeZone50);
        int int52 = week47.getYearValue();
        int int54 = week47.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod55 = week47.previous();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod56 = week47.next();
        org.jfree.data.time.Week week59 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod60 = week59.next();
        java.lang.Class<?> wildcardClass61 = week59.getClass();
        java.lang.Class class62 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass61);
        java.lang.Class class63 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass61);
        boolean boolean64 = week47.equals((java.lang.Object) wildcardClass61);
        java.lang.Class class65 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass61);
        org.jfree.data.time.Week week68 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date69 = week68.getStart();
        java.util.Date date70 = week68.getEnd();
        org.jfree.data.time.Week week73 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod74 = week73.next();
        java.lang.Class<?> wildcardClass75 = week73.getClass();
        java.lang.Class class76 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass75);
        org.jfree.data.time.Week week79 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date80 = week79.getStart();
        java.lang.Class class81 = null;
        java.util.Date date82 = null;
        java.util.TimeZone timeZone83 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod84 = org.jfree.data.time.RegularTimePeriod.createInstance(class81, date82, timeZone83);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod85 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass75, date80, timeZone83);
        org.jfree.data.time.Week week86 = new org.jfree.data.time.Week(date70, timeZone83);
        java.lang.Class class87 = null;
        java.util.Date date88 = null;
        java.util.TimeZone timeZone89 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod90 = org.jfree.data.time.RegularTimePeriod.createInstance(class87, date88, timeZone89);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod91 = org.jfree.data.time.RegularTimePeriod.createInstance(class65, date70, timeZone89);
        org.jfree.data.time.Week week92 = new org.jfree.data.time.Week(date44, timeZone89);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod93 = org.jfree.data.time.RegularTimePeriod.createInstance(class7, date12, timeZone89);
        org.jfree.data.time.Week week94 = new org.jfree.data.time.Week(date6, timeZone89);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1637449200000L + "'", long2 == 1637449200000L);
        org.junit.Assert.assertNotNull(year3);
        org.junit.Assert.assertNotNull(year5);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Fri Dec 31 23:59:59 CET 2021");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(class18);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone25);
// flaky:         org.junit.Assert.assertEquals(timeZone25.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod26);
        org.junit.Assert.assertNotNull(regularTimePeriod27);
        org.junit.Assert.assertNotNull(timeZone29);
// flaky:         org.junit.Assert.assertEquals(timeZone29.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNotNull(regularTimePeriod34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 52 + "'", int35 == 52);
        org.junit.Assert.assertNotNull(timeZone36);
// flaky:         org.junit.Assert.assertEquals(timeZone36.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 35 + "'", int38 == 35);
        org.junit.Assert.assertNotNull(regularTimePeriod39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + (-60505750800001L) + "'", long42 == (-60505750800001L));
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Week 35, 52" + "'", str43, "Week 35, 52");
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 52 + "'", int49 == 52);
        org.junit.Assert.assertNotNull(timeZone50);
// flaky:         org.junit.Assert.assertEquals(timeZone50.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 52 + "'", int52 == 52);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod55);
        org.junit.Assert.assertNotNull(regularTimePeriod56);
        org.junit.Assert.assertNotNull(regularTimePeriod60);
        org.junit.Assert.assertNotNull(wildcardClass61);
        org.junit.Assert.assertNotNull(class62);
        org.junit.Assert.assertNotNull(class63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(class65);
        org.junit.Assert.assertNotNull(date69);
        org.junit.Assert.assertEquals(date69.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date70);
        org.junit.Assert.assertEquals(date70.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod74);
        org.junit.Assert.assertNotNull(wildcardClass75);
        org.junit.Assert.assertNotNull(class76);
        org.junit.Assert.assertNotNull(date80);
        org.junit.Assert.assertEquals(date80.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone83);
// flaky:         org.junit.Assert.assertEquals(timeZone83.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod84);
        org.junit.Assert.assertNotNull(regularTimePeriod85);
        org.junit.Assert.assertNotNull(timeZone89);
// flaky:         org.junit.Assert.assertEquals(timeZone89.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod90);
        org.junit.Assert.assertNull(regularTimePeriod91);
        org.junit.Assert.assertNull(regularTimePeriod93);
    }

    @Test
    public void test1379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1379");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        int int11 = week2.getYearValue();
        long long12 = week2.getLastMillisecond();
        org.jfree.data.time.Week week15 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod16 = week15.next();
        java.lang.Class<?> wildcardClass17 = week15.getClass();
        java.lang.Class class18 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass17);
        boolean boolean19 = week2.equals((java.lang.Object) wildcardClass17);
        int int20 = week2.getYearValue();
        org.jfree.data.time.Week week23 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod24 = week23.next();
        int int25 = week23.getYearValue();
        java.util.TimeZone timeZone26 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int27 = week23.compareTo((java.lang.Object) timeZone26);
        int int28 = week23.getYearValue();
        int int30 = week23.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod31 = week23.previous();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod32 = week23.next();
        org.jfree.data.time.Week week35 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod36 = week35.next();
        java.lang.Class<?> wildcardClass37 = week35.getClass();
        java.lang.Class class38 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass37);
        java.lang.Class class39 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass37);
        boolean boolean40 = week23.equals((java.lang.Object) wildcardClass37);
        long long41 = week23.getSerialIndex();
        java.util.Date date42 = week23.getEnd();
        boolean boolean43 = week2.equals((java.lang.Object) date42);
        org.jfree.data.time.Week week46 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod47 = week46.previous();
        java.util.Date date48 = week46.getEnd();
        org.jfree.data.time.Week week51 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date52 = week51.getStart();
        java.util.Date date53 = week51.getEnd();
        java.util.Date date54 = week51.getStart();
        org.jfree.data.time.Week week57 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date58 = week57.getStart();
        org.jfree.data.time.Week week61 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod62 = week61.next();
        int int63 = week61.getYearValue();
        java.util.TimeZone timeZone64 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int65 = week61.compareTo((java.lang.Object) timeZone64);
        org.jfree.data.time.Week week66 = new org.jfree.data.time.Week(date58, timeZone64);
        org.jfree.data.time.Week week67 = new org.jfree.data.time.Week(date54, timeZone64);
        org.jfree.data.time.Week week68 = new org.jfree.data.time.Week(date48, timeZone64);
        org.jfree.data.time.Week week69 = new org.jfree.data.time.Week(date42, timeZone64);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod70 = week69.next();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod71 = week69.previous();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-60505750800001L) + "'", long12 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(class18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 52 + "'", int20 == 52);
        org.junit.Assert.assertNotNull(regularTimePeriod24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 52 + "'", int25 == 52);
        org.junit.Assert.assertNotNull(timeZone26);
// flaky:         org.junit.Assert.assertEquals(timeZone26.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 52 + "'", int28 == 52);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod31);
        org.junit.Assert.assertNotNull(regularTimePeriod32);
        org.junit.Assert.assertNotNull(regularTimePeriod36);
        org.junit.Assert.assertNotNull(wildcardClass37);
        org.junit.Assert.assertNotNull(class38);
        org.junit.Assert.assertNotNull(class39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 2791L + "'", long41 == 2791L);
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(regularTimePeriod47);
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date52);
        org.junit.Assert.assertEquals(date52.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date58);
        org.junit.Assert.assertEquals(date58.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 52 + "'", int63 == 52);
        org.junit.Assert.assertNotNull(timeZone64);
// flaky:         org.junit.Assert.assertEquals(timeZone64.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod70);
        org.junit.Assert.assertNotNull(regularTimePeriod71);
    }

    @Test
    public void test1380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1380");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week();
        long long3 = week2.getFirstMillisecond();
        org.jfree.data.time.Year year4 = week2.getYear();
        org.jfree.data.time.Week week5 = new org.jfree.data.time.Week(0, year4);
        org.jfree.data.time.Week week6 = new org.jfree.data.time.Week(11, year4);
        java.util.Date date7 = week6.getEnd();
        long long8 = week6.getMiddleMillisecond();
        long long9 = week6.getFirstMillisecond();
        long long10 = week6.getSerialIndex();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1637449200000L + "'", long3 == 1637449200000L);
        org.junit.Assert.assertNotNull(year4);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Sat Mar 13 23:59:59 CET 2021");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1615373999999L + "'", long8 == 1615373999999L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1615071600000L + "'", long9 == 1615071600000L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 107124L + "'", long10 == 107124L);
    }

    @Test
    public void test1381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1381");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '4', (int) ' ');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.previous();
        int int4 = week2.getWeek();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.next();
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Year year6 = week2.getYear();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Year constructor: year (32) outside valid range.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(regularTimePeriod5);
    }

    @Test
    public void test1382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1382");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date3 = week2.getStart();
        java.util.Date date4 = week2.getEnd();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.next();
        long long6 = week2.getLastMillisecond();
        java.util.Calendar calendar7 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long8 = week2.getMiddleMillisecond(calendar7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-59100800400001L) + "'", long6 == (-59100800400001L));
    }

    @Test
    public void test1383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1383");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date3 = week2.getStart();
        org.jfree.data.time.Week week6 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod7 = week6.next();
        int int8 = week6.getYearValue();
        java.util.TimeZone timeZone9 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int10 = week6.compareTo((java.lang.Object) timeZone9);
        org.jfree.data.time.Week week11 = new org.jfree.data.time.Week(date3, timeZone9);
        java.util.TimeZone timeZone12 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.Week week13 = new org.jfree.data.time.Week(date3, timeZone12);
        long long14 = week13.getFirstMillisecond();
        java.util.Calendar calendar15 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long16 = week13.getLastMillisecond(calendar15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 52 + "'", int8 == 52);
        org.junit.Assert.assertNotNull(timeZone9);
// flaky:         org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(timeZone12);
// flaky:         org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-59101405200000L) + "'", long14 == (-59101405200000L));
    }

    @Test
    public void test1384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1384");
        org.jfree.data.time.Week week3 = new org.jfree.data.time.Week();
        long long4 = week3.getFirstMillisecond();
        org.jfree.data.time.Year year5 = week3.getYear();
        org.jfree.data.time.Week week6 = new org.jfree.data.time.Week(0, year5);
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week(11, year5);
        long long8 = week7.getSerialIndex();
        org.jfree.data.time.Year year9 = week7.getYear();
        org.jfree.data.time.Week week10 = new org.jfree.data.time.Week(10, year9);
        java.lang.String str11 = week10.toString();
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1637449200000L + "'", long4 == 1637449200000L);
        org.junit.Assert.assertNotNull(year5);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 107124L + "'", long8 == 107124L);
        org.junit.Assert.assertNotNull(year9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Week 10, 2021" + "'", str11, "Week 10, 2021");
    }

    @Test
    public void test1385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1385");
        org.jfree.data.time.Week week3 = new org.jfree.data.time.Week();
        long long4 = week3.getFirstMillisecond();
        org.jfree.data.time.Year year5 = week3.getYear();
        org.jfree.data.time.Week week6 = new org.jfree.data.time.Week(0, year5);
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week(53, year5);
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week((int) '4', year5);
        java.util.Calendar calendar9 = null;
        // The following exception was thrown during execution in test generation
        try {
            week8.peg(calendar9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1637449200000L + "'", long4 == 1637449200000L);
        org.junit.Assert.assertNotNull(year5);
    }

    @Test
    public void test1386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1386");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) (byte) 100, 52);
    }

    @Test
    public void test1387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1387");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod11 = week2.next();
        org.jfree.data.time.Week week14 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod15 = week14.next();
        java.lang.Class<?> wildcardClass16 = week14.getClass();
        java.lang.Class class17 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass16);
        java.lang.Class class18 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass16);
        boolean boolean19 = week2.equals((java.lang.Object) wildcardClass16);
        long long20 = week2.getSerialIndex();
        java.util.Date date21 = week2.getEnd();
        int int22 = week2.getWeek();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertNotNull(regularTimePeriod11);
        org.junit.Assert.assertNotNull(regularTimePeriod15);
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertNotNull(class17);
        org.junit.Assert.assertNotNull(class18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 2791L + "'", long20 == 2791L);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 35 + "'", int22 == 35);
    }

    @Test
    public void test1388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1388");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getSerialIndex();
        int int6 = week2.compareTo((java.lang.Object) 1637449200000L);
        org.jfree.data.time.Week week9 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date10 = week9.getStart();
        java.util.Date date11 = week9.getEnd();
        int int12 = week9.getYearValue();
        java.util.Date date13 = week9.getStart();
        long long14 = week9.getLastMillisecond();
        boolean boolean15 = week2.equals((java.lang.Object) week9);
        long long16 = week2.getLastMillisecond();
        java.util.Date date17 = week2.getEnd();
        java.lang.String str18 = week2.toString();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 2791L + "'", long4 == 2791L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 97 + "'", int12 == 97);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-59100800400001L) + "'", long14 == (-59100800400001L));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-60505750800001L) + "'", long16 == (-60505750800001L));
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Week 35, 52" + "'", str18, "Week 35, 52");
    }

    @Test
    public void test1389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1389");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.next();
        java.util.Date date6 = week2.getEnd();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week(date6);
        org.jfree.data.time.Week week10 = new org.jfree.data.time.Week(100, 10);
        java.util.Date date11 = week10.getEnd();
        org.jfree.data.time.Week week14 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date15 = week14.getStart();
        java.util.Date date16 = week14.getEnd();
        int int17 = week14.getYearValue();
        long long18 = week14.getLastMillisecond();
        java.lang.Class<?> wildcardClass19 = week14.getClass();
        java.util.Date date20 = null;
        org.jfree.data.time.Week week23 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.util.Date date24 = week23.getStart();
        int int25 = week23.getYearValue();
        java.util.Date date26 = week23.getEnd();
        org.jfree.data.time.Week week29 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod30 = week29.next();
        java.lang.Class<?> wildcardClass31 = week29.getClass();
        java.lang.Class class32 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass31);
        java.lang.Class class33 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass31);
        org.jfree.data.time.Week week36 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod37 = week36.next();
        int int38 = week36.getYearValue();
        java.util.TimeZone timeZone39 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int40 = week36.compareTo((java.lang.Object) timeZone39);
        int int41 = week36.getYearValue();
        int int43 = week36.compareTo((java.lang.Object) 9);
        java.util.Date date44 = week36.getStart();
        org.jfree.data.time.Week week45 = new org.jfree.data.time.Week(date44);
        org.jfree.data.time.Week week48 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod49 = week48.next();
        int int50 = week48.getYearValue();
        java.util.TimeZone timeZone51 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int52 = week48.compareTo((java.lang.Object) timeZone51);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod53 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass31, date44, timeZone51);
        org.jfree.data.time.Week week56 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod57 = week56.previous();
        int int58 = week56.getYearValue();
        java.util.Date date59 = week56.getStart();
        java.util.TimeZone timeZone60 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.Week week61 = new org.jfree.data.time.Week(date59, timeZone60);
        org.jfree.data.time.Week week62 = new org.jfree.data.time.Week(date44, timeZone60);
        org.jfree.data.time.Week week63 = new org.jfree.data.time.Week(date26, timeZone60);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod64 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass19, date20, timeZone60);
        org.jfree.data.time.Week week65 = new org.jfree.data.time.Week(date11, timeZone60);
        org.jfree.data.time.Week week66 = new org.jfree.data.time.Week(date6, timeZone60);
        long long67 = week66.getLastMillisecond();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Sat Nov 28 23:59:59 CET 11");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 97 + "'", int17 == 97);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-59100800400001L) + "'", long18 == (-59100800400001L));
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 52 + "'", int25 == 52);
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod30);
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertNotNull(class32);
        org.junit.Assert.assertNotNull(class33);
        org.junit.Assert.assertNotNull(regularTimePeriod37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 52 + "'", int38 == 52);
        org.junit.Assert.assertNotNull(timeZone39);
// flaky:         org.junit.Assert.assertEquals(timeZone39.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 52 + "'", int41 == 52);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 52 + "'", int50 == 52);
        org.junit.Assert.assertNotNull(timeZone51);
// flaky:         org.junit.Assert.assertEquals(timeZone51.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod53);
        org.junit.Assert.assertNotNull(regularTimePeriod57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 52 + "'", int58 == 52);
        org.junit.Assert.assertNotNull(date59);
        org.junit.Assert.assertEquals(date59.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(timeZone60);
// flaky:         org.junit.Assert.assertEquals(timeZone60.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod64);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + (-60505750800001L) + "'", long67 == (-60505750800001L));
    }

    @Test
    public void test1390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1390");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.previous();
        int int4 = week2.getYearValue();
        java.util.Date date5 = week2.getEnd();
        long long6 = week2.getMiddleMillisecond();
        org.jfree.data.time.Week week9 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week9.next();
        int int11 = week9.getYearValue();
        java.util.TimeZone timeZone12 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int13 = week9.compareTo((java.lang.Object) timeZone12);
        int int14 = week9.getYearValue();
        int int16 = week9.compareTo((java.lang.Object) 9);
        java.util.Date date17 = week9.getStart();
        boolean boolean18 = week2.equals((java.lang.Object) date17);
        java.util.Date date19 = week2.getEnd();
        org.jfree.data.time.Week week20 = new org.jfree.data.time.Week(date19);
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Year year21 = week20.getYear();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Year constructor: year (52) outside valid range.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-60506053200001L) + "'", long6 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertNotNull(timeZone12);
// flaky:         org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 52 + "'", int14 == 52);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Sat Aug 26 23:59:59 CET 52");
    }

    @Test
    public void test1391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1391");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getLastMillisecond();
        long long5 = week2.getLastMillisecond();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60505750800001L) + "'", long4 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-60505750800001L) + "'", long5 == (-60505750800001L));
    }

    @Test
    public void test1392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1392");
        org.jfree.data.time.Week week1 = new org.jfree.data.time.Week();
        long long2 = week1.getFirstMillisecond();
        org.jfree.data.time.Year year3 = week1.getYear();
        org.jfree.data.time.Week week4 = new org.jfree.data.time.Week(0, year3);
        java.util.Date date5 = week4.getStart();
        java.util.Date date6 = week4.getStart();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod7 = week4.next();
        java.util.Date date8 = regularTimePeriod7.getStart();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1637449200000L + "'", long2 == 1637449200000L);
        org.junit.Assert.assertNotNull(year3);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Sun Dec 20 00:00:00 CET 2020");
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sun Dec 20 00:00:00 CET 2020");
        org.junit.Assert.assertNotNull(regularTimePeriod7);
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Sun Dec 27 00:00:00 CET 2020");
    }

    @Test
    public void test1393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1393");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.next();
        java.util.Date date6 = week2.getEnd();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week(date6);
        int int8 = week7.getWeek();
        boolean boolean10 = week7.equals((java.lang.Object) 1637449200000L);
        org.jfree.data.time.Week week13 = new org.jfree.data.time.Week(9, (int) 'a');
        org.jfree.data.time.Week week16 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod17 = week16.next();
        long long18 = week16.getMiddleMillisecond();
        java.lang.String str19 = week16.toString();
        boolean boolean20 = week13.equals((java.lang.Object) week16);
        int int21 = week16.getWeek();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod22 = week16.next();
        boolean boolean23 = week7.equals((java.lang.Object) week16);
        long long24 = week16.getLastMillisecond();
        java.lang.String str25 = week16.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Year year26 = week16.getYear();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Year constructor: year (52) outside valid range.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 35 + "'", int8 == 35);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(regularTimePeriod17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-60506053200001L) + "'", long18 == (-60506053200001L));
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Week 35, 52" + "'", str19, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 35 + "'", int21 == 35);
        org.junit.Assert.assertNotNull(regularTimePeriod22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-60505750800001L) + "'", long24 == (-60505750800001L));
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Week 35, 52" + "'", str25, "Week 35, 52");
    }

    @Test
    public void test1394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1394");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date3 = week2.getStart();
        java.util.Date date4 = week2.getEnd();
        org.jfree.data.time.Week week5 = new org.jfree.data.time.Week(date4);
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week((int) (short) 10, 6);
        java.util.Date date9 = week8.getStart();
        boolean boolean10 = week5.equals((java.lang.Object) date9);
        java.util.Calendar calendar11 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long12 = week5.getFirstMillisecond(calendar11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Sun Feb 28 00:00:00 CET 6");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test1395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1395");
        org.jfree.data.time.Year year1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, year1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1396");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getWeek();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod8 = week2.next();
        boolean boolean10 = week2.equals((java.lang.Object) 3);
        long long11 = week2.getLastMillisecond();
        java.lang.String str12 = week2.toString();
        java.util.Date date13 = week2.getEnd();
        org.jfree.data.time.Week week16 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod17 = week16.next();
        int int18 = week16.getYearValue();
        java.util.TimeZone timeZone19 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int20 = week16.compareTo((java.lang.Object) timeZone19);
        int int21 = week16.getYearValue();
        int int23 = week16.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod24 = week16.previous();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod25 = week16.next();
        org.jfree.data.time.Week week28 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod29 = week28.next();
        java.lang.Class<?> wildcardClass30 = week28.getClass();
        java.lang.Class class31 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass30);
        java.lang.Class class32 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass30);
        boolean boolean33 = week16.equals((java.lang.Object) wildcardClass30);
        java.lang.Class class34 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass30);
        org.jfree.data.time.Week week37 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date38 = week37.getStart();
        java.util.Date date39 = week37.getEnd();
        org.jfree.data.time.Week week42 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod43 = week42.next();
        java.lang.Class<?> wildcardClass44 = week42.getClass();
        java.lang.Class class45 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass44);
        org.jfree.data.time.Week week48 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date49 = week48.getStart();
        java.lang.Class class50 = null;
        java.util.Date date51 = null;
        java.util.TimeZone timeZone52 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod53 = org.jfree.data.time.RegularTimePeriod.createInstance(class50, date51, timeZone52);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod54 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass44, date49, timeZone52);
        org.jfree.data.time.Week week55 = new org.jfree.data.time.Week(date39, timeZone52);
        java.lang.Class class56 = null;
        java.util.Date date57 = null;
        java.util.TimeZone timeZone58 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod59 = org.jfree.data.time.RegularTimePeriod.createInstance(class56, date57, timeZone58);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod60 = org.jfree.data.time.RegularTimePeriod.createInstance(class34, date39, timeZone58);
        org.jfree.data.time.Week week61 = new org.jfree.data.time.Week(date13, timeZone58);
        org.jfree.data.time.Week week64 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str65 = week64.toString();
        long long66 = week64.getSerialIndex();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod67 = week64.next();
        java.util.Date date68 = regularTimePeriod67.getEnd();
        org.jfree.data.time.Week week71 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date72 = week71.getStart();
        org.jfree.data.time.Week week75 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod76 = week75.next();
        int int77 = week75.getYearValue();
        java.util.TimeZone timeZone78 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int79 = week75.compareTo((java.lang.Object) timeZone78);
        org.jfree.data.time.Week week80 = new org.jfree.data.time.Week(date72, timeZone78);
        org.jfree.data.time.Week week81 = new org.jfree.data.time.Week(date68, timeZone78);
        org.jfree.data.time.Week week82 = new org.jfree.data.time.Week(date13, timeZone78);
        org.jfree.data.time.Week week83 = new org.jfree.data.time.Week(date13);
        java.util.Calendar calendar84 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long85 = week83.getFirstMillisecond(calendar84);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 35 + "'", int7 == 35);
        org.junit.Assert.assertNotNull(regularTimePeriod8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-60505750800001L) + "'", long11 == (-60505750800001L));
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Week 35, 52" + "'", str12, "Week 35, 52");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 52 + "'", int18 == 52);
        org.junit.Assert.assertNotNull(timeZone19);
// flaky:         org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 52 + "'", int21 == 52);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod24);
        org.junit.Assert.assertNotNull(regularTimePeriod25);
        org.junit.Assert.assertNotNull(regularTimePeriod29);
        org.junit.Assert.assertNotNull(wildcardClass30);
        org.junit.Assert.assertNotNull(class31);
        org.junit.Assert.assertNotNull(class32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(class34);
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod43);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(class45);
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone52);
// flaky:         org.junit.Assert.assertEquals(timeZone52.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod53);
        org.junit.Assert.assertNotNull(regularTimePeriod54);
        org.junit.Assert.assertNotNull(timeZone58);
// flaky:         org.junit.Assert.assertEquals(timeZone58.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod59);
        org.junit.Assert.assertNull(regularTimePeriod60);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "Week 35, 52" + "'", str65, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 2791L + "'", long66 == 2791L);
        org.junit.Assert.assertNotNull(regularTimePeriod67);
        org.junit.Assert.assertNotNull(date68);
        org.junit.Assert.assertEquals(date68.toString(), "Sat Sep 02 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date72);
        org.junit.Assert.assertEquals(date72.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 52 + "'", int77 == 52);
        org.junit.Assert.assertNotNull(timeZone78);
// flaky:         org.junit.Assert.assertEquals(timeZone78.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 1 + "'", int79 == 1);
    }

    @Test
    public void test1397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1397");
        org.jfree.data.time.Week week3 = new org.jfree.data.time.Week();
        long long4 = week3.getFirstMillisecond();
        org.jfree.data.time.Year year5 = week3.getYear();
        org.jfree.data.time.Week week6 = new org.jfree.data.time.Week(52, year5);
        java.util.Date date7 = year5.getStart();
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week(52, year5);
        org.jfree.data.time.Week week9 = new org.jfree.data.time.Week((-1), year5);
        long long10 = week9.getFirstMillisecond();
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1637449200000L + "'", long4 == 1637449200000L);
        org.junit.Assert.assertNotNull(year5);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Fri Jan 01 00:00:00 CET 2021");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1607814000000L + "'", long10 == 1607814000000L);
    }

    @Test
    public void test1398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1398");
        org.jfree.data.time.Week week4 = new org.jfree.data.time.Week();
        long long5 = week4.getFirstMillisecond();
        org.jfree.data.time.Year year6 = week4.getYear();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week(52, year6);
        java.util.Date date8 = year6.getStart();
        org.jfree.data.time.Week week9 = new org.jfree.data.time.Week(52, year6);
        org.jfree.data.time.Week week10 = new org.jfree.data.time.Week((int) '4', year6);
        org.jfree.data.time.Week week11 = new org.jfree.data.time.Week((int) (short) -1, year6);
        java.lang.Class<?> wildcardClass12 = week11.getClass();
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1637449200000L + "'", long5 == 1637449200000L);
        org.junit.Assert.assertNotNull(year6);
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Fri Jan 01 00:00:00 CET 2021");
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test1399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1399");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        int int11 = week2.getYearValue();
        long long12 = week2.getLastMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod13 = week2.previous();
        int int14 = week2.getWeek();
        long long15 = week2.getSerialIndex();
        java.util.Date date16 = week2.getStart();
        org.jfree.data.time.Week week17 = new org.jfree.data.time.Week(date16);
        long long18 = week17.getMiddleMillisecond();
        int int19 = week17.getYearValue();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-60505750800001L) + "'", long12 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 35 + "'", int14 == 35);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 2791L + "'", long15 == 2791L);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-60506053200001L) + "'", long18 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 52 + "'", int19 == 52);
    }

    @Test
    public void test1400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1400");
        org.jfree.data.time.Week week3 = new org.jfree.data.time.Week();
        long long4 = week3.getFirstMillisecond();
        org.jfree.data.time.Year year5 = week3.getYear();
        org.jfree.data.time.Week week6 = new org.jfree.data.time.Week(52, year5);
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week((int) (byte) -1, year5);
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week(0, year5);
        java.util.Date date9 = year5.getEnd();
        org.jfree.data.time.Week week10 = new org.jfree.data.time.Week(date9);
        org.jfree.data.time.Week week13 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod14 = week13.next();
        java.lang.Class<?> wildcardClass15 = week13.getClass();
        java.lang.Class class16 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass15);
        java.lang.Class class17 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass15);
        org.jfree.data.time.Week week20 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod21 = week20.next();
        int int22 = week20.getYearValue();
        java.util.TimeZone timeZone23 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int24 = week20.compareTo((java.lang.Object) timeZone23);
        int int25 = week20.getYearValue();
        int int27 = week20.compareTo((java.lang.Object) 9);
        java.util.Date date28 = week20.getStart();
        org.jfree.data.time.Week week29 = new org.jfree.data.time.Week(date28);
        org.jfree.data.time.Week week32 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod33 = week32.next();
        int int34 = week32.getYearValue();
        java.util.TimeZone timeZone35 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int36 = week32.compareTo((java.lang.Object) timeZone35);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod37 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass15, date28, timeZone35);
        org.jfree.data.time.Week week40 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.util.Date date41 = week40.getStart();
        org.jfree.data.time.Week week42 = new org.jfree.data.time.Week(date41);
        org.jfree.data.time.Week week45 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod46 = week45.next();
        java.lang.Class<?> wildcardClass47 = week45.getClass();
        java.lang.Class class48 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass47);
        java.lang.Class class49 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass47);
        org.jfree.data.time.Week week52 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod53 = week52.next();
        int int54 = week52.getYearValue();
        java.util.TimeZone timeZone55 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int56 = week52.compareTo((java.lang.Object) timeZone55);
        int int57 = week52.getYearValue();
        int int59 = week52.compareTo((java.lang.Object) 9);
        java.util.Date date60 = week52.getStart();
        org.jfree.data.time.Week week61 = new org.jfree.data.time.Week(date60);
        org.jfree.data.time.Week week64 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod65 = week64.next();
        int int66 = week64.getYearValue();
        java.util.TimeZone timeZone67 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int68 = week64.compareTo((java.lang.Object) timeZone67);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod69 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass47, date60, timeZone67);
        org.jfree.data.time.Week week72 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod73 = week72.previous();
        int int74 = week72.getYearValue();
        java.util.Date date75 = week72.getStart();
        java.util.TimeZone timeZone76 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.Week week77 = new org.jfree.data.time.Week(date75, timeZone76);
        org.jfree.data.time.Week week78 = new org.jfree.data.time.Week(date60, timeZone76);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod79 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass15, date41, timeZone76);
        org.jfree.data.time.Week week80 = new org.jfree.data.time.Week(date9, timeZone76);
        org.jfree.data.time.Week week81 = new org.jfree.data.time.Week(date9);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1637449200000L + "'", long4 == 1637449200000L);
        org.junit.Assert.assertNotNull(year5);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Fri Dec 31 23:59:59 CET 2021");
        org.junit.Assert.assertNotNull(regularTimePeriod14);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNotNull(class16);
        org.junit.Assert.assertNotNull(class17);
        org.junit.Assert.assertNotNull(regularTimePeriod21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 52 + "'", int22 == 52);
        org.junit.Assert.assertNotNull(timeZone23);
// flaky:         org.junit.Assert.assertEquals(timeZone23.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 52 + "'", int25 == 52);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 52 + "'", int34 == 52);
        org.junit.Assert.assertNotNull(timeZone35);
// flaky:         org.junit.Assert.assertEquals(timeZone35.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod37);
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod46);
        org.junit.Assert.assertNotNull(wildcardClass47);
        org.junit.Assert.assertNotNull(class48);
        org.junit.Assert.assertNotNull(class49);
        org.junit.Assert.assertNotNull(regularTimePeriod53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 52 + "'", int54 == 52);
        org.junit.Assert.assertNotNull(timeZone55);
// flaky:         org.junit.Assert.assertEquals(timeZone55.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 52 + "'", int57 == 52);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertNotNull(date60);
        org.junit.Assert.assertEquals(date60.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 52 + "'", int66 == 52);
        org.junit.Assert.assertNotNull(timeZone67);
// flaky:         org.junit.Assert.assertEquals(timeZone67.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod69);
        org.junit.Assert.assertNotNull(regularTimePeriod73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 52 + "'", int74 == 52);
        org.junit.Assert.assertNotNull(date75);
        org.junit.Assert.assertEquals(date75.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(timeZone76);
// flaky:         org.junit.Assert.assertEquals(timeZone76.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNotNull(regularTimePeriod79);
    }

    @Test
    public void test1401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1401");
        org.jfree.data.time.Week week1 = new org.jfree.data.time.Week();
        long long2 = week1.getFirstMillisecond();
        org.jfree.data.time.Year year3 = week1.getYear();
        org.jfree.data.time.Week week4 = new org.jfree.data.time.Week(0, year3);
        java.util.Date date5 = year3.getStart();
        org.jfree.data.time.Week week6 = new org.jfree.data.time.Week(date5);
        long long7 = week6.getLastMillisecond();
        long long8 = week6.getFirstMillisecond();
        java.util.Calendar calendar9 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long10 = week6.getLastMillisecond(calendar9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1637449200000L + "'", long2 == 1637449200000L);
        org.junit.Assert.assertNotNull(year3);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Fri Jan 01 00:00:00 CET 2021");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1609628399999L + "'", long7 == 1609628399999L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1609023600000L + "'", long8 == 1609023600000L);
    }

    @Test
    public void test1402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1402");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getSerialIndex();
        long long5 = week2.getSerialIndex();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 2791L + "'", long4 == 2791L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 2791L + "'", long5 == 2791L);
    }

    @Test
    public void test1403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1403");
        java.lang.Class class0 = null;
        org.jfree.data.time.Week week3 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod4 = week3.next();
        int int5 = week3.getYearValue();
        java.util.TimeZone timeZone6 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int7 = week3.compareTo((java.lang.Object) timeZone6);
        int int8 = week3.getYearValue();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod9 = week3.previous();
        java.util.Date date10 = regularTimePeriod9.getEnd();
        org.jfree.data.time.Week week13 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod14 = week13.next();
        java.lang.Class<?> wildcardClass15 = week13.getClass();
        java.lang.Class class16 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass15);
        org.jfree.data.time.Week week19 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date20 = week19.getStart();
        java.lang.Class class21 = null;
        java.util.Date date22 = null;
        java.util.TimeZone timeZone23 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod24 = org.jfree.data.time.RegularTimePeriod.createInstance(class21, date22, timeZone23);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod25 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass15, date20, timeZone23);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod26 = org.jfree.data.time.RegularTimePeriod.createInstance(class0, date10, timeZone23);
        org.jfree.data.time.Week week29 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod30 = week29.next();
        java.lang.Class<?> wildcardClass31 = week29.getClass();
        java.lang.Class class32 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass31);
        java.lang.Class class33 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass31);
        org.jfree.data.time.Week week36 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod37 = week36.next();
        int int38 = week36.getYearValue();
        java.util.TimeZone timeZone39 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int40 = week36.compareTo((java.lang.Object) timeZone39);
        int int41 = week36.getYearValue();
        int int43 = week36.compareTo((java.lang.Object) 9);
        java.util.Date date44 = week36.getStart();
        org.jfree.data.time.Week week45 = new org.jfree.data.time.Week(date44);
        org.jfree.data.time.Week week48 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod49 = week48.next();
        int int50 = week48.getYearValue();
        java.util.TimeZone timeZone51 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int52 = week48.compareTo((java.lang.Object) timeZone51);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod53 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass31, date44, timeZone51);
        org.jfree.data.time.Week week56 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.util.Date date57 = week56.getStart();
        org.jfree.data.time.Week week58 = new org.jfree.data.time.Week(date57);
        org.jfree.data.time.Week week61 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod62 = week61.next();
        java.lang.Class<?> wildcardClass63 = week61.getClass();
        java.lang.Class class64 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass63);
        java.lang.Class class65 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass63);
        org.jfree.data.time.Week week68 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod69 = week68.next();
        int int70 = week68.getYearValue();
        java.util.TimeZone timeZone71 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int72 = week68.compareTo((java.lang.Object) timeZone71);
        int int73 = week68.getYearValue();
        int int75 = week68.compareTo((java.lang.Object) 9);
        java.util.Date date76 = week68.getStart();
        org.jfree.data.time.Week week77 = new org.jfree.data.time.Week(date76);
        org.jfree.data.time.Week week80 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod81 = week80.next();
        int int82 = week80.getYearValue();
        java.util.TimeZone timeZone83 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int84 = week80.compareTo((java.lang.Object) timeZone83);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod85 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass63, date76, timeZone83);
        org.jfree.data.time.Week week88 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod89 = week88.previous();
        int int90 = week88.getYearValue();
        java.util.Date date91 = week88.getStart();
        java.util.TimeZone timeZone92 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.Week week93 = new org.jfree.data.time.Week(date91, timeZone92);
        org.jfree.data.time.Week week94 = new org.jfree.data.time.Week(date76, timeZone92);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod95 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass31, date57, timeZone92);
        org.jfree.data.time.Week week96 = new org.jfree.data.time.Week(date10, timeZone92);
        org.junit.Assert.assertNotNull(regularTimePeriod4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 52 + "'", int5 == 52);
        org.junit.Assert.assertNotNull(timeZone6);
// flaky:         org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 52 + "'", int8 == 52);
        org.junit.Assert.assertNotNull(regularTimePeriod9);
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sat Aug 19 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod14);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNotNull(class16);
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone23);
// flaky:         org.junit.Assert.assertEquals(timeZone23.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod24);
        org.junit.Assert.assertNotNull(regularTimePeriod25);
        org.junit.Assert.assertNull(regularTimePeriod26);
        org.junit.Assert.assertNotNull(regularTimePeriod30);
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertNotNull(class32);
        org.junit.Assert.assertNotNull(class33);
        org.junit.Assert.assertNotNull(regularTimePeriod37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 52 + "'", int38 == 52);
        org.junit.Assert.assertNotNull(timeZone39);
// flaky:         org.junit.Assert.assertEquals(timeZone39.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 52 + "'", int41 == 52);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 52 + "'", int50 == 52);
        org.junit.Assert.assertNotNull(timeZone51);
// flaky:         org.junit.Assert.assertEquals(timeZone51.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod53);
        org.junit.Assert.assertNotNull(date57);
        org.junit.Assert.assertEquals(date57.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod62);
        org.junit.Assert.assertNotNull(wildcardClass63);
        org.junit.Assert.assertNotNull(class64);
        org.junit.Assert.assertNotNull(class65);
        org.junit.Assert.assertNotNull(regularTimePeriod69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 52 + "'", int70 == 52);
        org.junit.Assert.assertNotNull(timeZone71);
// flaky:         org.junit.Assert.assertEquals(timeZone71.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 52 + "'", int73 == 52);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
        org.junit.Assert.assertNotNull(date76);
        org.junit.Assert.assertEquals(date76.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 52 + "'", int82 == 52);
        org.junit.Assert.assertNotNull(timeZone83);
// flaky:         org.junit.Assert.assertEquals(timeZone83.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 1 + "'", int84 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod85);
        org.junit.Assert.assertNotNull(regularTimePeriod89);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 52 + "'", int90 == 52);
        org.junit.Assert.assertNotNull(date91);
        org.junit.Assert.assertEquals(date91.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(timeZone92);
// flaky:         org.junit.Assert.assertEquals(timeZone92.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNotNull(regularTimePeriod95);
    }

    @Test
    public void test1404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1404");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        int int11 = week2.getYearValue();
        long long12 = week2.getLastMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod13 = week2.previous();
        int int14 = week2.getWeek();
        long long15 = week2.getSerialIndex();
        java.util.Date date16 = week2.getStart();
        org.jfree.data.time.Week week17 = new org.jfree.data.time.Week(date16);
        java.util.Calendar calendar18 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long19 = week17.getLastMillisecond(calendar18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-60505750800001L) + "'", long12 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 35 + "'", int14 == 35);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 2791L + "'", long15 == 2791L);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Aug 20 00:00:00 CET 52");
    }

    @Test
    public void test1405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1405");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        int int11 = week2.getYearValue();
        long long12 = week2.getLastMillisecond();
        org.jfree.data.time.Week week15 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod16 = week15.next();
        java.lang.Class<?> wildcardClass17 = week15.getClass();
        java.lang.Class class18 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass17);
        boolean boolean19 = week2.equals((java.lang.Object) wildcardClass17);
        int int20 = week2.getYearValue();
        org.jfree.data.time.Week week23 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod24 = week23.next();
        int int25 = week23.getYearValue();
        java.util.TimeZone timeZone26 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int27 = week23.compareTo((java.lang.Object) timeZone26);
        int int28 = week23.getYearValue();
        int int30 = week23.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod31 = week23.previous();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod32 = week23.next();
        org.jfree.data.time.Week week35 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod36 = week35.next();
        java.lang.Class<?> wildcardClass37 = week35.getClass();
        java.lang.Class class38 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass37);
        java.lang.Class class39 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass37);
        boolean boolean40 = week23.equals((java.lang.Object) wildcardClass37);
        long long41 = week23.getSerialIndex();
        java.util.Date date42 = week23.getEnd();
        boolean boolean43 = week2.equals((java.lang.Object) date42);
        long long44 = week2.getMiddleMillisecond();
        int int45 = week2.getYearValue();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod46 = week2.previous();
        java.util.Date date47 = week2.getStart();
        java.lang.Class<?> wildcardClass48 = date47.getClass();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-60505750800001L) + "'", long12 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(class18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 52 + "'", int20 == 52);
        org.junit.Assert.assertNotNull(regularTimePeriod24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 52 + "'", int25 == 52);
        org.junit.Assert.assertNotNull(timeZone26);
// flaky:         org.junit.Assert.assertEquals(timeZone26.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 52 + "'", int28 == 52);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod31);
        org.junit.Assert.assertNotNull(regularTimePeriod32);
        org.junit.Assert.assertNotNull(regularTimePeriod36);
        org.junit.Assert.assertNotNull(wildcardClass37);
        org.junit.Assert.assertNotNull(class38);
        org.junit.Assert.assertNotNull(class39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 2791L + "'", long41 == 2791L);
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + (-60506053200001L) + "'", long44 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 52 + "'", int45 == 52);
        org.junit.Assert.assertNotNull(regularTimePeriod46);
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(wildcardClass48);
    }

    @Test
    public void test1406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1406");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '4', (int) ' ');
        java.util.Date date3 = week2.getStart();
        java.util.Calendar calendar4 = null;
        // The following exception was thrown during execution in test generation
        try {
            week2.peg(calendar4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Dec 21 00:00:00 CET 32");
    }

    @Test
    public void test1407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1407");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.previous();
        int int4 = week2.getYearValue();
        java.util.Date date5 = week2.getStart();
        java.util.TimeZone timeZone6 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week(date5, timeZone6);
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week(date5);
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(timeZone6);
// flaky:         org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "Central European Time");
    }

    @Test
    public void test1408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1408");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        java.util.Date date10 = week2.getStart();
        long long11 = week2.getLastMillisecond();
        long long12 = week2.getMiddleMillisecond();
        java.util.Calendar calendar13 = null;
        // The following exception was thrown during execution in test generation
        try {
            week2.peg(calendar13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-60505750800001L) + "'", long11 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-60506053200001L) + "'", long12 == (-60506053200001L));
    }

    @Test
    public void test1409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1409");
        org.jfree.data.time.Week week4 = new org.jfree.data.time.Week();
        long long5 = week4.getFirstMillisecond();
        org.jfree.data.time.Year year6 = week4.getYear();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week(0, year6);
        org.jfree.data.time.Year year8 = week7.getYear();
        org.jfree.data.time.Week week9 = new org.jfree.data.time.Week((int) (short) 0, year8);
        org.jfree.data.time.Week week10 = new org.jfree.data.time.Week(10, year8);
        org.jfree.data.time.Week week11 = new org.jfree.data.time.Week(0, year8);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1637449200000L + "'", long5 == 1637449200000L);
        org.junit.Assert.assertNotNull(year6);
        org.junit.Assert.assertNotNull(year8);
    }

    @Test
    public void test1410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1410");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) (byte) 1, (int) (byte) 0);
        long long3 = week2.getFirstMillisecond();
        int int4 = week2.getWeek();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.previous();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-62167741200000L) + "'", long3 == (-62167741200000L));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNull(regularTimePeriod5);
    }

    @Test
    public void test1411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1411");
        org.jfree.data.time.Week week6 = new org.jfree.data.time.Week();
        long long7 = week6.getFirstMillisecond();
        org.jfree.data.time.Year year8 = week6.getYear();
        org.jfree.data.time.Week week9 = new org.jfree.data.time.Week(0, year8);
        org.jfree.data.time.Year year10 = week9.getYear();
        org.jfree.data.time.Week week11 = new org.jfree.data.time.Week(97, year10);
        org.jfree.data.time.Week week12 = new org.jfree.data.time.Week(0, year10);
        org.jfree.data.time.Week week13 = new org.jfree.data.time.Week((int) '#', year10);
        org.jfree.data.time.Week week14 = new org.jfree.data.time.Week(100, year10);
        org.jfree.data.time.Week week15 = new org.jfree.data.time.Week(36, year10);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1637449200000L + "'", long7 == 1637449200000L);
        org.junit.Assert.assertNotNull(year8);
        org.junit.Assert.assertNotNull(year10);
    }

    @Test
    public void test1412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1412");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week();
        long long3 = week2.getFirstMillisecond();
        org.jfree.data.time.Year year4 = week2.getYear();
        org.jfree.data.time.Week week5 = new org.jfree.data.time.Week(52, year4);
        java.util.Date date6 = year4.getStart();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week((-1969), year4);
        int int8 = week7.getYearValue();
        int int9 = week7.getWeek();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1637449200000L + "'", long3 == 1637449200000L);
        org.junit.Assert.assertNotNull(year4);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Fri Jan 01 00:00:00 CET 2021");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2021 + "'", int8 == 2021);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 79 + "'", int9 == 79);
    }

    @Test
    public void test1413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1413");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date3 = week2.getStart();
        java.util.Date date4 = week2.getEnd();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod8 = week7.next();
        java.lang.Class<?> wildcardClass9 = week7.getClass();
        java.lang.Class class10 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass9);
        org.jfree.data.time.Week week13 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date14 = week13.getStart();
        java.lang.Class class15 = null;
        java.util.Date date16 = null;
        java.util.TimeZone timeZone17 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod18 = org.jfree.data.time.RegularTimePeriod.createInstance(class15, date16, timeZone17);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod19 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass9, date14, timeZone17);
        org.jfree.data.time.Week week20 = new org.jfree.data.time.Week(date4, timeZone17);
        java.util.TimeZone timeZone21 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.Week week22 = new org.jfree.data.time.Week(date4, timeZone21);
        java.lang.Class<?> wildcardClass23 = week22.getClass();
        java.lang.Class class24 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass23);
        java.lang.Class class25 = org.jfree.data.time.RegularTimePeriod.downsize(class24);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(class10);
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone17);
// flaky:         org.junit.Assert.assertEquals(timeZone17.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod18);
        org.junit.Assert.assertNotNull(regularTimePeriod19);
        org.junit.Assert.assertNotNull(timeZone21);
// flaky:         org.junit.Assert.assertEquals(timeZone21.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertNotNull(class24);
        org.junit.Assert.assertNotNull(class25);
    }

    @Test
    public void test1414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1414");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        java.util.Date date10 = week2.getStart();
        org.jfree.data.time.Week week11 = new org.jfree.data.time.Week(date10);
        long long12 = week11.getFirstMillisecond();
        java.util.Date date13 = week11.getEnd();
        long long14 = week11.getMiddleMillisecond();
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Year year15 = week11.getYear();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Year constructor: year (52) outside valid range.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-60506355600000L) + "'", long12 == (-60506355600000L));
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-60506053200001L) + "'", long14 == (-60506053200001L));
    }

    @Test
    public void test1415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1415");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.previous();
        int int4 = week2.getYearValue();
        long long5 = week2.getSerialIndex();
        java.lang.String str6 = week2.toString();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod7 = week2.next();
        long long8 = week2.getMiddleMillisecond();
        java.util.Date date9 = week2.getEnd();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 2791L + "'", long5 == 2791L);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Week 35, 52" + "'", str6, "Week 35, 52");
        org.junit.Assert.assertNotNull(regularTimePeriod7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-60506053200001L) + "'", long8 == (-60506053200001L));
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Sat Aug 26 23:59:59 CET 52");
    }

    @Test
    public void test1416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1416");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(0, 48);
        long long3 = week2.getLastMillisecond();
        java.util.Calendar calendar4 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long5 = week2.getMiddleMillisecond(calendar4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-60652717200001L) + "'", long3 == (-60652717200001L));
    }

    @Test
    public void test1417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1417");
        org.jfree.data.time.Week week3 = new org.jfree.data.time.Week();
        long long4 = week3.getFirstMillisecond();
        org.jfree.data.time.Year year5 = week3.getYear();
        org.jfree.data.time.Week week6 = new org.jfree.data.time.Week(0, year5);
        org.jfree.data.time.Year year7 = week6.getYear();
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week(3, year7);
        org.jfree.data.time.Week week9 = new org.jfree.data.time.Week((int) 'a', year7);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week9.previous();
        java.lang.Class<?> wildcardClass11 = week9.getClass();
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1637449200000L + "'", long4 == 1637449200000L);
        org.junit.Assert.assertNotNull(year5);
        org.junit.Assert.assertNotNull(year7);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test1418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1418");
        org.jfree.data.time.Week week3 = new org.jfree.data.time.Week();
        long long4 = week3.getFirstMillisecond();
        org.jfree.data.time.Year year5 = week3.getYear();
        org.jfree.data.time.Week week6 = new org.jfree.data.time.Week(0, year5);
        org.jfree.data.time.Year year7 = week6.getYear();
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week(3, year7);
        org.jfree.data.time.Week week9 = new org.jfree.data.time.Week((int) 'a', year7);
        long long10 = week9.getMiddleMillisecond();
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1637449200000L + "'", long4 == 1637449200000L);
        org.junit.Assert.assertNotNull(year5);
        org.junit.Assert.assertNotNull(year7);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1667384999999L + "'", long10 == 1667384999999L);
    }

    @Test
    public void test1419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1419");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.util.Date date3 = week2.getStart();
        org.jfree.data.time.Week week6 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.util.Date date7 = week6.getStart();
        int int8 = week6.getYearValue();
        java.util.Date date9 = week6.getEnd();
        org.jfree.data.time.Week week12 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod13 = week12.next();
        java.lang.Class<?> wildcardClass14 = week12.getClass();
        java.lang.Class class15 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass14);
        java.lang.Class class16 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass14);
        org.jfree.data.time.Week week19 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod20 = week19.next();
        int int21 = week19.getYearValue();
        java.util.TimeZone timeZone22 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int23 = week19.compareTo((java.lang.Object) timeZone22);
        int int24 = week19.getYearValue();
        int int26 = week19.compareTo((java.lang.Object) 9);
        java.util.Date date27 = week19.getStart();
        org.jfree.data.time.Week week28 = new org.jfree.data.time.Week(date27);
        org.jfree.data.time.Week week31 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod32 = week31.next();
        int int33 = week31.getYearValue();
        java.util.TimeZone timeZone34 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int35 = week31.compareTo((java.lang.Object) timeZone34);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod36 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass14, date27, timeZone34);
        org.jfree.data.time.Week week39 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod40 = week39.previous();
        int int41 = week39.getYearValue();
        java.util.Date date42 = week39.getStart();
        java.util.TimeZone timeZone43 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.Week week44 = new org.jfree.data.time.Week(date42, timeZone43);
        org.jfree.data.time.Week week45 = new org.jfree.data.time.Week(date27, timeZone43);
        org.jfree.data.time.Week week46 = new org.jfree.data.time.Week(date9, timeZone43);
        boolean boolean47 = week2.equals((java.lang.Object) date9);
        org.jfree.data.time.Week week50 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date51 = week50.getStart();
        org.jfree.data.time.Week week54 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod55 = week54.next();
        int int56 = week54.getYearValue();
        java.util.TimeZone timeZone57 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int58 = week54.compareTo((java.lang.Object) timeZone57);
        org.jfree.data.time.Week week59 = new org.jfree.data.time.Week(date51, timeZone57);
        org.jfree.data.time.Week week60 = new org.jfree.data.time.Week(date51);
        org.jfree.data.time.Week week63 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod64 = week63.next();
        int int65 = week63.getYearValue();
        java.util.TimeZone timeZone66 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int67 = week63.compareTo((java.lang.Object) timeZone66);
        int int68 = week63.getYearValue();
        long long69 = week63.getMiddleMillisecond();
        java.lang.Class<?> wildcardClass70 = week63.getClass();
        org.jfree.data.time.Week week73 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date74 = week73.getStart();
        org.jfree.data.time.Week week77 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod78 = week77.next();
        int int79 = week77.getYearValue();
        java.util.TimeZone timeZone80 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int81 = week77.compareTo((java.lang.Object) timeZone80);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod82 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass70, date74, timeZone80);
        org.jfree.data.time.Week week83 = new org.jfree.data.time.Week(date74);
        org.jfree.data.time.Week week86 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod87 = week86.next();
        int int88 = week86.getYearValue();
        java.util.TimeZone timeZone89 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int90 = week86.compareTo((java.lang.Object) timeZone89);
        org.jfree.data.time.Week week91 = new org.jfree.data.time.Week(date74, timeZone89);
        int int92 = week60.compareTo((java.lang.Object) timeZone89);
        org.jfree.data.time.Week week93 = new org.jfree.data.time.Week(date9, timeZone89);
        java.util.Date date94 = week93.getEnd();
        long long95 = week93.getSerialIndex();
        java.lang.String str96 = week93.toString();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod97 = week93.next();
        java.util.Date date98 = regularTimePeriod97.getEnd();
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 52 + "'", int8 == 52);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod13);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(class15);
        org.junit.Assert.assertNotNull(class16);
        org.junit.Assert.assertNotNull(regularTimePeriod20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 52 + "'", int21 == 52);
        org.junit.Assert.assertNotNull(timeZone22);
// flaky:         org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 52 + "'", int24 == 52);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 52 + "'", int33 == 52);
        org.junit.Assert.assertNotNull(timeZone34);
// flaky:         org.junit.Assert.assertEquals(timeZone34.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod36);
        org.junit.Assert.assertNotNull(regularTimePeriod40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 52 + "'", int41 == 52);
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(timeZone43);
// flaky:         org.junit.Assert.assertEquals(timeZone43.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(date51);
        org.junit.Assert.assertEquals(date51.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 52 + "'", int56 == 52);
        org.junit.Assert.assertNotNull(timeZone57);
// flaky:         org.junit.Assert.assertEquals(timeZone57.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 52 + "'", int65 == 52);
        org.junit.Assert.assertNotNull(timeZone66);
// flaky:         org.junit.Assert.assertEquals(timeZone66.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 52 + "'", int68 == 52);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + (-60506053200001L) + "'", long69 == (-60506053200001L));
        org.junit.Assert.assertNotNull(wildcardClass70);
        org.junit.Assert.assertNotNull(date74);
        org.junit.Assert.assertEquals(date74.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 52 + "'", int79 == 52);
        org.junit.Assert.assertNotNull(timeZone80);
// flaky:         org.junit.Assert.assertEquals(timeZone80.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 1 + "'", int81 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod82);
        org.junit.Assert.assertNotNull(regularTimePeriod87);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 52 + "'", int88 == 52);
        org.junit.Assert.assertNotNull(timeZone89);
// flaky:         org.junit.Assert.assertEquals(timeZone89.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 1 + "'", int90 == 1);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 1 + "'", int92 == 1);
        org.junit.Assert.assertNotNull(date94);
        org.junit.Assert.assertEquals(date94.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + long95 + "' != '" + 2791L + "'", long95 == 2791L);
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "Week 35, 52" + "'", str96, "Week 35, 52");
        org.junit.Assert.assertNotNull(regularTimePeriod97);
        org.junit.Assert.assertNotNull(date98);
        org.junit.Assert.assertEquals(date98.toString(), "Sat Sep 02 23:59:59 CET 52");
    }

    @Test
    public void test1420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1420");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        long long5 = week2.getFirstMillisecond();
        int int6 = week2.getWeek();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod7 = week2.previous();
        org.jfree.data.time.Week week10 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date11 = week10.getStart();
        org.jfree.data.time.Week week12 = new org.jfree.data.time.Week(date11);
        org.jfree.data.time.Week week15 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str16 = week15.toString();
        long long17 = week15.getMiddleMillisecond();
        long long18 = week15.getLastMillisecond();
        org.jfree.data.time.Week week21 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod22 = week21.next();
        java.lang.Class<?> wildcardClass23 = week21.getClass();
        java.lang.Class class24 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass23);
        int int25 = week15.compareTo((java.lang.Object) wildcardClass23);
        java.lang.Class class26 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass23);
        boolean boolean27 = week12.equals((java.lang.Object) wildcardClass23);
        org.jfree.data.time.Week week30 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod31 = week30.previous();
        int int32 = week30.getYearValue();
        java.util.Date date33 = week30.getStart();
        int int34 = week30.getYearValue();
        long long35 = week30.getSerialIndex();
        boolean boolean36 = week12.equals((java.lang.Object) week30);
        boolean boolean37 = week2.equals((java.lang.Object) boolean36);
        java.util.Date date38 = week2.getStart();
        org.jfree.data.time.Week week39 = new org.jfree.data.time.Week(date38);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod40 = week39.next();
        org.jfree.data.time.Week week43 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod44 = week43.next();
        int int45 = week43.getYearValue();
        java.util.TimeZone timeZone46 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int47 = week43.compareTo((java.lang.Object) timeZone46);
        int int48 = week43.getYearValue();
        int int50 = week43.compareTo((java.lang.Object) 9);
        int int51 = week43.getYearValue();
        long long52 = week43.getLastMillisecond();
        long long53 = week43.getSerialIndex();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod54 = week43.next();
        int int55 = week43.getYearValue();
        boolean boolean56 = week39.equals((java.lang.Object) int55);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-60506355600000L) + "'", long5 == (-60506355600000L));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 35 + "'", int6 == 35);
        org.junit.Assert.assertNotNull(regularTimePeriod7);
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Week 35, 52" + "'", str16, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-60506053200001L) + "'", long17 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-60505750800001L) + "'", long18 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod22);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertNotNull(class24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(class26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(regularTimePeriod31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 52 + "'", int32 == 52);
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 52 + "'", int34 == 52);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 2791L + "'", long35 == 2791L);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod40);
        org.junit.Assert.assertNotNull(regularTimePeriod44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 52 + "'", int45 == 52);
        org.junit.Assert.assertNotNull(timeZone46);
// flaky:         org.junit.Assert.assertEquals(timeZone46.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 52 + "'", int48 == 52);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 52 + "'", int51 == 52);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + (-60505750800001L) + "'", long52 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 2791L + "'", long53 == 2791L);
        org.junit.Assert.assertNotNull(regularTimePeriod54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 52 + "'", int55 == 52);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test1421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1421");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.next();
        java.util.Date date6 = week2.getEnd();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week(date6);
        java.util.Date date8 = week7.getStart();
        org.jfree.data.time.Week week11 = new org.jfree.data.time.Week((int) '4', (int) ' ');
        long long12 = week11.getSerialIndex();
        java.util.Date date13 = week11.getStart();
        org.jfree.data.time.Week week16 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str17 = week16.toString();
        long long18 = week16.getMiddleMillisecond();
        long long19 = week16.getLastMillisecond();
        org.jfree.data.time.Week week22 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod23 = week22.next();
        java.lang.Class<?> wildcardClass24 = week22.getClass();
        java.lang.Class class25 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass24);
        int int26 = week16.compareTo((java.lang.Object) wildcardClass24);
        java.lang.Class class27 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass24);
        java.lang.Class class28 = org.jfree.data.time.RegularTimePeriod.downsize(class27);
        org.jfree.data.time.Week week30 = new org.jfree.data.time.Week();
        long long31 = week30.getFirstMillisecond();
        org.jfree.data.time.Year year32 = week30.getYear();
        org.jfree.data.time.Week week33 = new org.jfree.data.time.Week(0, year32);
        java.util.Date date34 = week33.getStart();
        org.jfree.data.time.Week week37 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date38 = week37.getStart();
        java.util.Date date39 = week37.getEnd();
        int int40 = week37.getYearValue();
        long long41 = week37.getLastMillisecond();
        java.lang.Class<?> wildcardClass42 = week37.getClass();
        java.util.Date date43 = null;
        org.jfree.data.time.Week week46 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.util.Date date47 = week46.getStart();
        int int48 = week46.getYearValue();
        java.util.Date date49 = week46.getEnd();
        org.jfree.data.time.Week week52 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod53 = week52.next();
        java.lang.Class<?> wildcardClass54 = week52.getClass();
        java.lang.Class class55 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass54);
        java.lang.Class class56 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass54);
        org.jfree.data.time.Week week59 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod60 = week59.next();
        int int61 = week59.getYearValue();
        java.util.TimeZone timeZone62 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int63 = week59.compareTo((java.lang.Object) timeZone62);
        int int64 = week59.getYearValue();
        int int66 = week59.compareTo((java.lang.Object) 9);
        java.util.Date date67 = week59.getStart();
        org.jfree.data.time.Week week68 = new org.jfree.data.time.Week(date67);
        org.jfree.data.time.Week week71 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod72 = week71.next();
        int int73 = week71.getYearValue();
        java.util.TimeZone timeZone74 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int75 = week71.compareTo((java.lang.Object) timeZone74);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod76 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass54, date67, timeZone74);
        org.jfree.data.time.Week week79 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod80 = week79.previous();
        int int81 = week79.getYearValue();
        java.util.Date date82 = week79.getStart();
        java.util.TimeZone timeZone83 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.Week week84 = new org.jfree.data.time.Week(date82, timeZone83);
        org.jfree.data.time.Week week85 = new org.jfree.data.time.Week(date67, timeZone83);
        org.jfree.data.time.Week week86 = new org.jfree.data.time.Week(date49, timeZone83);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod87 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass42, date43, timeZone83);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod88 = org.jfree.data.time.RegularTimePeriod.createInstance(class28, date34, timeZone83);
        org.jfree.data.time.Week week89 = new org.jfree.data.time.Week(date13, timeZone83);
        java.util.Locale locale90 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Week week91 = new org.jfree.data.time.Week(date8, timeZone83, locale90);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'locale' argument.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1748L + "'", long12 == 1748L);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sun Dec 21 00:00:00 CET 32");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Week 35, 52" + "'", str17, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-60506053200001L) + "'", long18 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-60505750800001L) + "'", long19 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod23);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(class25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(class27);
        org.junit.Assert.assertNotNull(class28);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 1637449200000L + "'", long31 == 1637449200000L);
        org.junit.Assert.assertNotNull(year32);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Sun Dec 20 00:00:00 CET 2020");
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 97 + "'", int40 == 97);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + (-59100800400001L) + "'", long41 == (-59100800400001L));
        org.junit.Assert.assertNotNull(wildcardClass42);
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 52 + "'", int48 == 52);
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod53);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNotNull(class55);
        org.junit.Assert.assertNotNull(class56);
        org.junit.Assert.assertNotNull(regularTimePeriod60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 52 + "'", int61 == 52);
        org.junit.Assert.assertNotNull(timeZone62);
// flaky:         org.junit.Assert.assertEquals(timeZone62.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 52 + "'", int64 == 52);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertNotNull(date67);
        org.junit.Assert.assertEquals(date67.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 52 + "'", int73 == 52);
        org.junit.Assert.assertNotNull(timeZone74);
// flaky:         org.junit.Assert.assertEquals(timeZone74.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod76);
        org.junit.Assert.assertNotNull(regularTimePeriod80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 52 + "'", int81 == 52);
        org.junit.Assert.assertNotNull(date82);
        org.junit.Assert.assertEquals(date82.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(timeZone83);
// flaky:         org.junit.Assert.assertEquals(timeZone83.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod87);
        org.junit.Assert.assertNotNull(regularTimePeriod88);
    }

    @Test
    public void test1422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1422");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        int int3 = week2.getYearValue();
        java.util.Calendar calendar4 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long5 = week2.getFirstMillisecond(calendar4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 52 + "'", int3 == 52);
    }

    @Test
    public void test1423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1423");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        long long5 = week2.getLastMillisecond();
        boolean boolean7 = week2.equals((java.lang.Object) (short) 10);
        java.lang.String str8 = week2.toString();
        org.jfree.data.time.Week week11 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod12 = week11.previous();
        java.util.Date date13 = week11.getEnd();
        org.jfree.data.time.Week week16 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod17 = week16.next();
        int int18 = week16.getYearValue();
        java.util.TimeZone timeZone19 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int20 = week16.compareTo((java.lang.Object) timeZone19);
        int int21 = week16.getYearValue();
        int int23 = week16.compareTo((java.lang.Object) 9);
        int int24 = week16.getYearValue();
        long long25 = week16.getLastMillisecond();
        int int26 = week16.getWeek();
        java.util.Date date27 = week16.getEnd();
        org.jfree.data.time.Week week30 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date31 = week30.getStart();
        java.util.Date date32 = week30.getEnd();
        org.jfree.data.time.Week week35 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod36 = week35.next();
        java.lang.Class<?> wildcardClass37 = week35.getClass();
        java.lang.Class class38 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass37);
        org.jfree.data.time.Week week41 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date42 = week41.getStart();
        java.lang.Class class43 = null;
        java.util.Date date44 = null;
        java.util.TimeZone timeZone45 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod46 = org.jfree.data.time.RegularTimePeriod.createInstance(class43, date44, timeZone45);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod47 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass37, date42, timeZone45);
        org.jfree.data.time.Week week48 = new org.jfree.data.time.Week(date32, timeZone45);
        org.jfree.data.time.Week week49 = new org.jfree.data.time.Week(date27, timeZone45);
        org.jfree.data.time.Week week50 = new org.jfree.data.time.Week(date13, timeZone45);
        long long51 = week50.getLastMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod52 = week50.previous();
        // The following exception was thrown during execution in test generation
        try {
            int int53 = week2.compareTo((java.lang.Object) regularTimePeriod52);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Year constructor: year (52) outside valid range.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-60505750800001L) + "'", long5 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Week 35, 52" + "'", str8, "Week 35, 52");
        org.junit.Assert.assertNotNull(regularTimePeriod12);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 52 + "'", int18 == 52);
        org.junit.Assert.assertNotNull(timeZone19);
// flaky:         org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 52 + "'", int21 == 52);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 52 + "'", int24 == 52);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-60505750800001L) + "'", long25 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 35 + "'", int26 == 35);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod36);
        org.junit.Assert.assertNotNull(wildcardClass37);
        org.junit.Assert.assertNotNull(class38);
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone45);
// flaky:         org.junit.Assert.assertEquals(timeZone45.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod46);
        org.junit.Assert.assertNotNull(regularTimePeriod47);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + (-60505750800001L) + "'", long51 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod52);
    }

    @Test
    public void test1424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1424");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.next();
        java.lang.String str6 = week2.toString();
        org.jfree.data.time.Week week10 = new org.jfree.data.time.Week();
        long long11 = week10.getFirstMillisecond();
        org.jfree.data.time.Year year12 = week10.getYear();
        org.jfree.data.time.Week week13 = new org.jfree.data.time.Week(52, year12);
        org.jfree.data.time.Week week14 = new org.jfree.data.time.Week((int) (byte) -1, year12);
        org.jfree.data.time.Week week15 = new org.jfree.data.time.Week(0, year12);
        int int16 = week2.compareTo((java.lang.Object) week15);
        org.jfree.data.time.Week week19 = new org.jfree.data.time.Week((int) '4', (int) ' ');
        java.util.Date date20 = week19.getStart();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod21 = week19.next();
        boolean boolean22 = week2.equals((java.lang.Object) week19);
        java.util.Calendar calendar23 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long24 = week2.getFirstMillisecond(calendar23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Week 35, 52" + "'", str6, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1637449200000L + "'", long11 == 1637449200000L);
        org.junit.Assert.assertNotNull(year12);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1969) + "'", int16 == (-1969));
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Sun Dec 21 00:00:00 CET 32");
        org.junit.Assert.assertNotNull(regularTimePeriod21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test1425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1425");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date3 = week2.getStart();
        java.util.Date date4 = week2.getEnd();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.next();
        boolean boolean7 = week2.equals((java.lang.Object) 0L);
        long long8 = week2.getMiddleMillisecond();
        org.jfree.data.time.Week week10 = new org.jfree.data.time.Week();
        long long11 = week10.getFirstMillisecond();
        org.jfree.data.time.Year year12 = week10.getYear();
        org.jfree.data.time.Week week13 = new org.jfree.data.time.Week(0, year12);
        java.util.Date date14 = week13.getStart();
        java.util.Date date15 = week13.getStart();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod16 = week13.next();
        org.jfree.data.time.Year year17 = week13.getYear();
        boolean boolean18 = week2.equals((java.lang.Object) week13);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-59101102800001L) + "'", long8 == (-59101102800001L));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1637449200000L + "'", long11 == 1637449200000L);
        org.junit.Assert.assertNotNull(year12);
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Sun Dec 20 00:00:00 CET 2020");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Sun Dec 20 00:00:00 CET 2020");
        org.junit.Assert.assertNotNull(regularTimePeriod16);
        org.junit.Assert.assertNotNull(year17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test1426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1426");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(32, 7);
        java.util.Date date3 = week2.getEnd();
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sat Aug 06 23:59:59 CET 7");
    }

    @Test
    public void test1427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1427");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getSerialIndex();
        int int6 = week2.compareTo((java.lang.Object) 1637449200000L);
        java.lang.String str7 = week2.toString();
        int int8 = week2.getYearValue();
        int int9 = week2.getWeek();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.next();
        long long11 = week2.getMiddleMillisecond();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 2791L + "'", long4 == 2791L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Week 35, 52" + "'", str7, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 52 + "'", int8 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-60506053200001L) + "'", long11 == (-60506053200001L));
    }

    @Test
    public void test1428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1428");
        org.jfree.data.time.Week week3 = new org.jfree.data.time.Week();
        long long4 = week3.getFirstMillisecond();
        org.jfree.data.time.Year year5 = week3.getYear();
        org.jfree.data.time.Week week6 = new org.jfree.data.time.Week(0, year5);
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week(53, year5);
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week((int) '4', year5);
        int int9 = week8.getWeek();
        long long10 = week8.getSerialIndex();
        long long11 = week8.getFirstMillisecond();
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1637449200000L + "'", long4 == 1637449200000L);
        org.junit.Assert.assertNotNull(year5);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 52 + "'", int9 == 52);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 107165L + "'", long10 == 107165L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1639868400000L + "'", long11 == 1639868400000L);
    }

    @Test
    public void test1429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1429");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (-1));
        java.lang.String str3 = week2.toString();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, -1" + "'", str3, "Week 35, -1");
    }

    @Test
    public void test1430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1430");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod11 = week2.next();
        java.util.Date date12 = week2.getStart();
        java.lang.String str13 = week2.toString();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod14 = week2.next();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertNotNull(regularTimePeriod11);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Week 35, 52" + "'", str13, "Week 35, 52");
        org.junit.Assert.assertNotNull(regularTimePeriod14);
    }

    @Test
    public void test1431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1431");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        int int10 = week2.getYearValue();
        long long11 = week2.getLastMillisecond();
        int int12 = week2.getWeek();
        java.util.Date date13 = week2.getEnd();
        org.jfree.data.time.Week week16 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date17 = week16.getStart();
        java.util.Date date18 = week16.getEnd();
        org.jfree.data.time.Week week21 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod22 = week21.next();
        java.lang.Class<?> wildcardClass23 = week21.getClass();
        java.lang.Class class24 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass23);
        org.jfree.data.time.Week week27 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date28 = week27.getStart();
        java.lang.Class class29 = null;
        java.util.Date date30 = null;
        java.util.TimeZone timeZone31 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod32 = org.jfree.data.time.RegularTimePeriod.createInstance(class29, date30, timeZone31);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod33 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass23, date28, timeZone31);
        org.jfree.data.time.Week week34 = new org.jfree.data.time.Week(date18, timeZone31);
        org.jfree.data.time.Week week35 = new org.jfree.data.time.Week(date13, timeZone31);
        org.jfree.data.time.Week week38 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod39 = week38.previous();
        java.util.Date date40 = week38.getEnd();
        org.jfree.data.time.Week week43 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod44 = week43.next();
        int int45 = week43.getYearValue();
        java.util.TimeZone timeZone46 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int47 = week43.compareTo((java.lang.Object) timeZone46);
        int int48 = week43.getYearValue();
        int int50 = week43.compareTo((java.lang.Object) 9);
        int int51 = week43.getYearValue();
        long long52 = week43.getLastMillisecond();
        int int53 = week43.getWeek();
        java.util.Date date54 = week43.getEnd();
        org.jfree.data.time.Week week57 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date58 = week57.getStart();
        java.util.Date date59 = week57.getEnd();
        org.jfree.data.time.Week week62 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod63 = week62.next();
        java.lang.Class<?> wildcardClass64 = week62.getClass();
        java.lang.Class class65 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass64);
        org.jfree.data.time.Week week68 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date69 = week68.getStart();
        java.lang.Class class70 = null;
        java.util.Date date71 = null;
        java.util.TimeZone timeZone72 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod73 = org.jfree.data.time.RegularTimePeriod.createInstance(class70, date71, timeZone72);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod74 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass64, date69, timeZone72);
        org.jfree.data.time.Week week75 = new org.jfree.data.time.Week(date59, timeZone72);
        org.jfree.data.time.Week week76 = new org.jfree.data.time.Week(date54, timeZone72);
        org.jfree.data.time.Week week77 = new org.jfree.data.time.Week(date40, timeZone72);
        org.jfree.data.time.Week week78 = new org.jfree.data.time.Week(date13, timeZone72);
        org.jfree.data.time.Week week81 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod82 = week81.next();
        int int83 = week81.getYearValue();
        java.util.TimeZone timeZone84 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int85 = week81.compareTo((java.lang.Object) timeZone84);
        int int86 = week81.getYearValue();
        int int88 = week81.compareTo((java.lang.Object) 9);
        int int89 = week81.getYearValue();
        int int90 = week81.getYearValue();
        long long91 = week81.getFirstMillisecond();
        int int92 = week78.compareTo((java.lang.Object) long91);
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 52 + "'", int10 == 52);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-60505750800001L) + "'", long11 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 35 + "'", int12 == 35);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod22);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertNotNull(class24);
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone31);
// flaky:         org.junit.Assert.assertEquals(timeZone31.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod32);
        org.junit.Assert.assertNotNull(regularTimePeriod33);
        org.junit.Assert.assertNotNull(regularTimePeriod39);
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 52 + "'", int45 == 52);
        org.junit.Assert.assertNotNull(timeZone46);
// flaky:         org.junit.Assert.assertEquals(timeZone46.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 52 + "'", int48 == 52);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 52 + "'", int51 == 52);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + (-60505750800001L) + "'", long52 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 35 + "'", int53 == 35);
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date58);
        org.junit.Assert.assertEquals(date58.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date59);
        org.junit.Assert.assertEquals(date59.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod63);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertNotNull(class65);
        org.junit.Assert.assertNotNull(date69);
        org.junit.Assert.assertEquals(date69.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone72);
// flaky:         org.junit.Assert.assertEquals(timeZone72.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod73);
        org.junit.Assert.assertNotNull(regularTimePeriod74);
        org.junit.Assert.assertNotNull(regularTimePeriod82);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 52 + "'", int83 == 52);
        org.junit.Assert.assertNotNull(timeZone84);
// flaky:         org.junit.Assert.assertEquals(timeZone84.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 1 + "'", int85 == 1);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 52 + "'", int86 == 52);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 1 + "'", int88 == 1);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 52 + "'", int89 == 52);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 52 + "'", int90 == 52);
        org.junit.Assert.assertTrue("'" + long91 + "' != '" + (-60506355600000L) + "'", long91 == (-60506355600000L));
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 1 + "'", int92 == 1);
    }

    @Test
    public void test1432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1432");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        long long4 = week2.getMiddleMillisecond();
        boolean boolean6 = week2.equals((java.lang.Object) 11);
        org.jfree.data.time.Week week9 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week9.next();
        int int11 = week9.getYearValue();
        java.util.TimeZone timeZone12 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int13 = week9.compareTo((java.lang.Object) timeZone12);
        int int14 = week9.getWeek();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod15 = week9.next();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod16 = week9.previous();
        boolean boolean17 = week2.equals((java.lang.Object) regularTimePeriod16);
        long long18 = week2.getFirstMillisecond();
        long long19 = week2.getMiddleMillisecond();
        java.util.Calendar calendar20 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long21 = week2.getFirstMillisecond(calendar20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertNotNull(timeZone12);
// flaky:         org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 35 + "'", int14 == 35);
        org.junit.Assert.assertNotNull(regularTimePeriod15);
        org.junit.Assert.assertNotNull(regularTimePeriod16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-60506355600000L) + "'", long18 == (-60506355600000L));
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-60506053200001L) + "'", long19 == (-60506053200001L));
    }

    @Test
    public void test1433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1433");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(79, 79);
    }

    @Test
    public void test1434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1434");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, (int) 'a');
        long long3 = week2.getFirstMillisecond();
        java.util.Calendar calendar4 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long5 = week2.getMiddleMillisecond(calendar4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-59101405200000L) + "'", long3 == (-59101405200000L));
    }

    @Test
    public void test1435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1435");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '4', (int) ' ');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.previous();
        java.util.Date date4 = regularTimePeriod3.getEnd();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str8 = week7.toString();
        long long9 = week7.getMiddleMillisecond();
        long long10 = week7.getLastMillisecond();
        org.jfree.data.time.Week week13 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod14 = week13.next();
        java.lang.Class<?> wildcardClass15 = week13.getClass();
        java.lang.Class class16 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass15);
        int int17 = week7.compareTo((java.lang.Object) wildcardClass15);
        java.lang.Class class18 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass15);
        java.lang.Class class19 = org.jfree.data.time.RegularTimePeriod.downsize(class18);
        java.lang.Class class20 = org.jfree.data.time.RegularTimePeriod.downsize(class18);
        java.lang.Class class21 = org.jfree.data.time.RegularTimePeriod.downsize(class20);
        org.jfree.data.time.Week week24 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod25 = week24.next();
        java.lang.Class<?> wildcardClass26 = week24.getClass();
        java.lang.Class class27 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass26);
        org.jfree.data.time.Week week30 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date31 = week30.getStart();
        java.lang.Class class32 = null;
        java.util.Date date33 = null;
        java.util.TimeZone timeZone34 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod35 = org.jfree.data.time.RegularTimePeriod.createInstance(class32, date33, timeZone34);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod36 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass26, date31, timeZone34);
        java.lang.Class class37 = null;
        org.jfree.data.time.Week week40 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod41 = week40.next();
        int int42 = week40.getYearValue();
        java.util.TimeZone timeZone43 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int44 = week40.compareTo((java.lang.Object) timeZone43);
        int int45 = week40.getYearValue();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod46 = week40.previous();
        java.util.Date date47 = regularTimePeriod46.getEnd();
        org.jfree.data.time.Week week50 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod51 = week50.next();
        java.lang.Class<?> wildcardClass52 = week50.getClass();
        java.lang.Class class53 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass52);
        org.jfree.data.time.Week week56 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date57 = week56.getStart();
        java.lang.Class class58 = null;
        java.util.Date date59 = null;
        java.util.TimeZone timeZone60 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod61 = org.jfree.data.time.RegularTimePeriod.createInstance(class58, date59, timeZone60);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod62 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass52, date57, timeZone60);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod63 = org.jfree.data.time.RegularTimePeriod.createInstance(class37, date47, timeZone60);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod64 = org.jfree.data.time.RegularTimePeriod.createInstance(class21, date31, timeZone60);
        java.util.Locale locale65 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Week week66 = new org.jfree.data.time.Week(date4, timeZone60, locale65);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'locale' argument.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Sat Dec 20 23:59:59 CET 32");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Week 35, 52" + "'", str8, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-60506053200001L) + "'", long9 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-60505750800001L) + "'", long10 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod14);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNotNull(class16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(class18);
        org.junit.Assert.assertNotNull(class19);
        org.junit.Assert.assertNotNull(class20);
        org.junit.Assert.assertNotNull(class21);
        org.junit.Assert.assertNotNull(regularTimePeriod25);
        org.junit.Assert.assertNotNull(wildcardClass26);
        org.junit.Assert.assertNotNull(class27);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone34);
// flaky:         org.junit.Assert.assertEquals(timeZone34.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod35);
        org.junit.Assert.assertNotNull(regularTimePeriod36);
        org.junit.Assert.assertNotNull(regularTimePeriod41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 52 + "'", int42 == 52);
        org.junit.Assert.assertNotNull(timeZone43);
// flaky:         org.junit.Assert.assertEquals(timeZone43.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 52 + "'", int45 == 52);
        org.junit.Assert.assertNotNull(regularTimePeriod46);
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Sat Aug 19 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod51);
        org.junit.Assert.assertNotNull(wildcardClass52);
        org.junit.Assert.assertNotNull(class53);
        org.junit.Assert.assertNotNull(date57);
        org.junit.Assert.assertEquals(date57.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone60);
// flaky:         org.junit.Assert.assertEquals(timeZone60.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod61);
        org.junit.Assert.assertNotNull(regularTimePeriod62);
        org.junit.Assert.assertNull(regularTimePeriod63);
        org.junit.Assert.assertNull(regularTimePeriod64);
    }

    @Test
    public void test1436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1436");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date3 = week2.getStart();
        java.util.Date date4 = week2.getEnd();
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week();
        long long9 = week8.getFirstMillisecond();
        org.jfree.data.time.Year year10 = week8.getYear();
        org.jfree.data.time.Week week11 = new org.jfree.data.time.Week(52, year10);
        org.jfree.data.time.Week week12 = new org.jfree.data.time.Week((int) (byte) -1, year10);
        org.jfree.data.time.Week week13 = new org.jfree.data.time.Week(0, year10);
        java.util.Date date14 = year10.getEnd();
        org.jfree.data.time.Week week15 = new org.jfree.data.time.Week(date14);
        org.jfree.data.time.Week week18 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod19 = week18.next();
        java.lang.Class<?> wildcardClass20 = week18.getClass();
        java.lang.Class class21 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass20);
        java.lang.Class class22 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass20);
        org.jfree.data.time.Week week25 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod26 = week25.next();
        int int27 = week25.getYearValue();
        java.util.TimeZone timeZone28 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int29 = week25.compareTo((java.lang.Object) timeZone28);
        int int30 = week25.getYearValue();
        int int32 = week25.compareTo((java.lang.Object) 9);
        java.util.Date date33 = week25.getStart();
        org.jfree.data.time.Week week34 = new org.jfree.data.time.Week(date33);
        org.jfree.data.time.Week week37 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod38 = week37.next();
        int int39 = week37.getYearValue();
        java.util.TimeZone timeZone40 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int41 = week37.compareTo((java.lang.Object) timeZone40);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod42 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass20, date33, timeZone40);
        org.jfree.data.time.Week week45 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.util.Date date46 = week45.getStart();
        org.jfree.data.time.Week week47 = new org.jfree.data.time.Week(date46);
        org.jfree.data.time.Week week50 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod51 = week50.next();
        java.lang.Class<?> wildcardClass52 = week50.getClass();
        java.lang.Class class53 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass52);
        java.lang.Class class54 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass52);
        org.jfree.data.time.Week week57 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod58 = week57.next();
        int int59 = week57.getYearValue();
        java.util.TimeZone timeZone60 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int61 = week57.compareTo((java.lang.Object) timeZone60);
        int int62 = week57.getYearValue();
        int int64 = week57.compareTo((java.lang.Object) 9);
        java.util.Date date65 = week57.getStart();
        org.jfree.data.time.Week week66 = new org.jfree.data.time.Week(date65);
        org.jfree.data.time.Week week69 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod70 = week69.next();
        int int71 = week69.getYearValue();
        java.util.TimeZone timeZone72 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int73 = week69.compareTo((java.lang.Object) timeZone72);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod74 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass52, date65, timeZone72);
        org.jfree.data.time.Week week77 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod78 = week77.previous();
        int int79 = week77.getYearValue();
        java.util.Date date80 = week77.getStart();
        java.util.TimeZone timeZone81 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.Week week82 = new org.jfree.data.time.Week(date80, timeZone81);
        org.jfree.data.time.Week week83 = new org.jfree.data.time.Week(date65, timeZone81);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod84 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass20, date46, timeZone81);
        org.jfree.data.time.Week week85 = new org.jfree.data.time.Week(date14, timeZone81);
        org.jfree.data.time.Week week86 = new org.jfree.data.time.Week(date4, timeZone81);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1637449200000L + "'", long9 == 1637449200000L);
        org.junit.Assert.assertNotNull(year10);
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Fri Dec 31 23:59:59 CET 2021");
        org.junit.Assert.assertNotNull(regularTimePeriod19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertNotNull(class21);
        org.junit.Assert.assertNotNull(class22);
        org.junit.Assert.assertNotNull(regularTimePeriod26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 52 + "'", int27 == 52);
        org.junit.Assert.assertNotNull(timeZone28);
// flaky:         org.junit.Assert.assertEquals(timeZone28.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 52 + "'", int30 == 52);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 52 + "'", int39 == 52);
        org.junit.Assert.assertNotNull(timeZone40);
// flaky:         org.junit.Assert.assertEquals(timeZone40.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod42);
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod51);
        org.junit.Assert.assertNotNull(wildcardClass52);
        org.junit.Assert.assertNotNull(class53);
        org.junit.Assert.assertNotNull(class54);
        org.junit.Assert.assertNotNull(regularTimePeriod58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 52 + "'", int59 == 52);
        org.junit.Assert.assertNotNull(timeZone60);
// flaky:         org.junit.Assert.assertEquals(timeZone60.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 52 + "'", int62 == 52);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertNotNull(date65);
        org.junit.Assert.assertEquals(date65.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 52 + "'", int71 == 52);
        org.junit.Assert.assertNotNull(timeZone72);
// flaky:         org.junit.Assert.assertEquals(timeZone72.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 1 + "'", int73 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod74);
        org.junit.Assert.assertNotNull(regularTimePeriod78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 52 + "'", int79 == 52);
        org.junit.Assert.assertNotNull(date80);
        org.junit.Assert.assertEquals(date80.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(timeZone81);
// flaky:         org.junit.Assert.assertEquals(timeZone81.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNotNull(regularTimePeriod84);
    }

    @Test
    public void test1437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1437");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.next();
        java.lang.String str6 = week2.toString();
        org.jfree.data.time.Week week10 = new org.jfree.data.time.Week();
        long long11 = week10.getFirstMillisecond();
        org.jfree.data.time.Year year12 = week10.getYear();
        org.jfree.data.time.Week week13 = new org.jfree.data.time.Week(52, year12);
        org.jfree.data.time.Week week14 = new org.jfree.data.time.Week((int) (byte) -1, year12);
        org.jfree.data.time.Week week15 = new org.jfree.data.time.Week(0, year12);
        int int16 = week2.compareTo((java.lang.Object) week15);
        java.util.Calendar calendar17 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long18 = week15.getLastMillisecond(calendar17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Week 35, 52" + "'", str6, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1637449200000L + "'", long11 == 1637449200000L);
        org.junit.Assert.assertNotNull(year12);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1969) + "'", int16 == (-1969));
    }

    @Test
    public void test1438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1438");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(35, (int) (byte) -1);
        java.util.Date date3 = week2.getEnd();
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sat Aug 30 23:59:59 CET 2");
    }

    @Test
    public void test1439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1439");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(52, (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        long long4 = week2.getSerialIndex();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 2808L + "'", long4 == 2808L);
    }

    @Test
    public void test1440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1440");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(10, 0);
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Year year3 = week2.getYear();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Year constructor: year (0) outside valid range.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1441");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(7, 1);
        java.util.Date date3 = week2.getStart();
        long long4 = week2.getSerialIndex();
        java.lang.String str5 = week2.toString();
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Feb 06 00:00:00 CET 1");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 60L + "'", long4 == 60L);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Week 7, 1" + "'", str5, "Week 7, 1");
    }

    @Test
    public void test1442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1442");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        int int11 = week2.getYearValue();
        long long12 = week2.getLastMillisecond();
        org.jfree.data.time.Week week15 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod16 = week15.next();
        java.lang.Class<?> wildcardClass17 = week15.getClass();
        java.lang.Class class18 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass17);
        boolean boolean19 = week2.equals((java.lang.Object) wildcardClass17);
        int int20 = week2.getYearValue();
        java.lang.Object obj21 = null;
        int int22 = week2.compareTo(obj21);
        java.lang.String str23 = week2.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Year year24 = week2.getYear();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Year constructor: year (52) outside valid range.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-60505750800001L) + "'", long12 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(class18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 52 + "'", int20 == 52);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Week 35, 52" + "'", str23, "Week 35, 52");
    }

    @Test
    public void test1443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1443");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        org.jfree.data.time.Week week10 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str11 = week10.toString();
        long long12 = week10.getMiddleMillisecond();
        long long13 = week10.getLastMillisecond();
        org.jfree.data.time.Week week16 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod17 = week16.next();
        java.lang.Class<?> wildcardClass18 = week16.getClass();
        java.lang.Class class19 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass18);
        int int20 = week10.compareTo((java.lang.Object) wildcardClass18);
        boolean boolean21 = week2.equals((java.lang.Object) wildcardClass18);
        org.jfree.data.time.Week week24 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str25 = week24.toString();
        long long26 = week24.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod27 = week24.next();
        java.util.Date date28 = week24.getEnd();
        org.jfree.data.time.Week week31 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod32 = week31.next();
        java.lang.Class<?> wildcardClass33 = week31.getClass();
        java.lang.Class class34 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass33);
        org.jfree.data.time.Week week37 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date38 = week37.getStart();
        java.lang.Class class39 = null;
        java.util.Date date40 = null;
        java.util.TimeZone timeZone41 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod42 = org.jfree.data.time.RegularTimePeriod.createInstance(class39, date40, timeZone41);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod43 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass33, date38, timeZone41);
        org.jfree.data.time.Week week44 = new org.jfree.data.time.Week(date38);
        long long45 = week44.getSerialIndex();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod46 = week44.next();
        java.lang.Class<?> wildcardClass47 = regularTimePeriod46.getClass();
        org.jfree.data.time.Week week50 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod51 = week50.next();
        int int52 = week50.getYearValue();
        java.util.TimeZone timeZone53 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int54 = week50.compareTo((java.lang.Object) timeZone53);
        int int55 = week50.getYearValue();
        int int57 = week50.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod58 = week50.previous();
        int int59 = week50.getYearValue();
        long long60 = week50.getLastMillisecond();
        org.jfree.data.time.Week week63 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod64 = week63.next();
        java.lang.Class<?> wildcardClass65 = week63.getClass();
        java.lang.Class class66 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass65);
        boolean boolean67 = week50.equals((java.lang.Object) wildcardClass65);
        int int68 = week50.getYearValue();
        java.lang.Object obj69 = null;
        int int70 = week50.compareTo(obj69);
        long long71 = week50.getSerialIndex();
        java.util.Date date72 = week50.getEnd();
        org.jfree.data.time.Week week75 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str76 = week75.toString();
        long long77 = week75.getMiddleMillisecond();
        long long78 = week75.getLastMillisecond();
        long long79 = week75.getFirstMillisecond();
        java.util.Date date80 = week75.getStart();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod81 = week75.next();
        java.util.Date date82 = week75.getEnd();
        java.util.Date date83 = week75.getStart();
        java.lang.Class class84 = null;
        java.util.Date date85 = null;
        java.util.TimeZone timeZone86 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod87 = org.jfree.data.time.RegularTimePeriod.createInstance(class84, date85, timeZone86);
        org.jfree.data.time.Week week88 = new org.jfree.data.time.Week(date83, timeZone86);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod89 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass47, date72, timeZone86);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod90 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass18, date28, timeZone86);
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Week 35, 52" + "'", str11, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-60506053200001L) + "'", long12 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-60505750800001L) + "'", long13 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod17);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(class19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Week 35, 52" + "'", str25, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + (-60506053200001L) + "'", long26 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod27);
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod32);
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertNotNull(class34);
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone41);
// flaky:         org.junit.Assert.assertEquals(timeZone41.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod42);
        org.junit.Assert.assertNotNull(regularTimePeriod43);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 5150L + "'", long45 == 5150L);
        org.junit.Assert.assertNotNull(regularTimePeriod46);
        org.junit.Assert.assertNotNull(wildcardClass47);
        org.junit.Assert.assertNotNull(regularTimePeriod51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 52 + "'", int52 == 52);
        org.junit.Assert.assertNotNull(timeZone53);
// flaky:         org.junit.Assert.assertEquals(timeZone53.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 52 + "'", int55 == 52);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 52 + "'", int59 == 52);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + (-60505750800001L) + "'", long60 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod64);
        org.junit.Assert.assertNotNull(wildcardClass65);
        org.junit.Assert.assertNotNull(class66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 52 + "'", int68 == 52);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 2791L + "'", long71 == 2791L);
        org.junit.Assert.assertNotNull(date72);
        org.junit.Assert.assertEquals(date72.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "Week 35, 52" + "'", str76, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + (-60506053200001L) + "'", long77 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + (-60505750800001L) + "'", long78 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + long79 + "' != '" + (-60506355600000L) + "'", long79 == (-60506355600000L));
        org.junit.Assert.assertNotNull(date80);
        org.junit.Assert.assertEquals(date80.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod81);
        org.junit.Assert.assertNotNull(date82);
        org.junit.Assert.assertEquals(date82.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date83);
        org.junit.Assert.assertEquals(date83.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(timeZone86);
// flaky:         org.junit.Assert.assertEquals(timeZone86.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod87);
        org.junit.Assert.assertNotNull(regularTimePeriod89);
        org.junit.Assert.assertNotNull(regularTimePeriod90);
    }

    @Test
    public void test1444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1444");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.next();
        int int7 = week2.compareTo((java.lang.Object) 0.0d);
        int int8 = week2.getYearValue();
        long long9 = week2.getFirstMillisecond();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 52 + "'", int8 == 52);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-60506355600000L) + "'", long9 == (-60506355600000L));
    }

    @Test
    public void test1445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1445");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        int int10 = week2.getYearValue();
        long long11 = week2.getMiddleMillisecond();
        long long12 = week2.getSerialIndex();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 52 + "'", int10 == 52);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-60506053200001L) + "'", long11 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 2791L + "'", long12 == 2791L);
    }

    @Test
    public void test1446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1446");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        long long5 = week2.getLastMillisecond();
        long long6 = week2.getFirstMillisecond();
        java.lang.String str7 = week2.toString();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-60505750800001L) + "'", long5 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-60506355600000L) + "'", long6 == (-60506355600000L));
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Week 35, 52" + "'", str7, "Week 35, 52");
    }

    @Test
    public void test1447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1447");
        org.jfree.data.time.Week week3 = new org.jfree.data.time.Week();
        long long4 = week3.getFirstMillisecond();
        org.jfree.data.time.Year year5 = week3.getYear();
        org.jfree.data.time.Week week6 = new org.jfree.data.time.Week(52, year5);
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week((int) (byte) -1, year5);
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week(4, year5);
        java.util.Date date9 = week8.getStart();
        java.lang.Class<?> wildcardClass10 = week8.getClass();
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1637449200000L + "'", long4 == 1637449200000L);
        org.junit.Assert.assertNotNull(year5);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Sun Jan 17 00:00:00 CET 2021");
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test1448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1448");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.previous();
        int int4 = week2.getYearValue();
        java.lang.String str5 = week2.toString();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod6 = week2.previous();
        java.util.Date date7 = week2.getEnd();
        java.lang.Class<?> wildcardClass8 = date7.getClass();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Week 35, 52" + "'", str5, "Week 35, 52");
        org.junit.Assert.assertNotNull(regularTimePeriod6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test1449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1449");
        org.jfree.data.time.Week week6 = new org.jfree.data.time.Week();
        long long7 = week6.getFirstMillisecond();
        org.jfree.data.time.Year year8 = week6.getYear();
        org.jfree.data.time.Week week9 = new org.jfree.data.time.Week((int) (byte) 100, year8);
        org.jfree.data.time.Week week10 = new org.jfree.data.time.Week(100, year8);
        org.jfree.data.time.Week week11 = new org.jfree.data.time.Week((int) (short) 0, year8);
        org.jfree.data.time.Week week12 = new org.jfree.data.time.Week(6, year8);
        org.jfree.data.time.Week week13 = new org.jfree.data.time.Week((int) 'a', year8);
        org.jfree.data.time.Week week14 = new org.jfree.data.time.Week(0, year8);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1637449200000L + "'", long7 == 1637449200000L);
        org.junit.Assert.assertNotNull(year8);
    }

    @Test
    public void test1450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1450");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.previous();
        org.jfree.data.time.Week week6 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod7 = week6.next();
        java.lang.Class<?> wildcardClass8 = week6.getClass();
        java.lang.Class class9 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass8);
        org.jfree.data.time.Week week12 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date13 = week12.getStart();
        java.lang.Class class14 = null;
        java.util.Date date15 = null;
        java.util.TimeZone timeZone16 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod17 = org.jfree.data.time.RegularTimePeriod.createInstance(class14, date15, timeZone16);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod18 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass8, date13, timeZone16);
        org.jfree.data.time.Week week19 = new org.jfree.data.time.Week(date13);
        java.util.Date date20 = week19.getStart();
        int int21 = week2.compareTo((java.lang.Object) date20);
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertNotNull(regularTimePeriod7);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(class9);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone16);
// flaky:         org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod17);
        org.junit.Assert.assertNotNull(regularTimePeriod18);
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
    }

    @Test
    public void test1451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1451");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date3 = week2.getStart();
        java.util.Date date4 = week2.getEnd();
        int int5 = week2.getYearValue();
        java.util.Date date6 = week2.getStart();
        long long7 = week2.getMiddleMillisecond();
        java.lang.String str8 = week2.toString();
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 97 + "'", int5 == 97);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-59101102800001L) + "'", long7 == (-59101102800001L));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Week 9, 97" + "'", str8, "Week 9, 97");
    }

    @Test
    public void test1452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1452");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.next();
        java.util.Date date6 = week2.getEnd();
        int int7 = week2.getYearValue();
        int int8 = week2.getWeek();
        java.util.Calendar calendar9 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long10 = week2.getFirstMillisecond(calendar9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 35 + "'", int8 == 35);
    }

    @Test
    public void test1453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1453");
        org.jfree.data.time.Week week1 = new org.jfree.data.time.Week();
        long long2 = week1.getFirstMillisecond();
        org.jfree.data.time.Year year3 = week1.getYear();
        org.jfree.data.time.Week week4 = new org.jfree.data.time.Week(0, year3);
        int int5 = week4.getYearValue();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod6 = week4.previous();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1637449200000L + "'", long2 == 1637449200000L);
        org.junit.Assert.assertNotNull(year3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2021 + "'", int5 == 2021);
        org.junit.Assert.assertNotNull(regularTimePeriod6);
    }

    @Test
    public void test1454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1454");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod8 = week2.next();
        java.lang.String str9 = week2.toString();
        java.lang.String str10 = week2.toString();
        java.util.Date date11 = week2.getStart();
        org.jfree.data.time.Week week12 = new org.jfree.data.time.Week(date11);
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Year year13 = week12.getYear();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Year constructor: year (52) outside valid range.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertNotNull(regularTimePeriod8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Week 35, 52" + "'", str9, "Week 35, 52");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Week 35, 52" + "'", str10, "Week 35, 52");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Sun Aug 20 00:00:00 CET 52");
    }

    @Test
    public void test1455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1455");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.next();
        java.util.Date date6 = week2.getEnd();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week(date6);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod8 = week7.next();
        org.jfree.data.time.Week week11 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str12 = week11.toString();
        long long13 = week11.getSerialIndex();
        boolean boolean14 = week7.equals((java.lang.Object) long13);
        java.lang.String str15 = week7.toString();
        int int16 = week7.getYearValue();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod8);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Week 35, 52" + "'", str12, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 2791L + "'", long13 == 2791L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Week 35, 52" + "'", str15, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 52 + "'", int16 == 52);
    }

    @Test
    public void test1456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1456");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(8, (int) (short) -1);
        java.util.Date date3 = week2.getStart();
        java.util.Calendar calendar4 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long5 = week2.getMiddleMillisecond(calendar4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Feb 16 00:00:00 CET 2");
    }

    @Test
    public void test1457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1457");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        long long4 = week2.getMiddleMillisecond();
        java.lang.String str5 = week2.toString();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod6 = week2.next();
        java.util.Calendar calendar7 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long8 = regularTimePeriod6.getMiddleMillisecond(calendar7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Week 35, 52" + "'", str5, "Week 35, 52");
        org.junit.Assert.assertNotNull(regularTimePeriod6);
    }

    @Test
    public void test1458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1458");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date3 = week2.getStart();
        java.util.Date date4 = week2.getEnd();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod8 = week7.next();
        java.lang.Class<?> wildcardClass9 = week7.getClass();
        java.lang.Class class10 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass9);
        org.jfree.data.time.Week week13 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date14 = week13.getStart();
        java.lang.Class class15 = null;
        java.util.Date date16 = null;
        java.util.TimeZone timeZone17 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod18 = org.jfree.data.time.RegularTimePeriod.createInstance(class15, date16, timeZone17);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod19 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass9, date14, timeZone17);
        org.jfree.data.time.Week week20 = new org.jfree.data.time.Week(date4, timeZone17);
        long long21 = week20.getSerialIndex();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod22 = week20.previous();
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(class10);
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone17);
// flaky:         org.junit.Assert.assertEquals(timeZone17.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod18);
        org.junit.Assert.assertNotNull(regularTimePeriod19);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 5150L + "'", long21 == 5150L);
        org.junit.Assert.assertNotNull(regularTimePeriod22);
    }

    @Test
    public void test1459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1459");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        org.jfree.data.time.Week week10 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str11 = week10.toString();
        long long12 = week10.getMiddleMillisecond();
        long long13 = week10.getLastMillisecond();
        org.jfree.data.time.Week week16 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod17 = week16.next();
        java.lang.Class<?> wildcardClass18 = week16.getClass();
        java.lang.Class class19 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass18);
        int int20 = week10.compareTo((java.lang.Object) wildcardClass18);
        boolean boolean21 = week2.equals((java.lang.Object) wildcardClass18);
        java.lang.Class class22 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass18);
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Week 35, 52" + "'", str11, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-60506053200001L) + "'", long12 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-60505750800001L) + "'", long13 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod17);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(class19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(class22);
    }

    @Test
    public void test1460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1460");
        org.jfree.data.time.Week week1 = new org.jfree.data.time.Week();
        long long2 = week1.getFirstMillisecond();
        org.jfree.data.time.Year year3 = week1.getYear();
        org.jfree.data.time.Week week4 = new org.jfree.data.time.Week(0, year3);
        java.util.Date date5 = week4.getStart();
        java.util.Date date6 = week4.getStart();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod7 = week4.next();
        org.jfree.data.time.Week week10 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date11 = week10.getStart();
        org.jfree.data.time.Week week12 = new org.jfree.data.time.Week(date11);
        long long13 = week12.getLastMillisecond();
        int int14 = week12.getYearValue();
        org.jfree.data.time.Week week17 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str18 = week17.toString();
        long long19 = week17.getMiddleMillisecond();
        long long20 = week17.getLastMillisecond();
        org.jfree.data.time.Week week23 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod24 = week23.next();
        java.lang.Class<?> wildcardClass25 = week23.getClass();
        java.lang.Class class26 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass25);
        int int27 = week17.compareTo((java.lang.Object) wildcardClass25);
        long long28 = week17.getMiddleMillisecond();
        java.util.Date date29 = week17.getEnd();
        int int30 = week17.getWeek();
        long long31 = week17.getLastMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod32 = week17.next();
        long long33 = week17.getFirstMillisecond();
        long long34 = week17.getFirstMillisecond();
        boolean boolean35 = week12.equals((java.lang.Object) long34);
        java.lang.String str36 = week12.toString();
        boolean boolean37 = week4.equals((java.lang.Object) week12);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1637449200000L + "'", long2 == 1637449200000L);
        org.junit.Assert.assertNotNull(year3);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Sun Dec 20 00:00:00 CET 2020");
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sun Dec 20 00:00:00 CET 2020");
        org.junit.Assert.assertNotNull(regularTimePeriod7);
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-59100800400001L) + "'", long13 == (-59100800400001L));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 97 + "'", int14 == 97);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Week 35, 52" + "'", str18, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-60506053200001L) + "'", long19 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-60505750800001L) + "'", long20 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod24);
        org.junit.Assert.assertNotNull(wildcardClass25);
        org.junit.Assert.assertNotNull(class26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + (-60506053200001L) + "'", long28 == (-60506053200001L));
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 35 + "'", int30 == 35);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + (-60505750800001L) + "'", long31 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod32);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + (-60506355600000L) + "'", long33 == (-60506355600000L));
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + (-60506355600000L) + "'", long34 == (-60506355600000L));
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Week 9, 97" + "'", str36, "Week 9, 97");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test1461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1461");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.next();
        java.util.Date date6 = week2.getEnd();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week(date6);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod8 = week7.next();
        java.util.Date date9 = week7.getEnd();
        java.util.TimeZone timeZone10 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.Week week11 = new org.jfree.data.time.Week(date9, timeZone10);
        java.lang.Object obj12 = null;
        int int13 = week11.compareTo(obj12);
        org.jfree.data.time.Week week16 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod17 = week16.next();
        int int18 = week16.getYearValue();
        java.util.TimeZone timeZone19 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int20 = week16.compareTo((java.lang.Object) timeZone19);
        int int21 = week16.getYearValue();
        long long22 = week16.getMiddleMillisecond();
        java.lang.Class<?> wildcardClass23 = week16.getClass();
        org.jfree.data.time.Week week26 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date27 = week26.getStart();
        org.jfree.data.time.Week week30 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod31 = week30.next();
        int int32 = week30.getYearValue();
        java.util.TimeZone timeZone33 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int34 = week30.compareTo((java.lang.Object) timeZone33);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod35 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass23, date27, timeZone33);
        org.jfree.data.time.Week week38 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod39 = week38.next();
        java.lang.Class<?> wildcardClass40 = week38.getClass();
        java.lang.Class class41 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass40);
        org.jfree.data.time.Week week44 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date45 = week44.getStart();
        java.lang.Class class46 = null;
        java.util.Date date47 = null;
        java.util.TimeZone timeZone48 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod49 = org.jfree.data.time.RegularTimePeriod.createInstance(class46, date47, timeZone48);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod50 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass40, date45, timeZone48);
        org.jfree.data.time.Week week53 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date54 = week53.getStart();
        org.jfree.data.time.Week week55 = new org.jfree.data.time.Week(date54);
        java.util.TimeZone timeZone56 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod57 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass40, date54, timeZone56);
        org.jfree.data.time.Week week58 = new org.jfree.data.time.Week(date27, timeZone56);
        int int59 = week58.getYearValue();
        boolean boolean60 = week11.equals((java.lang.Object) int59);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod61 = week11.previous();
        java.util.Date date62 = regularTimePeriod61.getEnd();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(timeZone10);
// flaky:         org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 52 + "'", int18 == 52);
        org.junit.Assert.assertNotNull(timeZone19);
// flaky:         org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 52 + "'", int21 == 52);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-60506053200001L) + "'", long22 == (-60506053200001L));
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 52 + "'", int32 == 52);
        org.junit.Assert.assertNotNull(timeZone33);
// flaky:         org.junit.Assert.assertEquals(timeZone33.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod35);
        org.junit.Assert.assertNotNull(regularTimePeriod39);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertNotNull(class41);
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone48);
// flaky:         org.junit.Assert.assertEquals(timeZone48.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod49);
        org.junit.Assert.assertNotNull(regularTimePeriod50);
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone56);
// flaky:         org.junit.Assert.assertEquals(timeZone56.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNotNull(regularTimePeriod57);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 97 + "'", int59 == 97);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(regularTimePeriod61);
        org.junit.Assert.assertNotNull(date62);
        org.junit.Assert.assertEquals(date62.toString(), "Sat Aug 19 23:59:59 CET 52");
    }

    @Test
    public void test1462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1462");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) (byte) 10, 4);
        java.lang.Class<?> wildcardClass3 = week2.getClass();
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test1463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1463");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '4', (int) ' ');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.previous();
        java.lang.String str4 = week2.toString();
        long long5 = week2.getFirstMillisecond();
        java.lang.String str6 = week2.toString();
        org.jfree.data.time.Week week9 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str10 = week9.toString();
        long long11 = week9.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod12 = week9.next();
        java.util.Date date13 = week9.getEnd();
        org.jfree.data.time.Week week14 = new org.jfree.data.time.Week(date13);
        long long15 = week14.getLastMillisecond();
        java.util.Date date16 = week14.getEnd();
        org.jfree.data.time.Week week17 = new org.jfree.data.time.Week(date16);
        int int18 = week17.getWeek();
        long long19 = week17.getSerialIndex();
        boolean boolean20 = week2.equals((java.lang.Object) week17);
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Week 52, 32" + "'", str4, "Week 52, 32");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-61126880400000L) + "'", long5 == (-61126880400000L));
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Week 52, 32" + "'", str6, "Week 52, 32");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Week 35, 52" + "'", str10, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-60506053200001L) + "'", long11 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod12);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-60505750800001L) + "'", long15 == (-60505750800001L));
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 35 + "'", int18 == 35);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 2791L + "'", long19 == 2791L);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test1464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1464");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.next();
        java.util.Date date6 = week2.getEnd();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week(date6);
        long long8 = week7.getLastMillisecond();
        java.lang.String str9 = week7.toString();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week7.next();
        java.util.Calendar calendar11 = null;
        // The following exception was thrown during execution in test generation
        try {
            week7.peg(calendar11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-60505750800001L) + "'", long8 == (-60505750800001L));
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Week 35, 52" + "'", str9, "Week 35, 52");
        org.junit.Assert.assertNotNull(regularTimePeriod10);
    }

    @Test
    public void test1465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1465");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date3 = week2.getStart();
        org.jfree.data.time.Week week6 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod7 = week6.next();
        int int8 = week6.getYearValue();
        java.util.TimeZone timeZone9 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int10 = week6.compareTo((java.lang.Object) timeZone9);
        org.jfree.data.time.Week week11 = new org.jfree.data.time.Week(date3, timeZone9);
        org.jfree.data.time.Week week12 = new org.jfree.data.time.Week(date3);
        org.jfree.data.time.Week week15 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod16 = week15.next();
        int int17 = week15.getYearValue();
        java.util.TimeZone timeZone18 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int19 = week15.compareTo((java.lang.Object) timeZone18);
        int int20 = week15.getYearValue();
        int int22 = week15.compareTo((java.lang.Object) 9);
        int int23 = week15.getYearValue();
        long long24 = week15.getLastMillisecond();
        int int25 = week15.getWeek();
        java.util.Date date26 = week15.getEnd();
        org.jfree.data.time.Week week29 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date30 = week29.getStart();
        java.util.Date date31 = week29.getEnd();
        org.jfree.data.time.Week week34 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod35 = week34.next();
        java.lang.Class<?> wildcardClass36 = week34.getClass();
        java.lang.Class class37 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass36);
        org.jfree.data.time.Week week40 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date41 = week40.getStart();
        java.lang.Class class42 = null;
        java.util.Date date43 = null;
        java.util.TimeZone timeZone44 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod45 = org.jfree.data.time.RegularTimePeriod.createInstance(class42, date43, timeZone44);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod46 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass36, date41, timeZone44);
        org.jfree.data.time.Week week47 = new org.jfree.data.time.Week(date31, timeZone44);
        org.jfree.data.time.Week week48 = new org.jfree.data.time.Week(date26, timeZone44);
        org.jfree.data.time.Week week51 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str52 = week51.toString();
        long long53 = week51.getSerialIndex();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod54 = week51.next();
        java.util.Date date55 = regularTimePeriod54.getEnd();
        org.jfree.data.time.Week week58 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date59 = week58.getStart();
        org.jfree.data.time.Week week62 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod63 = week62.next();
        int int64 = week62.getYearValue();
        java.util.TimeZone timeZone65 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int66 = week62.compareTo((java.lang.Object) timeZone65);
        org.jfree.data.time.Week week67 = new org.jfree.data.time.Week(date59, timeZone65);
        org.jfree.data.time.Week week68 = new org.jfree.data.time.Week(date55, timeZone65);
        org.jfree.data.time.Week week69 = new org.jfree.data.time.Week(date26, timeZone65);
        org.jfree.data.time.Week week70 = new org.jfree.data.time.Week(date3, timeZone65);
        java.util.Date date71 = week70.getEnd();
        java.util.Calendar calendar72 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long73 = week70.getFirstMillisecond(calendar72);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 52 + "'", int8 == 52);
        org.junit.Assert.assertNotNull(timeZone9);
// flaky:         org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 52 + "'", int17 == 52);
        org.junit.Assert.assertNotNull(timeZone18);
// flaky:         org.junit.Assert.assertEquals(timeZone18.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 52 + "'", int20 == 52);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 52 + "'", int23 == 52);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-60505750800001L) + "'", long24 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 35 + "'", int25 == 35);
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod35);
        org.junit.Assert.assertNotNull(wildcardClass36);
        org.junit.Assert.assertNotNull(class37);
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone44);
// flaky:         org.junit.Assert.assertEquals(timeZone44.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod45);
        org.junit.Assert.assertNotNull(regularTimePeriod46);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "Week 35, 52" + "'", str52, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 2791L + "'", long53 == 2791L);
        org.junit.Assert.assertNotNull(regularTimePeriod54);
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Sat Sep 02 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date59);
        org.junit.Assert.assertEquals(date59.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 52 + "'", int64 == 52);
        org.junit.Assert.assertNotNull(timeZone65);
// flaky:         org.junit.Assert.assertEquals(timeZone65.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertNotNull(date71);
        org.junit.Assert.assertEquals(date71.toString(), "Sat Mar 04 23:59:59 CET 97");
    }

    @Test
    public void test1466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1466");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        int int11 = week2.getYearValue();
        java.lang.String str12 = week2.toString();
        long long13 = week2.getFirstMillisecond();
        java.lang.String str14 = week2.toString();
        java.util.Calendar calendar15 = null;
        // The following exception was thrown during execution in test generation
        try {
            week2.peg(calendar15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Week 35, 52" + "'", str12, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-60506355600000L) + "'", long13 == (-60506355600000L));
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Week 35, 52" + "'", str14, "Week 35, 52");
    }

    @Test
    public void test1467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1467");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date3 = week2.getStart();
        org.jfree.data.time.Week week6 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod7 = week6.next();
        int int8 = week6.getYearValue();
        java.util.TimeZone timeZone9 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int10 = week6.compareTo((java.lang.Object) timeZone9);
        org.jfree.data.time.Week week11 = new org.jfree.data.time.Week(date3, timeZone9);
        org.jfree.data.time.Week week12 = new org.jfree.data.time.Week(date3);
        org.jfree.data.time.Week week15 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod16 = week15.next();
        int int17 = week15.getYearValue();
        java.util.TimeZone timeZone18 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int19 = week15.compareTo((java.lang.Object) timeZone18);
        int int20 = week15.getYearValue();
        long long21 = week15.getMiddleMillisecond();
        java.lang.Class<?> wildcardClass22 = week15.getClass();
        org.jfree.data.time.Week week25 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date26 = week25.getStart();
        org.jfree.data.time.Week week29 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod30 = week29.next();
        int int31 = week29.getYearValue();
        java.util.TimeZone timeZone32 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int33 = week29.compareTo((java.lang.Object) timeZone32);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod34 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass22, date26, timeZone32);
        org.jfree.data.time.Week week35 = new org.jfree.data.time.Week(date26);
        org.jfree.data.time.Week week38 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod39 = week38.next();
        int int40 = week38.getYearValue();
        java.util.TimeZone timeZone41 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int42 = week38.compareTo((java.lang.Object) timeZone41);
        org.jfree.data.time.Week week43 = new org.jfree.data.time.Week(date26, timeZone41);
        int int44 = week12.compareTo((java.lang.Object) timeZone41);
        int int45 = week12.getWeek();
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 52 + "'", int8 == 52);
        org.junit.Assert.assertNotNull(timeZone9);
// flaky:         org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 52 + "'", int17 == 52);
        org.junit.Assert.assertNotNull(timeZone18);
// flaky:         org.junit.Assert.assertEquals(timeZone18.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 52 + "'", int20 == 52);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-60506053200001L) + "'", long21 == (-60506053200001L));
        org.junit.Assert.assertNotNull(wildcardClass22);
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 52 + "'", int31 == 52);
        org.junit.Assert.assertNotNull(timeZone32);
// flaky:         org.junit.Assert.assertEquals(timeZone32.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod34);
        org.junit.Assert.assertNotNull(regularTimePeriod39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 52 + "'", int40 == 52);
        org.junit.Assert.assertNotNull(timeZone41);
// flaky:         org.junit.Assert.assertEquals(timeZone41.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 9 + "'", int45 == 9);
    }

    @Test
    public void test1468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1468");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date3 = week2.getStart();
        java.util.Date date4 = week2.getEnd();
        org.jfree.data.time.Week week5 = new org.jfree.data.time.Week(date4);
        java.util.Date date6 = week5.getEnd();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod7 = week5.previous();
        java.lang.String str8 = week5.toString();
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Week 9, 97" + "'", str8, "Week 9, 97");
    }

    @Test
    public void test1469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1469");
        org.jfree.data.time.Week week0 = new org.jfree.data.time.Week();
        long long1 = week0.getFirstMillisecond();
        org.jfree.data.time.Year year2 = week0.getYear();
        long long3 = week0.getLastMillisecond();
        java.util.Calendar calendar4 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long5 = week0.getLastMillisecond(calendar4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1637449200000L + "'", long1 == 1637449200000L);
        org.junit.Assert.assertNotNull(year2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1638053999999L + "'", long3 == 1638053999999L);
    }

    @Test
    public void test1470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1470");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date3 = week2.getStart();
        org.jfree.data.time.Week week4 = new org.jfree.data.time.Week(date3);
        long long5 = week4.getSerialIndex();
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str9 = week8.toString();
        long long10 = week8.getSerialIndex();
        int int12 = week8.compareTo((java.lang.Object) 1637449200000L);
        org.jfree.data.time.Week week15 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date16 = week15.getStart();
        java.util.Date date17 = week15.getEnd();
        int int18 = week15.getYearValue();
        java.util.Date date19 = week15.getStart();
        long long20 = week15.getLastMillisecond();
        boolean boolean21 = week8.equals((java.lang.Object) week15);
        long long22 = week8.getLastMillisecond();
        java.util.Date date23 = week8.getEnd();
        java.lang.Class<?> wildcardClass24 = date23.getClass();
        boolean boolean25 = week4.equals((java.lang.Object) wildcardClass24);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 5150L + "'", long5 == 5150L);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Week 35, 52" + "'", str9, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 2791L + "'", long10 == 2791L);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 97 + "'", int18 == 97);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-59100800400001L) + "'", long20 == (-59100800400001L));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-60505750800001L) + "'", long22 == (-60505750800001L));
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test1471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1471");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getSerialIndex();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.next();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod6 = week2.previous();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod7 = week2.next();
        org.jfree.data.time.Week week10 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod11 = week10.next();
        int int12 = week10.getYearValue();
        java.util.TimeZone timeZone13 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int14 = week10.compareTo((java.lang.Object) timeZone13);
        int int15 = week10.getYearValue();
        int int17 = week10.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod18 = week10.previous();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod19 = week10.next();
        org.jfree.data.time.Week week22 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod23 = week22.next();
        java.lang.Class<?> wildcardClass24 = week22.getClass();
        java.lang.Class class25 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass24);
        java.lang.Class class26 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass24);
        boolean boolean27 = week10.equals((java.lang.Object) wildcardClass24);
        java.lang.Class class28 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass24);
        org.jfree.data.time.Week week31 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date32 = week31.getStart();
        java.util.Date date33 = week31.getEnd();
        org.jfree.data.time.Week week36 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod37 = week36.next();
        java.lang.Class<?> wildcardClass38 = week36.getClass();
        java.lang.Class class39 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass38);
        org.jfree.data.time.Week week42 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date43 = week42.getStart();
        java.lang.Class class44 = null;
        java.util.Date date45 = null;
        java.util.TimeZone timeZone46 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod47 = org.jfree.data.time.RegularTimePeriod.createInstance(class44, date45, timeZone46);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod48 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass38, date43, timeZone46);
        org.jfree.data.time.Week week49 = new org.jfree.data.time.Week(date33, timeZone46);
        java.lang.Class class50 = null;
        java.util.Date date51 = null;
        java.util.TimeZone timeZone52 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod53 = org.jfree.data.time.RegularTimePeriod.createInstance(class50, date51, timeZone52);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod54 = org.jfree.data.time.RegularTimePeriod.createInstance(class28, date33, timeZone52);
        org.jfree.data.time.Week week55 = new org.jfree.data.time.Week(date33);
        long long56 = week55.getMiddleMillisecond();
        // The following exception was thrown during execution in test generation
        try {
            int int57 = week2.compareTo((java.lang.Object) week55);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Year constructor: year (97) outside valid range.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 2791L + "'", long4 == 2791L);
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertNotNull(regularTimePeriod6);
        org.junit.Assert.assertNotNull(regularTimePeriod7);
        org.junit.Assert.assertNotNull(regularTimePeriod11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
        org.junit.Assert.assertNotNull(timeZone13);
// flaky:         org.junit.Assert.assertEquals(timeZone13.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 52 + "'", int15 == 52);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod18);
        org.junit.Assert.assertNotNull(regularTimePeriod19);
        org.junit.Assert.assertNotNull(regularTimePeriod23);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(class25);
        org.junit.Assert.assertNotNull(class26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(class28);
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod37);
        org.junit.Assert.assertNotNull(wildcardClass38);
        org.junit.Assert.assertNotNull(class39);
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone46);
// flaky:         org.junit.Assert.assertEquals(timeZone46.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod47);
        org.junit.Assert.assertNotNull(regularTimePeriod48);
        org.junit.Assert.assertNotNull(timeZone52);
// flaky:         org.junit.Assert.assertEquals(timeZone52.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod53);
        org.junit.Assert.assertNull(regularTimePeriod54);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + (-59101102800001L) + "'", long56 == (-59101102800001L));
    }

    @Test
    public void test1472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1472");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        long long4 = week2.getMiddleMillisecond();
        int int5 = week2.getWeek();
        long long6 = week2.getLastMillisecond();
        long long7 = week2.getMiddleMillisecond();
        int int8 = week2.getWeek();
        java.util.Date date9 = week2.getStart();
        java.util.Date date10 = week2.getEnd();
        org.jfree.data.time.Week week13 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str14 = week13.toString();
        long long15 = week13.getMiddleMillisecond();
        long long16 = week13.getLastMillisecond();
        org.jfree.data.time.Week week19 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod20 = week19.next();
        java.lang.Class<?> wildcardClass21 = week19.getClass();
        java.lang.Class class22 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass21);
        int int23 = week13.compareTo((java.lang.Object) wildcardClass21);
        java.lang.Class class24 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass21);
        java.lang.Class class25 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass21);
        org.jfree.data.time.Week week28 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.util.Date date29 = week28.getStart();
        int int30 = week28.getYearValue();
        java.util.Date date31 = week28.getEnd();
        org.jfree.data.time.Week week34 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod35 = week34.next();
        int int36 = week34.getYearValue();
        java.util.TimeZone timeZone37 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int38 = week34.compareTo((java.lang.Object) timeZone37);
        int int39 = week34.getYearValue();
        int int41 = week34.compareTo((java.lang.Object) 9);
        int int42 = week34.getYearValue();
        long long43 = week34.getLastMillisecond();
        int int44 = week34.getWeek();
        java.util.Date date45 = week34.getEnd();
        org.jfree.data.time.Week week48 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date49 = week48.getStart();
        java.util.Date date50 = week48.getEnd();
        org.jfree.data.time.Week week53 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod54 = week53.next();
        java.lang.Class<?> wildcardClass55 = week53.getClass();
        java.lang.Class class56 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass55);
        org.jfree.data.time.Week week59 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date60 = week59.getStart();
        java.lang.Class class61 = null;
        java.util.Date date62 = null;
        java.util.TimeZone timeZone63 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod64 = org.jfree.data.time.RegularTimePeriod.createInstance(class61, date62, timeZone63);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod65 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass55, date60, timeZone63);
        org.jfree.data.time.Week week66 = new org.jfree.data.time.Week(date50, timeZone63);
        org.jfree.data.time.Week week67 = new org.jfree.data.time.Week(date45, timeZone63);
        org.jfree.data.time.Week week70 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str71 = week70.toString();
        long long72 = week70.getSerialIndex();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod73 = week70.next();
        java.util.Date date74 = regularTimePeriod73.getEnd();
        org.jfree.data.time.Week week77 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date78 = week77.getStart();
        org.jfree.data.time.Week week81 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod82 = week81.next();
        int int83 = week81.getYearValue();
        java.util.TimeZone timeZone84 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int85 = week81.compareTo((java.lang.Object) timeZone84);
        org.jfree.data.time.Week week86 = new org.jfree.data.time.Week(date78, timeZone84);
        org.jfree.data.time.Week week87 = new org.jfree.data.time.Week(date74, timeZone84);
        org.jfree.data.time.Week week88 = new org.jfree.data.time.Week(date45, timeZone84);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod89 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass21, date31, timeZone84);
        org.jfree.data.time.Week week90 = new org.jfree.data.time.Week(date10, timeZone84);
        long long91 = week90.getFirstMillisecond();
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Year year92 = week90.getYear();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Year constructor: year (52) outside valid range.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 35 + "'", int5 == 35);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-60505750800001L) + "'", long6 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-60506053200001L) + "'", long7 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 35 + "'", int8 == 35);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Week 35, 52" + "'", str14, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-60506053200001L) + "'", long15 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-60505750800001L) + "'", long16 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod20);
        org.junit.Assert.assertNotNull(wildcardClass21);
        org.junit.Assert.assertNotNull(class22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(class24);
        org.junit.Assert.assertNotNull(class25);
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 52 + "'", int30 == 52);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 52 + "'", int36 == 52);
        org.junit.Assert.assertNotNull(timeZone37);
// flaky:         org.junit.Assert.assertEquals(timeZone37.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 52 + "'", int39 == 52);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 52 + "'", int42 == 52);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + (-60505750800001L) + "'", long43 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 35 + "'", int44 == 35);
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod54);
        org.junit.Assert.assertNotNull(wildcardClass55);
        org.junit.Assert.assertNotNull(class56);
        org.junit.Assert.assertNotNull(date60);
        org.junit.Assert.assertEquals(date60.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone63);
// flaky:         org.junit.Assert.assertEquals(timeZone63.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod64);
        org.junit.Assert.assertNotNull(regularTimePeriod65);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "Week 35, 52" + "'", str71, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 2791L + "'", long72 == 2791L);
        org.junit.Assert.assertNotNull(regularTimePeriod73);
        org.junit.Assert.assertNotNull(date74);
        org.junit.Assert.assertEquals(date74.toString(), "Sat Sep 02 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date78);
        org.junit.Assert.assertEquals(date78.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod82);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 52 + "'", int83 == 52);
        org.junit.Assert.assertNotNull(timeZone84);
// flaky:         org.junit.Assert.assertEquals(timeZone84.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 1 + "'", int85 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod89);
        org.junit.Assert.assertTrue("'" + long91 + "' != '" + (-60506355600000L) + "'", long91 == (-60506355600000L));
    }

    @Test
    public void test1473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1473");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(8, (int) ' ');
        java.util.Calendar calendar3 = null;
        // The following exception was thrown during execution in test generation
        try {
            week2.peg(calendar3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1474");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.previous();
        int int4 = week2.getYearValue();
        java.util.Date date5 = week2.getEnd();
        long long6 = week2.getMiddleMillisecond();
        org.jfree.data.time.Week week9 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week9.next();
        int int11 = week9.getYearValue();
        java.util.TimeZone timeZone12 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int13 = week9.compareTo((java.lang.Object) timeZone12);
        int int14 = week9.getYearValue();
        int int16 = week9.compareTo((java.lang.Object) 9);
        java.util.Date date17 = week9.getStart();
        boolean boolean18 = week2.equals((java.lang.Object) date17);
        java.util.Date date19 = week2.getEnd();
        org.jfree.data.time.Week week20 = new org.jfree.data.time.Week(date19);
        long long21 = week20.getFirstMillisecond();
        java.util.Date date22 = week20.getStart();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-60506053200001L) + "'", long6 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertNotNull(timeZone12);
// flaky:         org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 52 + "'", int14 == 52);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-60506355600000L) + "'", long21 == (-60506355600000L));
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Sun Aug 20 00:00:00 CET 52");
    }

    @Test
    public void test1475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1475");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.previous();
        int int4 = week2.getYearValue();
        java.util.Date date5 = week2.getEnd();
        long long6 = week2.getMiddleMillisecond();
        java.util.Date date7 = week2.getEnd();
        org.jfree.data.time.Week week10 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str11 = week10.toString();
        long long12 = week10.getMiddleMillisecond();
        long long13 = week10.getLastMillisecond();
        org.jfree.data.time.Week week16 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod17 = week16.next();
        java.lang.Class<?> wildcardClass18 = week16.getClass();
        java.lang.Class class19 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass18);
        int int20 = week10.compareTo((java.lang.Object) wildcardClass18);
        java.lang.Class class21 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass18);
        java.lang.Class class22 = org.jfree.data.time.RegularTimePeriod.downsize(class21);
        org.jfree.data.time.Week week24 = new org.jfree.data.time.Week();
        long long25 = week24.getFirstMillisecond();
        org.jfree.data.time.Year year26 = week24.getYear();
        org.jfree.data.time.Week week27 = new org.jfree.data.time.Week(0, year26);
        java.util.Date date28 = week27.getStart();
        org.jfree.data.time.Week week31 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date32 = week31.getStart();
        java.util.Date date33 = week31.getEnd();
        int int34 = week31.getYearValue();
        long long35 = week31.getLastMillisecond();
        java.lang.Class<?> wildcardClass36 = week31.getClass();
        java.util.Date date37 = null;
        org.jfree.data.time.Week week40 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.util.Date date41 = week40.getStart();
        int int42 = week40.getYearValue();
        java.util.Date date43 = week40.getEnd();
        org.jfree.data.time.Week week46 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod47 = week46.next();
        java.lang.Class<?> wildcardClass48 = week46.getClass();
        java.lang.Class class49 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass48);
        java.lang.Class class50 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass48);
        org.jfree.data.time.Week week53 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod54 = week53.next();
        int int55 = week53.getYearValue();
        java.util.TimeZone timeZone56 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int57 = week53.compareTo((java.lang.Object) timeZone56);
        int int58 = week53.getYearValue();
        int int60 = week53.compareTo((java.lang.Object) 9);
        java.util.Date date61 = week53.getStart();
        org.jfree.data.time.Week week62 = new org.jfree.data.time.Week(date61);
        org.jfree.data.time.Week week65 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod66 = week65.next();
        int int67 = week65.getYearValue();
        java.util.TimeZone timeZone68 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int69 = week65.compareTo((java.lang.Object) timeZone68);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod70 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass48, date61, timeZone68);
        org.jfree.data.time.Week week73 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod74 = week73.previous();
        int int75 = week73.getYearValue();
        java.util.Date date76 = week73.getStart();
        java.util.TimeZone timeZone77 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.Week week78 = new org.jfree.data.time.Week(date76, timeZone77);
        org.jfree.data.time.Week week79 = new org.jfree.data.time.Week(date61, timeZone77);
        org.jfree.data.time.Week week80 = new org.jfree.data.time.Week(date43, timeZone77);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod81 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass36, date37, timeZone77);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod82 = org.jfree.data.time.RegularTimePeriod.createInstance(class22, date28, timeZone77);
        java.util.Locale locale83 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Week week84 = new org.jfree.data.time.Week(date7, timeZone77, locale83);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'locale' argument.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-60506053200001L) + "'", long6 == (-60506053200001L));
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Week 35, 52" + "'", str11, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-60506053200001L) + "'", long12 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-60505750800001L) + "'", long13 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod17);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(class19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(class21);
        org.junit.Assert.assertNotNull(class22);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1637449200000L + "'", long25 == 1637449200000L);
        org.junit.Assert.assertNotNull(year26);
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Sun Dec 20 00:00:00 CET 2020");
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 97 + "'", int34 == 97);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + (-59100800400001L) + "'", long35 == (-59100800400001L));
        org.junit.Assert.assertNotNull(wildcardClass36);
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 52 + "'", int42 == 52);
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod47);
        org.junit.Assert.assertNotNull(wildcardClass48);
        org.junit.Assert.assertNotNull(class49);
        org.junit.Assert.assertNotNull(class50);
        org.junit.Assert.assertNotNull(regularTimePeriod54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 52 + "'", int55 == 52);
        org.junit.Assert.assertNotNull(timeZone56);
// flaky:         org.junit.Assert.assertEquals(timeZone56.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 52 + "'", int58 == 52);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertNotNull(date61);
        org.junit.Assert.assertEquals(date61.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 52 + "'", int67 == 52);
        org.junit.Assert.assertNotNull(timeZone68);
// flaky:         org.junit.Assert.assertEquals(timeZone68.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1 + "'", int69 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod70);
        org.junit.Assert.assertNotNull(regularTimePeriod74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 52 + "'", int75 == 52);
        org.junit.Assert.assertNotNull(date76);
        org.junit.Assert.assertEquals(date76.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(timeZone77);
// flaky:         org.junit.Assert.assertEquals(timeZone77.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod81);
        org.junit.Assert.assertNotNull(regularTimePeriod82);
    }

    @Test
    public void test1476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1476");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod11 = week2.next();
        java.util.Date date12 = week2.getStart();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod13 = week2.previous();
        long long14 = week2.getMiddleMillisecond();
        long long15 = week2.getSerialIndex();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod16 = week2.next();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertNotNull(regularTimePeriod11);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-60506053200001L) + "'", long14 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 2791L + "'", long15 == 2791L);
        org.junit.Assert.assertNotNull(regularTimePeriod16);
    }

    @Test
    public void test1477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1477");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(0, 52);
    }

    @Test
    public void test1478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1478");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        int int11 = week2.getYearValue();
        long long12 = week2.getLastMillisecond();
        org.jfree.data.time.Week week15 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod16 = week15.next();
        java.lang.Class<?> wildcardClass17 = week15.getClass();
        java.lang.Class class18 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass17);
        boolean boolean19 = week2.equals((java.lang.Object) wildcardClass17);
        int int20 = week2.getYearValue();
        java.lang.Object obj21 = null;
        int int22 = week2.compareTo(obj21);
        long long23 = week2.getLastMillisecond();
        java.lang.Class<?> wildcardClass24 = week2.getClass();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-60505750800001L) + "'", long12 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(class18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 52 + "'", int20 == 52);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-60505750800001L) + "'", long23 == (-60505750800001L));
        org.junit.Assert.assertNotNull(wildcardClass24);
    }

    @Test
    public void test1479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1479");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(52, (int) (byte) 10);
        long long3 = week2.getSerialIndex();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 582L + "'", long3 == 582L);
    }

    @Test
    public void test1480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1480");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        long long5 = week2.getLastMillisecond();
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod9 = week8.next();
        java.lang.Class<?> wildcardClass10 = week8.getClass();
        java.lang.Class class11 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass10);
        int int12 = week2.compareTo((java.lang.Object) wildcardClass10);
        long long13 = week2.getMiddleMillisecond();
        java.util.Date date14 = week2.getEnd();
        int int15 = week2.getWeek();
        long long16 = week2.getLastMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod17 = week2.next();
        long long18 = week2.getFirstMillisecond();
        java.util.Date date19 = week2.getStart();
        long long20 = week2.getSerialIndex();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-60505750800001L) + "'", long5 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod9);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNotNull(class11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-60506053200001L) + "'", long13 == (-60506053200001L));
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 35 + "'", int15 == 35);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-60505750800001L) + "'", long16 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-60506355600000L) + "'", long18 == (-60506355600000L));
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 2791L + "'", long20 == 2791L);
    }

    @Test
    public void test1481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1481");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(4, (int) (byte) -1);
        long long3 = week2.getFirstMillisecond();
        java.util.Calendar calendar4 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long5 = week2.getLastMillisecond(calendar4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-62197376400000L) + "'", long3 == (-62197376400000L));
    }

    @Test
    public void test1482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1482");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        long long8 = week2.getFirstMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod9 = week2.previous();
        java.util.Date date10 = week2.getEnd();
        java.lang.String str11 = week2.toString();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-60506355600000L) + "'", long8 == (-60506355600000L));
        org.junit.Assert.assertNotNull(regularTimePeriod9);
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Week 35, 52" + "'", str11, "Week 35, 52");
    }

    @Test
    public void test1483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1483");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) (short) 10, (int) (byte) 100);
        java.lang.Class<?> wildcardClass3 = week2.getClass();
        java.lang.Class class4 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass3);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(class4);
    }

    @Test
    public void test1484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1484");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.next();
        int int7 = week2.compareTo((java.lang.Object) 0.0d);
        org.jfree.data.time.Week week10 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str11 = week10.toString();
        long long12 = week10.getMiddleMillisecond();
        long long13 = week10.getLastMillisecond();
        org.jfree.data.time.Week week16 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod17 = week16.next();
        java.lang.Class<?> wildcardClass18 = week16.getClass();
        java.lang.Class class19 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass18);
        int int20 = week10.compareTo((java.lang.Object) wildcardClass18);
        java.lang.Class class21 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass18);
        int int22 = week2.compareTo((java.lang.Object) class21);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod23 = week2.next();
        java.util.Date date24 = week2.getStart();
        long long25 = week2.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod26 = week2.previous();
        java.util.Calendar calendar27 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long28 = regularTimePeriod26.getMiddleMillisecond(calendar27);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Week 35, 52" + "'", str11, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-60506053200001L) + "'", long12 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-60505750800001L) + "'", long13 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod17);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(class19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(class21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod23);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-60506053200001L) + "'", long25 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod26);
    }

    @Test
    public void test1485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1485");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.next();
        java.util.Date date6 = week2.getEnd();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week(date6);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod8 = week7.next();
        org.jfree.data.time.Week week11 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str12 = week11.toString();
        long long13 = week11.getSerialIndex();
        boolean boolean14 = week7.equals((java.lang.Object) long13);
        java.lang.String str15 = week7.toString();
        long long16 = week7.getLastMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod17 = week7.next();
        int int18 = week7.getYearValue();
        java.util.Calendar calendar19 = null;
        // The following exception was thrown during execution in test generation
        try {
            week7.peg(calendar19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod8);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Week 35, 52" + "'", str12, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 2791L + "'", long13 == 2791L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Week 35, 52" + "'", str15, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-60505750800001L) + "'", long16 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 52 + "'", int18 == 52);
    }

    @Test
    public void test1486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1486");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getSerialIndex();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.next();
        java.util.Date date6 = regularTimePeriod5.getEnd();
        org.jfree.data.time.Week week9 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date10 = week9.getStart();
        org.jfree.data.time.Week week13 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod14 = week13.next();
        int int15 = week13.getYearValue();
        java.util.TimeZone timeZone16 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int17 = week13.compareTo((java.lang.Object) timeZone16);
        org.jfree.data.time.Week week18 = new org.jfree.data.time.Week(date10, timeZone16);
        org.jfree.data.time.Week week19 = new org.jfree.data.time.Week(date6, timeZone16);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod20 = week19.next();
        java.lang.String str21 = week19.toString();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod22 = week19.next();
        java.lang.Class<?> wildcardClass23 = regularTimePeriod22.getClass();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 2791L + "'", long4 == 2791L);
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Sep 02 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 52 + "'", int15 == 52);
        org.junit.Assert.assertNotNull(timeZone16);
// flaky:         org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Week 36, 52" + "'", str21, "Week 36, 52");
        org.junit.Assert.assertNotNull(regularTimePeriod22);
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test1487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1487");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.next();
        java.util.Date date6 = week2.getEnd();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week(date6);
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week(date6);
        java.util.Date date9 = week8.getEnd();
        long long10 = week8.getLastMillisecond();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-60505750800001L) + "'", long10 == (-60505750800001L));
    }

    @Test
    public void test1488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1488");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(11, 0);
    }

    @Test
    public void test1489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1489");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date3 = week2.getStart();
        int int4 = week2.getWeek();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str8 = week7.toString();
        long long9 = week7.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week7.next();
        java.util.Date date11 = week7.getEnd();
        org.jfree.data.time.Week week12 = new org.jfree.data.time.Week(date11);
        long long13 = week12.getLastMillisecond();
        java.util.Date date14 = week12.getEnd();
        org.jfree.data.time.Week week15 = new org.jfree.data.time.Week(date14);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod16 = week15.next();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod17 = week15.next();
        java.util.Date date18 = week15.getStart();
        org.jfree.data.time.Week week19 = new org.jfree.data.time.Week(date18);
        int int20 = week19.getYearValue();
        long long21 = week19.getFirstMillisecond();
        boolean boolean22 = week2.equals((java.lang.Object) long21);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Week 35, 52" + "'", str8, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-60506053200001L) + "'", long9 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-60505750800001L) + "'", long13 == (-60505750800001L));
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod16);
        org.junit.Assert.assertNotNull(regularTimePeriod17);
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 52 + "'", int20 == 52);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-60506355600000L) + "'", long21 == (-60506355600000L));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test1490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1490");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) 'a', 0);
    }

    @Test
    public void test1491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1491");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date3 = week2.getStart();
        int int4 = week2.getWeek();
        long long5 = week2.getFirstMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod6 = week2.previous();
        java.util.Calendar calendar7 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long8 = week2.getMiddleMillisecond(calendar7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-59101405200000L) + "'", long5 == (-59101405200000L));
        org.junit.Assert.assertNotNull(regularTimePeriod6);
    }

    @Test
    public void test1492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1492");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        int int11 = week2.getYearValue();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod12 = week2.next();
        java.lang.Class<?> wildcardClass13 = regularTimePeriod12.getClass();
        org.jfree.data.time.Week week16 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod17 = week16.next();
        java.lang.Class<?> wildcardClass18 = week16.getClass();
        java.lang.Class class19 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass18);
        java.lang.Class class20 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass18);
        org.jfree.data.time.Week week23 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod24 = week23.next();
        int int25 = week23.getYearValue();
        java.util.TimeZone timeZone26 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int27 = week23.compareTo((java.lang.Object) timeZone26);
        int int28 = week23.getYearValue();
        int int30 = week23.compareTo((java.lang.Object) 9);
        java.util.Date date31 = week23.getStart();
        org.jfree.data.time.Week week32 = new org.jfree.data.time.Week(date31);
        org.jfree.data.time.Week week35 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod36 = week35.next();
        int int37 = week35.getYearValue();
        java.util.TimeZone timeZone38 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int39 = week35.compareTo((java.lang.Object) timeZone38);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod40 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass18, date31, timeZone38);
        org.jfree.data.time.Week week43 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str44 = week43.toString();
        long long45 = week43.getMiddleMillisecond();
        long long46 = week43.getLastMillisecond();
        org.jfree.data.time.Week week49 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod50 = week49.next();
        java.lang.Class<?> wildcardClass51 = week49.getClass();
        java.lang.Class class52 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass51);
        int int53 = week43.compareTo((java.lang.Object) wildcardClass51);
        java.lang.Class class54 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass51);
        org.jfree.data.time.Week week57 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod58 = week57.next();
        java.lang.Class<?> wildcardClass59 = week57.getClass();
        java.lang.Class class60 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass59);
        org.jfree.data.time.Week week63 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date64 = week63.getStart();
        java.lang.Class class65 = null;
        java.util.Date date66 = null;
        java.util.TimeZone timeZone67 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod68 = org.jfree.data.time.RegularTimePeriod.createInstance(class65, date66, timeZone67);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod69 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass59, date64, timeZone67);
        java.util.TimeZone timeZone70 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod71 = org.jfree.data.time.RegularTimePeriod.createInstance(class54, date64, timeZone70);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod72 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass13, date31, timeZone70);
        org.jfree.data.time.Week week73 = new org.jfree.data.time.Week(date31);
        org.jfree.data.time.Week week74 = new org.jfree.data.time.Week(date31);
        java.util.Date date75 = week74.getEnd();
        java.util.Calendar calendar76 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long77 = week74.getFirstMillisecond(calendar76);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertNotNull(regularTimePeriod12);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(regularTimePeriod17);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(class19);
        org.junit.Assert.assertNotNull(class20);
        org.junit.Assert.assertNotNull(regularTimePeriod24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 52 + "'", int25 == 52);
        org.junit.Assert.assertNotNull(timeZone26);
// flaky:         org.junit.Assert.assertEquals(timeZone26.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 52 + "'", int28 == 52);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 52 + "'", int37 == 52);
        org.junit.Assert.assertNotNull(timeZone38);
// flaky:         org.junit.Assert.assertEquals(timeZone38.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod40);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Week 35, 52" + "'", str44, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + (-60506053200001L) + "'", long45 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + (-60505750800001L) + "'", long46 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod50);
        org.junit.Assert.assertNotNull(wildcardClass51);
        org.junit.Assert.assertNotNull(class52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(class54);
        org.junit.Assert.assertNotNull(regularTimePeriod58);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(class60);
        org.junit.Assert.assertNotNull(date64);
        org.junit.Assert.assertEquals(date64.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone67);
// flaky:         org.junit.Assert.assertEquals(timeZone67.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod68);
        org.junit.Assert.assertNotNull(regularTimePeriod69);
        org.junit.Assert.assertNotNull(timeZone70);
// flaky:         org.junit.Assert.assertEquals(timeZone70.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod71);
        org.junit.Assert.assertNotNull(regularTimePeriod72);
        org.junit.Assert.assertNotNull(date75);
        org.junit.Assert.assertEquals(date75.toString(), "Sat Aug 26 23:59:59 CET 52");
    }

    @Test
    public void test1493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1493");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(2, (int) (byte) 0);
        java.lang.String str3 = week2.toString();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 2, 0" + "'", str3, "Week 2, 0");
    }

    @Test
    public void test1494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1494");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getSerialIndex();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.next();
        java.util.Date date6 = regularTimePeriod5.getEnd();
        org.jfree.data.time.Week week9 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date10 = week9.getStart();
        org.jfree.data.time.Week week13 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod14 = week13.next();
        int int15 = week13.getYearValue();
        java.util.TimeZone timeZone16 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int17 = week13.compareTo((java.lang.Object) timeZone16);
        org.jfree.data.time.Week week18 = new org.jfree.data.time.Week(date10, timeZone16);
        org.jfree.data.time.Week week19 = new org.jfree.data.time.Week(date6, timeZone16);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod20 = week19.next();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod21 = week19.previous();
        long long22 = week19.getSerialIndex();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 2791L + "'", long4 == 2791L);
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Sep 02 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 52 + "'", int15 == 52);
        org.junit.Assert.assertNotNull(timeZone16);
// flaky:         org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod20);
        org.junit.Assert.assertNotNull(regularTimePeriod21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 2792L + "'", long22 == 2792L);
    }

    @Test
    public void test1495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1495");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        int int11 = week2.getYearValue();
        long long12 = week2.getLastMillisecond();
        org.jfree.data.time.Week week15 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod16 = week15.next();
        java.lang.Class<?> wildcardClass17 = week15.getClass();
        java.lang.Class class18 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass17);
        boolean boolean19 = week2.equals((java.lang.Object) wildcardClass17);
        int int20 = week2.getYearValue();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod21 = week2.previous();
        java.util.Date date22 = regularTimePeriod21.getStart();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-60505750800001L) + "'", long12 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(class18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 52 + "'", int20 == 52);
        org.junit.Assert.assertNotNull(regularTimePeriod21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Sun Aug 13 00:00:00 CET 52");
    }

    @Test
    public void test1496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1496");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week();
        long long3 = week2.getFirstMillisecond();
        org.jfree.data.time.Year year4 = week2.getYear();
        org.jfree.data.time.Week week5 = new org.jfree.data.time.Week(0, year4);
        org.jfree.data.time.Year year6 = week5.getYear();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week(97, year6);
        long long8 = week7.getFirstMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod9 = week7.next();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1637449200000L + "'", long3 == 1637449200000L);
        org.junit.Assert.assertNotNull(year4);
        org.junit.Assert.assertNotNull(year6);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1667080800000L + "'", long8 == 1667080800000L);
        org.junit.Assert.assertNotNull(regularTimePeriod9);
    }

    @Test
    public void test1497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1497");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week();
        long long3 = week2.getFirstMillisecond();
        org.jfree.data.time.Year year4 = week2.getYear();
        org.jfree.data.time.Week week5 = new org.jfree.data.time.Week((int) (byte) 100, year4);
        org.jfree.data.time.Week week6 = new org.jfree.data.time.Week((int) (short) 10, year4);
        long long7 = week6.getLastMillisecond();
        long long8 = week6.getSerialIndex();
        int int9 = week6.getYearValue();
        java.util.Date date10 = week6.getStart();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1637449200000L + "'", long3 == 1637449200000L);
        org.junit.Assert.assertNotNull(year4);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1615071599999L + "'", long7 == 1615071599999L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 107123L + "'", long8 == 107123L);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2021 + "'", int9 == 2021);
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Feb 28 00:00:00 CET 2021");
    }

    @Test
    public void test1498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1498");
        org.jfree.data.time.Week week4 = new org.jfree.data.time.Week();
        long long5 = week4.getFirstMillisecond();
        org.jfree.data.time.Year year6 = week4.getYear();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week(0, year6);
        org.jfree.data.time.Year year8 = week7.getYear();
        org.jfree.data.time.Week week9 = new org.jfree.data.time.Week(3, year8);
        org.jfree.data.time.Week week10 = new org.jfree.data.time.Week((int) (short) 100, year8);
        org.jfree.data.time.Week week11 = new org.jfree.data.time.Week((int) (byte) 100, year8);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1637449200000L + "'", long5 == 1637449200000L);
        org.junit.Assert.assertNotNull(year6);
        org.junit.Assert.assertNotNull(year8);
    }

    @Test
    public void test1499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1499");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        long long4 = week2.getMiddleMillisecond();
        java.lang.String str5 = week2.toString();
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod9 = week8.next();
        java.lang.Class<?> wildcardClass10 = week8.getClass();
        java.lang.Class class11 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass10);
        org.jfree.data.time.Week week14 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date15 = week14.getStart();
        java.lang.Class class16 = null;
        java.util.Date date17 = null;
        java.util.TimeZone timeZone18 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod19 = org.jfree.data.time.RegularTimePeriod.createInstance(class16, date17, timeZone18);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod20 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass10, date15, timeZone18);
        java.lang.Class<?> wildcardClass21 = timeZone18.getClass();
        boolean boolean22 = week2.equals((java.lang.Object) wildcardClass21);
        java.util.Date date23 = week2.getStart();
        org.jfree.data.time.Week week24 = new org.jfree.data.time.Week(date23);
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Week 35, 52" + "'", str5, "Week 35, 52");
        org.junit.Assert.assertNotNull(regularTimePeriod9);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNotNull(class11);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone18);
// flaky:         org.junit.Assert.assertEquals(timeZone18.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod19);
        org.junit.Assert.assertNotNull(regularTimePeriod20);
        org.junit.Assert.assertNotNull(wildcardClass21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Sun Aug 20 00:00:00 CET 52");
    }

    @Test
    public void test1500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1500");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week();
        long long3 = week2.getFirstMillisecond();
        org.jfree.data.time.Year year4 = week2.getYear();
        org.jfree.data.time.Week week5 = new org.jfree.data.time.Week(0, year4);
        org.jfree.data.time.Week week6 = new org.jfree.data.time.Week(11, year4);
        java.util.Calendar calendar7 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long8 = week6.getMiddleMillisecond(calendar7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1637449200000L + "'", long3 == 1637449200000L);
        org.junit.Assert.assertNotNull(year4);
    }
}

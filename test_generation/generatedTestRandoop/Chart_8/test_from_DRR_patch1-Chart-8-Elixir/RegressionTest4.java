import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest4 {

    public static boolean debug = false;

    @Test
    public void test2001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2001");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.next();
        java.util.Date date6 = week2.getEnd();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week(date6);
        long long8 = week7.getLastMillisecond();
        java.util.Date date9 = week7.getEnd();
        long long10 = week7.getLastMillisecond();
        java.util.Date date11 = week7.getEnd();
        long long12 = week7.getFirstMillisecond();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-60505750800001L) + "'", long8 == (-60505750800001L));
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-60505750800001L) + "'", long10 == (-60505750800001L));
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-60506355600000L) + "'", long12 == (-60506355600000L));
    }

    @Test
    public void test2002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2002");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(3, (int) '4');
        long long3 = week2.getSerialIndex();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 2759L + "'", long3 == 2759L);
    }

    @Test
    public void test2003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2003");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date3 = week2.getStart();
        org.jfree.data.time.Week week6 = new org.jfree.data.time.Week(9, (int) 'a');
        org.jfree.data.time.Week week9 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week9.next();
        long long11 = week9.getMiddleMillisecond();
        java.lang.String str12 = week9.toString();
        boolean boolean13 = week6.equals((java.lang.Object) week9);
        java.lang.String str14 = week6.toString();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod15 = week6.previous();
        java.util.Date date16 = week6.getEnd();
        boolean boolean17 = week2.equals((java.lang.Object) date16);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-60506053200001L) + "'", long11 == (-60506053200001L));
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Week 35, 52" + "'", str12, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Week 9, 97" + "'", str14, "Week 9, 97");
        org.junit.Assert.assertNotNull(regularTimePeriod15);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test2004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2004");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.next();
        int int7 = week2.compareTo((java.lang.Object) 0.0d);
        org.jfree.data.time.Week week10 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str11 = week10.toString();
        long long12 = week10.getMiddleMillisecond();
        long long13 = week10.getLastMillisecond();
        org.jfree.data.time.Week week16 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod17 = week16.next();
        java.lang.Class<?> wildcardClass18 = week16.getClass();
        java.lang.Class class19 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass18);
        int int20 = week10.compareTo((java.lang.Object) wildcardClass18);
        java.lang.Class class21 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass18);
        int int22 = week2.compareTo((java.lang.Object) class21);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod23 = week2.next();
        long long24 = week2.getFirstMillisecond();
        int int25 = week2.getYearValue();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Week 35, 52" + "'", str11, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-60506053200001L) + "'", long12 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-60505750800001L) + "'", long13 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod17);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(class19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(class21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod23);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-60506355600000L) + "'", long24 == (-60506355600000L));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 52 + "'", int25 == 52);
    }

    @Test
    public void test2005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2005");
        org.jfree.data.time.Week week0 = new org.jfree.data.time.Week();
        long long1 = week0.getFirstMillisecond();
        long long2 = week0.getSerialIndex();
        int int3 = week0.getYearValue();
        java.util.Date date4 = week0.getEnd();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date8 = week7.getStart();
        org.jfree.data.time.Week week9 = new org.jfree.data.time.Week(date8);
        java.util.Date date10 = week9.getStart();
        org.jfree.data.time.Week week13 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod14 = week13.next();
        int int15 = week13.getYearValue();
        java.util.TimeZone timeZone16 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int17 = week13.compareTo((java.lang.Object) timeZone16);
        int int18 = week13.getYearValue();
        long long19 = week13.getMiddleMillisecond();
        java.lang.Class<?> wildcardClass20 = week13.getClass();
        org.jfree.data.time.Week week23 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date24 = week23.getStart();
        org.jfree.data.time.Week week27 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod28 = week27.next();
        int int29 = week27.getYearValue();
        java.util.TimeZone timeZone30 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int31 = week27.compareTo((java.lang.Object) timeZone30);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod32 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass20, date24, timeZone30);
        org.jfree.data.time.Week week33 = new org.jfree.data.time.Week(date10, timeZone30);
        org.jfree.data.time.Week week34 = new org.jfree.data.time.Week(date4, timeZone30);
        org.jfree.data.time.Week week37 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str38 = week37.toString();
        long long39 = week37.getMiddleMillisecond();
        long long40 = week37.getLastMillisecond();
        long long41 = week37.getFirstMillisecond();
        java.util.Date date42 = week37.getStart();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod43 = week37.next();
        java.util.Date date44 = week37.getEnd();
        java.util.Date date45 = week37.getStart();
        java.lang.Class class46 = null;
        java.util.Date date47 = null;
        java.util.TimeZone timeZone48 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod49 = org.jfree.data.time.RegularTimePeriod.createInstance(class46, date47, timeZone48);
        org.jfree.data.time.Week week50 = new org.jfree.data.time.Week(date45, timeZone48);
        org.jfree.data.time.Week week53 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str54 = week53.toString();
        long long55 = week53.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod56 = week53.next();
        java.lang.String str57 = week53.toString();
        org.jfree.data.time.Week week61 = new org.jfree.data.time.Week();
        long long62 = week61.getFirstMillisecond();
        org.jfree.data.time.Year year63 = week61.getYear();
        org.jfree.data.time.Week week64 = new org.jfree.data.time.Week(52, year63);
        org.jfree.data.time.Week week65 = new org.jfree.data.time.Week((int) (byte) -1, year63);
        org.jfree.data.time.Week week66 = new org.jfree.data.time.Week(0, year63);
        int int67 = week53.compareTo((java.lang.Object) week66);
        org.jfree.data.time.Year year68 = week66.getYear();
        int int69 = week50.compareTo((java.lang.Object) year68);
        int int70 = week34.compareTo((java.lang.Object) int69);
        long long71 = week34.getMiddleMillisecond();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1637449200000L + "'", long1 == 1637449200000L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 107161L + "'", long2 == 107161L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2021 + "'", int3 == 2021);
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Sat Nov 27 23:59:59 CET 2021");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 52 + "'", int15 == 52);
        org.junit.Assert.assertNotNull(timeZone16);
// flaky:         org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 52 + "'", int18 == 52);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-60506053200001L) + "'", long19 == (-60506053200001L));
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 52 + "'", int29 == 52);
        org.junit.Assert.assertNotNull(timeZone30);
// flaky:         org.junit.Assert.assertEquals(timeZone30.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod32);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Week 35, 52" + "'", str38, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + (-60506053200001L) + "'", long39 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + (-60505750800001L) + "'", long40 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + (-60506355600000L) + "'", long41 == (-60506355600000L));
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod43);
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(timeZone48);
// flaky:         org.junit.Assert.assertEquals(timeZone48.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod49);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "Week 35, 52" + "'", str54, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + (-60506053200001L) + "'", long55 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "Week 35, 52" + "'", str57, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 1637449200000L + "'", long62 == 1637449200000L);
        org.junit.Assert.assertNotNull(year63);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-1969) + "'", int67 == (-1969));
        org.junit.Assert.assertNotNull(year68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 1637751599999L + "'", long71 == 1637751599999L);
    }

    @Test
    public void test2006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2006");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) (short) 100, 100);
        java.util.Date date3 = week2.getEnd();
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sat Nov 27 23:59:59 CET 101");
    }

    @Test
    public void test2007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2007");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.next();
        java.util.Date date6 = week2.getEnd();
        int int7 = week2.getYearValue();
        int int8 = week2.getWeek();
        int int9 = week2.getWeek();
        int int10 = week2.getWeek();
        java.util.Calendar calendar11 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long12 = week2.getLastMillisecond(calendar11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 35 + "'", int8 == 35);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 35 + "'", int10 == 35);
    }

    @Test
    public void test2008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2008");
        org.jfree.data.time.Week week1 = new org.jfree.data.time.Week();
        long long2 = week1.getFirstMillisecond();
        org.jfree.data.time.Year year3 = week1.getYear();
        org.jfree.data.time.Week week4 = new org.jfree.data.time.Week(0, year3);
        int int5 = week4.getYearValue();
        long long6 = week4.getFirstMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod7 = week4.previous();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1637449200000L + "'", long2 == 1637449200000L);
        org.junit.Assert.assertNotNull(year3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2021 + "'", int5 == 2021);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1608418800000L + "'", long6 == 1608418800000L);
        org.junit.Assert.assertNotNull(regularTimePeriod7);
    }

    @Test
    public void test2009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2009");
        org.jfree.data.time.Week week3 = new org.jfree.data.time.Week();
        long long4 = week3.getFirstMillisecond();
        org.jfree.data.time.Year year5 = week3.getYear();
        org.jfree.data.time.Week week6 = new org.jfree.data.time.Week(52, year5);
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week((int) (byte) -1, year5);
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week(0, year5);
        java.util.Date date9 = year5.getEnd();
        org.jfree.data.time.Week week10 = new org.jfree.data.time.Week(date9);
        org.jfree.data.time.Year year11 = week10.getYear();
        long long12 = week10.getMiddleMillisecond();
        long long13 = week10.getLastMillisecond();
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1637449200000L + "'", long4 == 1637449200000L);
        org.junit.Assert.assertNotNull(year5);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Fri Dec 31 23:59:59 CET 2021");
        org.junit.Assert.assertNotNull(year11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1640775599999L + "'", long12 == 1640775599999L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1641077999999L + "'", long13 == 1641077999999L);
    }

    @Test
    public void test2010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2010");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date3 = week2.getStart();
        java.util.Date date4 = week2.getEnd();
        int int5 = week2.getYearValue();
        java.util.Date date6 = week2.getStart();
        int int7 = week2.getWeek();
        java.util.Date date8 = week2.getEnd();
        org.jfree.data.time.Week week9 = new org.jfree.data.time.Week(date8);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 97 + "'", int5 == 97);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 9 + "'", int7 == 9);
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Sat Mar 04 23:59:59 CET 97");
    }

    @Test
    public void test2011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2011");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.next();
        int int6 = week2.getYearValue();
        java.util.Date date7 = week2.getEnd();
        long long8 = week2.getSerialIndex();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 52 + "'", int6 == 52);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 2791L + "'", long8 == 2791L);
    }

    @Test
    public void test2012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2012");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        long long8 = week2.getMiddleMillisecond();
        java.lang.Class<?> wildcardClass9 = week2.getClass();
        org.jfree.data.time.Week week12 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date13 = week12.getStart();
        org.jfree.data.time.Week week16 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod17 = week16.next();
        int int18 = week16.getYearValue();
        java.util.TimeZone timeZone19 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int20 = week16.compareTo((java.lang.Object) timeZone19);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod21 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass9, date13, timeZone19);
        org.jfree.data.time.Week week24 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date25 = week24.getStart();
        java.util.Date date26 = week24.getEnd();
        java.util.Date date27 = week24.getStart();
        org.jfree.data.time.Week week30 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date31 = week30.getStart();
        java.util.Date date32 = week30.getEnd();
        java.util.Date date33 = week30.getStart();
        org.jfree.data.time.Week week36 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date37 = week36.getStart();
        org.jfree.data.time.Week week40 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod41 = week40.next();
        int int42 = week40.getYearValue();
        java.util.TimeZone timeZone43 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int44 = week40.compareTo((java.lang.Object) timeZone43);
        org.jfree.data.time.Week week45 = new org.jfree.data.time.Week(date37, timeZone43);
        org.jfree.data.time.Week week46 = new org.jfree.data.time.Week(date33, timeZone43);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod47 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass9, date27, timeZone43);
        java.util.Calendar calendar48 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long49 = regularTimePeriod47.getMiddleMillisecond(calendar48);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-60506053200001L) + "'", long8 == (-60506053200001L));
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 52 + "'", int18 == 52);
        org.junit.Assert.assertNotNull(timeZone19);
// flaky:         org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod21);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 52 + "'", int42 == 52);
        org.junit.Assert.assertNotNull(timeZone43);
// flaky:         org.junit.Assert.assertEquals(timeZone43.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod47);
    }

    @Test
    public void test2013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2013");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.previous();
        int int4 = week2.getYearValue();
        java.lang.String str5 = week2.toString();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod6 = week2.previous();
        int int7 = week2.getWeek();
        java.lang.String str8 = week2.toString();
        int int9 = week2.getWeek();
        org.jfree.data.time.Week week12 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod13 = week12.previous();
        int int14 = week12.getYearValue();
        java.util.Date date15 = week12.getStart();
        int int16 = week12.getWeek();
        boolean boolean17 = week2.equals((java.lang.Object) week12);
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Week 35, 52" + "'", str5, "Week 35, 52");
        org.junit.Assert.assertNotNull(regularTimePeriod6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 35 + "'", int7 == 35);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Week 35, 52" + "'", str8, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(regularTimePeriod13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 52 + "'", int14 == 52);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 35 + "'", int16 == 35);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
    }

    @Test
    public void test2014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2014");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getSerialIndex();
        long long5 = week2.getFirstMillisecond();
        int int6 = week2.getYearValue();
        long long7 = week2.getLastMillisecond();
        int int8 = week2.getYearValue();
        long long9 = week2.getFirstMillisecond();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 2791L + "'", long4 == 2791L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-60506355600000L) + "'", long5 == (-60506355600000L));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 52 + "'", int6 == 52);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-60505750800001L) + "'", long7 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 52 + "'", int8 == 52);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-60506355600000L) + "'", long9 == (-60506355600000L));
    }

    @Test
    public void test2015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2015");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, (int) 'a');
        org.jfree.data.time.Week week5 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod6 = week5.next();
        long long7 = week5.getMiddleMillisecond();
        java.lang.String str8 = week5.toString();
        boolean boolean9 = week2.equals((java.lang.Object) week5);
        java.util.Date date10 = week2.getStart();
        java.util.Date date11 = week2.getStart();
        long long12 = week2.getSerialIndex();
        long long13 = week2.getSerialIndex();
        long long14 = week2.getFirstMillisecond();
        org.junit.Assert.assertNotNull(regularTimePeriod6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-60506053200001L) + "'", long7 == (-60506053200001L));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Week 35, 52" + "'", str8, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 5150L + "'", long12 == 5150L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 5150L + "'", long13 == 5150L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-59101405200000L) + "'", long14 == (-59101405200000L));
    }

    @Test
    public void test2016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2016");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date3 = week2.getStart();
        java.util.Date date4 = week2.getEnd();
        java.util.Date date5 = week2.getStart();
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod9 = week8.next();
        int int10 = week8.getYearValue();
        java.util.TimeZone timeZone11 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int12 = week8.compareTo((java.lang.Object) timeZone11);
        int int13 = week8.getYearValue();
        long long14 = week8.getMiddleMillisecond();
        java.lang.Class<?> wildcardClass15 = week8.getClass();
        org.jfree.data.time.Week week18 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date19 = week18.getStart();
        org.jfree.data.time.Week week22 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod23 = week22.next();
        int int24 = week22.getYearValue();
        java.util.TimeZone timeZone25 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int26 = week22.compareTo((java.lang.Object) timeZone25);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod27 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass15, date19, timeZone25);
        org.jfree.data.time.Week week28 = new org.jfree.data.time.Week(date19);
        org.jfree.data.time.Week week31 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod32 = week31.next();
        int int33 = week31.getYearValue();
        java.util.TimeZone timeZone34 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int35 = week31.compareTo((java.lang.Object) timeZone34);
        org.jfree.data.time.Week week36 = new org.jfree.data.time.Week(date19, timeZone34);
        boolean boolean37 = week2.equals((java.lang.Object) week36);
        long long38 = week36.getSerialIndex();
        int int39 = week36.getWeek();
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 52 + "'", int10 == 52);
        org.junit.Assert.assertNotNull(timeZone11);
// flaky:         org.junit.Assert.assertEquals(timeZone11.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 52 + "'", int13 == 52);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-60506053200001L) + "'", long14 == (-60506053200001L));
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 52 + "'", int24 == 52);
        org.junit.Assert.assertNotNull(timeZone25);
// flaky:         org.junit.Assert.assertEquals(timeZone25.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod27);
        org.junit.Assert.assertNotNull(regularTimePeriod32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 52 + "'", int33 == 52);
        org.junit.Assert.assertNotNull(timeZone34);
// flaky:         org.junit.Assert.assertEquals(timeZone34.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 5150L + "'", long38 == 5150L);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 9 + "'", int39 == 9);
    }

    @Test
    public void test2017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2017");
        org.jfree.data.time.Week week0 = new org.jfree.data.time.Week();
        long long1 = week0.getFirstMillisecond();
        long long2 = week0.getSerialIndex();
        int int3 = week0.getYearValue();
        java.util.Date date4 = week0.getEnd();
        org.jfree.data.time.Week week5 = new org.jfree.data.time.Week(date4);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1637449200000L + "'", long1 == 1637449200000L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 107161L + "'", long2 == 107161L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2021 + "'", int3 == 2021);
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Sat Nov 27 23:59:59 CET 2021");
    }

    @Test
    public void test2018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2018");
        java.lang.Class class0 = null;
        org.jfree.data.time.Week week3 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date4 = week3.getStart();
        java.util.Date date5 = week3.getEnd();
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod9 = week8.next();
        java.lang.Class<?> wildcardClass10 = week8.getClass();
        java.lang.Class class11 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass10);
        org.jfree.data.time.Week week14 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date15 = week14.getStart();
        java.lang.Class class16 = null;
        java.util.Date date17 = null;
        java.util.TimeZone timeZone18 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod19 = org.jfree.data.time.RegularTimePeriod.createInstance(class16, date17, timeZone18);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod20 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass10, date15, timeZone18);
        org.jfree.data.time.Week week21 = new org.jfree.data.time.Week(date5, timeZone18);
        java.util.TimeZone timeZone22 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.Week week23 = new org.jfree.data.time.Week(date5, timeZone22);
        org.jfree.data.time.Week week26 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod27 = week26.next();
        int int28 = week26.getYearValue();
        java.util.TimeZone timeZone29 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int30 = week26.compareTo((java.lang.Object) timeZone29);
        int int31 = week26.getYearValue();
        long long32 = week26.getMiddleMillisecond();
        java.lang.Class<?> wildcardClass33 = week26.getClass();
        org.jfree.data.time.Week week36 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date37 = week36.getStart();
        org.jfree.data.time.Week week40 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod41 = week40.next();
        int int42 = week40.getYearValue();
        java.util.TimeZone timeZone43 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int44 = week40.compareTo((java.lang.Object) timeZone43);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod45 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass33, date37, timeZone43);
        org.jfree.data.time.Week week46 = new org.jfree.data.time.Week(date37);
        org.jfree.data.time.Week week49 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod50 = week49.next();
        int int51 = week49.getYearValue();
        java.util.TimeZone timeZone52 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int53 = week49.compareTo((java.lang.Object) timeZone52);
        org.jfree.data.time.Week week54 = new org.jfree.data.time.Week(date37, timeZone52);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod55 = org.jfree.data.time.RegularTimePeriod.createInstance(class0, date5, timeZone52);
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod9);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNotNull(class11);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone18);
// flaky:         org.junit.Assert.assertEquals(timeZone18.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod19);
        org.junit.Assert.assertNotNull(regularTimePeriod20);
        org.junit.Assert.assertNotNull(timeZone22);
// flaky:         org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNotNull(regularTimePeriod27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 52 + "'", int28 == 52);
        org.junit.Assert.assertNotNull(timeZone29);
// flaky:         org.junit.Assert.assertEquals(timeZone29.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 52 + "'", int31 == 52);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + (-60506053200001L) + "'", long32 == (-60506053200001L));
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 52 + "'", int42 == 52);
        org.junit.Assert.assertNotNull(timeZone43);
// flaky:         org.junit.Assert.assertEquals(timeZone43.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod45);
        org.junit.Assert.assertNotNull(regularTimePeriod50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 52 + "'", int51 == 52);
        org.junit.Assert.assertNotNull(timeZone52);
// flaky:         org.junit.Assert.assertEquals(timeZone52.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNull(regularTimePeriod55);
    }

    @Test
    public void test2019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2019");
        java.util.Date date0 = null;
        org.jfree.data.time.Week week3 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str4 = week3.toString();
        long long5 = week3.getMiddleMillisecond();
        long long6 = week3.getLastMillisecond();
        org.jfree.data.time.Week week9 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week9.next();
        java.lang.Class<?> wildcardClass11 = week9.getClass();
        java.lang.Class class12 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass11);
        int int13 = week3.compareTo((java.lang.Object) wildcardClass11);
        java.lang.Class class14 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass11);
        org.jfree.data.time.Week week17 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod18 = week17.next();
        java.lang.Class<?> wildcardClass19 = week17.getClass();
        java.lang.Class class20 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass19);
        org.jfree.data.time.Week week23 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date24 = week23.getStart();
        java.lang.Class class25 = null;
        java.util.Date date26 = null;
        java.util.TimeZone timeZone27 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod28 = org.jfree.data.time.RegularTimePeriod.createInstance(class25, date26, timeZone27);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod29 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass19, date24, timeZone27);
        java.util.TimeZone timeZone30 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod31 = org.jfree.data.time.RegularTimePeriod.createInstance(class14, date24, timeZone30);
        java.lang.Class class32 = org.jfree.data.time.RegularTimePeriod.downsize(class14);
        java.lang.Class class33 = org.jfree.data.time.RegularTimePeriod.downsize(class14);
        org.jfree.data.time.Week week36 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod37 = week36.next();
        int int38 = week36.getYearValue();
        java.util.TimeZone timeZone39 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int40 = week36.compareTo((java.lang.Object) timeZone39);
        int int41 = week36.getYearValue();
        int int43 = week36.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod44 = week36.previous();
        int int45 = week36.getYearValue();
        long long46 = week36.getLastMillisecond();
        int int47 = week36.getWeek();
        int int48 = week36.getYearValue();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod49 = week36.next();
        long long50 = week36.getSerialIndex();
        java.util.Date date51 = week36.getEnd();
        java.lang.Class class52 = null;
        org.jfree.data.time.Week week55 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str56 = week55.toString();
        long long57 = week55.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod58 = week55.next();
        java.util.Date date59 = week55.getEnd();
        long long60 = week55.getLastMillisecond();
        java.util.Date date61 = week55.getEnd();
        org.jfree.data.time.Week week64 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str65 = week64.toString();
        long long66 = week64.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod67 = week64.next();
        java.util.Date date68 = week64.getEnd();
        org.jfree.data.time.Week week69 = new org.jfree.data.time.Week(date68);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod70 = week69.next();
        java.util.Date date71 = week69.getEnd();
        java.util.TimeZone timeZone72 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.Week week73 = new org.jfree.data.time.Week(date71, timeZone72);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod74 = org.jfree.data.time.RegularTimePeriod.createInstance(class52, date61, timeZone72);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod75 = org.jfree.data.time.RegularTimePeriod.createInstance(class14, date51, timeZone72);
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Week week76 = new org.jfree.data.time.Week(date0, timeZone72);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'time' argument.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Week 35, 52" + "'", str4, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-60506053200001L) + "'", long5 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-60505750800001L) + "'", long6 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertNotNull(wildcardClass11);
        org.junit.Assert.assertNotNull(class12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(class14);
        org.junit.Assert.assertNotNull(regularTimePeriod18);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(class20);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone27);
// flaky:         org.junit.Assert.assertEquals(timeZone27.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod28);
        org.junit.Assert.assertNotNull(regularTimePeriod29);
        org.junit.Assert.assertNotNull(timeZone30);
// flaky:         org.junit.Assert.assertEquals(timeZone30.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod31);
        org.junit.Assert.assertNotNull(class32);
        org.junit.Assert.assertNotNull(class33);
        org.junit.Assert.assertNotNull(regularTimePeriod37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 52 + "'", int38 == 52);
        org.junit.Assert.assertNotNull(timeZone39);
// flaky:         org.junit.Assert.assertEquals(timeZone39.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 52 + "'", int41 == 52);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 52 + "'", int45 == 52);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + (-60505750800001L) + "'", long46 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 35 + "'", int47 == 35);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 52 + "'", int48 == 52);
        org.junit.Assert.assertNotNull(regularTimePeriod49);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 2791L + "'", long50 == 2791L);
        org.junit.Assert.assertNotNull(date51);
        org.junit.Assert.assertEquals(date51.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "Week 35, 52" + "'", str56, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + (-60506053200001L) + "'", long57 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod58);
        org.junit.Assert.assertNotNull(date59);
        org.junit.Assert.assertEquals(date59.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + (-60505750800001L) + "'", long60 == (-60505750800001L));
        org.junit.Assert.assertNotNull(date61);
        org.junit.Assert.assertEquals(date61.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "Week 35, 52" + "'", str65, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + (-60506053200001L) + "'", long66 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod67);
        org.junit.Assert.assertNotNull(date68);
        org.junit.Assert.assertEquals(date68.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod70);
        org.junit.Assert.assertNotNull(date71);
        org.junit.Assert.assertEquals(date71.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(timeZone72);
// flaky:         org.junit.Assert.assertEquals(timeZone72.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod74);
        org.junit.Assert.assertNull(regularTimePeriod75);
    }

    @Test
    public void test2020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2020");
        org.jfree.data.time.Week week5 = new org.jfree.data.time.Week();
        long long6 = week5.getFirstMillisecond();
        org.jfree.data.time.Year year7 = week5.getYear();
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week(0, year7);
        org.jfree.data.time.Year year9 = week8.getYear();
        org.jfree.data.time.Week week10 = new org.jfree.data.time.Week(97, year9);
        org.jfree.data.time.Week week11 = new org.jfree.data.time.Week(0, year9);
        org.jfree.data.time.Week week12 = new org.jfree.data.time.Week((int) '#', year9);
        org.jfree.data.time.Week week13 = new org.jfree.data.time.Week((int) '#', year9);
        java.util.Date date14 = week13.getStart();
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1637449200000L + "'", long6 == 1637449200000L);
        org.junit.Assert.assertNotNull(year7);
        org.junit.Assert.assertNotNull(year9);
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Sun Aug 22 00:00:00 CEST 2021");
    }

    @Test
    public void test2021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2021");
        org.jfree.data.time.Week week3 = new org.jfree.data.time.Week();
        long long4 = week3.getFirstMillisecond();
        org.jfree.data.time.Year year5 = week3.getYear();
        org.jfree.data.time.Week week6 = new org.jfree.data.time.Week(52, year5);
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week((int) (byte) -1, year5);
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week(0, year5);
        java.util.Date date9 = year5.getEnd();
        org.jfree.data.time.Week week10 = new org.jfree.data.time.Week(date9);
        org.jfree.data.time.Year year11 = week10.getYear();
        int int12 = week10.getYearValue();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod13 = week10.previous();
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1637449200000L + "'", long4 == 1637449200000L);
        org.junit.Assert.assertNotNull(year5);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Fri Dec 31 23:59:59 CET 2021");
        org.junit.Assert.assertNotNull(year11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2022 + "'", int12 == 2022);
        org.junit.Assert.assertNotNull(regularTimePeriod13);
    }

    @Test
    public void test2022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2022");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod11 = week2.next();
        java.util.Date date12 = week2.getStart();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod13 = week2.previous();
        long long14 = week2.getMiddleMillisecond();
        java.util.Date date15 = week2.getEnd();
        java.lang.Class<?> wildcardClass16 = date15.getClass();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertNotNull(regularTimePeriod11);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-60506053200001L) + "'", long14 == (-60506053200001L));
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test2023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2023");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        int int11 = week2.getYearValue();
        long long12 = week2.getLastMillisecond();
        int int13 = week2.getWeek();
        int int14 = week2.getYearValue();
        long long15 = week2.getFirstMillisecond();
        java.lang.String str16 = week2.toString();
        int int17 = week2.getWeek();
        java.lang.String str18 = week2.toString();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-60505750800001L) + "'", long12 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 52 + "'", int14 == 52);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-60506355600000L) + "'", long15 == (-60506355600000L));
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Week 35, 52" + "'", str16, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 35 + "'", int17 == 35);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Week 35, 52" + "'", str18, "Week 35, 52");
    }

    @Test
    public void test2024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2024");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(100, 10);
        long long3 = week2.getSerialIndex();
        org.jfree.data.time.Week week6 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str7 = week6.toString();
        long long8 = week6.getSerialIndex();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod9 = week6.next();
        java.util.Date date10 = regularTimePeriod9.getEnd();
        org.jfree.data.time.Week week13 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date14 = week13.getStart();
        org.jfree.data.time.Week week17 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod18 = week17.next();
        int int19 = week17.getYearValue();
        java.util.TimeZone timeZone20 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int21 = week17.compareTo((java.lang.Object) timeZone20);
        org.jfree.data.time.Week week22 = new org.jfree.data.time.Week(date14, timeZone20);
        org.jfree.data.time.Week week23 = new org.jfree.data.time.Week(date10, timeZone20);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod24 = week23.next();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod25 = week23.previous();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod26 = week23.next();
        java.util.Date date27 = week23.getStart();
        boolean boolean28 = week2.equals((java.lang.Object) date27);
        org.jfree.data.time.Week week29 = new org.jfree.data.time.Week(date27);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 630L + "'", long3 == 630L);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Week 35, 52" + "'", str7, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 2791L + "'", long8 == 2791L);
        org.junit.Assert.assertNotNull(regularTimePeriod9);
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sat Sep 02 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 52 + "'", int19 == 52);
        org.junit.Assert.assertNotNull(timeZone20);
// flaky:         org.junit.Assert.assertEquals(timeZone20.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod24);
        org.junit.Assert.assertNotNull(regularTimePeriod25);
        org.junit.Assert.assertNotNull(regularTimePeriod26);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Sun Aug 27 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test2025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2025");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.previous();
        java.util.Date date4 = week2.getEnd();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date8 = week7.getStart();
        java.util.Date date9 = week7.getEnd();
        java.util.Date date10 = week7.getStart();
        org.jfree.data.time.Week week13 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date14 = week13.getStart();
        org.jfree.data.time.Week week17 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod18 = week17.next();
        int int19 = week17.getYearValue();
        java.util.TimeZone timeZone20 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int21 = week17.compareTo((java.lang.Object) timeZone20);
        org.jfree.data.time.Week week22 = new org.jfree.data.time.Week(date14, timeZone20);
        org.jfree.data.time.Week week23 = new org.jfree.data.time.Week(date10, timeZone20);
        org.jfree.data.time.Week week24 = new org.jfree.data.time.Week(date4, timeZone20);
        org.jfree.data.time.Week week25 = new org.jfree.data.time.Week(date4);
        long long26 = week25.getMiddleMillisecond();
        int int27 = week25.getWeek();
        long long28 = week25.getFirstMillisecond();
        java.util.Calendar calendar29 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long30 = week25.getFirstMillisecond(calendar29);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 52 + "'", int19 == 52);
        org.junit.Assert.assertNotNull(timeZone20);
// flaky:         org.junit.Assert.assertEquals(timeZone20.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + (-60506053200001L) + "'", long26 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 35 + "'", int27 == 35);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + (-60506355600000L) + "'", long28 == (-60506355600000L));
    }

    @Test
    public void test2026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2026");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week();
        long long3 = week2.getFirstMillisecond();
        org.jfree.data.time.Year year4 = week2.getYear();
        org.jfree.data.time.Week week5 = new org.jfree.data.time.Week(52, year4);
        java.util.Date date6 = year4.getStart();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week(100, year4);
        java.lang.Class<?> wildcardClass8 = week7.getClass();
        java.lang.Class class9 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass8);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1637449200000L + "'", long3 == 1637449200000L);
        org.junit.Assert.assertNotNull(year4);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Fri Jan 01 00:00:00 CET 2021");
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(class9);
    }

    @Test
    public void test2027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2027");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getSerialIndex();
        int int6 = week2.compareTo((java.lang.Object) 1637449200000L);
        java.lang.String str7 = week2.toString();
        int int9 = week2.compareTo((java.lang.Object) 630L);
        java.util.Calendar calendar10 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long11 = week2.getMiddleMillisecond(calendar10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 2791L + "'", long4 == 2791L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Week 35, 52" + "'", str7, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
    }

    @Test
    public void test2028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2028");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        long long7 = week2.getFirstMillisecond();
        java.lang.String str8 = week2.toString();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod9 = week2.next();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-60506355600000L) + "'", long7 == (-60506355600000L));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Week 35, 52" + "'", str8, "Week 35, 52");
        org.junit.Assert.assertNotNull(regularTimePeriod9);
    }

    @Test
    public void test2029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2029");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        long long5 = week2.getLastMillisecond();
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod9 = week8.next();
        java.lang.Class<?> wildcardClass10 = week8.getClass();
        java.lang.Class class11 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass10);
        int int12 = week2.compareTo((java.lang.Object) wildcardClass10);
        java.lang.Class class13 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass10);
        org.jfree.data.time.Week week16 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod17 = week16.next();
        java.lang.Class<?> wildcardClass18 = week16.getClass();
        java.lang.Class class19 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass18);
        org.jfree.data.time.Week week22 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date23 = week22.getStart();
        java.lang.Class class24 = null;
        java.util.Date date25 = null;
        java.util.TimeZone timeZone26 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod27 = org.jfree.data.time.RegularTimePeriod.createInstance(class24, date25, timeZone26);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod28 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass18, date23, timeZone26);
        java.util.TimeZone timeZone29 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod30 = org.jfree.data.time.RegularTimePeriod.createInstance(class13, date23, timeZone29);
        org.jfree.data.time.Week week31 = new org.jfree.data.time.Week(date23);
        java.util.Date date32 = week31.getStart();
        long long33 = week31.getFirstMillisecond();
        java.util.Calendar calendar34 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long35 = week31.getLastMillisecond(calendar34);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-60505750800001L) + "'", long5 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod9);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNotNull(class11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(class13);
        org.junit.Assert.assertNotNull(regularTimePeriod17);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(class19);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone26);
// flaky:         org.junit.Assert.assertEquals(timeZone26.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod27);
        org.junit.Assert.assertNotNull(regularTimePeriod28);
        org.junit.Assert.assertNotNull(timeZone29);
// flaky:         org.junit.Assert.assertEquals(timeZone29.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod30);
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + (-59101405200000L) + "'", long33 == (-59101405200000L));
    }

    @Test
    public void test2030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2030");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) (short) 10, 32);
        java.util.Calendar calendar3 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long4 = week2.getLastMillisecond(calendar3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test2031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2031");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) (byte) 0, (int) (byte) -1);
        long long3 = week2.getSerialIndex();
        java.util.Calendar calendar4 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long5 = week2.getLastMillisecond(calendar4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-53L) + "'", long3 == (-53L));
    }

    @Test
    public void test2032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2032");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        java.lang.Class<?> wildcardClass4 = week2.getClass();
        java.lang.Class class5 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass4);
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date9 = week8.getStart();
        java.lang.Class class10 = null;
        java.util.Date date11 = null;
        java.util.TimeZone timeZone12 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod13 = org.jfree.data.time.RegularTimePeriod.createInstance(class10, date11, timeZone12);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod14 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass4, date9, timeZone12);
        org.jfree.data.time.Week week17 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date18 = week17.getStart();
        org.jfree.data.time.Week week19 = new org.jfree.data.time.Week(date18);
        java.util.TimeZone timeZone20 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod21 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass4, date18, timeZone20);
        org.jfree.data.time.Week week22 = new org.jfree.data.time.Week(date18);
        java.util.Date date23 = week22.getStart();
        java.util.Calendar calendar24 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long25 = week22.getMiddleMillisecond(calendar24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(class5);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone12);
// flaky:         org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod13);
        org.junit.Assert.assertNotNull(regularTimePeriod14);
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone20);
// flaky:         org.junit.Assert.assertEquals(timeZone20.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNotNull(regularTimePeriod21);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Sun Feb 26 00:00:00 CET 97");
    }

    @Test
    public void test2033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2033");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getSerialIndex();
        int int6 = week2.compareTo((java.lang.Object) 1637449200000L);
        java.lang.String str7 = week2.toString();
        int int8 = week2.getYearValue();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod9 = week2.next();
        org.jfree.data.time.Week week12 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.util.Date date13 = week12.getStart();
        int int14 = week12.getYearValue();
        java.util.Date date15 = week12.getEnd();
        java.util.Date date16 = week12.getEnd();
        boolean boolean17 = week2.equals((java.lang.Object) week12);
        java.util.Date date18 = week12.getStart();
        org.jfree.data.time.Week week19 = new org.jfree.data.time.Week(date18);
        java.util.Date date20 = week19.getEnd();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 2791L + "'", long4 == 2791L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Week 35, 52" + "'", str7, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 52 + "'", int8 == 52);
        org.junit.Assert.assertNotNull(regularTimePeriod9);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 52 + "'", int14 == 52);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Sat Aug 26 23:59:59 CET 52");
    }

    @Test
    public void test2034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2034");
        org.jfree.data.time.Week week4 = new org.jfree.data.time.Week();
        long long5 = week4.getFirstMillisecond();
        org.jfree.data.time.Year year6 = week4.getYear();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week(0, year6);
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week(11, year6);
        long long9 = week8.getSerialIndex();
        org.jfree.data.time.Year year10 = week8.getYear();
        org.jfree.data.time.Week week11 = new org.jfree.data.time.Week((int) (short) 1, year10);
        org.jfree.data.time.Week week12 = new org.jfree.data.time.Week(3, year10);
        java.util.Date date13 = week12.getStart();
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1637449200000L + "'", long5 == 1637449200000L);
        org.junit.Assert.assertNotNull(year6);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 107124L + "'", long9 == 107124L);
        org.junit.Assert.assertNotNull(year10);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sun Jan 10 00:00:00 CET 2021");
    }

    @Test
    public void test2035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2035");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date3 = week2.getStart();
        java.util.Date date4 = week2.getEnd();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date8 = week7.getStart();
        java.util.Date date9 = week7.getEnd();
        org.jfree.data.time.Week week12 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod13 = week12.next();
        java.lang.Class<?> wildcardClass14 = week12.getClass();
        java.lang.Class class15 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass14);
        org.jfree.data.time.Week week18 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date19 = week18.getStart();
        java.lang.Class class20 = null;
        java.util.Date date21 = null;
        java.util.TimeZone timeZone22 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod23 = org.jfree.data.time.RegularTimePeriod.createInstance(class20, date21, timeZone22);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod24 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass14, date19, timeZone22);
        org.jfree.data.time.Week week25 = new org.jfree.data.time.Week(date9, timeZone22);
        org.jfree.data.time.Week week26 = new org.jfree.data.time.Week(date4, timeZone22);
        org.jfree.data.time.Week week28 = new org.jfree.data.time.Week();
        long long29 = week28.getFirstMillisecond();
        org.jfree.data.time.Year year30 = week28.getYear();
        org.jfree.data.time.Week week31 = new org.jfree.data.time.Week(0, year30);
        java.util.Date date32 = week31.getStart();
        org.jfree.data.time.Week week35 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str36 = week35.toString();
        long long37 = week35.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod38 = week35.next();
        java.util.Date date39 = week35.getEnd();
        org.jfree.data.time.Week week40 = new org.jfree.data.time.Week(date39);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod41 = week40.next();
        java.util.Date date42 = week40.getEnd();
        java.util.TimeZone timeZone43 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.Week week44 = new org.jfree.data.time.Week(date42, timeZone43);
        org.jfree.data.time.Week week45 = new org.jfree.data.time.Week(date32, timeZone43);
        org.jfree.data.time.Week week46 = new org.jfree.data.time.Week(date4, timeZone43);
        java.lang.Class<?> wildcardClass47 = timeZone43.getClass();
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod13);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(class15);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone22);
// flaky:         org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod23);
        org.junit.Assert.assertNotNull(regularTimePeriod24);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 1637449200000L + "'", long29 == 1637449200000L);
        org.junit.Assert.assertNotNull(year30);
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Sun Dec 20 00:00:00 CET 2020");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Week 35, 52" + "'", str36, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + (-60506053200001L) + "'", long37 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod38);
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod41);
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(timeZone43);
// flaky:         org.junit.Assert.assertEquals(timeZone43.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNotNull(wildcardClass47);
    }

    @Test
    public void test2036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2036");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.next();
        java.util.Date date6 = week2.getEnd();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week(date6);
        long long8 = week7.getLastMillisecond();
        java.util.Date date9 = week7.getEnd();
        org.jfree.data.time.Week week10 = new org.jfree.data.time.Week(date9);
        int int11 = week10.getWeek();
        org.jfree.data.time.Week week14 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod15 = week14.next();
        int int16 = week14.getYearValue();
        java.util.TimeZone timeZone17 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int18 = week14.compareTo((java.lang.Object) timeZone17);
        java.lang.String str19 = week14.toString();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod20 = week14.previous();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod21 = week14.previous();
        // The following exception was thrown during execution in test generation
        try {
            int int22 = week10.compareTo((java.lang.Object) week14);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Year constructor: year (52) outside valid range.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-60505750800001L) + "'", long8 == (-60505750800001L));
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 35 + "'", int11 == 35);
        org.junit.Assert.assertNotNull(regularTimePeriod15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 52 + "'", int16 == 52);
        org.junit.Assert.assertNotNull(timeZone17);
// flaky:         org.junit.Assert.assertEquals(timeZone17.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Week 35, 52" + "'", str19, "Week 35, 52");
        org.junit.Assert.assertNotNull(regularTimePeriod20);
        org.junit.Assert.assertNotNull(regularTimePeriod21);
    }

    @Test
    public void test2037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2037");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, (int) 'a');
        org.jfree.data.time.Week week5 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod6 = week5.next();
        long long7 = week5.getMiddleMillisecond();
        java.lang.String str8 = week5.toString();
        boolean boolean9 = week2.equals((java.lang.Object) week5);
        java.util.Date date10 = week2.getStart();
        java.util.Date date11 = week2.getStart();
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Year year12 = week2.getYear();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Year constructor: year (97) outside valid range.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-60506053200001L) + "'", long7 == (-60506053200001L));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Week 35, 52" + "'", str8, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Sun Feb 26 00:00:00 CET 97");
    }

    @Test
    public void test2038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2038");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date3 = week2.getStart();
        java.util.Date date4 = week2.getEnd();
        int int5 = week2.getYearValue();
        java.util.Date date6 = week2.getStart();
        int int7 = week2.getWeek();
        java.lang.Class<?> wildcardClass8 = week2.getClass();
        org.jfree.data.time.Week week11 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str12 = week11.toString();
        long long13 = week11.getMiddleMillisecond();
        long long14 = week11.getLastMillisecond();
        org.jfree.data.time.Week week17 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod18 = week17.next();
        java.lang.Class<?> wildcardClass19 = week17.getClass();
        java.lang.Class class20 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass19);
        int int21 = week11.compareTo((java.lang.Object) wildcardClass19);
        long long22 = week11.getSerialIndex();
        int int24 = week11.compareTo((java.lang.Object) 0.0d);
        java.util.Date date25 = week11.getEnd();
        org.jfree.data.time.Week week26 = new org.jfree.data.time.Week(date25);
        java.lang.Class class27 = null;
        java.util.Date date28 = null;
        java.util.TimeZone timeZone29 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod30 = org.jfree.data.time.RegularTimePeriod.createInstance(class27, date28, timeZone29);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod31 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass8, date25, timeZone29);
        java.lang.Class class32 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass8);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 97 + "'", int5 == 97);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 9 + "'", int7 == 9);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Week 35, 52" + "'", str12, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-60506053200001L) + "'", long13 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-60505750800001L) + "'", long14 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod18);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(class20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 2791L + "'", long22 == 2791L);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(timeZone29);
// flaky:         org.junit.Assert.assertEquals(timeZone29.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod30);
        org.junit.Assert.assertNotNull(regularTimePeriod31);
        org.junit.Assert.assertNotNull(class32);
    }

    @Test
    public void test2039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2039");
        org.jfree.data.time.Week week3 = new org.jfree.data.time.Week();
        long long4 = week3.getFirstMillisecond();
        org.jfree.data.time.Year year5 = week3.getYear();
        org.jfree.data.time.Week week6 = new org.jfree.data.time.Week(52, year5);
        java.util.Date date7 = year5.getStart();
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week(52, year5);
        org.jfree.data.time.Week week9 = new org.jfree.data.time.Week(97, year5);
        long long10 = week9.getFirstMillisecond();
        org.jfree.data.time.Week week13 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod14 = week13.next();
        int int15 = week13.getYearValue();
        java.util.TimeZone timeZone16 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int17 = week13.compareTo((java.lang.Object) timeZone16);
        int int18 = week13.getYearValue();
        int int20 = week13.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod21 = week13.previous();
        int int22 = week13.getYearValue();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod23 = week13.next();
        java.lang.Class<?> wildcardClass24 = regularTimePeriod23.getClass();
        org.jfree.data.time.Week week27 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod28 = week27.next();
        java.lang.Class<?> wildcardClass29 = week27.getClass();
        java.lang.Class class30 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass29);
        java.lang.Class class31 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass29);
        org.jfree.data.time.Week week34 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod35 = week34.next();
        int int36 = week34.getYearValue();
        java.util.TimeZone timeZone37 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int38 = week34.compareTo((java.lang.Object) timeZone37);
        int int39 = week34.getYearValue();
        int int41 = week34.compareTo((java.lang.Object) 9);
        java.util.Date date42 = week34.getStart();
        org.jfree.data.time.Week week43 = new org.jfree.data.time.Week(date42);
        org.jfree.data.time.Week week46 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod47 = week46.next();
        int int48 = week46.getYearValue();
        java.util.TimeZone timeZone49 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int50 = week46.compareTo((java.lang.Object) timeZone49);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod51 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass29, date42, timeZone49);
        org.jfree.data.time.Week week54 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str55 = week54.toString();
        long long56 = week54.getMiddleMillisecond();
        long long57 = week54.getLastMillisecond();
        org.jfree.data.time.Week week60 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod61 = week60.next();
        java.lang.Class<?> wildcardClass62 = week60.getClass();
        java.lang.Class class63 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass62);
        int int64 = week54.compareTo((java.lang.Object) wildcardClass62);
        java.lang.Class class65 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass62);
        org.jfree.data.time.Week week68 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod69 = week68.next();
        java.lang.Class<?> wildcardClass70 = week68.getClass();
        java.lang.Class class71 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass70);
        org.jfree.data.time.Week week74 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date75 = week74.getStart();
        java.lang.Class class76 = null;
        java.util.Date date77 = null;
        java.util.TimeZone timeZone78 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod79 = org.jfree.data.time.RegularTimePeriod.createInstance(class76, date77, timeZone78);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod80 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass70, date75, timeZone78);
        java.util.TimeZone timeZone81 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod82 = org.jfree.data.time.RegularTimePeriod.createInstance(class65, date75, timeZone81);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod83 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass24, date42, timeZone81);
        org.jfree.data.time.Week week84 = new org.jfree.data.time.Week(date42);
        int int85 = week84.getYearValue();
        boolean boolean86 = week9.equals((java.lang.Object) int85);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1637449200000L + "'", long4 == 1637449200000L);
        org.junit.Assert.assertNotNull(year5);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Fri Jan 01 00:00:00 CET 2021");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1667080800000L + "'", long10 == 1667080800000L);
        org.junit.Assert.assertNotNull(regularTimePeriod14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 52 + "'", int15 == 52);
        org.junit.Assert.assertNotNull(timeZone16);
// flaky:         org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 52 + "'", int18 == 52);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 52 + "'", int22 == 52);
        org.junit.Assert.assertNotNull(regularTimePeriod23);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(regularTimePeriod28);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(class30);
        org.junit.Assert.assertNotNull(class31);
        org.junit.Assert.assertNotNull(regularTimePeriod35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 52 + "'", int36 == 52);
        org.junit.Assert.assertNotNull(timeZone37);
// flaky:         org.junit.Assert.assertEquals(timeZone37.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 52 + "'", int39 == 52);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 52 + "'", int48 == 52);
        org.junit.Assert.assertNotNull(timeZone49);
// flaky:         org.junit.Assert.assertEquals(timeZone49.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod51);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "Week 35, 52" + "'", str55, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + (-60506053200001L) + "'", long56 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + (-60505750800001L) + "'", long57 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod61);
        org.junit.Assert.assertNotNull(wildcardClass62);
        org.junit.Assert.assertNotNull(class63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertNotNull(class65);
        org.junit.Assert.assertNotNull(regularTimePeriod69);
        org.junit.Assert.assertNotNull(wildcardClass70);
        org.junit.Assert.assertNotNull(class71);
        org.junit.Assert.assertNotNull(date75);
        org.junit.Assert.assertEquals(date75.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone78);
// flaky:         org.junit.Assert.assertEquals(timeZone78.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod79);
        org.junit.Assert.assertNotNull(regularTimePeriod80);
        org.junit.Assert.assertNotNull(timeZone81);
// flaky:         org.junit.Assert.assertEquals(timeZone81.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod82);
        org.junit.Assert.assertNotNull(regularTimePeriod83);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 52 + "'", int85 == 52);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
    }

    @Test
    public void test2040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2040");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getWeek();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod8 = week2.next();
        boolean boolean10 = week2.equals((java.lang.Object) 3);
        long long11 = week2.getLastMillisecond();
        java.lang.String str12 = week2.toString();
        java.util.Date date13 = week2.getEnd();
        org.jfree.data.time.Week week16 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str17 = week16.toString();
        long long18 = week16.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod19 = week16.next();
        java.util.Date date20 = week16.getEnd();
        org.jfree.data.time.Week week21 = new org.jfree.data.time.Week(date20);
        org.jfree.data.time.Week week24 = new org.jfree.data.time.Week(100, 10);
        java.util.Date date25 = week24.getEnd();
        org.jfree.data.time.Week week28 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date29 = week28.getStart();
        java.util.Date date30 = week28.getEnd();
        int int31 = week28.getYearValue();
        long long32 = week28.getLastMillisecond();
        java.lang.Class<?> wildcardClass33 = week28.getClass();
        java.util.Date date34 = null;
        org.jfree.data.time.Week week37 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.util.Date date38 = week37.getStart();
        int int39 = week37.getYearValue();
        java.util.Date date40 = week37.getEnd();
        org.jfree.data.time.Week week43 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod44 = week43.next();
        java.lang.Class<?> wildcardClass45 = week43.getClass();
        java.lang.Class class46 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass45);
        java.lang.Class class47 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass45);
        org.jfree.data.time.Week week50 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod51 = week50.next();
        int int52 = week50.getYearValue();
        java.util.TimeZone timeZone53 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int54 = week50.compareTo((java.lang.Object) timeZone53);
        int int55 = week50.getYearValue();
        int int57 = week50.compareTo((java.lang.Object) 9);
        java.util.Date date58 = week50.getStart();
        org.jfree.data.time.Week week59 = new org.jfree.data.time.Week(date58);
        org.jfree.data.time.Week week62 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod63 = week62.next();
        int int64 = week62.getYearValue();
        java.util.TimeZone timeZone65 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int66 = week62.compareTo((java.lang.Object) timeZone65);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod67 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass45, date58, timeZone65);
        org.jfree.data.time.Week week70 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod71 = week70.previous();
        int int72 = week70.getYearValue();
        java.util.Date date73 = week70.getStart();
        java.util.TimeZone timeZone74 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.Week week75 = new org.jfree.data.time.Week(date73, timeZone74);
        org.jfree.data.time.Week week76 = new org.jfree.data.time.Week(date58, timeZone74);
        org.jfree.data.time.Week week77 = new org.jfree.data.time.Week(date40, timeZone74);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod78 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass33, date34, timeZone74);
        org.jfree.data.time.Week week79 = new org.jfree.data.time.Week(date25, timeZone74);
        org.jfree.data.time.Week week80 = new org.jfree.data.time.Week(date20, timeZone74);
        org.jfree.data.time.Week week81 = new org.jfree.data.time.Week(date13, timeZone74);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod82 = week81.previous();
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Year year83 = week81.getYear();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Year constructor: year (52) outside valid range.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 35 + "'", int7 == 35);
        org.junit.Assert.assertNotNull(regularTimePeriod8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-60505750800001L) + "'", long11 == (-60505750800001L));
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Week 35, 52" + "'", str12, "Week 35, 52");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Week 35, 52" + "'", str17, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-60506053200001L) + "'", long18 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod19);
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Sat Nov 28 23:59:59 CET 11");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 97 + "'", int31 == 97);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + (-59100800400001L) + "'", long32 == (-59100800400001L));
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 52 + "'", int39 == 52);
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod44);
        org.junit.Assert.assertNotNull(wildcardClass45);
        org.junit.Assert.assertNotNull(class46);
        org.junit.Assert.assertNotNull(class47);
        org.junit.Assert.assertNotNull(regularTimePeriod51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 52 + "'", int52 == 52);
        org.junit.Assert.assertNotNull(timeZone53);
// flaky:         org.junit.Assert.assertEquals(timeZone53.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 52 + "'", int55 == 52);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertNotNull(date58);
        org.junit.Assert.assertEquals(date58.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 52 + "'", int64 == 52);
        org.junit.Assert.assertNotNull(timeZone65);
// flaky:         org.junit.Assert.assertEquals(timeZone65.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod67);
        org.junit.Assert.assertNotNull(regularTimePeriod71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 52 + "'", int72 == 52);
        org.junit.Assert.assertNotNull(date73);
        org.junit.Assert.assertEquals(date73.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(timeZone74);
// flaky:         org.junit.Assert.assertEquals(timeZone74.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod78);
        org.junit.Assert.assertNotNull(regularTimePeriod82);
    }

    @Test
    public void test2041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2041");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) (short) 100, (int) (byte) 100);
        long long3 = week2.getLastMillisecond();
        java.lang.String str4 = week2.toString();
        long long5 = week2.getFirstMillisecond();
        java.util.Date date6 = week2.getStart();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week(date6);
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Year year8 = week7.getYear();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Year constructor: year (101) outside valid range.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-58951414800001L) + "'", long3 == (-58951414800001L));
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Week 100, 100" + "'", str4, "Week 100, 100");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-58952019600000L) + "'", long5 == (-58952019600000L));
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sun Nov 21 00:00:00 CET 101");
    }

    @Test
    public void test2042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2042");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.next();
        java.util.Date date6 = week2.getEnd();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week(date6);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod8 = week7.next();
        java.util.Date date9 = week7.getEnd();
        java.util.TimeZone timeZone10 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.Week week11 = new org.jfree.data.time.Week(date9, timeZone10);
        java.lang.Object obj12 = null;
        int int13 = week11.compareTo(obj12);
        org.jfree.data.time.Week week16 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod17 = week16.next();
        int int18 = week16.getYearValue();
        java.util.TimeZone timeZone19 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int20 = week16.compareTo((java.lang.Object) timeZone19);
        int int21 = week16.getYearValue();
        long long22 = week16.getMiddleMillisecond();
        java.lang.Class<?> wildcardClass23 = week16.getClass();
        org.jfree.data.time.Week week26 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date27 = week26.getStart();
        org.jfree.data.time.Week week30 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod31 = week30.next();
        int int32 = week30.getYearValue();
        java.util.TimeZone timeZone33 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int34 = week30.compareTo((java.lang.Object) timeZone33);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod35 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass23, date27, timeZone33);
        org.jfree.data.time.Week week38 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod39 = week38.next();
        java.lang.Class<?> wildcardClass40 = week38.getClass();
        java.lang.Class class41 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass40);
        org.jfree.data.time.Week week44 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date45 = week44.getStart();
        java.lang.Class class46 = null;
        java.util.Date date47 = null;
        java.util.TimeZone timeZone48 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod49 = org.jfree.data.time.RegularTimePeriod.createInstance(class46, date47, timeZone48);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod50 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass40, date45, timeZone48);
        org.jfree.data.time.Week week53 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date54 = week53.getStart();
        org.jfree.data.time.Week week55 = new org.jfree.data.time.Week(date54);
        java.util.TimeZone timeZone56 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod57 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass40, date54, timeZone56);
        org.jfree.data.time.Week week58 = new org.jfree.data.time.Week(date27, timeZone56);
        int int59 = week58.getYearValue();
        boolean boolean60 = week11.equals((java.lang.Object) int59);
        long long61 = week11.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod62 = week11.previous();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(timeZone10);
// flaky:         org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 52 + "'", int18 == 52);
        org.junit.Assert.assertNotNull(timeZone19);
// flaky:         org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 52 + "'", int21 == 52);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-60506053200001L) + "'", long22 == (-60506053200001L));
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 52 + "'", int32 == 52);
        org.junit.Assert.assertNotNull(timeZone33);
// flaky:         org.junit.Assert.assertEquals(timeZone33.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod35);
        org.junit.Assert.assertNotNull(regularTimePeriod39);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertNotNull(class41);
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone48);
// flaky:         org.junit.Assert.assertEquals(timeZone48.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod49);
        org.junit.Assert.assertNotNull(regularTimePeriod50);
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone56);
// flaky:         org.junit.Assert.assertEquals(timeZone56.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNotNull(regularTimePeriod57);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 97 + "'", int59 == 97);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + (-60506053200001L) + "'", long61 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod62);
    }

    @Test
    public void test2043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2043");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week();
        long long3 = week2.getFirstMillisecond();
        org.jfree.data.time.Year year4 = week2.getYear();
        org.jfree.data.time.Week week5 = new org.jfree.data.time.Week(0, year4);
        org.jfree.data.time.Year year6 = week5.getYear();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week(3, year6);
        java.util.Calendar calendar8 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long9 = week7.getFirstMillisecond(calendar8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1637449200000L + "'", long3 == 1637449200000L);
        org.junit.Assert.assertNotNull(year4);
        org.junit.Assert.assertNotNull(year6);
    }

    @Test
    public void test2044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2044");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week();
        long long3 = week2.getFirstMillisecond();
        org.jfree.data.time.Year year4 = week2.getYear();
        org.jfree.data.time.Week week5 = new org.jfree.data.time.Week(0, year4);
        long long6 = year4.getMiddleMillisecond();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week(97, year4);
        java.util.Calendar calendar8 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long9 = week7.getLastMillisecond(calendar8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1637449200000L + "'", long3 == 1637449200000L);
        org.junit.Assert.assertNotNull(year4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1625223599999L + "'", long6 == 1625223599999L);
    }

    @Test
    public void test2045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2045");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.next();
        java.util.Date date6 = week2.getEnd();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week(date6);
        long long8 = week7.getLastMillisecond();
        java.util.Date date9 = week7.getEnd();
        org.jfree.data.time.Week week10 = new org.jfree.data.time.Week(date9);
        int int11 = week10.getWeek();
        long long12 = week10.getMiddleMillisecond();
        java.util.Calendar calendar13 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long14 = week10.getLastMillisecond(calendar13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-60505750800001L) + "'", long8 == (-60505750800001L));
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 35 + "'", int11 == 35);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-60506053200001L) + "'", long12 == (-60506053200001L));
    }

    @Test
    public void test2046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2046");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.next();
        java.util.Date date6 = week2.getEnd();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week(date6);
        long long8 = week7.getLastMillisecond();
        java.util.Date date9 = week7.getStart();
        java.util.TimeZone timeZone10 = null;
        java.util.Locale locale11 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Week week12 = new org.jfree.data.time.Week(date9, timeZone10, locale11);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'zone' argument.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-60505750800001L) + "'", long8 == (-60505750800001L));
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Sun Aug 20 00:00:00 CET 52");
    }

    @Test
    public void test2047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2047");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.previous();
        int int4 = week2.getYearValue();
        java.util.Date date5 = week2.getEnd();
        java.lang.String str6 = week2.toString();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod7 = week2.previous();
        org.jfree.data.time.Week week10 = new org.jfree.data.time.Week(0, 0);
        long long11 = week10.getLastMillisecond();
        boolean boolean12 = week2.equals((java.lang.Object) week10);
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Year year13 = week2.getYear();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Year constructor: year (52) outside valid range.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Week 35, 52" + "'", str6, "Week 35, 52");
        org.junit.Assert.assertNotNull(regularTimePeriod7);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-62167741200001L) + "'", long11 == (-62167741200001L));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test2048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2048");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(100, 10);
        long long3 = week2.getSerialIndex();
        org.jfree.data.time.Week week6 = new org.jfree.data.time.Week((int) (short) 10, 6);
        boolean boolean7 = week2.equals((java.lang.Object) (short) 10);
        long long8 = week2.getFirstMillisecond();
        java.lang.Class<?> wildcardClass9 = week2.getClass();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 630L + "'", long3 == 630L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-61792160400000L) + "'", long8 == (-61792160400000L));
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test2049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2049");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod11 = week2.next();
        org.jfree.data.time.Week week14 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod15 = week14.next();
        java.lang.Class<?> wildcardClass16 = week14.getClass();
        java.lang.Class class17 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass16);
        java.lang.Class class18 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass16);
        boolean boolean19 = week2.equals((java.lang.Object) wildcardClass16);
        org.jfree.data.time.Week week22 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod23 = week22.previous();
        int int24 = week22.getYearValue();
        java.util.Date date25 = week22.getEnd();
        java.lang.String str26 = week22.toString();
        java.util.Date date27 = week22.getEnd();
        org.jfree.data.time.Week week30 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str31 = week30.toString();
        long long32 = week30.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod33 = week30.next();
        java.util.Date date34 = week30.getEnd();
        org.jfree.data.time.Week week35 = new org.jfree.data.time.Week(date34);
        org.jfree.data.time.Week week36 = new org.jfree.data.time.Week(date34);
        org.jfree.data.time.Week week39 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str40 = week39.toString();
        long long41 = week39.getMiddleMillisecond();
        long long42 = week39.getLastMillisecond();
        org.jfree.data.time.Week week45 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod46 = week45.next();
        java.lang.Class<?> wildcardClass47 = week45.getClass();
        java.lang.Class class48 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass47);
        int int49 = week39.compareTo((java.lang.Object) wildcardClass47);
        java.lang.Class class50 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass47);
        org.jfree.data.time.Week week53 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod54 = week53.next();
        java.lang.Class<?> wildcardClass55 = week53.getClass();
        java.lang.Class class56 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass55);
        org.jfree.data.time.Week week59 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date60 = week59.getStart();
        java.lang.Class class61 = null;
        java.util.Date date62 = null;
        java.util.TimeZone timeZone63 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod64 = org.jfree.data.time.RegularTimePeriod.createInstance(class61, date62, timeZone63);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod65 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass55, date60, timeZone63);
        java.util.TimeZone timeZone66 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod67 = org.jfree.data.time.RegularTimePeriod.createInstance(class50, date60, timeZone66);
        org.jfree.data.time.Week week68 = new org.jfree.data.time.Week(date34, timeZone66);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod69 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass16, date27, timeZone66);
        java.util.Calendar calendar70 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long71 = regularTimePeriod69.getMiddleMillisecond(calendar70);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertNotNull(regularTimePeriod11);
        org.junit.Assert.assertNotNull(regularTimePeriod15);
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertNotNull(class17);
        org.junit.Assert.assertNotNull(class18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(regularTimePeriod23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 52 + "'", int24 == 52);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Week 35, 52" + "'", str26, "Week 35, 52");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Week 35, 52" + "'", str31, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + (-60506053200001L) + "'", long32 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod33);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Week 35, 52" + "'", str40, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + (-60506053200001L) + "'", long41 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + (-60505750800001L) + "'", long42 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod46);
        org.junit.Assert.assertNotNull(wildcardClass47);
        org.junit.Assert.assertNotNull(class48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertNotNull(class50);
        org.junit.Assert.assertNotNull(regularTimePeriod54);
        org.junit.Assert.assertNotNull(wildcardClass55);
        org.junit.Assert.assertNotNull(class56);
        org.junit.Assert.assertNotNull(date60);
        org.junit.Assert.assertEquals(date60.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone63);
// flaky:         org.junit.Assert.assertEquals(timeZone63.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod64);
        org.junit.Assert.assertNotNull(regularTimePeriod65);
        org.junit.Assert.assertNotNull(timeZone66);
// flaky:         org.junit.Assert.assertEquals(timeZone66.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod67);
        org.junit.Assert.assertNotNull(regularTimePeriod69);
    }

    @Test
    public void test2050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2050");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) (short) 100, (int) (byte) 100);
        long long3 = week2.getLastMillisecond();
        java.lang.String str4 = week2.toString();
        long long5 = week2.getFirstMillisecond();
        java.util.Date date6 = week2.getStart();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod7 = week2.previous();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-58951414800001L) + "'", long3 == (-58951414800001L));
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Week 100, 100" + "'", str4, "Week 100, 100");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-58952019600000L) + "'", long5 == (-58952019600000L));
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sun Nov 21 00:00:00 CET 101");
        org.junit.Assert.assertNotNull(regularTimePeriod7);
    }

    @Test
    public void test2051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2051");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) (short) 100, (int) (byte) 100);
        long long3 = week2.getLastMillisecond();
        java.lang.String str4 = week2.toString();
        long long5 = week2.getMiddleMillisecond();
        int int6 = week2.getYearValue();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-58951414800001L) + "'", long3 == (-58951414800001L));
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Week 100, 100" + "'", str4, "Week 100, 100");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-58951717200001L) + "'", long5 == (-58951717200001L));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 100 + "'", int6 == 100);
    }

    @Test
    public void test2052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2052");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        int int11 = week2.getYearValue();
        long long12 = week2.getLastMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod13 = week2.previous();
        int int14 = week2.getWeek();
        long long15 = week2.getSerialIndex();
        java.util.Date date16 = week2.getStart();
        long long17 = week2.getSerialIndex();
        int int18 = week2.getWeek();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-60505750800001L) + "'", long12 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 35 + "'", int14 == 35);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 2791L + "'", long15 == 2791L);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 2791L + "'", long17 == 2791L);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 35 + "'", int18 == 35);
    }

    @Test
    public void test2053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2053");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        int int10 = week2.getYearValue();
        java.lang.String str11 = week2.toString();
        java.lang.String str12 = week2.toString();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod13 = week2.next();
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Year year14 = week2.getYear();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Year constructor: year (52) outside valid range.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 52 + "'", int10 == 52);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Week 35, 52" + "'", str11, "Week 35, 52");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Week 35, 52" + "'", str12, "Week 35, 52");
        org.junit.Assert.assertNotNull(regularTimePeriod13);
    }

    @Test
    public void test2054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2054");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.next();
        int int7 = week2.compareTo((java.lang.Object) 0.0d);
        int int8 = week2.getYearValue();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod9 = week2.next();
        java.lang.String str10 = week2.toString();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 52 + "'", int8 == 52);
        org.junit.Assert.assertNotNull(regularTimePeriod9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Week 35, 52" + "'", str10, "Week 35, 52");
    }

    @Test
    public void test2055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2055");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(100, 10);
        java.util.Date date3 = week2.getEnd();
        org.jfree.data.time.Week week6 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date7 = week6.getStart();
        java.util.Date date8 = week6.getEnd();
        int int9 = week6.getYearValue();
        long long10 = week6.getLastMillisecond();
        java.lang.Class<?> wildcardClass11 = week6.getClass();
        java.util.Date date12 = null;
        org.jfree.data.time.Week week15 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.util.Date date16 = week15.getStart();
        int int17 = week15.getYearValue();
        java.util.Date date18 = week15.getEnd();
        org.jfree.data.time.Week week21 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod22 = week21.next();
        java.lang.Class<?> wildcardClass23 = week21.getClass();
        java.lang.Class class24 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass23);
        java.lang.Class class25 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass23);
        org.jfree.data.time.Week week28 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod29 = week28.next();
        int int30 = week28.getYearValue();
        java.util.TimeZone timeZone31 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int32 = week28.compareTo((java.lang.Object) timeZone31);
        int int33 = week28.getYearValue();
        int int35 = week28.compareTo((java.lang.Object) 9);
        java.util.Date date36 = week28.getStart();
        org.jfree.data.time.Week week37 = new org.jfree.data.time.Week(date36);
        org.jfree.data.time.Week week40 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod41 = week40.next();
        int int42 = week40.getYearValue();
        java.util.TimeZone timeZone43 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int44 = week40.compareTo((java.lang.Object) timeZone43);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod45 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass23, date36, timeZone43);
        org.jfree.data.time.Week week48 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod49 = week48.previous();
        int int50 = week48.getYearValue();
        java.util.Date date51 = week48.getStart();
        java.util.TimeZone timeZone52 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.Week week53 = new org.jfree.data.time.Week(date51, timeZone52);
        org.jfree.data.time.Week week54 = new org.jfree.data.time.Week(date36, timeZone52);
        org.jfree.data.time.Week week55 = new org.jfree.data.time.Week(date18, timeZone52);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod56 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass11, date12, timeZone52);
        org.jfree.data.time.Week week57 = new org.jfree.data.time.Week(date3, timeZone52);
        org.jfree.data.time.Week week58 = new org.jfree.data.time.Week(date3);
        java.util.Calendar calendar59 = null;
        // The following exception was thrown during execution in test generation
        try {
            week58.peg(calendar59);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sat Nov 28 23:59:59 CET 11");
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 97 + "'", int9 == 97);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-59100800400001L) + "'", long10 == (-59100800400001L));
        org.junit.Assert.assertNotNull(wildcardClass11);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 52 + "'", int17 == 52);
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod22);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertNotNull(class24);
        org.junit.Assert.assertNotNull(class25);
        org.junit.Assert.assertNotNull(regularTimePeriod29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 52 + "'", int30 == 52);
        org.junit.Assert.assertNotNull(timeZone31);
// flaky:         org.junit.Assert.assertEquals(timeZone31.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 52 + "'", int33 == 52);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 52 + "'", int42 == 52);
        org.junit.Assert.assertNotNull(timeZone43);
// flaky:         org.junit.Assert.assertEquals(timeZone43.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod45);
        org.junit.Assert.assertNotNull(regularTimePeriod49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 52 + "'", int50 == 52);
        org.junit.Assert.assertNotNull(date51);
        org.junit.Assert.assertEquals(date51.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(timeZone52);
// flaky:         org.junit.Assert.assertEquals(timeZone52.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod56);
    }

    @Test
    public void test2056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2056");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, (int) 'a');
        org.jfree.data.time.Week week5 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod6 = week5.next();
        long long7 = week5.getMiddleMillisecond();
        java.lang.String str8 = week5.toString();
        boolean boolean9 = week2.equals((java.lang.Object) week5);
        java.util.Date date10 = week2.getStart();
        java.util.Date date11 = week2.getStart();
        long long12 = week2.getSerialIndex();
        long long13 = week2.getSerialIndex();
        int int14 = week2.getYearValue();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod15 = week2.previous();
        java.lang.Class<?> wildcardClass16 = regularTimePeriod15.getClass();
        java.lang.Class class17 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass16);
        org.junit.Assert.assertNotNull(regularTimePeriod6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-60506053200001L) + "'", long7 == (-60506053200001L));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Week 35, 52" + "'", str8, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 5150L + "'", long12 == 5150L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 5150L + "'", long13 == 5150L);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 97 + "'", int14 == 97);
        org.junit.Assert.assertNotNull(regularTimePeriod15);
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertNotNull(class17);
    }

    @Test
    public void test2057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2057");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.next();
        java.util.Date date6 = week2.getEnd();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week(date6);
        long long8 = week7.getLastMillisecond();
        java.util.Calendar calendar9 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long10 = week7.getLastMillisecond(calendar9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-60505750800001L) + "'", long8 == (-60505750800001L));
    }

    @Test
    public void test2058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2058");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((-1969), (-1));
        java.lang.Object obj3 = null;
        int int4 = week2.compareTo(obj3);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.next();
        int int6 = week2.getYearValue();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
    }

    @Test
    public void test2059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2059");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(8, (int) ' ');
        java.util.Date date3 = week2.getEnd();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod4 = week2.previous();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str8 = week7.toString();
        long long9 = week7.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week7.next();
        java.util.Date date11 = week7.getEnd();
        org.jfree.data.time.Week week12 = new org.jfree.data.time.Week(date11);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod13 = week12.next();
        java.util.Date date14 = regularTimePeriod13.getEnd();
        java.lang.Class<?> wildcardClass15 = date14.getClass();
        int int16 = week2.compareTo((java.lang.Object) date14);
        int int17 = week2.getWeek();
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sat Feb 23 23:59:59 CET 32");
        org.junit.Assert.assertNotNull(regularTimePeriod4);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Week 35, 52" + "'", str8, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-60506053200001L) + "'", long9 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod13);
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Sat Sep 02 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 8 + "'", int17 == 8);
    }

    @Test
    public void test2060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2060");
        org.jfree.data.time.Week week5 = new org.jfree.data.time.Week();
        long long6 = week5.getFirstMillisecond();
        org.jfree.data.time.Year year7 = week5.getYear();
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week((int) (byte) 100, year7);
        org.jfree.data.time.Week week9 = new org.jfree.data.time.Week((int) (short) 10, year7);
        org.jfree.data.time.Week week10 = new org.jfree.data.time.Week(1, year7);
        org.jfree.data.time.Week week11 = new org.jfree.data.time.Week(0, year7);
        org.jfree.data.time.Week week12 = new org.jfree.data.time.Week((int) ' ', year7);
        java.lang.Class<?> wildcardClass13 = year7.getClass();
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1637449200000L + "'", long6 == 1637449200000L);
        org.junit.Assert.assertNotNull(year7);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test2061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2061");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getSerialIndex();
        int int6 = week2.compareTo((java.lang.Object) 1637449200000L);
        java.lang.String str7 = week2.toString();
        int int8 = week2.getYearValue();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod9 = week2.next();
        org.jfree.data.time.Week week12 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.util.Date date13 = week12.getStart();
        int int14 = week12.getYearValue();
        java.util.Date date15 = week12.getEnd();
        java.util.Date date16 = week12.getEnd();
        boolean boolean17 = week2.equals((java.lang.Object) week12);
        long long18 = week12.getFirstMillisecond();
        java.util.Calendar calendar19 = null;
        // The following exception was thrown during execution in test generation
        try {
            week12.peg(calendar19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 2791L + "'", long4 == 2791L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Week 35, 52" + "'", str7, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 52 + "'", int8 == 52);
        org.junit.Assert.assertNotNull(regularTimePeriod9);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 52 + "'", int14 == 52);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-60506355600000L) + "'", long18 == (-60506355600000L));
    }

    @Test
    public void test2062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2062");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date3 = week2.getStart();
        org.jfree.data.time.Week week4 = new org.jfree.data.time.Week(date3);
        long long5 = week4.getSerialIndex();
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str9 = week8.toString();
        long long10 = week8.getSerialIndex();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod11 = week8.next();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod12 = week8.previous();
        java.lang.Class<?> wildcardClass13 = week8.getClass();
        java.lang.Class class14 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass13);
        boolean boolean15 = week4.equals((java.lang.Object) wildcardClass13);
        org.jfree.data.time.Week week18 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod19 = week18.previous();
        java.util.Date date20 = week18.getEnd();
        int int21 = week18.getWeek();
        boolean boolean22 = week4.equals((java.lang.Object) int21);
        long long23 = week4.getLastMillisecond();
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Year year24 = week4.getYear();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Year constructor: year (97) outside valid range.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 5150L + "'", long5 == 5150L);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Week 35, 52" + "'", str9, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 2791L + "'", long10 == 2791L);
        org.junit.Assert.assertNotNull(regularTimePeriod11);
        org.junit.Assert.assertNotNull(regularTimePeriod12);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(class14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(regularTimePeriod19);
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 35 + "'", int21 == 35);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-59100800400001L) + "'", long23 == (-59100800400001L));
    }

    @Test
    public void test2063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2063");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod11 = week2.next();
        java.util.Date date12 = week2.getStart();
        java.util.Date date13 = week2.getStart();
        long long14 = week2.getLastMillisecond();
        org.jfree.data.time.Week week17 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod18 = week17.next();
        int int19 = week17.getYearValue();
        java.util.TimeZone timeZone20 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int21 = week17.compareTo((java.lang.Object) timeZone20);
        int int22 = week17.getYearValue();
        int int24 = week17.compareTo((java.lang.Object) 9);
        int int25 = week17.getYearValue();
        int int26 = week17.getYearValue();
        int int27 = week17.getYearValue();
        org.jfree.data.time.Week week30 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str31 = week30.toString();
        long long32 = week30.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod33 = week30.next();
        java.util.Date date34 = week30.getEnd();
        org.jfree.data.time.Week week35 = new org.jfree.data.time.Week(date34);
        long long36 = week35.getLastMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod37 = week35.next();
        boolean boolean38 = week17.equals((java.lang.Object) regularTimePeriod37);
        org.jfree.data.time.Week week40 = new org.jfree.data.time.Week();
        long long41 = week40.getFirstMillisecond();
        org.jfree.data.time.Year year42 = week40.getYear();
        org.jfree.data.time.Week week43 = new org.jfree.data.time.Week(0, year42);
        java.util.Date date44 = year42.getStart();
        int int45 = week17.compareTo((java.lang.Object) year42);
        java.lang.Class<?> wildcardClass46 = year42.getClass();
        java.lang.Class class47 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass46);
        java.lang.Class class48 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass46);
        org.jfree.data.time.Week week51 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod52 = week51.next();
        java.lang.Class<?> wildcardClass53 = week51.getClass();
        java.lang.Class class54 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass53);
        org.jfree.data.time.Week week57 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date58 = week57.getStart();
        java.lang.Class class59 = null;
        java.util.Date date60 = null;
        java.util.TimeZone timeZone61 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod62 = org.jfree.data.time.RegularTimePeriod.createInstance(class59, date60, timeZone61);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod63 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass53, date58, timeZone61);
        org.jfree.data.time.Week week64 = new org.jfree.data.time.Week(date58);
        org.jfree.data.time.Week week67 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date68 = week67.getStart();
        java.util.Date date69 = week67.getEnd();
        org.jfree.data.time.Week week72 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod73 = week72.next();
        java.lang.Class<?> wildcardClass74 = week72.getClass();
        java.lang.Class class75 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass74);
        org.jfree.data.time.Week week78 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date79 = week78.getStart();
        java.lang.Class class80 = null;
        java.util.Date date81 = null;
        java.util.TimeZone timeZone82 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod83 = org.jfree.data.time.RegularTimePeriod.createInstance(class80, date81, timeZone82);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod84 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass74, date79, timeZone82);
        org.jfree.data.time.Week week85 = new org.jfree.data.time.Week(date69, timeZone82);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod86 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass46, date58, timeZone82);
        boolean boolean87 = week2.equals((java.lang.Object) regularTimePeriod86);
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertNotNull(regularTimePeriod11);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-60505750800001L) + "'", long14 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 52 + "'", int19 == 52);
        org.junit.Assert.assertNotNull(timeZone20);
// flaky:         org.junit.Assert.assertEquals(timeZone20.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 52 + "'", int22 == 52);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 52 + "'", int25 == 52);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 52 + "'", int26 == 52);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 52 + "'", int27 == 52);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Week 35, 52" + "'", str31, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + (-60506053200001L) + "'", long32 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod33);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + (-60505750800001L) + "'", long36 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 1637449200000L + "'", long41 == 1637449200000L);
        org.junit.Assert.assertNotNull(year42);
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Fri Jan 01 00:00:00 CET 2021");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(wildcardClass46);
        org.junit.Assert.assertNotNull(class47);
        org.junit.Assert.assertNotNull(class48);
        org.junit.Assert.assertNotNull(regularTimePeriod52);
        org.junit.Assert.assertNotNull(wildcardClass53);
        org.junit.Assert.assertNotNull(class54);
        org.junit.Assert.assertNotNull(date58);
        org.junit.Assert.assertEquals(date58.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone61);
// flaky:         org.junit.Assert.assertEquals(timeZone61.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod62);
        org.junit.Assert.assertNotNull(regularTimePeriod63);
        org.junit.Assert.assertNotNull(date68);
        org.junit.Assert.assertEquals(date68.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date69);
        org.junit.Assert.assertEquals(date69.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod73);
        org.junit.Assert.assertNotNull(wildcardClass74);
        org.junit.Assert.assertNotNull(class75);
        org.junit.Assert.assertNotNull(date79);
        org.junit.Assert.assertEquals(date79.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone82);
// flaky:         org.junit.Assert.assertEquals(timeZone82.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod83);
        org.junit.Assert.assertNotNull(regularTimePeriod84);
        org.junit.Assert.assertNotNull(regularTimePeriod86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
    }

    @Test
    public void test2064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2064");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        long long8 = week2.getMiddleMillisecond();
        java.lang.Class<?> wildcardClass9 = week2.getClass();
        org.jfree.data.time.Week week12 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date13 = week12.getStart();
        org.jfree.data.time.Week week16 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod17 = week16.next();
        int int18 = week16.getYearValue();
        java.util.TimeZone timeZone19 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int20 = week16.compareTo((java.lang.Object) timeZone19);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod21 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass9, date13, timeZone19);
        org.jfree.data.time.Week week24 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod25 = week24.next();
        int int26 = week24.getYearValue();
        java.util.TimeZone timeZone27 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int28 = week24.compareTo((java.lang.Object) timeZone27);
        int int29 = week24.getYearValue();
        int int31 = week24.compareTo((java.lang.Object) 9);
        java.util.Date date32 = week24.getStart();
        org.jfree.data.time.Week week35 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod36 = week35.next();
        java.lang.Class<?> wildcardClass37 = week35.getClass();
        java.lang.Class class38 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass37);
        java.lang.Class class39 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass37);
        org.jfree.data.time.Week week42 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod43 = week42.next();
        int int44 = week42.getYearValue();
        java.util.TimeZone timeZone45 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int46 = week42.compareTo((java.lang.Object) timeZone45);
        int int47 = week42.getYearValue();
        int int49 = week42.compareTo((java.lang.Object) 9);
        java.util.Date date50 = week42.getStart();
        org.jfree.data.time.Week week51 = new org.jfree.data.time.Week(date50);
        org.jfree.data.time.Week week54 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod55 = week54.next();
        int int56 = week54.getYearValue();
        java.util.TimeZone timeZone57 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int58 = week54.compareTo((java.lang.Object) timeZone57);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod59 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass37, date50, timeZone57);
        org.jfree.data.time.Week week62 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod63 = week62.previous();
        int int64 = week62.getYearValue();
        java.util.Date date65 = week62.getStart();
        java.util.TimeZone timeZone66 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.Week week67 = new org.jfree.data.time.Week(date65, timeZone66);
        org.jfree.data.time.Week week68 = new org.jfree.data.time.Week(date50, timeZone66);
        org.jfree.data.time.Week week69 = new org.jfree.data.time.Week(date32, timeZone66);
        org.jfree.data.time.Week week70 = new org.jfree.data.time.Week(date13, timeZone66);
        long long71 = week70.getFirstMillisecond();
        int int72 = week70.getYearValue();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-60506053200001L) + "'", long8 == (-60506053200001L));
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 52 + "'", int18 == 52);
        org.junit.Assert.assertNotNull(timeZone19);
// flaky:         org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod21);
        org.junit.Assert.assertNotNull(regularTimePeriod25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 52 + "'", int26 == 52);
        org.junit.Assert.assertNotNull(timeZone27);
// flaky:         org.junit.Assert.assertEquals(timeZone27.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 52 + "'", int29 == 52);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod36);
        org.junit.Assert.assertNotNull(wildcardClass37);
        org.junit.Assert.assertNotNull(class38);
        org.junit.Assert.assertNotNull(class39);
        org.junit.Assert.assertNotNull(regularTimePeriod43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 52 + "'", int44 == 52);
        org.junit.Assert.assertNotNull(timeZone45);
// flaky:         org.junit.Assert.assertEquals(timeZone45.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 52 + "'", int47 == 52);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 52 + "'", int56 == 52);
        org.junit.Assert.assertNotNull(timeZone57);
// flaky:         org.junit.Assert.assertEquals(timeZone57.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod59);
        org.junit.Assert.assertNotNull(regularTimePeriod63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 52 + "'", int64 == 52);
        org.junit.Assert.assertNotNull(date65);
        org.junit.Assert.assertEquals(date65.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(timeZone66);
// flaky:         org.junit.Assert.assertEquals(timeZone66.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + (-59101405200000L) + "'", long71 == (-59101405200000L));
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 97 + "'", int72 == 97);
    }

    @Test
    public void test2065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2065");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.next();
        java.lang.String str6 = week2.toString();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod7 = week2.previous();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod8 = week2.next();
        java.util.Date date9 = regularTimePeriod8.getEnd();
        java.util.TimeZone timeZone10 = null;
        java.util.Locale locale11 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Week week12 = new org.jfree.data.time.Week(date9, timeZone10, locale11);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'zone' argument.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Week 35, 52" + "'", str6, "Week 35, 52");
        org.junit.Assert.assertNotNull(regularTimePeriod7);
        org.junit.Assert.assertNotNull(regularTimePeriod8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Sat Sep 02 23:59:59 CET 52");
    }

    @Test
    public void test2066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2066");
        org.jfree.data.time.Week week4 = new org.jfree.data.time.Week();
        long long5 = week4.getFirstMillisecond();
        org.jfree.data.time.Year year6 = week4.getYear();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week(0, year6);
        org.jfree.data.time.Year year8 = week7.getYear();
        org.jfree.data.time.Week week9 = new org.jfree.data.time.Week(3, year8);
        org.jfree.data.time.Week week10 = new org.jfree.data.time.Week(7, year8);
        org.jfree.data.time.Week week11 = new org.jfree.data.time.Week(2, year8);
        java.util.Date date12 = week11.getEnd();
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1637449200000L + "'", long5 == 1637449200000L);
        org.junit.Assert.assertNotNull(year6);
        org.junit.Assert.assertNotNull(year8);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Sat Jan 09 23:59:59 CET 2021");
    }

    @Test
    public void test2067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2067");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) (short) 1, 11);
    }

    @Test
    public void test2068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2068");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.previous();
        int int4 = week2.getYearValue();
        long long5 = week2.getSerialIndex();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod6 = week2.next();
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Year year7 = week2.getYear();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Year constructor: year (52) outside valid range.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 2791L + "'", long5 == 2791L);
        org.junit.Assert.assertNotNull(regularTimePeriod6);
    }

    @Test
    public void test2069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2069");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(35, 0);
        long long3 = week2.getSerialIndex();
        long long4 = week2.getFirstMillisecond();
        long long5 = week2.getFirstMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod6 = week2.next();
        java.lang.Class<?> wildcardClass7 = regularTimePeriod6.getClass();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 35L + "'", long3 == 35L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-62147178000000L) + "'", long4 == (-62147178000000L));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-62147178000000L) + "'", long5 == (-62147178000000L));
        org.junit.Assert.assertNotNull(regularTimePeriod6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test2070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2070");
        org.jfree.data.time.Week week4 = new org.jfree.data.time.Week();
        long long5 = week4.getFirstMillisecond();
        org.jfree.data.time.Year year6 = week4.getYear();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week((int) (byte) 100, year6);
        long long8 = year6.getMiddleMillisecond();
        org.jfree.data.time.Week week9 = new org.jfree.data.time.Week(100, year6);
        org.jfree.data.time.Week week10 = new org.jfree.data.time.Week(5, year6);
        org.jfree.data.time.Week week11 = new org.jfree.data.time.Week((-1924), year6);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1637449200000L + "'", long5 == 1637449200000L);
        org.junit.Assert.assertNotNull(year6);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1625223599999L + "'", long8 == 1625223599999L);
    }

    @Test
    public void test2071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2071");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(10, 48);
        org.jfree.data.time.Week week5 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str6 = week5.toString();
        long long7 = week5.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod8 = week5.next();
        java.util.Date date9 = week5.getEnd();
        org.jfree.data.time.Week week10 = new org.jfree.data.time.Week(date9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod11 = week10.next();
        org.jfree.data.time.Week week14 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str15 = week14.toString();
        long long16 = week14.getSerialIndex();
        boolean boolean17 = week10.equals((java.lang.Object) long16);
        java.lang.String str18 = week10.toString();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod19 = week10.next();
        boolean boolean20 = week2.equals((java.lang.Object) regularTimePeriod19);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Week 35, 52" + "'", str6, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-60506053200001L) + "'", long7 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod11);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Week 35, 52" + "'", str15, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 2791L + "'", long16 == 2791L);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Week 35, 52" + "'", str18, "Week 35, 52");
        org.junit.Assert.assertNotNull(regularTimePeriod19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test2072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2072");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(8, (int) (short) -1);
        java.lang.Class<?> wildcardClass3 = week2.getClass();
        java.lang.Class class4 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass3);
        java.lang.Class class5 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass3);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(class4);
        org.junit.Assert.assertNotNull(class5);
    }

    @Test
    public void test2073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2073");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getSerialIndex();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.next();
        java.util.Date date6 = regularTimePeriod5.getEnd();
        org.jfree.data.time.Week week9 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date10 = week9.getStart();
        org.jfree.data.time.Week week13 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod14 = week13.next();
        int int15 = week13.getYearValue();
        java.util.TimeZone timeZone16 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int17 = week13.compareTo((java.lang.Object) timeZone16);
        org.jfree.data.time.Week week18 = new org.jfree.data.time.Week(date10, timeZone16);
        org.jfree.data.time.Week week19 = new org.jfree.data.time.Week(date6, timeZone16);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod20 = week19.next();
        java.lang.String str21 = week19.toString();
        java.lang.Class<?> wildcardClass22 = week19.getClass();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 2791L + "'", long4 == 2791L);
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Sep 02 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 52 + "'", int15 == 52);
        org.junit.Assert.assertNotNull(timeZone16);
// flaky:         org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Week 36, 52" + "'", str21, "Week 36, 52");
        org.junit.Assert.assertNotNull(wildcardClass22);
    }

    @Test
    public void test2074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2074");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, (int) 'a');
        long long3 = week2.getFirstMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod4 = week2.next();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-59101405200000L) + "'", long3 == (-59101405200000L));
        org.junit.Assert.assertNotNull(regularTimePeriod4);
    }

    @Test
    public void test2075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2075");
        org.jfree.data.time.Week week4 = new org.jfree.data.time.Week();
        long long5 = week4.getFirstMillisecond();
        org.jfree.data.time.Year year6 = week4.getYear();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week(52, year6);
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week((int) (byte) -1, year6);
        org.jfree.data.time.Week week9 = new org.jfree.data.time.Week(0, year6);
        org.jfree.data.time.Year year10 = week9.getYear();
        org.jfree.data.time.Week week11 = new org.jfree.data.time.Week(36, year10);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1637449200000L + "'", long5 == 1637449200000L);
        org.junit.Assert.assertNotNull(year6);
        org.junit.Assert.assertNotNull(year10);
    }

    @Test
    public void test2076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2076");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '4', (int) ' ');
        java.util.Date date3 = week2.getStart();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod4 = week2.next();
        java.util.Date date5 = week2.getStart();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod6 = week2.next();
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week();
        long long9 = week8.getFirstMillisecond();
        org.jfree.data.time.Year year10 = week8.getYear();
        org.jfree.data.time.Week week11 = new org.jfree.data.time.Week(52, year10);
        java.util.Date date12 = year10.getStart();
        org.jfree.data.time.Week week13 = new org.jfree.data.time.Week(date12);
        long long14 = week13.getLastMillisecond();
        int int15 = week2.compareTo((java.lang.Object) long14);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Dec 21 00:00:00 CET 32");
        org.junit.Assert.assertNotNull(regularTimePeriod4);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Sun Dec 21 00:00:00 CET 32");
        org.junit.Assert.assertNotNull(regularTimePeriod6);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1637449200000L + "'", long9 == 1637449200000L);
        org.junit.Assert.assertNotNull(year10);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Fri Jan 01 00:00:00 CET 2021");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1609628399999L + "'", long14 == 1609628399999L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
    }

    @Test
    public void test2077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2077");
        org.jfree.data.time.Week week3 = new org.jfree.data.time.Week();
        long long4 = week3.getFirstMillisecond();
        org.jfree.data.time.Year year5 = week3.getYear();
        org.jfree.data.time.Week week6 = new org.jfree.data.time.Week((int) (byte) 100, year5);
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week(100, year5);
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week((int) (short) 0, year5);
        java.util.Calendar calendar9 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long10 = year5.getMiddleMillisecond(calendar9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1637449200000L + "'", long4 == 1637449200000L);
        org.junit.Assert.assertNotNull(year5);
    }

    @Test
    public void test2078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2078");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.next();
        int int7 = week2.compareTo((java.lang.Object) 0.0d);
        org.jfree.data.time.Week week10 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str11 = week10.toString();
        long long12 = week10.getMiddleMillisecond();
        long long13 = week10.getLastMillisecond();
        org.jfree.data.time.Week week16 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod17 = week16.next();
        java.lang.Class<?> wildcardClass18 = week16.getClass();
        java.lang.Class class19 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass18);
        int int20 = week10.compareTo((java.lang.Object) wildcardClass18);
        java.lang.Class class21 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass18);
        int int22 = week2.compareTo((java.lang.Object) class21);
        long long23 = week2.getFirstMillisecond();
        java.lang.String str24 = week2.toString();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Week 35, 52" + "'", str11, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-60506053200001L) + "'", long12 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-60505750800001L) + "'", long13 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod17);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(class19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(class21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-60506355600000L) + "'", long23 == (-60506355600000L));
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Week 35, 52" + "'", str24, "Week 35, 52");
    }

    @Test
    public void test2079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2079");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(3, (int) 'a');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getLastMillisecond();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 3, 97" + "'", str3, "Week 3, 97");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-59104429200001L) + "'", long4 == (-59104429200001L));
    }

    @Test
    public void test2080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2080");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        java.util.Date date10 = week2.getStart();
        int int12 = week2.compareTo((java.lang.Object) (short) 100);
        int int13 = week2.getYearValue();
        java.lang.String str14 = week2.toString();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 52 + "'", int13 == 52);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Week 35, 52" + "'", str14, "Week 35, 52");
    }

    @Test
    public void test2081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2081");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getWeek();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod8 = week2.next();
        boolean boolean10 = week2.equals((java.lang.Object) 3);
        long long11 = week2.getLastMillisecond();
        java.lang.String str12 = week2.toString();
        java.util.Date date13 = week2.getEnd();
        org.jfree.data.time.Week week16 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod17 = week16.next();
        int int18 = week16.getYearValue();
        java.util.TimeZone timeZone19 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int20 = week16.compareTo((java.lang.Object) timeZone19);
        int int21 = week16.getYearValue();
        int int23 = week16.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod24 = week16.previous();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod25 = week16.next();
        org.jfree.data.time.Week week28 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod29 = week28.next();
        java.lang.Class<?> wildcardClass30 = week28.getClass();
        java.lang.Class class31 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass30);
        java.lang.Class class32 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass30);
        boolean boolean33 = week16.equals((java.lang.Object) wildcardClass30);
        java.lang.Class class34 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass30);
        org.jfree.data.time.Week week37 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date38 = week37.getStart();
        java.util.Date date39 = week37.getEnd();
        org.jfree.data.time.Week week42 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod43 = week42.next();
        java.lang.Class<?> wildcardClass44 = week42.getClass();
        java.lang.Class class45 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass44);
        org.jfree.data.time.Week week48 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date49 = week48.getStart();
        java.lang.Class class50 = null;
        java.util.Date date51 = null;
        java.util.TimeZone timeZone52 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod53 = org.jfree.data.time.RegularTimePeriod.createInstance(class50, date51, timeZone52);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod54 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass44, date49, timeZone52);
        org.jfree.data.time.Week week55 = new org.jfree.data.time.Week(date39, timeZone52);
        java.lang.Class class56 = null;
        java.util.Date date57 = null;
        java.util.TimeZone timeZone58 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod59 = org.jfree.data.time.RegularTimePeriod.createInstance(class56, date57, timeZone58);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod60 = org.jfree.data.time.RegularTimePeriod.createInstance(class34, date39, timeZone58);
        org.jfree.data.time.Week week61 = new org.jfree.data.time.Week(date13, timeZone58);
        org.jfree.data.time.Week week64 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str65 = week64.toString();
        long long66 = week64.getSerialIndex();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod67 = week64.next();
        java.util.Date date68 = regularTimePeriod67.getEnd();
        org.jfree.data.time.Week week71 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date72 = week71.getStart();
        org.jfree.data.time.Week week75 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod76 = week75.next();
        int int77 = week75.getYearValue();
        java.util.TimeZone timeZone78 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int79 = week75.compareTo((java.lang.Object) timeZone78);
        org.jfree.data.time.Week week80 = new org.jfree.data.time.Week(date72, timeZone78);
        org.jfree.data.time.Week week81 = new org.jfree.data.time.Week(date68, timeZone78);
        org.jfree.data.time.Week week82 = new org.jfree.data.time.Week(date13, timeZone78);
        long long83 = week82.getSerialIndex();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 35 + "'", int7 == 35);
        org.junit.Assert.assertNotNull(regularTimePeriod8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-60505750800001L) + "'", long11 == (-60505750800001L));
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Week 35, 52" + "'", str12, "Week 35, 52");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 52 + "'", int18 == 52);
        org.junit.Assert.assertNotNull(timeZone19);
// flaky:         org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 52 + "'", int21 == 52);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod24);
        org.junit.Assert.assertNotNull(regularTimePeriod25);
        org.junit.Assert.assertNotNull(regularTimePeriod29);
        org.junit.Assert.assertNotNull(wildcardClass30);
        org.junit.Assert.assertNotNull(class31);
        org.junit.Assert.assertNotNull(class32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(class34);
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod43);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(class45);
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone52);
// flaky:         org.junit.Assert.assertEquals(timeZone52.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod53);
        org.junit.Assert.assertNotNull(regularTimePeriod54);
        org.junit.Assert.assertNotNull(timeZone58);
// flaky:         org.junit.Assert.assertEquals(timeZone58.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod59);
        org.junit.Assert.assertNull(regularTimePeriod60);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "Week 35, 52" + "'", str65, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 2791L + "'", long66 == 2791L);
        org.junit.Assert.assertNotNull(regularTimePeriod67);
        org.junit.Assert.assertNotNull(date68);
        org.junit.Assert.assertEquals(date68.toString(), "Sat Sep 02 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date72);
        org.junit.Assert.assertEquals(date72.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 52 + "'", int77 == 52);
        org.junit.Assert.assertNotNull(timeZone78);
// flaky:         org.junit.Assert.assertEquals(timeZone78.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 1 + "'", int79 == 1);
        org.junit.Assert.assertTrue("'" + long83 + "' != '" + 2791L + "'", long83 == 2791L);
    }

    @Test
    public void test2082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2082");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int8 = week2.getYearValue();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 52 + "'", int8 == 52);
    }

    @Test
    public void test2083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2083");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        int int11 = week2.getYearValue();
        long long12 = week2.getLastMillisecond();
        int int13 = week2.getWeek();
        int int14 = week2.getYearValue();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod15 = week2.next();
        long long16 = week2.getFirstMillisecond();
        int int18 = week2.compareTo((java.lang.Object) (-58992541200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-60505750800001L) + "'", long12 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 52 + "'", int14 == 52);
        org.junit.Assert.assertNotNull(regularTimePeriod15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-60506355600000L) + "'", long16 == (-60506355600000L));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
    }

    @Test
    public void test2084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2084");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(2022, (int) 'a');
        java.util.Date date3 = week2.getStart();
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Year year4 = week2.getYear();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Year constructor: year (97) outside valid range.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Jun 26 00:00:00 CET 96");
    }

    @Test
    public void test2085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2085");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getSerialIndex();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.next();
        java.util.Date date6 = regularTimePeriod5.getEnd();
        org.jfree.data.time.Week week9 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date10 = week9.getStart();
        org.jfree.data.time.Week week13 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod14 = week13.next();
        int int15 = week13.getYearValue();
        java.util.TimeZone timeZone16 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int17 = week13.compareTo((java.lang.Object) timeZone16);
        org.jfree.data.time.Week week18 = new org.jfree.data.time.Week(date10, timeZone16);
        org.jfree.data.time.Week week19 = new org.jfree.data.time.Week(date6, timeZone16);
        java.lang.Class<?> wildcardClass20 = week19.getClass();
        java.lang.Class class21 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass20);
        java.lang.Class class22 = org.jfree.data.time.RegularTimePeriod.downsize(class21);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 2791L + "'", long4 == 2791L);
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Sep 02 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 52 + "'", int15 == 52);
        org.junit.Assert.assertNotNull(timeZone16);
// flaky:         org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertNotNull(class21);
        org.junit.Assert.assertNotNull(class22);
    }

    @Test
    public void test2086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2086");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(10, 7);
        java.lang.Class<?> wildcardClass3 = week2.getClass();
        java.lang.Class class4 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass3);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(class4);
    }

    @Test
    public void test2087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2087");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.previous();
        int int4 = week2.getYearValue();
        java.util.Date date5 = week2.getStart();
        long long6 = week2.getSerialIndex();
        java.lang.Object obj7 = null;
        boolean boolean8 = week2.equals(obj7);
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 2791L + "'", long6 == 2791L);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test2088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2088");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getWeek();
        org.jfree.data.time.Week week10 = new org.jfree.data.time.Week();
        long long11 = week10.getFirstMillisecond();
        org.jfree.data.time.Year year12 = week10.getYear();
        org.jfree.data.time.Week week13 = new org.jfree.data.time.Week(52, year12);
        java.util.Date date14 = year12.getStart();
        org.jfree.data.time.Week week15 = new org.jfree.data.time.Week((-1969), year12);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod16 = week15.next();
        int int17 = week2.compareTo((java.lang.Object) week15);
        long long18 = week2.getLastMillisecond();
        long long19 = week2.getFirstMillisecond();
        java.util.Date date20 = week2.getStart();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 35 + "'", int7 == 35);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1637449200000L + "'", long11 == 1637449200000L);
        org.junit.Assert.assertNotNull(year12);
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Fri Jan 01 00:00:00 CET 2021");
        org.junit.Assert.assertNotNull(regularTimePeriod16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1969) + "'", int17 == (-1969));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-60505750800001L) + "'", long18 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-60506355600000L) + "'", long19 == (-60506355600000L));
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Sun Aug 20 00:00:00 CET 52");
    }

    @Test
    public void test2089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2089");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(35, 100);
        java.util.Date date3 = week2.getStart();
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Aug 23 00:00:00 CET 100");
    }

    @Test
    public void test2090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2090");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '4', (int) ' ');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.previous();
        int int4 = week2.getWeek();
        int int5 = week2.getYearValue();
        java.util.Date date6 = week2.getStart();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week(date6);
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 32 + "'", int5 == 32);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sun Dec 21 00:00:00 CET 32");
    }

    @Test
    public void test2091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2091");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date3 = week2.getStart();
        org.jfree.data.time.Week week4 = new org.jfree.data.time.Week(date3);
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str8 = week7.toString();
        long long9 = week7.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week7.next();
        java.lang.String str11 = week7.toString();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod12 = week7.previous();
        java.lang.Class<?> wildcardClass13 = regularTimePeriod12.getClass();
        boolean boolean14 = week4.equals((java.lang.Object) wildcardClass13);
        long long15 = week4.getFirstMillisecond();
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Week 35, 52" + "'", str8, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-60506053200001L) + "'", long9 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Week 35, 52" + "'", str11, "Week 35, 52");
        org.junit.Assert.assertNotNull(regularTimePeriod12);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-59101405200000L) + "'", long15 == (-59101405200000L));
    }

    @Test
    public void test2092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2092");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(32, (-1));
        long long3 = week2.getLastMillisecond();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-62179837200001L) + "'", long3 == (-62179837200001L));
    }

    @Test
    public void test2093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2093");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        java.util.Calendar calendar5 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long6 = week2.getFirstMillisecond(calendar5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
    }

    @Test
    public void test2094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2094");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        long long5 = week2.getLastMillisecond();
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod9 = week8.next();
        java.lang.Class<?> wildcardClass10 = week8.getClass();
        java.lang.Class class11 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass10);
        int int12 = week2.compareTo((java.lang.Object) wildcardClass10);
        long long13 = week2.getMiddleMillisecond();
        java.util.Date date14 = week2.getEnd();
        int int15 = week2.getWeek();
        long long16 = week2.getLastMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod17 = week2.next();
        long long18 = week2.getFirstMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod19 = week2.next();
        java.util.Date date20 = week2.getStart();
        java.lang.String str21 = week2.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Year year22 = week2.getYear();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Year constructor: year (52) outside valid range.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-60505750800001L) + "'", long5 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod9);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNotNull(class11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-60506053200001L) + "'", long13 == (-60506053200001L));
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 35 + "'", int15 == 35);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-60505750800001L) + "'", long16 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-60506355600000L) + "'", long18 == (-60506355600000L));
        org.junit.Assert.assertNotNull(regularTimePeriod19);
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Week 35, 52" + "'", str21, "Week 35, 52");
    }

    @Test
    public void test2095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2095");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod11 = week2.next();
        org.jfree.data.time.Week week14 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod15 = week14.next();
        java.lang.Class<?> wildcardClass16 = week14.getClass();
        java.lang.Class class17 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass16);
        java.lang.Class class18 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass16);
        boolean boolean19 = week2.equals((java.lang.Object) wildcardClass16);
        java.lang.Class class20 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass16);
        org.jfree.data.time.Week week23 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date24 = week23.getStart();
        java.util.Date date25 = week23.getEnd();
        org.jfree.data.time.Week week28 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod29 = week28.next();
        java.lang.Class<?> wildcardClass30 = week28.getClass();
        java.lang.Class class31 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass30);
        org.jfree.data.time.Week week34 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date35 = week34.getStart();
        java.lang.Class class36 = null;
        java.util.Date date37 = null;
        java.util.TimeZone timeZone38 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod39 = org.jfree.data.time.RegularTimePeriod.createInstance(class36, date37, timeZone38);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod40 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass30, date35, timeZone38);
        org.jfree.data.time.Week week41 = new org.jfree.data.time.Week(date25, timeZone38);
        java.lang.Class class42 = null;
        java.util.Date date43 = null;
        java.util.TimeZone timeZone44 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod45 = org.jfree.data.time.RegularTimePeriod.createInstance(class42, date43, timeZone44);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod46 = org.jfree.data.time.RegularTimePeriod.createInstance(class20, date25, timeZone44);
        org.jfree.data.time.Week week47 = new org.jfree.data.time.Week(date25);
        org.jfree.data.time.Week week50 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str51 = week50.toString();
        long long52 = week50.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod53 = week50.next();
        java.util.Date date54 = week50.getEnd();
        org.jfree.data.time.Week week55 = new org.jfree.data.time.Week(date54);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod56 = week55.next();
        java.util.Date date57 = week55.getEnd();
        java.util.TimeZone timeZone58 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.Week week59 = new org.jfree.data.time.Week(date57, timeZone58);
        java.util.Locale locale60 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Week week61 = new org.jfree.data.time.Week(date25, timeZone58, locale60);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'locale' argument.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertNotNull(regularTimePeriod11);
        org.junit.Assert.assertNotNull(regularTimePeriod15);
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertNotNull(class17);
        org.junit.Assert.assertNotNull(class18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(class20);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod29);
        org.junit.Assert.assertNotNull(wildcardClass30);
        org.junit.Assert.assertNotNull(class31);
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone38);
// flaky:         org.junit.Assert.assertEquals(timeZone38.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod39);
        org.junit.Assert.assertNotNull(regularTimePeriod40);
        org.junit.Assert.assertNotNull(timeZone44);
// flaky:         org.junit.Assert.assertEquals(timeZone44.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod45);
        org.junit.Assert.assertNull(regularTimePeriod46);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "Week 35, 52" + "'", str51, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + (-60506053200001L) + "'", long52 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod53);
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod56);
        org.junit.Assert.assertNotNull(date57);
        org.junit.Assert.assertEquals(date57.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(timeZone58);
// flaky:         org.junit.Assert.assertEquals(timeZone58.getDisplayName(), "Central European Time");
    }

    @Test
    public void test2096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2096");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        long long5 = week2.getLastMillisecond();
        boolean boolean7 = week2.equals((java.lang.Object) (short) 10);
        long long8 = week2.getMiddleMillisecond();
        long long9 = week2.getFirstMillisecond();
        int int10 = week2.getYearValue();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-60505750800001L) + "'", long5 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-60506053200001L) + "'", long8 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-60506355600000L) + "'", long9 == (-60506355600000L));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 52 + "'", int10 == 52);
    }

    @Test
    public void test2097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2097");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((-2019), (int) '4');
    }

    @Test
    public void test2098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2098");
        org.jfree.data.time.Week week5 = new org.jfree.data.time.Week();
        long long6 = week5.getFirstMillisecond();
        org.jfree.data.time.Year year7 = week5.getYear();
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week(52, year7);
        org.jfree.data.time.Week week9 = new org.jfree.data.time.Week((int) (byte) -1, year7);
        org.jfree.data.time.Week week10 = new org.jfree.data.time.Week(0, year7);
        java.util.Date date11 = year7.getEnd();
        org.jfree.data.time.Week week12 = new org.jfree.data.time.Week(52, year7);
        org.jfree.data.time.Week week13 = new org.jfree.data.time.Week((int) (short) 10, year7);
        long long14 = week13.getLastMillisecond();
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1637449200000L + "'", long6 == 1637449200000L);
        org.junit.Assert.assertNotNull(year7);
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Fri Dec 31 23:59:59 CET 2021");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1615071599999L + "'", long14 == 1615071599999L);
    }

    @Test
    public void test2099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2099");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod11 = week2.next();
        java.util.Date date12 = week2.getStart();
        java.util.Date date13 = week2.getStart();
        org.jfree.data.time.Week week16 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod17 = week16.next();
        int int18 = week16.getYearValue();
        java.util.TimeZone timeZone19 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int20 = week16.compareTo((java.lang.Object) timeZone19);
        int int21 = week16.getYearValue();
        int int23 = week16.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod24 = week16.previous();
        int int25 = week16.getYearValue();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod26 = week16.next();
        java.lang.Class<?> wildcardClass27 = regularTimePeriod26.getClass();
        org.jfree.data.time.Week week30 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod31 = week30.next();
        java.lang.Class<?> wildcardClass32 = week30.getClass();
        java.lang.Class class33 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass32);
        java.lang.Class class34 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass32);
        org.jfree.data.time.Week week37 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod38 = week37.next();
        int int39 = week37.getYearValue();
        java.util.TimeZone timeZone40 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int41 = week37.compareTo((java.lang.Object) timeZone40);
        int int42 = week37.getYearValue();
        int int44 = week37.compareTo((java.lang.Object) 9);
        java.util.Date date45 = week37.getStart();
        org.jfree.data.time.Week week46 = new org.jfree.data.time.Week(date45);
        org.jfree.data.time.Week week49 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod50 = week49.next();
        int int51 = week49.getYearValue();
        java.util.TimeZone timeZone52 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int53 = week49.compareTo((java.lang.Object) timeZone52);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod54 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass32, date45, timeZone52);
        org.jfree.data.time.Week week57 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str58 = week57.toString();
        long long59 = week57.getMiddleMillisecond();
        long long60 = week57.getLastMillisecond();
        org.jfree.data.time.Week week63 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod64 = week63.next();
        java.lang.Class<?> wildcardClass65 = week63.getClass();
        java.lang.Class class66 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass65);
        int int67 = week57.compareTo((java.lang.Object) wildcardClass65);
        java.lang.Class class68 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass65);
        org.jfree.data.time.Week week71 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod72 = week71.next();
        java.lang.Class<?> wildcardClass73 = week71.getClass();
        java.lang.Class class74 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass73);
        org.jfree.data.time.Week week77 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date78 = week77.getStart();
        java.lang.Class class79 = null;
        java.util.Date date80 = null;
        java.util.TimeZone timeZone81 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod82 = org.jfree.data.time.RegularTimePeriod.createInstance(class79, date80, timeZone81);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod83 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass73, date78, timeZone81);
        java.util.TimeZone timeZone84 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod85 = org.jfree.data.time.RegularTimePeriod.createInstance(class68, date78, timeZone84);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod86 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass27, date45, timeZone84);
        org.jfree.data.time.Week week87 = new org.jfree.data.time.Week(date13, timeZone84);
        org.jfree.data.time.Week week88 = new org.jfree.data.time.Week(date13);
        long long89 = week88.getSerialIndex();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertNotNull(regularTimePeriod11);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 52 + "'", int18 == 52);
        org.junit.Assert.assertNotNull(timeZone19);
// flaky:         org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 52 + "'", int21 == 52);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 52 + "'", int25 == 52);
        org.junit.Assert.assertNotNull(regularTimePeriod26);
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertNotNull(regularTimePeriod31);
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertNotNull(class33);
        org.junit.Assert.assertNotNull(class34);
        org.junit.Assert.assertNotNull(regularTimePeriod38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 52 + "'", int39 == 52);
        org.junit.Assert.assertNotNull(timeZone40);
// flaky:         org.junit.Assert.assertEquals(timeZone40.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 52 + "'", int42 == 52);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 52 + "'", int51 == 52);
        org.junit.Assert.assertNotNull(timeZone52);
// flaky:         org.junit.Assert.assertEquals(timeZone52.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod54);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "Week 35, 52" + "'", str58, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + (-60506053200001L) + "'", long59 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + (-60505750800001L) + "'", long60 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod64);
        org.junit.Assert.assertNotNull(wildcardClass65);
        org.junit.Assert.assertNotNull(class66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertNotNull(class68);
        org.junit.Assert.assertNotNull(regularTimePeriod72);
        org.junit.Assert.assertNotNull(wildcardClass73);
        org.junit.Assert.assertNotNull(class74);
        org.junit.Assert.assertNotNull(date78);
        org.junit.Assert.assertEquals(date78.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone81);
// flaky:         org.junit.Assert.assertEquals(timeZone81.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod82);
        org.junit.Assert.assertNotNull(regularTimePeriod83);
        org.junit.Assert.assertNotNull(timeZone84);
// flaky:         org.junit.Assert.assertEquals(timeZone84.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod85);
        org.junit.Assert.assertNotNull(regularTimePeriod86);
        org.junit.Assert.assertTrue("'" + long89 + "' != '" + 2791L + "'", long89 == 2791L);
    }

    @Test
    public void test2100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2100");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date3 = week2.getStart();
        java.util.Date date4 = week2.getEnd();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod8 = week7.next();
        java.lang.Class<?> wildcardClass9 = week7.getClass();
        java.lang.Class class10 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass9);
        org.jfree.data.time.Week week13 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date14 = week13.getStart();
        java.lang.Class class15 = null;
        java.util.Date date16 = null;
        java.util.TimeZone timeZone17 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod18 = org.jfree.data.time.RegularTimePeriod.createInstance(class15, date16, timeZone17);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod19 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass9, date14, timeZone17);
        org.jfree.data.time.Week week20 = new org.jfree.data.time.Week(date4, timeZone17);
        java.util.Date date21 = week20.getEnd();
        int int22 = week20.getWeek();
        long long23 = week20.getSerialIndex();
        java.util.Date date24 = week20.getStart();
        org.jfree.data.time.Week week25 = new org.jfree.data.time.Week(date24);
        org.jfree.data.time.Week week28 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date29 = week28.getStart();
        java.util.Date date30 = week28.getEnd();
        org.jfree.data.time.Week week33 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod34 = week33.next();
        java.lang.Class<?> wildcardClass35 = week33.getClass();
        java.lang.Class class36 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass35);
        org.jfree.data.time.Week week39 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date40 = week39.getStart();
        java.lang.Class class41 = null;
        java.util.Date date42 = null;
        java.util.TimeZone timeZone43 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod44 = org.jfree.data.time.RegularTimePeriod.createInstance(class41, date42, timeZone43);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod45 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass35, date40, timeZone43);
        org.jfree.data.time.Week week46 = new org.jfree.data.time.Week(date30, timeZone43);
        java.util.Date date47 = week46.getEnd();
        int int48 = week46.getWeek();
        long long49 = week46.getSerialIndex();
        java.lang.Class<?> wildcardClass50 = week46.getClass();
        java.lang.Class class51 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass50);
        int int52 = week25.compareTo((java.lang.Object) wildcardClass50);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(class10);
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone17);
// flaky:         org.junit.Assert.assertEquals(timeZone17.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod18);
        org.junit.Assert.assertNotNull(regularTimePeriod19);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 9 + "'", int22 == 9);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 5150L + "'", long23 == 5150L);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod34);
        org.junit.Assert.assertNotNull(wildcardClass35);
        org.junit.Assert.assertNotNull(class36);
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone43);
// flaky:         org.junit.Assert.assertEquals(timeZone43.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod44);
        org.junit.Assert.assertNotNull(regularTimePeriod45);
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 9 + "'", int48 == 9);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 5150L + "'", long49 == 5150L);
        org.junit.Assert.assertNotNull(wildcardClass50);
        org.junit.Assert.assertNotNull(class51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
    }

    @Test
    public void test2101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2101");
        org.jfree.data.time.Week week3 = new org.jfree.data.time.Week();
        long long4 = week3.getFirstMillisecond();
        org.jfree.data.time.Year year5 = week3.getYear();
        org.jfree.data.time.Week week6 = new org.jfree.data.time.Week(0, year5);
        org.jfree.data.time.Year year7 = week6.getYear();
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week(3, year7);
        org.jfree.data.time.Week week9 = new org.jfree.data.time.Week(7, year7);
        long long10 = week9.getLastMillisecond();
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1637449200000L + "'", long4 == 1637449200000L);
        org.junit.Assert.assertNotNull(year5);
        org.junit.Assert.assertNotNull(year7);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1613257199999L + "'", long10 == 1613257199999L);
    }

    @Test
    public void test2102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2102");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(32, 7);
        java.util.Calendar calendar3 = null;
        // The following exception was thrown during execution in test generation
        try {
            week2.peg(calendar3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test2103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2103");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(48, 11);
        long long3 = week2.getMiddleMillisecond();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-61791858000001L) + "'", long3 == (-61791858000001L));
    }

    @Test
    public void test2104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2104");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) (short) 100, (int) (byte) 100);
        int int3 = week2.getWeek();
        java.util.Date date4 = week2.getStart();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str8 = week7.toString();
        long long9 = week7.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week7.next();
        java.util.Date date11 = week7.getEnd();
        org.jfree.data.time.Week week12 = new org.jfree.data.time.Week(date11);
        org.jfree.data.time.Week week15 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date16 = week15.getStart();
        org.jfree.data.time.Week week19 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod20 = week19.next();
        int int21 = week19.getYearValue();
        java.util.TimeZone timeZone22 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int23 = week19.compareTo((java.lang.Object) timeZone22);
        org.jfree.data.time.Week week24 = new org.jfree.data.time.Week(date16, timeZone22);
        org.jfree.data.time.Week week25 = new org.jfree.data.time.Week(date11, timeZone22);
        int int26 = week2.compareTo((java.lang.Object) timeZone22);
        java.util.Calendar calendar27 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long28 = week2.getMiddleMillisecond(calendar27);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100);
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Sun Nov 21 00:00:00 CET 101");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Week 35, 52" + "'", str8, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-60506053200001L) + "'", long9 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 52 + "'", int21 == 52);
        org.junit.Assert.assertNotNull(timeZone22);
// flaky:         org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
    }

    @Test
    public void test2105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2105");
        org.jfree.data.time.Week week3 = new org.jfree.data.time.Week();
        long long4 = week3.getFirstMillisecond();
        org.jfree.data.time.Year year5 = week3.getYear();
        org.jfree.data.time.Week week6 = new org.jfree.data.time.Week(52, year5);
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week((int) (byte) -1, year5);
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week(0, year5);
        org.jfree.data.time.Year year9 = week8.getYear();
        long long10 = week8.getFirstMillisecond();
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1637449200000L + "'", long4 == 1637449200000L);
        org.junit.Assert.assertNotNull(year5);
        org.junit.Assert.assertNotNull(year9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1608418800000L + "'", long10 == 1608418800000L);
    }

    @Test
    public void test2106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2106");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        long long5 = week2.getLastMillisecond();
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod9 = week8.next();
        java.lang.Class<?> wildcardClass10 = week8.getClass();
        java.lang.Class class11 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass10);
        int int12 = week2.compareTo((java.lang.Object) wildcardClass10);
        java.lang.Class class13 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass10);
        org.jfree.data.time.Week week16 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod17 = week16.next();
        java.lang.Class<?> wildcardClass18 = week16.getClass();
        java.lang.Class class19 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass18);
        org.jfree.data.time.Week week22 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date23 = week22.getStart();
        java.lang.Class class24 = null;
        java.util.Date date25 = null;
        java.util.TimeZone timeZone26 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod27 = org.jfree.data.time.RegularTimePeriod.createInstance(class24, date25, timeZone26);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod28 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass18, date23, timeZone26);
        java.util.TimeZone timeZone29 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod30 = org.jfree.data.time.RegularTimePeriod.createInstance(class13, date23, timeZone29);
        org.jfree.data.time.Week week31 = new org.jfree.data.time.Week(date23);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod32 = week31.previous();
        int int33 = week31.getWeek();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-60505750800001L) + "'", long5 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod9);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNotNull(class11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(class13);
        org.junit.Assert.assertNotNull(regularTimePeriod17);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(class19);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone26);
// flaky:         org.junit.Assert.assertEquals(timeZone26.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod27);
        org.junit.Assert.assertNotNull(regularTimePeriod28);
        org.junit.Assert.assertNotNull(timeZone29);
// flaky:         org.junit.Assert.assertEquals(timeZone29.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod30);
        org.junit.Assert.assertNotNull(regularTimePeriod32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 9 + "'", int33 == 9);
    }

    @Test
    public void test2107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2107");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(100, 10);
        long long3 = week2.getSerialIndex();
        org.jfree.data.time.Week week6 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str7 = week6.toString();
        long long8 = week6.getSerialIndex();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod9 = week6.next();
        java.util.Date date10 = regularTimePeriod9.getEnd();
        org.jfree.data.time.Week week13 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date14 = week13.getStart();
        org.jfree.data.time.Week week17 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod18 = week17.next();
        int int19 = week17.getYearValue();
        java.util.TimeZone timeZone20 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int21 = week17.compareTo((java.lang.Object) timeZone20);
        org.jfree.data.time.Week week22 = new org.jfree.data.time.Week(date14, timeZone20);
        org.jfree.data.time.Week week23 = new org.jfree.data.time.Week(date10, timeZone20);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod24 = week23.next();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod25 = week23.previous();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod26 = week23.next();
        java.util.Date date27 = week23.getStart();
        boolean boolean28 = week2.equals((java.lang.Object) date27);
        long long29 = week2.getLastMillisecond();
        java.util.Date date30 = week2.getStart();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 630L + "'", long3 == 630L);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Week 35, 52" + "'", str7, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 2791L + "'", long8 == 2791L);
        org.junit.Assert.assertNotNull(regularTimePeriod9);
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sat Sep 02 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 52 + "'", int19 == 52);
        org.junit.Assert.assertNotNull(timeZone20);
// flaky:         org.junit.Assert.assertEquals(timeZone20.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod24);
        org.junit.Assert.assertNotNull(regularTimePeriod25);
        org.junit.Assert.assertNotNull(regularTimePeriod26);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Sun Aug 27 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + (-61791555600001L) + "'", long29 == (-61791555600001L));
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Sun Nov 22 00:00:00 CET 11");
    }

    @Test
    public void test2108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2108");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.next();
        java.util.Date date6 = week2.getEnd();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week(date6);
        int int8 = week7.getWeek();
        boolean boolean10 = week7.equals((java.lang.Object) 1637449200000L);
        org.jfree.data.time.Week week13 = new org.jfree.data.time.Week(9, (int) 'a');
        org.jfree.data.time.Week week16 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod17 = week16.next();
        long long18 = week16.getMiddleMillisecond();
        java.lang.String str19 = week16.toString();
        boolean boolean20 = week13.equals((java.lang.Object) week16);
        int int21 = week16.getWeek();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod22 = week16.next();
        boolean boolean23 = week7.equals((java.lang.Object) week16);
        long long24 = week16.getLastMillisecond();
        long long25 = week16.getLastMillisecond();
        long long26 = week16.getFirstMillisecond();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 35 + "'", int8 == 35);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(regularTimePeriod17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-60506053200001L) + "'", long18 == (-60506053200001L));
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Week 35, 52" + "'", str19, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 35 + "'", int21 == 35);
        org.junit.Assert.assertNotNull(regularTimePeriod22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-60505750800001L) + "'", long24 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-60505750800001L) + "'", long25 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + (-60506355600000L) + "'", long26 == (-60506355600000L));
    }

    @Test
    public void test2109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2109");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        long long5 = week2.getLastMillisecond();
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod9 = week8.next();
        java.lang.Class<?> wildcardClass10 = week8.getClass();
        java.lang.Class class11 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass10);
        int int12 = week2.compareTo((java.lang.Object) wildcardClass10);
        long long13 = week2.getMiddleMillisecond();
        long long14 = week2.getLastMillisecond();
        org.jfree.data.time.Week week17 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod18 = week17.next();
        int int19 = week17.getYearValue();
        java.util.TimeZone timeZone20 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int21 = week17.compareTo((java.lang.Object) timeZone20);
        int int22 = week17.getYearValue();
        int int24 = week17.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod25 = week17.previous();
        int int26 = week17.getYearValue();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod27 = week17.next();
        java.lang.Class<?> wildcardClass28 = regularTimePeriod27.getClass();
        org.jfree.data.time.Week week31 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod32 = week31.next();
        java.lang.Class<?> wildcardClass33 = week31.getClass();
        java.lang.Class class34 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass33);
        java.lang.Class class35 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass33);
        org.jfree.data.time.Week week38 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod39 = week38.next();
        int int40 = week38.getYearValue();
        java.util.TimeZone timeZone41 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int42 = week38.compareTo((java.lang.Object) timeZone41);
        int int43 = week38.getYearValue();
        int int45 = week38.compareTo((java.lang.Object) 9);
        java.util.Date date46 = week38.getStart();
        org.jfree.data.time.Week week47 = new org.jfree.data.time.Week(date46);
        org.jfree.data.time.Week week50 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod51 = week50.next();
        int int52 = week50.getYearValue();
        java.util.TimeZone timeZone53 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int54 = week50.compareTo((java.lang.Object) timeZone53);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod55 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass33, date46, timeZone53);
        org.jfree.data.time.Week week58 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str59 = week58.toString();
        long long60 = week58.getMiddleMillisecond();
        long long61 = week58.getLastMillisecond();
        org.jfree.data.time.Week week64 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod65 = week64.next();
        java.lang.Class<?> wildcardClass66 = week64.getClass();
        java.lang.Class class67 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass66);
        int int68 = week58.compareTo((java.lang.Object) wildcardClass66);
        java.lang.Class class69 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass66);
        org.jfree.data.time.Week week72 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod73 = week72.next();
        java.lang.Class<?> wildcardClass74 = week72.getClass();
        java.lang.Class class75 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass74);
        org.jfree.data.time.Week week78 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date79 = week78.getStart();
        java.lang.Class class80 = null;
        java.util.Date date81 = null;
        java.util.TimeZone timeZone82 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod83 = org.jfree.data.time.RegularTimePeriod.createInstance(class80, date81, timeZone82);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod84 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass74, date79, timeZone82);
        java.util.TimeZone timeZone85 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod86 = org.jfree.data.time.RegularTimePeriod.createInstance(class69, date79, timeZone85);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod87 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass28, date46, timeZone85);
        java.lang.Class class88 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass28);
        java.lang.Class class89 = org.jfree.data.time.RegularTimePeriod.downsize(class88);
        java.lang.Class class90 = org.jfree.data.time.RegularTimePeriod.downsize(class88);
        java.lang.Class class91 = org.jfree.data.time.RegularTimePeriod.downsize(class90);
        boolean boolean92 = week2.equals((java.lang.Object) class90);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-60505750800001L) + "'", long5 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod9);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNotNull(class11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-60506053200001L) + "'", long13 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-60505750800001L) + "'", long14 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 52 + "'", int19 == 52);
        org.junit.Assert.assertNotNull(timeZone20);
// flaky:         org.junit.Assert.assertEquals(timeZone20.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 52 + "'", int22 == 52);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 52 + "'", int26 == 52);
        org.junit.Assert.assertNotNull(regularTimePeriod27);
        org.junit.Assert.assertNotNull(wildcardClass28);
        org.junit.Assert.assertNotNull(regularTimePeriod32);
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertNotNull(class34);
        org.junit.Assert.assertNotNull(class35);
        org.junit.Assert.assertNotNull(regularTimePeriod39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 52 + "'", int40 == 52);
        org.junit.Assert.assertNotNull(timeZone41);
// flaky:         org.junit.Assert.assertEquals(timeZone41.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 52 + "'", int43 == 52);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 52 + "'", int52 == 52);
        org.junit.Assert.assertNotNull(timeZone53);
// flaky:         org.junit.Assert.assertEquals(timeZone53.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod55);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "Week 35, 52" + "'", str59, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + (-60506053200001L) + "'", long60 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + (-60505750800001L) + "'", long61 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod65);
        org.junit.Assert.assertNotNull(wildcardClass66);
        org.junit.Assert.assertNotNull(class67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertNotNull(class69);
        org.junit.Assert.assertNotNull(regularTimePeriod73);
        org.junit.Assert.assertNotNull(wildcardClass74);
        org.junit.Assert.assertNotNull(class75);
        org.junit.Assert.assertNotNull(date79);
        org.junit.Assert.assertEquals(date79.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone82);
// flaky:         org.junit.Assert.assertEquals(timeZone82.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod83);
        org.junit.Assert.assertNotNull(regularTimePeriod84);
        org.junit.Assert.assertNotNull(timeZone85);
// flaky:         org.junit.Assert.assertEquals(timeZone85.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod86);
        org.junit.Assert.assertNotNull(regularTimePeriod87);
        org.junit.Assert.assertNotNull(class88);
        org.junit.Assert.assertNotNull(class89);
        org.junit.Assert.assertNotNull(class90);
        org.junit.Assert.assertNotNull(class91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
    }

    @Test
    public void test2110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2110");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        java.util.Date date10 = week2.getStart();
        org.jfree.data.time.Week week13 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod14 = week13.next();
        java.lang.Class<?> wildcardClass15 = week13.getClass();
        java.lang.Class class16 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass15);
        java.lang.Class class17 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass15);
        org.jfree.data.time.Week week20 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod21 = week20.next();
        int int22 = week20.getYearValue();
        java.util.TimeZone timeZone23 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int24 = week20.compareTo((java.lang.Object) timeZone23);
        int int25 = week20.getYearValue();
        int int27 = week20.compareTo((java.lang.Object) 9);
        java.util.Date date28 = week20.getStart();
        org.jfree.data.time.Week week29 = new org.jfree.data.time.Week(date28);
        org.jfree.data.time.Week week32 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod33 = week32.next();
        int int34 = week32.getYearValue();
        java.util.TimeZone timeZone35 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int36 = week32.compareTo((java.lang.Object) timeZone35);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod37 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass15, date28, timeZone35);
        org.jfree.data.time.Week week40 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod41 = week40.previous();
        int int42 = week40.getYearValue();
        java.util.Date date43 = week40.getStart();
        java.util.TimeZone timeZone44 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.Week week45 = new org.jfree.data.time.Week(date43, timeZone44);
        org.jfree.data.time.Week week46 = new org.jfree.data.time.Week(date28, timeZone44);
        org.jfree.data.time.Week week47 = new org.jfree.data.time.Week(date10, timeZone44);
        int int48 = week47.getWeek();
        long long49 = week47.getSerialIndex();
        org.jfree.data.time.Week week52 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod53 = week52.previous();
        int int54 = week52.getYearValue();
        java.util.Date date55 = week52.getStart();
        int int56 = week52.getWeek();
        int int57 = week47.compareTo((java.lang.Object) int56);
        int int58 = week47.getYearValue();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod14);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNotNull(class16);
        org.junit.Assert.assertNotNull(class17);
        org.junit.Assert.assertNotNull(regularTimePeriod21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 52 + "'", int22 == 52);
        org.junit.Assert.assertNotNull(timeZone23);
// flaky:         org.junit.Assert.assertEquals(timeZone23.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 52 + "'", int25 == 52);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 52 + "'", int34 == 52);
        org.junit.Assert.assertNotNull(timeZone35);
// flaky:         org.junit.Assert.assertEquals(timeZone35.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod37);
        org.junit.Assert.assertNotNull(regularTimePeriod41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 52 + "'", int42 == 52);
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(timeZone44);
// flaky:         org.junit.Assert.assertEquals(timeZone44.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 35 + "'", int48 == 35);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 2791L + "'", long49 == 2791L);
        org.junit.Assert.assertNotNull(regularTimePeriod53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 52 + "'", int54 == 52);
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 35 + "'", int56 == 35);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 52 + "'", int58 == 52);
    }

    @Test
    public void test2111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2111");
        org.jfree.data.time.Week week3 = new org.jfree.data.time.Week();
        long long4 = week3.getFirstMillisecond();
        org.jfree.data.time.Year year5 = week3.getYear();
        org.jfree.data.time.Week week6 = new org.jfree.data.time.Week(0, year5);
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week(12, year5);
        long long8 = year5.getMiddleMillisecond();
        org.jfree.data.time.Week week9 = new org.jfree.data.time.Week(0, year5);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1637449200000L + "'", long4 == 1637449200000L);
        org.junit.Assert.assertNotNull(year5);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1625223599999L + "'", long8 == 1625223599999L);
    }

    @Test
    public void test2112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2112");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        int int11 = week2.getYearValue();
        long long12 = week2.getLastMillisecond();
        org.jfree.data.time.Week week15 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod16 = week15.next();
        java.lang.Class<?> wildcardClass17 = week15.getClass();
        java.lang.Class class18 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass17);
        boolean boolean19 = week2.equals((java.lang.Object) wildcardClass17);
        int int20 = week2.getYearValue();
        org.jfree.data.time.Week week23 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod24 = week23.next();
        int int25 = week23.getYearValue();
        java.util.TimeZone timeZone26 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int27 = week23.compareTo((java.lang.Object) timeZone26);
        int int28 = week23.getYearValue();
        int int30 = week23.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod31 = week23.previous();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod32 = week23.next();
        org.jfree.data.time.Week week35 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod36 = week35.next();
        java.lang.Class<?> wildcardClass37 = week35.getClass();
        java.lang.Class class38 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass37);
        java.lang.Class class39 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass37);
        boolean boolean40 = week23.equals((java.lang.Object) wildcardClass37);
        long long41 = week23.getSerialIndex();
        java.util.Date date42 = week23.getEnd();
        boolean boolean43 = week2.equals((java.lang.Object) date42);
        org.jfree.data.time.Week week46 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod47 = week46.previous();
        java.util.Date date48 = week46.getEnd();
        org.jfree.data.time.Week week51 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date52 = week51.getStart();
        java.util.Date date53 = week51.getEnd();
        java.util.Date date54 = week51.getStart();
        org.jfree.data.time.Week week57 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date58 = week57.getStart();
        org.jfree.data.time.Week week61 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod62 = week61.next();
        int int63 = week61.getYearValue();
        java.util.TimeZone timeZone64 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int65 = week61.compareTo((java.lang.Object) timeZone64);
        org.jfree.data.time.Week week66 = new org.jfree.data.time.Week(date58, timeZone64);
        org.jfree.data.time.Week week67 = new org.jfree.data.time.Week(date54, timeZone64);
        org.jfree.data.time.Week week68 = new org.jfree.data.time.Week(date48, timeZone64);
        org.jfree.data.time.Week week69 = new org.jfree.data.time.Week(date42, timeZone64);
        org.jfree.data.time.Week week70 = new org.jfree.data.time.Week(date42);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod71 = week70.previous();
        long long72 = week70.getSerialIndex();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-60505750800001L) + "'", long12 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(class18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 52 + "'", int20 == 52);
        org.junit.Assert.assertNotNull(regularTimePeriod24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 52 + "'", int25 == 52);
        org.junit.Assert.assertNotNull(timeZone26);
// flaky:         org.junit.Assert.assertEquals(timeZone26.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 52 + "'", int28 == 52);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod31);
        org.junit.Assert.assertNotNull(regularTimePeriod32);
        org.junit.Assert.assertNotNull(regularTimePeriod36);
        org.junit.Assert.assertNotNull(wildcardClass37);
        org.junit.Assert.assertNotNull(class38);
        org.junit.Assert.assertNotNull(class39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 2791L + "'", long41 == 2791L);
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(regularTimePeriod47);
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date52);
        org.junit.Assert.assertEquals(date52.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date58);
        org.junit.Assert.assertEquals(date58.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 52 + "'", int63 == 52);
        org.junit.Assert.assertNotNull(timeZone64);
// flaky:         org.junit.Assert.assertEquals(timeZone64.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod71);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 2791L + "'", long72 == 2791L);
    }

    @Test
    public void test2113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2113");
        org.jfree.data.time.Week week3 = new org.jfree.data.time.Week();
        long long4 = week3.getFirstMillisecond();
        org.jfree.data.time.Year year5 = week3.getYear();
        org.jfree.data.time.Week week6 = new org.jfree.data.time.Week(52, year5);
        java.util.Date date7 = year5.getStart();
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week(52, year5);
        org.jfree.data.time.Week week9 = new org.jfree.data.time.Week(97, year5);
        long long10 = week9.getFirstMillisecond();
        org.jfree.data.time.Week week16 = new org.jfree.data.time.Week();
        long long17 = week16.getFirstMillisecond();
        org.jfree.data.time.Year year18 = week16.getYear();
        org.jfree.data.time.Week week19 = new org.jfree.data.time.Week(0, year18);
        org.jfree.data.time.Week week20 = new org.jfree.data.time.Week(11, year18);
        long long21 = week20.getSerialIndex();
        org.jfree.data.time.Year year22 = week20.getYear();
        org.jfree.data.time.Week week23 = new org.jfree.data.time.Week((int) (short) 1, year22);
        org.jfree.data.time.Week week24 = new org.jfree.data.time.Week(4, year22);
        org.jfree.data.time.Week week25 = new org.jfree.data.time.Week(32, year22);
        boolean boolean26 = week9.equals((java.lang.Object) year22);
        java.util.Date date27 = year22.getStart();
        org.jfree.data.time.Week week28 = new org.jfree.data.time.Week(date27);
        org.jfree.data.time.Week week29 = new org.jfree.data.time.Week(date27);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1637449200000L + "'", long4 == 1637449200000L);
        org.junit.Assert.assertNotNull(year5);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Fri Jan 01 00:00:00 CET 2021");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1667080800000L + "'", long10 == 1667080800000L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1637449200000L + "'", long17 == 1637449200000L);
        org.junit.Assert.assertNotNull(year18);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 107124L + "'", long21 == 107124L);
        org.junit.Assert.assertNotNull(year22);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Fri Jan 01 00:00:00 CET 2021");
    }

    @Test
    public void test2114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2114");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week();
        long long3 = week2.getFirstMillisecond();
        org.jfree.data.time.Year year4 = week2.getYear();
        org.jfree.data.time.Week week5 = new org.jfree.data.time.Week(5, year4);
        org.jfree.data.time.Week week6 = new org.jfree.data.time.Week(10, year4);
        java.util.Date date7 = week6.getEnd();
        long long8 = week6.getFirstMillisecond();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1637449200000L + "'", long3 == 1637449200000L);
        org.junit.Assert.assertNotNull(year4);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Sat Mar 06 23:59:59 CET 2021");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1614466800000L + "'", long8 == 1614466800000L);
    }

    @Test
    public void test2115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2115");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod11 = week2.next();
        java.util.Date date12 = week2.getStart();
        java.util.Date date13 = week2.getStart();
        org.jfree.data.time.Week week16 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod17 = week16.next();
        int int18 = week16.getYearValue();
        java.util.TimeZone timeZone19 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int20 = week16.compareTo((java.lang.Object) timeZone19);
        int int21 = week16.getYearValue();
        int int23 = week16.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod24 = week16.previous();
        int int25 = week16.getYearValue();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod26 = week16.next();
        java.lang.Class<?> wildcardClass27 = regularTimePeriod26.getClass();
        org.jfree.data.time.Week week30 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod31 = week30.next();
        java.lang.Class<?> wildcardClass32 = week30.getClass();
        java.lang.Class class33 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass32);
        java.lang.Class class34 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass32);
        org.jfree.data.time.Week week37 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod38 = week37.next();
        int int39 = week37.getYearValue();
        java.util.TimeZone timeZone40 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int41 = week37.compareTo((java.lang.Object) timeZone40);
        int int42 = week37.getYearValue();
        int int44 = week37.compareTo((java.lang.Object) 9);
        java.util.Date date45 = week37.getStart();
        org.jfree.data.time.Week week46 = new org.jfree.data.time.Week(date45);
        org.jfree.data.time.Week week49 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod50 = week49.next();
        int int51 = week49.getYearValue();
        java.util.TimeZone timeZone52 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int53 = week49.compareTo((java.lang.Object) timeZone52);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod54 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass32, date45, timeZone52);
        org.jfree.data.time.Week week57 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str58 = week57.toString();
        long long59 = week57.getMiddleMillisecond();
        long long60 = week57.getLastMillisecond();
        org.jfree.data.time.Week week63 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod64 = week63.next();
        java.lang.Class<?> wildcardClass65 = week63.getClass();
        java.lang.Class class66 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass65);
        int int67 = week57.compareTo((java.lang.Object) wildcardClass65);
        java.lang.Class class68 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass65);
        org.jfree.data.time.Week week71 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod72 = week71.next();
        java.lang.Class<?> wildcardClass73 = week71.getClass();
        java.lang.Class class74 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass73);
        org.jfree.data.time.Week week77 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date78 = week77.getStart();
        java.lang.Class class79 = null;
        java.util.Date date80 = null;
        java.util.TimeZone timeZone81 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod82 = org.jfree.data.time.RegularTimePeriod.createInstance(class79, date80, timeZone81);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod83 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass73, date78, timeZone81);
        java.util.TimeZone timeZone84 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod85 = org.jfree.data.time.RegularTimePeriod.createInstance(class68, date78, timeZone84);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod86 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass27, date45, timeZone84);
        org.jfree.data.time.Week week87 = new org.jfree.data.time.Week(date13, timeZone84);
        org.jfree.data.time.Week week88 = new org.jfree.data.time.Week(date13);
        long long89 = week88.getLastMillisecond();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertNotNull(regularTimePeriod11);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 52 + "'", int18 == 52);
        org.junit.Assert.assertNotNull(timeZone19);
// flaky:         org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 52 + "'", int21 == 52);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 52 + "'", int25 == 52);
        org.junit.Assert.assertNotNull(regularTimePeriod26);
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertNotNull(regularTimePeriod31);
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertNotNull(class33);
        org.junit.Assert.assertNotNull(class34);
        org.junit.Assert.assertNotNull(regularTimePeriod38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 52 + "'", int39 == 52);
        org.junit.Assert.assertNotNull(timeZone40);
// flaky:         org.junit.Assert.assertEquals(timeZone40.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 52 + "'", int42 == 52);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 52 + "'", int51 == 52);
        org.junit.Assert.assertNotNull(timeZone52);
// flaky:         org.junit.Assert.assertEquals(timeZone52.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod54);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "Week 35, 52" + "'", str58, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + (-60506053200001L) + "'", long59 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + (-60505750800001L) + "'", long60 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod64);
        org.junit.Assert.assertNotNull(wildcardClass65);
        org.junit.Assert.assertNotNull(class66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertNotNull(class68);
        org.junit.Assert.assertNotNull(regularTimePeriod72);
        org.junit.Assert.assertNotNull(wildcardClass73);
        org.junit.Assert.assertNotNull(class74);
        org.junit.Assert.assertNotNull(date78);
        org.junit.Assert.assertEquals(date78.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone81);
// flaky:         org.junit.Assert.assertEquals(timeZone81.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod82);
        org.junit.Assert.assertNotNull(regularTimePeriod83);
        org.junit.Assert.assertNotNull(timeZone84);
// flaky:         org.junit.Assert.assertEquals(timeZone84.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod85);
        org.junit.Assert.assertNotNull(regularTimePeriod86);
        org.junit.Assert.assertTrue("'" + long89 + "' != '" + (-60505750800001L) + "'", long89 == (-60505750800001L));
    }

    @Test
    public void test2116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2116");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.previous();
        java.util.Date date4 = week2.getEnd();
        long long5 = week2.getSerialIndex();
        java.util.Date date6 = week2.getEnd();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 2791L + "'", long5 == 2791L);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Aug 26 23:59:59 CET 52");
    }

    @Test
    public void test2117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2117");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) (byte) 1, (int) (byte) 0);
        long long3 = week2.getMiddleMillisecond();
        java.lang.String str4 = week2.toString();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-62167438800001L) + "'", long3 == (-62167438800001L));
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Week 1, 0" + "'", str4, "Week 1, 0");
    }

    @Test
    public void test2118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2118");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week();
        long long3 = week2.getFirstMillisecond();
        org.jfree.data.time.Year year4 = week2.getYear();
        org.jfree.data.time.Week week5 = new org.jfree.data.time.Week(0, year4);
        java.util.Date date6 = week5.getStart();
        java.util.Date date7 = week5.getStart();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod8 = week5.next();
        org.jfree.data.time.Year year9 = week5.getYear();
        org.jfree.data.time.Week week10 = new org.jfree.data.time.Week(52, year9);
        long long11 = week10.getLastMillisecond();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1637449200000L + "'", long3 == 1637449200000L);
        org.junit.Assert.assertNotNull(year4);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sun Dec 20 00:00:00 CET 2020");
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Sun Dec 20 00:00:00 CET 2020");
        org.junit.Assert.assertNotNull(regularTimePeriod8);
        org.junit.Assert.assertNotNull(year9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1640473199999L + "'", long11 == 1640473199999L);
    }

    @Test
    public void test2119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2119");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        long long7 = week2.getFirstMillisecond();
        java.lang.String str8 = week2.toString();
        int int9 = week2.getWeek();
        java.lang.Class<?> wildcardClass10 = week2.getClass();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-60506355600000L) + "'", long7 == (-60506355600000L));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Week 35, 52" + "'", str8, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test2120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2120");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date3 = week2.getStart();
        org.jfree.data.time.Week week4 = new org.jfree.data.time.Week(date3);
        long long5 = week4.getLastMillisecond();
        int int6 = week4.getYearValue();
        java.lang.Class<?> wildcardClass7 = week4.getClass();
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-59100800400001L) + "'", long5 == (-59100800400001L));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 97 + "'", int6 == 97);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test2121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2121");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        int int10 = week2.getYearValue();
        long long11 = week2.getLastMillisecond();
        long long12 = week2.getSerialIndex();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod13 = week2.next();
        long long14 = week2.getFirstMillisecond();
        int int15 = week2.getWeek();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 52 + "'", int10 == 52);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-60505750800001L) + "'", long11 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 2791L + "'", long12 == 2791L);
        org.junit.Assert.assertNotNull(regularTimePeriod13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-60506355600000L) + "'", long14 == (-60506355600000L));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 35 + "'", int15 == 35);
    }

    @Test
    public void test2122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2122");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        long long5 = week2.getLastMillisecond();
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod9 = week8.next();
        java.lang.Class<?> wildcardClass10 = week8.getClass();
        java.lang.Class class11 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass10);
        int int12 = week2.compareTo((java.lang.Object) wildcardClass10);
        long long13 = week2.getSerialIndex();
        int int15 = week2.compareTo((java.lang.Object) 0.0d);
        java.util.Date date16 = week2.getEnd();
        org.jfree.data.time.Week week19 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date20 = week19.getStart();
        org.jfree.data.time.Week week23 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod24 = week23.next();
        int int25 = week23.getYearValue();
        java.util.TimeZone timeZone26 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int27 = week23.compareTo((java.lang.Object) timeZone26);
        org.jfree.data.time.Week week28 = new org.jfree.data.time.Week(date20, timeZone26);
        java.util.Locale locale29 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Week week30 = new org.jfree.data.time.Week(date16, timeZone26, locale29);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'locale' argument.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-60505750800001L) + "'", long5 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod9);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNotNull(class11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 2791L + "'", long13 == 2791L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 52 + "'", int25 == 52);
        org.junit.Assert.assertNotNull(timeZone26);
// flaky:         org.junit.Assert.assertEquals(timeZone26.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
    }

    @Test
    public void test2123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2123");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((-1924), (int) (byte) 1);
        java.util.Calendar calendar3 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long4 = week2.getFirstMillisecond(calendar3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test2124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2124");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '4', (int) ' ');
        java.util.Date date3 = week2.getStart();
        long long4 = week2.getLastMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.next();
        int int6 = week2.getWeek();
        org.jfree.data.time.Week week9 = new org.jfree.data.time.Week(35, 0);
        long long10 = week9.getSerialIndex();
        boolean boolean11 = week2.equals((java.lang.Object) long10);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod12 = week2.previous();
        long long13 = regularTimePeriod12.getMiddleMillisecond();
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Dec 21 00:00:00 CET 32");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-61126275600001L) + "'", long4 == (-61126275600001L));
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 52 + "'", int6 == 52);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 35L + "'", long10 == 35L);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(regularTimePeriod12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-61127182800001L) + "'", long13 == (-61127182800001L));
    }

    @Test
    public void test2125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2125");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(3, (int) (byte) 10);
        java.lang.Object obj3 = null;
        int int4 = week2.compareTo(obj3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
    }

    @Test
    public void test2126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2126");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date3 = week2.getStart();
        org.jfree.data.time.Week week4 = new org.jfree.data.time.Week(date3);
        long long5 = week4.getSerialIndex();
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str9 = week8.toString();
        long long10 = week8.getSerialIndex();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod11 = week8.next();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod12 = week8.previous();
        java.lang.Class<?> wildcardClass13 = week8.getClass();
        java.lang.Class class14 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass13);
        boolean boolean15 = week4.equals((java.lang.Object) wildcardClass13);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod16 = week4.previous();
        int int17 = week4.getYearValue();
        java.util.Calendar calendar18 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long19 = week4.getMiddleMillisecond(calendar18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 5150L + "'", long5 == 5150L);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Week 35, 52" + "'", str9, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 2791L + "'", long10 == 2791L);
        org.junit.Assert.assertNotNull(regularTimePeriod11);
        org.junit.Assert.assertNotNull(regularTimePeriod12);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(class14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(regularTimePeriod16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 97 + "'", int17 == 97);
    }

    @Test
    public void test2127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2127");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        java.lang.String str7 = week2.toString();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod8 = week2.previous();
        java.lang.String str9 = week2.toString();
        long long10 = week2.getFirstMillisecond();
        org.jfree.data.time.Week week13 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod14 = week13.previous();
        int int15 = week13.getYearValue();
        java.util.Date date16 = week13.getEnd();
        boolean boolean17 = week2.equals((java.lang.Object) date16);
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Week 35, 52" + "'", str7, "Week 35, 52");
        org.junit.Assert.assertNotNull(regularTimePeriod8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Week 35, 52" + "'", str9, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-60506355600000L) + "'", long10 == (-60506355600000L));
        org.junit.Assert.assertNotNull(regularTimePeriod14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 52 + "'", int15 == 52);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test2128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2128");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        int int11 = week2.getYearValue();
        long long12 = week2.getLastMillisecond();
        int int13 = week2.getWeek();
        int int14 = week2.getYearValue();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod15 = week2.next();
        long long16 = week2.getSerialIndex();
        java.util.Date date17 = week2.getEnd();
        org.jfree.data.time.Week week20 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod21 = week20.next();
        int int22 = week20.getYearValue();
        java.util.TimeZone timeZone23 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int24 = week20.compareTo((java.lang.Object) timeZone23);
        int int25 = week20.getYearValue();
        long long26 = week20.getMiddleMillisecond();
        java.lang.Class<?> wildcardClass27 = week20.getClass();
        org.jfree.data.time.Week week30 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date31 = week30.getStart();
        org.jfree.data.time.Week week34 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod35 = week34.next();
        int int36 = week34.getYearValue();
        java.util.TimeZone timeZone37 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int38 = week34.compareTo((java.lang.Object) timeZone37);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod39 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass27, date31, timeZone37);
        org.jfree.data.time.Week week42 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date43 = week42.getStart();
        java.util.Date date44 = week42.getEnd();
        java.util.Date date45 = week42.getStart();
        org.jfree.data.time.Week week48 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date49 = week48.getStart();
        java.util.Date date50 = week48.getEnd();
        java.util.Date date51 = week48.getStart();
        org.jfree.data.time.Week week54 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date55 = week54.getStart();
        org.jfree.data.time.Week week58 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod59 = week58.next();
        int int60 = week58.getYearValue();
        java.util.TimeZone timeZone61 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int62 = week58.compareTo((java.lang.Object) timeZone61);
        org.jfree.data.time.Week week63 = new org.jfree.data.time.Week(date55, timeZone61);
        org.jfree.data.time.Week week64 = new org.jfree.data.time.Week(date51, timeZone61);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod65 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass27, date45, timeZone61);
        org.jfree.data.time.Week week66 = new org.jfree.data.time.Week(date17, timeZone61);
        long long67 = week66.getFirstMillisecond();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-60505750800001L) + "'", long12 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 52 + "'", int14 == 52);
        org.junit.Assert.assertNotNull(regularTimePeriod15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 2791L + "'", long16 == 2791L);
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 52 + "'", int22 == 52);
        org.junit.Assert.assertNotNull(timeZone23);
// flaky:         org.junit.Assert.assertEquals(timeZone23.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 52 + "'", int25 == 52);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + (-60506053200001L) + "'", long26 == (-60506053200001L));
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 52 + "'", int36 == 52);
        org.junit.Assert.assertNotNull(timeZone37);
// flaky:         org.junit.Assert.assertEquals(timeZone37.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod39);
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(date51);
        org.junit.Assert.assertEquals(date51.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 52 + "'", int60 == 52);
        org.junit.Assert.assertNotNull(timeZone61);
// flaky:         org.junit.Assert.assertEquals(timeZone61.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod65);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + (-60506355600000L) + "'", long67 == (-60506355600000L));
    }

    @Test
    public void test2129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2129");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        int int11 = week2.getYearValue();
        long long12 = week2.getLastMillisecond();
        int int13 = week2.getWeek();
        int int14 = week2.getYearValue();
        long long15 = week2.getSerialIndex();
        java.util.Date date16 = week2.getEnd();
        org.jfree.data.time.Week week17 = new org.jfree.data.time.Week(date16);
        org.jfree.data.time.Week week18 = new org.jfree.data.time.Week(date16);
        org.jfree.data.time.Week week19 = new org.jfree.data.time.Week(date16);
        long long20 = week19.getFirstMillisecond();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-60505750800001L) + "'", long12 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 52 + "'", int14 == 52);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 2791L + "'", long15 == 2791L);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-60506355600000L) + "'", long20 == (-60506355600000L));
    }

    @Test
    public void test2130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2130");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        java.lang.Class<?> wildcardClass4 = week2.getClass();
        java.lang.Class class5 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass4);
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date9 = week8.getStart();
        java.lang.Class class10 = null;
        java.util.Date date11 = null;
        java.util.TimeZone timeZone12 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod13 = org.jfree.data.time.RegularTimePeriod.createInstance(class10, date11, timeZone12);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod14 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass4, date9, timeZone12);
        org.jfree.data.time.Week week17 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date18 = week17.getStart();
        org.jfree.data.time.Week week19 = new org.jfree.data.time.Week(date18);
        java.util.TimeZone timeZone20 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod21 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass4, date18, timeZone20);
        org.jfree.data.time.Week week22 = new org.jfree.data.time.Week(date18);
        java.util.Date date23 = week22.getStart();
        int int24 = week22.getYearValue();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(class5);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone12);
// flaky:         org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod13);
        org.junit.Assert.assertNotNull(regularTimePeriod14);
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone20);
// flaky:         org.junit.Assert.assertEquals(timeZone20.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNotNull(regularTimePeriod21);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 97 + "'", int24 == 97);
    }

    @Test
    public void test2131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2131");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) (short) 1, (int) (short) -1);
    }

    @Test
    public void test2132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2132");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date3 = week2.getStart();
        org.jfree.data.time.Week week4 = new org.jfree.data.time.Week(date3);
        int int5 = week4.getWeek();
        java.lang.Class<?> wildcardClass6 = week4.getClass();
        java.lang.Class class7 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass6);
        org.jfree.data.time.Week week10 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date11 = week10.getStart();
        org.jfree.data.time.Week week14 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod15 = week14.next();
        int int16 = week14.getYearValue();
        java.util.TimeZone timeZone17 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int18 = week14.compareTo((java.lang.Object) timeZone17);
        org.jfree.data.time.Week week19 = new org.jfree.data.time.Week(date11, timeZone17);
        java.util.TimeZone timeZone20 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.Week week21 = new org.jfree.data.time.Week(date11, timeZone20);
        org.jfree.data.time.Week week24 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod25 = week24.next();
        int int26 = week24.getYearValue();
        java.util.TimeZone timeZone27 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int28 = week24.compareTo((java.lang.Object) timeZone27);
        int int29 = week24.getYearValue();
        int int31 = week24.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod32 = week24.previous();
        int int33 = week24.getYearValue();
        long long34 = week24.getLastMillisecond();
        org.jfree.data.time.Week week37 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod38 = week37.next();
        java.lang.Class<?> wildcardClass39 = week37.getClass();
        java.lang.Class class40 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass39);
        boolean boolean41 = week24.equals((java.lang.Object) wildcardClass39);
        org.jfree.data.time.Week week44 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod45 = week44.next();
        java.lang.Class<?> wildcardClass46 = week44.getClass();
        java.lang.Class class47 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass46);
        java.lang.Class class48 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass46);
        org.jfree.data.time.Week week51 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod52 = week51.next();
        int int53 = week51.getYearValue();
        java.util.TimeZone timeZone54 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int55 = week51.compareTo((java.lang.Object) timeZone54);
        int int56 = week51.getYearValue();
        int int58 = week51.compareTo((java.lang.Object) 9);
        java.util.Date date59 = week51.getStart();
        org.jfree.data.time.Week week60 = new org.jfree.data.time.Week(date59);
        org.jfree.data.time.Week week63 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod64 = week63.next();
        int int65 = week63.getYearValue();
        java.util.TimeZone timeZone66 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int67 = week63.compareTo((java.lang.Object) timeZone66);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod68 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass46, date59, timeZone66);
        org.jfree.data.time.Week week69 = new org.jfree.data.time.Week(date59);
        org.jfree.data.time.Week week72 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod73 = week72.next();
        int int74 = week72.getYearValue();
        java.util.TimeZone timeZone75 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int76 = week72.compareTo((java.lang.Object) timeZone75);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod77 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass39, date59, timeZone75);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod78 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass6, date11, timeZone75);
        org.jfree.data.time.Week week79 = new org.jfree.data.time.Week(date11);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 9 + "'", int5 == 9);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(class7);
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 52 + "'", int16 == 52);
        org.junit.Assert.assertNotNull(timeZone17);
// flaky:         org.junit.Assert.assertEquals(timeZone17.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(timeZone20);
// flaky:         org.junit.Assert.assertEquals(timeZone20.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNotNull(regularTimePeriod25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 52 + "'", int26 == 52);
        org.junit.Assert.assertNotNull(timeZone27);
// flaky:         org.junit.Assert.assertEquals(timeZone27.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 52 + "'", int29 == 52);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 52 + "'", int33 == 52);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + (-60505750800001L) + "'", long34 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod38);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(class40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(regularTimePeriod45);
        org.junit.Assert.assertNotNull(wildcardClass46);
        org.junit.Assert.assertNotNull(class47);
        org.junit.Assert.assertNotNull(class48);
        org.junit.Assert.assertNotNull(regularTimePeriod52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 52 + "'", int53 == 52);
        org.junit.Assert.assertNotNull(timeZone54);
// flaky:         org.junit.Assert.assertEquals(timeZone54.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 52 + "'", int56 == 52);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertNotNull(date59);
        org.junit.Assert.assertEquals(date59.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 52 + "'", int65 == 52);
        org.junit.Assert.assertNotNull(timeZone66);
// flaky:         org.junit.Assert.assertEquals(timeZone66.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod68);
        org.junit.Assert.assertNotNull(regularTimePeriod73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 52 + "'", int74 == 52);
        org.junit.Assert.assertNotNull(timeZone75);
// flaky:         org.junit.Assert.assertEquals(timeZone75.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod77);
        org.junit.Assert.assertNotNull(regularTimePeriod78);
    }

    @Test
    public void test2133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2133");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((-1), 52);
    }

    @Test
    public void test2134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2134");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getWeek();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod8 = week2.next();
        boolean boolean10 = week2.equals((java.lang.Object) 3);
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Year year11 = week2.getYear();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Year constructor: year (52) outside valid range.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 35 + "'", int7 == 35);
        org.junit.Assert.assertNotNull(regularTimePeriod8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test2135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2135");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date3 = week2.getStart();
        org.jfree.data.time.Week week4 = new org.jfree.data.time.Week(date3);
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week(100, 10);
        java.util.Date date8 = week7.getEnd();
        org.jfree.data.time.Week week11 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date12 = week11.getStart();
        java.util.Date date13 = week11.getEnd();
        int int14 = week11.getYearValue();
        long long15 = week11.getLastMillisecond();
        java.lang.Class<?> wildcardClass16 = week11.getClass();
        java.util.Date date17 = null;
        org.jfree.data.time.Week week20 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.util.Date date21 = week20.getStart();
        int int22 = week20.getYearValue();
        java.util.Date date23 = week20.getEnd();
        org.jfree.data.time.Week week26 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod27 = week26.next();
        java.lang.Class<?> wildcardClass28 = week26.getClass();
        java.lang.Class class29 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass28);
        java.lang.Class class30 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass28);
        org.jfree.data.time.Week week33 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod34 = week33.next();
        int int35 = week33.getYearValue();
        java.util.TimeZone timeZone36 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int37 = week33.compareTo((java.lang.Object) timeZone36);
        int int38 = week33.getYearValue();
        int int40 = week33.compareTo((java.lang.Object) 9);
        java.util.Date date41 = week33.getStart();
        org.jfree.data.time.Week week42 = new org.jfree.data.time.Week(date41);
        org.jfree.data.time.Week week45 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod46 = week45.next();
        int int47 = week45.getYearValue();
        java.util.TimeZone timeZone48 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int49 = week45.compareTo((java.lang.Object) timeZone48);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod50 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass28, date41, timeZone48);
        org.jfree.data.time.Week week53 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod54 = week53.previous();
        int int55 = week53.getYearValue();
        java.util.Date date56 = week53.getStart();
        java.util.TimeZone timeZone57 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.Week week58 = new org.jfree.data.time.Week(date56, timeZone57);
        org.jfree.data.time.Week week59 = new org.jfree.data.time.Week(date41, timeZone57);
        org.jfree.data.time.Week week60 = new org.jfree.data.time.Week(date23, timeZone57);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod61 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass16, date17, timeZone57);
        org.jfree.data.time.Week week62 = new org.jfree.data.time.Week(date8, timeZone57);
        org.jfree.data.time.Week week63 = new org.jfree.data.time.Week(date3, timeZone57);
        int int64 = week63.getYearValue();
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Sat Nov 28 23:59:59 CET 11");
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 97 + "'", int14 == 97);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-59100800400001L) + "'", long15 == (-59100800400001L));
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 52 + "'", int22 == 52);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod27);
        org.junit.Assert.assertNotNull(wildcardClass28);
        org.junit.Assert.assertNotNull(class29);
        org.junit.Assert.assertNotNull(class30);
        org.junit.Assert.assertNotNull(regularTimePeriod34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 52 + "'", int35 == 52);
        org.junit.Assert.assertNotNull(timeZone36);
// flaky:         org.junit.Assert.assertEquals(timeZone36.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 52 + "'", int38 == 52);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 52 + "'", int47 == 52);
        org.junit.Assert.assertNotNull(timeZone48);
// flaky:         org.junit.Assert.assertEquals(timeZone48.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod50);
        org.junit.Assert.assertNotNull(regularTimePeriod54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 52 + "'", int55 == 52);
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(timeZone57);
// flaky:         org.junit.Assert.assertEquals(timeZone57.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod61);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 97 + "'", int64 == 97);
    }

    @Test
    public void test2136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2136");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '4', (int) ' ');
        java.util.Date date3 = week2.getStart();
        long long4 = week2.getLastMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.next();
        int int6 = week2.getWeek();
        org.jfree.data.time.Week week9 = new org.jfree.data.time.Week(35, 0);
        long long10 = week9.getSerialIndex();
        boolean boolean11 = week2.equals((java.lang.Object) long10);
        java.util.Date date12 = week2.getEnd();
        org.jfree.data.time.Week week15 = new org.jfree.data.time.Week(10, 0);
        org.jfree.data.time.Week week18 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod19 = week18.next();
        int int20 = week18.getYearValue();
        java.util.TimeZone timeZone21 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int22 = week18.compareTo((java.lang.Object) timeZone21);
        int int23 = week18.getYearValue();
        int int25 = week18.compareTo((java.lang.Object) 9);
        int int26 = week18.getYearValue();
        long long27 = week18.getLastMillisecond();
        int int28 = week18.getYearValue();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod29 = week18.previous();
        java.util.Date date30 = week18.getEnd();
        boolean boolean31 = week15.equals((java.lang.Object) week18);
        boolean boolean32 = week2.equals((java.lang.Object) week15);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Dec 21 00:00:00 CET 32");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-61126275600001L) + "'", long4 == (-61126275600001L));
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 52 + "'", int6 == 52);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 35L + "'", long10 == 35L);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Sat Dec 27 23:59:59 CET 32");
        org.junit.Assert.assertNotNull(regularTimePeriod19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 52 + "'", int20 == 52);
        org.junit.Assert.assertNotNull(timeZone21);
// flaky:         org.junit.Assert.assertEquals(timeZone21.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 52 + "'", int23 == 52);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 52 + "'", int26 == 52);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + (-60505750800001L) + "'", long27 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 52 + "'", int28 == 52);
        org.junit.Assert.assertNotNull(regularTimePeriod29);
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test2137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2137");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        int int11 = week2.getYearValue();
        long long12 = week2.getLastMillisecond();
        org.jfree.data.time.Week week15 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod16 = week15.next();
        java.lang.Class<?> wildcardClass17 = week15.getClass();
        java.lang.Class class18 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass17);
        boolean boolean19 = week2.equals((java.lang.Object) wildcardClass17);
        int int20 = week2.getYearValue();
        org.jfree.data.time.Week week23 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod24 = week23.next();
        int int25 = week23.getYearValue();
        java.util.TimeZone timeZone26 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int27 = week23.compareTo((java.lang.Object) timeZone26);
        int int28 = week23.getYearValue();
        int int30 = week23.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod31 = week23.previous();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod32 = week23.next();
        org.jfree.data.time.Week week35 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod36 = week35.next();
        java.lang.Class<?> wildcardClass37 = week35.getClass();
        java.lang.Class class38 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass37);
        java.lang.Class class39 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass37);
        boolean boolean40 = week23.equals((java.lang.Object) wildcardClass37);
        long long41 = week23.getSerialIndex();
        java.util.Date date42 = week23.getEnd();
        boolean boolean43 = week2.equals((java.lang.Object) date42);
        long long44 = week2.getMiddleMillisecond();
        int int45 = week2.getYearValue();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod46 = week2.previous();
        org.jfree.data.time.Week week49 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date50 = week49.getStart();
        java.util.Date date51 = week49.getEnd();
        int int52 = week49.getYearValue();
        java.util.Date date53 = week49.getStart();
        int int54 = week49.getWeek();
        java.lang.Class<?> wildcardClass55 = week49.getClass();
        // The following exception was thrown during execution in test generation
        try {
            int int56 = week2.compareTo((java.lang.Object) week49);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Year constructor: year (97) outside valid range.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-60505750800001L) + "'", long12 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(class18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 52 + "'", int20 == 52);
        org.junit.Assert.assertNotNull(regularTimePeriod24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 52 + "'", int25 == 52);
        org.junit.Assert.assertNotNull(timeZone26);
// flaky:         org.junit.Assert.assertEquals(timeZone26.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 52 + "'", int28 == 52);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod31);
        org.junit.Assert.assertNotNull(regularTimePeriod32);
        org.junit.Assert.assertNotNull(regularTimePeriod36);
        org.junit.Assert.assertNotNull(wildcardClass37);
        org.junit.Assert.assertNotNull(class38);
        org.junit.Assert.assertNotNull(class39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 2791L + "'", long41 == 2791L);
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + (-60506053200001L) + "'", long44 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 52 + "'", int45 == 52);
        org.junit.Assert.assertNotNull(regularTimePeriod46);
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date51);
        org.junit.Assert.assertEquals(date51.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 97 + "'", int52 == 97);
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 9 + "'", int54 == 9);
        org.junit.Assert.assertNotNull(wildcardClass55);
    }

    @Test
    public void test2138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2138");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        long long4 = week2.getMiddleMillisecond();
        boolean boolean6 = week2.equals((java.lang.Object) 11);
        org.jfree.data.time.Week week9 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week9.next();
        int int11 = week9.getYearValue();
        java.util.TimeZone timeZone12 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int13 = week9.compareTo((java.lang.Object) timeZone12);
        int int14 = week9.getWeek();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod15 = week9.next();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod16 = week9.previous();
        boolean boolean17 = week2.equals((java.lang.Object) regularTimePeriod16);
        long long18 = week2.getFirstMillisecond();
        java.lang.Class<?> wildcardClass19 = week2.getClass();
        java.lang.Class class20 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass19);
        java.lang.Class class21 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass19);
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertNotNull(timeZone12);
// flaky:         org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 35 + "'", int14 == 35);
        org.junit.Assert.assertNotNull(regularTimePeriod15);
        org.junit.Assert.assertNotNull(regularTimePeriod16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-60506355600000L) + "'", long18 == (-60506355600000L));
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(class20);
        org.junit.Assert.assertNotNull(class21);
    }

    @Test
    public void test2139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2139");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.next();
        java.util.Date date6 = week2.getEnd();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week(date6);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod8 = week7.next();
        int int9 = week7.getWeek();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
    }

    @Test
    public void test2140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2140");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(53, (int) ' ');
    }

    @Test
    public void test2141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2141");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        int int10 = week2.getYearValue();
        int int11 = week2.getYearValue();
        int int12 = week2.getYearValue();
        org.jfree.data.time.Week week15 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str16 = week15.toString();
        long long17 = week15.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod18 = week15.next();
        java.util.Date date19 = week15.getEnd();
        org.jfree.data.time.Week week20 = new org.jfree.data.time.Week(date19);
        long long21 = week20.getLastMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod22 = week20.next();
        boolean boolean23 = week2.equals((java.lang.Object) regularTimePeriod22);
        org.jfree.data.time.Week week25 = new org.jfree.data.time.Week();
        long long26 = week25.getFirstMillisecond();
        org.jfree.data.time.Year year27 = week25.getYear();
        org.jfree.data.time.Week week28 = new org.jfree.data.time.Week(0, year27);
        java.util.Date date29 = year27.getStart();
        int int30 = week2.compareTo((java.lang.Object) year27);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod31 = week2.next();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod32 = week2.previous();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 52 + "'", int10 == 52);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Week 35, 52" + "'", str16, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-60506053200001L) + "'", long17 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-60505750800001L) + "'", long21 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1637449200000L + "'", long26 == 1637449200000L);
        org.junit.Assert.assertNotNull(year27);
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Fri Jan 01 00:00:00 CET 2021");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(regularTimePeriod31);
        org.junit.Assert.assertNotNull(regularTimePeriod32);
    }

    @Test
    public void test2142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2142");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.util.Date date3 = week2.getStart();
        org.jfree.data.time.Week week4 = new org.jfree.data.time.Week(date3);
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str8 = week7.toString();
        long long9 = week7.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week7.next();
        java.util.Date date11 = regularTimePeriod10.getEnd();
        boolean boolean12 = week4.equals((java.lang.Object) date11);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Week 35, 52" + "'", str8, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-60506053200001L) + "'", long9 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Sat Sep 02 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test2143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2143");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(0, 4);
        java.util.Date date3 = week2.getEnd();
        java.util.Date date4 = week2.getEnd();
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sat Dec 29 23:59:59 CET 3");
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Sat Dec 29 23:59:59 CET 3");
    }

    @Test
    public void test2144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2144");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.previous();
        int int4 = week2.getYearValue();
        java.util.Date date5 = week2.getEnd();
        long long6 = week2.getMiddleMillisecond();
        org.jfree.data.time.Week week9 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week9.next();
        int int11 = week9.getYearValue();
        java.util.TimeZone timeZone12 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int13 = week9.compareTo((java.lang.Object) timeZone12);
        int int14 = week9.getYearValue();
        int int16 = week9.compareTo((java.lang.Object) 9);
        java.util.Date date17 = week9.getStart();
        boolean boolean18 = week2.equals((java.lang.Object) date17);
        java.util.Calendar calendar19 = null;
        // The following exception was thrown during execution in test generation
        try {
            week2.peg(calendar19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-60506053200001L) + "'", long6 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertNotNull(timeZone12);
// flaky:         org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 52 + "'", int14 == 52);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test2145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2145");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week();
        long long3 = week2.getFirstMillisecond();
        org.jfree.data.time.Year year4 = week2.getYear();
        org.jfree.data.time.Week week5 = new org.jfree.data.time.Week(0, year4);
        org.jfree.data.time.Year year6 = week5.getYear();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week((int) (short) 0, year6);
        java.util.Date date8 = week7.getStart();
        long long9 = week7.getLastMillisecond();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1637449200000L + "'", long3 == 1637449200000L);
        org.junit.Assert.assertNotNull(year4);
        org.junit.Assert.assertNotNull(year6);
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Sun Dec 20 00:00:00 CET 2020");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1609023599999L + "'", long9 == 1609023599999L);
    }

    @Test
    public void test2146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2146");
        org.jfree.data.time.Week week1 = new org.jfree.data.time.Week();
        long long2 = week1.getFirstMillisecond();
        org.jfree.data.time.Year year3 = week1.getYear();
        org.jfree.data.time.Week week4 = new org.jfree.data.time.Week((int) (byte) 100, year3);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week4.next();
        java.util.Date date6 = week4.getEnd();
        int int7 = week4.getYearValue();
        java.util.Calendar calendar8 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long9 = week4.getFirstMillisecond(calendar8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1637449200000L + "'", long2 == 1637449200000L);
        org.junit.Assert.assertNotNull(year3);
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Nov 26 23:59:59 CET 2022");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2021 + "'", int7 == 2021);
    }

    @Test
    public void test2147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2147");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(10, (int) (short) 10);
        long long3 = week2.getMiddleMillisecond();
        long long4 = week2.getSerialIndex();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod8 = week7.next();
        int int9 = week7.getYearValue();
        java.util.TimeZone timeZone10 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int11 = week7.compareTo((java.lang.Object) timeZone10);
        int int12 = week7.getYearValue();
        int int14 = week7.compareTo((java.lang.Object) 9);
        java.util.Date date15 = week7.getStart();
        org.jfree.data.time.Week week18 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod19 = week18.next();
        java.lang.Class<?> wildcardClass20 = week18.getClass();
        java.lang.Class class21 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass20);
        java.lang.Class class22 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass20);
        org.jfree.data.time.Week week25 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod26 = week25.next();
        int int27 = week25.getYearValue();
        java.util.TimeZone timeZone28 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int29 = week25.compareTo((java.lang.Object) timeZone28);
        int int30 = week25.getYearValue();
        int int32 = week25.compareTo((java.lang.Object) 9);
        java.util.Date date33 = week25.getStart();
        org.jfree.data.time.Week week34 = new org.jfree.data.time.Week(date33);
        org.jfree.data.time.Week week37 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod38 = week37.next();
        int int39 = week37.getYearValue();
        java.util.TimeZone timeZone40 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int41 = week37.compareTo((java.lang.Object) timeZone40);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod42 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass20, date33, timeZone40);
        org.jfree.data.time.Week week45 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod46 = week45.previous();
        int int47 = week45.getYearValue();
        java.util.Date date48 = week45.getStart();
        java.util.TimeZone timeZone49 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.Week week50 = new org.jfree.data.time.Week(date48, timeZone49);
        org.jfree.data.time.Week week51 = new org.jfree.data.time.Week(date33, timeZone49);
        org.jfree.data.time.Week week52 = new org.jfree.data.time.Week(date15, timeZone49);
        int int53 = week2.compareTo((java.lang.Object) date15);
        java.lang.Object obj54 = null;
        int int55 = week2.compareTo(obj54);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-61846290000001L) + "'", long3 == (-61846290000001L));
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 540L + "'", long4 == 540L);
        org.junit.Assert.assertNotNull(regularTimePeriod8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 52 + "'", int9 == 52);
        org.junit.Assert.assertNotNull(timeZone10);
// flaky:         org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertNotNull(class21);
        org.junit.Assert.assertNotNull(class22);
        org.junit.Assert.assertNotNull(regularTimePeriod26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 52 + "'", int27 == 52);
        org.junit.Assert.assertNotNull(timeZone28);
// flaky:         org.junit.Assert.assertEquals(timeZone28.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 52 + "'", int30 == 52);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 52 + "'", int39 == 52);
        org.junit.Assert.assertNotNull(timeZone40);
// flaky:         org.junit.Assert.assertEquals(timeZone40.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod42);
        org.junit.Assert.assertNotNull(regularTimePeriod46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 52 + "'", int47 == 52);
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(timeZone49);
// flaky:         org.junit.Assert.assertEquals(timeZone49.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
    }

    @Test
    public void test2148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2148");
        org.jfree.data.time.Week week3 = new org.jfree.data.time.Week();
        long long4 = week3.getFirstMillisecond();
        org.jfree.data.time.Year year5 = week3.getYear();
        org.jfree.data.time.Week week6 = new org.jfree.data.time.Week(0, year5);
        org.jfree.data.time.Year year7 = week6.getYear();
        long long8 = year7.getMiddleMillisecond();
        org.jfree.data.time.Week week9 = new org.jfree.data.time.Week(32, year7);
        org.jfree.data.time.Week week10 = new org.jfree.data.time.Week((int) (byte) 100, year7);
        java.lang.String str11 = week10.toString();
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1637449200000L + "'", long4 == 1637449200000L);
        org.junit.Assert.assertNotNull(year5);
        org.junit.Assert.assertNotNull(year7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1625223599999L + "'", long8 == 1625223599999L);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Week 100, 2021" + "'", str11, "Week 100, 2021");
    }

    @Test
    public void test2149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2149");
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Week week1 = org.jfree.data.time.Week.parseWeek("Week 100, 2021");
            org.junit.Assert.fail("Expected exception of type org.jfree.data.time.TimePeriodFormatException; message: Can't evaluate the week.");
        } catch (org.jfree.data.time.TimePeriodFormatException e) {
            // Expected exception.
        }
    }

    @Test
    public void test2150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2150");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '4', (-5));
    }

    @Test
    public void test2151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2151");
        org.jfree.data.time.Week week5 = new org.jfree.data.time.Week();
        long long6 = week5.getFirstMillisecond();
        org.jfree.data.time.Year year7 = week5.getYear();
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week(0, year7);
        org.jfree.data.time.Week week9 = new org.jfree.data.time.Week(11, year7);
        org.jfree.data.time.Week week10 = new org.jfree.data.time.Week(3, year7);
        org.jfree.data.time.Week week11 = new org.jfree.data.time.Week((int) (short) 100, year7);
        org.jfree.data.time.Week week12 = new org.jfree.data.time.Week(35, year7);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1637449200000L + "'", long6 == 1637449200000L);
        org.junit.Assert.assertNotNull(year7);
    }

    @Test
    public void test2152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2152");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(7, (int) (short) 10);
        long long3 = week2.getSerialIndex();
        long long4 = week2.getSerialIndex();
        java.util.Calendar calendar5 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long6 = week2.getLastMillisecond(calendar5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 537L + "'", long3 == 537L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 537L + "'", long4 == 537L);
    }

    @Test
    public void test2153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2153");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) (byte) 1, (-1));
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        java.util.Date date4 = regularTimePeriod3.getEnd();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date8 = week7.getStart();
        org.jfree.data.time.Week week9 = new org.jfree.data.time.Week(date8);
        long long10 = week9.getLastMillisecond();
        java.util.Date date11 = week9.getStart();
        org.jfree.data.time.Week week14 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod15 = week14.next();
        java.lang.Class<?> wildcardClass16 = week14.getClass();
        java.lang.Class class17 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass16);
        java.lang.Class class18 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass16);
        org.jfree.data.time.Week week21 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod22 = week21.next();
        int int23 = week21.getYearValue();
        java.util.TimeZone timeZone24 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int25 = week21.compareTo((java.lang.Object) timeZone24);
        int int26 = week21.getYearValue();
        int int28 = week21.compareTo((java.lang.Object) 9);
        java.util.Date date29 = week21.getStart();
        org.jfree.data.time.Week week30 = new org.jfree.data.time.Week(date29);
        org.jfree.data.time.Week week33 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod34 = week33.next();
        int int35 = week33.getYearValue();
        java.util.TimeZone timeZone36 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int37 = week33.compareTo((java.lang.Object) timeZone36);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod38 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass16, date29, timeZone36);
        java.lang.Class class39 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass16);
        org.jfree.data.time.Week week42 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod43 = week42.next();
        int int44 = week42.getYearValue();
        java.util.TimeZone timeZone45 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int46 = week42.compareTo((java.lang.Object) timeZone45);
        int int47 = week42.getYearValue();
        int int49 = week42.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod50 = week42.previous();
        int int51 = week42.getYearValue();
        long long52 = week42.getLastMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod53 = week42.previous();
        int int54 = week42.getWeek();
        long long55 = week42.getSerialIndex();
        java.util.Date date56 = week42.getStart();
        org.jfree.data.time.Week week59 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod60 = week59.next();
        int int61 = week59.getYearValue();
        java.util.TimeZone timeZone62 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int63 = week59.compareTo((java.lang.Object) timeZone62);
        int int64 = week59.getYearValue();
        int int66 = week59.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod67 = week59.previous();
        int int68 = week59.getYearValue();
        long long69 = week59.getLastMillisecond();
        int int70 = week59.getWeek();
        int int71 = week59.getYearValue();
        long long72 = week59.getSerialIndex();
        java.util.Date date73 = week59.getEnd();
        org.jfree.data.time.Week week76 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date77 = week76.getStart();
        java.util.Date date78 = week76.getEnd();
        java.util.Date date79 = week76.getStart();
        org.jfree.data.time.Week week82 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date83 = week82.getStart();
        org.jfree.data.time.Week week86 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod87 = week86.next();
        int int88 = week86.getYearValue();
        java.util.TimeZone timeZone89 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int90 = week86.compareTo((java.lang.Object) timeZone89);
        org.jfree.data.time.Week week91 = new org.jfree.data.time.Week(date83, timeZone89);
        org.jfree.data.time.Week week92 = new org.jfree.data.time.Week(date79, timeZone89);
        org.jfree.data.time.Week week93 = new org.jfree.data.time.Week(date73, timeZone89);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod94 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass16, date56, timeZone89);
        org.jfree.data.time.Week week95 = new org.jfree.data.time.Week(date11, timeZone89);
        org.jfree.data.time.Week week96 = new org.jfree.data.time.Week(date4, timeZone89);
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Sat Jan 11 23:59:59 CET 2");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-59100800400001L) + "'", long10 == (-59100800400001L));
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod15);
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertNotNull(class17);
        org.junit.Assert.assertNotNull(class18);
        org.junit.Assert.assertNotNull(regularTimePeriod22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 52 + "'", int23 == 52);
        org.junit.Assert.assertNotNull(timeZone24);
// flaky:         org.junit.Assert.assertEquals(timeZone24.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 52 + "'", int26 == 52);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 52 + "'", int35 == 52);
        org.junit.Assert.assertNotNull(timeZone36);
// flaky:         org.junit.Assert.assertEquals(timeZone36.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod38);
        org.junit.Assert.assertNotNull(class39);
        org.junit.Assert.assertNotNull(regularTimePeriod43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 52 + "'", int44 == 52);
        org.junit.Assert.assertNotNull(timeZone45);
// flaky:         org.junit.Assert.assertEquals(timeZone45.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 52 + "'", int47 == 52);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 52 + "'", int51 == 52);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + (-60505750800001L) + "'", long52 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 35 + "'", int54 == 35);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 2791L + "'", long55 == 2791L);
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 52 + "'", int61 == 52);
        org.junit.Assert.assertNotNull(timeZone62);
// flaky:         org.junit.Assert.assertEquals(timeZone62.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 52 + "'", int64 == 52);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 52 + "'", int68 == 52);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + (-60505750800001L) + "'", long69 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 35 + "'", int70 == 35);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 52 + "'", int71 == 52);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 2791L + "'", long72 == 2791L);
        org.junit.Assert.assertNotNull(date73);
        org.junit.Assert.assertEquals(date73.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date77);
        org.junit.Assert.assertEquals(date77.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date78);
        org.junit.Assert.assertEquals(date78.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(date79);
        org.junit.Assert.assertEquals(date79.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date83);
        org.junit.Assert.assertEquals(date83.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod87);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 52 + "'", int88 == 52);
        org.junit.Assert.assertNotNull(timeZone89);
// flaky:         org.junit.Assert.assertEquals(timeZone89.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 1 + "'", int90 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod94);
    }

    @Test
    public void test2154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2154");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getWeek();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod8 = week2.next();
        long long9 = week2.getSerialIndex();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod11 = week2.previous();
        long long12 = week2.getFirstMillisecond();
        int int13 = week2.getWeek();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 35 + "'", int7 == 35);
        org.junit.Assert.assertNotNull(regularTimePeriod8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 2791L + "'", long9 == 2791L);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertNotNull(regularTimePeriod11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-60506355600000L) + "'", long12 == (-60506355600000L));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
    }

    @Test
    public void test2155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2155");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        long long5 = week2.getLastMillisecond();
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod9 = week8.next();
        java.lang.Class<?> wildcardClass10 = week8.getClass();
        java.lang.Class class11 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass10);
        int int12 = week2.compareTo((java.lang.Object) wildcardClass10);
        long long13 = week2.getMiddleMillisecond();
        java.util.Date date14 = week2.getEnd();
        int int15 = week2.getWeek();
        long long16 = week2.getLastMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod17 = week2.next();
        int int18 = week2.getYearValue();
        long long19 = week2.getFirstMillisecond();
        org.jfree.data.time.Week week22 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.util.Date date23 = week22.getStart();
        int int24 = week22.getYearValue();
        java.util.Date date25 = week22.getEnd();
        org.jfree.data.time.Week week28 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod29 = week28.next();
        java.lang.Class<?> wildcardClass30 = week28.getClass();
        java.lang.Class class31 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass30);
        java.lang.Class class32 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass30);
        org.jfree.data.time.Week week35 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod36 = week35.next();
        int int37 = week35.getYearValue();
        java.util.TimeZone timeZone38 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int39 = week35.compareTo((java.lang.Object) timeZone38);
        int int40 = week35.getYearValue();
        int int42 = week35.compareTo((java.lang.Object) 9);
        java.util.Date date43 = week35.getStart();
        org.jfree.data.time.Week week44 = new org.jfree.data.time.Week(date43);
        org.jfree.data.time.Week week47 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod48 = week47.next();
        int int49 = week47.getYearValue();
        java.util.TimeZone timeZone50 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int51 = week47.compareTo((java.lang.Object) timeZone50);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod52 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass30, date43, timeZone50);
        org.jfree.data.time.Week week55 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod56 = week55.previous();
        int int57 = week55.getYearValue();
        java.util.Date date58 = week55.getStart();
        java.util.TimeZone timeZone59 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.Week week60 = new org.jfree.data.time.Week(date58, timeZone59);
        org.jfree.data.time.Week week61 = new org.jfree.data.time.Week(date43, timeZone59);
        org.jfree.data.time.Week week62 = new org.jfree.data.time.Week(date25, timeZone59);
        java.lang.String str63 = week62.toString();
        boolean boolean64 = week2.equals((java.lang.Object) week62);
        java.util.Calendar calendar65 = null;
        // The following exception was thrown during execution in test generation
        try {
            week62.peg(calendar65);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-60505750800001L) + "'", long5 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod9);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNotNull(class11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-60506053200001L) + "'", long13 == (-60506053200001L));
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 35 + "'", int15 == 35);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-60505750800001L) + "'", long16 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 52 + "'", int18 == 52);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-60506355600000L) + "'", long19 == (-60506355600000L));
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 52 + "'", int24 == 52);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod29);
        org.junit.Assert.assertNotNull(wildcardClass30);
        org.junit.Assert.assertNotNull(class31);
        org.junit.Assert.assertNotNull(class32);
        org.junit.Assert.assertNotNull(regularTimePeriod36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 52 + "'", int37 == 52);
        org.junit.Assert.assertNotNull(timeZone38);
// flaky:         org.junit.Assert.assertEquals(timeZone38.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 52 + "'", int40 == 52);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 52 + "'", int49 == 52);
        org.junit.Assert.assertNotNull(timeZone50);
// flaky:         org.junit.Assert.assertEquals(timeZone50.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod52);
        org.junit.Assert.assertNotNull(regularTimePeriod56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 52 + "'", int57 == 52);
        org.junit.Assert.assertNotNull(date58);
        org.junit.Assert.assertEquals(date58.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(timeZone59);
// flaky:         org.junit.Assert.assertEquals(timeZone59.getDisplayName(), "Central European Time");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "Week 35, 52" + "'", str63, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
    }

    @Test
    public void test2156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2156");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        long long5 = week2.getLastMillisecond();
        long long6 = week2.getFirstMillisecond();
        long long7 = week2.getFirstMillisecond();
        java.util.Calendar calendar8 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long9 = week2.getLastMillisecond(calendar8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-60505750800001L) + "'", long5 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-60506355600000L) + "'", long6 == (-60506355600000L));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-60506355600000L) + "'", long7 == (-60506355600000L));
    }

    @Test
    public void test2157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2157");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        java.lang.Class<?> wildcardClass4 = week2.getClass();
        java.lang.Class class5 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass4);
        java.lang.Class class6 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass4);
        org.jfree.data.time.Week week9 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week9.next();
        int int11 = week9.getYearValue();
        java.util.TimeZone timeZone12 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int13 = week9.compareTo((java.lang.Object) timeZone12);
        int int14 = week9.getYearValue();
        int int16 = week9.compareTo((java.lang.Object) 9);
        java.util.Date date17 = week9.getStart();
        org.jfree.data.time.Week week18 = new org.jfree.data.time.Week(date17);
        org.jfree.data.time.Week week21 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod22 = week21.next();
        int int23 = week21.getYearValue();
        java.util.TimeZone timeZone24 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int25 = week21.compareTo((java.lang.Object) timeZone24);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod26 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass4, date17, timeZone24);
        java.util.Date date27 = regularTimePeriod26.getEnd();
        org.jfree.data.time.Week week28 = new org.jfree.data.time.Week(date27);
        java.lang.Class<?> wildcardClass29 = week28.getClass();
        java.lang.Class class30 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass29);
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(class5);
        org.junit.Assert.assertNotNull(class6);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertNotNull(timeZone12);
// flaky:         org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 52 + "'", int14 == 52);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 52 + "'", int23 == 52);
        org.junit.Assert.assertNotNull(timeZone24);
// flaky:         org.junit.Assert.assertEquals(timeZone24.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod26);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(class30);
    }

    @Test
    public void test2158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2158");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) (short) 10, 3);
        int int3 = week2.getYearValue();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 3 + "'", int3 == 3);
    }

    @Test
    public void test2159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2159");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getWeek();
        java.lang.Class<?> wildcardClass8 = week2.getClass();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 35 + "'", int7 == 35);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test2160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2160");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        long long5 = week2.getLastMillisecond();
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod9 = week8.next();
        java.lang.Class<?> wildcardClass10 = week8.getClass();
        java.lang.Class class11 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass10);
        int int12 = week2.compareTo((java.lang.Object) wildcardClass10);
        long long13 = week2.getMiddleMillisecond();
        java.util.Date date14 = week2.getEnd();
        int int15 = week2.getWeek();
        long long16 = week2.getLastMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod17 = week2.next();
        long long18 = week2.getFirstMillisecond();
        long long19 = week2.getFirstMillisecond();
        java.lang.Object obj20 = null;
        boolean boolean21 = week2.equals(obj20);
        long long22 = week2.getLastMillisecond();
        int int23 = week2.getYearValue();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-60505750800001L) + "'", long5 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod9);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNotNull(class11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-60506053200001L) + "'", long13 == (-60506053200001L));
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 35 + "'", int15 == 35);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-60505750800001L) + "'", long16 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-60506355600000L) + "'", long18 == (-60506355600000L));
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-60506355600000L) + "'", long19 == (-60506355600000L));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-60505750800001L) + "'", long22 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 52 + "'", int23 == 52);
    }

    @Test
    public void test2161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2161");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        java.lang.Class<?> wildcardClass4 = week2.getClass();
        java.lang.Class class5 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass4);
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date9 = week8.getStart();
        java.lang.Class class10 = null;
        java.util.Date date11 = null;
        java.util.TimeZone timeZone12 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod13 = org.jfree.data.time.RegularTimePeriod.createInstance(class10, date11, timeZone12);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod14 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass4, date9, timeZone12);
        org.jfree.data.time.Week week17 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str18 = week17.toString();
        long long19 = week17.getMiddleMillisecond();
        long long20 = week17.getLastMillisecond();
        org.jfree.data.time.Week week23 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod24 = week23.next();
        java.lang.Class<?> wildcardClass25 = week23.getClass();
        java.lang.Class class26 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass25);
        int int27 = week17.compareTo((java.lang.Object) wildcardClass25);
        java.lang.Class class28 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass25);
        java.lang.Class class29 = org.jfree.data.time.RegularTimePeriod.downsize(class28);
        org.jfree.data.time.Week week31 = new org.jfree.data.time.Week();
        long long32 = week31.getFirstMillisecond();
        org.jfree.data.time.Year year33 = week31.getYear();
        org.jfree.data.time.Week week34 = new org.jfree.data.time.Week(0, year33);
        java.util.Date date35 = week34.getStart();
        org.jfree.data.time.Week week38 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date39 = week38.getStart();
        java.util.Date date40 = week38.getEnd();
        int int41 = week38.getYearValue();
        long long42 = week38.getLastMillisecond();
        java.lang.Class<?> wildcardClass43 = week38.getClass();
        java.util.Date date44 = null;
        org.jfree.data.time.Week week47 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.util.Date date48 = week47.getStart();
        int int49 = week47.getYearValue();
        java.util.Date date50 = week47.getEnd();
        org.jfree.data.time.Week week53 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod54 = week53.next();
        java.lang.Class<?> wildcardClass55 = week53.getClass();
        java.lang.Class class56 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass55);
        java.lang.Class class57 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass55);
        org.jfree.data.time.Week week60 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod61 = week60.next();
        int int62 = week60.getYearValue();
        java.util.TimeZone timeZone63 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int64 = week60.compareTo((java.lang.Object) timeZone63);
        int int65 = week60.getYearValue();
        int int67 = week60.compareTo((java.lang.Object) 9);
        java.util.Date date68 = week60.getStart();
        org.jfree.data.time.Week week69 = new org.jfree.data.time.Week(date68);
        org.jfree.data.time.Week week72 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod73 = week72.next();
        int int74 = week72.getYearValue();
        java.util.TimeZone timeZone75 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int76 = week72.compareTo((java.lang.Object) timeZone75);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod77 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass55, date68, timeZone75);
        org.jfree.data.time.Week week80 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod81 = week80.previous();
        int int82 = week80.getYearValue();
        java.util.Date date83 = week80.getStart();
        java.util.TimeZone timeZone84 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.Week week85 = new org.jfree.data.time.Week(date83, timeZone84);
        org.jfree.data.time.Week week86 = new org.jfree.data.time.Week(date68, timeZone84);
        org.jfree.data.time.Week week87 = new org.jfree.data.time.Week(date50, timeZone84);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod88 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass43, date44, timeZone84);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod89 = org.jfree.data.time.RegularTimePeriod.createInstance(class29, date35, timeZone84);
        java.util.Locale locale90 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Week week91 = new org.jfree.data.time.Week(date9, timeZone84, locale90);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'locale' argument.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(class5);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone12);
// flaky:         org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod13);
        org.junit.Assert.assertNotNull(regularTimePeriod14);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Week 35, 52" + "'", str18, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-60506053200001L) + "'", long19 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-60505750800001L) + "'", long20 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod24);
        org.junit.Assert.assertNotNull(wildcardClass25);
        org.junit.Assert.assertNotNull(class26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(class28);
        org.junit.Assert.assertNotNull(class29);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 1637449200000L + "'", long32 == 1637449200000L);
        org.junit.Assert.assertNotNull(year33);
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Sun Dec 20 00:00:00 CET 2020");
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 97 + "'", int41 == 97);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + (-59100800400001L) + "'", long42 == (-59100800400001L));
        org.junit.Assert.assertNotNull(wildcardClass43);
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 52 + "'", int49 == 52);
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod54);
        org.junit.Assert.assertNotNull(wildcardClass55);
        org.junit.Assert.assertNotNull(class56);
        org.junit.Assert.assertNotNull(class57);
        org.junit.Assert.assertNotNull(regularTimePeriod61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 52 + "'", int62 == 52);
        org.junit.Assert.assertNotNull(timeZone63);
// flaky:         org.junit.Assert.assertEquals(timeZone63.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 52 + "'", int65 == 52);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertNotNull(date68);
        org.junit.Assert.assertEquals(date68.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 52 + "'", int74 == 52);
        org.junit.Assert.assertNotNull(timeZone75);
// flaky:         org.junit.Assert.assertEquals(timeZone75.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod77);
        org.junit.Assert.assertNotNull(regularTimePeriod81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 52 + "'", int82 == 52);
        org.junit.Assert.assertNotNull(date83);
        org.junit.Assert.assertEquals(date83.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(timeZone84);
// flaky:         org.junit.Assert.assertEquals(timeZone84.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod88);
        org.junit.Assert.assertNotNull(regularTimePeriod89);
    }

    @Test
    public void test2162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2162");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week();
        long long3 = week2.getFirstMillisecond();
        org.jfree.data.time.Year year4 = week2.getYear();
        org.jfree.data.time.Week week5 = new org.jfree.data.time.Week(52, year4);
        java.util.Date date6 = year4.getStart();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week(100, year4);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod8 = week7.previous();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1637449200000L + "'", long3 == 1637449200000L);
        org.junit.Assert.assertNotNull(year4);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Fri Jan 01 00:00:00 CET 2021");
        org.junit.Assert.assertNotNull(regularTimePeriod8);
    }

    @Test
    public void test2163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2163");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) (short) 0, 100);
    }

    @Test
    public void test2164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2164");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod11 = week2.next();
        java.util.Date date12 = week2.getStart();
        org.jfree.data.time.Week week13 = new org.jfree.data.time.Week();
        long long14 = week13.getFirstMillisecond();
        org.jfree.data.time.Year year15 = week13.getYear();
        int int16 = week13.getWeek();
        int int17 = week13.getWeek();
        int int18 = week2.compareTo((java.lang.Object) week13);
        long long19 = week2.getFirstMillisecond();
        java.util.Date date20 = week2.getStart();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertNotNull(regularTimePeriod11);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1637449200000L + "'", long14 == 1637449200000L);
        org.junit.Assert.assertNotNull(year15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 48 + "'", int16 == 48);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 48 + "'", int17 == 48);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1969) + "'", int18 == (-1969));
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-60506355600000L) + "'", long19 == (-60506355600000L));
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Sun Aug 20 00:00:00 CET 52");
    }

    @Test
    public void test2165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2165");
        org.jfree.data.time.Week week6 = new org.jfree.data.time.Week();
        long long7 = week6.getFirstMillisecond();
        org.jfree.data.time.Year year8 = week6.getYear();
        org.jfree.data.time.Week week9 = new org.jfree.data.time.Week(0, year8);
        org.jfree.data.time.Year year10 = week9.getYear();
        org.jfree.data.time.Week week11 = new org.jfree.data.time.Week(97, year10);
        org.jfree.data.time.Week week12 = new org.jfree.data.time.Week(0, year10);
        org.jfree.data.time.Week week13 = new org.jfree.data.time.Week((int) '#', year10);
        org.jfree.data.time.Week week14 = new org.jfree.data.time.Week(100, year10);
        org.jfree.data.time.Week week15 = new org.jfree.data.time.Week(7, year10);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1637449200000L + "'", long7 == 1637449200000L);
        org.junit.Assert.assertNotNull(year8);
        org.junit.Assert.assertNotNull(year10);
    }

    @Test
    public void test2166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2166");
        org.jfree.data.time.Week week3 = new org.jfree.data.time.Week();
        long long4 = week3.getFirstMillisecond();
        org.jfree.data.time.Year year5 = week3.getYear();
        org.jfree.data.time.Week week6 = new org.jfree.data.time.Week(5, year5);
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week(52, year5);
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week(2, year5);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod9 = week8.next();
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1637449200000L + "'", long4 == 1637449200000L);
        org.junit.Assert.assertNotNull(year5);
        org.junit.Assert.assertNotNull(regularTimePeriod9);
    }

    @Test
    public void test2167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2167");
        org.jfree.data.time.Week week4 = new org.jfree.data.time.Week();
        long long5 = week4.getFirstMillisecond();
        org.jfree.data.time.Year year6 = week4.getYear();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week(52, year6);
        java.util.Date date8 = year6.getStart();
        org.jfree.data.time.Week week9 = new org.jfree.data.time.Week(52, year6);
        org.jfree.data.time.Week week10 = new org.jfree.data.time.Week(97, year6);
        org.jfree.data.time.Week week11 = new org.jfree.data.time.Week((int) (byte) 0, year6);
        int int12 = week11.getYearValue();
        java.util.Calendar calendar13 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long14 = week11.getLastMillisecond(calendar13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1637449200000L + "'", long5 == 1637449200000L);
        org.junit.Assert.assertNotNull(year6);
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Fri Jan 01 00:00:00 CET 2021");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2021 + "'", int12 == 2021);
    }

    @Test
    public void test2168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2168");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(2022, 36);
    }

    @Test
    public void test2169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2169");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date3 = week2.getStart();
        java.util.Date date4 = week2.getEnd();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.previous();
        int int6 = week2.getWeek();
        int int7 = week2.getYearValue();
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 9 + "'", int6 == 9);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 97 + "'", int7 == 97);
    }

    @Test
    public void test2170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2170");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(100, 10);
        java.util.Date date3 = week2.getEnd();
        org.jfree.data.time.Week week6 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date7 = week6.getStart();
        java.util.Date date8 = week6.getEnd();
        int int9 = week6.getYearValue();
        long long10 = week6.getLastMillisecond();
        java.lang.Class<?> wildcardClass11 = week6.getClass();
        java.util.Date date12 = null;
        org.jfree.data.time.Week week15 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.util.Date date16 = week15.getStart();
        int int17 = week15.getYearValue();
        java.util.Date date18 = week15.getEnd();
        org.jfree.data.time.Week week21 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod22 = week21.next();
        java.lang.Class<?> wildcardClass23 = week21.getClass();
        java.lang.Class class24 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass23);
        java.lang.Class class25 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass23);
        org.jfree.data.time.Week week28 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod29 = week28.next();
        int int30 = week28.getYearValue();
        java.util.TimeZone timeZone31 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int32 = week28.compareTo((java.lang.Object) timeZone31);
        int int33 = week28.getYearValue();
        int int35 = week28.compareTo((java.lang.Object) 9);
        java.util.Date date36 = week28.getStart();
        org.jfree.data.time.Week week37 = new org.jfree.data.time.Week(date36);
        org.jfree.data.time.Week week40 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod41 = week40.next();
        int int42 = week40.getYearValue();
        java.util.TimeZone timeZone43 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int44 = week40.compareTo((java.lang.Object) timeZone43);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod45 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass23, date36, timeZone43);
        org.jfree.data.time.Week week48 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod49 = week48.previous();
        int int50 = week48.getYearValue();
        java.util.Date date51 = week48.getStart();
        java.util.TimeZone timeZone52 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.Week week53 = new org.jfree.data.time.Week(date51, timeZone52);
        org.jfree.data.time.Week week54 = new org.jfree.data.time.Week(date36, timeZone52);
        org.jfree.data.time.Week week55 = new org.jfree.data.time.Week(date18, timeZone52);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod56 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass11, date12, timeZone52);
        org.jfree.data.time.Week week57 = new org.jfree.data.time.Week(date3, timeZone52);
        org.jfree.data.time.Week week58 = new org.jfree.data.time.Week(date3);
        org.jfree.data.time.Week week59 = new org.jfree.data.time.Week(date3);
        long long60 = week59.getMiddleMillisecond();
        long long61 = week59.getMiddleMillisecond();
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sat Nov 28 23:59:59 CET 11");
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 97 + "'", int9 == 97);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-59100800400001L) + "'", long10 == (-59100800400001L));
        org.junit.Assert.assertNotNull(wildcardClass11);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 52 + "'", int17 == 52);
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod22);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertNotNull(class24);
        org.junit.Assert.assertNotNull(class25);
        org.junit.Assert.assertNotNull(regularTimePeriod29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 52 + "'", int30 == 52);
        org.junit.Assert.assertNotNull(timeZone31);
// flaky:         org.junit.Assert.assertEquals(timeZone31.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 52 + "'", int33 == 52);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 52 + "'", int42 == 52);
        org.junit.Assert.assertNotNull(timeZone43);
// flaky:         org.junit.Assert.assertEquals(timeZone43.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod45);
        org.junit.Assert.assertNotNull(regularTimePeriod49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 52 + "'", int50 == 52);
        org.junit.Assert.assertNotNull(date51);
        org.junit.Assert.assertEquals(date51.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(timeZone52);
// flaky:         org.junit.Assert.assertEquals(timeZone52.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod56);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + (-61791858000001L) + "'", long60 == (-61791858000001L));
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + (-61791858000001L) + "'", long61 == (-61791858000001L));
    }

    @Test
    public void test2171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2171");
        org.jfree.data.time.Week week3 = new org.jfree.data.time.Week();
        long long4 = week3.getFirstMillisecond();
        org.jfree.data.time.Year year5 = week3.getYear();
        org.jfree.data.time.Week week6 = new org.jfree.data.time.Week(0, year5);
        org.jfree.data.time.Year year7 = week6.getYear();
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week(97, year7);
        org.jfree.data.time.Week week9 = new org.jfree.data.time.Week(0, year7);
        int int10 = week9.getYearValue();
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1637449200000L + "'", long4 == 1637449200000L);
        org.junit.Assert.assertNotNull(year5);
        org.junit.Assert.assertNotNull(year7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2021 + "'", int10 == 2021);
    }

    @Test
    public void test2172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2172");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        long long8 = week2.getFirstMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod9 = week2.previous();
        int int10 = week2.getYearValue();
        java.util.Date date11 = week2.getEnd();
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Year year12 = week2.getYear();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Year constructor: year (52) outside valid range.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-60506355600000L) + "'", long8 == (-60506355600000L));
        org.junit.Assert.assertNotNull(regularTimePeriod9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 52 + "'", int10 == 52);
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Sat Aug 26 23:59:59 CET 52");
    }

    @Test
    public void test2173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2173");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(3, (int) (byte) 10);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        long long4 = week2.getFirstMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.next();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-61850826000000L) + "'", long4 == (-61850826000000L));
        org.junit.Assert.assertNotNull(regularTimePeriod5);
    }

    @Test
    public void test2174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2174");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week();
        long long3 = week2.getFirstMillisecond();
        org.jfree.data.time.Year year4 = week2.getYear();
        org.jfree.data.time.Week week5 = new org.jfree.data.time.Week(52, year4);
        java.util.Date date6 = year4.getStart();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week((-1969), year4);
        int int8 = week7.getYearValue();
        long long9 = week7.getLastMillisecond();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1637449200000L + "'", long3 == 1637449200000L);
        org.junit.Assert.assertNotNull(year4);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Fri Jan 01 00:00:00 CET 2021");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2021 + "'", int8 == 2021);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1656799199999L + "'", long9 == 1656799199999L);
    }

    @Test
    public void test2175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2175");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.previous();
        int int4 = week2.getYearValue();
        long long5 = week2.getSerialIndex();
        java.lang.String str6 = week2.toString();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod7 = week2.next();
        long long8 = week2.getMiddleMillisecond();
        org.jfree.data.time.Week week11 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date12 = week11.getStart();
        java.util.Date date13 = week11.getEnd();
        java.util.Date date14 = week11.getStart();
        org.jfree.data.time.Week week17 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod18 = week17.next();
        int int19 = week17.getYearValue();
        java.util.TimeZone timeZone20 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int21 = week17.compareTo((java.lang.Object) timeZone20);
        int int22 = week17.getYearValue();
        long long23 = week17.getMiddleMillisecond();
        java.lang.Class<?> wildcardClass24 = week17.getClass();
        org.jfree.data.time.Week week27 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date28 = week27.getStart();
        org.jfree.data.time.Week week31 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod32 = week31.next();
        int int33 = week31.getYearValue();
        java.util.TimeZone timeZone34 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int35 = week31.compareTo((java.lang.Object) timeZone34);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod36 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass24, date28, timeZone34);
        org.jfree.data.time.Week week37 = new org.jfree.data.time.Week(date28);
        org.jfree.data.time.Week week40 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod41 = week40.next();
        int int42 = week40.getYearValue();
        java.util.TimeZone timeZone43 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int44 = week40.compareTo((java.lang.Object) timeZone43);
        org.jfree.data.time.Week week45 = new org.jfree.data.time.Week(date28, timeZone43);
        boolean boolean46 = week11.equals((java.lang.Object) week45);
        java.util.Date date47 = week11.getEnd();
        org.jfree.data.time.Week week50 = new org.jfree.data.time.Week((int) (short) 100, (int) (byte) 100);
        int int51 = week50.getWeek();
        java.util.Date date52 = week50.getStart();
        org.jfree.data.time.Week week55 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str56 = week55.toString();
        long long57 = week55.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod58 = week55.next();
        java.util.Date date59 = week55.getEnd();
        org.jfree.data.time.Week week60 = new org.jfree.data.time.Week(date59);
        org.jfree.data.time.Week week63 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date64 = week63.getStart();
        org.jfree.data.time.Week week67 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod68 = week67.next();
        int int69 = week67.getYearValue();
        java.util.TimeZone timeZone70 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int71 = week67.compareTo((java.lang.Object) timeZone70);
        org.jfree.data.time.Week week72 = new org.jfree.data.time.Week(date64, timeZone70);
        org.jfree.data.time.Week week73 = new org.jfree.data.time.Week(date59, timeZone70);
        int int74 = week50.compareTo((java.lang.Object) timeZone70);
        org.jfree.data.time.Week week75 = new org.jfree.data.time.Week(date47, timeZone70);
        int int76 = week2.compareTo((java.lang.Object) date47);
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 2791L + "'", long5 == 2791L);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Week 35, 52" + "'", str6, "Week 35, 52");
        org.junit.Assert.assertNotNull(regularTimePeriod7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-60506053200001L) + "'", long8 == (-60506053200001L));
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 52 + "'", int19 == 52);
        org.junit.Assert.assertNotNull(timeZone20);
// flaky:         org.junit.Assert.assertEquals(timeZone20.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 52 + "'", int22 == 52);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-60506053200001L) + "'", long23 == (-60506053200001L));
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 52 + "'", int33 == 52);
        org.junit.Assert.assertNotNull(timeZone34);
// flaky:         org.junit.Assert.assertEquals(timeZone34.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod36);
        org.junit.Assert.assertNotNull(regularTimePeriod41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 52 + "'", int42 == 52);
        org.junit.Assert.assertNotNull(timeZone43);
// flaky:         org.junit.Assert.assertEquals(timeZone43.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 100 + "'", int51 == 100);
        org.junit.Assert.assertNotNull(date52);
        org.junit.Assert.assertEquals(date52.toString(), "Sun Nov 21 00:00:00 CET 101");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "Week 35, 52" + "'", str56, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + (-60506053200001L) + "'", long57 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod58);
        org.junit.Assert.assertNotNull(date59);
        org.junit.Assert.assertEquals(date59.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date64);
        org.junit.Assert.assertEquals(date64.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 52 + "'", int69 == 52);
        org.junit.Assert.assertNotNull(timeZone70);
// flaky:         org.junit.Assert.assertEquals(timeZone70.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1 + "'", int74 == 1);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
    }

    @Test
    public void test2176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2176");
        org.jfree.data.time.Week week4 = new org.jfree.data.time.Week();
        long long5 = week4.getFirstMillisecond();
        org.jfree.data.time.Year year6 = week4.getYear();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week(0, year6);
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week(11, year6);
        long long9 = week8.getSerialIndex();
        org.jfree.data.time.Year year10 = week8.getYear();
        org.jfree.data.time.Week week11 = new org.jfree.data.time.Week((int) (short) 1, year10);
        org.jfree.data.time.Week week12 = new org.jfree.data.time.Week(11, year10);
        java.lang.Class<?> wildcardClass13 = year10.getClass();
        java.lang.Class class14 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass13);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1637449200000L + "'", long5 == 1637449200000L);
        org.junit.Assert.assertNotNull(year6);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 107124L + "'", long9 == 107124L);
        org.junit.Assert.assertNotNull(year10);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(class14);
    }

    @Test
    public void test2177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2177");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.previous();
        int int4 = week2.getYearValue();
        java.lang.String str5 = week2.toString();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod6 = week2.previous();
        java.util.Date date7 = week2.getEnd();
        org.jfree.data.time.Week week10 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod11 = week10.next();
        int int12 = week10.getYearValue();
        java.util.TimeZone timeZone13 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int14 = week10.compareTo((java.lang.Object) timeZone13);
        int int15 = week10.getYearValue();
        int int17 = week10.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod18 = week10.previous();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod19 = week10.next();
        java.util.Date date20 = week10.getStart();
        java.util.Date date21 = week10.getStart();
        org.jfree.data.time.Week week24 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod25 = week24.next();
        int int26 = week24.getYearValue();
        java.util.TimeZone timeZone27 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int28 = week24.compareTo((java.lang.Object) timeZone27);
        int int29 = week24.getYearValue();
        int int31 = week24.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod32 = week24.previous();
        int int33 = week24.getYearValue();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod34 = week24.next();
        java.lang.Class<?> wildcardClass35 = regularTimePeriod34.getClass();
        org.jfree.data.time.Week week38 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod39 = week38.next();
        java.lang.Class<?> wildcardClass40 = week38.getClass();
        java.lang.Class class41 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass40);
        java.lang.Class class42 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass40);
        org.jfree.data.time.Week week45 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod46 = week45.next();
        int int47 = week45.getYearValue();
        java.util.TimeZone timeZone48 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int49 = week45.compareTo((java.lang.Object) timeZone48);
        int int50 = week45.getYearValue();
        int int52 = week45.compareTo((java.lang.Object) 9);
        java.util.Date date53 = week45.getStart();
        org.jfree.data.time.Week week54 = new org.jfree.data.time.Week(date53);
        org.jfree.data.time.Week week57 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod58 = week57.next();
        int int59 = week57.getYearValue();
        java.util.TimeZone timeZone60 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int61 = week57.compareTo((java.lang.Object) timeZone60);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod62 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass40, date53, timeZone60);
        org.jfree.data.time.Week week65 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str66 = week65.toString();
        long long67 = week65.getMiddleMillisecond();
        long long68 = week65.getLastMillisecond();
        org.jfree.data.time.Week week71 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod72 = week71.next();
        java.lang.Class<?> wildcardClass73 = week71.getClass();
        java.lang.Class class74 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass73);
        int int75 = week65.compareTo((java.lang.Object) wildcardClass73);
        java.lang.Class class76 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass73);
        org.jfree.data.time.Week week79 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod80 = week79.next();
        java.lang.Class<?> wildcardClass81 = week79.getClass();
        java.lang.Class class82 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass81);
        org.jfree.data.time.Week week85 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date86 = week85.getStart();
        java.lang.Class class87 = null;
        java.util.Date date88 = null;
        java.util.TimeZone timeZone89 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod90 = org.jfree.data.time.RegularTimePeriod.createInstance(class87, date88, timeZone89);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod91 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass81, date86, timeZone89);
        java.util.TimeZone timeZone92 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod93 = org.jfree.data.time.RegularTimePeriod.createInstance(class76, date86, timeZone92);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod94 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass35, date53, timeZone92);
        org.jfree.data.time.Week week95 = new org.jfree.data.time.Week(date21, timeZone92);
        org.jfree.data.time.Week week96 = new org.jfree.data.time.Week(date7, timeZone92);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod97 = week96.previous();
        java.util.Calendar calendar98 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long99 = week96.getFirstMillisecond(calendar98);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Week 35, 52" + "'", str5, "Week 35, 52");
        org.junit.Assert.assertNotNull(regularTimePeriod6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
        org.junit.Assert.assertNotNull(timeZone13);
// flaky:         org.junit.Assert.assertEquals(timeZone13.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 52 + "'", int15 == 52);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod18);
        org.junit.Assert.assertNotNull(regularTimePeriod19);
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 52 + "'", int26 == 52);
        org.junit.Assert.assertNotNull(timeZone27);
// flaky:         org.junit.Assert.assertEquals(timeZone27.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 52 + "'", int29 == 52);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 52 + "'", int33 == 52);
        org.junit.Assert.assertNotNull(regularTimePeriod34);
        org.junit.Assert.assertNotNull(wildcardClass35);
        org.junit.Assert.assertNotNull(regularTimePeriod39);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertNotNull(class41);
        org.junit.Assert.assertNotNull(class42);
        org.junit.Assert.assertNotNull(regularTimePeriod46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 52 + "'", int47 == 52);
        org.junit.Assert.assertNotNull(timeZone48);
// flaky:         org.junit.Assert.assertEquals(timeZone48.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 52 + "'", int50 == 52);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 52 + "'", int59 == 52);
        org.junit.Assert.assertNotNull(timeZone60);
// flaky:         org.junit.Assert.assertEquals(timeZone60.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod62);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "Week 35, 52" + "'", str66, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + (-60506053200001L) + "'", long67 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + (-60505750800001L) + "'", long68 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod72);
        org.junit.Assert.assertNotNull(wildcardClass73);
        org.junit.Assert.assertNotNull(class74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
        org.junit.Assert.assertNotNull(class76);
        org.junit.Assert.assertNotNull(regularTimePeriod80);
        org.junit.Assert.assertNotNull(wildcardClass81);
        org.junit.Assert.assertNotNull(class82);
        org.junit.Assert.assertNotNull(date86);
        org.junit.Assert.assertEquals(date86.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone89);
// flaky:         org.junit.Assert.assertEquals(timeZone89.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod90);
        org.junit.Assert.assertNotNull(regularTimePeriod91);
        org.junit.Assert.assertNotNull(timeZone92);
// flaky:         org.junit.Assert.assertEquals(timeZone92.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod93);
        org.junit.Assert.assertNotNull(regularTimePeriod94);
        org.junit.Assert.assertNotNull(regularTimePeriod97);
    }

    @Test
    public void test2178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2178");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        org.jfree.data.time.Week week10 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str11 = week10.toString();
        long long12 = week10.getMiddleMillisecond();
        long long13 = week10.getLastMillisecond();
        org.jfree.data.time.Week week16 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod17 = week16.next();
        java.lang.Class<?> wildcardClass18 = week16.getClass();
        java.lang.Class class19 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass18);
        int int20 = week10.compareTo((java.lang.Object) wildcardClass18);
        boolean boolean21 = week2.equals((java.lang.Object) wildcardClass18);
        long long22 = week2.getSerialIndex();
        int int23 = week2.getYearValue();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Week 35, 52" + "'", str11, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-60506053200001L) + "'", long12 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-60505750800001L) + "'", long13 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod17);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(class19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 2791L + "'", long22 == 2791L);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 52 + "'", int23 == 52);
    }

    @Test
    public void test2179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2179");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '4', (int) ' ');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.previous();
        int int4 = week2.getWeek();
        long long5 = week2.getSerialIndex();
        int int6 = week2.getWeek();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod7 = week2.next();
        java.util.Date date8 = week2.getStart();
        org.jfree.data.time.Week week11 = new org.jfree.data.time.Week(4, (int) (short) 1);
        long long12 = week11.getSerialIndex();
        java.util.Date date13 = week11.getEnd();
        boolean boolean14 = week2.equals((java.lang.Object) week11);
        long long15 = week11.getFirstMillisecond();
        java.util.Date date16 = week11.getStart();
        long long17 = week11.getSerialIndex();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1748L + "'", long5 == 1748L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 52 + "'", int6 == 52);
        org.junit.Assert.assertNotNull(regularTimePeriod7);
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Sun Dec 21 00:00:00 CET 32");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 57L + "'", long12 == 57L);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sat Jan 22 23:59:59 CET 1");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-62134477200000L) + "'", long15 == (-62134477200000L));
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Jan 16 00:00:00 CET 1");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 57L + "'", long17 == 57L);
    }

    @Test
    public void test2180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2180");
        org.jfree.data.time.Week week1 = new org.jfree.data.time.Week();
        long long2 = week1.getFirstMillisecond();
        org.jfree.data.time.Year year3 = week1.getYear();
        org.jfree.data.time.Week week4 = new org.jfree.data.time.Week(0, year3);
        java.util.Date date5 = year3.getStart();
        org.jfree.data.time.Week week6 = new org.jfree.data.time.Week(date5);
        long long7 = week6.getLastMillisecond();
        long long8 = week6.getFirstMillisecond();
        java.util.Date date9 = week6.getEnd();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1637449200000L + "'", long2 == 1637449200000L);
        org.junit.Assert.assertNotNull(year3);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Fri Jan 01 00:00:00 CET 2021");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1609628399999L + "'", long7 == 1609628399999L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1609023600000L + "'", long8 == 1609023600000L);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Sat Jan 02 23:59:59 CET 2021");
    }

    @Test
    public void test2181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2181");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date3 = week2.getStart();
        java.util.Date date4 = week2.getEnd();
        org.jfree.data.time.Week week5 = new org.jfree.data.time.Week(date4);
        java.util.Date date6 = week5.getEnd();
        org.jfree.data.time.Week week9 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week9.next();
        java.lang.Class<?> wildcardClass11 = week9.getClass();
        java.lang.Class class12 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass11);
        java.lang.Class class13 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass11);
        org.jfree.data.time.Week week16 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod17 = week16.next();
        int int18 = week16.getYearValue();
        java.util.TimeZone timeZone19 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int20 = week16.compareTo((java.lang.Object) timeZone19);
        int int21 = week16.getYearValue();
        int int23 = week16.compareTo((java.lang.Object) 9);
        java.util.Date date24 = week16.getStart();
        org.jfree.data.time.Week week25 = new org.jfree.data.time.Week(date24);
        org.jfree.data.time.Week week28 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod29 = week28.next();
        int int30 = week28.getYearValue();
        java.util.TimeZone timeZone31 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int32 = week28.compareTo((java.lang.Object) timeZone31);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod33 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass11, date24, timeZone31);
        org.jfree.data.time.Week week36 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod37 = week36.previous();
        int int38 = week36.getYearValue();
        java.util.Date date39 = week36.getStart();
        java.util.TimeZone timeZone40 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.Week week41 = new org.jfree.data.time.Week(date39, timeZone40);
        org.jfree.data.time.Week week42 = new org.jfree.data.time.Week(date24, timeZone40);
        org.jfree.data.time.Week week43 = new org.jfree.data.time.Week(date6, timeZone40);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertNotNull(wildcardClass11);
        org.junit.Assert.assertNotNull(class12);
        org.junit.Assert.assertNotNull(class13);
        org.junit.Assert.assertNotNull(regularTimePeriod17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 52 + "'", int18 == 52);
        org.junit.Assert.assertNotNull(timeZone19);
// flaky:         org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 52 + "'", int21 == 52);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 52 + "'", int30 == 52);
        org.junit.Assert.assertNotNull(timeZone31);
// flaky:         org.junit.Assert.assertEquals(timeZone31.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod33);
        org.junit.Assert.assertNotNull(regularTimePeriod37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 52 + "'", int38 == 52);
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(timeZone40);
// flaky:         org.junit.Assert.assertEquals(timeZone40.getDisplayName(), "Central European Time");
    }

    @Test
    public void test2182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2182");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(7, (int) (short) 10);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        long long4 = week2.getLastMillisecond();
        java.util.Calendar calendar5 = null;
        // The following exception was thrown during execution in test generation
        try {
            week2.peg(calendar5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-61847802000001L) + "'", long4 == (-61847802000001L));
    }

    @Test
    public void test2183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2183");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        java.lang.String str7 = week2.toString();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod8 = week2.previous();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod9 = week2.previous();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Week 35, 52" + "'", str7, "Week 35, 52");
        org.junit.Assert.assertNotNull(regularTimePeriod8);
        org.junit.Assert.assertNotNull(regularTimePeriod9);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
    }

    @Test
    public void test2184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2184");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        int int10 = week2.getYearValue();
        long long11 = week2.getLastMillisecond();
        int int12 = week2.getWeek();
        java.util.Date date13 = week2.getEnd();
        org.jfree.data.time.Week week14 = new org.jfree.data.time.Week(date13);
        org.jfree.data.time.Week week15 = new org.jfree.data.time.Week(date13);
        long long16 = week15.getFirstMillisecond();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 52 + "'", int10 == 52);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-60505750800001L) + "'", long11 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 35 + "'", int12 == 35);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-60506355600000L) + "'", long16 == (-60506355600000L));
    }

    @Test
    public void test2185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2185");
        org.jfree.data.time.Week week3 = new org.jfree.data.time.Week();
        long long4 = week3.getFirstMillisecond();
        org.jfree.data.time.Year year5 = week3.getYear();
        org.jfree.data.time.Week week6 = new org.jfree.data.time.Week((int) (byte) 100, year5);
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week(12, year5);
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week((int) '#', year5);
        long long9 = week8.getSerialIndex();
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1637449200000L + "'", long4 == 1637449200000L);
        org.junit.Assert.assertNotNull(year5);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 107148L + "'", long9 == 107148L);
    }

    @Test
    public void test2186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2186");
        org.jfree.data.time.Week week4 = new org.jfree.data.time.Week();
        long long5 = week4.getFirstMillisecond();
        org.jfree.data.time.Year year6 = week4.getYear();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week(0, year6);
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week(11, year6);
        long long9 = week8.getSerialIndex();
        org.jfree.data.time.Year year10 = week8.getYear();
        org.jfree.data.time.Week week11 = new org.jfree.data.time.Week((int) (short) 1, year10);
        org.jfree.data.time.Week week12 = new org.jfree.data.time.Week(11, year10);
        java.util.Calendar calendar13 = null;
        // The following exception was thrown during execution in test generation
        try {
            week12.peg(calendar13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1637449200000L + "'", long5 == 1637449200000L);
        org.junit.Assert.assertNotNull(year6);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 107124L + "'", long9 == 107124L);
        org.junit.Assert.assertNotNull(year10);
    }

    @Test
    public void test2187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2187");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        int int10 = week2.getYearValue();
        long long11 = week2.getLastMillisecond();
        int int12 = week2.getWeek();
        long long13 = week2.getFirstMillisecond();
        long long14 = week2.getFirstMillisecond();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 52 + "'", int10 == 52);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-60505750800001L) + "'", long11 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 35 + "'", int12 == 35);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-60506355600000L) + "'", long13 == (-60506355600000L));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-60506355600000L) + "'", long14 == (-60506355600000L));
    }

    @Test
    public void test2188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2188");
        org.jfree.data.time.Week week3 = new org.jfree.data.time.Week();
        long long4 = week3.getFirstMillisecond();
        org.jfree.data.time.Year year5 = week3.getYear();
        org.jfree.data.time.Week week6 = new org.jfree.data.time.Week((int) (byte) 100, year5);
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week(12, year5);
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week(2021, year5);
        int int9 = week8.getYearValue();
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1637449200000L + "'", long4 == 1637449200000L);
        org.junit.Assert.assertNotNull(year5);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2021 + "'", int9 == 2021);
    }

    @Test
    public void test2189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2189");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) (short) 100, 7);
        long long3 = week2.getFirstMillisecond();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-61887114000000L) + "'", long3 == (-61887114000000L));
    }

    @Test
    public void test2190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2190");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date3 = week2.getStart();
        java.util.Date date4 = week2.getEnd();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date8 = week7.getStart();
        java.util.Date date9 = week7.getEnd();
        org.jfree.data.time.Week week12 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod13 = week12.next();
        java.lang.Class<?> wildcardClass14 = week12.getClass();
        java.lang.Class class15 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass14);
        org.jfree.data.time.Week week18 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date19 = week18.getStart();
        java.lang.Class class20 = null;
        java.util.Date date21 = null;
        java.util.TimeZone timeZone22 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod23 = org.jfree.data.time.RegularTimePeriod.createInstance(class20, date21, timeZone22);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod24 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass14, date19, timeZone22);
        org.jfree.data.time.Week week25 = new org.jfree.data.time.Week(date9, timeZone22);
        org.jfree.data.time.Week week26 = new org.jfree.data.time.Week(date4, timeZone22);
        org.jfree.data.time.Week week27 = new org.jfree.data.time.Week(date4);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod13);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(class15);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone22);
// flaky:         org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod23);
        org.junit.Assert.assertNotNull(regularTimePeriod24);
    }

    @Test
    public void test2191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2191");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.next();
        java.util.Date date6 = week2.getEnd();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week(date6);
        int int8 = week7.getWeek();
        boolean boolean10 = week7.equals((java.lang.Object) 1637449200000L);
        org.jfree.data.time.Week week13 = new org.jfree.data.time.Week(9, (int) 'a');
        org.jfree.data.time.Week week16 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod17 = week16.next();
        long long18 = week16.getMiddleMillisecond();
        java.lang.String str19 = week16.toString();
        boolean boolean20 = week13.equals((java.lang.Object) week16);
        int int21 = week16.getWeek();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod22 = week16.next();
        boolean boolean23 = week7.equals((java.lang.Object) week16);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod24 = week16.next();
        long long25 = regularTimePeriod24.getMiddleMillisecond();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 35 + "'", int8 == 35);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(regularTimePeriod17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-60506053200001L) + "'", long18 == (-60506053200001L));
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Week 35, 52" + "'", str19, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 35 + "'", int21 == 35);
        org.junit.Assert.assertNotNull(regularTimePeriod22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(regularTimePeriod24);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-60505448400001L) + "'", long25 == (-60505448400001L));
    }

    @Test
    public void test2192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2192");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.next();
        java.util.Date date6 = week2.getEnd();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week(date6);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod8 = week7.next();
        org.jfree.data.time.Week week11 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str12 = week11.toString();
        long long13 = week11.getSerialIndex();
        boolean boolean14 = week7.equals((java.lang.Object) long13);
        java.lang.String str15 = week7.toString();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod16 = week7.next();
        long long17 = week7.getFirstMillisecond();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod8);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Week 35, 52" + "'", str12, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 2791L + "'", long13 == 2791L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Week 35, 52" + "'", str15, "Week 35, 52");
        org.junit.Assert.assertNotNull(regularTimePeriod16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-60506355600000L) + "'", long17 == (-60506355600000L));
    }

    @Test
    public void test2193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2193");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(100, 10);
        java.util.Date date3 = week2.getEnd();
        org.jfree.data.time.Week week6 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date7 = week6.getStart();
        java.util.Date date8 = week6.getEnd();
        int int9 = week6.getYearValue();
        long long10 = week6.getLastMillisecond();
        java.lang.Class<?> wildcardClass11 = week6.getClass();
        java.util.Date date12 = null;
        org.jfree.data.time.Week week15 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.util.Date date16 = week15.getStart();
        int int17 = week15.getYearValue();
        java.util.Date date18 = week15.getEnd();
        org.jfree.data.time.Week week21 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod22 = week21.next();
        java.lang.Class<?> wildcardClass23 = week21.getClass();
        java.lang.Class class24 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass23);
        java.lang.Class class25 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass23);
        org.jfree.data.time.Week week28 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod29 = week28.next();
        int int30 = week28.getYearValue();
        java.util.TimeZone timeZone31 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int32 = week28.compareTo((java.lang.Object) timeZone31);
        int int33 = week28.getYearValue();
        int int35 = week28.compareTo((java.lang.Object) 9);
        java.util.Date date36 = week28.getStart();
        org.jfree.data.time.Week week37 = new org.jfree.data.time.Week(date36);
        org.jfree.data.time.Week week40 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod41 = week40.next();
        int int42 = week40.getYearValue();
        java.util.TimeZone timeZone43 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int44 = week40.compareTo((java.lang.Object) timeZone43);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod45 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass23, date36, timeZone43);
        org.jfree.data.time.Week week48 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod49 = week48.previous();
        int int50 = week48.getYearValue();
        java.util.Date date51 = week48.getStart();
        java.util.TimeZone timeZone52 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.Week week53 = new org.jfree.data.time.Week(date51, timeZone52);
        org.jfree.data.time.Week week54 = new org.jfree.data.time.Week(date36, timeZone52);
        org.jfree.data.time.Week week55 = new org.jfree.data.time.Week(date18, timeZone52);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod56 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass11, date12, timeZone52);
        org.jfree.data.time.Week week57 = new org.jfree.data.time.Week(date3, timeZone52);
        int int58 = week57.getWeek();
        org.jfree.data.time.Week week61 = new org.jfree.data.time.Week(10, 48);
        // The following exception was thrown during execution in test generation
        try {
            int int62 = week57.compareTo((java.lang.Object) week61);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Year constructor: year (48) outside valid range.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sat Nov 28 23:59:59 CET 11");
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 97 + "'", int9 == 97);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-59100800400001L) + "'", long10 == (-59100800400001L));
        org.junit.Assert.assertNotNull(wildcardClass11);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 52 + "'", int17 == 52);
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod22);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertNotNull(class24);
        org.junit.Assert.assertNotNull(class25);
        org.junit.Assert.assertNotNull(regularTimePeriod29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 52 + "'", int30 == 52);
        org.junit.Assert.assertNotNull(timeZone31);
// flaky:         org.junit.Assert.assertEquals(timeZone31.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 52 + "'", int33 == 52);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 52 + "'", int42 == 52);
        org.junit.Assert.assertNotNull(timeZone43);
// flaky:         org.junit.Assert.assertEquals(timeZone43.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod45);
        org.junit.Assert.assertNotNull(regularTimePeriod49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 52 + "'", int50 == 52);
        org.junit.Assert.assertNotNull(date51);
        org.junit.Assert.assertEquals(date51.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(timeZone52);
// flaky:         org.junit.Assert.assertEquals(timeZone52.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod56);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 48 + "'", int58 == 48);
    }

    @Test
    public void test2194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2194");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date3 = week2.getStart();
        org.jfree.data.time.Week week6 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod7 = week6.next();
        int int8 = week6.getYearValue();
        java.util.TimeZone timeZone9 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int10 = week6.compareTo((java.lang.Object) timeZone9);
        org.jfree.data.time.Week week11 = new org.jfree.data.time.Week(date3, timeZone9);
        java.util.Date date12 = week11.getEnd();
        long long13 = week11.getSerialIndex();
        java.util.Calendar calendar14 = null;
        // The following exception was thrown during execution in test generation
        try {
            week11.peg(calendar14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 52 + "'", int8 == 52);
        org.junit.Assert.assertNotNull(timeZone9);
// flaky:         org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 5150L + "'", long13 == 5150L);
    }

    @Test
    public void test2195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2195");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '4', (int) ' ');
        long long3 = week2.getSerialIndex();
        long long4 = week2.getMiddleMillisecond();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str8 = week7.toString();
        long long9 = week7.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week7.next();
        java.lang.String str11 = week7.toString();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod12 = week7.previous();
        java.lang.Class<?> wildcardClass13 = regularTimePeriod12.getClass();
        boolean boolean14 = week2.equals((java.lang.Object) wildcardClass13);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod15 = week2.previous();
        java.util.Calendar calendar16 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long17 = week2.getLastMillisecond(calendar16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1748L + "'", long3 == 1748L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-61126578000001L) + "'", long4 == (-61126578000001L));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Week 35, 52" + "'", str8, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-60506053200001L) + "'", long9 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Week 35, 52" + "'", str11, "Week 35, 52");
        org.junit.Assert.assertNotNull(regularTimePeriod12);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(regularTimePeriod15);
    }

    @Test
    public void test2196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2196");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(10, (int) '#');
    }

    @Test
    public void test2197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2197");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        long long8 = week2.getFirstMillisecond();
        boolean boolean10 = week2.equals((java.lang.Object) 12);
        org.jfree.data.time.Week week12 = new org.jfree.data.time.Week();
        long long13 = week12.getFirstMillisecond();
        org.jfree.data.time.Year year14 = week12.getYear();
        org.jfree.data.time.Week week15 = new org.jfree.data.time.Week(0, year14);
        java.util.Date date16 = year14.getStart();
        org.jfree.data.time.Week week17 = new org.jfree.data.time.Week(date16);
        long long18 = week17.getLastMillisecond();
        boolean boolean19 = week2.equals((java.lang.Object) long18);
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-60506355600000L) + "'", long8 == (-60506355600000L));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1637449200000L + "'", long13 == 1637449200000L);
        org.junit.Assert.assertNotNull(year14);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Fri Jan 01 00:00:00 CET 2021");
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1609628399999L + "'", long18 == 1609628399999L);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test2198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2198");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(35, 0);
        long long3 = week2.getSerialIndex();
        java.util.Date date4 = week2.getEnd();
        org.jfree.data.time.Week week5 = new org.jfree.data.time.Week(date4);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 35L + "'", long3 == 35L);
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Sat Aug 28 23:59:59 CET 1");
    }

    @Test
    public void test2199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2199");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getSerialIndex();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.next();
        java.util.Date date6 = regularTimePeriod5.getEnd();
        org.jfree.data.time.Week week9 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date10 = week9.getStart();
        org.jfree.data.time.Week week13 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod14 = week13.next();
        int int15 = week13.getYearValue();
        java.util.TimeZone timeZone16 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int17 = week13.compareTo((java.lang.Object) timeZone16);
        org.jfree.data.time.Week week18 = new org.jfree.data.time.Week(date10, timeZone16);
        org.jfree.data.time.Week week19 = new org.jfree.data.time.Week(date6, timeZone16);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod20 = week19.next();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod21 = week19.previous();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod22 = week19.next();
        int int23 = week19.getWeek();
        java.util.Date date24 = week19.getStart();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod25 = week19.next();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 2791L + "'", long4 == 2791L);
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Sep 02 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 52 + "'", int15 == 52);
        org.junit.Assert.assertNotNull(timeZone16);
// flaky:         org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod20);
        org.junit.Assert.assertNotNull(regularTimePeriod21);
        org.junit.Assert.assertNotNull(regularTimePeriod22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 36 + "'", int23 == 36);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Sun Aug 27 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod25);
    }

    @Test
    public void test2200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2200");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.lang.Object obj5 = null;
        boolean boolean6 = week2.equals(obj5);
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test2201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2201");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date3 = week2.getStart();
        java.util.Date date4 = week2.getEnd();
        java.util.Date date5 = week2.getStart();
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod9 = week8.next();
        int int10 = week8.getYearValue();
        java.util.TimeZone timeZone11 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int12 = week8.compareTo((java.lang.Object) timeZone11);
        int int13 = week8.getYearValue();
        long long14 = week8.getMiddleMillisecond();
        java.lang.Class<?> wildcardClass15 = week8.getClass();
        org.jfree.data.time.Week week18 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date19 = week18.getStart();
        org.jfree.data.time.Week week22 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod23 = week22.next();
        int int24 = week22.getYearValue();
        java.util.TimeZone timeZone25 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int26 = week22.compareTo((java.lang.Object) timeZone25);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod27 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass15, date19, timeZone25);
        org.jfree.data.time.Week week28 = new org.jfree.data.time.Week(date19);
        org.jfree.data.time.Week week31 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod32 = week31.next();
        int int33 = week31.getYearValue();
        java.util.TimeZone timeZone34 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int35 = week31.compareTo((java.lang.Object) timeZone34);
        org.jfree.data.time.Week week36 = new org.jfree.data.time.Week(date19, timeZone34);
        boolean boolean37 = week2.equals((java.lang.Object) week36);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod38 = week2.previous();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod39 = week2.previous();
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 52 + "'", int10 == 52);
        org.junit.Assert.assertNotNull(timeZone11);
// flaky:         org.junit.Assert.assertEquals(timeZone11.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 52 + "'", int13 == 52);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-60506053200001L) + "'", long14 == (-60506053200001L));
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 52 + "'", int24 == 52);
        org.junit.Assert.assertNotNull(timeZone25);
// flaky:         org.junit.Assert.assertEquals(timeZone25.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod27);
        org.junit.Assert.assertNotNull(regularTimePeriod32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 52 + "'", int33 == 52);
        org.junit.Assert.assertNotNull(timeZone34);
// flaky:         org.junit.Assert.assertEquals(timeZone34.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(regularTimePeriod38);
        org.junit.Assert.assertNotNull(regularTimePeriod39);
    }

    @Test
    public void test2202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2202");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.next();
        java.util.Date date6 = week2.getEnd();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week(date6);
        int int8 = week7.getWeek();
        boolean boolean10 = week7.equals((java.lang.Object) 1637449200000L);
        org.jfree.data.time.Week week13 = new org.jfree.data.time.Week(9, (int) 'a');
        org.jfree.data.time.Week week16 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod17 = week16.next();
        long long18 = week16.getMiddleMillisecond();
        java.lang.String str19 = week16.toString();
        boolean boolean20 = week13.equals((java.lang.Object) week16);
        int int21 = week16.getWeek();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod22 = week16.next();
        boolean boolean23 = week7.equals((java.lang.Object) week16);
        long long24 = week16.getLastMillisecond();
        java.lang.String str25 = week16.toString();
        org.jfree.data.time.Week week28 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str29 = week28.toString();
        long long30 = week28.getMiddleMillisecond();
        long long31 = week28.getLastMillisecond();
        org.jfree.data.time.Week week34 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod35 = week34.next();
        java.lang.Class<?> wildcardClass36 = week34.getClass();
        java.lang.Class class37 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass36);
        int int38 = week28.compareTo((java.lang.Object) wildcardClass36);
        java.lang.Class class39 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass36);
        java.lang.Class class40 = org.jfree.data.time.RegularTimePeriod.downsize(class39);
        java.lang.Class class41 = org.jfree.data.time.RegularTimePeriod.downsize(class39);
        java.lang.Class class42 = org.jfree.data.time.RegularTimePeriod.downsize(class41);
        int int43 = week16.compareTo((java.lang.Object) class41);
        int int44 = week16.getWeek();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 35 + "'", int8 == 35);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(regularTimePeriod17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-60506053200001L) + "'", long18 == (-60506053200001L));
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Week 35, 52" + "'", str19, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 35 + "'", int21 == 35);
        org.junit.Assert.assertNotNull(regularTimePeriod22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-60505750800001L) + "'", long24 == (-60505750800001L));
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Week 35, 52" + "'", str25, "Week 35, 52");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Week 35, 52" + "'", str29, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + (-60506053200001L) + "'", long30 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + (-60505750800001L) + "'", long31 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod35);
        org.junit.Assert.assertNotNull(wildcardClass36);
        org.junit.Assert.assertNotNull(class37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(class39);
        org.junit.Assert.assertNotNull(class40);
        org.junit.Assert.assertNotNull(class41);
        org.junit.Assert.assertNotNull(class42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 35 + "'", int44 == 35);
    }

    @Test
    public void test2203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2203");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod7 = week2.next();
        java.util.Date date8 = week2.getStart();
        org.jfree.data.time.Week week11 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str12 = week11.toString();
        long long13 = week11.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod14 = week11.next();
        java.util.Date date15 = week11.getEnd();
        org.jfree.data.time.Week week16 = new org.jfree.data.time.Week(date15);
        java.util.Date date17 = week16.getStart();
        long long18 = week16.getMiddleMillisecond();
        java.util.Date date19 = week16.getStart();
        long long20 = week16.getSerialIndex();
        boolean boolean21 = week2.equals((java.lang.Object) week16);
        long long22 = week16.getLastMillisecond();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod7);
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Week 35, 52" + "'", str12, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-60506053200001L) + "'", long13 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod14);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-60506053200001L) + "'", long18 == (-60506053200001L));
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 2791L + "'", long20 == 2791L);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-60505750800001L) + "'", long22 == (-60505750800001L));
    }

    @Test
    public void test2204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2204");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        int int11 = week2.getYearValue();
        long long12 = week2.getLastMillisecond();
        int int13 = week2.getWeek();
        int int15 = week2.compareTo((java.lang.Object) 0);
        int int16 = week2.getWeek();
        long long17 = week2.getLastMillisecond();
        int int18 = week2.getYearValue();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-60505750800001L) + "'", long12 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 35 + "'", int16 == 35);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-60505750800001L) + "'", long17 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 52 + "'", int18 == 52);
    }

    @Test
    public void test2205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2205");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        java.util.Calendar calendar4 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long5 = week2.getLastMillisecond(calendar4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
    }

    @Test
    public void test2206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2206");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        int int11 = week2.getYearValue();
        long long12 = week2.getLastMillisecond();
        int int13 = week2.getWeek();
        int int14 = week2.getYearValue();
        long long15 = week2.getSerialIndex();
        java.util.Date date16 = week2.getEnd();
        org.jfree.data.time.Week week17 = new org.jfree.data.time.Week(date16);
        org.jfree.data.time.Week week18 = new org.jfree.data.time.Week(date16);
        long long19 = week18.getSerialIndex();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod20 = week18.next();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-60505750800001L) + "'", long12 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 52 + "'", int14 == 52);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 2791L + "'", long15 == 2791L);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 2791L + "'", long19 == 2791L);
        org.junit.Assert.assertNotNull(regularTimePeriod20);
    }

    @Test
    public void test2207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2207");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        long long5 = week2.getLastMillisecond();
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod9 = week8.next();
        java.lang.Class<?> wildcardClass10 = week8.getClass();
        java.lang.Class class11 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass10);
        int int12 = week2.compareTo((java.lang.Object) wildcardClass10);
        long long13 = week2.getMiddleMillisecond();
        java.util.Date date14 = week2.getEnd();
        int int15 = week2.getWeek();
        long long16 = week2.getLastMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod17 = week2.next();
        java.util.Date date18 = week2.getEnd();
        java.util.Calendar calendar19 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long20 = week2.getFirstMillisecond(calendar19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-60505750800001L) + "'", long5 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod9);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNotNull(class11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-60506053200001L) + "'", long13 == (-60506053200001L));
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 35 + "'", int15 == 35);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-60505750800001L) + "'", long16 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod17);
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Sat Aug 26 23:59:59 CET 52");
    }

    @Test
    public void test2208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2208");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, 2);
        java.lang.String str3 = week2.toString();
        int int4 = week2.getYearValue();
        long long5 = week2.getMiddleMillisecond();
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod9 = week8.next();
        java.lang.Class<?> wildcardClass10 = week8.getClass();
        java.lang.Class class11 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass10);
        org.jfree.data.time.Week week14 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date15 = week14.getStart();
        java.lang.Class class16 = null;
        java.util.Date date17 = null;
        java.util.TimeZone timeZone18 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod19 = org.jfree.data.time.RegularTimePeriod.createInstance(class16, date17, timeZone18);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod20 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass10, date15, timeZone18);
        org.jfree.data.time.Week week23 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date24 = week23.getStart();
        org.jfree.data.time.Week week25 = new org.jfree.data.time.Week(date24);
        java.util.TimeZone timeZone26 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod27 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass10, date24, timeZone26);
        org.jfree.data.time.Week week28 = new org.jfree.data.time.Week(date24);
        long long29 = week28.getLastMillisecond();
        org.jfree.data.time.Week week32 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod33 = week32.previous();
        java.util.Date date34 = week32.getEnd();
        org.jfree.data.time.Week week37 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod38 = week37.next();
        int int39 = week37.getYearValue();
        java.util.TimeZone timeZone40 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int41 = week37.compareTo((java.lang.Object) timeZone40);
        int int42 = week37.getYearValue();
        int int44 = week37.compareTo((java.lang.Object) 9);
        int int45 = week37.getYearValue();
        long long46 = week37.getLastMillisecond();
        int int47 = week37.getWeek();
        java.util.Date date48 = week37.getEnd();
        org.jfree.data.time.Week week51 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date52 = week51.getStart();
        java.util.Date date53 = week51.getEnd();
        org.jfree.data.time.Week week56 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod57 = week56.next();
        java.lang.Class<?> wildcardClass58 = week56.getClass();
        java.lang.Class class59 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass58);
        org.jfree.data.time.Week week62 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date63 = week62.getStart();
        java.lang.Class class64 = null;
        java.util.Date date65 = null;
        java.util.TimeZone timeZone66 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod67 = org.jfree.data.time.RegularTimePeriod.createInstance(class64, date65, timeZone66);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod68 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass58, date63, timeZone66);
        org.jfree.data.time.Week week69 = new org.jfree.data.time.Week(date53, timeZone66);
        org.jfree.data.time.Week week70 = new org.jfree.data.time.Week(date48, timeZone66);
        org.jfree.data.time.Week week71 = new org.jfree.data.time.Week(date34, timeZone66);
        long long72 = week71.getLastMillisecond();
        long long73 = week71.getLastMillisecond();
        int int74 = week28.compareTo((java.lang.Object) long73);
        int int75 = week2.compareTo((java.lang.Object) long73);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 9, 2" + "'", str3, "Week 9, 2");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2 + "'", int4 == 2);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-62099096400001L) + "'", long5 == (-62099096400001L));
        org.junit.Assert.assertNotNull(regularTimePeriod9);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNotNull(class11);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone18);
// flaky:         org.junit.Assert.assertEquals(timeZone18.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod19);
        org.junit.Assert.assertNotNull(regularTimePeriod20);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone26);
// flaky:         org.junit.Assert.assertEquals(timeZone26.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNotNull(regularTimePeriod27);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + (-59100800400001L) + "'", long29 == (-59100800400001L));
        org.junit.Assert.assertNotNull(regularTimePeriod33);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 52 + "'", int39 == 52);
        org.junit.Assert.assertNotNull(timeZone40);
// flaky:         org.junit.Assert.assertEquals(timeZone40.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 52 + "'", int42 == 52);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 52 + "'", int45 == 52);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + (-60505750800001L) + "'", long46 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 35 + "'", int47 == 35);
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date52);
        org.junit.Assert.assertEquals(date52.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod57);
        org.junit.Assert.assertNotNull(wildcardClass58);
        org.junit.Assert.assertNotNull(class59);
        org.junit.Assert.assertNotNull(date63);
        org.junit.Assert.assertEquals(date63.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone66);
// flaky:         org.junit.Assert.assertEquals(timeZone66.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod67);
        org.junit.Assert.assertNotNull(regularTimePeriod68);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + (-60505750800001L) + "'", long72 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + (-60505750800001L) + "'", long73 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1 + "'", int74 == 1);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
    }

    @Test
    public void test2209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2209");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date3 = week2.getStart();
        java.util.Date date4 = week2.getEnd();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod8 = week7.next();
        java.lang.Class<?> wildcardClass9 = week7.getClass();
        java.lang.Class class10 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass9);
        org.jfree.data.time.Week week13 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date14 = week13.getStart();
        java.lang.Class class15 = null;
        java.util.Date date16 = null;
        java.util.TimeZone timeZone17 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod18 = org.jfree.data.time.RegularTimePeriod.createInstance(class15, date16, timeZone17);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod19 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass9, date14, timeZone17);
        org.jfree.data.time.Week week20 = new org.jfree.data.time.Week(date4, timeZone17);
        java.util.Date date21 = week20.getEnd();
        int int22 = week20.getWeek();
        long long23 = week20.getSerialIndex();
        java.util.Date date24 = week20.getStart();
        org.jfree.data.time.Week week27 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod28 = week27.previous();
        int int29 = week27.getYearValue();
        java.util.Date date30 = week27.getStart();
        java.util.TimeZone timeZone31 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.Week week32 = new org.jfree.data.time.Week(date30, timeZone31);
        org.jfree.data.time.Week week35 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod36 = week35.next();
        int int37 = week35.getYearValue();
        java.util.TimeZone timeZone38 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int39 = week35.compareTo((java.lang.Object) timeZone38);
        int int40 = week35.getYearValue();
        int int42 = week35.compareTo((java.lang.Object) 9);
        java.util.Date date43 = week35.getStart();
        org.jfree.data.time.Week week46 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod47 = week46.next();
        java.lang.Class<?> wildcardClass48 = week46.getClass();
        java.lang.Class class49 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass48);
        java.lang.Class class50 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass48);
        org.jfree.data.time.Week week53 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod54 = week53.next();
        int int55 = week53.getYearValue();
        java.util.TimeZone timeZone56 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int57 = week53.compareTo((java.lang.Object) timeZone56);
        int int58 = week53.getYearValue();
        int int60 = week53.compareTo((java.lang.Object) 9);
        java.util.Date date61 = week53.getStart();
        org.jfree.data.time.Week week62 = new org.jfree.data.time.Week(date61);
        org.jfree.data.time.Week week65 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod66 = week65.next();
        int int67 = week65.getYearValue();
        java.util.TimeZone timeZone68 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int69 = week65.compareTo((java.lang.Object) timeZone68);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod70 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass48, date61, timeZone68);
        org.jfree.data.time.Week week73 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod74 = week73.previous();
        int int75 = week73.getYearValue();
        java.util.Date date76 = week73.getStart();
        java.util.TimeZone timeZone77 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.Week week78 = new org.jfree.data.time.Week(date76, timeZone77);
        org.jfree.data.time.Week week79 = new org.jfree.data.time.Week(date61, timeZone77);
        org.jfree.data.time.Week week80 = new org.jfree.data.time.Week(date43, timeZone77);
        org.jfree.data.time.Week week81 = new org.jfree.data.time.Week(date30, timeZone77);
        org.jfree.data.time.Week week82 = new org.jfree.data.time.Week(date24, timeZone77);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(class10);
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone17);
// flaky:         org.junit.Assert.assertEquals(timeZone17.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod18);
        org.junit.Assert.assertNotNull(regularTimePeriod19);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 9 + "'", int22 == 9);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 5150L + "'", long23 == 5150L);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 52 + "'", int29 == 52);
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(timeZone31);
// flaky:         org.junit.Assert.assertEquals(timeZone31.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNotNull(regularTimePeriod36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 52 + "'", int37 == 52);
        org.junit.Assert.assertNotNull(timeZone38);
// flaky:         org.junit.Assert.assertEquals(timeZone38.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 52 + "'", int40 == 52);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod47);
        org.junit.Assert.assertNotNull(wildcardClass48);
        org.junit.Assert.assertNotNull(class49);
        org.junit.Assert.assertNotNull(class50);
        org.junit.Assert.assertNotNull(regularTimePeriod54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 52 + "'", int55 == 52);
        org.junit.Assert.assertNotNull(timeZone56);
// flaky:         org.junit.Assert.assertEquals(timeZone56.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 52 + "'", int58 == 52);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertNotNull(date61);
        org.junit.Assert.assertEquals(date61.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 52 + "'", int67 == 52);
        org.junit.Assert.assertNotNull(timeZone68);
// flaky:         org.junit.Assert.assertEquals(timeZone68.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1 + "'", int69 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod70);
        org.junit.Assert.assertNotNull(regularTimePeriod74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 52 + "'", int75 == 52);
        org.junit.Assert.assertNotNull(date76);
        org.junit.Assert.assertEquals(date76.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(timeZone77);
// flaky:         org.junit.Assert.assertEquals(timeZone77.getDisplayName(), "Central European Time");
    }

    @Test
    public void test2210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2210");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        int int11 = week2.getYearValue();
        long long12 = week2.getLastMillisecond();
        int int13 = week2.getWeek();
        int int14 = week2.getYearValue();
        long long15 = week2.getSerialIndex();
        java.util.Date date16 = week2.getEnd();
        org.jfree.data.time.Week week17 = new org.jfree.data.time.Week(date16);
        org.jfree.data.time.Week week18 = new org.jfree.data.time.Week(date16);
        org.jfree.data.time.Week week19 = new org.jfree.data.time.Week(date16);
        long long20 = week19.getMiddleMillisecond();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-60505750800001L) + "'", long12 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 52 + "'", int14 == 52);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 2791L + "'", long15 == 2791L);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-60506053200001L) + "'", long20 == (-60506053200001L));
    }

    @Test
    public void test2211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2211");
        org.jfree.data.time.Week week4 = new org.jfree.data.time.Week();
        long long5 = week4.getFirstMillisecond();
        org.jfree.data.time.Year year6 = week4.getYear();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week(0, year6);
        org.jfree.data.time.Year year8 = week7.getYear();
        org.jfree.data.time.Week week9 = new org.jfree.data.time.Week(3, year8);
        org.jfree.data.time.Week week10 = new org.jfree.data.time.Week(7, year8);
        org.jfree.data.time.Week week11 = new org.jfree.data.time.Week(2, year8);
        int int12 = week11.getWeek();
        long long13 = week11.getFirstMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod14 = week11.next();
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1637449200000L + "'", long5 == 1637449200000L);
        org.junit.Assert.assertNotNull(year6);
        org.junit.Assert.assertNotNull(year8);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1609628400000L + "'", long13 == 1609628400000L);
        org.junit.Assert.assertNotNull(regularTimePeriod14);
    }

    @Test
    public void test2212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2212");
        org.jfree.data.time.Week week4 = new org.jfree.data.time.Week();
        long long5 = week4.getFirstMillisecond();
        org.jfree.data.time.Year year6 = week4.getYear();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week((int) (byte) 100, year6);
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week(12, year6);
        org.jfree.data.time.Week week9 = new org.jfree.data.time.Week(0, year6);
        org.jfree.data.time.Week week10 = new org.jfree.data.time.Week((int) (byte) -1, year6);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1637449200000L + "'", long5 == 1637449200000L);
        org.junit.Assert.assertNotNull(year6);
    }

    @Test
    public void test2213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2213");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        int int11 = week2.getYearValue();
        long long12 = week2.getLastMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod13 = week2.previous();
        int int14 = week2.getWeek();
        long long15 = week2.getSerialIndex();
        java.util.Date date16 = week2.getStart();
        int int17 = week2.getYearValue();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-60505750800001L) + "'", long12 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 35 + "'", int14 == 35);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 2791L + "'", long15 == 2791L);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 52 + "'", int17 == 52);
    }

    @Test
    public void test2214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2214");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        int int11 = week2.getYearValue();
        long long12 = week2.getLastMillisecond();
        org.jfree.data.time.Week week15 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod16 = week15.next();
        java.lang.Class<?> wildcardClass17 = week15.getClass();
        java.lang.Class class18 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass17);
        boolean boolean19 = week2.equals((java.lang.Object) wildcardClass17);
        int int20 = week2.getYearValue();
        java.lang.Object obj21 = null;
        int int22 = week2.compareTo(obj21);
        java.lang.Class<?> wildcardClass23 = week2.getClass();
        java.lang.Class class24 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass23);
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-60505750800001L) + "'", long12 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(class18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 52 + "'", int20 == 52);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertNotNull(class24);
    }

    @Test
    public void test2215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2215");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.previous();
        java.util.Date date4 = week2.getEnd();
        java.lang.String str5 = week2.toString();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Week 35, 52" + "'", str5, "Week 35, 52");
    }

    @Test
    public void test2216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2216");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        long long10 = week2.getMiddleMillisecond();
        java.util.Calendar calendar11 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long12 = week2.getFirstMillisecond(calendar11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-60506053200001L) + "'", long10 == (-60506053200001L));
    }

    @Test
    public void test2217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2217");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        java.lang.Class<?> wildcardClass4 = week2.getClass();
        java.lang.Class class5 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass4);
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date9 = week8.getStart();
        java.lang.Class class10 = null;
        java.util.Date date11 = null;
        java.util.TimeZone timeZone12 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod13 = org.jfree.data.time.RegularTimePeriod.createInstance(class10, date11, timeZone12);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod14 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass4, date9, timeZone12);
        org.jfree.data.time.Week week15 = new org.jfree.data.time.Week(date9);
        long long16 = week15.getSerialIndex();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod17 = week15.next();
        java.util.Date date18 = week15.getEnd();
        org.jfree.data.time.Week week21 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod22 = week21.next();
        int int23 = week21.getYearValue();
        java.util.TimeZone timeZone24 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int25 = week21.compareTo((java.lang.Object) timeZone24);
        int int26 = week21.getYearValue();
        int int28 = week21.compareTo((java.lang.Object) 9);
        int int29 = week21.getYearValue();
        long long30 = week21.getLastMillisecond();
        int int31 = week21.getWeek();
        java.util.Date date32 = week21.getEnd();
        org.jfree.data.time.Week week35 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date36 = week35.getStart();
        java.util.Date date37 = week35.getEnd();
        org.jfree.data.time.Week week40 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod41 = week40.next();
        java.lang.Class<?> wildcardClass42 = week40.getClass();
        java.lang.Class class43 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass42);
        org.jfree.data.time.Week week46 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date47 = week46.getStart();
        java.lang.Class class48 = null;
        java.util.Date date49 = null;
        java.util.TimeZone timeZone50 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod51 = org.jfree.data.time.RegularTimePeriod.createInstance(class48, date49, timeZone50);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod52 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass42, date47, timeZone50);
        org.jfree.data.time.Week week53 = new org.jfree.data.time.Week(date37, timeZone50);
        org.jfree.data.time.Week week54 = new org.jfree.data.time.Week(date32, timeZone50);
        org.jfree.data.time.Week week55 = new org.jfree.data.time.Week(date18, timeZone50);
        org.jfree.data.time.Week week58 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod59 = week58.next();
        int int60 = week58.getYearValue();
        java.util.TimeZone timeZone61 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int62 = week58.compareTo((java.lang.Object) timeZone61);
        int int63 = week58.getYearValue();
        int int65 = week58.compareTo((java.lang.Object) 9);
        int int66 = week58.getYearValue();
        int int67 = week58.getYearValue();
        int int68 = week58.getYearValue();
        java.util.Date date69 = week58.getEnd();
        org.jfree.data.time.Week week72 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date73 = week72.getStart();
        java.util.Date date74 = week72.getEnd();
        org.jfree.data.time.Week week77 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod78 = week77.next();
        java.lang.Class<?> wildcardClass79 = week77.getClass();
        java.lang.Class class80 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass79);
        org.jfree.data.time.Week week83 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date84 = week83.getStart();
        java.lang.Class class85 = null;
        java.util.Date date86 = null;
        java.util.TimeZone timeZone87 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod88 = org.jfree.data.time.RegularTimePeriod.createInstance(class85, date86, timeZone87);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod89 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass79, date84, timeZone87);
        org.jfree.data.time.Week week90 = new org.jfree.data.time.Week(date74, timeZone87);
        java.util.TimeZone timeZone91 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.Week week92 = new org.jfree.data.time.Week(date74, timeZone91);
        java.lang.Class<?> wildcardClass93 = week92.getClass();
        int int94 = week58.compareTo((java.lang.Object) wildcardClass93);
        boolean boolean95 = week55.equals((java.lang.Object) week58);
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(class5);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone12);
// flaky:         org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod13);
        org.junit.Assert.assertNotNull(regularTimePeriod14);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 5150L + "'", long16 == 5150L);
        org.junit.Assert.assertNotNull(regularTimePeriod17);
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 52 + "'", int23 == 52);
        org.junit.Assert.assertNotNull(timeZone24);
// flaky:         org.junit.Assert.assertEquals(timeZone24.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 52 + "'", int26 == 52);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 52 + "'", int29 == 52);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + (-60505750800001L) + "'", long30 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 35 + "'", int31 == 35);
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod41);
        org.junit.Assert.assertNotNull(wildcardClass42);
        org.junit.Assert.assertNotNull(class43);
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone50);
// flaky:         org.junit.Assert.assertEquals(timeZone50.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod51);
        org.junit.Assert.assertNotNull(regularTimePeriod52);
        org.junit.Assert.assertNotNull(regularTimePeriod59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 52 + "'", int60 == 52);
        org.junit.Assert.assertNotNull(timeZone61);
// flaky:         org.junit.Assert.assertEquals(timeZone61.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 52 + "'", int63 == 52);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 52 + "'", int66 == 52);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 52 + "'", int67 == 52);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 52 + "'", int68 == 52);
        org.junit.Assert.assertNotNull(date69);
        org.junit.Assert.assertEquals(date69.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date73);
        org.junit.Assert.assertEquals(date73.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date74);
        org.junit.Assert.assertEquals(date74.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod78);
        org.junit.Assert.assertNotNull(wildcardClass79);
        org.junit.Assert.assertNotNull(class80);
        org.junit.Assert.assertNotNull(date84);
        org.junit.Assert.assertEquals(date84.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone87);
// flaky:         org.junit.Assert.assertEquals(timeZone87.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod88);
        org.junit.Assert.assertNotNull(regularTimePeriod89);
        org.junit.Assert.assertNotNull(timeZone91);
// flaky:         org.junit.Assert.assertEquals(timeZone91.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNotNull(wildcardClass93);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 1 + "'", int94 == 1);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
    }

    @Test
    public void test2218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2218");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.previous();
        java.util.Date date4 = week2.getEnd();
        long long5 = week2.getSerialIndex();
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week(35, 100);
        org.jfree.data.time.Week week11 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod12 = week11.previous();
        int int13 = week11.getYearValue();
        java.util.Date date14 = week11.getEnd();
        long long15 = week11.getMiddleMillisecond();
        org.jfree.data.time.Week week18 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod19 = week18.next();
        int int20 = week18.getYearValue();
        java.util.TimeZone timeZone21 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int22 = week18.compareTo((java.lang.Object) timeZone21);
        int int23 = week18.getYearValue();
        int int25 = week18.compareTo((java.lang.Object) 9);
        java.util.Date date26 = week18.getStart();
        boolean boolean27 = week11.equals((java.lang.Object) date26);
        java.util.Date date28 = week11.getEnd();
        boolean boolean29 = week8.equals((java.lang.Object) week11);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod30 = week8.next();
        long long31 = week8.getFirstMillisecond();
        long long32 = week8.getFirstMillisecond();
        int int33 = week2.compareTo((java.lang.Object) long32);
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 2791L + "'", long5 == 2791L);
        org.junit.Assert.assertNotNull(regularTimePeriod12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 52 + "'", int13 == 52);
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-60506053200001L) + "'", long15 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 52 + "'", int20 == 52);
        org.junit.Assert.assertNotNull(timeZone21);
// flaky:         org.junit.Assert.assertEquals(timeZone21.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 52 + "'", int23 == 52);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(regularTimePeriod30);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + (-58991331600000L) + "'", long31 == (-58991331600000L));
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + (-58991331600000L) + "'", long32 == (-58991331600000L));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
    }

    @Test
    public void test2219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2219");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        java.util.Date date10 = week2.getStart();
        org.jfree.data.time.Week week11 = new org.jfree.data.time.Week(date10);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod12 = week11.next();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod13 = week11.next();
        int int14 = week11.getWeek();
        org.jfree.data.time.Week week17 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod18 = week17.next();
        int int19 = week17.getYearValue();
        java.util.TimeZone timeZone20 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int21 = week17.compareTo((java.lang.Object) timeZone20);
        int int22 = week17.getYearValue();
        int int24 = week17.compareTo((java.lang.Object) 9);
        int int25 = week17.getYearValue();
        int int26 = week17.getYearValue();
        int int27 = week17.getYearValue();
        java.util.Date date28 = week17.getEnd();
        org.jfree.data.time.Week week31 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date32 = week31.getStart();
        java.util.Date date33 = week31.getEnd();
        org.jfree.data.time.Week week36 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod37 = week36.next();
        java.lang.Class<?> wildcardClass38 = week36.getClass();
        java.lang.Class class39 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass38);
        org.jfree.data.time.Week week42 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date43 = week42.getStart();
        java.lang.Class class44 = null;
        java.util.Date date45 = null;
        java.util.TimeZone timeZone46 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod47 = org.jfree.data.time.RegularTimePeriod.createInstance(class44, date45, timeZone46);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod48 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass38, date43, timeZone46);
        org.jfree.data.time.Week week49 = new org.jfree.data.time.Week(date33, timeZone46);
        java.util.TimeZone timeZone50 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.Week week51 = new org.jfree.data.time.Week(date33, timeZone50);
        java.lang.Class<?> wildcardClass52 = week51.getClass();
        int int53 = week17.compareTo((java.lang.Object) wildcardClass52);
        java.lang.Class class54 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass52);
        int int55 = week11.compareTo((java.lang.Object) wildcardClass52);
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod12);
        org.junit.Assert.assertNotNull(regularTimePeriod13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 35 + "'", int14 == 35);
        org.junit.Assert.assertNotNull(regularTimePeriod18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 52 + "'", int19 == 52);
        org.junit.Assert.assertNotNull(timeZone20);
// flaky:         org.junit.Assert.assertEquals(timeZone20.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 52 + "'", int22 == 52);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 52 + "'", int25 == 52);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 52 + "'", int26 == 52);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 52 + "'", int27 == 52);
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod37);
        org.junit.Assert.assertNotNull(wildcardClass38);
        org.junit.Assert.assertNotNull(class39);
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone46);
// flaky:         org.junit.Assert.assertEquals(timeZone46.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod47);
        org.junit.Assert.assertNotNull(regularTimePeriod48);
        org.junit.Assert.assertNotNull(timeZone50);
// flaky:         org.junit.Assert.assertEquals(timeZone50.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNotNull(wildcardClass52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(class54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
    }

    @Test
    public void test2220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2220");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.previous();
        java.util.Date date4 = week2.getEnd();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod8 = week7.next();
        int int9 = week7.getYearValue();
        java.util.TimeZone timeZone10 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int11 = week7.compareTo((java.lang.Object) timeZone10);
        int int12 = week7.getYearValue();
        int int14 = week7.compareTo((java.lang.Object) 9);
        int int15 = week7.getYearValue();
        long long16 = week7.getLastMillisecond();
        int int17 = week7.getWeek();
        java.util.Date date18 = week7.getEnd();
        org.jfree.data.time.Week week21 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date22 = week21.getStart();
        java.util.Date date23 = week21.getEnd();
        org.jfree.data.time.Week week26 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod27 = week26.next();
        java.lang.Class<?> wildcardClass28 = week26.getClass();
        java.lang.Class class29 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass28);
        org.jfree.data.time.Week week32 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date33 = week32.getStart();
        java.lang.Class class34 = null;
        java.util.Date date35 = null;
        java.util.TimeZone timeZone36 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod37 = org.jfree.data.time.RegularTimePeriod.createInstance(class34, date35, timeZone36);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod38 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass28, date33, timeZone36);
        org.jfree.data.time.Week week39 = new org.jfree.data.time.Week(date23, timeZone36);
        org.jfree.data.time.Week week40 = new org.jfree.data.time.Week(date18, timeZone36);
        org.jfree.data.time.Week week41 = new org.jfree.data.time.Week(date4, timeZone36);
        int int42 = week41.getYearValue();
        long long43 = week41.getLastMillisecond();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 52 + "'", int9 == 52);
        org.junit.Assert.assertNotNull(timeZone10);
// flaky:         org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 52 + "'", int15 == 52);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-60505750800001L) + "'", long16 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 35 + "'", int17 == 35);
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod27);
        org.junit.Assert.assertNotNull(wildcardClass28);
        org.junit.Assert.assertNotNull(class29);
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone36);
// flaky:         org.junit.Assert.assertEquals(timeZone36.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod37);
        org.junit.Assert.assertNotNull(regularTimePeriod38);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 52 + "'", int42 == 52);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + (-60505750800001L) + "'", long43 == (-60505750800001L));
    }

    @Test
    public void test2221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2221");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.next();
        java.util.Date date6 = week2.getEnd();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week(date6);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod8 = week7.next();
        java.util.Date date9 = week7.getEnd();
        long long10 = week7.getMiddleMillisecond();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-60506053200001L) + "'", long10 == (-60506053200001L));
    }

    @Test
    public void test2222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2222");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        long long5 = week2.getLastMillisecond();
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod9 = week8.next();
        java.lang.Class<?> wildcardClass10 = week8.getClass();
        java.lang.Class class11 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass10);
        int int12 = week2.compareTo((java.lang.Object) wildcardClass10);
        long long13 = week2.getMiddleMillisecond();
        long long14 = week2.getLastMillisecond();
        int int15 = week2.getYearValue();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod16 = week2.next();
        long long17 = week2.getFirstMillisecond();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-60505750800001L) + "'", long5 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod9);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNotNull(class11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-60506053200001L) + "'", long13 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-60505750800001L) + "'", long14 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 52 + "'", int15 == 52);
        org.junit.Assert.assertNotNull(regularTimePeriod16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-60506355600000L) + "'", long17 == (-60506355600000L));
    }

    @Test
    public void test2223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2223");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        java.lang.Class<?> wildcardClass4 = week2.getClass();
        java.lang.Class class5 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass4);
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date9 = week8.getStart();
        java.lang.Class class10 = null;
        java.util.Date date11 = null;
        java.util.TimeZone timeZone12 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod13 = org.jfree.data.time.RegularTimePeriod.createInstance(class10, date11, timeZone12);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod14 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass4, date9, timeZone12);
        org.jfree.data.time.Week week17 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date18 = week17.getStart();
        org.jfree.data.time.Week week19 = new org.jfree.data.time.Week(date18);
        java.util.TimeZone timeZone20 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod21 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass4, date18, timeZone20);
        org.jfree.data.time.Week week22 = new org.jfree.data.time.Week(date18);
        org.jfree.data.time.Week week27 = new org.jfree.data.time.Week();
        long long28 = week27.getFirstMillisecond();
        org.jfree.data.time.Year year29 = week27.getYear();
        org.jfree.data.time.Week week30 = new org.jfree.data.time.Week(52, year29);
        java.util.Date date31 = year29.getStart();
        org.jfree.data.time.Week week32 = new org.jfree.data.time.Week(100, year29);
        org.jfree.data.time.Week week33 = new org.jfree.data.time.Week(35, year29);
        java.util.Date date34 = year29.getStart();
        org.jfree.data.time.Week week35 = new org.jfree.data.time.Week(52, year29);
        int int36 = week22.compareTo((java.lang.Object) week35);
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(class5);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone12);
// flaky:         org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod13);
        org.junit.Assert.assertNotNull(regularTimePeriod14);
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone20);
// flaky:         org.junit.Assert.assertEquals(timeZone20.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNotNull(regularTimePeriod21);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 1637449200000L + "'", long28 == 1637449200000L);
        org.junit.Assert.assertNotNull(year29);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Fri Jan 01 00:00:00 CET 2021");
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Fri Jan 01 00:00:00 CET 2021");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1924) + "'", int36 == (-1924));
    }

    @Test
    public void test2224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2224");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        java.lang.Class<?> wildcardClass4 = week2.getClass();
        java.lang.Class class5 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass4);
        java.lang.Class class6 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass4);
        org.jfree.data.time.Week week9 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week9.next();
        int int11 = week9.getYearValue();
        java.util.TimeZone timeZone12 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int13 = week9.compareTo((java.lang.Object) timeZone12);
        int int14 = week9.getYearValue();
        int int16 = week9.compareTo((java.lang.Object) 9);
        java.util.Date date17 = week9.getStart();
        org.jfree.data.time.Week week18 = new org.jfree.data.time.Week(date17);
        org.jfree.data.time.Week week21 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod22 = week21.next();
        int int23 = week21.getYearValue();
        java.util.TimeZone timeZone24 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int25 = week21.compareTo((java.lang.Object) timeZone24);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod26 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass4, date17, timeZone24);
        org.jfree.data.time.Week week29 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.util.Date date30 = week29.getStart();
        org.jfree.data.time.Week week31 = new org.jfree.data.time.Week(date30);
        org.jfree.data.time.Week week34 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod35 = week34.next();
        java.lang.Class<?> wildcardClass36 = week34.getClass();
        java.lang.Class class37 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass36);
        java.lang.Class class38 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass36);
        org.jfree.data.time.Week week41 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod42 = week41.next();
        int int43 = week41.getYearValue();
        java.util.TimeZone timeZone44 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int45 = week41.compareTo((java.lang.Object) timeZone44);
        int int46 = week41.getYearValue();
        int int48 = week41.compareTo((java.lang.Object) 9);
        java.util.Date date49 = week41.getStart();
        org.jfree.data.time.Week week50 = new org.jfree.data.time.Week(date49);
        org.jfree.data.time.Week week53 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod54 = week53.next();
        int int55 = week53.getYearValue();
        java.util.TimeZone timeZone56 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int57 = week53.compareTo((java.lang.Object) timeZone56);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod58 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass36, date49, timeZone56);
        org.jfree.data.time.Week week61 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod62 = week61.previous();
        int int63 = week61.getYearValue();
        java.util.Date date64 = week61.getStart();
        java.util.TimeZone timeZone65 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.Week week66 = new org.jfree.data.time.Week(date64, timeZone65);
        org.jfree.data.time.Week week67 = new org.jfree.data.time.Week(date49, timeZone65);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod68 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass4, date30, timeZone65);
        java.util.Date date69 = regularTimePeriod68.getEnd();
        org.jfree.data.time.Week week70 = new org.jfree.data.time.Week(date69);
        java.lang.String str71 = week70.toString();
        java.util.Calendar calendar72 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long73 = week70.getMiddleMillisecond(calendar72);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(class5);
        org.junit.Assert.assertNotNull(class6);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertNotNull(timeZone12);
// flaky:         org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 52 + "'", int14 == 52);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 52 + "'", int23 == 52);
        org.junit.Assert.assertNotNull(timeZone24);
// flaky:         org.junit.Assert.assertEquals(timeZone24.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod26);
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod35);
        org.junit.Assert.assertNotNull(wildcardClass36);
        org.junit.Assert.assertNotNull(class37);
        org.junit.Assert.assertNotNull(class38);
        org.junit.Assert.assertNotNull(regularTimePeriod42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 52 + "'", int43 == 52);
        org.junit.Assert.assertNotNull(timeZone44);
// flaky:         org.junit.Assert.assertEquals(timeZone44.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 52 + "'", int46 == 52);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 52 + "'", int55 == 52);
        org.junit.Assert.assertNotNull(timeZone56);
// flaky:         org.junit.Assert.assertEquals(timeZone56.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod58);
        org.junit.Assert.assertNotNull(regularTimePeriod62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 52 + "'", int63 == 52);
        org.junit.Assert.assertNotNull(date64);
        org.junit.Assert.assertEquals(date64.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(timeZone65);
// flaky:         org.junit.Assert.assertEquals(timeZone65.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNotNull(regularTimePeriod68);
        org.junit.Assert.assertNotNull(date69);
        org.junit.Assert.assertEquals(date69.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "Week 35, 52" + "'", str71, "Week 35, 52");
    }

    @Test
    public void test2225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2225");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) (byte) 0, 4);
    }

    @Test
    public void test2226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2226");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '4', (int) ' ');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.previous();
        int int4 = week2.getWeek();
        int int5 = week2.getYearValue();
        java.util.Date date6 = week2.getStart();
        java.lang.Class<?> wildcardClass7 = date6.getClass();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 32 + "'", int5 == 32);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sun Dec 21 00:00:00 CET 32");
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test2227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2227");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        int int11 = week2.getYearValue();
        long long12 = week2.getLastMillisecond();
        org.jfree.data.time.Week week15 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod16 = week15.next();
        java.lang.Class<?> wildcardClass17 = week15.getClass();
        java.lang.Class class18 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass17);
        boolean boolean19 = week2.equals((java.lang.Object) wildcardClass17);
        int int20 = week2.getYearValue();
        java.lang.Object obj21 = null;
        int int22 = week2.compareTo(obj21);
        long long23 = week2.getLastMillisecond();
        java.lang.Object obj24 = null;
        boolean boolean25 = week2.equals(obj24);
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Year year26 = week2.getYear();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Year constructor: year (52) outside valid range.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-60505750800001L) + "'", long12 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(class18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 52 + "'", int20 == 52);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-60505750800001L) + "'", long23 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test2228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2228");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        long long5 = week2.getLastMillisecond();
        java.util.Date date6 = week2.getEnd();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod7 = week2.previous();
        long long8 = week2.getSerialIndex();
        org.jfree.data.time.Week week13 = new org.jfree.data.time.Week();
        long long14 = week13.getFirstMillisecond();
        org.jfree.data.time.Year year15 = week13.getYear();
        org.jfree.data.time.Week week16 = new org.jfree.data.time.Week(0, year15);
        org.jfree.data.time.Week week17 = new org.jfree.data.time.Week(11, year15);
        long long18 = week17.getSerialIndex();
        org.jfree.data.time.Year year19 = week17.getYear();
        org.jfree.data.time.Week week20 = new org.jfree.data.time.Week((int) (short) 1, year19);
        org.jfree.data.time.Week week21 = new org.jfree.data.time.Week(4, year19);
        java.util.Date date22 = week21.getStart();
        org.jfree.data.time.Year year23 = week21.getYear();
        int int24 = week2.compareTo((java.lang.Object) year23);
        int int25 = week2.getWeek();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-60505750800001L) + "'", long5 == (-60505750800001L));
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 2791L + "'", long8 == 2791L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1637449200000L + "'", long14 == 1637449200000L);
        org.junit.Assert.assertNotNull(year15);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 107124L + "'", long18 == 107124L);
        org.junit.Assert.assertNotNull(year19);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Sun Jan 17 00:00:00 CET 2021");
        org.junit.Assert.assertNotNull(year23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 35 + "'", int25 == 35);
    }

    @Test
    public void test2229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2229");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        java.lang.Class<?> wildcardClass4 = week2.getClass();
        java.lang.Class class5 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass4);
        java.lang.Class class6 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass4);
        org.jfree.data.time.Week week9 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week9.next();
        int int11 = week9.getYearValue();
        java.util.TimeZone timeZone12 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int13 = week9.compareTo((java.lang.Object) timeZone12);
        int int14 = week9.getYearValue();
        int int16 = week9.compareTo((java.lang.Object) 9);
        java.util.Date date17 = week9.getStart();
        org.jfree.data.time.Week week18 = new org.jfree.data.time.Week(date17);
        org.jfree.data.time.Week week21 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod22 = week21.next();
        int int23 = week21.getYearValue();
        java.util.TimeZone timeZone24 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int25 = week21.compareTo((java.lang.Object) timeZone24);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod26 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass4, date17, timeZone24);
        java.util.Date date27 = regularTimePeriod26.getEnd();
        org.jfree.data.time.Week week30 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod31 = week30.next();
        int int32 = week30.getYearValue();
        java.util.TimeZone timeZone33 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int34 = week30.compareTo((java.lang.Object) timeZone33);
        int int35 = week30.getYearValue();
        int int37 = week30.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod38 = week30.previous();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod39 = week30.next();
        org.jfree.data.time.Week week42 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod43 = week42.next();
        java.lang.Class<?> wildcardClass44 = week42.getClass();
        java.lang.Class class45 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass44);
        java.lang.Class class46 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass44);
        boolean boolean47 = week30.equals((java.lang.Object) wildcardClass44);
        java.lang.Class class48 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass44);
        org.jfree.data.time.Week week51 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date52 = week51.getStart();
        java.util.Date date53 = week51.getEnd();
        org.jfree.data.time.Week week56 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod57 = week56.next();
        java.lang.Class<?> wildcardClass58 = week56.getClass();
        java.lang.Class class59 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass58);
        org.jfree.data.time.Week week62 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date63 = week62.getStart();
        java.lang.Class class64 = null;
        java.util.Date date65 = null;
        java.util.TimeZone timeZone66 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod67 = org.jfree.data.time.RegularTimePeriod.createInstance(class64, date65, timeZone66);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod68 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass58, date63, timeZone66);
        org.jfree.data.time.Week week69 = new org.jfree.data.time.Week(date53, timeZone66);
        java.lang.Class class70 = null;
        java.util.Date date71 = null;
        java.util.TimeZone timeZone72 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod73 = org.jfree.data.time.RegularTimePeriod.createInstance(class70, date71, timeZone72);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod74 = org.jfree.data.time.RegularTimePeriod.createInstance(class48, date53, timeZone72);
        org.jfree.data.time.Week week75 = new org.jfree.data.time.Week(date27, timeZone72);
        long long76 = week75.getMiddleMillisecond();
        java.util.Date date77 = week75.getEnd();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(class5);
        org.junit.Assert.assertNotNull(class6);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertNotNull(timeZone12);
// flaky:         org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 52 + "'", int14 == 52);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 52 + "'", int23 == 52);
        org.junit.Assert.assertNotNull(timeZone24);
// flaky:         org.junit.Assert.assertEquals(timeZone24.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod26);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 52 + "'", int32 == 52);
        org.junit.Assert.assertNotNull(timeZone33);
// flaky:         org.junit.Assert.assertEquals(timeZone33.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 52 + "'", int35 == 52);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod38);
        org.junit.Assert.assertNotNull(regularTimePeriod39);
        org.junit.Assert.assertNotNull(regularTimePeriod43);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(class45);
        org.junit.Assert.assertNotNull(class46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(class48);
        org.junit.Assert.assertNotNull(date52);
        org.junit.Assert.assertEquals(date52.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod57);
        org.junit.Assert.assertNotNull(wildcardClass58);
        org.junit.Assert.assertNotNull(class59);
        org.junit.Assert.assertNotNull(date63);
        org.junit.Assert.assertEquals(date63.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone66);
// flaky:         org.junit.Assert.assertEquals(timeZone66.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod67);
        org.junit.Assert.assertNotNull(regularTimePeriod68);
        org.junit.Assert.assertNotNull(timeZone72);
// flaky:         org.junit.Assert.assertEquals(timeZone72.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod73);
        org.junit.Assert.assertNull(regularTimePeriod74);
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + (-60506053200001L) + "'", long76 == (-60506053200001L));
        org.junit.Assert.assertNotNull(date77);
        org.junit.Assert.assertEquals(date77.toString(), "Sat Aug 26 23:59:59 CET 52");
    }

    @Test
    public void test2230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2230");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        int int10 = week2.getYearValue();
        long long11 = week2.getLastMillisecond();
        int int12 = week2.getWeek();
        java.util.Date date13 = week2.getEnd();
        org.jfree.data.time.Week week16 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date17 = week16.getStart();
        java.util.Date date18 = week16.getEnd();
        org.jfree.data.time.Week week21 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod22 = week21.next();
        java.lang.Class<?> wildcardClass23 = week21.getClass();
        java.lang.Class class24 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass23);
        org.jfree.data.time.Week week27 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date28 = week27.getStart();
        java.lang.Class class29 = null;
        java.util.Date date30 = null;
        java.util.TimeZone timeZone31 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod32 = org.jfree.data.time.RegularTimePeriod.createInstance(class29, date30, timeZone31);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod33 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass23, date28, timeZone31);
        org.jfree.data.time.Week week34 = new org.jfree.data.time.Week(date18, timeZone31);
        org.jfree.data.time.Week week35 = new org.jfree.data.time.Week(date13, timeZone31);
        long long36 = week35.getLastMillisecond();
        org.jfree.data.time.Week week39 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod40 = week39.next();
        int int41 = week39.getYearValue();
        java.util.TimeZone timeZone42 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int43 = week39.compareTo((java.lang.Object) timeZone42);
        int int44 = week39.getYearValue();
        int int46 = week39.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod47 = week39.previous();
        int int48 = week39.getYearValue();
        long long49 = week39.getLastMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod50 = week39.previous();
        int int51 = week39.getWeek();
        int int52 = week39.getYearValue();
        boolean boolean53 = week35.equals((java.lang.Object) int52);
        java.util.Date date54 = week35.getStart();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 52 + "'", int10 == 52);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-60505750800001L) + "'", long11 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 35 + "'", int12 == 35);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod22);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertNotNull(class24);
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone31);
// flaky:         org.junit.Assert.assertEquals(timeZone31.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod32);
        org.junit.Assert.assertNotNull(regularTimePeriod33);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + (-60505750800001L) + "'", long36 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 52 + "'", int41 == 52);
        org.junit.Assert.assertNotNull(timeZone42);
// flaky:         org.junit.Assert.assertEquals(timeZone42.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 52 + "'", int44 == 52);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 52 + "'", int48 == 52);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + (-60505750800001L) + "'", long49 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 35 + "'", int51 == 35);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 52 + "'", int52 == 52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Sun Aug 20 00:00:00 CET 52");
    }

    @Test
    public void test2231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2231");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '4', (int) ' ');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.previous();
        java.lang.String str4 = week2.toString();
        java.lang.String str5 = week2.toString();
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod9 = week8.next();
        int int10 = week8.getYearValue();
        java.util.TimeZone timeZone11 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int12 = week8.compareTo((java.lang.Object) timeZone11);
        int int13 = week8.getYearValue();
        int int15 = week8.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod16 = week8.previous();
        int int17 = week8.getYearValue();
        long long18 = week8.getLastMillisecond();
        org.jfree.data.time.Week week21 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod22 = week21.next();
        java.lang.Class<?> wildcardClass23 = week21.getClass();
        java.lang.Class class24 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass23);
        boolean boolean25 = week8.equals((java.lang.Object) wildcardClass23);
        int int26 = week8.getYearValue();
        boolean boolean27 = week2.equals((java.lang.Object) week8);
        long long28 = week2.getMiddleMillisecond();
        java.util.Calendar calendar29 = null;
        // The following exception was thrown during execution in test generation
        try {
            week2.peg(calendar29);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Week 52, 32" + "'", str4, "Week 52, 32");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Week 52, 32" + "'", str5, "Week 52, 32");
        org.junit.Assert.assertNotNull(regularTimePeriod9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 52 + "'", int10 == 52);
        org.junit.Assert.assertNotNull(timeZone11);
// flaky:         org.junit.Assert.assertEquals(timeZone11.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 52 + "'", int13 == 52);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 52 + "'", int17 == 52);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-60505750800001L) + "'", long18 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod22);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertNotNull(class24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 52 + "'", int26 == 52);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + (-61126578000001L) + "'", long28 == (-61126578000001L));
    }

    @Test
    public void test2232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2232");
        org.jfree.data.time.Week week1 = new org.jfree.data.time.Week();
        long long2 = week1.getFirstMillisecond();
        org.jfree.data.time.Year year3 = week1.getYear();
        org.jfree.data.time.Week week4 = new org.jfree.data.time.Week(0, year3);
        java.util.Date date5 = week4.getStart();
        org.jfree.data.time.Week week6 = new org.jfree.data.time.Week(date5);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1637449200000L + "'", long2 == 1637449200000L);
        org.junit.Assert.assertNotNull(year3);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Sun Dec 20 00:00:00 CET 2020");
    }

    @Test
    public void test2233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2233");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, (int) 'a');
        org.jfree.data.time.Week week5 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod6 = week5.next();
        long long7 = week5.getMiddleMillisecond();
        java.lang.String str8 = week5.toString();
        boolean boolean9 = week2.equals((java.lang.Object) week5);
        java.util.Date date10 = week2.getStart();
        java.util.Date date11 = week2.getStart();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod12 = week2.next();
        long long13 = week2.getFirstMillisecond();
        org.junit.Assert.assertNotNull(regularTimePeriod6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-60506053200001L) + "'", long7 == (-60506053200001L));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Week 35, 52" + "'", str8, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-59101405200000L) + "'", long13 == (-59101405200000L));
    }

    @Test
    public void test2234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2234");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(35, 0);
        int int3 = week2.getYearValue();
        java.util.Calendar calendar4 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long5 = week2.getLastMillisecond(calendar4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
    }

    @Test
    public void test2235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2235");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date3 = week2.getStart();
        java.util.Date date4 = week2.getEnd();
        int int5 = week2.getYearValue();
        java.lang.String str6 = week2.toString();
        java.lang.Object obj7 = null;
        int int8 = week2.compareTo(obj7);
        java.util.Calendar calendar9 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long10 = week2.getLastMillisecond(calendar9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 97 + "'", int5 == 97);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Week 9, 97" + "'", str6, "Week 9, 97");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
    }

    @Test
    public void test2236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2236");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        long long5 = week2.getFirstMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod6 = week2.previous();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-60506355600000L) + "'", long5 == (-60506355600000L));
        org.junit.Assert.assertNotNull(regularTimePeriod6);
    }

    @Test
    public void test2237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2237");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        int int11 = week2.getYearValue();
        long long12 = week2.getLastMillisecond();
        int int13 = week2.getWeek();
        int int14 = week2.getYearValue();
        long long15 = week2.getFirstMillisecond();
        int int16 = week2.getYearValue();
        java.lang.String str17 = week2.toString();
        java.util.Date date18 = week2.getEnd();
        java.util.Date date19 = week2.getEnd();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-60505750800001L) + "'", long12 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 52 + "'", int14 == 52);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-60506355600000L) + "'", long15 == (-60506355600000L));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 52 + "'", int16 == 52);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Week 35, 52" + "'", str17, "Week 35, 52");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Sat Aug 26 23:59:59 CET 52");
    }

    @Test
    public void test2238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2238");
        org.jfree.data.time.Week week3 = new org.jfree.data.time.Week();
        long long4 = week3.getFirstMillisecond();
        org.jfree.data.time.Year year5 = week3.getYear();
        org.jfree.data.time.Week week6 = new org.jfree.data.time.Week((int) (byte) 100, year5);
        long long7 = year5.getMiddleMillisecond();
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week(100, year5);
        org.jfree.data.time.Week week9 = new org.jfree.data.time.Week(5, year5);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week9.previous();
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1637449200000L + "'", long4 == 1637449200000L);
        org.junit.Assert.assertNotNull(year5);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1625223599999L + "'", long7 == 1625223599999L);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
    }

    @Test
    public void test2239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2239");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod11 = week2.next();
        java.util.Date date12 = week2.getStart();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod13 = week2.previous();
        long long14 = week2.getMiddleMillisecond();
        long long15 = week2.getSerialIndex();
        org.jfree.data.time.Week week18 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str19 = week18.toString();
        long long20 = week18.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod21 = week18.next();
        java.util.Date date22 = week18.getEnd();
        org.jfree.data.time.Week week25 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod26 = week25.next();
        int int27 = week25.getYearValue();
        java.util.TimeZone timeZone28 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int29 = week25.compareTo((java.lang.Object) timeZone28);
        int int30 = week25.getYearValue();
        int int32 = week25.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod33 = week25.previous();
        int int34 = week25.getYearValue();
        long long35 = week25.getLastMillisecond();
        org.jfree.data.time.Week week38 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod39 = week38.next();
        java.lang.Class<?> wildcardClass40 = week38.getClass();
        java.lang.Class class41 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass40);
        boolean boolean42 = week25.equals((java.lang.Object) wildcardClass40);
        boolean boolean43 = week18.equals((java.lang.Object) wildcardClass40);
        org.jfree.data.time.Week week46 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date47 = week46.getStart();
        java.util.Date date48 = week46.getEnd();
        org.jfree.data.time.Week week51 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod52 = week51.next();
        int int53 = week51.getYearValue();
        java.util.TimeZone timeZone54 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int55 = week51.compareTo((java.lang.Object) timeZone54);
        int int56 = week51.getYearValue();
        long long57 = week51.getMiddleMillisecond();
        java.lang.Class<?> wildcardClass58 = week51.getClass();
        org.jfree.data.time.Week week61 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date62 = week61.getStart();
        org.jfree.data.time.Week week65 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod66 = week65.next();
        int int67 = week65.getYearValue();
        java.util.TimeZone timeZone68 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int69 = week65.compareTo((java.lang.Object) timeZone68);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod70 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass58, date62, timeZone68);
        org.jfree.data.time.Week week73 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod74 = week73.next();
        java.lang.Class<?> wildcardClass75 = week73.getClass();
        java.lang.Class class76 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass75);
        org.jfree.data.time.Week week79 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date80 = week79.getStart();
        java.lang.Class class81 = null;
        java.util.Date date82 = null;
        java.util.TimeZone timeZone83 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod84 = org.jfree.data.time.RegularTimePeriod.createInstance(class81, date82, timeZone83);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod85 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass75, date80, timeZone83);
        org.jfree.data.time.Week week88 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date89 = week88.getStart();
        org.jfree.data.time.Week week90 = new org.jfree.data.time.Week(date89);
        java.util.TimeZone timeZone91 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod92 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass75, date89, timeZone91);
        org.jfree.data.time.Week week93 = new org.jfree.data.time.Week(date62, timeZone91);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod94 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass40, date48, timeZone91);
        boolean boolean95 = week2.equals((java.lang.Object) wildcardClass40);
        java.util.Date date96 = week2.getEnd();
        java.lang.Class<?> wildcardClass97 = date96.getClass();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertNotNull(regularTimePeriod11);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-60506053200001L) + "'", long14 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 2791L + "'", long15 == 2791L);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Week 35, 52" + "'", str19, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-60506053200001L) + "'", long20 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 52 + "'", int27 == 52);
        org.junit.Assert.assertNotNull(timeZone28);
// flaky:         org.junit.Assert.assertEquals(timeZone28.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 52 + "'", int30 == 52);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 52 + "'", int34 == 52);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + (-60505750800001L) + "'", long35 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod39);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertNotNull(class41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 52 + "'", int53 == 52);
        org.junit.Assert.assertNotNull(timeZone54);
// flaky:         org.junit.Assert.assertEquals(timeZone54.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 52 + "'", int56 == 52);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + (-60506053200001L) + "'", long57 == (-60506053200001L));
        org.junit.Assert.assertNotNull(wildcardClass58);
        org.junit.Assert.assertNotNull(date62);
        org.junit.Assert.assertEquals(date62.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 52 + "'", int67 == 52);
        org.junit.Assert.assertNotNull(timeZone68);
// flaky:         org.junit.Assert.assertEquals(timeZone68.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1 + "'", int69 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod70);
        org.junit.Assert.assertNotNull(regularTimePeriod74);
        org.junit.Assert.assertNotNull(wildcardClass75);
        org.junit.Assert.assertNotNull(class76);
        org.junit.Assert.assertNotNull(date80);
        org.junit.Assert.assertEquals(date80.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone83);
// flaky:         org.junit.Assert.assertEquals(timeZone83.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod84);
        org.junit.Assert.assertNotNull(regularTimePeriod85);
        org.junit.Assert.assertNotNull(date89);
        org.junit.Assert.assertEquals(date89.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone91);
// flaky:         org.junit.Assert.assertEquals(timeZone91.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNotNull(regularTimePeriod92);
        org.junit.Assert.assertNotNull(regularTimePeriod94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertNotNull(date96);
        org.junit.Assert.assertEquals(date96.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test2240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2240");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        java.lang.String str10 = week2.toString();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Week 35, 52" + "'", str10, "Week 35, 52");
    }

    @Test
    public void test2241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2241");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, (int) 'a');
        org.jfree.data.time.Week week5 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod6 = week5.next();
        long long7 = week5.getMiddleMillisecond();
        java.lang.String str8 = week5.toString();
        boolean boolean9 = week2.equals((java.lang.Object) week5);
        int int10 = week5.getWeek();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod11 = week5.next();
        long long12 = week5.getSerialIndex();
        long long13 = week5.getSerialIndex();
        org.junit.Assert.assertNotNull(regularTimePeriod6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-60506053200001L) + "'", long7 == (-60506053200001L));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Week 35, 52" + "'", str8, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 35 + "'", int10 == 35);
        org.junit.Assert.assertNotNull(regularTimePeriod11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 2791L + "'", long12 == 2791L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 2791L + "'", long13 == 2791L);
    }

    @Test
    public void test2242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2242");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        int int10 = week2.getYearValue();
        long long11 = week2.getLastMillisecond();
        int int12 = week2.getWeek();
        java.util.Date date13 = week2.getEnd();
        org.jfree.data.time.Week week16 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date17 = week16.getStart();
        java.util.Date date18 = week16.getEnd();
        org.jfree.data.time.Week week21 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod22 = week21.next();
        java.lang.Class<?> wildcardClass23 = week21.getClass();
        java.lang.Class class24 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass23);
        org.jfree.data.time.Week week27 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date28 = week27.getStart();
        java.lang.Class class29 = null;
        java.util.Date date30 = null;
        java.util.TimeZone timeZone31 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod32 = org.jfree.data.time.RegularTimePeriod.createInstance(class29, date30, timeZone31);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod33 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass23, date28, timeZone31);
        org.jfree.data.time.Week week34 = new org.jfree.data.time.Week(date18, timeZone31);
        org.jfree.data.time.Week week35 = new org.jfree.data.time.Week(date13, timeZone31);
        java.util.Date date36 = week35.getStart();
        long long37 = week35.getLastMillisecond();
        int int38 = week35.getYearValue();
        java.lang.Class<?> wildcardClass39 = week35.getClass();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 52 + "'", int10 == 52);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-60505750800001L) + "'", long11 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 35 + "'", int12 == 35);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod22);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertNotNull(class24);
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone31);
// flaky:         org.junit.Assert.assertEquals(timeZone31.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod32);
        org.junit.Assert.assertNotNull(regularTimePeriod33);
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + (-60505750800001L) + "'", long37 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 52 + "'", int38 == 52);
        org.junit.Assert.assertNotNull(wildcardClass39);
    }

    @Test
    public void test2243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2243");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getSerialIndex();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.next();
        java.util.Date date6 = regularTimePeriod5.getEnd();
        org.jfree.data.time.Week week9 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date10 = week9.getStart();
        java.util.Date date11 = week9.getEnd();
        org.jfree.data.time.Week week14 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod15 = week14.next();
        java.lang.Class<?> wildcardClass16 = week14.getClass();
        java.lang.Class class17 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass16);
        org.jfree.data.time.Week week20 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date21 = week20.getStart();
        java.lang.Class class22 = null;
        java.util.Date date23 = null;
        java.util.TimeZone timeZone24 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod25 = org.jfree.data.time.RegularTimePeriod.createInstance(class22, date23, timeZone24);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod26 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass16, date21, timeZone24);
        org.jfree.data.time.Week week27 = new org.jfree.data.time.Week(date11, timeZone24);
        org.jfree.data.time.Week week28 = new org.jfree.data.time.Week(date6, timeZone24);
        long long29 = week28.getLastMillisecond();
        int int30 = week28.getYearValue();
        java.util.Date date31 = week28.getEnd();
        org.jfree.data.time.Week week32 = new org.jfree.data.time.Week(date31);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 2791L + "'", long4 == 2791L);
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Sep 02 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod15);
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertNotNull(class17);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone24);
// flaky:         org.junit.Assert.assertEquals(timeZone24.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod25);
        org.junit.Assert.assertNotNull(regularTimePeriod26);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + (-60505146000001L) + "'", long29 == (-60505146000001L));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 52 + "'", int30 == 52);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Sat Sep 02 23:59:59 CET 52");
    }

    @Test
    public void test2244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2244");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.util.Date date3 = week2.getStart();
        int int4 = week2.getYearValue();
        java.util.Date date5 = week2.getEnd();
        org.jfree.data.time.Week week6 = new org.jfree.data.time.Week(date5);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod7 = week6.previous();
        java.util.Date date8 = week6.getStart();
        org.jfree.data.time.Week week11 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str12 = week11.toString();
        long long13 = week11.getSerialIndex();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod14 = week11.next();
        java.util.Date date15 = regularTimePeriod14.getEnd();
        org.jfree.data.time.Week week18 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date19 = week18.getStart();
        org.jfree.data.time.Week week22 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod23 = week22.next();
        int int24 = week22.getYearValue();
        java.util.TimeZone timeZone25 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int26 = week22.compareTo((java.lang.Object) timeZone25);
        org.jfree.data.time.Week week27 = new org.jfree.data.time.Week(date19, timeZone25);
        org.jfree.data.time.Week week28 = new org.jfree.data.time.Week(date15, timeZone25);
        org.jfree.data.time.Week week31 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str32 = week31.toString();
        long long33 = week31.getSerialIndex();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod34 = week31.next();
        java.util.Date date35 = regularTimePeriod34.getEnd();
        org.jfree.data.time.Week week38 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date39 = week38.getStart();
        org.jfree.data.time.Week week42 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod43 = week42.next();
        int int44 = week42.getYearValue();
        java.util.TimeZone timeZone45 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int46 = week42.compareTo((java.lang.Object) timeZone45);
        org.jfree.data.time.Week week47 = new org.jfree.data.time.Week(date39, timeZone45);
        org.jfree.data.time.Week week48 = new org.jfree.data.time.Week(date35, timeZone45);
        org.jfree.data.time.Week week49 = new org.jfree.data.time.Week(date15, timeZone45);
        org.jfree.data.time.Week week52 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod53 = week52.next();
        int int54 = week52.getYearValue();
        java.util.TimeZone timeZone55 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int56 = week52.compareTo((java.lang.Object) timeZone55);
        int int57 = week52.getYearValue();
        long long58 = week52.getMiddleMillisecond();
        java.lang.Class<?> wildcardClass59 = week52.getClass();
        org.jfree.data.time.Week week62 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date63 = week62.getStart();
        org.jfree.data.time.Week week66 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod67 = week66.next();
        int int68 = week66.getYearValue();
        java.util.TimeZone timeZone69 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int70 = week66.compareTo((java.lang.Object) timeZone69);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod71 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass59, date63, timeZone69);
        org.jfree.data.time.Week week74 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod75 = week74.next();
        java.lang.Class<?> wildcardClass76 = week74.getClass();
        java.lang.Class class77 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass76);
        org.jfree.data.time.Week week80 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date81 = week80.getStart();
        java.lang.Class class82 = null;
        java.util.Date date83 = null;
        java.util.TimeZone timeZone84 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod85 = org.jfree.data.time.RegularTimePeriod.createInstance(class82, date83, timeZone84);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod86 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass76, date81, timeZone84);
        org.jfree.data.time.Week week89 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date90 = week89.getStart();
        org.jfree.data.time.Week week91 = new org.jfree.data.time.Week(date90);
        java.util.TimeZone timeZone92 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod93 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass76, date90, timeZone92);
        org.jfree.data.time.Week week94 = new org.jfree.data.time.Week(date63, timeZone92);
        org.jfree.data.time.Week week95 = new org.jfree.data.time.Week(date15, timeZone92);
        org.jfree.data.time.Week week96 = new org.jfree.data.time.Week(date8, timeZone92);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod7);
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Week 35, 52" + "'", str12, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 2791L + "'", long13 == 2791L);
        org.junit.Assert.assertNotNull(regularTimePeriod14);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Sat Sep 02 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 52 + "'", int24 == 52);
        org.junit.Assert.assertNotNull(timeZone25);
// flaky:         org.junit.Assert.assertEquals(timeZone25.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Week 35, 52" + "'", str32, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 2791L + "'", long33 == 2791L);
        org.junit.Assert.assertNotNull(regularTimePeriod34);
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Sat Sep 02 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 52 + "'", int44 == 52);
        org.junit.Assert.assertNotNull(timeZone45);
// flaky:         org.junit.Assert.assertEquals(timeZone45.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 52 + "'", int54 == 52);
        org.junit.Assert.assertNotNull(timeZone55);
// flaky:         org.junit.Assert.assertEquals(timeZone55.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 52 + "'", int57 == 52);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + (-60506053200001L) + "'", long58 == (-60506053200001L));
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(date63);
        org.junit.Assert.assertEquals(date63.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 52 + "'", int68 == 52);
        org.junit.Assert.assertNotNull(timeZone69);
// flaky:         org.junit.Assert.assertEquals(timeZone69.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod71);
        org.junit.Assert.assertNotNull(regularTimePeriod75);
        org.junit.Assert.assertNotNull(wildcardClass76);
        org.junit.Assert.assertNotNull(class77);
        org.junit.Assert.assertNotNull(date81);
        org.junit.Assert.assertEquals(date81.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone84);
// flaky:         org.junit.Assert.assertEquals(timeZone84.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod85);
        org.junit.Assert.assertNotNull(regularTimePeriod86);
        org.junit.Assert.assertNotNull(date90);
        org.junit.Assert.assertEquals(date90.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone92);
// flaky:         org.junit.Assert.assertEquals(timeZone92.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNotNull(regularTimePeriod93);
    }

    @Test
    public void test2245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2245");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod11 = week2.next();
        java.util.Date date12 = week2.getStart();
        java.util.Date date13 = week2.getStart();
        org.jfree.data.time.Week week16 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod17 = week16.next();
        int int18 = week16.getYearValue();
        java.util.TimeZone timeZone19 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int20 = week16.compareTo((java.lang.Object) timeZone19);
        int int21 = week16.getYearValue();
        int int23 = week16.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod24 = week16.previous();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod25 = week16.next();
        org.jfree.data.time.Week week28 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod29 = week28.next();
        java.lang.Class<?> wildcardClass30 = week28.getClass();
        java.lang.Class class31 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass30);
        java.lang.Class class32 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass30);
        boolean boolean33 = week16.equals((java.lang.Object) wildcardClass30);
        org.jfree.data.time.Week week36 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod37 = week36.previous();
        int int38 = week36.getYearValue();
        java.util.Date date39 = week36.getEnd();
        java.lang.String str40 = week36.toString();
        java.util.Date date41 = week36.getEnd();
        org.jfree.data.time.Week week44 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str45 = week44.toString();
        long long46 = week44.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod47 = week44.next();
        java.util.Date date48 = week44.getEnd();
        org.jfree.data.time.Week week49 = new org.jfree.data.time.Week(date48);
        org.jfree.data.time.Week week50 = new org.jfree.data.time.Week(date48);
        org.jfree.data.time.Week week53 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str54 = week53.toString();
        long long55 = week53.getMiddleMillisecond();
        long long56 = week53.getLastMillisecond();
        org.jfree.data.time.Week week59 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod60 = week59.next();
        java.lang.Class<?> wildcardClass61 = week59.getClass();
        java.lang.Class class62 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass61);
        int int63 = week53.compareTo((java.lang.Object) wildcardClass61);
        java.lang.Class class64 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass61);
        org.jfree.data.time.Week week67 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod68 = week67.next();
        java.lang.Class<?> wildcardClass69 = week67.getClass();
        java.lang.Class class70 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass69);
        org.jfree.data.time.Week week73 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date74 = week73.getStart();
        java.lang.Class class75 = null;
        java.util.Date date76 = null;
        java.util.TimeZone timeZone77 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod78 = org.jfree.data.time.RegularTimePeriod.createInstance(class75, date76, timeZone77);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod79 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass69, date74, timeZone77);
        java.util.TimeZone timeZone80 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod81 = org.jfree.data.time.RegularTimePeriod.createInstance(class64, date74, timeZone80);
        org.jfree.data.time.Week week82 = new org.jfree.data.time.Week(date48, timeZone80);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod83 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass30, date41, timeZone80);
        org.jfree.data.time.Week week84 = new org.jfree.data.time.Week(date13, timeZone80);
        java.util.Calendar calendar85 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long86 = week84.getLastMillisecond(calendar85);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertNotNull(regularTimePeriod11);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 52 + "'", int18 == 52);
        org.junit.Assert.assertNotNull(timeZone19);
// flaky:         org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 52 + "'", int21 == 52);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod24);
        org.junit.Assert.assertNotNull(regularTimePeriod25);
        org.junit.Assert.assertNotNull(regularTimePeriod29);
        org.junit.Assert.assertNotNull(wildcardClass30);
        org.junit.Assert.assertNotNull(class31);
        org.junit.Assert.assertNotNull(class32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(regularTimePeriod37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 52 + "'", int38 == 52);
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Week 35, 52" + "'", str40, "Week 35, 52");
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Week 35, 52" + "'", str45, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + (-60506053200001L) + "'", long46 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod47);
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "Week 35, 52" + "'", str54, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + (-60506053200001L) + "'", long55 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + (-60505750800001L) + "'", long56 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod60);
        org.junit.Assert.assertNotNull(wildcardClass61);
        org.junit.Assert.assertNotNull(class62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertNotNull(class64);
        org.junit.Assert.assertNotNull(regularTimePeriod68);
        org.junit.Assert.assertNotNull(wildcardClass69);
        org.junit.Assert.assertNotNull(class70);
        org.junit.Assert.assertNotNull(date74);
        org.junit.Assert.assertEquals(date74.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone77);
// flaky:         org.junit.Assert.assertEquals(timeZone77.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod78);
        org.junit.Assert.assertNotNull(regularTimePeriod79);
        org.junit.Assert.assertNotNull(timeZone80);
// flaky:         org.junit.Assert.assertEquals(timeZone80.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod81);
        org.junit.Assert.assertNotNull(regularTimePeriod83);
    }

    @Test
    public void test2246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2246");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week();
        long long3 = week2.getFirstMillisecond();
        org.jfree.data.time.Year year4 = week2.getYear();
        org.jfree.data.time.Week week5 = new org.jfree.data.time.Week(52, year4);
        org.jfree.data.time.Week week6 = new org.jfree.data.time.Week((int) (byte) -1, year4);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod7 = week6.previous();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod8 = week6.next();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1637449200000L + "'", long3 == 1637449200000L);
        org.junit.Assert.assertNotNull(year4);
        org.junit.Assert.assertNotNull(regularTimePeriod7);
        org.junit.Assert.assertNotNull(regularTimePeriod8);
    }

    @Test
    public void test2247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2247");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod11 = week2.next();
        java.util.Date date12 = week2.getStart();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod13 = week2.previous();
        long long14 = week2.getMiddleMillisecond();
        long long15 = week2.getSerialIndex();
        org.jfree.data.time.Week week18 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str19 = week18.toString();
        long long20 = week18.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod21 = week18.next();
        java.util.Date date22 = week18.getEnd();
        org.jfree.data.time.Week week25 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod26 = week25.next();
        int int27 = week25.getYearValue();
        java.util.TimeZone timeZone28 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int29 = week25.compareTo((java.lang.Object) timeZone28);
        int int30 = week25.getYearValue();
        int int32 = week25.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod33 = week25.previous();
        int int34 = week25.getYearValue();
        long long35 = week25.getLastMillisecond();
        org.jfree.data.time.Week week38 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod39 = week38.next();
        java.lang.Class<?> wildcardClass40 = week38.getClass();
        java.lang.Class class41 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass40);
        boolean boolean42 = week25.equals((java.lang.Object) wildcardClass40);
        boolean boolean43 = week18.equals((java.lang.Object) wildcardClass40);
        org.jfree.data.time.Week week46 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date47 = week46.getStart();
        java.util.Date date48 = week46.getEnd();
        org.jfree.data.time.Week week51 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod52 = week51.next();
        int int53 = week51.getYearValue();
        java.util.TimeZone timeZone54 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int55 = week51.compareTo((java.lang.Object) timeZone54);
        int int56 = week51.getYearValue();
        long long57 = week51.getMiddleMillisecond();
        java.lang.Class<?> wildcardClass58 = week51.getClass();
        org.jfree.data.time.Week week61 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date62 = week61.getStart();
        org.jfree.data.time.Week week65 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod66 = week65.next();
        int int67 = week65.getYearValue();
        java.util.TimeZone timeZone68 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int69 = week65.compareTo((java.lang.Object) timeZone68);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod70 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass58, date62, timeZone68);
        org.jfree.data.time.Week week73 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod74 = week73.next();
        java.lang.Class<?> wildcardClass75 = week73.getClass();
        java.lang.Class class76 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass75);
        org.jfree.data.time.Week week79 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date80 = week79.getStart();
        java.lang.Class class81 = null;
        java.util.Date date82 = null;
        java.util.TimeZone timeZone83 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod84 = org.jfree.data.time.RegularTimePeriod.createInstance(class81, date82, timeZone83);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod85 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass75, date80, timeZone83);
        org.jfree.data.time.Week week88 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date89 = week88.getStart();
        org.jfree.data.time.Week week90 = new org.jfree.data.time.Week(date89);
        java.util.TimeZone timeZone91 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod92 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass75, date89, timeZone91);
        org.jfree.data.time.Week week93 = new org.jfree.data.time.Week(date62, timeZone91);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod94 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass40, date48, timeZone91);
        boolean boolean95 = week2.equals((java.lang.Object) wildcardClass40);
        java.util.Date date96 = week2.getEnd();
        long long97 = week2.getLastMillisecond();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertNotNull(regularTimePeriod11);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-60506053200001L) + "'", long14 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 2791L + "'", long15 == 2791L);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Week 35, 52" + "'", str19, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-60506053200001L) + "'", long20 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 52 + "'", int27 == 52);
        org.junit.Assert.assertNotNull(timeZone28);
// flaky:         org.junit.Assert.assertEquals(timeZone28.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 52 + "'", int30 == 52);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 52 + "'", int34 == 52);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + (-60505750800001L) + "'", long35 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod39);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertNotNull(class41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 52 + "'", int53 == 52);
        org.junit.Assert.assertNotNull(timeZone54);
// flaky:         org.junit.Assert.assertEquals(timeZone54.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 52 + "'", int56 == 52);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + (-60506053200001L) + "'", long57 == (-60506053200001L));
        org.junit.Assert.assertNotNull(wildcardClass58);
        org.junit.Assert.assertNotNull(date62);
        org.junit.Assert.assertEquals(date62.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 52 + "'", int67 == 52);
        org.junit.Assert.assertNotNull(timeZone68);
// flaky:         org.junit.Assert.assertEquals(timeZone68.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1 + "'", int69 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod70);
        org.junit.Assert.assertNotNull(regularTimePeriod74);
        org.junit.Assert.assertNotNull(wildcardClass75);
        org.junit.Assert.assertNotNull(class76);
        org.junit.Assert.assertNotNull(date80);
        org.junit.Assert.assertEquals(date80.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone83);
// flaky:         org.junit.Assert.assertEquals(timeZone83.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod84);
        org.junit.Assert.assertNotNull(regularTimePeriod85);
        org.junit.Assert.assertNotNull(date89);
        org.junit.Assert.assertEquals(date89.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone91);
// flaky:         org.junit.Assert.assertEquals(timeZone91.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNotNull(regularTimePeriod92);
        org.junit.Assert.assertNotNull(regularTimePeriod94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertNotNull(date96);
        org.junit.Assert.assertEquals(date96.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + long97 + "' != '" + (-60505750800001L) + "'", long97 == (-60505750800001L));
    }

    @Test
    public void test2248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2248");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.next();
        java.lang.String str6 = week2.toString();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod7 = week2.previous();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod8 = week2.next();
        java.util.Date date9 = regularTimePeriod8.getEnd();
        long long10 = regularTimePeriod8.getMiddleMillisecond();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Week 35, 52" + "'", str6, "Week 35, 52");
        org.junit.Assert.assertNotNull(regularTimePeriod7);
        org.junit.Assert.assertNotNull(regularTimePeriod8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Sat Sep 02 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-60505448400001L) + "'", long10 == (-60505448400001L));
    }

    @Test
    public void test2249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2249");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(2, 10);
        java.util.Calendar calendar3 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long4 = week2.getMiddleMillisecond(calendar3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test2250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2250");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod11 = week2.next();
        java.util.Date date12 = week2.getStart();
        java.util.Date date13 = week2.getStart();
        org.jfree.data.time.Week week16 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod17 = week16.next();
        int int18 = week16.getYearValue();
        java.util.TimeZone timeZone19 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int20 = week16.compareTo((java.lang.Object) timeZone19);
        int int21 = week16.getYearValue();
        int int23 = week16.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod24 = week16.previous();
        int int25 = week16.getYearValue();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod26 = week16.next();
        java.lang.Class<?> wildcardClass27 = regularTimePeriod26.getClass();
        org.jfree.data.time.Week week30 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod31 = week30.next();
        java.lang.Class<?> wildcardClass32 = week30.getClass();
        java.lang.Class class33 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass32);
        java.lang.Class class34 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass32);
        org.jfree.data.time.Week week37 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod38 = week37.next();
        int int39 = week37.getYearValue();
        java.util.TimeZone timeZone40 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int41 = week37.compareTo((java.lang.Object) timeZone40);
        int int42 = week37.getYearValue();
        int int44 = week37.compareTo((java.lang.Object) 9);
        java.util.Date date45 = week37.getStart();
        org.jfree.data.time.Week week46 = new org.jfree.data.time.Week(date45);
        org.jfree.data.time.Week week49 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod50 = week49.next();
        int int51 = week49.getYearValue();
        java.util.TimeZone timeZone52 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int53 = week49.compareTo((java.lang.Object) timeZone52);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod54 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass32, date45, timeZone52);
        org.jfree.data.time.Week week57 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str58 = week57.toString();
        long long59 = week57.getMiddleMillisecond();
        long long60 = week57.getLastMillisecond();
        org.jfree.data.time.Week week63 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod64 = week63.next();
        java.lang.Class<?> wildcardClass65 = week63.getClass();
        java.lang.Class class66 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass65);
        int int67 = week57.compareTo((java.lang.Object) wildcardClass65);
        java.lang.Class class68 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass65);
        org.jfree.data.time.Week week71 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod72 = week71.next();
        java.lang.Class<?> wildcardClass73 = week71.getClass();
        java.lang.Class class74 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass73);
        org.jfree.data.time.Week week77 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date78 = week77.getStart();
        java.lang.Class class79 = null;
        java.util.Date date80 = null;
        java.util.TimeZone timeZone81 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod82 = org.jfree.data.time.RegularTimePeriod.createInstance(class79, date80, timeZone81);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod83 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass73, date78, timeZone81);
        java.util.TimeZone timeZone84 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod85 = org.jfree.data.time.RegularTimePeriod.createInstance(class68, date78, timeZone84);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod86 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass27, date45, timeZone84);
        org.jfree.data.time.Week week87 = new org.jfree.data.time.Week(date13, timeZone84);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod88 = week87.previous();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertNotNull(regularTimePeriod11);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 52 + "'", int18 == 52);
        org.junit.Assert.assertNotNull(timeZone19);
// flaky:         org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 52 + "'", int21 == 52);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 52 + "'", int25 == 52);
        org.junit.Assert.assertNotNull(regularTimePeriod26);
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertNotNull(regularTimePeriod31);
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertNotNull(class33);
        org.junit.Assert.assertNotNull(class34);
        org.junit.Assert.assertNotNull(regularTimePeriod38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 52 + "'", int39 == 52);
        org.junit.Assert.assertNotNull(timeZone40);
// flaky:         org.junit.Assert.assertEquals(timeZone40.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 52 + "'", int42 == 52);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 52 + "'", int51 == 52);
        org.junit.Assert.assertNotNull(timeZone52);
// flaky:         org.junit.Assert.assertEquals(timeZone52.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod54);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "Week 35, 52" + "'", str58, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + (-60506053200001L) + "'", long59 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + (-60505750800001L) + "'", long60 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod64);
        org.junit.Assert.assertNotNull(wildcardClass65);
        org.junit.Assert.assertNotNull(class66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertNotNull(class68);
        org.junit.Assert.assertNotNull(regularTimePeriod72);
        org.junit.Assert.assertNotNull(wildcardClass73);
        org.junit.Assert.assertNotNull(class74);
        org.junit.Assert.assertNotNull(date78);
        org.junit.Assert.assertEquals(date78.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone81);
// flaky:         org.junit.Assert.assertEquals(timeZone81.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod82);
        org.junit.Assert.assertNotNull(regularTimePeriod83);
        org.junit.Assert.assertNotNull(timeZone84);
// flaky:         org.junit.Assert.assertEquals(timeZone84.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod85);
        org.junit.Assert.assertNotNull(regularTimePeriod86);
        org.junit.Assert.assertNotNull(regularTimePeriod88);
    }

    @Test
    public void test2251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2251");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        long long5 = week2.getLastMillisecond();
        java.util.Date date6 = week2.getEnd();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod7 = week2.previous();
        long long8 = week2.getSerialIndex();
        java.util.Date date9 = week2.getStart();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-60505750800001L) + "'", long5 == (-60505750800001L));
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 2791L + "'", long8 == 2791L);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Sun Aug 20 00:00:00 CET 52");
    }

    @Test
    public void test2252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2252");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(35, 0);
        long long3 = week2.getSerialIndex();
        long long4 = week2.getFirstMillisecond();
        java.util.Date date5 = week2.getStart();
        java.util.Calendar calendar6 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long7 = week2.getMiddleMillisecond(calendar6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 35L + "'", long3 == 35L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-62147178000000L) + "'", long4 == (-62147178000000L));
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Sun Aug 22 00:00:00 CET 1");
    }

    @Test
    public void test2253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2253");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date3 = week2.getStart();
        java.util.Date date4 = week2.getEnd();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod8 = week7.next();
        java.lang.Class<?> wildcardClass9 = week7.getClass();
        java.lang.Class class10 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass9);
        org.jfree.data.time.Week week13 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date14 = week13.getStart();
        java.lang.Class class15 = null;
        java.util.Date date16 = null;
        java.util.TimeZone timeZone17 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod18 = org.jfree.data.time.RegularTimePeriod.createInstance(class15, date16, timeZone17);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod19 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass9, date14, timeZone17);
        org.jfree.data.time.Week week20 = new org.jfree.data.time.Week(date4, timeZone17);
        java.util.Date date21 = week20.getEnd();
        int int22 = week20.getWeek();
        long long23 = week20.getSerialIndex();
        java.util.Date date24 = week20.getStart();
        java.lang.String str25 = week20.toString();
        java.util.Date date26 = week20.getEnd();
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(class10);
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone17);
// flaky:         org.junit.Assert.assertEquals(timeZone17.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod18);
        org.junit.Assert.assertNotNull(regularTimePeriod19);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 9 + "'", int22 == 9);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 5150L + "'", long23 == 5150L);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Week 9, 97" + "'", str25, "Week 9, 97");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Sat Mar 04 23:59:59 CET 97");
    }

    @Test
    public void test2254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2254");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        long long8 = week2.getMiddleMillisecond();
        java.lang.Class<?> wildcardClass9 = week2.getClass();
        org.jfree.data.time.Week week12 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date13 = week12.getStart();
        org.jfree.data.time.Week week16 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod17 = week16.next();
        int int18 = week16.getYearValue();
        java.util.TimeZone timeZone19 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int20 = week16.compareTo((java.lang.Object) timeZone19);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod21 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass9, date13, timeZone19);
        org.jfree.data.time.Week week22 = new org.jfree.data.time.Week(date13);
        org.jfree.data.time.Week week25 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod26 = week25.next();
        int int27 = week25.getYearValue();
        java.util.TimeZone timeZone28 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int29 = week25.compareTo((java.lang.Object) timeZone28);
        org.jfree.data.time.Week week30 = new org.jfree.data.time.Week(date13, timeZone28);
        org.jfree.data.time.Week week33 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str34 = week33.toString();
        long long35 = week33.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod36 = week33.next();
        java.lang.String str37 = week33.toString();
        boolean boolean38 = week30.equals((java.lang.Object) week33);
        int int39 = week30.getWeek();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-60506053200001L) + "'", long8 == (-60506053200001L));
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 52 + "'", int18 == 52);
        org.junit.Assert.assertNotNull(timeZone19);
// flaky:         org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod21);
        org.junit.Assert.assertNotNull(regularTimePeriod26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 52 + "'", int27 == 52);
        org.junit.Assert.assertNotNull(timeZone28);
// flaky:         org.junit.Assert.assertEquals(timeZone28.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Week 35, 52" + "'", str34, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + (-60506053200001L) + "'", long35 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Week 35, 52" + "'", str37, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 9 + "'", int39 == 9);
    }

    @Test
    public void test2255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2255");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.util.Date date3 = week2.getStart();
        org.jfree.data.time.Week week6 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.util.Date date7 = week6.getStart();
        int int8 = week6.getYearValue();
        java.util.Date date9 = week6.getEnd();
        org.jfree.data.time.Week week12 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod13 = week12.next();
        java.lang.Class<?> wildcardClass14 = week12.getClass();
        java.lang.Class class15 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass14);
        java.lang.Class class16 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass14);
        org.jfree.data.time.Week week19 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod20 = week19.next();
        int int21 = week19.getYearValue();
        java.util.TimeZone timeZone22 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int23 = week19.compareTo((java.lang.Object) timeZone22);
        int int24 = week19.getYearValue();
        int int26 = week19.compareTo((java.lang.Object) 9);
        java.util.Date date27 = week19.getStart();
        org.jfree.data.time.Week week28 = new org.jfree.data.time.Week(date27);
        org.jfree.data.time.Week week31 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod32 = week31.next();
        int int33 = week31.getYearValue();
        java.util.TimeZone timeZone34 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int35 = week31.compareTo((java.lang.Object) timeZone34);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod36 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass14, date27, timeZone34);
        org.jfree.data.time.Week week39 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod40 = week39.previous();
        int int41 = week39.getYearValue();
        java.util.Date date42 = week39.getStart();
        java.util.TimeZone timeZone43 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.Week week44 = new org.jfree.data.time.Week(date42, timeZone43);
        org.jfree.data.time.Week week45 = new org.jfree.data.time.Week(date27, timeZone43);
        org.jfree.data.time.Week week46 = new org.jfree.data.time.Week(date9, timeZone43);
        boolean boolean47 = week2.equals((java.lang.Object) date9);
        org.jfree.data.time.Week week50 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date51 = week50.getStart();
        org.jfree.data.time.Week week54 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod55 = week54.next();
        int int56 = week54.getYearValue();
        java.util.TimeZone timeZone57 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int58 = week54.compareTo((java.lang.Object) timeZone57);
        org.jfree.data.time.Week week59 = new org.jfree.data.time.Week(date51, timeZone57);
        org.jfree.data.time.Week week60 = new org.jfree.data.time.Week(date51);
        org.jfree.data.time.Week week63 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod64 = week63.next();
        int int65 = week63.getYearValue();
        java.util.TimeZone timeZone66 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int67 = week63.compareTo((java.lang.Object) timeZone66);
        int int68 = week63.getYearValue();
        long long69 = week63.getMiddleMillisecond();
        java.lang.Class<?> wildcardClass70 = week63.getClass();
        org.jfree.data.time.Week week73 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date74 = week73.getStart();
        org.jfree.data.time.Week week77 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod78 = week77.next();
        int int79 = week77.getYearValue();
        java.util.TimeZone timeZone80 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int81 = week77.compareTo((java.lang.Object) timeZone80);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod82 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass70, date74, timeZone80);
        org.jfree.data.time.Week week83 = new org.jfree.data.time.Week(date74);
        org.jfree.data.time.Week week86 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod87 = week86.next();
        int int88 = week86.getYearValue();
        java.util.TimeZone timeZone89 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int90 = week86.compareTo((java.lang.Object) timeZone89);
        org.jfree.data.time.Week week91 = new org.jfree.data.time.Week(date74, timeZone89);
        int int92 = week60.compareTo((java.lang.Object) timeZone89);
        org.jfree.data.time.Week week93 = new org.jfree.data.time.Week(date9, timeZone89);
        long long94 = week93.getSerialIndex();
        java.util.Calendar calendar95 = null;
        // The following exception was thrown during execution in test generation
        try {
            week93.peg(calendar95);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 52 + "'", int8 == 52);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod13);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(class15);
        org.junit.Assert.assertNotNull(class16);
        org.junit.Assert.assertNotNull(regularTimePeriod20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 52 + "'", int21 == 52);
        org.junit.Assert.assertNotNull(timeZone22);
// flaky:         org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 52 + "'", int24 == 52);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 52 + "'", int33 == 52);
        org.junit.Assert.assertNotNull(timeZone34);
// flaky:         org.junit.Assert.assertEquals(timeZone34.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod36);
        org.junit.Assert.assertNotNull(regularTimePeriod40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 52 + "'", int41 == 52);
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(timeZone43);
// flaky:         org.junit.Assert.assertEquals(timeZone43.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(date51);
        org.junit.Assert.assertEquals(date51.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 52 + "'", int56 == 52);
        org.junit.Assert.assertNotNull(timeZone57);
// flaky:         org.junit.Assert.assertEquals(timeZone57.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 52 + "'", int65 == 52);
        org.junit.Assert.assertNotNull(timeZone66);
// flaky:         org.junit.Assert.assertEquals(timeZone66.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 52 + "'", int68 == 52);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + (-60506053200001L) + "'", long69 == (-60506053200001L));
        org.junit.Assert.assertNotNull(wildcardClass70);
        org.junit.Assert.assertNotNull(date74);
        org.junit.Assert.assertEquals(date74.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 52 + "'", int79 == 52);
        org.junit.Assert.assertNotNull(timeZone80);
// flaky:         org.junit.Assert.assertEquals(timeZone80.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 1 + "'", int81 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod82);
        org.junit.Assert.assertNotNull(regularTimePeriod87);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 52 + "'", int88 == 52);
        org.junit.Assert.assertNotNull(timeZone89);
// flaky:         org.junit.Assert.assertEquals(timeZone89.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 1 + "'", int90 == 1);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 1 + "'", int92 == 1);
        org.junit.Assert.assertTrue("'" + long94 + "' != '" + 2791L + "'", long94 == 2791L);
    }

    @Test
    public void test2256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2256");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.util.Date date3 = week2.getStart();
        int int4 = week2.getYearValue();
        java.util.Date date5 = week2.getEnd();
        long long6 = week2.getMiddleMillisecond();
        long long7 = week2.getSerialIndex();
        long long8 = week2.getFirstMillisecond();
        java.util.Calendar calendar9 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long10 = week2.getMiddleMillisecond(calendar9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-60506053200001L) + "'", long6 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 2791L + "'", long7 == 2791L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-60506355600000L) + "'", long8 == (-60506355600000L));
    }

    @Test
    public void test2257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2257");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        long long5 = week2.getLastMillisecond();
        java.util.Date date6 = week2.getEnd();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod7 = week2.previous();
        long long8 = week2.getMiddleMillisecond();
        org.jfree.data.time.Week week11 = new org.jfree.data.time.Week(9, (int) 'a');
        org.jfree.data.time.Week week14 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod15 = week14.next();
        long long16 = week14.getMiddleMillisecond();
        java.lang.String str17 = week14.toString();
        boolean boolean18 = week11.equals((java.lang.Object) week14);
        java.util.Date date19 = week11.getStart();
        int int20 = week2.compareTo((java.lang.Object) date19);
        int int21 = week2.getWeek();
        org.jfree.data.time.Week week24 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str25 = week24.toString();
        long long26 = week24.getSerialIndex();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod27 = week24.next();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod28 = week24.previous();
        java.lang.Class<?> wildcardClass29 = week24.getClass();
        java.lang.Class class30 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass29);
        java.lang.Class class31 = org.jfree.data.time.RegularTimePeriod.downsize(class30);
        boolean boolean32 = week2.equals((java.lang.Object) class30);
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-60505750800001L) + "'", long5 == (-60505750800001L));
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-60506053200001L) + "'", long8 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-60506053200001L) + "'", long16 == (-60506053200001L));
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Week 35, 52" + "'", str17, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 35 + "'", int21 == 35);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Week 35, 52" + "'", str25, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 2791L + "'", long26 == 2791L);
        org.junit.Assert.assertNotNull(regularTimePeriod27);
        org.junit.Assert.assertNotNull(regularTimePeriod28);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(class30);
        org.junit.Assert.assertNotNull(class31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test2258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2258");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.next();
        java.util.Date date6 = week2.getEnd();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week(date6);
        long long8 = week7.getLastMillisecond();
        java.lang.String str9 = week7.toString();
        long long10 = week7.getSerialIndex();
        java.util.Date date11 = week7.getStart();
        org.jfree.data.time.Week week12 = new org.jfree.data.time.Week(date11);
        java.util.Date date13 = week12.getEnd();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-60505750800001L) + "'", long8 == (-60505750800001L));
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Week 35, 52" + "'", str9, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 2791L + "'", long10 == 2791L);
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sat Aug 26 23:59:59 CET 52");
    }

    @Test
    public void test2259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2259");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        int int11 = week2.getYearValue();
        long long12 = week2.getLastMillisecond();
        int int13 = week2.getWeek();
        int int15 = week2.compareTo((java.lang.Object) 0);
        int int16 = week2.getWeek();
        java.util.Date date17 = week2.getStart();
        long long18 = week2.getLastMillisecond();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-60505750800001L) + "'", long12 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 35 + "'", int16 == 35);
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-60505750800001L) + "'", long18 == (-60505750800001L));
    }

    @Test
    public void test2260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2260");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        java.util.Date date10 = week2.getStart();
        org.jfree.data.time.Week week13 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod14 = week13.next();
        java.lang.Class<?> wildcardClass15 = week13.getClass();
        java.lang.Class class16 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass15);
        java.lang.Class class17 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass15);
        org.jfree.data.time.Week week20 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod21 = week20.next();
        int int22 = week20.getYearValue();
        java.util.TimeZone timeZone23 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int24 = week20.compareTo((java.lang.Object) timeZone23);
        int int25 = week20.getYearValue();
        int int27 = week20.compareTo((java.lang.Object) 9);
        java.util.Date date28 = week20.getStart();
        org.jfree.data.time.Week week29 = new org.jfree.data.time.Week(date28);
        org.jfree.data.time.Week week32 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod33 = week32.next();
        int int34 = week32.getYearValue();
        java.util.TimeZone timeZone35 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int36 = week32.compareTo((java.lang.Object) timeZone35);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod37 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass15, date28, timeZone35);
        org.jfree.data.time.Week week40 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod41 = week40.previous();
        int int42 = week40.getYearValue();
        java.util.Date date43 = week40.getStart();
        java.util.TimeZone timeZone44 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.Week week45 = new org.jfree.data.time.Week(date43, timeZone44);
        org.jfree.data.time.Week week46 = new org.jfree.data.time.Week(date28, timeZone44);
        org.jfree.data.time.Week week47 = new org.jfree.data.time.Week(date10, timeZone44);
        org.jfree.data.time.Week week48 = new org.jfree.data.time.Week(date10);
        java.util.Calendar calendar49 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long50 = week48.getFirstMillisecond(calendar49);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod14);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNotNull(class16);
        org.junit.Assert.assertNotNull(class17);
        org.junit.Assert.assertNotNull(regularTimePeriod21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 52 + "'", int22 == 52);
        org.junit.Assert.assertNotNull(timeZone23);
// flaky:         org.junit.Assert.assertEquals(timeZone23.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 52 + "'", int25 == 52);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 52 + "'", int34 == 52);
        org.junit.Assert.assertNotNull(timeZone35);
// flaky:         org.junit.Assert.assertEquals(timeZone35.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod37);
        org.junit.Assert.assertNotNull(regularTimePeriod41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 52 + "'", int42 == 52);
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(timeZone44);
// flaky:         org.junit.Assert.assertEquals(timeZone44.getDisplayName(), "Central European Time");
    }

    @Test
    public void test2261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2261");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.next();
        java.lang.Class<?> wildcardClass6 = regularTimePeriod5.getClass();
        java.lang.Class class7 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass6);
        java.lang.Class class8 = org.jfree.data.time.RegularTimePeriod.downsize(class7);
        java.lang.Class class9 = org.jfree.data.time.RegularTimePeriod.downsize(class7);
        org.jfree.data.time.Week week12 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str13 = week12.toString();
        long long14 = week12.getMiddleMillisecond();
        long long15 = week12.getLastMillisecond();
        org.jfree.data.time.Week week18 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod19 = week18.next();
        java.lang.Class<?> wildcardClass20 = week18.getClass();
        java.lang.Class class21 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass20);
        int int22 = week12.compareTo((java.lang.Object) wildcardClass20);
        java.lang.Class class23 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass20);
        org.jfree.data.time.Week week26 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod27 = week26.next();
        java.lang.Class<?> wildcardClass28 = week26.getClass();
        java.lang.Class class29 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass28);
        org.jfree.data.time.Week week32 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date33 = week32.getStart();
        java.lang.Class class34 = null;
        java.util.Date date35 = null;
        java.util.TimeZone timeZone36 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod37 = org.jfree.data.time.RegularTimePeriod.createInstance(class34, date35, timeZone36);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod38 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass28, date33, timeZone36);
        java.util.TimeZone timeZone39 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod40 = org.jfree.data.time.RegularTimePeriod.createInstance(class23, date33, timeZone39);
        org.jfree.data.time.Week week41 = new org.jfree.data.time.Week(date33);
        java.util.Date date42 = week41.getStart();
        java.lang.String str43 = week41.toString();
        java.util.Date date44 = week41.getEnd();
        java.lang.Class class45 = null;
        org.jfree.data.time.Week week48 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str49 = week48.toString();
        long long50 = week48.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod51 = week48.next();
        java.util.Date date52 = regularTimePeriod51.getEnd();
        org.jfree.data.time.Week week55 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str56 = week55.toString();
        long long57 = week55.getSerialIndex();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod58 = week55.next();
        java.util.Date date59 = regularTimePeriod58.getEnd();
        org.jfree.data.time.Week week62 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date63 = week62.getStart();
        org.jfree.data.time.Week week66 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod67 = week66.next();
        int int68 = week66.getYearValue();
        java.util.TimeZone timeZone69 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int70 = week66.compareTo((java.lang.Object) timeZone69);
        org.jfree.data.time.Week week71 = new org.jfree.data.time.Week(date63, timeZone69);
        org.jfree.data.time.Week week72 = new org.jfree.data.time.Week(date59, timeZone69);
        org.jfree.data.time.Week week75 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str76 = week75.toString();
        long long77 = week75.getSerialIndex();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod78 = week75.next();
        java.util.Date date79 = regularTimePeriod78.getEnd();
        org.jfree.data.time.Week week82 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date83 = week82.getStart();
        org.jfree.data.time.Week week86 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod87 = week86.next();
        int int88 = week86.getYearValue();
        java.util.TimeZone timeZone89 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int90 = week86.compareTo((java.lang.Object) timeZone89);
        org.jfree.data.time.Week week91 = new org.jfree.data.time.Week(date83, timeZone89);
        org.jfree.data.time.Week week92 = new org.jfree.data.time.Week(date79, timeZone89);
        org.jfree.data.time.Week week93 = new org.jfree.data.time.Week(date59, timeZone89);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod94 = org.jfree.data.time.RegularTimePeriod.createInstance(class45, date52, timeZone89);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod95 = org.jfree.data.time.RegularTimePeriod.createInstance(class7, date44, timeZone89);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(class7);
        org.junit.Assert.assertNotNull(class8);
        org.junit.Assert.assertNotNull(class9);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Week 35, 52" + "'", str13, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-60506053200001L) + "'", long14 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-60505750800001L) + "'", long15 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertNotNull(class21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(class23);
        org.junit.Assert.assertNotNull(regularTimePeriod27);
        org.junit.Assert.assertNotNull(wildcardClass28);
        org.junit.Assert.assertNotNull(class29);
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone36);
// flaky:         org.junit.Assert.assertEquals(timeZone36.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod37);
        org.junit.Assert.assertNotNull(regularTimePeriod38);
        org.junit.Assert.assertNotNull(timeZone39);
// flaky:         org.junit.Assert.assertEquals(timeZone39.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod40);
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Week 9, 97" + "'", str43, "Week 9, 97");
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "Week 35, 52" + "'", str49, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + (-60506053200001L) + "'", long50 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod51);
        org.junit.Assert.assertNotNull(date52);
        org.junit.Assert.assertEquals(date52.toString(), "Sat Sep 02 23:59:59 CET 52");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "Week 35, 52" + "'", str56, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 2791L + "'", long57 == 2791L);
        org.junit.Assert.assertNotNull(regularTimePeriod58);
        org.junit.Assert.assertNotNull(date59);
        org.junit.Assert.assertEquals(date59.toString(), "Sat Sep 02 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date63);
        org.junit.Assert.assertEquals(date63.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 52 + "'", int68 == 52);
        org.junit.Assert.assertNotNull(timeZone69);
// flaky:         org.junit.Assert.assertEquals(timeZone69.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "Week 35, 52" + "'", str76, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 2791L + "'", long77 == 2791L);
        org.junit.Assert.assertNotNull(regularTimePeriod78);
        org.junit.Assert.assertNotNull(date79);
        org.junit.Assert.assertEquals(date79.toString(), "Sat Sep 02 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date83);
        org.junit.Assert.assertEquals(date83.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod87);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 52 + "'", int88 == 52);
        org.junit.Assert.assertNotNull(timeZone89);
// flaky:         org.junit.Assert.assertEquals(timeZone89.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 1 + "'", int90 == 1);
        org.junit.Assert.assertNull(regularTimePeriod94);
        org.junit.Assert.assertNull(regularTimePeriod95);
    }

    @Test
    public void test2262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2262");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.next();
        java.util.Date date6 = week2.getEnd();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week(date6);
        long long8 = week7.getLastMillisecond();
        java.util.Date date9 = week7.getEnd();
        org.jfree.data.time.Week week10 = new org.jfree.data.time.Week(date9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod11 = week10.next();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod12 = week10.next();
        java.util.Date date13 = week10.getStart();
        org.jfree.data.time.Week week14 = new org.jfree.data.time.Week(date13);
        org.jfree.data.time.Week week15 = new org.jfree.data.time.Week(date13);
        java.util.Date date16 = week15.getStart();
        org.jfree.data.time.Week week19 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod20 = week19.next();
        int int21 = week19.getYearValue();
        java.util.TimeZone timeZone22 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int23 = week19.compareTo((java.lang.Object) timeZone22);
        int int24 = week19.getYearValue();
        int int26 = week19.compareTo((java.lang.Object) 9);
        int int27 = week19.getYearValue();
        java.lang.String str28 = week19.toString();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod29 = week19.next();
        java.util.Date date30 = week19.getStart();
        org.jfree.data.time.Week week33 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod34 = week33.next();
        int int35 = week33.getYearValue();
        java.util.TimeZone timeZone36 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int37 = week33.compareTo((java.lang.Object) timeZone36);
        int int38 = week33.getYearValue();
        long long39 = week33.getMiddleMillisecond();
        java.lang.Class<?> wildcardClass40 = week33.getClass();
        org.jfree.data.time.Week week43 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date44 = week43.getStart();
        org.jfree.data.time.Week week47 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod48 = week47.next();
        int int49 = week47.getYearValue();
        java.util.TimeZone timeZone50 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int51 = week47.compareTo((java.lang.Object) timeZone50);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod52 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass40, date44, timeZone50);
        org.jfree.data.time.Week week55 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date56 = week55.getStart();
        java.util.Date date57 = week55.getEnd();
        java.util.Date date58 = week55.getStart();
        org.jfree.data.time.Week week61 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date62 = week61.getStart();
        java.util.Date date63 = week61.getEnd();
        java.util.Date date64 = week61.getStart();
        org.jfree.data.time.Week week67 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date68 = week67.getStart();
        org.jfree.data.time.Week week71 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod72 = week71.next();
        int int73 = week71.getYearValue();
        java.util.TimeZone timeZone74 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int75 = week71.compareTo((java.lang.Object) timeZone74);
        org.jfree.data.time.Week week76 = new org.jfree.data.time.Week(date68, timeZone74);
        org.jfree.data.time.Week week77 = new org.jfree.data.time.Week(date64, timeZone74);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod78 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass40, date58, timeZone74);
        org.jfree.data.time.Week week79 = new org.jfree.data.time.Week(date30, timeZone74);
        java.util.Locale locale80 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Week week81 = new org.jfree.data.time.Week(date16, timeZone74, locale80);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'locale' argument.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-60505750800001L) + "'", long8 == (-60505750800001L));
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod11);
        org.junit.Assert.assertNotNull(regularTimePeriod12);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 52 + "'", int21 == 52);
        org.junit.Assert.assertNotNull(timeZone22);
// flaky:         org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 52 + "'", int24 == 52);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 52 + "'", int27 == 52);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Week 35, 52" + "'", str28, "Week 35, 52");
        org.junit.Assert.assertNotNull(regularTimePeriod29);
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 52 + "'", int35 == 52);
        org.junit.Assert.assertNotNull(timeZone36);
// flaky:         org.junit.Assert.assertEquals(timeZone36.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 52 + "'", int38 == 52);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + (-60506053200001L) + "'", long39 == (-60506053200001L));
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 52 + "'", int49 == 52);
        org.junit.Assert.assertNotNull(timeZone50);
// flaky:         org.junit.Assert.assertEquals(timeZone50.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod52);
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date57);
        org.junit.Assert.assertEquals(date57.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(date58);
        org.junit.Assert.assertEquals(date58.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date62);
        org.junit.Assert.assertEquals(date62.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date63);
        org.junit.Assert.assertEquals(date63.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(date64);
        org.junit.Assert.assertEquals(date64.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date68);
        org.junit.Assert.assertEquals(date68.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 52 + "'", int73 == 52);
        org.junit.Assert.assertNotNull(timeZone74);
// flaky:         org.junit.Assert.assertEquals(timeZone74.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod78);
    }

    @Test
    public void test2263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2263");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        int int11 = week2.getYearValue();
        long long12 = week2.getLastMillisecond();
        int int13 = week2.getWeek();
        int int14 = week2.getYearValue();
        long long15 = week2.getSerialIndex();
        java.lang.String str16 = week2.toString();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod17 = week2.next();
        boolean boolean19 = week2.equals((java.lang.Object) 2792L);
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-60505750800001L) + "'", long12 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 52 + "'", int14 == 52);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 2791L + "'", long15 == 2791L);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Week 35, 52" + "'", str16, "Week 35, 52");
        org.junit.Assert.assertNotNull(regularTimePeriod17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test2264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2264");
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Week week1 = org.jfree.data.time.Week.parseWeek("Week 7, 1");
            org.junit.Assert.fail("Expected exception of type org.jfree.data.time.TimePeriodFormatException; message: Can't evaluate the year.");
        } catch (org.jfree.data.time.TimePeriodFormatException e) {
            // Expected exception.
        }
    }

    @Test
    public void test2265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2265");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        int int11 = week2.getYearValue();
        long long12 = week2.getLastMillisecond();
        org.jfree.data.time.Week week15 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod16 = week15.next();
        java.lang.Class<?> wildcardClass17 = week15.getClass();
        java.lang.Class class18 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass17);
        boolean boolean19 = week2.equals((java.lang.Object) wildcardClass17);
        int int20 = week2.getYearValue();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod21 = week2.previous();
        int int22 = week2.getYearValue();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-60505750800001L) + "'", long12 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(class18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 52 + "'", int20 == 52);
        org.junit.Assert.assertNotNull(regularTimePeriod21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 52 + "'", int22 == 52);
    }

    @Test
    public void test2266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2266");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date3 = week2.getStart();
        org.jfree.data.time.Week week4 = new org.jfree.data.time.Week(date3);
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week(100, 10);
        java.util.Date date8 = week7.getEnd();
        org.jfree.data.time.Week week11 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date12 = week11.getStart();
        java.util.Date date13 = week11.getEnd();
        int int14 = week11.getYearValue();
        long long15 = week11.getLastMillisecond();
        java.lang.Class<?> wildcardClass16 = week11.getClass();
        java.util.Date date17 = null;
        org.jfree.data.time.Week week20 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.util.Date date21 = week20.getStart();
        int int22 = week20.getYearValue();
        java.util.Date date23 = week20.getEnd();
        org.jfree.data.time.Week week26 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod27 = week26.next();
        java.lang.Class<?> wildcardClass28 = week26.getClass();
        java.lang.Class class29 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass28);
        java.lang.Class class30 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass28);
        org.jfree.data.time.Week week33 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod34 = week33.next();
        int int35 = week33.getYearValue();
        java.util.TimeZone timeZone36 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int37 = week33.compareTo((java.lang.Object) timeZone36);
        int int38 = week33.getYearValue();
        int int40 = week33.compareTo((java.lang.Object) 9);
        java.util.Date date41 = week33.getStart();
        org.jfree.data.time.Week week42 = new org.jfree.data.time.Week(date41);
        org.jfree.data.time.Week week45 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod46 = week45.next();
        int int47 = week45.getYearValue();
        java.util.TimeZone timeZone48 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int49 = week45.compareTo((java.lang.Object) timeZone48);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod50 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass28, date41, timeZone48);
        org.jfree.data.time.Week week53 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod54 = week53.previous();
        int int55 = week53.getYearValue();
        java.util.Date date56 = week53.getStart();
        java.util.TimeZone timeZone57 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.Week week58 = new org.jfree.data.time.Week(date56, timeZone57);
        org.jfree.data.time.Week week59 = new org.jfree.data.time.Week(date41, timeZone57);
        org.jfree.data.time.Week week60 = new org.jfree.data.time.Week(date23, timeZone57);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod61 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass16, date17, timeZone57);
        org.jfree.data.time.Week week62 = new org.jfree.data.time.Week(date8, timeZone57);
        org.jfree.data.time.Week week63 = new org.jfree.data.time.Week(date3, timeZone57);
        long long64 = week63.getFirstMillisecond();
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Sat Nov 28 23:59:59 CET 11");
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 97 + "'", int14 == 97);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-59100800400001L) + "'", long15 == (-59100800400001L));
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 52 + "'", int22 == 52);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod27);
        org.junit.Assert.assertNotNull(wildcardClass28);
        org.junit.Assert.assertNotNull(class29);
        org.junit.Assert.assertNotNull(class30);
        org.junit.Assert.assertNotNull(regularTimePeriod34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 52 + "'", int35 == 52);
        org.junit.Assert.assertNotNull(timeZone36);
// flaky:         org.junit.Assert.assertEquals(timeZone36.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 52 + "'", int38 == 52);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 52 + "'", int47 == 52);
        org.junit.Assert.assertNotNull(timeZone48);
// flaky:         org.junit.Assert.assertEquals(timeZone48.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod50);
        org.junit.Assert.assertNotNull(regularTimePeriod54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 52 + "'", int55 == 52);
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(timeZone57);
// flaky:         org.junit.Assert.assertEquals(timeZone57.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod61);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + (-59101405200000L) + "'", long64 == (-59101405200000L));
    }

    @Test
    public void test2267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2267");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(8, 4);
        long long3 = week2.getFirstMillisecond();
        int int4 = week2.getWeek();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-62037104400000L) + "'", long3 == (-62037104400000L));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 8 + "'", int4 == 8);
    }

    @Test
    public void test2268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2268");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getSerialIndex();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.next();
        java.util.Date date6 = regularTimePeriod5.getEnd();
        java.lang.Class<?> wildcardClass7 = date6.getClass();
        org.jfree.data.time.Week week10 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod11 = week10.previous();
        java.util.Date date12 = week10.getEnd();
        org.jfree.data.time.Week week15 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod16 = week15.next();
        int int17 = week15.getYearValue();
        java.util.TimeZone timeZone18 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int19 = week15.compareTo((java.lang.Object) timeZone18);
        int int20 = week15.getYearValue();
        int int22 = week15.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod23 = week15.previous();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod24 = week15.next();
        org.jfree.data.time.Week week27 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod28 = week27.next();
        java.lang.Class<?> wildcardClass29 = week27.getClass();
        java.lang.Class class30 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass29);
        java.lang.Class class31 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass29);
        boolean boolean32 = week15.equals((java.lang.Object) wildcardClass29);
        java.lang.Class class33 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass29);
        org.jfree.data.time.Week week36 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod37 = week36.next();
        int int38 = week36.getYearValue();
        long long39 = week36.getLastMillisecond();
        java.util.Date date40 = week36.getEnd();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod41 = week36.previous();
        long long42 = week36.getMiddleMillisecond();
        org.jfree.data.time.Week week45 = new org.jfree.data.time.Week(9, (int) 'a');
        org.jfree.data.time.Week week48 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod49 = week48.next();
        long long50 = week48.getMiddleMillisecond();
        java.lang.String str51 = week48.toString();
        boolean boolean52 = week45.equals((java.lang.Object) week48);
        java.util.Date date53 = week45.getStart();
        int int54 = week36.compareTo((java.lang.Object) date53);
        org.jfree.data.time.Week week57 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date58 = week57.getStart();
        java.util.Date date59 = week57.getEnd();
        org.jfree.data.time.Week week62 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod63 = week62.next();
        java.lang.Class<?> wildcardClass64 = week62.getClass();
        java.lang.Class class65 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass64);
        org.jfree.data.time.Week week68 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date69 = week68.getStart();
        java.lang.Class class70 = null;
        java.util.Date date71 = null;
        java.util.TimeZone timeZone72 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod73 = org.jfree.data.time.RegularTimePeriod.createInstance(class70, date71, timeZone72);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod74 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass64, date69, timeZone72);
        org.jfree.data.time.Week week75 = new org.jfree.data.time.Week(date59, timeZone72);
        java.util.TimeZone timeZone76 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.Week week77 = new org.jfree.data.time.Week(date59, timeZone76);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod78 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass29, date53, timeZone76);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod79 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass7, date12, timeZone76);
        java.lang.Class class80 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass7);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 2791L + "'", long4 == 2791L);
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Sep 02 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(regularTimePeriod11);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 52 + "'", int17 == 52);
        org.junit.Assert.assertNotNull(timeZone18);
// flaky:         org.junit.Assert.assertEquals(timeZone18.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 52 + "'", int20 == 52);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod23);
        org.junit.Assert.assertNotNull(regularTimePeriod24);
        org.junit.Assert.assertNotNull(regularTimePeriod28);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(class30);
        org.junit.Assert.assertNotNull(class31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(class33);
        org.junit.Assert.assertNotNull(regularTimePeriod37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 52 + "'", int38 == 52);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + (-60505750800001L) + "'", long39 == (-60505750800001L));
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod41);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + (-60506053200001L) + "'", long42 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod49);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + (-60506053200001L) + "'", long50 == (-60506053200001L));
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "Week 35, 52" + "'", str51, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertNotNull(date58);
        org.junit.Assert.assertEquals(date58.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date59);
        org.junit.Assert.assertEquals(date59.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod63);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertNotNull(class65);
        org.junit.Assert.assertNotNull(date69);
        org.junit.Assert.assertEquals(date69.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone72);
// flaky:         org.junit.Assert.assertEquals(timeZone72.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod73);
        org.junit.Assert.assertNotNull(regularTimePeriod74);
        org.junit.Assert.assertNotNull(timeZone76);
// flaky:         org.junit.Assert.assertEquals(timeZone76.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNotNull(regularTimePeriod78);
        org.junit.Assert.assertNull(regularTimePeriod79);
        org.junit.Assert.assertNotNull(class80);
    }

    @Test
    public void test2269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2269");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.util.Date date3 = week2.getStart();
        int int4 = week2.getYearValue();
        java.util.Date date5 = week2.getEnd();
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod9 = week8.previous();
        int int10 = week8.getYearValue();
        java.util.Date date11 = week8.getStart();
        java.util.TimeZone timeZone12 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.Week week13 = new org.jfree.data.time.Week(date11, timeZone12);
        java.lang.Class<?> wildcardClass14 = timeZone12.getClass();
        java.lang.Class class15 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass14);
        org.jfree.data.time.Week week18 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str19 = week18.toString();
        long long20 = week18.getSerialIndex();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod21 = week18.next();
        java.util.Date date22 = regularTimePeriod21.getEnd();
        java.util.Date date23 = regularTimePeriod21.getStart();
        org.jfree.data.time.Week week26 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str27 = week26.toString();
        long long28 = week26.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod29 = week26.next();
        java.util.Date date30 = week26.getEnd();
        org.jfree.data.time.Week week33 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date34 = week33.getStart();
        org.jfree.data.time.Week week35 = new org.jfree.data.time.Week(date34);
        java.util.Date date36 = week35.getStart();
        org.jfree.data.time.Week week39 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod40 = week39.next();
        int int41 = week39.getYearValue();
        java.util.TimeZone timeZone42 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int43 = week39.compareTo((java.lang.Object) timeZone42);
        int int44 = week39.getYearValue();
        long long45 = week39.getMiddleMillisecond();
        java.lang.Class<?> wildcardClass46 = week39.getClass();
        org.jfree.data.time.Week week49 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date50 = week49.getStart();
        org.jfree.data.time.Week week53 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod54 = week53.next();
        int int55 = week53.getYearValue();
        java.util.TimeZone timeZone56 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int57 = week53.compareTo((java.lang.Object) timeZone56);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod58 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass46, date50, timeZone56);
        org.jfree.data.time.Week week59 = new org.jfree.data.time.Week(date36, timeZone56);
        org.jfree.data.time.Week week60 = new org.jfree.data.time.Week(date30, timeZone56);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod61 = org.jfree.data.time.RegularTimePeriod.createInstance(class15, date23, timeZone56);
        org.jfree.data.time.Week week62 = new org.jfree.data.time.Week(date5, timeZone56);
        int int63 = week62.getYearValue();
        long long64 = week62.getSerialIndex();
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 52 + "'", int10 == 52);
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(timeZone12);
// flaky:         org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(class15);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Week 35, 52" + "'", str19, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 2791L + "'", long20 == 2791L);
        org.junit.Assert.assertNotNull(regularTimePeriod21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Sat Sep 02 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Sun Aug 27 00:00:00 CET 52");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Week 35, 52" + "'", str27, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + (-60506053200001L) + "'", long28 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod29);
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 52 + "'", int41 == 52);
        org.junit.Assert.assertNotNull(timeZone42);
// flaky:         org.junit.Assert.assertEquals(timeZone42.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 52 + "'", int44 == 52);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + (-60506053200001L) + "'", long45 == (-60506053200001L));
        org.junit.Assert.assertNotNull(wildcardClass46);
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 52 + "'", int55 == 52);
        org.junit.Assert.assertNotNull(timeZone56);
// flaky:         org.junit.Assert.assertEquals(timeZone56.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod58);
        org.junit.Assert.assertNull(regularTimePeriod61);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 52 + "'", int63 == 52);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 2791L + "'", long64 == 2791L);
    }

    @Test
    public void test2270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2270");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) (byte) -1, (int) (short) 0);
        int int3 = week2.getYearValue();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
    }

    @Test
    public void test2271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2271");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date3 = week2.getStart();
        java.util.Date date4 = week2.getEnd();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date8 = week7.getStart();
        java.util.Date date9 = week7.getEnd();
        org.jfree.data.time.Week week12 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod13 = week12.next();
        java.lang.Class<?> wildcardClass14 = week12.getClass();
        java.lang.Class class15 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass14);
        org.jfree.data.time.Week week18 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date19 = week18.getStart();
        java.lang.Class class20 = null;
        java.util.Date date21 = null;
        java.util.TimeZone timeZone22 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod23 = org.jfree.data.time.RegularTimePeriod.createInstance(class20, date21, timeZone22);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod24 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass14, date19, timeZone22);
        org.jfree.data.time.Week week25 = new org.jfree.data.time.Week(date9, timeZone22);
        org.jfree.data.time.Week week26 = new org.jfree.data.time.Week(date4, timeZone22);
        long long27 = week26.getLastMillisecond();
        long long28 = week26.getLastMillisecond();
        java.util.Calendar calendar29 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long30 = week26.getLastMillisecond(calendar29);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod13);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(class15);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone22);
// flaky:         org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod23);
        org.junit.Assert.assertNotNull(regularTimePeriod24);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + (-59100800400001L) + "'", long27 == (-59100800400001L));
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + (-59100800400001L) + "'", long28 == (-59100800400001L));
    }

    @Test
    public void test2272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2272");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        long long5 = week2.getLastMillisecond();
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod9 = week8.next();
        java.lang.Class<?> wildcardClass10 = week8.getClass();
        java.lang.Class class11 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass10);
        int int12 = week2.compareTo((java.lang.Object) wildcardClass10);
        long long13 = week2.getMiddleMillisecond();
        long long14 = week2.getMiddleMillisecond();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-60505750800001L) + "'", long5 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod9);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNotNull(class11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-60506053200001L) + "'", long13 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-60506053200001L) + "'", long14 == (-60506053200001L));
    }

    @Test
    public void test2273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2273");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.next();
        java.util.Date date6 = week2.getEnd();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week(date6);
        int int8 = week7.getWeek();
        boolean boolean10 = week7.equals((java.lang.Object) 1637449200000L);
        org.jfree.data.time.Week week13 = new org.jfree.data.time.Week(9, (int) 'a');
        org.jfree.data.time.Week week16 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod17 = week16.next();
        long long18 = week16.getMiddleMillisecond();
        java.lang.String str19 = week16.toString();
        boolean boolean20 = week13.equals((java.lang.Object) week16);
        int int21 = week16.getWeek();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod22 = week16.next();
        boolean boolean23 = week7.equals((java.lang.Object) week16);
        long long24 = week16.getLastMillisecond();
        java.lang.String str25 = week16.toString();
        int int26 = week16.getWeek();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 35 + "'", int8 == 35);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(regularTimePeriod17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-60506053200001L) + "'", long18 == (-60506053200001L));
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Week 35, 52" + "'", str19, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 35 + "'", int21 == 35);
        org.junit.Assert.assertNotNull(regularTimePeriod22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-60505750800001L) + "'", long24 == (-60505750800001L));
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Week 35, 52" + "'", str25, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 35 + "'", int26 == 35);
    }

    @Test
    public void test2274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2274");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(35, 100);
        org.jfree.data.time.Week week5 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod6 = week5.previous();
        int int7 = week5.getYearValue();
        java.util.Date date8 = week5.getEnd();
        long long9 = week5.getMiddleMillisecond();
        org.jfree.data.time.Week week12 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod13 = week12.next();
        int int14 = week12.getYearValue();
        java.util.TimeZone timeZone15 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int16 = week12.compareTo((java.lang.Object) timeZone15);
        int int17 = week12.getYearValue();
        int int19 = week12.compareTo((java.lang.Object) 9);
        java.util.Date date20 = week12.getStart();
        boolean boolean21 = week5.equals((java.lang.Object) date20);
        java.util.Date date22 = week5.getEnd();
        boolean boolean23 = week2.equals((java.lang.Object) week5);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod24 = week2.next();
        long long25 = week2.getFirstMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod26 = week2.previous();
        org.junit.Assert.assertNotNull(regularTimePeriod6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-60506053200001L) + "'", long9 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 52 + "'", int14 == 52);
        org.junit.Assert.assertNotNull(timeZone15);
// flaky:         org.junit.Assert.assertEquals(timeZone15.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 52 + "'", int17 == 52);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(regularTimePeriod24);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-58991331600000L) + "'", long25 == (-58991331600000L));
        org.junit.Assert.assertNotNull(regularTimePeriod26);
    }

    @Test
    public void test2275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2275");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        java.lang.Class<?> wildcardClass4 = week2.getClass();
        java.lang.Class class5 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass4);
        java.lang.Class class6 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass4);
        org.jfree.data.time.Week week9 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week9.next();
        int int11 = week9.getYearValue();
        java.util.TimeZone timeZone12 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int13 = week9.compareTo((java.lang.Object) timeZone12);
        int int14 = week9.getYearValue();
        int int16 = week9.compareTo((java.lang.Object) 9);
        java.util.Date date17 = week9.getStart();
        org.jfree.data.time.Week week18 = new org.jfree.data.time.Week(date17);
        org.jfree.data.time.Week week21 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod22 = week21.next();
        int int23 = week21.getYearValue();
        java.util.TimeZone timeZone24 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int25 = week21.compareTo((java.lang.Object) timeZone24);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod26 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass4, date17, timeZone24);
        java.util.Date date27 = regularTimePeriod26.getEnd();
        org.jfree.data.time.Week week30 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod31 = week30.next();
        int int32 = week30.getYearValue();
        java.util.TimeZone timeZone33 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int34 = week30.compareTo((java.lang.Object) timeZone33);
        int int35 = week30.getYearValue();
        int int37 = week30.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod38 = week30.previous();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod39 = week30.next();
        org.jfree.data.time.Week week42 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod43 = week42.next();
        java.lang.Class<?> wildcardClass44 = week42.getClass();
        java.lang.Class class45 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass44);
        java.lang.Class class46 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass44);
        boolean boolean47 = week30.equals((java.lang.Object) wildcardClass44);
        java.lang.Class class48 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass44);
        org.jfree.data.time.Week week51 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date52 = week51.getStart();
        java.util.Date date53 = week51.getEnd();
        org.jfree.data.time.Week week56 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod57 = week56.next();
        java.lang.Class<?> wildcardClass58 = week56.getClass();
        java.lang.Class class59 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass58);
        org.jfree.data.time.Week week62 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date63 = week62.getStart();
        java.lang.Class class64 = null;
        java.util.Date date65 = null;
        java.util.TimeZone timeZone66 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod67 = org.jfree.data.time.RegularTimePeriod.createInstance(class64, date65, timeZone66);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod68 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass58, date63, timeZone66);
        org.jfree.data.time.Week week69 = new org.jfree.data.time.Week(date53, timeZone66);
        java.lang.Class class70 = null;
        java.util.Date date71 = null;
        java.util.TimeZone timeZone72 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod73 = org.jfree.data.time.RegularTimePeriod.createInstance(class70, date71, timeZone72);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod74 = org.jfree.data.time.RegularTimePeriod.createInstance(class48, date53, timeZone72);
        org.jfree.data.time.Week week75 = new org.jfree.data.time.Week(date27, timeZone72);
        org.jfree.data.time.Week week78 = new org.jfree.data.time.Week(9, (int) 'a');
        org.jfree.data.time.Week week81 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod82 = week81.next();
        long long83 = week81.getMiddleMillisecond();
        java.lang.String str84 = week81.toString();
        boolean boolean85 = week78.equals((java.lang.Object) week81);
        int int86 = week81.getWeek();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod87 = week81.next();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod88 = week81.previous();
        boolean boolean89 = week75.equals((java.lang.Object) week81);
        long long90 = week81.getLastMillisecond();
        java.lang.Class<?> wildcardClass91 = week81.getClass();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(class5);
        org.junit.Assert.assertNotNull(class6);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertNotNull(timeZone12);
// flaky:         org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 52 + "'", int14 == 52);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 52 + "'", int23 == 52);
        org.junit.Assert.assertNotNull(timeZone24);
// flaky:         org.junit.Assert.assertEquals(timeZone24.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod26);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 52 + "'", int32 == 52);
        org.junit.Assert.assertNotNull(timeZone33);
// flaky:         org.junit.Assert.assertEquals(timeZone33.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 52 + "'", int35 == 52);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod38);
        org.junit.Assert.assertNotNull(regularTimePeriod39);
        org.junit.Assert.assertNotNull(regularTimePeriod43);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(class45);
        org.junit.Assert.assertNotNull(class46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(class48);
        org.junit.Assert.assertNotNull(date52);
        org.junit.Assert.assertEquals(date52.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod57);
        org.junit.Assert.assertNotNull(wildcardClass58);
        org.junit.Assert.assertNotNull(class59);
        org.junit.Assert.assertNotNull(date63);
        org.junit.Assert.assertEquals(date63.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone66);
// flaky:         org.junit.Assert.assertEquals(timeZone66.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod67);
        org.junit.Assert.assertNotNull(regularTimePeriod68);
        org.junit.Assert.assertNotNull(timeZone72);
// flaky:         org.junit.Assert.assertEquals(timeZone72.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod73);
        org.junit.Assert.assertNull(regularTimePeriod74);
        org.junit.Assert.assertNotNull(regularTimePeriod82);
        org.junit.Assert.assertTrue("'" + long83 + "' != '" + (-60506053200001L) + "'", long83 == (-60506053200001L));
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "Week 35, 52" + "'", str84, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 35 + "'", int86 == 35);
        org.junit.Assert.assertNotNull(regularTimePeriod87);
        org.junit.Assert.assertNotNull(regularTimePeriod88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + long90 + "' != '" + (-60505750800001L) + "'", long90 == (-60505750800001L));
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test2276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2276");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(35, 0);
        long long3 = week2.getSerialIndex();
        long long4 = week2.getFirstMillisecond();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod8 = week7.next();
        int int9 = week7.getYearValue();
        java.util.TimeZone timeZone10 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int11 = week7.compareTo((java.lang.Object) timeZone10);
        int int12 = week7.getYearValue();
        int int14 = week7.compareTo((java.lang.Object) 9);
        int int15 = week7.getYearValue();
        java.lang.String str16 = week7.toString();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod17 = week7.previous();
        org.jfree.data.time.Week week20 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod21 = week20.next();
        int int22 = week20.getYearValue();
        java.util.TimeZone timeZone23 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int24 = week20.compareTo((java.lang.Object) timeZone23);
        int int25 = week20.getYearValue();
        int int27 = week20.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod28 = week20.previous();
        int int29 = week20.getYearValue();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod30 = week20.next();
        java.lang.Class<?> wildcardClass31 = regularTimePeriod30.getClass();
        org.jfree.data.time.Week week34 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod35 = week34.next();
        java.lang.Class<?> wildcardClass36 = week34.getClass();
        java.lang.Class class37 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass36);
        java.lang.Class class38 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass36);
        org.jfree.data.time.Week week41 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod42 = week41.next();
        int int43 = week41.getYearValue();
        java.util.TimeZone timeZone44 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int45 = week41.compareTo((java.lang.Object) timeZone44);
        int int46 = week41.getYearValue();
        int int48 = week41.compareTo((java.lang.Object) 9);
        java.util.Date date49 = week41.getStart();
        org.jfree.data.time.Week week50 = new org.jfree.data.time.Week(date49);
        org.jfree.data.time.Week week53 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod54 = week53.next();
        int int55 = week53.getYearValue();
        java.util.TimeZone timeZone56 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int57 = week53.compareTo((java.lang.Object) timeZone56);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod58 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass36, date49, timeZone56);
        org.jfree.data.time.Week week61 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str62 = week61.toString();
        long long63 = week61.getMiddleMillisecond();
        long long64 = week61.getLastMillisecond();
        org.jfree.data.time.Week week67 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod68 = week67.next();
        java.lang.Class<?> wildcardClass69 = week67.getClass();
        java.lang.Class class70 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass69);
        int int71 = week61.compareTo((java.lang.Object) wildcardClass69);
        java.lang.Class class72 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass69);
        org.jfree.data.time.Week week75 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod76 = week75.next();
        java.lang.Class<?> wildcardClass77 = week75.getClass();
        java.lang.Class class78 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass77);
        org.jfree.data.time.Week week81 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date82 = week81.getStart();
        java.lang.Class class83 = null;
        java.util.Date date84 = null;
        java.util.TimeZone timeZone85 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod86 = org.jfree.data.time.RegularTimePeriod.createInstance(class83, date84, timeZone85);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod87 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass77, date82, timeZone85);
        java.util.TimeZone timeZone88 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod89 = org.jfree.data.time.RegularTimePeriod.createInstance(class72, date82, timeZone88);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod90 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass31, date49, timeZone88);
        org.jfree.data.time.Week week91 = new org.jfree.data.time.Week(date49);
        java.util.Date date92 = week91.getEnd();
        int int93 = week7.compareTo((java.lang.Object) date92);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod94 = week7.previous();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod95 = week7.next();
        // The following exception was thrown during execution in test generation
        try {
            int int96 = week2.compareTo((java.lang.Object) week7);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Year constructor: year (52) outside valid range.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 35L + "'", long3 == 35L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-62147178000000L) + "'", long4 == (-62147178000000L));
        org.junit.Assert.assertNotNull(regularTimePeriod8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 52 + "'", int9 == 52);
        org.junit.Assert.assertNotNull(timeZone10);
// flaky:         org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 52 + "'", int15 == 52);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Week 35, 52" + "'", str16, "Week 35, 52");
        org.junit.Assert.assertNotNull(regularTimePeriod17);
        org.junit.Assert.assertNotNull(regularTimePeriod21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 52 + "'", int22 == 52);
        org.junit.Assert.assertNotNull(timeZone23);
// flaky:         org.junit.Assert.assertEquals(timeZone23.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 52 + "'", int25 == 52);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 52 + "'", int29 == 52);
        org.junit.Assert.assertNotNull(regularTimePeriod30);
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertNotNull(regularTimePeriod35);
        org.junit.Assert.assertNotNull(wildcardClass36);
        org.junit.Assert.assertNotNull(class37);
        org.junit.Assert.assertNotNull(class38);
        org.junit.Assert.assertNotNull(regularTimePeriod42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 52 + "'", int43 == 52);
        org.junit.Assert.assertNotNull(timeZone44);
// flaky:         org.junit.Assert.assertEquals(timeZone44.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 52 + "'", int46 == 52);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 52 + "'", int55 == 52);
        org.junit.Assert.assertNotNull(timeZone56);
// flaky:         org.junit.Assert.assertEquals(timeZone56.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod58);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "Week 35, 52" + "'", str62, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + (-60506053200001L) + "'", long63 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + (-60505750800001L) + "'", long64 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod68);
        org.junit.Assert.assertNotNull(wildcardClass69);
        org.junit.Assert.assertNotNull(class70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
        org.junit.Assert.assertNotNull(class72);
        org.junit.Assert.assertNotNull(regularTimePeriod76);
        org.junit.Assert.assertNotNull(wildcardClass77);
        org.junit.Assert.assertNotNull(class78);
        org.junit.Assert.assertNotNull(date82);
        org.junit.Assert.assertEquals(date82.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone85);
// flaky:         org.junit.Assert.assertEquals(timeZone85.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod86);
        org.junit.Assert.assertNotNull(regularTimePeriod87);
        org.junit.Assert.assertNotNull(timeZone88);
// flaky:         org.junit.Assert.assertEquals(timeZone88.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod89);
        org.junit.Assert.assertNotNull(regularTimePeriod90);
        org.junit.Assert.assertNotNull(date92);
        org.junit.Assert.assertEquals(date92.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 1 + "'", int93 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod94);
        org.junit.Assert.assertNotNull(regularTimePeriod95);
    }

    @Test
    public void test2277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2277");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date3 = week2.getStart();
        java.util.Date date4 = week2.getEnd();
        int int5 = week2.getYearValue();
        java.util.Date date6 = week2.getStart();
        int int7 = week2.getWeek();
        java.util.Date date8 = week2.getStart();
        org.jfree.data.time.Week week11 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str12 = week11.toString();
        long long13 = week11.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod14 = week11.next();
        java.util.Date date15 = week11.getEnd();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod16 = week11.next();
        // The following exception was thrown during execution in test generation
        try {
            int int17 = week2.compareTo((java.lang.Object) regularTimePeriod16);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Year constructor: year (52) outside valid range.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 97 + "'", int5 == 97);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 9 + "'", int7 == 9);
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Week 35, 52" + "'", str12, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-60506053200001L) + "'", long13 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod14);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod16);
    }

    @Test
    public void test2278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2278");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        java.lang.Class<?> wildcardClass4 = week2.getClass();
        java.lang.Class class5 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass4);
        java.lang.Class class6 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass4);
        org.jfree.data.time.Week week9 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week9.next();
        int int11 = week9.getYearValue();
        java.util.TimeZone timeZone12 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int13 = week9.compareTo((java.lang.Object) timeZone12);
        int int14 = week9.getYearValue();
        int int16 = week9.compareTo((java.lang.Object) 9);
        java.util.Date date17 = week9.getStart();
        org.jfree.data.time.Week week18 = new org.jfree.data.time.Week(date17);
        org.jfree.data.time.Week week21 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod22 = week21.next();
        int int23 = week21.getYearValue();
        java.util.TimeZone timeZone24 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int25 = week21.compareTo((java.lang.Object) timeZone24);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod26 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass4, date17, timeZone24);
        java.util.Date date27 = regularTimePeriod26.getEnd();
        org.jfree.data.time.Week week30 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod31 = week30.next();
        int int32 = week30.getYearValue();
        java.util.TimeZone timeZone33 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int34 = week30.compareTo((java.lang.Object) timeZone33);
        int int35 = week30.getYearValue();
        int int37 = week30.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod38 = week30.previous();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod39 = week30.next();
        org.jfree.data.time.Week week42 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod43 = week42.next();
        java.lang.Class<?> wildcardClass44 = week42.getClass();
        java.lang.Class class45 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass44);
        java.lang.Class class46 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass44);
        boolean boolean47 = week30.equals((java.lang.Object) wildcardClass44);
        java.lang.Class class48 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass44);
        org.jfree.data.time.Week week51 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date52 = week51.getStart();
        java.util.Date date53 = week51.getEnd();
        org.jfree.data.time.Week week56 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod57 = week56.next();
        java.lang.Class<?> wildcardClass58 = week56.getClass();
        java.lang.Class class59 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass58);
        org.jfree.data.time.Week week62 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date63 = week62.getStart();
        java.lang.Class class64 = null;
        java.util.Date date65 = null;
        java.util.TimeZone timeZone66 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod67 = org.jfree.data.time.RegularTimePeriod.createInstance(class64, date65, timeZone66);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod68 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass58, date63, timeZone66);
        org.jfree.data.time.Week week69 = new org.jfree.data.time.Week(date53, timeZone66);
        java.lang.Class class70 = null;
        java.util.Date date71 = null;
        java.util.TimeZone timeZone72 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod73 = org.jfree.data.time.RegularTimePeriod.createInstance(class70, date71, timeZone72);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod74 = org.jfree.data.time.RegularTimePeriod.createInstance(class48, date53, timeZone72);
        org.jfree.data.time.Week week75 = new org.jfree.data.time.Week(date27, timeZone72);
        org.jfree.data.time.Week week78 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod79 = week78.next();
        int int80 = week78.getYearValue();
        java.util.TimeZone timeZone81 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int82 = week78.compareTo((java.lang.Object) timeZone81);
        int int83 = week78.getYearValue();
        int int85 = week78.compareTo((java.lang.Object) 9);
        int int86 = week78.getYearValue();
        int int87 = week78.getYearValue();
        int int88 = week78.getYearValue();
        java.util.Date date89 = week78.getEnd();
        boolean boolean90 = week75.equals((java.lang.Object) date89);
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(class5);
        org.junit.Assert.assertNotNull(class6);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertNotNull(timeZone12);
// flaky:         org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 52 + "'", int14 == 52);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 52 + "'", int23 == 52);
        org.junit.Assert.assertNotNull(timeZone24);
// flaky:         org.junit.Assert.assertEquals(timeZone24.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod26);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 52 + "'", int32 == 52);
        org.junit.Assert.assertNotNull(timeZone33);
// flaky:         org.junit.Assert.assertEquals(timeZone33.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 52 + "'", int35 == 52);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod38);
        org.junit.Assert.assertNotNull(regularTimePeriod39);
        org.junit.Assert.assertNotNull(regularTimePeriod43);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(class45);
        org.junit.Assert.assertNotNull(class46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(class48);
        org.junit.Assert.assertNotNull(date52);
        org.junit.Assert.assertEquals(date52.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod57);
        org.junit.Assert.assertNotNull(wildcardClass58);
        org.junit.Assert.assertNotNull(class59);
        org.junit.Assert.assertNotNull(date63);
        org.junit.Assert.assertEquals(date63.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone66);
// flaky:         org.junit.Assert.assertEquals(timeZone66.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod67);
        org.junit.Assert.assertNotNull(regularTimePeriod68);
        org.junit.Assert.assertNotNull(timeZone72);
// flaky:         org.junit.Assert.assertEquals(timeZone72.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod73);
        org.junit.Assert.assertNull(regularTimePeriod74);
        org.junit.Assert.assertNotNull(regularTimePeriod79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 52 + "'", int80 == 52);
        org.junit.Assert.assertNotNull(timeZone81);
// flaky:         org.junit.Assert.assertEquals(timeZone81.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 1 + "'", int82 == 1);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 52 + "'", int83 == 52);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 1 + "'", int85 == 1);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 52 + "'", int86 == 52);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 52 + "'", int87 == 52);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 52 + "'", int88 == 52);
        org.junit.Assert.assertNotNull(date89);
        org.junit.Assert.assertEquals(date89.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
    }

    @Test
    public void test2279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2279");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        java.lang.Class<?> wildcardClass4 = week2.getClass();
        java.lang.Class class5 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass4);
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date9 = week8.getStart();
        java.lang.Class class10 = null;
        java.util.Date date11 = null;
        java.util.TimeZone timeZone12 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod13 = org.jfree.data.time.RegularTimePeriod.createInstance(class10, date11, timeZone12);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod14 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass4, date9, timeZone12);
        org.jfree.data.time.Week week15 = new org.jfree.data.time.Week(date9);
        java.util.Date date16 = week15.getStart();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod17 = week15.previous();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(class5);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone12);
// flaky:         org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod13);
        org.junit.Assert.assertNotNull(regularTimePeriod14);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod17);
    }

    @Test
    public void test2280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2280");
        org.jfree.data.time.Week week0 = new org.jfree.data.time.Week();
        long long1 = week0.getFirstMillisecond();
        org.jfree.data.time.Year year2 = week0.getYear();
        int int3 = week0.getWeek();
        int int4 = week0.getWeek();
        int int5 = week0.getWeek();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1637449200000L + "'", long1 == 1637449200000L);
        org.junit.Assert.assertNotNull(year2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 48 + "'", int3 == 48);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 48 + "'", int4 == 48);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 48 + "'", int5 == 48);
    }

    @Test
    public void test2281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2281");
        org.jfree.data.time.Week week3 = new org.jfree.data.time.Week();
        long long4 = week3.getFirstMillisecond();
        org.jfree.data.time.Year year5 = week3.getYear();
        org.jfree.data.time.Week week6 = new org.jfree.data.time.Week(0, year5);
        java.util.Date date7 = week6.getStart();
        java.util.Date date8 = week6.getStart();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod9 = week6.next();
        org.jfree.data.time.Year year10 = week6.getYear();
        org.jfree.data.time.Week week11 = new org.jfree.data.time.Week(52, year10);
        org.jfree.data.time.Week week12 = new org.jfree.data.time.Week(1, year10);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1637449200000L + "'", long4 == 1637449200000L);
        org.junit.Assert.assertNotNull(year5);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Sun Dec 20 00:00:00 CET 2020");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Sun Dec 20 00:00:00 CET 2020");
        org.junit.Assert.assertNotNull(regularTimePeriod9);
        org.junit.Assert.assertNotNull(year10);
    }

    @Test
    public void test2282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2282");
        org.jfree.data.time.Week week3 = new org.jfree.data.time.Week();
        long long4 = week3.getFirstMillisecond();
        org.jfree.data.time.Year year5 = week3.getYear();
        org.jfree.data.time.Week week6 = new org.jfree.data.time.Week(52, year5);
        java.util.Date date7 = year5.getStart();
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week(52, year5);
        org.jfree.data.time.Week week9 = new org.jfree.data.time.Week(97, year5);
        long long10 = week9.getFirstMillisecond();
        org.jfree.data.time.Week week16 = new org.jfree.data.time.Week();
        long long17 = week16.getFirstMillisecond();
        org.jfree.data.time.Year year18 = week16.getYear();
        org.jfree.data.time.Week week19 = new org.jfree.data.time.Week(0, year18);
        org.jfree.data.time.Week week20 = new org.jfree.data.time.Week(11, year18);
        long long21 = week20.getSerialIndex();
        org.jfree.data.time.Year year22 = week20.getYear();
        org.jfree.data.time.Week week23 = new org.jfree.data.time.Week((int) (short) 1, year22);
        org.jfree.data.time.Week week24 = new org.jfree.data.time.Week(4, year22);
        org.jfree.data.time.Week week25 = new org.jfree.data.time.Week(32, year22);
        boolean boolean26 = week9.equals((java.lang.Object) year22);
        org.jfree.data.time.Week week29 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str30 = week29.toString();
        long long31 = week29.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod32 = week29.next();
        int int34 = week29.compareTo((java.lang.Object) 0.0d);
        int int35 = week29.getYearValue();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod36 = week29.next();
        long long37 = week29.getFirstMillisecond();
        boolean boolean38 = week9.equals((java.lang.Object) long37);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1637449200000L + "'", long4 == 1637449200000L);
        org.junit.Assert.assertNotNull(year5);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Fri Jan 01 00:00:00 CET 2021");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1667080800000L + "'", long10 == 1667080800000L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1637449200000L + "'", long17 == 1637449200000L);
        org.junit.Assert.assertNotNull(year18);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 107124L + "'", long21 == 107124L);
        org.junit.Assert.assertNotNull(year22);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Week 35, 52" + "'", str30, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + (-60506053200001L) + "'", long31 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod32);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 52 + "'", int35 == 52);
        org.junit.Assert.assertNotNull(regularTimePeriod36);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + (-60506355600000L) + "'", long37 == (-60506355600000L));
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test2283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2283");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(100, 10);
        long long3 = week2.getSerialIndex();
        org.jfree.data.time.Week week6 = new org.jfree.data.time.Week((int) (short) 10, 6);
        boolean boolean7 = week2.equals((java.lang.Object) (short) 10);
        long long8 = week2.getFirstMillisecond();
        org.jfree.data.time.Week week11 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod12 = week11.next();
        int int13 = week11.getYearValue();
        java.util.TimeZone timeZone14 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int15 = week11.compareTo((java.lang.Object) timeZone14);
        int int16 = week11.getYearValue();
        int int18 = week11.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod19 = week11.previous();
        int int20 = week11.getYearValue();
        long long21 = week11.getLastMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod22 = week11.previous();
        java.util.Date date23 = week11.getStart();
        boolean boolean24 = week2.equals((java.lang.Object) date23);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 630L + "'", long3 == 630L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-61792160400000L) + "'", long8 == (-61792160400000L));
        org.junit.Assert.assertNotNull(regularTimePeriod12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 52 + "'", int13 == 52);
        org.junit.Assert.assertNotNull(timeZone14);
// flaky:         org.junit.Assert.assertEquals(timeZone14.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 52 + "'", int16 == 52);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 52 + "'", int20 == 52);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-60505750800001L) + "'", long21 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod22);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test2284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2284");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        int int10 = week2.getYearValue();
        long long11 = week2.getLastMillisecond();
        int int12 = week2.getWeek();
        java.util.Date date13 = week2.getEnd();
        org.jfree.data.time.Week week16 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date17 = week16.getStart();
        java.util.Date date18 = week16.getEnd();
        org.jfree.data.time.Week week21 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod22 = week21.next();
        java.lang.Class<?> wildcardClass23 = week21.getClass();
        java.lang.Class class24 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass23);
        org.jfree.data.time.Week week27 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date28 = week27.getStart();
        java.lang.Class class29 = null;
        java.util.Date date30 = null;
        java.util.TimeZone timeZone31 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod32 = org.jfree.data.time.RegularTimePeriod.createInstance(class29, date30, timeZone31);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod33 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass23, date28, timeZone31);
        org.jfree.data.time.Week week34 = new org.jfree.data.time.Week(date18, timeZone31);
        org.jfree.data.time.Week week35 = new org.jfree.data.time.Week(date13, timeZone31);
        java.util.Date date36 = week35.getStart();
        org.jfree.data.time.Week week37 = new org.jfree.data.time.Week(date36);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod38 = week37.next();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 52 + "'", int10 == 52);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-60505750800001L) + "'", long11 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 35 + "'", int12 == 35);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod22);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertNotNull(class24);
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone31);
// flaky:         org.junit.Assert.assertEquals(timeZone31.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod32);
        org.junit.Assert.assertNotNull(regularTimePeriod33);
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod38);
    }

    @Test
    public void test2285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2285");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.previous();
        int int4 = week2.getYearValue();
        java.util.Date date5 = week2.getEnd();
        java.lang.String str6 = week2.toString();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod7 = week2.previous();
        org.jfree.data.time.Week week10 = new org.jfree.data.time.Week(0, 0);
        long long11 = week10.getLastMillisecond();
        boolean boolean12 = week2.equals((java.lang.Object) week10);
        org.jfree.data.time.Week week15 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod16 = week15.next();
        int int17 = week15.getYearValue();
        java.util.TimeZone timeZone18 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int19 = week15.compareTo((java.lang.Object) timeZone18);
        int int20 = week15.getYearValue();
        int int22 = week15.compareTo((java.lang.Object) 9);
        int int23 = week15.getYearValue();
        java.lang.String str24 = week15.toString();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod25 = week15.next();
        java.util.Date date26 = week15.getStart();
        org.jfree.data.time.Week week29 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod30 = week29.next();
        int int31 = week29.getYearValue();
        java.util.TimeZone timeZone32 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int33 = week29.compareTo((java.lang.Object) timeZone32);
        int int34 = week29.getYearValue();
        long long35 = week29.getMiddleMillisecond();
        java.lang.Class<?> wildcardClass36 = week29.getClass();
        org.jfree.data.time.Week week39 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date40 = week39.getStart();
        org.jfree.data.time.Week week43 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod44 = week43.next();
        int int45 = week43.getYearValue();
        java.util.TimeZone timeZone46 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int47 = week43.compareTo((java.lang.Object) timeZone46);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod48 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass36, date40, timeZone46);
        org.jfree.data.time.Week week51 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date52 = week51.getStart();
        java.util.Date date53 = week51.getEnd();
        java.util.Date date54 = week51.getStart();
        org.jfree.data.time.Week week57 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date58 = week57.getStart();
        java.util.Date date59 = week57.getEnd();
        java.util.Date date60 = week57.getStart();
        org.jfree.data.time.Week week63 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date64 = week63.getStart();
        org.jfree.data.time.Week week67 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod68 = week67.next();
        int int69 = week67.getYearValue();
        java.util.TimeZone timeZone70 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int71 = week67.compareTo((java.lang.Object) timeZone70);
        org.jfree.data.time.Week week72 = new org.jfree.data.time.Week(date64, timeZone70);
        org.jfree.data.time.Week week73 = new org.jfree.data.time.Week(date60, timeZone70);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod74 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass36, date54, timeZone70);
        org.jfree.data.time.Week week75 = new org.jfree.data.time.Week(date26, timeZone70);
        int int76 = week2.compareTo((java.lang.Object) date26);
        org.jfree.data.time.Week week79 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod80 = week79.next();
        int int81 = week79.getYearValue();
        java.util.TimeZone timeZone82 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int83 = week79.compareTo((java.lang.Object) timeZone82);
        int int84 = week79.getYearValue();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod85 = week79.previous();
        java.util.Date date86 = regularTimePeriod85.getEnd();
        java.util.Date date87 = regularTimePeriod85.getStart();
        boolean boolean88 = week2.equals((java.lang.Object) date87);
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Week 35, 52" + "'", str6, "Week 35, 52");
        org.junit.Assert.assertNotNull(regularTimePeriod7);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-62167741200001L) + "'", long11 == (-62167741200001L));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(regularTimePeriod16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 52 + "'", int17 == 52);
        org.junit.Assert.assertNotNull(timeZone18);
// flaky:         org.junit.Assert.assertEquals(timeZone18.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 52 + "'", int20 == 52);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 52 + "'", int23 == 52);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Week 35, 52" + "'", str24, "Week 35, 52");
        org.junit.Assert.assertNotNull(regularTimePeriod25);
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 52 + "'", int31 == 52);
        org.junit.Assert.assertNotNull(timeZone32);
// flaky:         org.junit.Assert.assertEquals(timeZone32.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 52 + "'", int34 == 52);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + (-60506053200001L) + "'", long35 == (-60506053200001L));
        org.junit.Assert.assertNotNull(wildcardClass36);
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 52 + "'", int45 == 52);
        org.junit.Assert.assertNotNull(timeZone46);
// flaky:         org.junit.Assert.assertEquals(timeZone46.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod48);
        org.junit.Assert.assertNotNull(date52);
        org.junit.Assert.assertEquals(date52.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date58);
        org.junit.Assert.assertEquals(date58.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date59);
        org.junit.Assert.assertEquals(date59.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(date60);
        org.junit.Assert.assertEquals(date60.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date64);
        org.junit.Assert.assertEquals(date64.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 52 + "'", int69 == 52);
        org.junit.Assert.assertNotNull(timeZone70);
// flaky:         org.junit.Assert.assertEquals(timeZone70.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod74);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 52 + "'", int81 == 52);
        org.junit.Assert.assertNotNull(timeZone82);
// flaky:         org.junit.Assert.assertEquals(timeZone82.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 1 + "'", int83 == 1);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 52 + "'", int84 == 52);
        org.junit.Assert.assertNotNull(regularTimePeriod85);
        org.junit.Assert.assertNotNull(date86);
        org.junit.Assert.assertEquals(date86.toString(), "Sat Aug 19 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date87);
        org.junit.Assert.assertEquals(date87.toString(), "Sun Aug 13 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
    }

    @Test
    public void test2286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2286");
        org.jfree.data.time.Week week3 = new org.jfree.data.time.Week();
        long long4 = week3.getFirstMillisecond();
        org.jfree.data.time.Year year5 = week3.getYear();
        org.jfree.data.time.Week week6 = new org.jfree.data.time.Week(0, year5);
        java.util.Date date7 = week6.getStart();
        java.util.Date date8 = week6.getStart();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod9 = week6.next();
        org.jfree.data.time.Year year10 = week6.getYear();
        org.jfree.data.time.Week week11 = new org.jfree.data.time.Week(52, year10);
        org.jfree.data.time.Week week12 = new org.jfree.data.time.Week((int) (short) 1, year10);
        int int13 = week12.getYearValue();
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1637449200000L + "'", long4 == 1637449200000L);
        org.junit.Assert.assertNotNull(year5);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Sun Dec 20 00:00:00 CET 2020");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Sun Dec 20 00:00:00 CET 2020");
        org.junit.Assert.assertNotNull(regularTimePeriod9);
        org.junit.Assert.assertNotNull(year10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2021 + "'", int13 == 2021);
    }

    @Test
    public void test2287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2287");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(48, (-1));
        org.jfree.data.time.Week week5 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod6 = week5.next();
        int int7 = week5.getYearValue();
        java.util.TimeZone timeZone8 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int9 = week5.compareTo((java.lang.Object) timeZone8);
        int int10 = week5.getYearValue();
        int int12 = week5.compareTo((java.lang.Object) 9);
        int int13 = week5.getYearValue();
        long long14 = week5.getLastMillisecond();
        int int15 = week5.getWeek();
        java.util.Date date16 = week5.getEnd();
        org.jfree.data.time.Week week19 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date20 = week19.getStart();
        java.util.Date date21 = week19.getEnd();
        org.jfree.data.time.Week week24 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod25 = week24.next();
        java.lang.Class<?> wildcardClass26 = week24.getClass();
        java.lang.Class class27 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass26);
        org.jfree.data.time.Week week30 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date31 = week30.getStart();
        java.lang.Class class32 = null;
        java.util.Date date33 = null;
        java.util.TimeZone timeZone34 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod35 = org.jfree.data.time.RegularTimePeriod.createInstance(class32, date33, timeZone34);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod36 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass26, date31, timeZone34);
        org.jfree.data.time.Week week37 = new org.jfree.data.time.Week(date21, timeZone34);
        org.jfree.data.time.Week week38 = new org.jfree.data.time.Week(date16, timeZone34);
        int int39 = week2.compareTo((java.lang.Object) date16);
        org.junit.Assert.assertNotNull(regularTimePeriod6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertNotNull(timeZone8);
// flaky:         org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 52 + "'", int10 == 52);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 52 + "'", int13 == 52);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-60505750800001L) + "'", long14 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 35 + "'", int15 == 35);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod25);
        org.junit.Assert.assertNotNull(wildcardClass26);
        org.junit.Assert.assertNotNull(class27);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone34);
// flaky:         org.junit.Assert.assertEquals(timeZone34.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod35);
        org.junit.Assert.assertNotNull(regularTimePeriod36);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
    }

    @Test
    public void test2288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2288");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getWeek();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod8 = week2.next();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod9 = week2.previous();
        java.util.Calendar calendar10 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long11 = regularTimePeriod9.getMiddleMillisecond(calendar10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 35 + "'", int7 == 35);
        org.junit.Assert.assertNotNull(regularTimePeriod8);
        org.junit.Assert.assertNotNull(regularTimePeriod9);
    }

    @Test
    public void test2289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2289");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getWeek();
        org.jfree.data.time.Week week10 = new org.jfree.data.time.Week();
        long long11 = week10.getFirstMillisecond();
        org.jfree.data.time.Year year12 = week10.getYear();
        org.jfree.data.time.Week week13 = new org.jfree.data.time.Week(52, year12);
        java.util.Date date14 = year12.getStart();
        org.jfree.data.time.Week week15 = new org.jfree.data.time.Week((-1969), year12);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod16 = week15.next();
        int int17 = week2.compareTo((java.lang.Object) week15);
        int int18 = week15.getYearValue();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod19 = week15.previous();
        long long20 = regularTimePeriod19.getMiddleMillisecond();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 35 + "'", int7 == 35);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1637449200000L + "'", long11 == 1637449200000L);
        org.junit.Assert.assertNotNull(year12);
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Fri Jan 01 00:00:00 CET 2021");
        org.junit.Assert.assertNotNull(regularTimePeriod16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1969) + "'", int17 == (-1969));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2021 + "'", int18 == 2021);
        org.junit.Assert.assertNotNull(regularTimePeriod19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1655891999999L + "'", long20 == 1655891999999L);
    }

    @Test
    public void test2290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2290");
        org.jfree.data.time.Week week3 = new org.jfree.data.time.Week();
        long long4 = week3.getFirstMillisecond();
        org.jfree.data.time.Year year5 = week3.getYear();
        org.jfree.data.time.Week week6 = new org.jfree.data.time.Week(52, year5);
        java.util.Date date7 = year5.getStart();
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week(52, year5);
        org.jfree.data.time.Week week9 = new org.jfree.data.time.Week(97, year5);
        long long10 = week9.getFirstMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod11 = week9.previous();
        int int12 = week9.getYearValue();
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1637449200000L + "'", long4 == 1637449200000L);
        org.junit.Assert.assertNotNull(year5);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Fri Jan 01 00:00:00 CET 2021");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1667080800000L + "'", long10 == 1667080800000L);
        org.junit.Assert.assertNotNull(regularTimePeriod11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2021 + "'", int12 == 2021);
    }

    @Test
    public void test2291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2291");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        long long5 = week2.getLastMillisecond();
        boolean boolean7 = week2.equals((java.lang.Object) (short) 10);
        long long8 = week2.getMiddleMillisecond();
        long long9 = week2.getFirstMillisecond();
        org.jfree.data.time.Week week12 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod13 = week12.next();
        int int14 = week12.getYearValue();
        java.util.TimeZone timeZone15 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int16 = week12.compareTo((java.lang.Object) timeZone15);
        int int17 = week12.getYearValue();
        int int19 = week12.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod20 = week12.previous();
        int int21 = week12.getYearValue();
        long long22 = week12.getLastMillisecond();
        int int23 = week12.getWeek();
        int int24 = week12.getYearValue();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod25 = week12.next();
        int int26 = week12.getYearValue();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod27 = week12.next();
        int int28 = week12.getYearValue();
        org.jfree.data.time.Week week31 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod32 = week31.next();
        long long33 = week31.getMiddleMillisecond();
        java.lang.String str34 = week31.toString();
        org.jfree.data.time.Week week37 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod38 = week37.next();
        java.lang.Class<?> wildcardClass39 = week37.getClass();
        java.lang.Class class40 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass39);
        org.jfree.data.time.Week week43 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date44 = week43.getStart();
        java.lang.Class class45 = null;
        java.util.Date date46 = null;
        java.util.TimeZone timeZone47 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod48 = org.jfree.data.time.RegularTimePeriod.createInstance(class45, date46, timeZone47);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod49 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass39, date44, timeZone47);
        java.lang.Class<?> wildcardClass50 = timeZone47.getClass();
        boolean boolean51 = week31.equals((java.lang.Object) wildcardClass50);
        int int52 = week12.compareTo((java.lang.Object) wildcardClass50);
        boolean boolean53 = week2.equals((java.lang.Object) wildcardClass50);
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-60505750800001L) + "'", long5 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-60506053200001L) + "'", long8 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-60506355600000L) + "'", long9 == (-60506355600000L));
        org.junit.Assert.assertNotNull(regularTimePeriod13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 52 + "'", int14 == 52);
        org.junit.Assert.assertNotNull(timeZone15);
// flaky:         org.junit.Assert.assertEquals(timeZone15.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 52 + "'", int17 == 52);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 52 + "'", int21 == 52);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-60505750800001L) + "'", long22 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 35 + "'", int23 == 35);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 52 + "'", int24 == 52);
        org.junit.Assert.assertNotNull(regularTimePeriod25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 52 + "'", int26 == 52);
        org.junit.Assert.assertNotNull(regularTimePeriod27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 52 + "'", int28 == 52);
        org.junit.Assert.assertNotNull(regularTimePeriod32);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + (-60506053200001L) + "'", long33 == (-60506053200001L));
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Week 35, 52" + "'", str34, "Week 35, 52");
        org.junit.Assert.assertNotNull(regularTimePeriod38);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(class40);
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone47);
// flaky:         org.junit.Assert.assertEquals(timeZone47.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod48);
        org.junit.Assert.assertNotNull(regularTimePeriod49);
        org.junit.Assert.assertNotNull(wildcardClass50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test2292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2292");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(2022, (int) 'a');
        java.util.Date date3 = week2.getStart();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod4 = week2.next();
        java.util.Date date5 = regularTimePeriod4.getStart();
        java.lang.Class<?> wildcardClass6 = regularTimePeriod4.getClass();
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Jun 26 00:00:00 CET 96");
        org.junit.Assert.assertNotNull(regularTimePeriod4);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Sun Jul 03 00:00:00 CET 96");
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test2293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2293");
        org.jfree.data.time.Week week3 = new org.jfree.data.time.Week();
        long long4 = week3.getFirstMillisecond();
        org.jfree.data.time.Year year5 = week3.getYear();
        org.jfree.data.time.Week week6 = new org.jfree.data.time.Week(0, year5);
        java.util.Date date7 = year5.getStart();
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week(3, year5);
        org.jfree.data.time.Week week9 = new org.jfree.data.time.Week(6, year5);
        java.util.Calendar calendar10 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long11 = week9.getLastMillisecond(calendar10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1637449200000L + "'", long4 == 1637449200000L);
        org.junit.Assert.assertNotNull(year5);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Fri Jan 01 00:00:00 CET 2021");
    }

    @Test
    public void test2294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2294");
        org.jfree.data.time.Week week1 = new org.jfree.data.time.Week();
        long long2 = week1.getFirstMillisecond();
        org.jfree.data.time.Year year3 = week1.getYear();
        org.jfree.data.time.Week week4 = new org.jfree.data.time.Week(0, year3);
        java.util.Date date5 = year3.getStart();
        org.jfree.data.time.Week week6 = new org.jfree.data.time.Week(date5);
        long long7 = week6.getLastMillisecond();
        int int8 = week6.getWeek();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1637449200000L + "'", long2 == 1637449200000L);
        org.junit.Assert.assertNotNull(year3);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Fri Jan 01 00:00:00 CET 2021");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1609628399999L + "'", long7 == 1609628399999L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
    }

    @Test
    public void test2295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2295");
        org.jfree.data.time.Week week3 = new org.jfree.data.time.Week();
        long long4 = week3.getFirstMillisecond();
        org.jfree.data.time.Year year5 = week3.getYear();
        org.jfree.data.time.Week week6 = new org.jfree.data.time.Week(52, year5);
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week((int) (byte) -1, year5);
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week(0, year5);
        java.util.Date date9 = year5.getEnd();
        org.jfree.data.time.Week week10 = new org.jfree.data.time.Week(date9);
        long long11 = week10.getSerialIndex();
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1637449200000L + "'", long4 == 1637449200000L);
        org.junit.Assert.assertNotNull(year5);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Fri Dec 31 23:59:59 CET 2021");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 107167L + "'", long11 == 107167L);
    }

    @Test
    public void test2296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2296");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date3 = week2.getStart();
        org.jfree.data.time.Week week4 = new org.jfree.data.time.Week(date3);
        long long5 = week4.getSerialIndex();
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str9 = week8.toString();
        long long10 = week8.getSerialIndex();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod11 = week8.next();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod12 = week8.previous();
        java.lang.Class<?> wildcardClass13 = week8.getClass();
        java.lang.Class class14 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass13);
        boolean boolean15 = week4.equals((java.lang.Object) wildcardClass13);
        org.jfree.data.time.Week week18 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod19 = week18.previous();
        java.util.Date date20 = week18.getEnd();
        int int21 = week18.getWeek();
        boolean boolean22 = week4.equals((java.lang.Object) int21);
        long long23 = week4.getLastMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod24 = week4.next();
        java.util.Calendar calendar25 = null;
        // The following exception was thrown during execution in test generation
        try {
            week4.peg(calendar25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 5150L + "'", long5 == 5150L);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Week 35, 52" + "'", str9, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 2791L + "'", long10 == 2791L);
        org.junit.Assert.assertNotNull(regularTimePeriod11);
        org.junit.Assert.assertNotNull(regularTimePeriod12);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(class14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(regularTimePeriod19);
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 35 + "'", int21 == 35);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-59100800400001L) + "'", long23 == (-59100800400001L));
        org.junit.Assert.assertNotNull(regularTimePeriod24);
    }

    @Test
    public void test2297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2297");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        java.util.Date date4 = week2.getStart();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Sun Aug 20 00:00:00 CET 52");
    }

    @Test
    public void test2298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2298");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.next();
        java.util.Date date6 = week2.getEnd();
        int int7 = week2.getYearValue();
        int int8 = week2.getWeek();
        int int9 = week2.getWeek();
        int int10 = week2.getWeek();
        java.util.Date date11 = week2.getStart();
        org.jfree.data.time.Week week14 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date15 = week14.getStart();
        org.jfree.data.time.Week week16 = new org.jfree.data.time.Week(date15);
        long long17 = week16.getLastMillisecond();
        int int18 = week16.getYearValue();
        org.jfree.data.time.Week week21 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str22 = week21.toString();
        long long23 = week21.getMiddleMillisecond();
        long long24 = week21.getLastMillisecond();
        org.jfree.data.time.Week week27 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod28 = week27.next();
        java.lang.Class<?> wildcardClass29 = week27.getClass();
        java.lang.Class class30 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass29);
        int int31 = week21.compareTo((java.lang.Object) wildcardClass29);
        long long32 = week21.getMiddleMillisecond();
        java.util.Date date33 = week21.getEnd();
        int int34 = week21.getWeek();
        long long35 = week21.getLastMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod36 = week21.next();
        long long37 = week21.getFirstMillisecond();
        long long38 = week21.getFirstMillisecond();
        boolean boolean39 = week16.equals((java.lang.Object) long38);
        boolean boolean40 = week2.equals((java.lang.Object) boolean39);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 35 + "'", int8 == 35);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 35 + "'", int10 == 35);
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-59100800400001L) + "'", long17 == (-59100800400001L));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 97 + "'", int18 == 97);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Week 35, 52" + "'", str22, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-60506053200001L) + "'", long23 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-60505750800001L) + "'", long24 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod28);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(class30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + (-60506053200001L) + "'", long32 == (-60506053200001L));
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 35 + "'", int34 == 35);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + (-60505750800001L) + "'", long35 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod36);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + (-60506355600000L) + "'", long37 == (-60506355600000L));
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + (-60506355600000L) + "'", long38 == (-60506355600000L));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test2299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2299");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getSerialIndex();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.next();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod6 = week2.previous();
        java.lang.Class<?> wildcardClass7 = week2.getClass();
        java.lang.Class class8 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass7);
        java.lang.Class class9 = org.jfree.data.time.RegularTimePeriod.downsize(class8);
        java.lang.Class class10 = org.jfree.data.time.RegularTimePeriod.downsize(class8);
        java.lang.Class class11 = org.jfree.data.time.RegularTimePeriod.downsize(class8);
        java.lang.Class class12 = org.jfree.data.time.RegularTimePeriod.downsize(class8);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 2791L + "'", long4 == 2791L);
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertNotNull(regularTimePeriod6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(class8);
        org.junit.Assert.assertNotNull(class9);
        org.junit.Assert.assertNotNull(class10);
        org.junit.Assert.assertNotNull(class11);
        org.junit.Assert.assertNotNull(class12);
    }

    @Test
    public void test2300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2300");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(10, (int) (short) 10);
        long long3 = week2.getMiddleMillisecond();
        long long4 = week2.getMiddleMillisecond();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-61846290000001L) + "'", long3 == (-61846290000001L));
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-61846290000001L) + "'", long4 == (-61846290000001L));
    }

    @Test
    public void test2301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2301");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getSerialIndex();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.next();
        java.util.Date date6 = regularTimePeriod5.getEnd();
        org.jfree.data.time.Week week9 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date10 = week9.getStart();
        org.jfree.data.time.Week week13 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod14 = week13.next();
        int int15 = week13.getYearValue();
        java.util.TimeZone timeZone16 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int17 = week13.compareTo((java.lang.Object) timeZone16);
        org.jfree.data.time.Week week18 = new org.jfree.data.time.Week(date10, timeZone16);
        org.jfree.data.time.Week week19 = new org.jfree.data.time.Week(date6, timeZone16);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod20 = week19.next();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod21 = week19.previous();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod22 = week19.next();
        java.util.Date date23 = week19.getStart();
        long long24 = week19.getSerialIndex();
        long long25 = week19.getMiddleMillisecond();
        java.util.Calendar calendar26 = null;
        // The following exception was thrown during execution in test generation
        try {
            week19.peg(calendar26);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 2791L + "'", long4 == 2791L);
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Sep 02 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 52 + "'", int15 == 52);
        org.junit.Assert.assertNotNull(timeZone16);
// flaky:         org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod20);
        org.junit.Assert.assertNotNull(regularTimePeriod21);
        org.junit.Assert.assertNotNull(regularTimePeriod22);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Sun Aug 27 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 2792L + "'", long24 == 2792L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-60505448400001L) + "'", long25 == (-60505448400001L));
    }

    @Test
    public void test2302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2302");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getWeek();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod8 = week2.next();
        boolean boolean10 = week2.equals((java.lang.Object) 3);
        long long11 = week2.getLastMillisecond();
        java.lang.String str12 = week2.toString();
        java.util.Date date13 = week2.getEnd();
        org.jfree.data.time.Week week16 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str17 = week16.toString();
        long long18 = week16.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod19 = week16.next();
        java.util.Date date20 = week16.getEnd();
        org.jfree.data.time.Week week21 = new org.jfree.data.time.Week(date20);
        org.jfree.data.time.Week week24 = new org.jfree.data.time.Week(100, 10);
        java.util.Date date25 = week24.getEnd();
        org.jfree.data.time.Week week28 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date29 = week28.getStart();
        java.util.Date date30 = week28.getEnd();
        int int31 = week28.getYearValue();
        long long32 = week28.getLastMillisecond();
        java.lang.Class<?> wildcardClass33 = week28.getClass();
        java.util.Date date34 = null;
        org.jfree.data.time.Week week37 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.util.Date date38 = week37.getStart();
        int int39 = week37.getYearValue();
        java.util.Date date40 = week37.getEnd();
        org.jfree.data.time.Week week43 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod44 = week43.next();
        java.lang.Class<?> wildcardClass45 = week43.getClass();
        java.lang.Class class46 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass45);
        java.lang.Class class47 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass45);
        org.jfree.data.time.Week week50 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod51 = week50.next();
        int int52 = week50.getYearValue();
        java.util.TimeZone timeZone53 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int54 = week50.compareTo((java.lang.Object) timeZone53);
        int int55 = week50.getYearValue();
        int int57 = week50.compareTo((java.lang.Object) 9);
        java.util.Date date58 = week50.getStart();
        org.jfree.data.time.Week week59 = new org.jfree.data.time.Week(date58);
        org.jfree.data.time.Week week62 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod63 = week62.next();
        int int64 = week62.getYearValue();
        java.util.TimeZone timeZone65 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int66 = week62.compareTo((java.lang.Object) timeZone65);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod67 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass45, date58, timeZone65);
        org.jfree.data.time.Week week70 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod71 = week70.previous();
        int int72 = week70.getYearValue();
        java.util.Date date73 = week70.getStart();
        java.util.TimeZone timeZone74 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.Week week75 = new org.jfree.data.time.Week(date73, timeZone74);
        org.jfree.data.time.Week week76 = new org.jfree.data.time.Week(date58, timeZone74);
        org.jfree.data.time.Week week77 = new org.jfree.data.time.Week(date40, timeZone74);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod78 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass33, date34, timeZone74);
        org.jfree.data.time.Week week79 = new org.jfree.data.time.Week(date25, timeZone74);
        org.jfree.data.time.Week week80 = new org.jfree.data.time.Week(date20, timeZone74);
        org.jfree.data.time.Week week81 = new org.jfree.data.time.Week(date13, timeZone74);
        java.lang.Class<?> wildcardClass82 = date13.getClass();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 35 + "'", int7 == 35);
        org.junit.Assert.assertNotNull(regularTimePeriod8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-60505750800001L) + "'", long11 == (-60505750800001L));
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Week 35, 52" + "'", str12, "Week 35, 52");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Week 35, 52" + "'", str17, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-60506053200001L) + "'", long18 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod19);
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Sat Nov 28 23:59:59 CET 11");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 97 + "'", int31 == 97);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + (-59100800400001L) + "'", long32 == (-59100800400001L));
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 52 + "'", int39 == 52);
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod44);
        org.junit.Assert.assertNotNull(wildcardClass45);
        org.junit.Assert.assertNotNull(class46);
        org.junit.Assert.assertNotNull(class47);
        org.junit.Assert.assertNotNull(regularTimePeriod51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 52 + "'", int52 == 52);
        org.junit.Assert.assertNotNull(timeZone53);
// flaky:         org.junit.Assert.assertEquals(timeZone53.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 52 + "'", int55 == 52);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertNotNull(date58);
        org.junit.Assert.assertEquals(date58.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 52 + "'", int64 == 52);
        org.junit.Assert.assertNotNull(timeZone65);
// flaky:         org.junit.Assert.assertEquals(timeZone65.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod67);
        org.junit.Assert.assertNotNull(regularTimePeriod71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 52 + "'", int72 == 52);
        org.junit.Assert.assertNotNull(date73);
        org.junit.Assert.assertEquals(date73.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(timeZone74);
// flaky:         org.junit.Assert.assertEquals(timeZone74.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod78);
        org.junit.Assert.assertNotNull(wildcardClass82);
    }

    @Test
    public void test2303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2303");
        org.jfree.data.time.Week week3 = new org.jfree.data.time.Week();
        long long4 = week3.getFirstMillisecond();
        org.jfree.data.time.Year year5 = week3.getYear();
        org.jfree.data.time.Week week6 = new org.jfree.data.time.Week(0, year5);
        org.jfree.data.time.Year year7 = week6.getYear();
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week(3, year7);
        org.jfree.data.time.Week week9 = new org.jfree.data.time.Week(7, year7);
        org.jfree.data.time.Year year10 = week9.getYear();
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1637449200000L + "'", long4 == 1637449200000L);
        org.junit.Assert.assertNotNull(year5);
        org.junit.Assert.assertNotNull(year7);
        org.junit.Assert.assertNotNull(year10);
    }

    @Test
    public void test2304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2304");
        org.jfree.data.time.Week week3 = new org.jfree.data.time.Week();
        long long4 = week3.getFirstMillisecond();
        org.jfree.data.time.Year year5 = week3.getYear();
        org.jfree.data.time.Week week6 = new org.jfree.data.time.Week((int) (byte) 100, year5);
        long long7 = year5.getMiddleMillisecond();
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week(100, year5);
        org.jfree.data.time.Week week9 = new org.jfree.data.time.Week((int) (short) 100, year5);
        java.util.Calendar calendar10 = null;
        // The following exception was thrown during execution in test generation
        try {
            week9.peg(calendar10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1637449200000L + "'", long4 == 1637449200000L);
        org.junit.Assert.assertNotNull(year5);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1625223599999L + "'", long7 == 1625223599999L);
    }

    @Test
    public void test2305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2305");
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Week week1 = org.jfree.data.time.Week.parseWeek("Week 10, 2021");
            org.junit.Assert.fail("Expected exception of type org.jfree.data.time.TimePeriodFormatException; message: Can't evaluate the week.");
        } catch (org.jfree.data.time.TimePeriodFormatException e) {
            // Expected exception.
        }
    }

    @Test
    public void test2306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2306");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', 3);
    }

    @Test
    public void test2307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2307");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '4', (int) ' ');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.previous();
        int int4 = week2.getWeek();
        long long5 = week2.getSerialIndex();
        int int6 = week2.getWeek();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod7 = week2.next();
        java.util.Date date8 = week2.getStart();
        org.jfree.data.time.Week week11 = new org.jfree.data.time.Week(4, (int) (short) 1);
        long long12 = week11.getSerialIndex();
        java.util.Date date13 = week11.getEnd();
        boolean boolean14 = week2.equals((java.lang.Object) week11);
        long long15 = week11.getFirstMillisecond();
        java.util.Date date16 = week11.getStart();
        java.lang.Class<?> wildcardClass17 = week11.getClass();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1748L + "'", long5 == 1748L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 52 + "'", int6 == 52);
        org.junit.Assert.assertNotNull(regularTimePeriod7);
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Sun Dec 21 00:00:00 CET 32");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 57L + "'", long12 == 57L);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sat Jan 22 23:59:59 CET 1");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-62134477200000L) + "'", long15 == (-62134477200000L));
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Jan 16 00:00:00 CET 1");
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test2308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2308");
        org.jfree.data.time.Week week5 = new org.jfree.data.time.Week();
        long long6 = week5.getFirstMillisecond();
        org.jfree.data.time.Year year7 = week5.getYear();
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week(0, year7);
        org.jfree.data.time.Week week9 = new org.jfree.data.time.Week(11, year7);
        long long10 = week9.getSerialIndex();
        org.jfree.data.time.Year year11 = week9.getYear();
        org.jfree.data.time.Week week12 = new org.jfree.data.time.Week((int) (short) 1, year11);
        org.jfree.data.time.Week week13 = new org.jfree.data.time.Week(4, year11);
        java.util.Date date14 = week13.getStart();
        org.jfree.data.time.Year year15 = week13.getYear();
        org.jfree.data.time.Week week16 = new org.jfree.data.time.Week(53, year15);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1637449200000L + "'", long6 == 1637449200000L);
        org.junit.Assert.assertNotNull(year7);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 107124L + "'", long10 == 107124L);
        org.junit.Assert.assertNotNull(year11);
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Sun Jan 17 00:00:00 CET 2021");
        org.junit.Assert.assertNotNull(year15);
    }

    @Test
    public void test2309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2309");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod11 = week2.next();
        java.util.Date date12 = week2.getStart();
        java.util.Date date13 = week2.getStart();
        org.jfree.data.time.Week week16 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod17 = week16.next();
        int int18 = week16.getYearValue();
        java.util.TimeZone timeZone19 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int20 = week16.compareTo((java.lang.Object) timeZone19);
        int int21 = week16.getYearValue();
        int int23 = week16.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod24 = week16.previous();
        int int25 = week16.getYearValue();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod26 = week16.next();
        java.lang.Class<?> wildcardClass27 = regularTimePeriod26.getClass();
        org.jfree.data.time.Week week30 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod31 = week30.next();
        java.lang.Class<?> wildcardClass32 = week30.getClass();
        java.lang.Class class33 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass32);
        java.lang.Class class34 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass32);
        org.jfree.data.time.Week week37 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod38 = week37.next();
        int int39 = week37.getYearValue();
        java.util.TimeZone timeZone40 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int41 = week37.compareTo((java.lang.Object) timeZone40);
        int int42 = week37.getYearValue();
        int int44 = week37.compareTo((java.lang.Object) 9);
        java.util.Date date45 = week37.getStart();
        org.jfree.data.time.Week week46 = new org.jfree.data.time.Week(date45);
        org.jfree.data.time.Week week49 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod50 = week49.next();
        int int51 = week49.getYearValue();
        java.util.TimeZone timeZone52 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int53 = week49.compareTo((java.lang.Object) timeZone52);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod54 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass32, date45, timeZone52);
        org.jfree.data.time.Week week57 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str58 = week57.toString();
        long long59 = week57.getMiddleMillisecond();
        long long60 = week57.getLastMillisecond();
        org.jfree.data.time.Week week63 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod64 = week63.next();
        java.lang.Class<?> wildcardClass65 = week63.getClass();
        java.lang.Class class66 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass65);
        int int67 = week57.compareTo((java.lang.Object) wildcardClass65);
        java.lang.Class class68 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass65);
        org.jfree.data.time.Week week71 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod72 = week71.next();
        java.lang.Class<?> wildcardClass73 = week71.getClass();
        java.lang.Class class74 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass73);
        org.jfree.data.time.Week week77 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date78 = week77.getStart();
        java.lang.Class class79 = null;
        java.util.Date date80 = null;
        java.util.TimeZone timeZone81 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod82 = org.jfree.data.time.RegularTimePeriod.createInstance(class79, date80, timeZone81);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod83 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass73, date78, timeZone81);
        java.util.TimeZone timeZone84 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod85 = org.jfree.data.time.RegularTimePeriod.createInstance(class68, date78, timeZone84);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod86 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass27, date45, timeZone84);
        org.jfree.data.time.Week week87 = new org.jfree.data.time.Week(date13, timeZone84);
        int int88 = week87.getWeek();
        int int89 = week87.getYearValue();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod90 = week87.next();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertNotNull(regularTimePeriod11);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 52 + "'", int18 == 52);
        org.junit.Assert.assertNotNull(timeZone19);
// flaky:         org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 52 + "'", int21 == 52);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 52 + "'", int25 == 52);
        org.junit.Assert.assertNotNull(regularTimePeriod26);
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertNotNull(regularTimePeriod31);
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertNotNull(class33);
        org.junit.Assert.assertNotNull(class34);
        org.junit.Assert.assertNotNull(regularTimePeriod38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 52 + "'", int39 == 52);
        org.junit.Assert.assertNotNull(timeZone40);
// flaky:         org.junit.Assert.assertEquals(timeZone40.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 52 + "'", int42 == 52);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 52 + "'", int51 == 52);
        org.junit.Assert.assertNotNull(timeZone52);
// flaky:         org.junit.Assert.assertEquals(timeZone52.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod54);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "Week 35, 52" + "'", str58, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + (-60506053200001L) + "'", long59 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + (-60505750800001L) + "'", long60 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod64);
        org.junit.Assert.assertNotNull(wildcardClass65);
        org.junit.Assert.assertNotNull(class66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertNotNull(class68);
        org.junit.Assert.assertNotNull(regularTimePeriod72);
        org.junit.Assert.assertNotNull(wildcardClass73);
        org.junit.Assert.assertNotNull(class74);
        org.junit.Assert.assertNotNull(date78);
        org.junit.Assert.assertEquals(date78.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone81);
// flaky:         org.junit.Assert.assertEquals(timeZone81.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod82);
        org.junit.Assert.assertNotNull(regularTimePeriod83);
        org.junit.Assert.assertNotNull(timeZone84);
// flaky:         org.junit.Assert.assertEquals(timeZone84.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod85);
        org.junit.Assert.assertNotNull(regularTimePeriod86);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 35 + "'", int88 == 35);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 52 + "'", int89 == 52);
        org.junit.Assert.assertNotNull(regularTimePeriod90);
    }

    @Test
    public void test2310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2310");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(32, (int) (short) 100);
        java.util.Date date3 = week2.getEnd();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod4 = week2.next();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.previous();
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod9 = week8.next();
        int int10 = week8.getYearValue();
        java.util.TimeZone timeZone11 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int12 = week8.compareTo((java.lang.Object) timeZone11);
        int int13 = week8.getYearValue();
        int int15 = week8.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod16 = week8.previous();
        boolean boolean17 = week2.equals((java.lang.Object) regularTimePeriod16);
        int int18 = week2.getWeek();
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sat Aug 08 23:59:59 CET 100");
        org.junit.Assert.assertNotNull(regularTimePeriod4);
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertNotNull(regularTimePeriod9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 52 + "'", int10 == 52);
        org.junit.Assert.assertNotNull(timeZone11);
// flaky:         org.junit.Assert.assertEquals(timeZone11.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 52 + "'", int13 == 52);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 32 + "'", int18 == 32);
    }

    @Test
    public void test2311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2311");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, 2);
        java.util.Calendar calendar3 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long4 = week2.getMiddleMillisecond(calendar3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test2312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2312");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.next();
        java.util.Date date6 = week2.getEnd();
        long long7 = week2.getLastMillisecond();
        java.util.Date date8 = week2.getEnd();
        org.jfree.data.time.Week week11 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod12 = week11.next();
        int int13 = week11.getYearValue();
        long long14 = week11.getLastMillisecond();
        java.util.Date date15 = week11.getEnd();
        org.jfree.data.time.Week week18 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str19 = week18.toString();
        long long20 = week18.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod21 = week18.next();
        java.util.Date date22 = week18.getEnd();
        org.jfree.data.time.Week week23 = new org.jfree.data.time.Week(date22);
        org.jfree.data.time.Week week26 = new org.jfree.data.time.Week(100, 10);
        java.util.Date date27 = week26.getEnd();
        org.jfree.data.time.Week week30 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date31 = week30.getStart();
        java.util.Date date32 = week30.getEnd();
        int int33 = week30.getYearValue();
        long long34 = week30.getLastMillisecond();
        java.lang.Class<?> wildcardClass35 = week30.getClass();
        java.util.Date date36 = null;
        org.jfree.data.time.Week week39 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.util.Date date40 = week39.getStart();
        int int41 = week39.getYearValue();
        java.util.Date date42 = week39.getEnd();
        org.jfree.data.time.Week week45 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod46 = week45.next();
        java.lang.Class<?> wildcardClass47 = week45.getClass();
        java.lang.Class class48 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass47);
        java.lang.Class class49 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass47);
        org.jfree.data.time.Week week52 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod53 = week52.next();
        int int54 = week52.getYearValue();
        java.util.TimeZone timeZone55 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int56 = week52.compareTo((java.lang.Object) timeZone55);
        int int57 = week52.getYearValue();
        int int59 = week52.compareTo((java.lang.Object) 9);
        java.util.Date date60 = week52.getStart();
        org.jfree.data.time.Week week61 = new org.jfree.data.time.Week(date60);
        org.jfree.data.time.Week week64 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod65 = week64.next();
        int int66 = week64.getYearValue();
        java.util.TimeZone timeZone67 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int68 = week64.compareTo((java.lang.Object) timeZone67);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod69 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass47, date60, timeZone67);
        org.jfree.data.time.Week week72 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod73 = week72.previous();
        int int74 = week72.getYearValue();
        java.util.Date date75 = week72.getStart();
        java.util.TimeZone timeZone76 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.Week week77 = new org.jfree.data.time.Week(date75, timeZone76);
        org.jfree.data.time.Week week78 = new org.jfree.data.time.Week(date60, timeZone76);
        org.jfree.data.time.Week week79 = new org.jfree.data.time.Week(date42, timeZone76);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod80 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass35, date36, timeZone76);
        org.jfree.data.time.Week week81 = new org.jfree.data.time.Week(date27, timeZone76);
        org.jfree.data.time.Week week82 = new org.jfree.data.time.Week(date22, timeZone76);
        org.jfree.data.time.Week week83 = new org.jfree.data.time.Week(date15, timeZone76);
        org.jfree.data.time.Week week84 = new org.jfree.data.time.Week(date8, timeZone76);
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Year year85 = week84.getYear();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Year constructor: year (52) outside valid range.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-60505750800001L) + "'", long7 == (-60505750800001L));
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 52 + "'", int13 == 52);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-60505750800001L) + "'", long14 == (-60505750800001L));
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Week 35, 52" + "'", str19, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-60506053200001L) + "'", long20 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Sat Nov 28 23:59:59 CET 11");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 97 + "'", int33 == 97);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + (-59100800400001L) + "'", long34 == (-59100800400001L));
        org.junit.Assert.assertNotNull(wildcardClass35);
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 52 + "'", int41 == 52);
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod46);
        org.junit.Assert.assertNotNull(wildcardClass47);
        org.junit.Assert.assertNotNull(class48);
        org.junit.Assert.assertNotNull(class49);
        org.junit.Assert.assertNotNull(regularTimePeriod53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 52 + "'", int54 == 52);
        org.junit.Assert.assertNotNull(timeZone55);
// flaky:         org.junit.Assert.assertEquals(timeZone55.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 52 + "'", int57 == 52);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertNotNull(date60);
        org.junit.Assert.assertEquals(date60.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 52 + "'", int66 == 52);
        org.junit.Assert.assertNotNull(timeZone67);
// flaky:         org.junit.Assert.assertEquals(timeZone67.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod69);
        org.junit.Assert.assertNotNull(regularTimePeriod73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 52 + "'", int74 == 52);
        org.junit.Assert.assertNotNull(date75);
        org.junit.Assert.assertEquals(date75.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(timeZone76);
// flaky:         org.junit.Assert.assertEquals(timeZone76.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod80);
    }

    @Test
    public void test2313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2313");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        int int11 = week2.getYearValue();
        long long12 = week2.getLastMillisecond();
        int int13 = week2.getWeek();
        int int14 = week2.getYearValue();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod15 = week2.next();
        int int16 = week2.getYearValue();
        int int17 = week2.getYearValue();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-60505750800001L) + "'", long12 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 52 + "'", int14 == 52);
        org.junit.Assert.assertNotNull(regularTimePeriod15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 52 + "'", int16 == 52);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 52 + "'", int17 == 52);
    }

    @Test
    public void test2314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2314");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        long long5 = week2.getLastMillisecond();
        long long6 = week2.getFirstMillisecond();
        java.util.Date date7 = week2.getStart();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod8 = week2.next();
        java.util.Date date9 = week2.getEnd();
        java.util.Date date10 = week2.getStart();
        java.lang.Class class11 = null;
        java.util.Date date12 = null;
        java.util.TimeZone timeZone13 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod14 = org.jfree.data.time.RegularTimePeriod.createInstance(class11, date12, timeZone13);
        org.jfree.data.time.Week week15 = new org.jfree.data.time.Week(date10, timeZone13);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod16 = week15.next();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-60505750800001L) + "'", long5 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-60506355600000L) + "'", long6 == (-60506355600000L));
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(timeZone13);
// flaky:         org.junit.Assert.assertEquals(timeZone13.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod14);
        org.junit.Assert.assertNotNull(regularTimePeriod16);
    }

    @Test
    public void test2315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2315");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date3 = week2.getStart();
        java.util.Date date4 = week2.getEnd();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.next();
        boolean boolean7 = week2.equals((java.lang.Object) 0L);
        java.util.Date date8 = week2.getStart();
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Sun Feb 26 00:00:00 CET 97");
    }

    @Test
    public void test2316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2316");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.previous();
        java.util.Date date4 = week2.getEnd();
        long long5 = week2.getSerialIndex();
        int int6 = week2.getWeek();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod7 = week2.next();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 2791L + "'", long5 == 2791L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 35 + "'", int6 == 35);
        org.junit.Assert.assertNotNull(regularTimePeriod7);
    }

    @Test
    public void test2317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2317");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((-1924), (-2019));
    }

    @Test
    public void test2318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2318");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(0, 4);
        long long3 = week2.getFirstMillisecond();
        int int4 = week2.getYearValue();
        java.lang.String str5 = week2.toString();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-62041942800000L) + "'", long3 == (-62041942800000L));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 4 + "'", int4 == 4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Week 0, 4" + "'", str5, "Week 0, 4");
    }

    @Test
    public void test2319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2319");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getSerialIndex();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.next();
        java.util.Date date6 = regularTimePeriod5.getEnd();
        org.jfree.data.time.Week week9 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date10 = week9.getStart();
        org.jfree.data.time.Week week13 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod14 = week13.next();
        int int15 = week13.getYearValue();
        java.util.TimeZone timeZone16 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int17 = week13.compareTo((java.lang.Object) timeZone16);
        org.jfree.data.time.Week week18 = new org.jfree.data.time.Week(date10, timeZone16);
        org.jfree.data.time.Week week19 = new org.jfree.data.time.Week(date6, timeZone16);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod20 = week19.next();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod21 = week19.previous();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod22 = week19.next();
        long long23 = regularTimePeriod22.getMiddleMillisecond();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 2791L + "'", long4 == 2791L);
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Sep 02 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 52 + "'", int15 == 52);
        org.junit.Assert.assertNotNull(timeZone16);
// flaky:         org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod20);
        org.junit.Assert.assertNotNull(regularTimePeriod21);
        org.junit.Assert.assertNotNull(regularTimePeriod22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-60504843600001L) + "'", long23 == (-60504843600001L));
    }

    @Test
    public void test2320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2320");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week();
        long long3 = week2.getFirstMillisecond();
        org.jfree.data.time.Year year4 = week2.getYear();
        org.jfree.data.time.Week week5 = new org.jfree.data.time.Week(0, year4);
        org.jfree.data.time.Year year6 = week5.getYear();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week(97, year6);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod8 = week7.previous();
        long long9 = week7.getFirstMillisecond();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1637449200000L + "'", long3 == 1637449200000L);
        org.junit.Assert.assertNotNull(year4);
        org.junit.Assert.assertNotNull(year6);
        org.junit.Assert.assertNotNull(regularTimePeriod8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1667080800000L + "'", long9 == 1667080800000L);
    }

    @Test
    public void test2321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2321");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.next();
        java.util.Date date6 = week2.getEnd();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week(date6);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod8 = week7.next();
        org.jfree.data.time.Week week11 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str12 = week11.toString();
        long long13 = week11.getSerialIndex();
        boolean boolean14 = week7.equals((java.lang.Object) long13);
        java.lang.String str15 = week7.toString();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod16 = week7.next();
        long long17 = week7.getLastMillisecond();
        int int18 = week7.getYearValue();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod8);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Week 35, 52" + "'", str12, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 2791L + "'", long13 == 2791L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Week 35, 52" + "'", str15, "Week 35, 52");
        org.junit.Assert.assertNotNull(regularTimePeriod16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-60505750800001L) + "'", long17 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 52 + "'", int18 == 52);
    }

    @Test
    public void test2322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2322");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        int int11 = week2.getYearValue();
        long long12 = week2.getLastMillisecond();
        int int13 = week2.getWeek();
        int int15 = week2.compareTo((java.lang.Object) 0);
        int int16 = week2.getWeek();
        long long17 = week2.getLastMillisecond();
        long long18 = week2.getLastMillisecond();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-60505750800001L) + "'", long12 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 35 + "'", int16 == 35);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-60505750800001L) + "'", long17 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-60505750800001L) + "'", long18 == (-60505750800001L));
    }

    @Test
    public void test2323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2323");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.next();
        java.lang.Class<?> wildcardClass6 = regularTimePeriod5.getClass();
        org.jfree.data.time.Week week9 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date10 = week9.getStart();
        java.util.Date date11 = week9.getEnd();
        org.jfree.data.time.Week week12 = new org.jfree.data.time.Week(date11);
        org.jfree.data.time.Week week15 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod16 = week15.next();
        java.lang.Class<?> wildcardClass17 = week15.getClass();
        java.lang.Class class18 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass17);
        java.lang.Class class19 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass17);
        org.jfree.data.time.Week week22 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod23 = week22.next();
        int int24 = week22.getYearValue();
        java.util.TimeZone timeZone25 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int26 = week22.compareTo((java.lang.Object) timeZone25);
        int int27 = week22.getYearValue();
        int int29 = week22.compareTo((java.lang.Object) 9);
        java.util.Date date30 = week22.getStart();
        org.jfree.data.time.Week week31 = new org.jfree.data.time.Week(date30);
        org.jfree.data.time.Week week34 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod35 = week34.next();
        int int36 = week34.getYearValue();
        java.util.TimeZone timeZone37 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int38 = week34.compareTo((java.lang.Object) timeZone37);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod39 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass17, date30, timeZone37);
        java.util.Date date40 = regularTimePeriod39.getEnd();
        org.jfree.data.time.Week week43 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod44 = week43.next();
        int int45 = week43.getYearValue();
        java.util.TimeZone timeZone46 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int47 = week43.compareTo((java.lang.Object) timeZone46);
        int int48 = week43.getYearValue();
        int int50 = week43.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod51 = week43.previous();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod52 = week43.next();
        org.jfree.data.time.Week week55 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod56 = week55.next();
        java.lang.Class<?> wildcardClass57 = week55.getClass();
        java.lang.Class class58 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass57);
        java.lang.Class class59 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass57);
        boolean boolean60 = week43.equals((java.lang.Object) wildcardClass57);
        java.lang.Class class61 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass57);
        org.jfree.data.time.Week week64 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date65 = week64.getStart();
        java.util.Date date66 = week64.getEnd();
        org.jfree.data.time.Week week69 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod70 = week69.next();
        java.lang.Class<?> wildcardClass71 = week69.getClass();
        java.lang.Class class72 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass71);
        org.jfree.data.time.Week week75 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date76 = week75.getStart();
        java.lang.Class class77 = null;
        java.util.Date date78 = null;
        java.util.TimeZone timeZone79 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod80 = org.jfree.data.time.RegularTimePeriod.createInstance(class77, date78, timeZone79);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod81 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass71, date76, timeZone79);
        org.jfree.data.time.Week week82 = new org.jfree.data.time.Week(date66, timeZone79);
        java.lang.Class class83 = null;
        java.util.Date date84 = null;
        java.util.TimeZone timeZone85 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod86 = org.jfree.data.time.RegularTimePeriod.createInstance(class83, date84, timeZone85);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod87 = org.jfree.data.time.RegularTimePeriod.createInstance(class61, date66, timeZone85);
        org.jfree.data.time.Week week88 = new org.jfree.data.time.Week(date40, timeZone85);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod89 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass6, date11, timeZone85);
        org.jfree.data.time.Week week90 = new org.jfree.data.time.Week(date11);
        org.jfree.data.time.Week week91 = new org.jfree.data.time.Week(date11);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(class18);
        org.junit.Assert.assertNotNull(class19);
        org.junit.Assert.assertNotNull(regularTimePeriod23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 52 + "'", int24 == 52);
        org.junit.Assert.assertNotNull(timeZone25);
// flaky:         org.junit.Assert.assertEquals(timeZone25.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 52 + "'", int27 == 52);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 52 + "'", int36 == 52);
        org.junit.Assert.assertNotNull(timeZone37);
// flaky:         org.junit.Assert.assertEquals(timeZone37.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod39);
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 52 + "'", int45 == 52);
        org.junit.Assert.assertNotNull(timeZone46);
// flaky:         org.junit.Assert.assertEquals(timeZone46.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 52 + "'", int48 == 52);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod51);
        org.junit.Assert.assertNotNull(regularTimePeriod52);
        org.junit.Assert.assertNotNull(regularTimePeriod56);
        org.junit.Assert.assertNotNull(wildcardClass57);
        org.junit.Assert.assertNotNull(class58);
        org.junit.Assert.assertNotNull(class59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(class61);
        org.junit.Assert.assertNotNull(date65);
        org.junit.Assert.assertEquals(date65.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date66);
        org.junit.Assert.assertEquals(date66.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod70);
        org.junit.Assert.assertNotNull(wildcardClass71);
        org.junit.Assert.assertNotNull(class72);
        org.junit.Assert.assertNotNull(date76);
        org.junit.Assert.assertEquals(date76.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone79);
// flaky:         org.junit.Assert.assertEquals(timeZone79.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod80);
        org.junit.Assert.assertNotNull(regularTimePeriod81);
        org.junit.Assert.assertNotNull(timeZone85);
// flaky:         org.junit.Assert.assertEquals(timeZone85.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod86);
        org.junit.Assert.assertNull(regularTimePeriod87);
        org.junit.Assert.assertNotNull(regularTimePeriod89);
    }

    @Test
    public void test2324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2324");
        org.jfree.data.time.Week week3 = new org.jfree.data.time.Week();
        long long4 = week3.getFirstMillisecond();
        org.jfree.data.time.Year year5 = week3.getYear();
        org.jfree.data.time.Week week6 = new org.jfree.data.time.Week(0, year5);
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week(53, year5);
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week((int) '4', year5);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod9 = week8.previous();
        long long10 = week8.getSerialIndex();
        java.util.Date date11 = week8.getEnd();
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1637449200000L + "'", long4 == 1637449200000L);
        org.junit.Assert.assertNotNull(year5);
        org.junit.Assert.assertNotNull(regularTimePeriod9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 107165L + "'", long10 == 107165L);
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Sat Dec 25 23:59:59 CET 2021");
    }

    @Test
    public void test2325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2325");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        int int11 = week2.getYearValue();
        java.lang.String str12 = week2.toString();
        long long13 = week2.getFirstMillisecond();
        java.lang.String str14 = week2.toString();
        long long15 = week2.getSerialIndex();
        java.util.Calendar calendar16 = null;
        // The following exception was thrown during execution in test generation
        try {
            week2.peg(calendar16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Week 35, 52" + "'", str12, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-60506355600000L) + "'", long13 == (-60506355600000L));
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Week 35, 52" + "'", str14, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 2791L + "'", long15 == 2791L);
    }

    @Test
    public void test2326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2326");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '4', (int) ' ');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.previous();
        java.lang.String str4 = week2.toString();
        long long5 = week2.getFirstMillisecond();
        java.lang.String str6 = week2.toString();
        int int7 = week2.getYearValue();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Week 52, 32" + "'", str4, "Week 52, 32");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-61126880400000L) + "'", long5 == (-61126880400000L));
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Week 52, 32" + "'", str6, "Week 52, 32");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 32 + "'", int7 == 32);
    }

    @Test
    public void test2327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2327");
        org.jfree.data.time.Week week3 = new org.jfree.data.time.Week();
        long long4 = week3.getFirstMillisecond();
        org.jfree.data.time.Year year5 = week3.getYear();
        org.jfree.data.time.Week week6 = new org.jfree.data.time.Week((int) (byte) 100, year5);
        long long7 = year5.getMiddleMillisecond();
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week(100, year5);
        org.jfree.data.time.Week week9 = new org.jfree.data.time.Week(10, year5);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1637449200000L + "'", long4 == 1637449200000L);
        org.junit.Assert.assertNotNull(year5);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1625223599999L + "'", long7 == 1625223599999L);
    }

    @Test
    public void test2328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2328");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        java.lang.Class<?> wildcardClass4 = week2.getClass();
        java.lang.Class class5 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass4);
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date9 = week8.getStart();
        java.lang.Class class10 = null;
        java.util.Date date11 = null;
        java.util.TimeZone timeZone12 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod13 = org.jfree.data.time.RegularTimePeriod.createInstance(class10, date11, timeZone12);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod14 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass4, date9, timeZone12);
        org.jfree.data.time.Week week15 = new org.jfree.data.time.Week(date9);
        long long16 = week15.getSerialIndex();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod17 = week15.next();
        java.util.Date date18 = week15.getEnd();
        java.lang.Class class19 = null;
        org.jfree.data.time.Week week22 = new org.jfree.data.time.Week(9, (int) 'a');
        org.jfree.data.time.Week week25 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod26 = week25.next();
        long long27 = week25.getMiddleMillisecond();
        java.lang.String str28 = week25.toString();
        boolean boolean29 = week22.equals((java.lang.Object) week25);
        java.util.Date date30 = week22.getStart();
        org.jfree.data.time.Week week33 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str34 = week33.toString();
        long long35 = week33.getSerialIndex();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod36 = week33.next();
        java.util.Date date37 = regularTimePeriod36.getEnd();
        org.jfree.data.time.Week week40 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date41 = week40.getStart();
        org.jfree.data.time.Week week44 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod45 = week44.next();
        int int46 = week44.getYearValue();
        java.util.TimeZone timeZone47 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int48 = week44.compareTo((java.lang.Object) timeZone47);
        org.jfree.data.time.Week week49 = new org.jfree.data.time.Week(date41, timeZone47);
        org.jfree.data.time.Week week50 = new org.jfree.data.time.Week(date37, timeZone47);
        org.jfree.data.time.Week week53 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str54 = week53.toString();
        long long55 = week53.getSerialIndex();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod56 = week53.next();
        java.util.Date date57 = regularTimePeriod56.getEnd();
        org.jfree.data.time.Week week60 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date61 = week60.getStart();
        org.jfree.data.time.Week week64 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod65 = week64.next();
        int int66 = week64.getYearValue();
        java.util.TimeZone timeZone67 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int68 = week64.compareTo((java.lang.Object) timeZone67);
        org.jfree.data.time.Week week69 = new org.jfree.data.time.Week(date61, timeZone67);
        org.jfree.data.time.Week week70 = new org.jfree.data.time.Week(date57, timeZone67);
        org.jfree.data.time.Week week71 = new org.jfree.data.time.Week(date37, timeZone67);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod72 = org.jfree.data.time.RegularTimePeriod.createInstance(class19, date30, timeZone67);
        java.util.Locale locale73 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Week week74 = new org.jfree.data.time.Week(date18, timeZone67, locale73);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'locale' argument.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(class5);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone12);
// flaky:         org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod13);
        org.junit.Assert.assertNotNull(regularTimePeriod14);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 5150L + "'", long16 == 5150L);
        org.junit.Assert.assertNotNull(regularTimePeriod17);
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod26);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + (-60506053200001L) + "'", long27 == (-60506053200001L));
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Week 35, 52" + "'", str28, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Week 35, 52" + "'", str34, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 2791L + "'", long35 == 2791L);
        org.junit.Assert.assertNotNull(regularTimePeriod36);
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Sat Sep 02 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 52 + "'", int46 == 52);
        org.junit.Assert.assertNotNull(timeZone47);
// flaky:         org.junit.Assert.assertEquals(timeZone47.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "Week 35, 52" + "'", str54, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 2791L + "'", long55 == 2791L);
        org.junit.Assert.assertNotNull(regularTimePeriod56);
        org.junit.Assert.assertNotNull(date57);
        org.junit.Assert.assertEquals(date57.toString(), "Sat Sep 02 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date61);
        org.junit.Assert.assertEquals(date61.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 52 + "'", int66 == 52);
        org.junit.Assert.assertNotNull(timeZone67);
// flaky:         org.junit.Assert.assertEquals(timeZone67.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertNull(regularTimePeriod72);
    }

    @Test
    public void test2329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2329");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date3 = week2.getStart();
        org.jfree.data.time.Week week4 = new org.jfree.data.time.Week(date3);
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str8 = week7.toString();
        long long9 = week7.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week7.next();
        java.lang.String str11 = week7.toString();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod12 = week7.previous();
        java.lang.Class<?> wildcardClass13 = regularTimePeriod12.getClass();
        boolean boolean14 = week4.equals((java.lang.Object) wildcardClass13);
        java.util.Date date15 = week4.getEnd();
        int int16 = week4.getWeek();
        java.util.Date date17 = week4.getEnd();
        org.jfree.data.time.Week week20 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod21 = week20.previous();
        java.util.Date date22 = week20.getEnd();
        org.jfree.data.time.Week week25 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod26 = week25.next();
        int int27 = week25.getYearValue();
        java.util.TimeZone timeZone28 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int29 = week25.compareTo((java.lang.Object) timeZone28);
        int int30 = week25.getYearValue();
        int int32 = week25.compareTo((java.lang.Object) 9);
        int int33 = week25.getYearValue();
        long long34 = week25.getLastMillisecond();
        int int35 = week25.getWeek();
        java.util.Date date36 = week25.getEnd();
        org.jfree.data.time.Week week39 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date40 = week39.getStart();
        java.util.Date date41 = week39.getEnd();
        org.jfree.data.time.Week week44 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod45 = week44.next();
        java.lang.Class<?> wildcardClass46 = week44.getClass();
        java.lang.Class class47 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass46);
        org.jfree.data.time.Week week50 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date51 = week50.getStart();
        java.lang.Class class52 = null;
        java.util.Date date53 = null;
        java.util.TimeZone timeZone54 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod55 = org.jfree.data.time.RegularTimePeriod.createInstance(class52, date53, timeZone54);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod56 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass46, date51, timeZone54);
        org.jfree.data.time.Week week57 = new org.jfree.data.time.Week(date41, timeZone54);
        org.jfree.data.time.Week week58 = new org.jfree.data.time.Week(date36, timeZone54);
        org.jfree.data.time.Week week59 = new org.jfree.data.time.Week(date22, timeZone54);
        java.util.Locale locale60 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Week week61 = new org.jfree.data.time.Week(date17, timeZone54, locale60);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'locale' argument.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Week 35, 52" + "'", str8, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-60506053200001L) + "'", long9 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Week 35, 52" + "'", str11, "Week 35, 52");
        org.junit.Assert.assertNotNull(regularTimePeriod12);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 9 + "'", int16 == 9);
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 52 + "'", int27 == 52);
        org.junit.Assert.assertNotNull(timeZone28);
// flaky:         org.junit.Assert.assertEquals(timeZone28.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 52 + "'", int30 == 52);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 52 + "'", int33 == 52);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + (-60505750800001L) + "'", long34 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 35 + "'", int35 == 35);
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod45);
        org.junit.Assert.assertNotNull(wildcardClass46);
        org.junit.Assert.assertNotNull(class47);
        org.junit.Assert.assertNotNull(date51);
        org.junit.Assert.assertEquals(date51.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone54);
// flaky:         org.junit.Assert.assertEquals(timeZone54.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod55);
        org.junit.Assert.assertNotNull(regularTimePeriod56);
    }

    @Test
    public void test2330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2330");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        long long4 = week2.getMiddleMillisecond();
        java.lang.String str5 = week2.toString();
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod9 = week8.next();
        java.lang.Class<?> wildcardClass10 = week8.getClass();
        java.lang.Class class11 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass10);
        org.jfree.data.time.Week week14 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date15 = week14.getStart();
        java.lang.Class class16 = null;
        java.util.Date date17 = null;
        java.util.TimeZone timeZone18 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod19 = org.jfree.data.time.RegularTimePeriod.createInstance(class16, date17, timeZone18);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod20 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass10, date15, timeZone18);
        java.lang.Class<?> wildcardClass21 = timeZone18.getClass();
        boolean boolean22 = week2.equals((java.lang.Object) wildcardClass21);
        java.util.Date date23 = week2.getStart();
        java.util.Calendar calendar24 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long25 = week2.getMiddleMillisecond(calendar24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Week 35, 52" + "'", str5, "Week 35, 52");
        org.junit.Assert.assertNotNull(regularTimePeriod9);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNotNull(class11);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone18);
// flaky:         org.junit.Assert.assertEquals(timeZone18.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod19);
        org.junit.Assert.assertNotNull(regularTimePeriod20);
        org.junit.Assert.assertNotNull(wildcardClass21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Sun Aug 20 00:00:00 CET 52");
    }

    @Test
    public void test2331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2331");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        java.lang.Class<?> wildcardClass4 = week2.getClass();
        java.lang.Class class5 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass4);
        java.lang.Class class6 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass4);
        org.jfree.data.time.Week week9 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week9.next();
        int int11 = week9.getYearValue();
        java.util.TimeZone timeZone12 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int13 = week9.compareTo((java.lang.Object) timeZone12);
        int int14 = week9.getYearValue();
        int int16 = week9.compareTo((java.lang.Object) 9);
        java.util.Date date17 = week9.getStart();
        org.jfree.data.time.Week week18 = new org.jfree.data.time.Week(date17);
        org.jfree.data.time.Week week21 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod22 = week21.next();
        int int23 = week21.getYearValue();
        java.util.TimeZone timeZone24 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int25 = week21.compareTo((java.lang.Object) timeZone24);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod26 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass4, date17, timeZone24);
        org.jfree.data.time.Week week29 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.util.Date date30 = week29.getStart();
        org.jfree.data.time.Week week31 = new org.jfree.data.time.Week(date30);
        org.jfree.data.time.Week week34 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod35 = week34.next();
        java.lang.Class<?> wildcardClass36 = week34.getClass();
        java.lang.Class class37 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass36);
        java.lang.Class class38 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass36);
        org.jfree.data.time.Week week41 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod42 = week41.next();
        int int43 = week41.getYearValue();
        java.util.TimeZone timeZone44 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int45 = week41.compareTo((java.lang.Object) timeZone44);
        int int46 = week41.getYearValue();
        int int48 = week41.compareTo((java.lang.Object) 9);
        java.util.Date date49 = week41.getStart();
        org.jfree.data.time.Week week50 = new org.jfree.data.time.Week(date49);
        org.jfree.data.time.Week week53 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod54 = week53.next();
        int int55 = week53.getYearValue();
        java.util.TimeZone timeZone56 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int57 = week53.compareTo((java.lang.Object) timeZone56);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod58 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass36, date49, timeZone56);
        org.jfree.data.time.Week week61 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod62 = week61.previous();
        int int63 = week61.getYearValue();
        java.util.Date date64 = week61.getStart();
        java.util.TimeZone timeZone65 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.Week week66 = new org.jfree.data.time.Week(date64, timeZone65);
        org.jfree.data.time.Week week67 = new org.jfree.data.time.Week(date49, timeZone65);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod68 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass4, date30, timeZone65);
        java.util.Date date69 = regularTimePeriod68.getEnd();
        org.jfree.data.time.Week week70 = new org.jfree.data.time.Week(date69);
        java.lang.String str71 = week70.toString();
        java.util.Calendar calendar72 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long73 = week70.getLastMillisecond(calendar72);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(class5);
        org.junit.Assert.assertNotNull(class6);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertNotNull(timeZone12);
// flaky:         org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 52 + "'", int14 == 52);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 52 + "'", int23 == 52);
        org.junit.Assert.assertNotNull(timeZone24);
// flaky:         org.junit.Assert.assertEquals(timeZone24.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod26);
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod35);
        org.junit.Assert.assertNotNull(wildcardClass36);
        org.junit.Assert.assertNotNull(class37);
        org.junit.Assert.assertNotNull(class38);
        org.junit.Assert.assertNotNull(regularTimePeriod42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 52 + "'", int43 == 52);
        org.junit.Assert.assertNotNull(timeZone44);
// flaky:         org.junit.Assert.assertEquals(timeZone44.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 52 + "'", int46 == 52);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 52 + "'", int55 == 52);
        org.junit.Assert.assertNotNull(timeZone56);
// flaky:         org.junit.Assert.assertEquals(timeZone56.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod58);
        org.junit.Assert.assertNotNull(regularTimePeriod62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 52 + "'", int63 == 52);
        org.junit.Assert.assertNotNull(date64);
        org.junit.Assert.assertEquals(date64.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(timeZone65);
// flaky:         org.junit.Assert.assertEquals(timeZone65.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNotNull(regularTimePeriod68);
        org.junit.Assert.assertNotNull(date69);
        org.junit.Assert.assertEquals(date69.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "Week 35, 52" + "'", str71, "Week 35, 52");
    }

    @Test
    public void test2332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2332");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        java.lang.Class<?> wildcardClass4 = week2.getClass();
        java.lang.Class class5 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass4);
        java.lang.Class class6 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass4);
        org.jfree.data.time.Week week9 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week9.next();
        int int11 = week9.getYearValue();
        java.util.TimeZone timeZone12 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int13 = week9.compareTo((java.lang.Object) timeZone12);
        int int14 = week9.getYearValue();
        int int16 = week9.compareTo((java.lang.Object) 9);
        java.util.Date date17 = week9.getStart();
        org.jfree.data.time.Week week18 = new org.jfree.data.time.Week(date17);
        org.jfree.data.time.Week week21 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod22 = week21.next();
        int int23 = week21.getYearValue();
        java.util.TimeZone timeZone24 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int25 = week21.compareTo((java.lang.Object) timeZone24);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod26 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass4, date17, timeZone24);
        java.util.Date date27 = regularTimePeriod26.getEnd();
        org.jfree.data.time.Week week28 = new org.jfree.data.time.Week(date27);
        java.util.Calendar calendar29 = null;
        // The following exception was thrown during execution in test generation
        try {
            week28.peg(calendar29);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(class5);
        org.junit.Assert.assertNotNull(class6);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertNotNull(timeZone12);
// flaky:         org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 52 + "'", int14 == 52);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 52 + "'", int23 == 52);
        org.junit.Assert.assertNotNull(timeZone24);
// flaky:         org.junit.Assert.assertEquals(timeZone24.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod26);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Sat Aug 26 23:59:59 CET 52");
    }

    @Test
    public void test2333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2333");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getWeek();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod8 = week2.next();
        boolean boolean10 = week2.equals((java.lang.Object) 3);
        long long11 = week2.getLastMillisecond();
        java.lang.String str12 = week2.toString();
        java.util.Date date13 = week2.getEnd();
        org.jfree.data.time.Week week16 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod17 = week16.next();
        int int18 = week16.getYearValue();
        java.util.TimeZone timeZone19 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int20 = week16.compareTo((java.lang.Object) timeZone19);
        int int21 = week16.getYearValue();
        int int23 = week16.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod24 = week16.previous();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod25 = week16.next();
        org.jfree.data.time.Week week28 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod29 = week28.next();
        java.lang.Class<?> wildcardClass30 = week28.getClass();
        java.lang.Class class31 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass30);
        java.lang.Class class32 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass30);
        boolean boolean33 = week16.equals((java.lang.Object) wildcardClass30);
        java.lang.Class class34 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass30);
        org.jfree.data.time.Week week37 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date38 = week37.getStart();
        java.util.Date date39 = week37.getEnd();
        org.jfree.data.time.Week week42 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod43 = week42.next();
        java.lang.Class<?> wildcardClass44 = week42.getClass();
        java.lang.Class class45 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass44);
        org.jfree.data.time.Week week48 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date49 = week48.getStart();
        java.lang.Class class50 = null;
        java.util.Date date51 = null;
        java.util.TimeZone timeZone52 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod53 = org.jfree.data.time.RegularTimePeriod.createInstance(class50, date51, timeZone52);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod54 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass44, date49, timeZone52);
        org.jfree.data.time.Week week55 = new org.jfree.data.time.Week(date39, timeZone52);
        java.lang.Class class56 = null;
        java.util.Date date57 = null;
        java.util.TimeZone timeZone58 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod59 = org.jfree.data.time.RegularTimePeriod.createInstance(class56, date57, timeZone58);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod60 = org.jfree.data.time.RegularTimePeriod.createInstance(class34, date39, timeZone58);
        org.jfree.data.time.Week week61 = new org.jfree.data.time.Week(date13, timeZone58);
        org.jfree.data.time.Week week64 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str65 = week64.toString();
        long long66 = week64.getSerialIndex();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod67 = week64.next();
        java.util.Date date68 = regularTimePeriod67.getEnd();
        org.jfree.data.time.Week week71 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date72 = week71.getStart();
        org.jfree.data.time.Week week75 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod76 = week75.next();
        int int77 = week75.getYearValue();
        java.util.TimeZone timeZone78 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int79 = week75.compareTo((java.lang.Object) timeZone78);
        org.jfree.data.time.Week week80 = new org.jfree.data.time.Week(date72, timeZone78);
        org.jfree.data.time.Week week81 = new org.jfree.data.time.Week(date68, timeZone78);
        org.jfree.data.time.Week week82 = new org.jfree.data.time.Week(date13, timeZone78);
        long long83 = week82.getFirstMillisecond();
        java.util.Date date84 = week82.getStart();
        java.lang.Class<?> wildcardClass85 = date84.getClass();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 35 + "'", int7 == 35);
        org.junit.Assert.assertNotNull(regularTimePeriod8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-60505750800001L) + "'", long11 == (-60505750800001L));
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Week 35, 52" + "'", str12, "Week 35, 52");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 52 + "'", int18 == 52);
        org.junit.Assert.assertNotNull(timeZone19);
// flaky:         org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 52 + "'", int21 == 52);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod24);
        org.junit.Assert.assertNotNull(regularTimePeriod25);
        org.junit.Assert.assertNotNull(regularTimePeriod29);
        org.junit.Assert.assertNotNull(wildcardClass30);
        org.junit.Assert.assertNotNull(class31);
        org.junit.Assert.assertNotNull(class32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(class34);
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod43);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(class45);
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone52);
// flaky:         org.junit.Assert.assertEquals(timeZone52.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod53);
        org.junit.Assert.assertNotNull(regularTimePeriod54);
        org.junit.Assert.assertNotNull(timeZone58);
// flaky:         org.junit.Assert.assertEquals(timeZone58.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod59);
        org.junit.Assert.assertNull(regularTimePeriod60);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "Week 35, 52" + "'", str65, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 2791L + "'", long66 == 2791L);
        org.junit.Assert.assertNotNull(regularTimePeriod67);
        org.junit.Assert.assertNotNull(date68);
        org.junit.Assert.assertEquals(date68.toString(), "Sat Sep 02 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date72);
        org.junit.Assert.assertEquals(date72.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 52 + "'", int77 == 52);
        org.junit.Assert.assertNotNull(timeZone78);
// flaky:         org.junit.Assert.assertEquals(timeZone78.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 1 + "'", int79 == 1);
        org.junit.Assert.assertTrue("'" + long83 + "' != '" + (-60506355600000L) + "'", long83 == (-60506355600000L));
        org.junit.Assert.assertNotNull(date84);
        org.junit.Assert.assertEquals(date84.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(wildcardClass85);
    }

    @Test
    public void test2334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2334");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        java.lang.Class<?> wildcardClass4 = week2.getClass();
        java.lang.Class class5 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass4);
        java.lang.Class class6 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass4);
        org.jfree.data.time.Week week9 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week9.next();
        int int11 = week9.getYearValue();
        java.util.TimeZone timeZone12 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int13 = week9.compareTo((java.lang.Object) timeZone12);
        int int14 = week9.getYearValue();
        int int16 = week9.compareTo((java.lang.Object) 9);
        java.util.Date date17 = week9.getStart();
        org.jfree.data.time.Week week18 = new org.jfree.data.time.Week(date17);
        org.jfree.data.time.Week week21 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod22 = week21.next();
        int int23 = week21.getYearValue();
        java.util.TimeZone timeZone24 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int25 = week21.compareTo((java.lang.Object) timeZone24);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod26 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass4, date17, timeZone24);
        java.util.Date date27 = regularTimePeriod26.getEnd();
        org.jfree.data.time.Week week30 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod31 = week30.next();
        int int32 = week30.getYearValue();
        java.util.TimeZone timeZone33 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int34 = week30.compareTo((java.lang.Object) timeZone33);
        int int35 = week30.getYearValue();
        int int37 = week30.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod38 = week30.previous();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod39 = week30.next();
        org.jfree.data.time.Week week42 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod43 = week42.next();
        java.lang.Class<?> wildcardClass44 = week42.getClass();
        java.lang.Class class45 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass44);
        java.lang.Class class46 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass44);
        boolean boolean47 = week30.equals((java.lang.Object) wildcardClass44);
        java.lang.Class class48 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass44);
        org.jfree.data.time.Week week51 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date52 = week51.getStart();
        java.util.Date date53 = week51.getEnd();
        org.jfree.data.time.Week week56 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod57 = week56.next();
        java.lang.Class<?> wildcardClass58 = week56.getClass();
        java.lang.Class class59 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass58);
        org.jfree.data.time.Week week62 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date63 = week62.getStart();
        java.lang.Class class64 = null;
        java.util.Date date65 = null;
        java.util.TimeZone timeZone66 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod67 = org.jfree.data.time.RegularTimePeriod.createInstance(class64, date65, timeZone66);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod68 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass58, date63, timeZone66);
        org.jfree.data.time.Week week69 = new org.jfree.data.time.Week(date53, timeZone66);
        java.lang.Class class70 = null;
        java.util.Date date71 = null;
        java.util.TimeZone timeZone72 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod73 = org.jfree.data.time.RegularTimePeriod.createInstance(class70, date71, timeZone72);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod74 = org.jfree.data.time.RegularTimePeriod.createInstance(class48, date53, timeZone72);
        org.jfree.data.time.Week week75 = new org.jfree.data.time.Week(date27, timeZone72);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod76 = week75.previous();
        java.util.Date date77 = week75.getStart();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(class5);
        org.junit.Assert.assertNotNull(class6);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertNotNull(timeZone12);
// flaky:         org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 52 + "'", int14 == 52);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 52 + "'", int23 == 52);
        org.junit.Assert.assertNotNull(timeZone24);
// flaky:         org.junit.Assert.assertEquals(timeZone24.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod26);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 52 + "'", int32 == 52);
        org.junit.Assert.assertNotNull(timeZone33);
// flaky:         org.junit.Assert.assertEquals(timeZone33.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 52 + "'", int35 == 52);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod38);
        org.junit.Assert.assertNotNull(regularTimePeriod39);
        org.junit.Assert.assertNotNull(regularTimePeriod43);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(class45);
        org.junit.Assert.assertNotNull(class46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(class48);
        org.junit.Assert.assertNotNull(date52);
        org.junit.Assert.assertEquals(date52.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod57);
        org.junit.Assert.assertNotNull(wildcardClass58);
        org.junit.Assert.assertNotNull(class59);
        org.junit.Assert.assertNotNull(date63);
        org.junit.Assert.assertEquals(date63.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone66);
// flaky:         org.junit.Assert.assertEquals(timeZone66.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod67);
        org.junit.Assert.assertNotNull(regularTimePeriod68);
        org.junit.Assert.assertNotNull(timeZone72);
// flaky:         org.junit.Assert.assertEquals(timeZone72.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod73);
        org.junit.Assert.assertNull(regularTimePeriod74);
        org.junit.Assert.assertNotNull(regularTimePeriod76);
        org.junit.Assert.assertNotNull(date77);
        org.junit.Assert.assertEquals(date77.toString(), "Sun Aug 20 00:00:00 CET 52");
    }

    @Test
    public void test2335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2335");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        long long5 = week2.getLastMillisecond();
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod9 = week8.next();
        java.lang.Class<?> wildcardClass10 = week8.getClass();
        java.lang.Class class11 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass10);
        int int12 = week2.compareTo((java.lang.Object) wildcardClass10);
        java.lang.Class class13 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass10);
        org.jfree.data.time.Week week16 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod17 = week16.next();
        java.lang.Class<?> wildcardClass18 = week16.getClass();
        java.lang.Class class19 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass18);
        org.jfree.data.time.Week week22 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date23 = week22.getStart();
        java.lang.Class class24 = null;
        java.util.Date date25 = null;
        java.util.TimeZone timeZone26 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod27 = org.jfree.data.time.RegularTimePeriod.createInstance(class24, date25, timeZone26);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod28 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass18, date23, timeZone26);
        java.util.TimeZone timeZone29 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod30 = org.jfree.data.time.RegularTimePeriod.createInstance(class13, date23, timeZone29);
        org.jfree.data.time.Week week31 = new org.jfree.data.time.Week(date23);
        org.jfree.data.time.Week week32 = new org.jfree.data.time.Week(date23);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-60505750800001L) + "'", long5 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod9);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNotNull(class11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(class13);
        org.junit.Assert.assertNotNull(regularTimePeriod17);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(class19);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone26);
// flaky:         org.junit.Assert.assertEquals(timeZone26.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod27);
        org.junit.Assert.assertNotNull(regularTimePeriod28);
        org.junit.Assert.assertNotNull(timeZone29);
// flaky:         org.junit.Assert.assertEquals(timeZone29.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod30);
    }

    @Test
    public void test2336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2336");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        java.lang.Class<?> wildcardClass4 = week2.getClass();
        java.lang.Class class5 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass4);
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date9 = week8.getStart();
        java.lang.Class class10 = null;
        java.util.Date date11 = null;
        java.util.TimeZone timeZone12 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod13 = org.jfree.data.time.RegularTimePeriod.createInstance(class10, date11, timeZone12);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod14 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass4, date9, timeZone12);
        java.lang.Class<?> wildcardClass15 = regularTimePeriod14.getClass();
        java.lang.Class class16 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass15);
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(class5);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone12);
// flaky:         org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod13);
        org.junit.Assert.assertNotNull(regularTimePeriod14);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNotNull(class16);
    }

    @Test
    public void test2337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2337");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) (short) 100, 100);
        java.lang.Class<?> wildcardClass3 = week2.getClass();
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test2338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2338");
        org.jfree.data.time.Week week4 = new org.jfree.data.time.Week();
        long long5 = week4.getFirstMillisecond();
        org.jfree.data.time.Year year6 = week4.getYear();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week((int) (byte) 100, year6);
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week(100, year6);
        org.jfree.data.time.Week week9 = new org.jfree.data.time.Week((int) (short) 0, year6);
        org.jfree.data.time.Week week10 = new org.jfree.data.time.Week(6, year6);
        java.util.Calendar calendar11 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long12 = week10.getLastMillisecond(calendar11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1637449200000L + "'", long5 == 1637449200000L);
        org.junit.Assert.assertNotNull(year6);
    }

    @Test
    public void test2339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2339");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(35, 100);
        org.jfree.data.time.Week week5 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod6 = week5.previous();
        int int7 = week5.getYearValue();
        java.util.Date date8 = week5.getEnd();
        long long9 = week5.getMiddleMillisecond();
        org.jfree.data.time.Week week12 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod13 = week12.next();
        int int14 = week12.getYearValue();
        java.util.TimeZone timeZone15 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int16 = week12.compareTo((java.lang.Object) timeZone15);
        int int17 = week12.getYearValue();
        int int19 = week12.compareTo((java.lang.Object) 9);
        java.util.Date date20 = week12.getStart();
        boolean boolean21 = week5.equals((java.lang.Object) date20);
        java.util.Date date22 = week5.getEnd();
        boolean boolean23 = week2.equals((java.lang.Object) week5);
        java.util.Date date24 = week5.getStart();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod25 = week5.previous();
        java.util.Calendar calendar26 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long27 = week5.getLastMillisecond(calendar26);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-60506053200001L) + "'", long9 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 52 + "'", int14 == 52);
        org.junit.Assert.assertNotNull(timeZone15);
// flaky:         org.junit.Assert.assertEquals(timeZone15.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 52 + "'", int17 == 52);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod25);
    }

    @Test
    public void test2340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2340");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date3 = week2.getStart();
        org.jfree.data.time.Week week4 = new org.jfree.data.time.Week(date3);
        long long5 = week4.getLastMillisecond();
        java.util.Calendar calendar6 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long7 = week4.getFirstMillisecond(calendar6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-59100800400001L) + "'", long5 == (-59100800400001L));
    }

    @Test
    public void test2341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2341");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        java.util.Date date10 = week2.getStart();
        org.jfree.data.time.Week week11 = new org.jfree.data.time.Week(date10);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod12 = week11.next();
        int int13 = week11.getYearValue();
        long long14 = week11.getSerialIndex();
        org.jfree.data.time.Week week17 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date18 = week17.getStart();
        int int19 = week17.getWeek();
        java.lang.String str20 = week17.toString();
        java.util.Date date21 = week17.getEnd();
        int int22 = week11.compareTo((java.lang.Object) date21);
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Year year23 = week11.getYear();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Year constructor: year (52) outside valid range.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 52 + "'", int13 == 52);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 2791L + "'", long14 == 2791L);
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 9 + "'", int19 == 9);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Week 9, 97" + "'", str20, "Week 9, 97");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
    }

    @Test
    public void test2342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2342");
        org.jfree.data.time.Week week3 = new org.jfree.data.time.Week();
        long long4 = week3.getFirstMillisecond();
        org.jfree.data.time.Year year5 = week3.getYear();
        org.jfree.data.time.Week week6 = new org.jfree.data.time.Week(52, year5);
        java.util.Date date7 = year5.getStart();
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week((-1969), year5);
        long long9 = year5.getMiddleMillisecond();
        org.jfree.data.time.Week week10 = new org.jfree.data.time.Week(4, year5);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1637449200000L + "'", long4 == 1637449200000L);
        org.junit.Assert.assertNotNull(year5);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Fri Jan 01 00:00:00 CET 2021");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1625223599999L + "'", long9 == 1625223599999L);
    }

    @Test
    public void test2343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2343");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getSerialIndex();
        long long5 = week2.getFirstMillisecond();
        int int6 = week2.getYearValue();
        java.lang.String str7 = week2.toString();
        int int8 = week2.getWeek();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 2791L + "'", long4 == 2791L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-60506355600000L) + "'", long5 == (-60506355600000L));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 52 + "'", int6 == 52);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Week 35, 52" + "'", str7, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 35 + "'", int8 == 35);
    }

    @Test
    public void test2344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2344");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(1, 1);
        java.util.Date date3 = week2.getStart();
        java.util.Calendar calendar4 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long5 = week2.getMiddleMillisecond(calendar4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Dec 26 00:00:00 CET 1");
    }

    @Test
    public void test2345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2345");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '4', (int) ' ');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.previous();
        java.lang.String str4 = week2.toString();
        java.lang.String str5 = week2.toString();
        long long6 = week2.getFirstMillisecond();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Week 52, 32" + "'", str4, "Week 52, 32");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Week 52, 32" + "'", str5, "Week 52, 32");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-61126880400000L) + "'", long6 == (-61126880400000L));
    }

    @Test
    public void test2346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2346");
        org.jfree.data.time.Week week1 = new org.jfree.data.time.Week();
        long long2 = week1.getFirstMillisecond();
        org.jfree.data.time.Year year3 = week1.getYear();
        org.jfree.data.time.Week week4 = new org.jfree.data.time.Week(0, year3);
        org.jfree.data.time.Year year5 = week4.getYear();
        java.util.Date date6 = year5.getEnd();
        org.jfree.data.time.Week week9 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date10 = week9.getStart();
        java.util.Date date11 = week9.getEnd();
        org.jfree.data.time.Week week14 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod15 = week14.next();
        java.lang.Class<?> wildcardClass16 = week14.getClass();
        java.lang.Class class17 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass16);
        org.jfree.data.time.Week week20 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date21 = week20.getStart();
        java.lang.Class class22 = null;
        java.util.Date date23 = null;
        java.util.TimeZone timeZone24 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod25 = org.jfree.data.time.RegularTimePeriod.createInstance(class22, date23, timeZone24);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod26 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass16, date21, timeZone24);
        org.jfree.data.time.Week week27 = new org.jfree.data.time.Week(date11, timeZone24);
        java.util.TimeZone timeZone28 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.Week week29 = new org.jfree.data.time.Week(date11, timeZone28);
        org.jfree.data.time.Week week30 = new org.jfree.data.time.Week(date6, timeZone28);
        int int31 = week30.getYearValue();
        long long32 = week30.getMiddleMillisecond();
        java.util.Calendar calendar33 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long34 = week30.getFirstMillisecond(calendar33);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1637449200000L + "'", long2 == 1637449200000L);
        org.junit.Assert.assertNotNull(year3);
        org.junit.Assert.assertNotNull(year5);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Fri Dec 31 23:59:59 CET 2021");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod15);
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertNotNull(class17);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone24);
// flaky:         org.junit.Assert.assertEquals(timeZone24.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod25);
        org.junit.Assert.assertNotNull(regularTimePeriod26);
        org.junit.Assert.assertNotNull(timeZone28);
// flaky:         org.junit.Assert.assertEquals(timeZone28.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2022 + "'", int31 == 2022);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 1640775599999L + "'", long32 == 1640775599999L);
    }

    @Test
    public void test2347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2347");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date3 = week2.getStart();
        org.jfree.data.time.Week week4 = new org.jfree.data.time.Week(date3);
        java.util.Date date5 = week4.getEnd();
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date9 = week8.getStart();
        java.util.Date date10 = week8.getEnd();
        java.util.Date date11 = week8.getStart();
        org.jfree.data.time.Week week12 = new org.jfree.data.time.Week(date11);
        org.jfree.data.time.Week week15 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod16 = week15.previous();
        java.util.Date date17 = week15.getEnd();
        org.jfree.data.time.Week week20 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date21 = week20.getStart();
        java.util.Date date22 = week20.getEnd();
        java.util.Date date23 = week20.getStart();
        org.jfree.data.time.Week week26 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date27 = week26.getStart();
        org.jfree.data.time.Week week30 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod31 = week30.next();
        int int32 = week30.getYearValue();
        java.util.TimeZone timeZone33 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int34 = week30.compareTo((java.lang.Object) timeZone33);
        org.jfree.data.time.Week week35 = new org.jfree.data.time.Week(date27, timeZone33);
        org.jfree.data.time.Week week36 = new org.jfree.data.time.Week(date23, timeZone33);
        org.jfree.data.time.Week week37 = new org.jfree.data.time.Week(date17, timeZone33);
        org.jfree.data.time.Week week38 = new org.jfree.data.time.Week(date17);
        java.lang.Class<?> wildcardClass39 = week38.getClass();
        org.jfree.data.time.Week week42 = new org.jfree.data.time.Week(0, 0);
        long long43 = week42.getLastMillisecond();
        long long44 = week42.getLastMillisecond();
        java.util.Date date45 = week42.getStart();
        org.jfree.data.time.Week week48 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date49 = week48.getStart();
        org.jfree.data.time.Week week50 = new org.jfree.data.time.Week(date49);
        int int51 = week50.getWeek();
        java.lang.Class<?> wildcardClass52 = week50.getClass();
        java.lang.Class class53 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass52);
        java.util.Date date54 = null;
        org.jfree.data.time.Week week57 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod58 = week57.previous();
        int int59 = week57.getYearValue();
        java.util.Date date60 = week57.getStart();
        java.util.TimeZone timeZone61 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.Week week62 = new org.jfree.data.time.Week(date60, timeZone61);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod63 = org.jfree.data.time.RegularTimePeriod.createInstance(class53, date54, timeZone61);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod64 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass39, date45, timeZone61);
        org.jfree.data.time.Week week65 = new org.jfree.data.time.Week(date11, timeZone61);
        java.util.Locale locale66 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Week week67 = new org.jfree.data.time.Week(date5, timeZone61, locale66);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'locale' argument.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod16);
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 52 + "'", int32 == 52);
        org.junit.Assert.assertNotNull(timeZone33);
// flaky:         org.junit.Assert.assertEquals(timeZone33.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + (-62167741200001L) + "'", long43 == (-62167741200001L));
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + (-62167741200001L) + "'", long44 == (-62167741200001L));
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Sun Dec 21 00:00:00 CET 2");
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 9 + "'", int51 == 9);
        org.junit.Assert.assertNotNull(wildcardClass52);
        org.junit.Assert.assertNotNull(class53);
        org.junit.Assert.assertNotNull(regularTimePeriod58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 52 + "'", int59 == 52);
        org.junit.Assert.assertNotNull(date60);
        org.junit.Assert.assertEquals(date60.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(timeZone61);
// flaky:         org.junit.Assert.assertEquals(timeZone61.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod63);
        org.junit.Assert.assertNotNull(regularTimePeriod64);
    }

    @Test
    public void test2348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2348");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '4', (int) ' ');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.previous();
        int int4 = week2.getWeek();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.next();
        java.util.Date date6 = regularTimePeriod5.getEnd();
        org.jfree.data.time.Week week9 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str10 = week9.toString();
        long long11 = week9.getSerialIndex();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod12 = week9.next();
        java.util.Date date13 = regularTimePeriod12.getEnd();
        org.jfree.data.time.Week week16 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date17 = week16.getStart();
        org.jfree.data.time.Week week20 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod21 = week20.next();
        int int22 = week20.getYearValue();
        java.util.TimeZone timeZone23 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int24 = week20.compareTo((java.lang.Object) timeZone23);
        org.jfree.data.time.Week week25 = new org.jfree.data.time.Week(date17, timeZone23);
        org.jfree.data.time.Week week26 = new org.jfree.data.time.Week(date13, timeZone23);
        org.jfree.data.time.Week week28 = new org.jfree.data.time.Week();
        long long29 = week28.getFirstMillisecond();
        org.jfree.data.time.Year year30 = week28.getYear();
        org.jfree.data.time.Week week31 = new org.jfree.data.time.Week(0, year30);
        org.jfree.data.time.Year year32 = week31.getYear();
        java.util.Date date33 = year32.getEnd();
        org.jfree.data.time.Week week36 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date37 = week36.getStart();
        java.util.Date date38 = week36.getEnd();
        org.jfree.data.time.Week week41 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod42 = week41.next();
        java.lang.Class<?> wildcardClass43 = week41.getClass();
        java.lang.Class class44 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass43);
        org.jfree.data.time.Week week47 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date48 = week47.getStart();
        java.lang.Class class49 = null;
        java.util.Date date50 = null;
        java.util.TimeZone timeZone51 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod52 = org.jfree.data.time.RegularTimePeriod.createInstance(class49, date50, timeZone51);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod53 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass43, date48, timeZone51);
        org.jfree.data.time.Week week54 = new org.jfree.data.time.Week(date38, timeZone51);
        java.util.TimeZone timeZone55 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.Week week56 = new org.jfree.data.time.Week(date38, timeZone55);
        org.jfree.data.time.Week week57 = new org.jfree.data.time.Week(date33, timeZone55);
        org.jfree.data.time.Week week58 = new org.jfree.data.time.Week(date13, timeZone55);
        org.jfree.data.time.Week week59 = new org.jfree.data.time.Week(date6, timeZone55);
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Jan 03 23:59:59 CET 33");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Week 35, 52" + "'", str10, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 2791L + "'", long11 == 2791L);
        org.junit.Assert.assertNotNull(regularTimePeriod12);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sat Sep 02 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 52 + "'", int22 == 52);
        org.junit.Assert.assertNotNull(timeZone23);
// flaky:         org.junit.Assert.assertEquals(timeZone23.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 1637449200000L + "'", long29 == 1637449200000L);
        org.junit.Assert.assertNotNull(year30);
        org.junit.Assert.assertNotNull(year32);
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Fri Dec 31 23:59:59 CET 2021");
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod42);
        org.junit.Assert.assertNotNull(wildcardClass43);
        org.junit.Assert.assertNotNull(class44);
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone51);
// flaky:         org.junit.Assert.assertEquals(timeZone51.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod52);
        org.junit.Assert.assertNotNull(regularTimePeriod53);
        org.junit.Assert.assertNotNull(timeZone55);
// flaky:         org.junit.Assert.assertEquals(timeZone55.getDisplayName(), "Central European Time");
    }

    @Test
    public void test2349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2349");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date3 = week2.getStart();
        org.jfree.data.time.Week week4 = new org.jfree.data.time.Week(date3);
        int int5 = week4.getWeek();
        java.lang.Class<?> wildcardClass6 = week4.getClass();
        java.lang.Class class7 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass6);
        org.jfree.data.time.Week week10 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date11 = week10.getStart();
        org.jfree.data.time.Week week14 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod15 = week14.next();
        int int16 = week14.getYearValue();
        java.util.TimeZone timeZone17 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int18 = week14.compareTo((java.lang.Object) timeZone17);
        org.jfree.data.time.Week week19 = new org.jfree.data.time.Week(date11, timeZone17);
        java.util.TimeZone timeZone20 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.Week week21 = new org.jfree.data.time.Week(date11, timeZone20);
        org.jfree.data.time.Week week24 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod25 = week24.next();
        int int26 = week24.getYearValue();
        java.util.TimeZone timeZone27 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int28 = week24.compareTo((java.lang.Object) timeZone27);
        int int29 = week24.getYearValue();
        int int31 = week24.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod32 = week24.previous();
        int int33 = week24.getYearValue();
        long long34 = week24.getLastMillisecond();
        org.jfree.data.time.Week week37 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod38 = week37.next();
        java.lang.Class<?> wildcardClass39 = week37.getClass();
        java.lang.Class class40 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass39);
        boolean boolean41 = week24.equals((java.lang.Object) wildcardClass39);
        org.jfree.data.time.Week week44 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod45 = week44.next();
        java.lang.Class<?> wildcardClass46 = week44.getClass();
        java.lang.Class class47 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass46);
        java.lang.Class class48 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass46);
        org.jfree.data.time.Week week51 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod52 = week51.next();
        int int53 = week51.getYearValue();
        java.util.TimeZone timeZone54 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int55 = week51.compareTo((java.lang.Object) timeZone54);
        int int56 = week51.getYearValue();
        int int58 = week51.compareTo((java.lang.Object) 9);
        java.util.Date date59 = week51.getStart();
        org.jfree.data.time.Week week60 = new org.jfree.data.time.Week(date59);
        org.jfree.data.time.Week week63 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod64 = week63.next();
        int int65 = week63.getYearValue();
        java.util.TimeZone timeZone66 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int67 = week63.compareTo((java.lang.Object) timeZone66);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod68 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass46, date59, timeZone66);
        org.jfree.data.time.Week week69 = new org.jfree.data.time.Week(date59);
        org.jfree.data.time.Week week72 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod73 = week72.next();
        int int74 = week72.getYearValue();
        java.util.TimeZone timeZone75 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int76 = week72.compareTo((java.lang.Object) timeZone75);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod77 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass39, date59, timeZone75);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod78 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass6, date11, timeZone75);
        java.lang.Class class79 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass6);
        java.lang.Class class80 = org.jfree.data.time.RegularTimePeriod.downsize(class79);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 9 + "'", int5 == 9);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(class7);
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 52 + "'", int16 == 52);
        org.junit.Assert.assertNotNull(timeZone17);
// flaky:         org.junit.Assert.assertEquals(timeZone17.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(timeZone20);
// flaky:         org.junit.Assert.assertEquals(timeZone20.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNotNull(regularTimePeriod25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 52 + "'", int26 == 52);
        org.junit.Assert.assertNotNull(timeZone27);
// flaky:         org.junit.Assert.assertEquals(timeZone27.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 52 + "'", int29 == 52);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 52 + "'", int33 == 52);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + (-60505750800001L) + "'", long34 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod38);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(class40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(regularTimePeriod45);
        org.junit.Assert.assertNotNull(wildcardClass46);
        org.junit.Assert.assertNotNull(class47);
        org.junit.Assert.assertNotNull(class48);
        org.junit.Assert.assertNotNull(regularTimePeriod52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 52 + "'", int53 == 52);
        org.junit.Assert.assertNotNull(timeZone54);
// flaky:         org.junit.Assert.assertEquals(timeZone54.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 52 + "'", int56 == 52);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertNotNull(date59);
        org.junit.Assert.assertEquals(date59.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 52 + "'", int65 == 52);
        org.junit.Assert.assertNotNull(timeZone66);
// flaky:         org.junit.Assert.assertEquals(timeZone66.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod68);
        org.junit.Assert.assertNotNull(regularTimePeriod73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 52 + "'", int74 == 52);
        org.junit.Assert.assertNotNull(timeZone75);
// flaky:         org.junit.Assert.assertEquals(timeZone75.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod77);
        org.junit.Assert.assertNotNull(regularTimePeriod78);
        org.junit.Assert.assertNotNull(class79);
        org.junit.Assert.assertNotNull(class80);
    }

    @Test
    public void test2350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2350");
        org.jfree.data.time.Week week6 = new org.jfree.data.time.Week();
        long long7 = week6.getFirstMillisecond();
        org.jfree.data.time.Year year8 = week6.getYear();
        org.jfree.data.time.Week week9 = new org.jfree.data.time.Week((int) (byte) 100, year8);
        org.jfree.data.time.Week week10 = new org.jfree.data.time.Week((int) (short) 10, year8);
        org.jfree.data.time.Week week11 = new org.jfree.data.time.Week(1, year8);
        org.jfree.data.time.Week week12 = new org.jfree.data.time.Week(0, year8);
        org.jfree.data.time.Week week13 = new org.jfree.data.time.Week((int) ' ', year8);
        org.jfree.data.time.Week week14 = new org.jfree.data.time.Week((int) (short) 0, year8);
        java.util.Calendar calendar15 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long16 = year8.getMiddleMillisecond(calendar15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1637449200000L + "'", long7 == 1637449200000L);
        org.junit.Assert.assertNotNull(year8);
    }

    @Test
    public void test2351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2351");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        long long4 = week2.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.previous();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod6 = week2.next();
        java.util.Calendar calendar7 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long8 = regularTimePeriod6.getMiddleMillisecond(calendar7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertNotNull(regularTimePeriod6);
    }

    @Test
    public void test2352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2352");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(52, (int) '4');
        java.lang.Class<?> wildcardClass3 = week2.getClass();
        java.lang.Class class4 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass3);
        java.lang.Class class5 = org.jfree.data.time.RegularTimePeriod.downsize(class4);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(class4);
        org.junit.Assert.assertNotNull(class5);
    }

    @Test
    public void test2353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2353");
        org.jfree.data.time.Week week4 = new org.jfree.data.time.Week();
        long long5 = week4.getFirstMillisecond();
        org.jfree.data.time.Year year6 = week4.getYear();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week((int) (byte) 100, year6);
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week((int) (short) 10, year6);
        org.jfree.data.time.Week week9 = new org.jfree.data.time.Week(1, year6);
        org.jfree.data.time.Week week10 = new org.jfree.data.time.Week(48, year6);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1637449200000L + "'", long5 == 1637449200000L);
        org.junit.Assert.assertNotNull(year6);
    }

    @Test
    public void test2354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2354");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) (byte) 100, (int) (byte) 1);
    }

    @Test
    public void test2355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2355");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.next();
        java.util.Date date6 = week2.getEnd();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week(date6);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod8 = week7.next();
        org.jfree.data.time.Week week11 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str12 = week11.toString();
        long long13 = week11.getSerialIndex();
        boolean boolean14 = week7.equals((java.lang.Object) long13);
        java.lang.String str15 = week7.toString();
        long long16 = week7.getLastMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod17 = week7.next();
        int int18 = week7.getYearValue();
        java.lang.String str19 = week7.toString();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod20 = week7.previous();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod8);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Week 35, 52" + "'", str12, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 2791L + "'", long13 == 2791L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Week 35, 52" + "'", str15, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-60505750800001L) + "'", long16 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 52 + "'", int18 == 52);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Week 35, 52" + "'", str19, "Week 35, 52");
        org.junit.Assert.assertNotNull(regularTimePeriod20);
    }

    @Test
    public void test2356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2356");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.previous();
        int int4 = week2.getYearValue();
        java.util.Date date5 = week2.getEnd();
        long long6 = week2.getFirstMillisecond();
        java.lang.String str7 = week2.toString();
        int int8 = week2.getYearValue();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-60506355600000L) + "'", long6 == (-60506355600000L));
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Week 35, 52" + "'", str7, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 52 + "'", int8 == 52);
    }

    @Test
    public void test2357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2357");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date3 = week2.getStart();
        java.util.Date date4 = week2.getEnd();
        org.jfree.data.time.Week week5 = new org.jfree.data.time.Week(date4);
        java.util.Date date6 = week5.getEnd();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week();
        long long8 = week7.getFirstMillisecond();
        long long9 = week7.getSerialIndex();
        int int10 = week7.getYearValue();
        java.util.Date date11 = week7.getEnd();
        org.jfree.data.time.Week week14 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date15 = week14.getStart();
        org.jfree.data.time.Week week16 = new org.jfree.data.time.Week(date15);
        java.util.Date date17 = week16.getStart();
        org.jfree.data.time.Week week20 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod21 = week20.next();
        int int22 = week20.getYearValue();
        java.util.TimeZone timeZone23 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int24 = week20.compareTo((java.lang.Object) timeZone23);
        int int25 = week20.getYearValue();
        long long26 = week20.getMiddleMillisecond();
        java.lang.Class<?> wildcardClass27 = week20.getClass();
        org.jfree.data.time.Week week30 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date31 = week30.getStart();
        org.jfree.data.time.Week week34 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod35 = week34.next();
        int int36 = week34.getYearValue();
        java.util.TimeZone timeZone37 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int38 = week34.compareTo((java.lang.Object) timeZone37);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod39 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass27, date31, timeZone37);
        org.jfree.data.time.Week week40 = new org.jfree.data.time.Week(date17, timeZone37);
        org.jfree.data.time.Week week41 = new org.jfree.data.time.Week(date11, timeZone37);
        org.jfree.data.time.Week week42 = new org.jfree.data.time.Week(date6, timeZone37);
        int int43 = week42.getWeek();
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Year year44 = week42.getYear();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Year constructor: year (97) outside valid range.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1637449200000L + "'", long8 == 1637449200000L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 107161L + "'", long9 == 107161L);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2021 + "'", int10 == 2021);
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Sat Nov 27 23:59:59 CET 2021");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 52 + "'", int22 == 52);
        org.junit.Assert.assertNotNull(timeZone23);
// flaky:         org.junit.Assert.assertEquals(timeZone23.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 52 + "'", int25 == 52);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + (-60506053200001L) + "'", long26 == (-60506053200001L));
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 52 + "'", int36 == 52);
        org.junit.Assert.assertNotNull(timeZone37);
// flaky:         org.junit.Assert.assertEquals(timeZone37.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod39);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 9 + "'", int43 == 9);
    }

    @Test
    public void test2358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2358");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((-1924), (int) 'a');
    }

    @Test
    public void test2359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2359");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.previous();
        int int4 = week2.getYearValue();
        java.lang.String str5 = week2.toString();
        long long6 = week2.getSerialIndex();
        java.util.Calendar calendar7 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long8 = week2.getLastMillisecond(calendar7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Week 35, 52" + "'", str5, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 2791L + "'", long6 == 2791L);
    }

    @Test
    public void test2360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2360");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        java.util.Date date10 = week2.getStart();
        org.jfree.data.time.Week week13 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod14 = week13.next();
        java.lang.Class<?> wildcardClass15 = week13.getClass();
        java.lang.Class class16 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass15);
        java.lang.Class class17 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass15);
        org.jfree.data.time.Week week20 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod21 = week20.next();
        int int22 = week20.getYearValue();
        java.util.TimeZone timeZone23 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int24 = week20.compareTo((java.lang.Object) timeZone23);
        int int25 = week20.getYearValue();
        int int27 = week20.compareTo((java.lang.Object) 9);
        java.util.Date date28 = week20.getStart();
        org.jfree.data.time.Week week29 = new org.jfree.data.time.Week(date28);
        org.jfree.data.time.Week week32 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod33 = week32.next();
        int int34 = week32.getYearValue();
        java.util.TimeZone timeZone35 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int36 = week32.compareTo((java.lang.Object) timeZone35);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod37 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass15, date28, timeZone35);
        org.jfree.data.time.Week week40 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod41 = week40.previous();
        int int42 = week40.getYearValue();
        java.util.Date date43 = week40.getStart();
        java.util.TimeZone timeZone44 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.Week week45 = new org.jfree.data.time.Week(date43, timeZone44);
        org.jfree.data.time.Week week46 = new org.jfree.data.time.Week(date28, timeZone44);
        org.jfree.data.time.Week week47 = new org.jfree.data.time.Week(date10, timeZone44);
        int int48 = week47.getWeek();
        long long49 = week47.getSerialIndex();
        long long50 = week47.getLastMillisecond();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod14);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNotNull(class16);
        org.junit.Assert.assertNotNull(class17);
        org.junit.Assert.assertNotNull(regularTimePeriod21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 52 + "'", int22 == 52);
        org.junit.Assert.assertNotNull(timeZone23);
// flaky:         org.junit.Assert.assertEquals(timeZone23.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 52 + "'", int25 == 52);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 52 + "'", int34 == 52);
        org.junit.Assert.assertNotNull(timeZone35);
// flaky:         org.junit.Assert.assertEquals(timeZone35.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod37);
        org.junit.Assert.assertNotNull(regularTimePeriod41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 52 + "'", int42 == 52);
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(timeZone44);
// flaky:         org.junit.Assert.assertEquals(timeZone44.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 35 + "'", int48 == 35);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 2791L + "'", long49 == 2791L);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + (-60505750800001L) + "'", long50 == (-60505750800001L));
    }

    @Test
    public void test2361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2361");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '4', (int) ' ');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.previous();
        java.lang.String str4 = week2.toString();
        java.lang.String str5 = week2.toString();
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod9 = week8.next();
        int int10 = week8.getYearValue();
        java.util.TimeZone timeZone11 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int12 = week8.compareTo((java.lang.Object) timeZone11);
        int int13 = week8.getYearValue();
        int int15 = week8.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod16 = week8.previous();
        int int17 = week8.getYearValue();
        long long18 = week8.getLastMillisecond();
        org.jfree.data.time.Week week21 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod22 = week21.next();
        java.lang.Class<?> wildcardClass23 = week21.getClass();
        java.lang.Class class24 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass23);
        boolean boolean25 = week8.equals((java.lang.Object) wildcardClass23);
        int int26 = week8.getYearValue();
        boolean boolean27 = week2.equals((java.lang.Object) week8);
        java.lang.Class<?> wildcardClass28 = week8.getClass();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Week 52, 32" + "'", str4, "Week 52, 32");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Week 52, 32" + "'", str5, "Week 52, 32");
        org.junit.Assert.assertNotNull(regularTimePeriod9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 52 + "'", int10 == 52);
        org.junit.Assert.assertNotNull(timeZone11);
// flaky:         org.junit.Assert.assertEquals(timeZone11.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 52 + "'", int13 == 52);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 52 + "'", int17 == 52);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-60505750800001L) + "'", long18 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod22);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertNotNull(class24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 52 + "'", int26 == 52);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(wildcardClass28);
    }

    @Test
    public void test2362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2362");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.next();
        java.util.Date date6 = week2.getEnd();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week(date6);
        long long8 = week7.getLastMillisecond();
        java.util.Date date9 = week7.getEnd();
        long long10 = week7.getLastMillisecond();
        java.util.Date date11 = week7.getEnd();
        java.util.Date date12 = week7.getStart();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-60505750800001L) + "'", long8 == (-60505750800001L));
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-60505750800001L) + "'", long10 == (-60505750800001L));
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Sun Aug 20 00:00:00 CET 52");
    }

    @Test
    public void test2363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2363");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date3 = week2.getStart();
        java.util.Date date4 = week2.getEnd();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod8 = week7.next();
        int int9 = week7.getYearValue();
        java.util.TimeZone timeZone10 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int11 = week7.compareTo((java.lang.Object) timeZone10);
        int int12 = week7.getYearValue();
        int int14 = week7.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod15 = week7.previous();
        int int16 = week7.getYearValue();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod17 = week7.next();
        java.lang.Class<?> wildcardClass18 = regularTimePeriod17.getClass();
        org.jfree.data.time.Week week21 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod22 = week21.next();
        java.lang.Class<?> wildcardClass23 = week21.getClass();
        java.lang.Class class24 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass23);
        java.lang.Class class25 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass23);
        org.jfree.data.time.Week week28 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod29 = week28.next();
        int int30 = week28.getYearValue();
        java.util.TimeZone timeZone31 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int32 = week28.compareTo((java.lang.Object) timeZone31);
        int int33 = week28.getYearValue();
        int int35 = week28.compareTo((java.lang.Object) 9);
        java.util.Date date36 = week28.getStart();
        org.jfree.data.time.Week week37 = new org.jfree.data.time.Week(date36);
        org.jfree.data.time.Week week40 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod41 = week40.next();
        int int42 = week40.getYearValue();
        java.util.TimeZone timeZone43 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int44 = week40.compareTo((java.lang.Object) timeZone43);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod45 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass23, date36, timeZone43);
        org.jfree.data.time.Week week48 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str49 = week48.toString();
        long long50 = week48.getMiddleMillisecond();
        long long51 = week48.getLastMillisecond();
        org.jfree.data.time.Week week54 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod55 = week54.next();
        java.lang.Class<?> wildcardClass56 = week54.getClass();
        java.lang.Class class57 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass56);
        int int58 = week48.compareTo((java.lang.Object) wildcardClass56);
        java.lang.Class class59 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass56);
        org.jfree.data.time.Week week62 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod63 = week62.next();
        java.lang.Class<?> wildcardClass64 = week62.getClass();
        java.lang.Class class65 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass64);
        org.jfree.data.time.Week week68 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date69 = week68.getStart();
        java.lang.Class class70 = null;
        java.util.Date date71 = null;
        java.util.TimeZone timeZone72 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod73 = org.jfree.data.time.RegularTimePeriod.createInstance(class70, date71, timeZone72);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod74 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass64, date69, timeZone72);
        java.util.TimeZone timeZone75 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod76 = org.jfree.data.time.RegularTimePeriod.createInstance(class59, date69, timeZone75);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod77 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass18, date36, timeZone75);
        java.util.Locale locale78 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Week week79 = new org.jfree.data.time.Week(date4, timeZone75, locale78);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'locale' argument.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 52 + "'", int9 == 52);
        org.junit.Assert.assertNotNull(timeZone10);
// flaky:         org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 52 + "'", int16 == 52);
        org.junit.Assert.assertNotNull(regularTimePeriod17);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(regularTimePeriod22);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertNotNull(class24);
        org.junit.Assert.assertNotNull(class25);
        org.junit.Assert.assertNotNull(regularTimePeriod29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 52 + "'", int30 == 52);
        org.junit.Assert.assertNotNull(timeZone31);
// flaky:         org.junit.Assert.assertEquals(timeZone31.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 52 + "'", int33 == 52);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 52 + "'", int42 == 52);
        org.junit.Assert.assertNotNull(timeZone43);
// flaky:         org.junit.Assert.assertEquals(timeZone43.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod45);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "Week 35, 52" + "'", str49, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + (-60506053200001L) + "'", long50 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + (-60505750800001L) + "'", long51 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod55);
        org.junit.Assert.assertNotNull(wildcardClass56);
        org.junit.Assert.assertNotNull(class57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertNotNull(class59);
        org.junit.Assert.assertNotNull(regularTimePeriod63);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertNotNull(class65);
        org.junit.Assert.assertNotNull(date69);
        org.junit.Assert.assertEquals(date69.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone72);
// flaky:         org.junit.Assert.assertEquals(timeZone72.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod73);
        org.junit.Assert.assertNotNull(regularTimePeriod74);
        org.junit.Assert.assertNotNull(timeZone75);
// flaky:         org.junit.Assert.assertEquals(timeZone75.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod76);
        org.junit.Assert.assertNotNull(regularTimePeriod77);
    }

    @Test
    public void test2364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2364");
        org.jfree.data.time.Week week4 = new org.jfree.data.time.Week();
        long long5 = week4.getFirstMillisecond();
        org.jfree.data.time.Year year6 = week4.getYear();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week(0, year6);
        org.jfree.data.time.Year year8 = week7.getYear();
        org.jfree.data.time.Week week9 = new org.jfree.data.time.Week(97, year8);
        org.jfree.data.time.Week week10 = new org.jfree.data.time.Week(0, year8);
        org.jfree.data.time.Week week11 = new org.jfree.data.time.Week((int) '#', year8);
        java.util.Date date12 = week11.getEnd();
        org.jfree.data.time.Week week15 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str16 = week15.toString();
        long long17 = week15.getMiddleMillisecond();
        long long18 = week15.getLastMillisecond();
        org.jfree.data.time.Week week21 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod22 = week21.next();
        java.lang.Class<?> wildcardClass23 = week21.getClass();
        java.lang.Class class24 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass23);
        int int25 = week15.compareTo((java.lang.Object) wildcardClass23);
        java.lang.Class class26 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass23);
        org.jfree.data.time.Week week29 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod30 = week29.next();
        java.lang.Class<?> wildcardClass31 = week29.getClass();
        java.lang.Class class32 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass31);
        org.jfree.data.time.Week week35 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date36 = week35.getStart();
        java.lang.Class class37 = null;
        java.util.Date date38 = null;
        java.util.TimeZone timeZone39 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod40 = org.jfree.data.time.RegularTimePeriod.createInstance(class37, date38, timeZone39);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod41 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass31, date36, timeZone39);
        java.util.TimeZone timeZone42 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod43 = org.jfree.data.time.RegularTimePeriod.createInstance(class26, date36, timeZone42);
        org.jfree.data.time.Week week44 = new org.jfree.data.time.Week();
        long long45 = week44.getFirstMillisecond();
        long long46 = week44.getSerialIndex();
        int int47 = week44.getYearValue();
        java.util.Date date48 = week44.getEnd();
        org.jfree.data.time.Week week51 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str52 = week51.toString();
        long long53 = week51.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod54 = week51.next();
        java.util.Date date55 = week51.getEnd();
        org.jfree.data.time.Week week56 = new org.jfree.data.time.Week(date55);
        org.jfree.data.time.Week week59 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date60 = week59.getStart();
        org.jfree.data.time.Week week63 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod64 = week63.next();
        int int65 = week63.getYearValue();
        java.util.TimeZone timeZone66 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int67 = week63.compareTo((java.lang.Object) timeZone66);
        org.jfree.data.time.Week week68 = new org.jfree.data.time.Week(date60, timeZone66);
        org.jfree.data.time.Week week69 = new org.jfree.data.time.Week(date55, timeZone66);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod70 = org.jfree.data.time.RegularTimePeriod.createInstance(class26, date48, timeZone66);
        org.jfree.data.time.Week week71 = new org.jfree.data.time.Week(date12, timeZone66);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1637449200000L + "'", long5 == 1637449200000L);
        org.junit.Assert.assertNotNull(year6);
        org.junit.Assert.assertNotNull(year8);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Sat Aug 28 23:59:59 CEST 2021");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Week 35, 52" + "'", str16, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-60506053200001L) + "'", long17 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-60505750800001L) + "'", long18 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod22);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertNotNull(class24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(class26);
        org.junit.Assert.assertNotNull(regularTimePeriod30);
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertNotNull(class32);
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone39);
// flaky:         org.junit.Assert.assertEquals(timeZone39.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod40);
        org.junit.Assert.assertNotNull(regularTimePeriod41);
        org.junit.Assert.assertNotNull(timeZone42);
// flaky:         org.junit.Assert.assertEquals(timeZone42.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod43);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 1637449200000L + "'", long45 == 1637449200000L);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 107161L + "'", long46 == 107161L);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2021 + "'", int47 == 2021);
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Sat Nov 27 23:59:59 CET 2021");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "Week 35, 52" + "'", str52, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + (-60506053200001L) + "'", long53 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod54);
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date60);
        org.junit.Assert.assertEquals(date60.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 52 + "'", int65 == 52);
        org.junit.Assert.assertNotNull(timeZone66);
// flaky:         org.junit.Assert.assertEquals(timeZone66.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod70);
    }

    @Test
    public void test2365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2365");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod8 = week2.next();
        java.lang.Class<?> wildcardClass9 = regularTimePeriod8.getClass();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertNotNull(regularTimePeriod8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test2366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2366");
        org.jfree.data.time.Week week3 = new org.jfree.data.time.Week();
        long long4 = week3.getFirstMillisecond();
        org.jfree.data.time.Year year5 = week3.getYear();
        org.jfree.data.time.Week week6 = new org.jfree.data.time.Week(0, year5);
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week(53, year5);
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week((int) '4', year5);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod9 = week8.previous();
        org.jfree.data.time.Year year10 = week8.getYear();
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1637449200000L + "'", long4 == 1637449200000L);
        org.junit.Assert.assertNotNull(year5);
        org.junit.Assert.assertNotNull(regularTimePeriod9);
        org.junit.Assert.assertNotNull(year10);
    }

    @Test
    public void test2367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2367");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.next();
        java.util.Date date6 = week2.getEnd();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week(date6);
        int int8 = week7.getWeek();
        boolean boolean10 = week7.equals((java.lang.Object) 1637449200000L);
        org.jfree.data.time.Week week13 = new org.jfree.data.time.Week(9, (int) 'a');
        org.jfree.data.time.Week week16 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod17 = week16.next();
        long long18 = week16.getMiddleMillisecond();
        java.lang.String str19 = week16.toString();
        boolean boolean20 = week13.equals((java.lang.Object) week16);
        int int21 = week16.getWeek();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod22 = week16.next();
        boolean boolean23 = week7.equals((java.lang.Object) week16);
        long long24 = week16.getLastMillisecond();
        org.jfree.data.time.Week week27 = new org.jfree.data.time.Week();
        long long28 = week27.getFirstMillisecond();
        org.jfree.data.time.Year year29 = week27.getYear();
        org.jfree.data.time.Week week30 = new org.jfree.data.time.Week((int) (byte) 100, year29);
        org.jfree.data.time.Week week31 = new org.jfree.data.time.Week(100, year29);
        int int32 = week16.compareTo((java.lang.Object) week31);
        org.jfree.data.time.Week week35 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str36 = week35.toString();
        long long37 = week35.getMiddleMillisecond();
        long long38 = week35.getLastMillisecond();
        org.jfree.data.time.Week week41 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod42 = week41.next();
        java.lang.Class<?> wildcardClass43 = week41.getClass();
        java.lang.Class class44 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass43);
        int int45 = week35.compareTo((java.lang.Object) wildcardClass43);
        long long46 = week35.getMiddleMillisecond();
        java.util.Date date47 = week35.getEnd();
        int int48 = week35.getWeek();
        long long49 = week35.getLastMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod50 = week35.next();
        long long51 = week35.getFirstMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod52 = week35.next();
        java.util.Date date53 = week35.getStart();
        boolean boolean54 = week31.equals((java.lang.Object) date53);
        org.jfree.data.time.Week week55 = new org.jfree.data.time.Week(date53);
        org.jfree.data.time.Week week56 = new org.jfree.data.time.Week(date53);
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Year year57 = week56.getYear();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Year constructor: year (52) outside valid range.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 35 + "'", int8 == 35);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(regularTimePeriod17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-60506053200001L) + "'", long18 == (-60506053200001L));
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Week 35, 52" + "'", str19, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 35 + "'", int21 == 35);
        org.junit.Assert.assertNotNull(regularTimePeriod22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-60505750800001L) + "'", long24 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 1637449200000L + "'", long28 == 1637449200000L);
        org.junit.Assert.assertNotNull(year29);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1969) + "'", int32 == (-1969));
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Week 35, 52" + "'", str36, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + (-60506053200001L) + "'", long37 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + (-60505750800001L) + "'", long38 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod42);
        org.junit.Assert.assertNotNull(wildcardClass43);
        org.junit.Assert.assertNotNull(class44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + (-60506053200001L) + "'", long46 == (-60506053200001L));
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 35 + "'", int48 == 35);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + (-60505750800001L) + "'", long49 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod50);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + (-60506355600000L) + "'", long51 == (-60506355600000L));
        org.junit.Assert.assertNotNull(regularTimePeriod52);
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test2368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2368");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date3 = week2.getStart();
        org.jfree.data.time.Week week4 = new org.jfree.data.time.Week(date3);
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str8 = week7.toString();
        long long9 = week7.getMiddleMillisecond();
        long long10 = week7.getLastMillisecond();
        org.jfree.data.time.Week week13 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod14 = week13.next();
        java.lang.Class<?> wildcardClass15 = week13.getClass();
        java.lang.Class class16 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass15);
        int int17 = week7.compareTo((java.lang.Object) wildcardClass15);
        java.lang.Class class18 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass15);
        boolean boolean19 = week4.equals((java.lang.Object) wildcardClass15);
        java.lang.String str20 = week4.toString();
        java.util.Calendar calendar21 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long22 = week4.getFirstMillisecond(calendar21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Week 35, 52" + "'", str8, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-60506053200001L) + "'", long9 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-60505750800001L) + "'", long10 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod14);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNotNull(class16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(class18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Week 9, 97" + "'", str20, "Week 9, 97");
    }

    @Test
    public void test2369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2369");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week();
        long long3 = week2.getFirstMillisecond();
        org.jfree.data.time.Year year4 = week2.getYear();
        org.jfree.data.time.Week week5 = new org.jfree.data.time.Week(0, year4);
        java.util.Date date6 = year4.getStart();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week(3, year4);
        long long8 = week7.getFirstMillisecond();
        long long9 = week7.getLastMillisecond();
        java.util.Date date10 = week7.getEnd();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1637449200000L + "'", long3 == 1637449200000L);
        org.junit.Assert.assertNotNull(year4);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Fri Jan 01 00:00:00 CET 2021");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1610233200000L + "'", long8 == 1610233200000L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1610837999999L + "'", long9 == 1610837999999L);
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sat Jan 16 23:59:59 CET 2021");
    }

    @Test
    public void test2370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2370");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getWeek();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod8 = week2.next();
        boolean boolean10 = week2.equals((java.lang.Object) 3);
        long long11 = week2.getLastMillisecond();
        java.lang.String str12 = week2.toString();
        java.util.Date date13 = week2.getEnd();
        org.jfree.data.time.Week week16 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str17 = week16.toString();
        long long18 = week16.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod19 = week16.next();
        java.util.Date date20 = week16.getEnd();
        org.jfree.data.time.Week week21 = new org.jfree.data.time.Week(date20);
        org.jfree.data.time.Week week24 = new org.jfree.data.time.Week(100, 10);
        java.util.Date date25 = week24.getEnd();
        org.jfree.data.time.Week week28 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date29 = week28.getStart();
        java.util.Date date30 = week28.getEnd();
        int int31 = week28.getYearValue();
        long long32 = week28.getLastMillisecond();
        java.lang.Class<?> wildcardClass33 = week28.getClass();
        java.util.Date date34 = null;
        org.jfree.data.time.Week week37 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.util.Date date38 = week37.getStart();
        int int39 = week37.getYearValue();
        java.util.Date date40 = week37.getEnd();
        org.jfree.data.time.Week week43 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod44 = week43.next();
        java.lang.Class<?> wildcardClass45 = week43.getClass();
        java.lang.Class class46 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass45);
        java.lang.Class class47 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass45);
        org.jfree.data.time.Week week50 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod51 = week50.next();
        int int52 = week50.getYearValue();
        java.util.TimeZone timeZone53 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int54 = week50.compareTo((java.lang.Object) timeZone53);
        int int55 = week50.getYearValue();
        int int57 = week50.compareTo((java.lang.Object) 9);
        java.util.Date date58 = week50.getStart();
        org.jfree.data.time.Week week59 = new org.jfree.data.time.Week(date58);
        org.jfree.data.time.Week week62 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod63 = week62.next();
        int int64 = week62.getYearValue();
        java.util.TimeZone timeZone65 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int66 = week62.compareTo((java.lang.Object) timeZone65);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod67 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass45, date58, timeZone65);
        org.jfree.data.time.Week week70 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod71 = week70.previous();
        int int72 = week70.getYearValue();
        java.util.Date date73 = week70.getStart();
        java.util.TimeZone timeZone74 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.Week week75 = new org.jfree.data.time.Week(date73, timeZone74);
        org.jfree.data.time.Week week76 = new org.jfree.data.time.Week(date58, timeZone74);
        org.jfree.data.time.Week week77 = new org.jfree.data.time.Week(date40, timeZone74);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod78 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass33, date34, timeZone74);
        org.jfree.data.time.Week week79 = new org.jfree.data.time.Week(date25, timeZone74);
        org.jfree.data.time.Week week80 = new org.jfree.data.time.Week(date20, timeZone74);
        org.jfree.data.time.Week week81 = new org.jfree.data.time.Week(date13, timeZone74);
        org.jfree.data.time.Week week82 = new org.jfree.data.time.Week(date13);
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 35 + "'", int7 == 35);
        org.junit.Assert.assertNotNull(regularTimePeriod8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-60505750800001L) + "'", long11 == (-60505750800001L));
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Week 35, 52" + "'", str12, "Week 35, 52");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Week 35, 52" + "'", str17, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-60506053200001L) + "'", long18 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod19);
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Sat Nov 28 23:59:59 CET 11");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 97 + "'", int31 == 97);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + (-59100800400001L) + "'", long32 == (-59100800400001L));
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 52 + "'", int39 == 52);
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod44);
        org.junit.Assert.assertNotNull(wildcardClass45);
        org.junit.Assert.assertNotNull(class46);
        org.junit.Assert.assertNotNull(class47);
        org.junit.Assert.assertNotNull(regularTimePeriod51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 52 + "'", int52 == 52);
        org.junit.Assert.assertNotNull(timeZone53);
// flaky:         org.junit.Assert.assertEquals(timeZone53.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 52 + "'", int55 == 52);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertNotNull(date58);
        org.junit.Assert.assertEquals(date58.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 52 + "'", int64 == 52);
        org.junit.Assert.assertNotNull(timeZone65);
// flaky:         org.junit.Assert.assertEquals(timeZone65.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod67);
        org.junit.Assert.assertNotNull(regularTimePeriod71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 52 + "'", int72 == 52);
        org.junit.Assert.assertNotNull(date73);
        org.junit.Assert.assertEquals(date73.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(timeZone74);
// flaky:         org.junit.Assert.assertEquals(timeZone74.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod78);
    }

    @Test
    public void test2371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2371");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod11 = week2.next();
        java.util.Date date12 = week2.getStart();
        java.lang.String str13 = week2.toString();
        long long14 = week2.getSerialIndex();
        long long15 = week2.getFirstMillisecond();
        long long16 = week2.getFirstMillisecond();
        java.lang.String str17 = week2.toString();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertNotNull(regularTimePeriod11);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Week 35, 52" + "'", str13, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 2791L + "'", long14 == 2791L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-60506355600000L) + "'", long15 == (-60506355600000L));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-60506355600000L) + "'", long16 == (-60506355600000L));
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Week 35, 52" + "'", str17, "Week 35, 52");
    }

    @Test
    public void test2372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2372");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getSerialIndex();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.next();
        java.util.Date date6 = regularTimePeriod5.getEnd();
        org.jfree.data.time.Week week9 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date10 = week9.getStart();
        java.util.Date date11 = week9.getEnd();
        org.jfree.data.time.Week week14 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod15 = week14.next();
        java.lang.Class<?> wildcardClass16 = week14.getClass();
        java.lang.Class class17 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass16);
        org.jfree.data.time.Week week20 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date21 = week20.getStart();
        java.lang.Class class22 = null;
        java.util.Date date23 = null;
        java.util.TimeZone timeZone24 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod25 = org.jfree.data.time.RegularTimePeriod.createInstance(class22, date23, timeZone24);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod26 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass16, date21, timeZone24);
        org.jfree.data.time.Week week27 = new org.jfree.data.time.Week(date11, timeZone24);
        org.jfree.data.time.Week week28 = new org.jfree.data.time.Week(date6, timeZone24);
        long long29 = week28.getLastMillisecond();
        int int30 = week28.getYearValue();
        java.util.Date date31 = week28.getEnd();
        org.jfree.data.time.Week week34 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str35 = week34.toString();
        long long36 = week34.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod37 = week34.next();
        java.util.Date date38 = week34.getEnd();
        org.jfree.data.time.Week week39 = new org.jfree.data.time.Week(date38);
        int int40 = week39.getWeek();
        boolean boolean42 = week39.equals((java.lang.Object) 1637449200000L);
        org.jfree.data.time.Week week45 = new org.jfree.data.time.Week(9, (int) 'a');
        org.jfree.data.time.Week week48 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod49 = week48.next();
        long long50 = week48.getMiddleMillisecond();
        java.lang.String str51 = week48.toString();
        boolean boolean52 = week45.equals((java.lang.Object) week48);
        int int53 = week48.getWeek();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod54 = week48.next();
        boolean boolean55 = week39.equals((java.lang.Object) week48);
        long long56 = week48.getLastMillisecond();
        java.lang.String str57 = week48.toString();
        org.jfree.data.time.Week week60 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str61 = week60.toString();
        long long62 = week60.getMiddleMillisecond();
        long long63 = week60.getLastMillisecond();
        org.jfree.data.time.Week week66 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod67 = week66.next();
        java.lang.Class<?> wildcardClass68 = week66.getClass();
        java.lang.Class class69 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass68);
        int int70 = week60.compareTo((java.lang.Object) wildcardClass68);
        java.lang.Class class71 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass68);
        java.lang.Class class72 = org.jfree.data.time.RegularTimePeriod.downsize(class71);
        java.lang.Class class73 = org.jfree.data.time.RegularTimePeriod.downsize(class71);
        java.lang.Class class74 = org.jfree.data.time.RegularTimePeriod.downsize(class73);
        int int75 = week48.compareTo((java.lang.Object) class73);
        int int76 = week28.compareTo((java.lang.Object) int75);
        int int77 = week28.getWeek();
        long long78 = week28.getLastMillisecond();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 2791L + "'", long4 == 2791L);
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Sep 02 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod15);
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertNotNull(class17);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone24);
// flaky:         org.junit.Assert.assertEquals(timeZone24.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod25);
        org.junit.Assert.assertNotNull(regularTimePeriod26);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + (-60505146000001L) + "'", long29 == (-60505146000001L));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 52 + "'", int30 == 52);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Sat Sep 02 23:59:59 CET 52");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Week 35, 52" + "'", str35, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + (-60506053200001L) + "'", long36 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod37);
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 35 + "'", int40 == 35);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(regularTimePeriod49);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + (-60506053200001L) + "'", long50 == (-60506053200001L));
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "Week 35, 52" + "'", str51, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 35 + "'", int53 == 35);
        org.junit.Assert.assertNotNull(regularTimePeriod54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + (-60505750800001L) + "'", long56 == (-60505750800001L));
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "Week 35, 52" + "'", str57, "Week 35, 52");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "Week 35, 52" + "'", str61, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + (-60506053200001L) + "'", long62 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + (-60505750800001L) + "'", long63 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod67);
        org.junit.Assert.assertNotNull(wildcardClass68);
        org.junit.Assert.assertNotNull(class69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
        org.junit.Assert.assertNotNull(class71);
        org.junit.Assert.assertNotNull(class72);
        org.junit.Assert.assertNotNull(class73);
        org.junit.Assert.assertNotNull(class74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 36 + "'", int77 == 36);
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + (-60505146000001L) + "'", long78 == (-60505146000001L));
    }

    @Test
    public void test2373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2373");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) (short) -1, 2021);
    }

    @Test
    public void test2374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2374");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) (short) 100, (int) ' ');
        int int3 = week2.getYearValue();
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Year year4 = week2.getYear();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Year constructor: year (32) outside valid range.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 32 + "'", int3 == 32);
    }

    @Test
    public void test2375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2375");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        int int10 = week2.getYearValue();
        long long11 = week2.getLastMillisecond();
        int int12 = week2.getYearValue();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod13 = week2.previous();
        java.util.Date date14 = week2.getEnd();
        java.util.Date date15 = week2.getEnd();
        java.lang.String str16 = week2.toString();
        org.jfree.data.time.Week week19 = new org.jfree.data.time.Week();
        long long20 = week19.getFirstMillisecond();
        org.jfree.data.time.Year year21 = week19.getYear();
        org.jfree.data.time.Week week22 = new org.jfree.data.time.Week(0, year21);
        org.jfree.data.time.Week week23 = new org.jfree.data.time.Week(53, year21);
        java.util.Date date24 = week23.getStart();
        int int25 = week2.compareTo((java.lang.Object) date24);
        int int26 = week2.getWeek();
        java.util.Calendar calendar27 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long28 = week2.getMiddleMillisecond(calendar27);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 52 + "'", int10 == 52);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-60505750800001L) + "'", long11 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
        org.junit.Assert.assertNotNull(regularTimePeriod13);
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Week 35, 52" + "'", str16, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1637449200000L + "'", long20 == 1637449200000L);
        org.junit.Assert.assertNotNull(year21);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Sun Dec 26 00:00:00 CET 2021");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 35 + "'", int26 == 35);
    }

    @Test
    public void test2376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2376");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.next();
        java.util.Date date6 = week2.getEnd();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week(date6);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod8 = week7.next();
        org.jfree.data.time.Week week11 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str12 = week11.toString();
        long long13 = week11.getSerialIndex();
        boolean boolean14 = week7.equals((java.lang.Object) long13);
        java.lang.String str15 = week7.toString();
        long long16 = week7.getLastMillisecond();
        int int17 = week7.getYearValue();
        long long18 = week7.getSerialIndex();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod8);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Week 35, 52" + "'", str12, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 2791L + "'", long13 == 2791L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Week 35, 52" + "'", str15, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-60505750800001L) + "'", long16 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 52 + "'", int17 == 52);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 2791L + "'", long18 == 2791L);
    }

    @Test
    public void test2377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2377");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.next();
        java.util.Date date6 = week2.getEnd();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week(date6);
        long long8 = week7.getLastMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod9 = week7.next();
        long long10 = week7.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod11 = week7.next();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-60505750800001L) + "'", long8 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-60506053200001L) + "'", long10 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod11);
    }

    @Test
    public void test2378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2378");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date3 = week2.getStart();
        java.util.Date date4 = week2.getEnd();
        int int5 = week2.getYearValue();
        long long6 = week2.getLastMillisecond();
        java.util.Calendar calendar7 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long8 = week2.getLastMillisecond(calendar7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 97 + "'", int5 == 97);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-59100800400001L) + "'", long6 == (-59100800400001L));
    }

    @Test
    public void test2379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2379");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(10, (int) (short) 10);
        long long3 = week2.getMiddleMillisecond();
        long long4 = week2.getSerialIndex();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str8 = week7.toString();
        long long9 = week7.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week7.next();
        java.lang.String str11 = week7.toString();
        java.lang.Class<?> wildcardClass12 = week7.getClass();
        java.lang.Class class13 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass12);
        boolean boolean14 = week2.equals((java.lang.Object) class13);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-61846290000001L) + "'", long3 == (-61846290000001L));
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 540L + "'", long4 == 540L);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Week 35, 52" + "'", str8, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-60506053200001L) + "'", long9 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Week 35, 52" + "'", str11, "Week 35, 52");
        org.junit.Assert.assertNotNull(wildcardClass12);
        org.junit.Assert.assertNotNull(class13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test2380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2380");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date3 = week2.getStart();
        org.jfree.data.time.Week week4 = new org.jfree.data.time.Week(date3);
        long long5 = week4.getLastMillisecond();
        int int6 = week4.getYearValue();
        org.jfree.data.time.Week week9 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str10 = week9.toString();
        long long11 = week9.getMiddleMillisecond();
        long long12 = week9.getLastMillisecond();
        org.jfree.data.time.Week week15 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod16 = week15.next();
        java.lang.Class<?> wildcardClass17 = week15.getClass();
        java.lang.Class class18 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass17);
        int int19 = week9.compareTo((java.lang.Object) wildcardClass17);
        long long20 = week9.getMiddleMillisecond();
        java.util.Date date21 = week9.getEnd();
        int int22 = week9.getWeek();
        long long23 = week9.getLastMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod24 = week9.next();
        long long25 = week9.getFirstMillisecond();
        long long26 = week9.getFirstMillisecond();
        boolean boolean27 = week4.equals((java.lang.Object) long26);
        java.lang.String str28 = week4.toString();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod29 = week4.previous();
        long long30 = week4.getSerialIndex();
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-59100800400001L) + "'", long5 == (-59100800400001L));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 97 + "'", int6 == 97);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Week 35, 52" + "'", str10, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-60506053200001L) + "'", long11 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-60505750800001L) + "'", long12 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(class18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-60506053200001L) + "'", long20 == (-60506053200001L));
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 35 + "'", int22 == 35);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-60505750800001L) + "'", long23 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod24);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-60506355600000L) + "'", long25 == (-60506355600000L));
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + (-60506355600000L) + "'", long26 == (-60506355600000L));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Week 9, 97" + "'", str28, "Week 9, 97");
        org.junit.Assert.assertNotNull(regularTimePeriod29);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 5150L + "'", long30 == 5150L);
    }

    @Test
    public void test2381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2381");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        java.util.Date date10 = week2.getStart();
        org.jfree.data.time.Week week11 = new org.jfree.data.time.Week(date10);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod12 = week11.next();
        int int13 = week11.getYearValue();
        java.util.Date date14 = week11.getStart();
        org.jfree.data.time.Week week15 = new org.jfree.data.time.Week(date14);
        int int16 = week15.getYearValue();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 52 + "'", int13 == 52);
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 52 + "'", int16 == 52);
    }

    @Test
    public void test2382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2382");
        org.jfree.data.time.Week week0 = new org.jfree.data.time.Week();
        long long1 = week0.getFirstMillisecond();
        org.jfree.data.time.Year year2 = week0.getYear();
        long long3 = week0.getLastMillisecond();
        long long4 = week0.getMiddleMillisecond();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod8 = week7.next();
        int int9 = week7.getYearValue();
        java.util.TimeZone timeZone10 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int11 = week7.compareTo((java.lang.Object) timeZone10);
        int int12 = week7.getYearValue();
        long long13 = week7.getMiddleMillisecond();
        java.lang.Class<?> wildcardClass14 = week7.getClass();
        org.jfree.data.time.Week week17 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date18 = week17.getStart();
        org.jfree.data.time.Week week21 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod22 = week21.next();
        int int23 = week21.getYearValue();
        java.util.TimeZone timeZone24 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int25 = week21.compareTo((java.lang.Object) timeZone24);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod26 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass14, date18, timeZone24);
        org.jfree.data.time.Week week29 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod30 = week29.next();
        java.lang.Class<?> wildcardClass31 = week29.getClass();
        java.lang.Class class32 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass31);
        org.jfree.data.time.Week week35 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date36 = week35.getStart();
        java.lang.Class class37 = null;
        java.util.Date date38 = null;
        java.util.TimeZone timeZone39 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod40 = org.jfree.data.time.RegularTimePeriod.createInstance(class37, date38, timeZone39);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod41 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass31, date36, timeZone39);
        org.jfree.data.time.Week week44 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date45 = week44.getStart();
        org.jfree.data.time.Week week46 = new org.jfree.data.time.Week(date45);
        java.util.TimeZone timeZone47 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod48 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass31, date45, timeZone47);
        org.jfree.data.time.Week week49 = new org.jfree.data.time.Week(date18, timeZone47);
        int int50 = week49.getYearValue();
        int int51 = week49.getWeek();
        boolean boolean52 = week0.equals((java.lang.Object) int51);
        java.util.Date date53 = week0.getStart();
        int int54 = week0.getYearValue();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1637449200000L + "'", long1 == 1637449200000L);
        org.junit.Assert.assertNotNull(year2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1638053999999L + "'", long3 == 1638053999999L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1637751599999L + "'", long4 == 1637751599999L);
        org.junit.Assert.assertNotNull(regularTimePeriod8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 52 + "'", int9 == 52);
        org.junit.Assert.assertNotNull(timeZone10);
// flaky:         org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-60506053200001L) + "'", long13 == (-60506053200001L));
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 52 + "'", int23 == 52);
        org.junit.Assert.assertNotNull(timeZone24);
// flaky:         org.junit.Assert.assertEquals(timeZone24.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod26);
        org.junit.Assert.assertNotNull(regularTimePeriod30);
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertNotNull(class32);
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone39);
// flaky:         org.junit.Assert.assertEquals(timeZone39.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod40);
        org.junit.Assert.assertNotNull(regularTimePeriod41);
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone47);
// flaky:         org.junit.Assert.assertEquals(timeZone47.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNotNull(regularTimePeriod48);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 97 + "'", int50 == 97);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 9 + "'", int51 == 9);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Sun Nov 21 00:00:00 CET 2021");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 2021 + "'", int54 == 2021);
    }

    @Test
    public void test2383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2383");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        long long5 = week2.getLastMillisecond();
        java.util.Date date6 = week2.getEnd();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod7 = week2.previous();
        long long8 = week2.getMiddleMillisecond();
        org.jfree.data.time.Week week11 = new org.jfree.data.time.Week(9, (int) 'a');
        org.jfree.data.time.Week week14 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod15 = week14.next();
        long long16 = week14.getMiddleMillisecond();
        java.lang.String str17 = week14.toString();
        boolean boolean18 = week11.equals((java.lang.Object) week14);
        java.util.Date date19 = week11.getStart();
        int int20 = week2.compareTo((java.lang.Object) date19);
        long long21 = week2.getSerialIndex();
        long long22 = week2.getSerialIndex();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-60505750800001L) + "'", long5 == (-60505750800001L));
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-60506053200001L) + "'", long8 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-60506053200001L) + "'", long16 == (-60506053200001L));
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Week 35, 52" + "'", str17, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 2791L + "'", long21 == 2791L);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 2791L + "'", long22 == 2791L);
    }

    @Test
    public void test2384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2384");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date3 = week2.getStart();
        java.util.Date date4 = week2.getEnd();
        int int5 = week2.getYearValue();
        java.util.Date date6 = week2.getStart();
        long long7 = week2.getMiddleMillisecond();
        long long8 = week2.getMiddleMillisecond();
        int int9 = week2.getWeek();
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 97 + "'", int5 == 97);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-59101102800001L) + "'", long7 == (-59101102800001L));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-59101102800001L) + "'", long8 == (-59101102800001L));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
    }

    @Test
    public void test2385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2385");
        org.jfree.data.time.Week week1 = new org.jfree.data.time.Week();
        long long2 = week1.getFirstMillisecond();
        org.jfree.data.time.Year year3 = week1.getYear();
        org.jfree.data.time.Week week4 = new org.jfree.data.time.Week(5, year3);
        int int5 = week4.getWeek();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1637449200000L + "'", long2 == 1637449200000L);
        org.junit.Assert.assertNotNull(year3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 5 + "'", int5 == 5);
    }

    @Test
    public void test2386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2386");
        org.jfree.data.time.Week week3 = new org.jfree.data.time.Week();
        long long4 = week3.getFirstMillisecond();
        org.jfree.data.time.Year year5 = week3.getYear();
        org.jfree.data.time.Week week6 = new org.jfree.data.time.Week(52, year5);
        java.util.Date date7 = year5.getStart();
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week(52, year5);
        org.jfree.data.time.Week week9 = new org.jfree.data.time.Week(97, year5);
        long long10 = week9.getFirstMillisecond();
        org.jfree.data.time.Week week16 = new org.jfree.data.time.Week();
        long long17 = week16.getFirstMillisecond();
        org.jfree.data.time.Year year18 = week16.getYear();
        org.jfree.data.time.Week week19 = new org.jfree.data.time.Week(0, year18);
        org.jfree.data.time.Week week20 = new org.jfree.data.time.Week(11, year18);
        long long21 = week20.getSerialIndex();
        org.jfree.data.time.Year year22 = week20.getYear();
        org.jfree.data.time.Week week23 = new org.jfree.data.time.Week((int) (short) 1, year22);
        org.jfree.data.time.Week week24 = new org.jfree.data.time.Week(4, year22);
        org.jfree.data.time.Week week25 = new org.jfree.data.time.Week(32, year22);
        boolean boolean26 = week9.equals((java.lang.Object) year22);
        java.util.Date date27 = year22.getStart();
        org.jfree.data.time.Week week28 = new org.jfree.data.time.Week(date27);
        java.util.Calendar calendar29 = null;
        // The following exception was thrown during execution in test generation
        try {
            week28.peg(calendar29);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1637449200000L + "'", long4 == 1637449200000L);
        org.junit.Assert.assertNotNull(year5);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Fri Jan 01 00:00:00 CET 2021");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1667080800000L + "'", long10 == 1667080800000L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1637449200000L + "'", long17 == 1637449200000L);
        org.junit.Assert.assertNotNull(year18);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 107124L + "'", long21 == 107124L);
        org.junit.Assert.assertNotNull(year22);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Fri Jan 01 00:00:00 CET 2021");
    }

    @Test
    public void test2387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2387");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '4', (int) ' ');
        java.util.Date date3 = week2.getStart();
        org.jfree.data.time.Week week4 = new org.jfree.data.time.Week(date3);
        java.lang.String str5 = week4.toString();
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Dec 21 00:00:00 CET 32");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Week 52, 32" + "'", str5, "Week 52, 32");
    }

    @Test
    public void test2388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2388");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        long long4 = week2.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.previous();
        int int6 = week2.getYearValue();
        java.util.Date date7 = week2.getEnd();
        org.jfree.data.time.Week week10 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date11 = week10.getStart();
        java.util.Date date12 = week10.getEnd();
        org.jfree.data.time.Week week15 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod16 = week15.next();
        java.lang.Class<?> wildcardClass17 = week15.getClass();
        java.lang.Class class18 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass17);
        org.jfree.data.time.Week week21 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date22 = week21.getStart();
        java.lang.Class class23 = null;
        java.util.Date date24 = null;
        java.util.TimeZone timeZone25 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod26 = org.jfree.data.time.RegularTimePeriod.createInstance(class23, date24, timeZone25);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod27 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass17, date22, timeZone25);
        org.jfree.data.time.Week week28 = new org.jfree.data.time.Week(date12, timeZone25);
        org.jfree.data.time.Week week29 = new org.jfree.data.time.Week(date12);
        org.jfree.data.time.Week week32 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod33 = week32.next();
        java.lang.Class<?> wildcardClass34 = week32.getClass();
        java.lang.Class class35 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass34);
        java.lang.Class class36 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass34);
        org.jfree.data.time.Week week39 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod40 = week39.next();
        int int41 = week39.getYearValue();
        java.util.TimeZone timeZone42 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int43 = week39.compareTo((java.lang.Object) timeZone42);
        int int44 = week39.getYearValue();
        int int46 = week39.compareTo((java.lang.Object) 9);
        java.util.Date date47 = week39.getStart();
        org.jfree.data.time.Week week48 = new org.jfree.data.time.Week(date47);
        org.jfree.data.time.Week week51 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod52 = week51.next();
        int int53 = week51.getYearValue();
        java.util.TimeZone timeZone54 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int55 = week51.compareTo((java.lang.Object) timeZone54);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod56 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass34, date47, timeZone54);
        org.jfree.data.time.Week week59 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod60 = week59.previous();
        int int61 = week59.getYearValue();
        java.util.Date date62 = week59.getStart();
        java.util.TimeZone timeZone63 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.Week week64 = new org.jfree.data.time.Week(date62, timeZone63);
        org.jfree.data.time.Week week65 = new org.jfree.data.time.Week(date47, timeZone63);
        org.jfree.data.time.Week week66 = new org.jfree.data.time.Week(date12, timeZone63);
        java.util.Locale locale67 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Week week68 = new org.jfree.data.time.Week(date7, timeZone63, locale67);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'locale' argument.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 52 + "'", int6 == 52);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(class18);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone25);
// flaky:         org.junit.Assert.assertEquals(timeZone25.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod26);
        org.junit.Assert.assertNotNull(regularTimePeriod27);
        org.junit.Assert.assertNotNull(regularTimePeriod33);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(class35);
        org.junit.Assert.assertNotNull(class36);
        org.junit.Assert.assertNotNull(regularTimePeriod40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 52 + "'", int41 == 52);
        org.junit.Assert.assertNotNull(timeZone42);
// flaky:         org.junit.Assert.assertEquals(timeZone42.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 52 + "'", int44 == 52);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 52 + "'", int53 == 52);
        org.junit.Assert.assertNotNull(timeZone54);
// flaky:         org.junit.Assert.assertEquals(timeZone54.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod56);
        org.junit.Assert.assertNotNull(regularTimePeriod60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 52 + "'", int61 == 52);
        org.junit.Assert.assertNotNull(date62);
        org.junit.Assert.assertEquals(date62.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(timeZone63);
// flaky:         org.junit.Assert.assertEquals(timeZone63.getDisplayName(), "Central European Time");
    }

    @Test
    public void test2389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2389");
        org.jfree.data.time.Week week1 = new org.jfree.data.time.Week();
        long long2 = week1.getFirstMillisecond();
        org.jfree.data.time.Year year3 = week1.getYear();
        org.jfree.data.time.Week week4 = new org.jfree.data.time.Week(52, year3);
        java.util.Date date5 = year3.getStart();
        java.lang.Class<?> wildcardClass6 = year3.getClass();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1637449200000L + "'", long2 == 1637449200000L);
        org.junit.Assert.assertNotNull(year3);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Fri Jan 01 00:00:00 CET 2021");
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test2390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2390");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        long long5 = week2.getLastMillisecond();
        long long6 = week2.getFirstMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod7 = week2.previous();
        java.lang.Class<?> wildcardClass8 = regularTimePeriod7.getClass();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-60505750800001L) + "'", long5 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-60506355600000L) + "'", long6 == (-60506355600000L));
        org.junit.Assert.assertNotNull(regularTimePeriod7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test2391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2391");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) (byte) 10, 2);
        long long3 = week2.getSerialIndex();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 116L + "'", long3 == 116L);
    }

    @Test
    public void test2392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2392");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) (byte) 1, (-1));
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        long long4 = week2.getMiddleMillisecond();
        int int5 = week2.getWeek();
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Year year6 = week2.getYear();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Year constructor: year (-1) outside valid range.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-62198888400001L) + "'", long4 == (-62198888400001L));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
    }

    @Test
    public void test2393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2393");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getWeek();
        org.jfree.data.time.Week week10 = new org.jfree.data.time.Week();
        long long11 = week10.getFirstMillisecond();
        org.jfree.data.time.Year year12 = week10.getYear();
        org.jfree.data.time.Week week13 = new org.jfree.data.time.Week(52, year12);
        java.util.Date date14 = year12.getStart();
        org.jfree.data.time.Week week15 = new org.jfree.data.time.Week((-1969), year12);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod16 = week15.next();
        int int17 = week2.compareTo((java.lang.Object) week15);
        long long18 = week2.getLastMillisecond();
        long long19 = week2.getFirstMillisecond();
        long long20 = week2.getSerialIndex();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 35 + "'", int7 == 35);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1637449200000L + "'", long11 == 1637449200000L);
        org.junit.Assert.assertNotNull(year12);
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Fri Jan 01 00:00:00 CET 2021");
        org.junit.Assert.assertNotNull(regularTimePeriod16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1969) + "'", int17 == (-1969));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-60505750800001L) + "'", long18 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-60506355600000L) + "'", long19 == (-60506355600000L));
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 2791L + "'", long20 == 2791L);
    }

    @Test
    public void test2394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2394");
        org.jfree.data.time.Week week1 = new org.jfree.data.time.Week();
        long long2 = week1.getFirstMillisecond();
        org.jfree.data.time.Year year3 = week1.getYear();
        org.jfree.data.time.Week week4 = new org.jfree.data.time.Week(0, year3);
        org.jfree.data.time.Year year5 = week4.getYear();
        int int6 = week4.getYearValue();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1637449200000L + "'", long2 == 1637449200000L);
        org.junit.Assert.assertNotNull(year3);
        org.junit.Assert.assertNotNull(year5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2021 + "'", int6 == 2021);
    }

    @Test
    public void test2395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2395");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) (byte) 1, (-1));
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.previous();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod4 = week2.previous();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod8 = week7.next();
        long long9 = week7.getFirstMillisecond();
        int int11 = week7.compareTo((java.lang.Object) false);
        java.lang.Class<?> wildcardClass12 = week7.getClass();
        // The following exception was thrown during execution in test generation
        try {
            int int13 = week2.compareTo((java.lang.Object) week7);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Year constructor: year (52) outside valid range.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(regularTimePeriod3);
        org.junit.Assert.assertNull(regularTimePeriod4);
        org.junit.Assert.assertNotNull(regularTimePeriod8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-60506355600000L) + "'", long9 == (-60506355600000L));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test2396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2396");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        java.util.Date date10 = week2.getStart();
        org.jfree.data.time.Week week11 = new org.jfree.data.time.Week(date10);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod12 = week11.next();
        int int13 = week11.getYearValue();
        java.util.Date date14 = week11.getStart();
        org.jfree.data.time.Week week17 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod18 = week17.next();
        int int19 = week17.getYearValue();
        java.util.TimeZone timeZone20 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int21 = week17.compareTo((java.lang.Object) timeZone20);
        int int22 = week17.getWeek();
        org.jfree.data.time.Week week25 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod26 = week25.previous();
        java.util.Date date27 = week25.getEnd();
        org.jfree.data.time.Week week30 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date31 = week30.getStart();
        java.util.Date date32 = week30.getEnd();
        java.util.Date date33 = week30.getStart();
        org.jfree.data.time.Week week36 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date37 = week36.getStart();
        org.jfree.data.time.Week week40 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod41 = week40.next();
        int int42 = week40.getYearValue();
        java.util.TimeZone timeZone43 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int44 = week40.compareTo((java.lang.Object) timeZone43);
        org.jfree.data.time.Week week45 = new org.jfree.data.time.Week(date37, timeZone43);
        org.jfree.data.time.Week week46 = new org.jfree.data.time.Week(date33, timeZone43);
        org.jfree.data.time.Week week47 = new org.jfree.data.time.Week(date27, timeZone43);
        int int48 = week17.compareTo((java.lang.Object) date27);
        int int49 = week11.compareTo((java.lang.Object) date27);
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 52 + "'", int13 == 52);
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 52 + "'", int19 == 52);
        org.junit.Assert.assertNotNull(timeZone20);
// flaky:         org.junit.Assert.assertEquals(timeZone20.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 35 + "'", int22 == 35);
        org.junit.Assert.assertNotNull(regularTimePeriod26);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 52 + "'", int42 == 52);
        org.junit.Assert.assertNotNull(timeZone43);
// flaky:         org.junit.Assert.assertEquals(timeZone43.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
    }

    @Test
    public void test2397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2397");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod11 = week2.next();
        org.jfree.data.time.Week week14 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod15 = week14.next();
        java.lang.Class<?> wildcardClass16 = week14.getClass();
        java.lang.Class class17 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass16);
        java.lang.Class class18 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass16);
        boolean boolean19 = week2.equals((java.lang.Object) wildcardClass16);
        long long20 = week2.getSerialIndex();
        java.util.Date date21 = week2.getEnd();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod22 = week2.next();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertNotNull(regularTimePeriod11);
        org.junit.Assert.assertNotNull(regularTimePeriod15);
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertNotNull(class17);
        org.junit.Assert.assertNotNull(class18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 2791L + "'", long20 == 2791L);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod22);
    }

    @Test
    public void test2398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2398");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        java.util.Date date10 = week2.getStart();
        org.jfree.data.time.Week week11 = new org.jfree.data.time.Week(date10);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod12 = week11.next();
        int int13 = week11.getYearValue();
        java.util.Date date14 = week11.getStart();
        org.jfree.data.time.Week week15 = new org.jfree.data.time.Week(date14);
        java.util.Date date16 = week15.getStart();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 52 + "'", int13 == 52);
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Aug 20 00:00:00 CET 52");
    }

    @Test
    public void test2399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2399");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((-1969), (-1));
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        long long4 = week2.getMiddleMillisecond();
        java.util.Calendar calendar5 = null;
        // The following exception was thrown during execution in test generation
        try {
            week2.peg(calendar5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-62151714000001L) + "'", long4 == (-62151714000001L));
    }

    @Test
    public void test2400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2400");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        int int11 = week2.getYearValue();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod12 = week2.next();
        java.lang.Class<?> wildcardClass13 = regularTimePeriod12.getClass();
        org.jfree.data.time.Week week16 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod17 = week16.next();
        java.lang.Class<?> wildcardClass18 = week16.getClass();
        java.lang.Class class19 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass18);
        java.lang.Class class20 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass18);
        org.jfree.data.time.Week week23 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod24 = week23.next();
        int int25 = week23.getYearValue();
        java.util.TimeZone timeZone26 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int27 = week23.compareTo((java.lang.Object) timeZone26);
        int int28 = week23.getYearValue();
        int int30 = week23.compareTo((java.lang.Object) 9);
        java.util.Date date31 = week23.getStart();
        org.jfree.data.time.Week week32 = new org.jfree.data.time.Week(date31);
        org.jfree.data.time.Week week35 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod36 = week35.next();
        int int37 = week35.getYearValue();
        java.util.TimeZone timeZone38 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int39 = week35.compareTo((java.lang.Object) timeZone38);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod40 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass18, date31, timeZone38);
        org.jfree.data.time.Week week43 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str44 = week43.toString();
        long long45 = week43.getMiddleMillisecond();
        long long46 = week43.getLastMillisecond();
        org.jfree.data.time.Week week49 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod50 = week49.next();
        java.lang.Class<?> wildcardClass51 = week49.getClass();
        java.lang.Class class52 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass51);
        int int53 = week43.compareTo((java.lang.Object) wildcardClass51);
        java.lang.Class class54 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass51);
        org.jfree.data.time.Week week57 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod58 = week57.next();
        java.lang.Class<?> wildcardClass59 = week57.getClass();
        java.lang.Class class60 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass59);
        org.jfree.data.time.Week week63 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date64 = week63.getStart();
        java.lang.Class class65 = null;
        java.util.Date date66 = null;
        java.util.TimeZone timeZone67 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod68 = org.jfree.data.time.RegularTimePeriod.createInstance(class65, date66, timeZone67);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod69 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass59, date64, timeZone67);
        java.util.TimeZone timeZone70 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod71 = org.jfree.data.time.RegularTimePeriod.createInstance(class54, date64, timeZone70);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod72 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass13, date31, timeZone70);
        org.jfree.data.time.Week week73 = new org.jfree.data.time.Week(date31);
        org.jfree.data.time.Week week74 = new org.jfree.data.time.Week(date31);
        java.util.Date date75 = week74.getEnd();
        java.util.Calendar calendar76 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long77 = week74.getLastMillisecond(calendar76);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertNotNull(regularTimePeriod12);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(regularTimePeriod17);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(class19);
        org.junit.Assert.assertNotNull(class20);
        org.junit.Assert.assertNotNull(regularTimePeriod24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 52 + "'", int25 == 52);
        org.junit.Assert.assertNotNull(timeZone26);
// flaky:         org.junit.Assert.assertEquals(timeZone26.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 52 + "'", int28 == 52);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 52 + "'", int37 == 52);
        org.junit.Assert.assertNotNull(timeZone38);
// flaky:         org.junit.Assert.assertEquals(timeZone38.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod40);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Week 35, 52" + "'", str44, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + (-60506053200001L) + "'", long45 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + (-60505750800001L) + "'", long46 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod50);
        org.junit.Assert.assertNotNull(wildcardClass51);
        org.junit.Assert.assertNotNull(class52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(class54);
        org.junit.Assert.assertNotNull(regularTimePeriod58);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(class60);
        org.junit.Assert.assertNotNull(date64);
        org.junit.Assert.assertEquals(date64.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone67);
// flaky:         org.junit.Assert.assertEquals(timeZone67.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod68);
        org.junit.Assert.assertNotNull(regularTimePeriod69);
        org.junit.Assert.assertNotNull(timeZone70);
// flaky:         org.junit.Assert.assertEquals(timeZone70.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod71);
        org.junit.Assert.assertNotNull(regularTimePeriod72);
        org.junit.Assert.assertNotNull(date75);
        org.junit.Assert.assertEquals(date75.toString(), "Sat Aug 26 23:59:59 CET 52");
    }

    @Test
    public void test2401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2401");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.util.Date date3 = week2.getStart();
        int int4 = week2.getYearValue();
        java.util.Date date5 = week2.getEnd();
        long long6 = week2.getMiddleMillisecond();
        long long7 = week2.getSerialIndex();
        long long8 = week2.getFirstMillisecond();
        long long9 = week2.getFirstMillisecond();
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-60506053200001L) + "'", long6 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 2791L + "'", long7 == 2791L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-60506355600000L) + "'", long8 == (-60506355600000L));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-60506355600000L) + "'", long9 == (-60506355600000L));
    }

    @Test
    public void test2402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2402");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        long long5 = week2.getLastMillisecond();
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod9 = week8.next();
        java.lang.Class<?> wildcardClass10 = week8.getClass();
        java.lang.Class class11 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass10);
        int int12 = week2.compareTo((java.lang.Object) wildcardClass10);
        long long13 = week2.getMiddleMillisecond();
        java.util.Date date14 = week2.getEnd();
        int int15 = week2.getWeek();
        long long16 = week2.getLastMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod17 = week2.next();
        long long18 = week2.getFirstMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod19 = week2.previous();
        java.util.Date date20 = week2.getEnd();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod21 = week2.next();
        boolean boolean23 = week2.equals((java.lang.Object) (short) 0);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-60505750800001L) + "'", long5 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod9);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNotNull(class11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-60506053200001L) + "'", long13 == (-60506053200001L));
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 35 + "'", int15 == 35);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-60505750800001L) + "'", long16 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-60506355600000L) + "'", long18 == (-60506355600000L));
        org.junit.Assert.assertNotNull(regularTimePeriod19);
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test2403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2403");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(48, 3);
        org.jfree.data.time.Week week5 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod6 = week5.next();
        int int7 = week5.getYearValue();
        java.util.TimeZone timeZone8 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int9 = week5.compareTo((java.lang.Object) timeZone8);
        int int10 = week5.getYearValue();
        int int12 = week5.compareTo((java.lang.Object) 9);
        java.util.Date date13 = week5.getStart();
        org.jfree.data.time.Week week14 = new org.jfree.data.time.Week(date13);
        org.jfree.data.time.Week week15 = new org.jfree.data.time.Week(date13);
        boolean boolean16 = week2.equals((java.lang.Object) date13);
        org.junit.Assert.assertNotNull(regularTimePeriod6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertNotNull(timeZone8);
// flaky:         org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 52 + "'", int10 == 52);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test2404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2404");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.next();
        java.util.Date date6 = week2.getEnd();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week(date6);
        java.util.Date date8 = week7.getStart();
        long long9 = week7.getMiddleMillisecond();
        java.util.Date date10 = week7.getStart();
        int int11 = week7.getYearValue();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod12 = week7.previous();
        java.lang.Class<?> wildcardClass13 = week7.getClass();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-60506053200001L) + "'", long9 == (-60506053200001L));
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertNotNull(regularTimePeriod12);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test2405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2405");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.next();
        java.util.Date date6 = week2.getEnd();
        int int7 = week2.getYearValue();
        int int8 = week2.getWeek();
        int int9 = week2.getWeek();
        int int10 = week2.getWeek();
        java.util.Date date11 = week2.getStart();
        long long12 = week2.getFirstMillisecond();
        int int13 = week2.getWeek();
        org.jfree.data.time.Week week18 = new org.jfree.data.time.Week();
        long long19 = week18.getFirstMillisecond();
        org.jfree.data.time.Year year20 = week18.getYear();
        org.jfree.data.time.Week week21 = new org.jfree.data.time.Week(0, year20);
        org.jfree.data.time.Week week22 = new org.jfree.data.time.Week(11, year20);
        org.jfree.data.time.Week week23 = new org.jfree.data.time.Week(3, year20);
        org.jfree.data.time.Week week24 = new org.jfree.data.time.Week((int) (short) 100, year20);
        java.util.Date date25 = week24.getEnd();
        java.util.Date date26 = week24.getStart();
        java.lang.Class<?> wildcardClass27 = week24.getClass();
        boolean boolean28 = week2.equals((java.lang.Object) week24);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 35 + "'", int8 == 35);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 35 + "'", int10 == 35);
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-60506355600000L) + "'", long12 == (-60506355600000L));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 1637449200000L + "'", long19 == 1637449200000L);
        org.junit.Assert.assertNotNull(year20);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Sat Nov 26 23:59:59 CET 2022");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Sun Nov 20 00:00:00 CET 2022");
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test2406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2406");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(35, 0);
        java.util.Date date3 = week2.getEnd();
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sat Aug 28 23:59:59 CET 1");
    }

    @Test
    public void test2407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2407");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '4', (int) ' ');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.previous();
        java.lang.String str4 = week2.toString();
        java.lang.String str5 = week2.toString();
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod9 = week8.next();
        int int10 = week8.getYearValue();
        java.util.TimeZone timeZone11 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int12 = week8.compareTo((java.lang.Object) timeZone11);
        int int13 = week8.getYearValue();
        int int15 = week8.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod16 = week8.previous();
        int int17 = week8.getYearValue();
        long long18 = week8.getLastMillisecond();
        org.jfree.data.time.Week week21 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod22 = week21.next();
        java.lang.Class<?> wildcardClass23 = week21.getClass();
        java.lang.Class class24 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass23);
        boolean boolean25 = week8.equals((java.lang.Object) wildcardClass23);
        int int26 = week8.getYearValue();
        boolean boolean27 = week2.equals((java.lang.Object) week8);
        long long28 = week2.getSerialIndex();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Week 52, 32" + "'", str4, "Week 52, 32");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Week 52, 32" + "'", str5, "Week 52, 32");
        org.junit.Assert.assertNotNull(regularTimePeriod9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 52 + "'", int10 == 52);
        org.junit.Assert.assertNotNull(timeZone11);
// flaky:         org.junit.Assert.assertEquals(timeZone11.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 52 + "'", int13 == 52);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 52 + "'", int17 == 52);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-60505750800001L) + "'", long18 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod22);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertNotNull(class24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 52 + "'", int26 == 52);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 1748L + "'", long28 == 1748L);
    }

    @Test
    public void test2408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2408");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.next();
        java.util.Date date6 = week2.getEnd();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week(date6);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod8 = week7.next();
        java.util.Date date9 = week7.getEnd();
        java.lang.String str10 = week7.toString();
        org.jfree.data.time.Week week13 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod14 = week13.next();
        int int15 = week13.getYearValue();
        java.util.TimeZone timeZone16 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int17 = week13.compareTo((java.lang.Object) timeZone16);
        int int18 = week13.getYearValue();
        int int20 = week13.compareTo((java.lang.Object) 9);
        int int21 = week13.getYearValue();
        long long22 = week13.getLastMillisecond();
        long long23 = week13.getSerialIndex();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod24 = week13.next();
        long long25 = week13.getFirstMillisecond();
        java.lang.String str26 = week13.toString();
        // The following exception was thrown during execution in test generation
        try {
            int int27 = week7.compareTo((java.lang.Object) week13);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Year constructor: year (52) outside valid range.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Week 35, 52" + "'", str10, "Week 35, 52");
        org.junit.Assert.assertNotNull(regularTimePeriod14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 52 + "'", int15 == 52);
        org.junit.Assert.assertNotNull(timeZone16);
// flaky:         org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 52 + "'", int18 == 52);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 52 + "'", int21 == 52);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-60505750800001L) + "'", long22 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 2791L + "'", long23 == 2791L);
        org.junit.Assert.assertNotNull(regularTimePeriod24);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-60506355600000L) + "'", long25 == (-60506355600000L));
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Week 35, 52" + "'", str26, "Week 35, 52");
    }

    @Test
    public void test2409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2409");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getSerialIndex();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.next();
        java.util.Date date6 = regularTimePeriod5.getEnd();
        org.jfree.data.time.Week week9 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date10 = week9.getStart();
        org.jfree.data.time.Week week13 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod14 = week13.next();
        int int15 = week13.getYearValue();
        java.util.TimeZone timeZone16 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int17 = week13.compareTo((java.lang.Object) timeZone16);
        org.jfree.data.time.Week week18 = new org.jfree.data.time.Week(date10, timeZone16);
        org.jfree.data.time.Week week19 = new org.jfree.data.time.Week(date6, timeZone16);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod20 = week19.next();
        java.lang.String str21 = week19.toString();
        java.util.Calendar calendar22 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long23 = week19.getFirstMillisecond(calendar22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 2791L + "'", long4 == 2791L);
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Sep 02 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 52 + "'", int15 == 52);
        org.junit.Assert.assertNotNull(timeZone16);
// flaky:         org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Week 36, 52" + "'", str21, "Week 36, 52");
    }

    @Test
    public void test2410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2410");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        int int11 = week2.getYearValue();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod12 = week2.next();
        java.lang.Class<?> wildcardClass13 = regularTimePeriod12.getClass();
        org.jfree.data.time.Week week16 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod17 = week16.next();
        java.lang.Class<?> wildcardClass18 = week16.getClass();
        java.lang.Class class19 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass18);
        java.lang.Class class20 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass18);
        org.jfree.data.time.Week week23 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod24 = week23.next();
        int int25 = week23.getYearValue();
        java.util.TimeZone timeZone26 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int27 = week23.compareTo((java.lang.Object) timeZone26);
        int int28 = week23.getYearValue();
        int int30 = week23.compareTo((java.lang.Object) 9);
        java.util.Date date31 = week23.getStart();
        org.jfree.data.time.Week week32 = new org.jfree.data.time.Week(date31);
        org.jfree.data.time.Week week35 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod36 = week35.next();
        int int37 = week35.getYearValue();
        java.util.TimeZone timeZone38 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int39 = week35.compareTo((java.lang.Object) timeZone38);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod40 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass18, date31, timeZone38);
        org.jfree.data.time.Week week43 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str44 = week43.toString();
        long long45 = week43.getMiddleMillisecond();
        long long46 = week43.getLastMillisecond();
        org.jfree.data.time.Week week49 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod50 = week49.next();
        java.lang.Class<?> wildcardClass51 = week49.getClass();
        java.lang.Class class52 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass51);
        int int53 = week43.compareTo((java.lang.Object) wildcardClass51);
        java.lang.Class class54 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass51);
        org.jfree.data.time.Week week57 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod58 = week57.next();
        java.lang.Class<?> wildcardClass59 = week57.getClass();
        java.lang.Class class60 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass59);
        org.jfree.data.time.Week week63 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date64 = week63.getStart();
        java.lang.Class class65 = null;
        java.util.Date date66 = null;
        java.util.TimeZone timeZone67 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod68 = org.jfree.data.time.RegularTimePeriod.createInstance(class65, date66, timeZone67);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod69 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass59, date64, timeZone67);
        java.util.TimeZone timeZone70 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod71 = org.jfree.data.time.RegularTimePeriod.createInstance(class54, date64, timeZone70);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod72 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass13, date31, timeZone70);
        java.lang.Class class73 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass13);
        java.lang.Class class74 = org.jfree.data.time.RegularTimePeriod.downsize(class73);
        java.lang.Class class75 = org.jfree.data.time.RegularTimePeriod.downsize(class74);
        java.lang.Class class76 = org.jfree.data.time.RegularTimePeriod.downsize(class75);
        java.lang.Class class77 = org.jfree.data.time.RegularTimePeriod.downsize(class76);
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertNotNull(regularTimePeriod12);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(regularTimePeriod17);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(class19);
        org.junit.Assert.assertNotNull(class20);
        org.junit.Assert.assertNotNull(regularTimePeriod24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 52 + "'", int25 == 52);
        org.junit.Assert.assertNotNull(timeZone26);
// flaky:         org.junit.Assert.assertEquals(timeZone26.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 52 + "'", int28 == 52);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 52 + "'", int37 == 52);
        org.junit.Assert.assertNotNull(timeZone38);
// flaky:         org.junit.Assert.assertEquals(timeZone38.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod40);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Week 35, 52" + "'", str44, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + (-60506053200001L) + "'", long45 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + (-60505750800001L) + "'", long46 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod50);
        org.junit.Assert.assertNotNull(wildcardClass51);
        org.junit.Assert.assertNotNull(class52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(class54);
        org.junit.Assert.assertNotNull(regularTimePeriod58);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(class60);
        org.junit.Assert.assertNotNull(date64);
        org.junit.Assert.assertEquals(date64.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone67);
// flaky:         org.junit.Assert.assertEquals(timeZone67.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod68);
        org.junit.Assert.assertNotNull(regularTimePeriod69);
        org.junit.Assert.assertNotNull(timeZone70);
// flaky:         org.junit.Assert.assertEquals(timeZone70.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod71);
        org.junit.Assert.assertNotNull(regularTimePeriod72);
        org.junit.Assert.assertNotNull(class73);
        org.junit.Assert.assertNotNull(class74);
        org.junit.Assert.assertNotNull(class75);
        org.junit.Assert.assertNotNull(class76);
        org.junit.Assert.assertNotNull(class77);
    }

    @Test
    public void test2411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2411");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.next();
        java.util.Date date6 = week2.getEnd();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week(date6);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod8 = week7.next();
        java.util.Date date9 = week7.getEnd();
        java.lang.String str10 = week7.toString();
        java.lang.String str11 = week7.toString();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Week 35, 52" + "'", str10, "Week 35, 52");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Week 35, 52" + "'", str11, "Week 35, 52");
    }

    @Test
    public void test2412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2412");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.previous();
        java.util.Date date4 = week2.getEnd();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod8 = week7.next();
        int int9 = week7.getYearValue();
        java.util.TimeZone timeZone10 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int11 = week7.compareTo((java.lang.Object) timeZone10);
        int int12 = week7.getYearValue();
        int int14 = week7.compareTo((java.lang.Object) 9);
        int int15 = week7.getYearValue();
        long long16 = week7.getLastMillisecond();
        int int17 = week7.getWeek();
        java.util.Date date18 = week7.getEnd();
        org.jfree.data.time.Week week21 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date22 = week21.getStart();
        java.util.Date date23 = week21.getEnd();
        org.jfree.data.time.Week week26 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod27 = week26.next();
        java.lang.Class<?> wildcardClass28 = week26.getClass();
        java.lang.Class class29 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass28);
        org.jfree.data.time.Week week32 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date33 = week32.getStart();
        java.lang.Class class34 = null;
        java.util.Date date35 = null;
        java.util.TimeZone timeZone36 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod37 = org.jfree.data.time.RegularTimePeriod.createInstance(class34, date35, timeZone36);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod38 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass28, date33, timeZone36);
        org.jfree.data.time.Week week39 = new org.jfree.data.time.Week(date23, timeZone36);
        org.jfree.data.time.Week week40 = new org.jfree.data.time.Week(date18, timeZone36);
        org.jfree.data.time.Week week41 = new org.jfree.data.time.Week(date4, timeZone36);
        long long42 = week41.getLastMillisecond();
        int int44 = week41.compareTo((java.lang.Object) 1L);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod45 = week41.previous();
        java.util.Date date46 = regularTimePeriod45.getEnd();
        java.util.Date date47 = regularTimePeriod45.getEnd();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 52 + "'", int9 == 52);
        org.junit.Assert.assertNotNull(timeZone10);
// flaky:         org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 52 + "'", int15 == 52);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-60505750800001L) + "'", long16 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 35 + "'", int17 == 35);
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod27);
        org.junit.Assert.assertNotNull(wildcardClass28);
        org.junit.Assert.assertNotNull(class29);
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone36);
// flaky:         org.junit.Assert.assertEquals(timeZone36.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod37);
        org.junit.Assert.assertNotNull(regularTimePeriod38);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + (-60505750800001L) + "'", long42 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod45);
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Sat Aug 19 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Sat Aug 19 23:59:59 CET 52");
    }

    @Test
    public void test2413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2413");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(12, (int) (short) 1);
        java.util.Calendar calendar3 = null;
        // The following exception was thrown during execution in test generation
        try {
            week2.peg(calendar3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test2414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2414");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, (int) 'a');
        org.jfree.data.time.Week week5 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod6 = week5.next();
        long long7 = week5.getMiddleMillisecond();
        java.lang.String str8 = week5.toString();
        boolean boolean9 = week2.equals((java.lang.Object) week5);
        java.util.Date date10 = week2.getStart();
        java.util.Date date11 = week2.getStart();
        long long12 = week2.getSerialIndex();
        java.util.Date date13 = week2.getStart();
        long long14 = week2.getFirstMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod15 = week2.next();
        org.junit.Assert.assertNotNull(regularTimePeriod6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-60506053200001L) + "'", long7 == (-60506053200001L));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Week 35, 52" + "'", str8, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 5150L + "'", long12 == 5150L);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-59101405200000L) + "'", long14 == (-59101405200000L));
        org.junit.Assert.assertNotNull(regularTimePeriod15);
    }

    @Test
    public void test2415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2415");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(35, 10);
        java.util.Date date3 = week2.getEnd();
        org.jfree.data.time.Week week4 = new org.jfree.data.time.Week(date3);
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week(100, 10);
        java.util.Date date8 = week7.getEnd();
        org.jfree.data.time.Week week11 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date12 = week11.getStart();
        java.util.Date date13 = week11.getEnd();
        int int14 = week11.getYearValue();
        long long15 = week11.getLastMillisecond();
        java.lang.Class<?> wildcardClass16 = week11.getClass();
        java.util.Date date17 = null;
        org.jfree.data.time.Week week20 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.util.Date date21 = week20.getStart();
        int int22 = week20.getYearValue();
        java.util.Date date23 = week20.getEnd();
        org.jfree.data.time.Week week26 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod27 = week26.next();
        java.lang.Class<?> wildcardClass28 = week26.getClass();
        java.lang.Class class29 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass28);
        java.lang.Class class30 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass28);
        org.jfree.data.time.Week week33 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod34 = week33.next();
        int int35 = week33.getYearValue();
        java.util.TimeZone timeZone36 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int37 = week33.compareTo((java.lang.Object) timeZone36);
        int int38 = week33.getYearValue();
        int int40 = week33.compareTo((java.lang.Object) 9);
        java.util.Date date41 = week33.getStart();
        org.jfree.data.time.Week week42 = new org.jfree.data.time.Week(date41);
        org.jfree.data.time.Week week45 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod46 = week45.next();
        int int47 = week45.getYearValue();
        java.util.TimeZone timeZone48 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int49 = week45.compareTo((java.lang.Object) timeZone48);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod50 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass28, date41, timeZone48);
        org.jfree.data.time.Week week53 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod54 = week53.previous();
        int int55 = week53.getYearValue();
        java.util.Date date56 = week53.getStart();
        java.util.TimeZone timeZone57 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.Week week58 = new org.jfree.data.time.Week(date56, timeZone57);
        org.jfree.data.time.Week week59 = new org.jfree.data.time.Week(date41, timeZone57);
        org.jfree.data.time.Week week60 = new org.jfree.data.time.Week(date23, timeZone57);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod61 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass16, date17, timeZone57);
        org.jfree.data.time.Week week62 = new org.jfree.data.time.Week(date8, timeZone57);
        java.util.Locale locale63 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Week week64 = new org.jfree.data.time.Week(date3, timeZone57, locale63);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'locale' argument.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sat Aug 30 23:59:59 CET 10");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Sat Nov 28 23:59:59 CET 11");
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 97 + "'", int14 == 97);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-59100800400001L) + "'", long15 == (-59100800400001L));
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 52 + "'", int22 == 52);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod27);
        org.junit.Assert.assertNotNull(wildcardClass28);
        org.junit.Assert.assertNotNull(class29);
        org.junit.Assert.assertNotNull(class30);
        org.junit.Assert.assertNotNull(regularTimePeriod34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 52 + "'", int35 == 52);
        org.junit.Assert.assertNotNull(timeZone36);
// flaky:         org.junit.Assert.assertEquals(timeZone36.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 52 + "'", int38 == 52);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 52 + "'", int47 == 52);
        org.junit.Assert.assertNotNull(timeZone48);
// flaky:         org.junit.Assert.assertEquals(timeZone48.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod50);
        org.junit.Assert.assertNotNull(regularTimePeriod54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 52 + "'", int55 == 52);
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(timeZone57);
// flaky:         org.junit.Assert.assertEquals(timeZone57.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod61);
    }

    @Test
    public void test2416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2416");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        long long7 = week2.getFirstMillisecond();
        long long8 = week2.getSerialIndex();
        long long9 = week2.getFirstMillisecond();
        long long10 = week2.getFirstMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod11 = week2.next();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-60506355600000L) + "'", long7 == (-60506355600000L));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 2791L + "'", long8 == 2791L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-60506355600000L) + "'", long9 == (-60506355600000L));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-60506355600000L) + "'", long10 == (-60506355600000L));
        org.junit.Assert.assertNotNull(regularTimePeriod11);
    }

    @Test
    public void test2417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2417");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(3, (int) (byte) 10);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        java.util.Date date4 = week2.getStart();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod8 = week7.previous();
        int int9 = week7.getYearValue();
        java.util.Date date10 = week7.getStart();
        java.util.TimeZone timeZone11 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.Week week12 = new org.jfree.data.time.Week(date10, timeZone11);
        java.lang.Class<?> wildcardClass13 = week12.getClass();
        java.lang.Class class14 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass13);
        org.jfree.data.time.Week week17 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str18 = week17.toString();
        long long19 = week17.getMiddleMillisecond();
        long long20 = week17.getLastMillisecond();
        org.jfree.data.time.Week week23 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod24 = week23.next();
        java.lang.Class<?> wildcardClass25 = week23.getClass();
        java.lang.Class class26 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass25);
        int int27 = week17.compareTo((java.lang.Object) wildcardClass25);
        long long28 = week17.getSerialIndex();
        int int30 = week17.compareTo((java.lang.Object) 0.0d);
        java.util.Date date31 = week17.getEnd();
        org.jfree.data.time.Week week34 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date35 = week34.getStart();
        org.jfree.data.time.Week week36 = new org.jfree.data.time.Week(date35);
        java.util.Date date37 = week36.getStart();
        org.jfree.data.time.Week week40 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod41 = week40.next();
        int int42 = week40.getYearValue();
        java.util.TimeZone timeZone43 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int44 = week40.compareTo((java.lang.Object) timeZone43);
        int int45 = week40.getYearValue();
        long long46 = week40.getMiddleMillisecond();
        java.lang.Class<?> wildcardClass47 = week40.getClass();
        org.jfree.data.time.Week week50 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date51 = week50.getStart();
        org.jfree.data.time.Week week54 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod55 = week54.next();
        int int56 = week54.getYearValue();
        java.util.TimeZone timeZone57 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int58 = week54.compareTo((java.lang.Object) timeZone57);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod59 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass47, date51, timeZone57);
        org.jfree.data.time.Week week60 = new org.jfree.data.time.Week(date37, timeZone57);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod61 = org.jfree.data.time.RegularTimePeriod.createInstance(class14, date31, timeZone57);
        org.jfree.data.time.Week week62 = new org.jfree.data.time.Week(date31);
        int int63 = week2.compareTo((java.lang.Object) date31);
        java.util.Calendar calendar64 = null;
        // The following exception was thrown during execution in test generation
        try {
            week2.peg(calendar64);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Sun Jan 12 00:00:00 CET 10");
        org.junit.Assert.assertNotNull(regularTimePeriod8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 52 + "'", int9 == 52);
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(timeZone11);
// flaky:         org.junit.Assert.assertEquals(timeZone11.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(class14);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Week 35, 52" + "'", str18, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-60506053200001L) + "'", long19 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-60505750800001L) + "'", long20 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod24);
        org.junit.Assert.assertNotNull(wildcardClass25);
        org.junit.Assert.assertNotNull(class26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 2791L + "'", long28 == 2791L);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 52 + "'", int42 == 52);
        org.junit.Assert.assertNotNull(timeZone43);
// flaky:         org.junit.Assert.assertEquals(timeZone43.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 52 + "'", int45 == 52);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + (-60506053200001L) + "'", long46 == (-60506053200001L));
        org.junit.Assert.assertNotNull(wildcardClass47);
        org.junit.Assert.assertNotNull(date51);
        org.junit.Assert.assertEquals(date51.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 52 + "'", int56 == 52);
        org.junit.Assert.assertNotNull(timeZone57);
// flaky:         org.junit.Assert.assertEquals(timeZone57.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod59);
        org.junit.Assert.assertNull(regularTimePeriod61);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
    }

    @Test
    public void test2418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2418");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week();
        long long3 = week2.getFirstMillisecond();
        org.jfree.data.time.Year year4 = week2.getYear();
        org.jfree.data.time.Week week5 = new org.jfree.data.time.Week(0, year4);
        org.jfree.data.time.Year year6 = week5.getYear();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week(97, year6);
        java.util.Date date8 = year6.getStart();
        org.jfree.data.time.Week week9 = new org.jfree.data.time.Week(date8);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1637449200000L + "'", long3 == 1637449200000L);
        org.junit.Assert.assertNotNull(year4);
        org.junit.Assert.assertNotNull(year6);
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Fri Jan 01 00:00:00 CET 2021");
    }

    @Test
    public void test2419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2419");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week();
        long long3 = week2.getFirstMillisecond();
        org.jfree.data.time.Year year4 = week2.getYear();
        org.jfree.data.time.Week week5 = new org.jfree.data.time.Week(0, year4);
        org.jfree.data.time.Week week6 = new org.jfree.data.time.Week(11, year4);
        long long7 = week6.getFirstMillisecond();
        int int8 = week6.getYearValue();
        long long9 = week6.getSerialIndex();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1637449200000L + "'", long3 == 1637449200000L);
        org.junit.Assert.assertNotNull(year4);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1615071600000L + "'", long7 == 1615071600000L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2021 + "'", int8 == 2021);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 107124L + "'", long9 == 107124L);
    }

    @Test
    public void test2420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2420");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(0, 7);
    }

    @Test
    public void test2421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2421");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.next();
        java.util.Date date6 = week2.getEnd();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week(date6);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod8 = week7.next();
        org.jfree.data.time.Week week11 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str12 = week11.toString();
        long long13 = week11.getSerialIndex();
        boolean boolean14 = week7.equals((java.lang.Object) long13);
        java.lang.String str15 = week7.toString();
        long long16 = week7.getLastMillisecond();
        int int17 = week7.getYearValue();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod18 = week7.next();
        org.jfree.data.time.Week week21 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod22 = week21.next();
        int int23 = week21.getYearValue();
        java.util.TimeZone timeZone24 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int25 = week21.compareTo((java.lang.Object) timeZone24);
        int int26 = week21.getYearValue();
        int int28 = week21.compareTo((java.lang.Object) 9);
        int int29 = week21.getYearValue();
        java.lang.String str30 = week21.toString();
        java.lang.String str31 = week21.toString();
        java.util.Date date32 = week21.getStart();
        // The following exception was thrown during execution in test generation
        try {
            int int33 = week7.compareTo((java.lang.Object) week21);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Year constructor: year (52) outside valid range.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60506053200001L) + "'", long4 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod8);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Week 35, 52" + "'", str12, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 2791L + "'", long13 == 2791L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Week 35, 52" + "'", str15, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-60505750800001L) + "'", long16 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 52 + "'", int17 == 52);
        org.junit.Assert.assertNotNull(regularTimePeriod18);
        org.junit.Assert.assertNotNull(regularTimePeriod22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 52 + "'", int23 == 52);
        org.junit.Assert.assertNotNull(timeZone24);
// flaky:         org.junit.Assert.assertEquals(timeZone24.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 52 + "'", int26 == 52);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 52 + "'", int29 == 52);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Week 35, 52" + "'", str30, "Week 35, 52");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Week 35, 52" + "'", str31, "Week 35, 52");
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Sun Aug 20 00:00:00 CET 52");
    }

    @Test
    public void test2422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2422");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) 'a', (-2019));
    }

    @Test
    public void test2423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2423");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        int int11 = week2.getYearValue();
        long long12 = week2.getLastMillisecond();
        int int13 = week2.getWeek();
        int int14 = week2.getYearValue();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod15 = week2.next();
        int int16 = week2.getYearValue();
        long long17 = week2.getSerialIndex();
        org.jfree.data.time.Week week20 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod21 = week20.next();
        int int22 = week20.getYearValue();
        java.util.TimeZone timeZone23 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int24 = week20.compareTo((java.lang.Object) timeZone23);
        int int25 = week20.getWeek();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod26 = week20.next();
        boolean boolean28 = week20.equals((java.lang.Object) 3);
        long long29 = week20.getLastMillisecond();
        boolean boolean30 = week2.equals((java.lang.Object) week20);
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-60505750800001L) + "'", long12 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 52 + "'", int14 == 52);
        org.junit.Assert.assertNotNull(regularTimePeriod15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 52 + "'", int16 == 52);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 2791L + "'", long17 == 2791L);
        org.junit.Assert.assertNotNull(regularTimePeriod21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 52 + "'", int22 == 52);
        org.junit.Assert.assertNotNull(timeZone23);
// flaky:         org.junit.Assert.assertEquals(timeZone23.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 35 + "'", int25 == 35);
        org.junit.Assert.assertNotNull(regularTimePeriod26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + (-60505750800001L) + "'", long29 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
    }

    @Test
    public void test2424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2424");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week();
        long long3 = week2.getFirstMillisecond();
        org.jfree.data.time.Year year4 = week2.getYear();
        org.jfree.data.time.Week week5 = new org.jfree.data.time.Week(0, year4);
        long long6 = year4.getMiddleMillisecond();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week(12, year4);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1637449200000L + "'", long3 == 1637449200000L);
        org.junit.Assert.assertNotNull(year4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1625223599999L + "'", long6 == 1625223599999L);
    }

    @Test
    public void test2425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2425");
        org.jfree.data.time.Week week5 = new org.jfree.data.time.Week();
        long long6 = week5.getFirstMillisecond();
        org.jfree.data.time.Year year7 = week5.getYear();
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week((int) (byte) 100, year7);
        org.jfree.data.time.Week week9 = new org.jfree.data.time.Week(100, year7);
        org.jfree.data.time.Week week10 = new org.jfree.data.time.Week((int) (short) 0, year7);
        org.jfree.data.time.Week week11 = new org.jfree.data.time.Week(6, year7);
        org.jfree.data.time.Week week12 = new org.jfree.data.time.Week(52, year7);
        java.util.Date date13 = week12.getEnd();
        java.util.Calendar calendar14 = null;
        // The following exception was thrown during execution in test generation
        try {
            week12.peg(calendar14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1637449200000L + "'", long6 == 1637449200000L);
        org.junit.Assert.assertNotNull(year7);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sat Dec 25 23:59:59 CET 2021");
    }

    @Test
    public void test2426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2426");
        org.jfree.data.time.Week week1 = new org.jfree.data.time.Week();
        long long2 = week1.getFirstMillisecond();
        org.jfree.data.time.Year year3 = week1.getYear();
        org.jfree.data.time.Week week4 = new org.jfree.data.time.Week(0, year3);
        java.util.Date date5 = week4.getStart();
        int int6 = week4.getWeek();
        java.lang.Class<?> wildcardClass7 = week4.getClass();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1637449200000L + "'", long2 == 1637449200000L);
        org.junit.Assert.assertNotNull(year3);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Sun Dec 20 00:00:00 CET 2020");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test2427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2427");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getSerialIndex();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.next();
        java.util.Date date6 = regularTimePeriod5.getEnd();
        org.jfree.data.time.Week week9 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date10 = week9.getStart();
        java.util.Date date11 = week9.getEnd();
        org.jfree.data.time.Week week14 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod15 = week14.next();
        java.lang.Class<?> wildcardClass16 = week14.getClass();
        java.lang.Class class17 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass16);
        org.jfree.data.time.Week week20 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date21 = week20.getStart();
        java.lang.Class class22 = null;
        java.util.Date date23 = null;
        java.util.TimeZone timeZone24 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod25 = org.jfree.data.time.RegularTimePeriod.createInstance(class22, date23, timeZone24);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod26 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass16, date21, timeZone24);
        org.jfree.data.time.Week week27 = new org.jfree.data.time.Week(date11, timeZone24);
        org.jfree.data.time.Week week28 = new org.jfree.data.time.Week(date6, timeZone24);
        long long29 = week28.getLastMillisecond();
        int int30 = week28.getYearValue();
        java.util.Date date31 = week28.getEnd();
        org.jfree.data.time.Week week34 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str35 = week34.toString();
        long long36 = week34.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod37 = week34.next();
        java.util.Date date38 = week34.getEnd();
        org.jfree.data.time.Week week39 = new org.jfree.data.time.Week(date38);
        int int40 = week39.getWeek();
        boolean boolean42 = week39.equals((java.lang.Object) 1637449200000L);
        org.jfree.data.time.Week week45 = new org.jfree.data.time.Week(9, (int) 'a');
        org.jfree.data.time.Week week48 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod49 = week48.next();
        long long50 = week48.getMiddleMillisecond();
        java.lang.String str51 = week48.toString();
        boolean boolean52 = week45.equals((java.lang.Object) week48);
        int int53 = week48.getWeek();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod54 = week48.next();
        boolean boolean55 = week39.equals((java.lang.Object) week48);
        long long56 = week48.getLastMillisecond();
        java.lang.String str57 = week48.toString();
        org.jfree.data.time.Week week60 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str61 = week60.toString();
        long long62 = week60.getMiddleMillisecond();
        long long63 = week60.getLastMillisecond();
        org.jfree.data.time.Week week66 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod67 = week66.next();
        java.lang.Class<?> wildcardClass68 = week66.getClass();
        java.lang.Class class69 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass68);
        int int70 = week60.compareTo((java.lang.Object) wildcardClass68);
        java.lang.Class class71 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass68);
        java.lang.Class class72 = org.jfree.data.time.RegularTimePeriod.downsize(class71);
        java.lang.Class class73 = org.jfree.data.time.RegularTimePeriod.downsize(class71);
        java.lang.Class class74 = org.jfree.data.time.RegularTimePeriod.downsize(class73);
        int int75 = week48.compareTo((java.lang.Object) class73);
        int int76 = week28.compareTo((java.lang.Object) int75);
        int int77 = week28.getWeek();
        java.util.Calendar calendar78 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long79 = week28.getMiddleMillisecond(calendar78);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 2791L + "'", long4 == 2791L);
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Sep 02 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod15);
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertNotNull(class17);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone24);
// flaky:         org.junit.Assert.assertEquals(timeZone24.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod25);
        org.junit.Assert.assertNotNull(regularTimePeriod26);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + (-60505146000001L) + "'", long29 == (-60505146000001L));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 52 + "'", int30 == 52);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Sat Sep 02 23:59:59 CET 52");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Week 35, 52" + "'", str35, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + (-60506053200001L) + "'", long36 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod37);
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 35 + "'", int40 == 35);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(regularTimePeriod49);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + (-60506053200001L) + "'", long50 == (-60506053200001L));
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "Week 35, 52" + "'", str51, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 35 + "'", int53 == 35);
        org.junit.Assert.assertNotNull(regularTimePeriod54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + (-60505750800001L) + "'", long56 == (-60505750800001L));
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "Week 35, 52" + "'", str57, "Week 35, 52");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "Week 35, 52" + "'", str61, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + (-60506053200001L) + "'", long62 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + (-60505750800001L) + "'", long63 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod67);
        org.junit.Assert.assertNotNull(wildcardClass68);
        org.junit.Assert.assertNotNull(class69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
        org.junit.Assert.assertNotNull(class71);
        org.junit.Assert.assertNotNull(class72);
        org.junit.Assert.assertNotNull(class73);
        org.junit.Assert.assertNotNull(class74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 36 + "'", int77 == 36);
    }

    @Test
    public void test2428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2428");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        long long5 = week2.getLastMillisecond();
        java.util.Date date6 = week2.getEnd();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod7 = week2.previous();
        long long8 = week2.getMiddleMillisecond();
        org.jfree.data.time.Week week11 = new org.jfree.data.time.Week(9, (int) 'a');
        org.jfree.data.time.Week week14 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod15 = week14.next();
        long long16 = week14.getMiddleMillisecond();
        java.lang.String str17 = week14.toString();
        boolean boolean18 = week11.equals((java.lang.Object) week14);
        java.util.Date date19 = week11.getStart();
        int int20 = week2.compareTo((java.lang.Object) date19);
        org.jfree.data.time.Week week21 = new org.jfree.data.time.Week(date19);
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-60505750800001L) + "'", long5 == (-60505750800001L));
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-60506053200001L) + "'", long8 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-60506053200001L) + "'", long16 == (-60506053200001L));
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Week 35, 52" + "'", str17, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
    }

    @Test
    public void test2429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2429");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod11 = week2.next();
        java.util.Date date12 = week2.getStart();
        org.jfree.data.time.Week week13 = new org.jfree.data.time.Week();
        long long14 = week13.getFirstMillisecond();
        org.jfree.data.time.Year year15 = week13.getYear();
        int int16 = week13.getWeek();
        int int17 = week13.getWeek();
        int int18 = week2.compareTo((java.lang.Object) week13);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod19 = week13.next();
        java.util.Date date20 = regularTimePeriod19.getEnd();
        java.lang.Class<?> wildcardClass21 = regularTimePeriod19.getClass();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertNotNull(regularTimePeriod11);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1637449200000L + "'", long14 == 1637449200000L);
        org.junit.Assert.assertNotNull(year15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 48 + "'", int16 == 48);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 48 + "'", int17 == 48);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1969) + "'", int18 == (-1969));
        org.junit.Assert.assertNotNull(regularTimePeriod19);
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Sat Dec 04 23:59:59 CET 2021");
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test2430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2430");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getWeek();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod8 = week2.next();
        boolean boolean10 = week2.equals((java.lang.Object) 3);
        long long11 = week2.getLastMillisecond();
        java.lang.String str12 = week2.toString();
        java.util.Date date13 = week2.getEnd();
        java.util.Date date14 = week2.getEnd();
        long long15 = week2.getMiddleMillisecond();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 35 + "'", int7 == 35);
        org.junit.Assert.assertNotNull(regularTimePeriod8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-60505750800001L) + "'", long11 == (-60505750800001L));
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Week 35, 52" + "'", str12, "Week 35, 52");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-60506053200001L) + "'", long15 == (-60506053200001L));
    }

    @Test
    public void test2431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2431");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getSerialIndex();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.next();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod6 = week2.previous();
        java.lang.Class<?> wildcardClass7 = week2.getClass();
        java.lang.Class class8 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass7);
        java.util.Date date9 = null;
        org.jfree.data.time.Week week12 = new org.jfree.data.time.Week(100, 10);
        java.util.Date date13 = week12.getEnd();
        org.jfree.data.time.Week week16 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date17 = week16.getStart();
        java.util.Date date18 = week16.getEnd();
        int int19 = week16.getYearValue();
        long long20 = week16.getLastMillisecond();
        java.lang.Class<?> wildcardClass21 = week16.getClass();
        java.util.Date date22 = null;
        org.jfree.data.time.Week week25 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.util.Date date26 = week25.getStart();
        int int27 = week25.getYearValue();
        java.util.Date date28 = week25.getEnd();
        org.jfree.data.time.Week week31 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod32 = week31.next();
        java.lang.Class<?> wildcardClass33 = week31.getClass();
        java.lang.Class class34 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass33);
        java.lang.Class class35 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass33);
        org.jfree.data.time.Week week38 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod39 = week38.next();
        int int40 = week38.getYearValue();
        java.util.TimeZone timeZone41 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int42 = week38.compareTo((java.lang.Object) timeZone41);
        int int43 = week38.getYearValue();
        int int45 = week38.compareTo((java.lang.Object) 9);
        java.util.Date date46 = week38.getStart();
        org.jfree.data.time.Week week47 = new org.jfree.data.time.Week(date46);
        org.jfree.data.time.Week week50 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod51 = week50.next();
        int int52 = week50.getYearValue();
        java.util.TimeZone timeZone53 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int54 = week50.compareTo((java.lang.Object) timeZone53);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod55 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass33, date46, timeZone53);
        org.jfree.data.time.Week week58 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod59 = week58.previous();
        int int60 = week58.getYearValue();
        java.util.Date date61 = week58.getStart();
        java.util.TimeZone timeZone62 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.Week week63 = new org.jfree.data.time.Week(date61, timeZone62);
        org.jfree.data.time.Week week64 = new org.jfree.data.time.Week(date46, timeZone62);
        org.jfree.data.time.Week week65 = new org.jfree.data.time.Week(date28, timeZone62);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod66 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass21, date22, timeZone62);
        org.jfree.data.time.Week week67 = new org.jfree.data.time.Week(date13, timeZone62);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod68 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass7, date9, timeZone62);
        java.lang.Class class69 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass7);
        java.lang.Class class70 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass7);
        java.lang.Class class71 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass7);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 2791L + "'", long4 == 2791L);
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertNotNull(regularTimePeriod6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(class8);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sat Nov 28 23:59:59 CET 11");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 97 + "'", int19 == 97);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-59100800400001L) + "'", long20 == (-59100800400001L));
        org.junit.Assert.assertNotNull(wildcardClass21);
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 52 + "'", int27 == 52);
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod32);
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertNotNull(class34);
        org.junit.Assert.assertNotNull(class35);
        org.junit.Assert.assertNotNull(regularTimePeriod39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 52 + "'", int40 == 52);
        org.junit.Assert.assertNotNull(timeZone41);
// flaky:         org.junit.Assert.assertEquals(timeZone41.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 52 + "'", int43 == 52);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 52 + "'", int52 == 52);
        org.junit.Assert.assertNotNull(timeZone53);
// flaky:         org.junit.Assert.assertEquals(timeZone53.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod55);
        org.junit.Assert.assertNotNull(regularTimePeriod59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 52 + "'", int60 == 52);
        org.junit.Assert.assertNotNull(date61);
        org.junit.Assert.assertEquals(date61.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(timeZone62);
// flaky:         org.junit.Assert.assertEquals(timeZone62.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod66);
        org.junit.Assert.assertNull(regularTimePeriod68);
        org.junit.Assert.assertNotNull(class69);
        org.junit.Assert.assertNotNull(class70);
        org.junit.Assert.assertNotNull(class71);
    }

    @Test
    public void test2432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2432");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        java.lang.Class<?> wildcardClass4 = week2.getClass();
        java.lang.Class class5 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass4);
        java.lang.Class class6 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass4);
        org.jfree.data.time.Week week9 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week9.next();
        int int11 = week9.getYearValue();
        java.util.TimeZone timeZone12 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int13 = week9.compareTo((java.lang.Object) timeZone12);
        int int14 = week9.getYearValue();
        int int16 = week9.compareTo((java.lang.Object) 9);
        java.util.Date date17 = week9.getStart();
        org.jfree.data.time.Week week18 = new org.jfree.data.time.Week(date17);
        org.jfree.data.time.Week week21 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod22 = week21.next();
        int int23 = week21.getYearValue();
        java.util.TimeZone timeZone24 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int25 = week21.compareTo((java.lang.Object) timeZone24);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod26 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass4, date17, timeZone24);
        java.util.Date date27 = regularTimePeriod26.getEnd();
        org.jfree.data.time.Week week30 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod31 = week30.next();
        int int32 = week30.getYearValue();
        java.util.TimeZone timeZone33 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int34 = week30.compareTo((java.lang.Object) timeZone33);
        int int35 = week30.getYearValue();
        int int37 = week30.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod38 = week30.previous();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod39 = week30.next();
        org.jfree.data.time.Week week42 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod43 = week42.next();
        java.lang.Class<?> wildcardClass44 = week42.getClass();
        java.lang.Class class45 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass44);
        java.lang.Class class46 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass44);
        boolean boolean47 = week30.equals((java.lang.Object) wildcardClass44);
        java.lang.Class class48 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass44);
        org.jfree.data.time.Week week51 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date52 = week51.getStart();
        java.util.Date date53 = week51.getEnd();
        org.jfree.data.time.Week week56 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod57 = week56.next();
        java.lang.Class<?> wildcardClass58 = week56.getClass();
        java.lang.Class class59 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass58);
        org.jfree.data.time.Week week62 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date63 = week62.getStart();
        java.lang.Class class64 = null;
        java.util.Date date65 = null;
        java.util.TimeZone timeZone66 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod67 = org.jfree.data.time.RegularTimePeriod.createInstance(class64, date65, timeZone66);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod68 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass58, date63, timeZone66);
        org.jfree.data.time.Week week69 = new org.jfree.data.time.Week(date53, timeZone66);
        java.lang.Class class70 = null;
        java.util.Date date71 = null;
        java.util.TimeZone timeZone72 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod73 = org.jfree.data.time.RegularTimePeriod.createInstance(class70, date71, timeZone72);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod74 = org.jfree.data.time.RegularTimePeriod.createInstance(class48, date53, timeZone72);
        org.jfree.data.time.Week week75 = new org.jfree.data.time.Week(date27, timeZone72);
        long long76 = week75.getMiddleMillisecond();
        int int77 = week75.getWeek();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(class5);
        org.junit.Assert.assertNotNull(class6);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertNotNull(timeZone12);
// flaky:         org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 52 + "'", int14 == 52);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 52 + "'", int23 == 52);
        org.junit.Assert.assertNotNull(timeZone24);
// flaky:         org.junit.Assert.assertEquals(timeZone24.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod26);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 52 + "'", int32 == 52);
        org.junit.Assert.assertNotNull(timeZone33);
// flaky:         org.junit.Assert.assertEquals(timeZone33.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 52 + "'", int35 == 52);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod38);
        org.junit.Assert.assertNotNull(regularTimePeriod39);
        org.junit.Assert.assertNotNull(regularTimePeriod43);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(class45);
        org.junit.Assert.assertNotNull(class46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(class48);
        org.junit.Assert.assertNotNull(date52);
        org.junit.Assert.assertEquals(date52.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod57);
        org.junit.Assert.assertNotNull(wildcardClass58);
        org.junit.Assert.assertNotNull(class59);
        org.junit.Assert.assertNotNull(date63);
        org.junit.Assert.assertEquals(date63.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone66);
// flaky:         org.junit.Assert.assertEquals(timeZone66.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod67);
        org.junit.Assert.assertNotNull(regularTimePeriod68);
        org.junit.Assert.assertNotNull(timeZone72);
// flaky:         org.junit.Assert.assertEquals(timeZone72.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod73);
        org.junit.Assert.assertNull(regularTimePeriod74);
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + (-60506053200001L) + "'", long76 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 35 + "'", int77 == 35);
    }

    @Test
    public void test2433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2433");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        long long5 = week2.getLastMillisecond();
        java.util.Date date6 = week2.getEnd();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod7 = week2.previous();
        long long8 = week2.getSerialIndex();
        org.jfree.data.time.Week week13 = new org.jfree.data.time.Week();
        long long14 = week13.getFirstMillisecond();
        org.jfree.data.time.Year year15 = week13.getYear();
        org.jfree.data.time.Week week16 = new org.jfree.data.time.Week(0, year15);
        org.jfree.data.time.Week week17 = new org.jfree.data.time.Week(11, year15);
        long long18 = week17.getSerialIndex();
        org.jfree.data.time.Year year19 = week17.getYear();
        org.jfree.data.time.Week week20 = new org.jfree.data.time.Week((int) (short) 1, year19);
        org.jfree.data.time.Week week21 = new org.jfree.data.time.Week(4, year19);
        java.util.Date date22 = week21.getStart();
        org.jfree.data.time.Year year23 = week21.getYear();
        int int24 = week2.compareTo((java.lang.Object) year23);
        long long25 = week2.getFirstMillisecond();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-60505750800001L) + "'", long5 == (-60505750800001L));
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(regularTimePeriod7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 2791L + "'", long8 == 2791L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1637449200000L + "'", long14 == 1637449200000L);
        org.junit.Assert.assertNotNull(year15);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 107124L + "'", long18 == 107124L);
        org.junit.Assert.assertNotNull(year19);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Sun Jan 17 00:00:00 CET 2021");
        org.junit.Assert.assertNotNull(year23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-60506355600000L) + "'", long25 == (-60506355600000L));
    }

    @Test
    public void test2434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2434");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date3 = week2.getStart();
        java.util.Date date4 = week2.getEnd();
        org.jfree.data.time.Week week7 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod8 = week7.next();
        java.lang.Class<?> wildcardClass9 = week7.getClass();
        java.lang.Class class10 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass9);
        org.jfree.data.time.Week week13 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date14 = week13.getStart();
        java.lang.Class class15 = null;
        java.util.Date date16 = null;
        java.util.TimeZone timeZone17 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod18 = org.jfree.data.time.RegularTimePeriod.createInstance(class15, date16, timeZone17);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod19 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass9, date14, timeZone17);
        org.jfree.data.time.Week week20 = new org.jfree.data.time.Week(date4, timeZone17);
        java.util.Date date21 = week20.getEnd();
        int int22 = week20.getWeek();
        long long23 = week20.getSerialIndex();
        java.util.Date date24 = week20.getStart();
        org.jfree.data.time.Week week25 = new org.jfree.data.time.Week(date24);
        org.jfree.data.time.Week week26 = new org.jfree.data.time.Week(date24);
        org.jfree.data.time.Week week27 = new org.jfree.data.time.Week(date24);
        java.util.Date date28 = week27.getStart();
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(class10);
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone17);
// flaky:         org.junit.Assert.assertEquals(timeZone17.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod18);
        org.junit.Assert.assertNotNull(regularTimePeriod19);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 9 + "'", int22 == 9);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 5150L + "'", long23 == 5150L);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Sun Feb 26 00:00:00 CET 97");
    }

    @Test
    public void test2435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2435");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(0, 48);
        java.util.Calendar calendar3 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long4 = week2.getMiddleMillisecond(calendar3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test2436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2436");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week(36, 6);
    }

    @Test
    public void test2437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2437");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str3 = week2.toString();
        long long4 = week2.getSerialIndex();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = week2.next();
        java.util.Date date6 = regularTimePeriod5.getEnd();
        org.jfree.data.time.Week week9 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date10 = week9.getStart();
        java.util.Date date11 = week9.getEnd();
        org.jfree.data.time.Week week14 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod15 = week14.next();
        java.lang.Class<?> wildcardClass16 = week14.getClass();
        java.lang.Class class17 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass16);
        org.jfree.data.time.Week week20 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date21 = week20.getStart();
        java.lang.Class class22 = null;
        java.util.Date date23 = null;
        java.util.TimeZone timeZone24 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod25 = org.jfree.data.time.RegularTimePeriod.createInstance(class22, date23, timeZone24);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod26 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass16, date21, timeZone24);
        org.jfree.data.time.Week week27 = new org.jfree.data.time.Week(date11, timeZone24);
        org.jfree.data.time.Week week28 = new org.jfree.data.time.Week(date6, timeZone24);
        long long29 = week28.getLastMillisecond();
        int int30 = week28.getYearValue();
        java.util.Date date31 = week28.getEnd();
        org.jfree.data.time.Week week34 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str35 = week34.toString();
        long long36 = week34.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod37 = week34.next();
        java.util.Date date38 = week34.getEnd();
        org.jfree.data.time.Week week39 = new org.jfree.data.time.Week(date38);
        int int40 = week39.getWeek();
        boolean boolean42 = week39.equals((java.lang.Object) 1637449200000L);
        org.jfree.data.time.Week week45 = new org.jfree.data.time.Week(9, (int) 'a');
        org.jfree.data.time.Week week48 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod49 = week48.next();
        long long50 = week48.getMiddleMillisecond();
        java.lang.String str51 = week48.toString();
        boolean boolean52 = week45.equals((java.lang.Object) week48);
        int int53 = week48.getWeek();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod54 = week48.next();
        boolean boolean55 = week39.equals((java.lang.Object) week48);
        long long56 = week48.getLastMillisecond();
        java.lang.String str57 = week48.toString();
        org.jfree.data.time.Week week60 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str61 = week60.toString();
        long long62 = week60.getMiddleMillisecond();
        long long63 = week60.getLastMillisecond();
        org.jfree.data.time.Week week66 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod67 = week66.next();
        java.lang.Class<?> wildcardClass68 = week66.getClass();
        java.lang.Class class69 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass68);
        int int70 = week60.compareTo((java.lang.Object) wildcardClass68);
        java.lang.Class class71 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass68);
        java.lang.Class class72 = org.jfree.data.time.RegularTimePeriod.downsize(class71);
        java.lang.Class class73 = org.jfree.data.time.RegularTimePeriod.downsize(class71);
        java.lang.Class class74 = org.jfree.data.time.RegularTimePeriod.downsize(class73);
        int int75 = week48.compareTo((java.lang.Object) class73);
        int int76 = week28.compareTo((java.lang.Object) int75);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod77 = week28.previous();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Week 35, 52" + "'", str3, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 2791L + "'", long4 == 2791L);
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Sep 02 23:59:59 CET 52");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Sat Mar 04 23:59:59 CET 97");
        org.junit.Assert.assertNotNull(regularTimePeriod15);
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertNotNull(class17);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone24);
// flaky:         org.junit.Assert.assertEquals(timeZone24.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod25);
        org.junit.Assert.assertNotNull(regularTimePeriod26);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + (-60505146000001L) + "'", long29 == (-60505146000001L));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 52 + "'", int30 == 52);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Sat Sep 02 23:59:59 CET 52");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Week 35, 52" + "'", str35, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + (-60506053200001L) + "'", long36 == (-60506053200001L));
        org.junit.Assert.assertNotNull(regularTimePeriod37);
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 35 + "'", int40 == 35);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(regularTimePeriod49);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + (-60506053200001L) + "'", long50 == (-60506053200001L));
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "Week 35, 52" + "'", str51, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 35 + "'", int53 == 35);
        org.junit.Assert.assertNotNull(regularTimePeriod54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + (-60505750800001L) + "'", long56 == (-60505750800001L));
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "Week 35, 52" + "'", str57, "Week 35, 52");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "Week 35, 52" + "'", str61, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + (-60506053200001L) + "'", long62 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + (-60505750800001L) + "'", long63 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod67);
        org.junit.Assert.assertNotNull(wildcardClass68);
        org.junit.Assert.assertNotNull(class69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
        org.junit.Assert.assertNotNull(class71);
        org.junit.Assert.assertNotNull(class72);
        org.junit.Assert.assertNotNull(class73);
        org.junit.Assert.assertNotNull(class74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod77);
    }

    @Test
    public void test2438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2438");
        org.jfree.data.time.Week week3 = new org.jfree.data.time.Week();
        long long4 = week3.getFirstMillisecond();
        org.jfree.data.time.Year year5 = week3.getYear();
        org.jfree.data.time.Week week6 = new org.jfree.data.time.Week(0, year5);
        org.jfree.data.time.Year year7 = week6.getYear();
        org.jfree.data.time.Week week8 = new org.jfree.data.time.Week(3, year7);
        org.jfree.data.time.Week week9 = new org.jfree.data.time.Week((int) (short) 100, year7);
        org.jfree.data.time.Week week12 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str13 = week12.toString();
        long long14 = week12.getMiddleMillisecond();
        long long15 = week12.getFirstMillisecond();
        int int16 = week12.getWeek();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod17 = week12.previous();
        org.jfree.data.time.Week week20 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date21 = week20.getStart();
        org.jfree.data.time.Week week22 = new org.jfree.data.time.Week(date21);
        org.jfree.data.time.Week week25 = new org.jfree.data.time.Week((int) '#', (int) '4');
        java.lang.String str26 = week25.toString();
        long long27 = week25.getMiddleMillisecond();
        long long28 = week25.getLastMillisecond();
        org.jfree.data.time.Week week31 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod32 = week31.next();
        java.lang.Class<?> wildcardClass33 = week31.getClass();
        java.lang.Class class34 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass33);
        int int35 = week25.compareTo((java.lang.Object) wildcardClass33);
        java.lang.Class class36 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass33);
        boolean boolean37 = week22.equals((java.lang.Object) wildcardClass33);
        org.jfree.data.time.Week week40 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod41 = week40.previous();
        int int42 = week40.getYearValue();
        java.util.Date date43 = week40.getStart();
        int int44 = week40.getYearValue();
        long long45 = week40.getSerialIndex();
        boolean boolean46 = week22.equals((java.lang.Object) week40);
        boolean boolean47 = week12.equals((java.lang.Object) boolean46);
        java.util.Date date48 = week12.getStart();
        boolean boolean49 = week9.equals((java.lang.Object) date48);
        long long50 = week9.getMiddleMillisecond();
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1637449200000L + "'", long4 == 1637449200000L);
        org.junit.Assert.assertNotNull(year5);
        org.junit.Assert.assertNotNull(year7);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Week 35, 52" + "'", str13, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-60506053200001L) + "'", long14 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-60506355600000L) + "'", long15 == (-60506355600000L));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 35 + "'", int16 == 35);
        org.junit.Assert.assertNotNull(regularTimePeriod17);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Week 35, 52" + "'", str26, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + (-60506053200001L) + "'", long27 == (-60506053200001L));
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + (-60505750800001L) + "'", long28 == (-60505750800001L));
        org.junit.Assert.assertNotNull(regularTimePeriod32);
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertNotNull(class34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(class36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(regularTimePeriod41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 52 + "'", int42 == 52);
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 52 + "'", int44 == 52);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 2791L + "'", long45 == 2791L);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Sun Aug 20 00:00:00 CET 52");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 1669201199999L + "'", long50 == 1669201199999L);
    }

    @Test
    public void test2439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2439");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.next();
        int int4 = week2.getYearValue();
        java.util.TimeZone timeZone5 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        int int6 = week2.compareTo((java.lang.Object) timeZone5);
        int int7 = week2.getYearValue();
        int int9 = week2.compareTo((java.lang.Object) 9);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = week2.previous();
        int int11 = week2.getYearValue();
        long long12 = week2.getLastMillisecond();
        int int13 = week2.getWeek();
        int int14 = week2.getYearValue();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod15 = week2.next();
        int int16 = week2.getYearValue();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod17 = week2.next();
        int int18 = week2.getYearValue();
        org.jfree.data.time.Week week21 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod22 = week21.next();
        long long23 = week21.getMiddleMillisecond();
        java.lang.String str24 = week21.toString();
        org.jfree.data.time.Week week27 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod28 = week27.next();
        java.lang.Class<?> wildcardClass29 = week27.getClass();
        java.lang.Class class30 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass29);
        org.jfree.data.time.Week week33 = new org.jfree.data.time.Week(9, (int) 'a');
        java.util.Date date34 = week33.getStart();
        java.lang.Class class35 = null;
        java.util.Date date36 = null;
        java.util.TimeZone timeZone37 = org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod38 = org.jfree.data.time.RegularTimePeriod.createInstance(class35, date36, timeZone37);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod39 = org.jfree.data.time.RegularTimePeriod.createInstance((java.lang.Class) wildcardClass29, date34, timeZone37);
        java.lang.Class<?> wildcardClass40 = timeZone37.getClass();
        boolean boolean41 = week21.equals((java.lang.Object) wildcardClass40);
        int int42 = week2.compareTo((java.lang.Object) wildcardClass40);
        java.lang.Class<?> wildcardClass43 = week2.getClass();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Central European Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-60505750800001L) + "'", long12 == (-60505750800001L));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 52 + "'", int14 == 52);
        org.junit.Assert.assertNotNull(regularTimePeriod15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 52 + "'", int16 == 52);
        org.junit.Assert.assertNotNull(regularTimePeriod17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 52 + "'", int18 == 52);
        org.junit.Assert.assertNotNull(regularTimePeriod22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-60506053200001L) + "'", long23 == (-60506053200001L));
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Week 35, 52" + "'", str24, "Week 35, 52");
        org.junit.Assert.assertNotNull(regularTimePeriod28);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(class30);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Sun Feb 26 00:00:00 CET 97");
        org.junit.Assert.assertNotNull(timeZone37);
// flaky:         org.junit.Assert.assertEquals(timeZone37.getDisplayName(), "Central European Time");
        org.junit.Assert.assertNull(regularTimePeriod38);
        org.junit.Assert.assertNotNull(regularTimePeriod39);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(wildcardClass43);
    }

    @Test
    public void test2440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2440");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) 'a', 97);
    }

    @Test
    public void test2441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2441");
        org.jfree.data.time.Week week2 = new org.jfree.data.time.Week((int) '#', (int) '4');
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = week2.previous();
        int int4 = week2.getYearValue();
        java.lang.String str5 = week2.toString();
        long long6 = week2.getSerialIndex();
        java.util.Date date7 = week2.getEnd();
        long long8 = week2.getSerialIndex();
        int int9 = week2.getWeek();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Week 35, 52" + "'", str5, "Week 35, 52");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 2791L + "'", long6 == 2791L);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Sat Aug 26 23:59:59 CET 52");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 2791L + "'", long8 == 2791L);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
    }
}

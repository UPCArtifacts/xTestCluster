import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest1 {

    public static boolean debug = false;

    @Test
    public void test0501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0501");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        boolean boolean4 = closureCodingConvention0.isSuperClassReference("hi!");
        com.google.javascript.rhino.Node node5 = null;
        boolean boolean6 = closureCodingConvention0.isOptionalParameter(node5);
        boolean boolean8 = closureCodingConvention0.isConstantKey("hi!");
        com.google.javascript.rhino.Node node9 = null;
        boolean boolean10 = closureCodingConvention0.isVarArgsParameter(node9);
        boolean boolean12 = closureCodingConvention0.isExported("");
        com.google.javascript.rhino.Node node13 = null;
        boolean boolean14 = closureCodingConvention0.isVarArgsParameter(node13);
        java.lang.String str15 = closureCodingConvention0.getExportSymbolFunction();
        java.lang.String str16 = closureCodingConvention0.getAbstractMethodName();
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry17 = null;
        com.google.javascript.jscomp.Scope scope18 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention19 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node20 = null;
        boolean boolean21 = closureCodingConvention19.isOptionalParameter(node20);
        java.lang.String str22 = closureCodingConvention19.getAbstractMethodName();
        java.lang.String str23 = closureCodingConvention19.getGlobalObject();
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection24 = closureCodingConvention19.getAssertionFunctions();
        boolean boolean26 = closureCodingConvention19.isConstant("goog.global");
        com.google.javascript.rhino.Node node27 = null;
        com.google.javascript.jscomp.CodingConvention.DelegateRelationship delegateRelationship28 = closureCodingConvention19.getDelegateRelationship(node27);
        com.google.javascript.rhino.jstype.ObjectType objectType29 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType30 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType31 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType32 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType33 = null;
        closureCodingConvention19.applyDelegateRelationship(objectType29, objectType30, objectType31, functionType32, functionType33);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry35 = null;
        com.google.javascript.jscomp.Scope scope36 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention37 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node38 = null;
        boolean boolean39 = closureCodingConvention37.isOptionalParameter(node38);
        boolean boolean41 = closureCodingConvention37.isSuperClassReference("hi!");
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry42 = null;
        com.google.javascript.jscomp.Scope scope43 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention44 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node45 = null;
        boolean boolean46 = closureCodingConvention44.isOptionalParameter(node45);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry47 = null;
        com.google.javascript.jscomp.Scope scope48 = null;
        com.google.javascript.rhino.jstype.ObjectType[] objectTypeArray49 = new com.google.javascript.rhino.jstype.ObjectType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType> objectTypeList50 = new java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList50, objectTypeArray49);
        java.util.Map<java.lang.String, java.lang.String> strMap52 = null;
        closureCodingConvention44.defineDelegateProxyPrototypeProperties(jSTypeRegistry47, scope48, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList50, strMap52);
        java.util.Map<java.lang.String, java.lang.String> strMap54 = null;
        closureCodingConvention37.defineDelegateProxyPrototypeProperties(jSTypeRegistry42, scope43, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList50, strMap54);
        java.util.Map<java.lang.String, java.lang.String> strMap56 = null;
        closureCodingConvention19.defineDelegateProxyPrototypeProperties(jSTypeRegistry35, scope36, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList50, strMap56);
        java.util.Map<java.lang.String, java.lang.String> strMap58 = null;
        closureCodingConvention0.defineDelegateProxyPrototypeProperties(jSTypeRegistry17, scope18, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList50, strMap58);
        java.lang.String str60 = closureCodingConvention0.getExportPropertyFunction();
        boolean boolean62 = closureCodingConvention0.isConstant("hi!");
        com.google.javascript.rhino.Node node63 = null;
        com.google.javascript.jscomp.CodingConvention.DelegateRelationship delegateRelationship64 = closureCodingConvention0.getDelegateRelationship(node63);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry65 = null;
        com.google.javascript.jscomp.Scope scope66 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention67 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node68 = null;
        boolean boolean69 = closureCodingConvention67.isOptionalParameter(node68);
        boolean boolean71 = closureCodingConvention67.isSuperClassReference("hi!");
        com.google.javascript.rhino.Node node72 = null;
        boolean boolean73 = closureCodingConvention67.isOptionalParameter(node72);
        boolean boolean75 = closureCodingConvention67.isConstantKey("hi!");
        com.google.javascript.rhino.Node node76 = null;
        boolean boolean77 = closureCodingConvention67.isVarArgsParameter(node76);
        boolean boolean79 = closureCodingConvention67.isExported("");
        com.google.javascript.rhino.Node node80 = null;
        boolean boolean81 = closureCodingConvention67.isVarArgsParameter(node80);
        java.lang.String str82 = closureCodingConvention67.getExportSymbolFunction();
        java.lang.String str83 = closureCodingConvention67.getAbstractMethodName();
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry84 = null;
        com.google.javascript.jscomp.Scope scope85 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention86 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node87 = null;
        boolean boolean88 = closureCodingConvention86.isOptionalParameter(node87);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry89 = null;
        com.google.javascript.jscomp.Scope scope90 = null;
        com.google.javascript.rhino.jstype.ObjectType[] objectTypeArray91 = new com.google.javascript.rhino.jstype.ObjectType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType> objectTypeList92 = new java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType>();
        boolean boolean93 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList92, objectTypeArray91);
        java.util.Map<java.lang.String, java.lang.String> strMap94 = null;
        closureCodingConvention86.defineDelegateProxyPrototypeProperties(jSTypeRegistry89, scope90, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList92, strMap94);
        java.util.Map<java.lang.String, java.lang.String> strMap96 = null;
        closureCodingConvention67.defineDelegateProxyPrototypeProperties(jSTypeRegistry84, scope85, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList92, strMap96);
        java.util.Map<java.lang.String, java.lang.String> strMap98 = null;
        closureCodingConvention0.defineDelegateProxyPrototypeProperties(jSTypeRegistry65, scope66, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList92, strMap98);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "goog.exportSymbol" + "'", str15, "goog.exportSymbol");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "goog.abstractMethod" + "'", str16, "goog.abstractMethod");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "goog.abstractMethod" + "'", str22, "goog.abstractMethod");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "goog.global" + "'", str23, "goog.global");
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(delegateRelationship28);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(objectTypeArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "goog.exportProperty" + "'", str60, "goog.exportProperty");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNull(delegateRelationship64);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "goog.exportSymbol" + "'", str82, "goog.exportSymbol");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "goog.abstractMethod" + "'", str83, "goog.abstractMethod");
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(objectTypeArray91);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
    }

    @Test
    public void test0502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0502");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        boolean boolean4 = closureCodingConvention0.isSuperClassReference("hi!");
        com.google.javascript.rhino.Node node5 = null;
        boolean boolean6 = closureCodingConvention0.isOptionalParameter(node5);
        java.lang.String str7 = closureCodingConvention0.getExportPropertyFunction();
        java.lang.String str8 = closureCodingConvention0.getGlobalObject();
        boolean boolean10 = closureCodingConvention0.isValidEnumKey("");
        java.lang.String str11 = closureCodingConvention0.getExportSymbolFunction();
        com.google.javascript.rhino.Node node12 = null;
        java.util.Map<java.lang.String, java.lang.String> strMap13 = null;
        closureCodingConvention0.checkForCallingConventionDefiningCalls(node12, strMap13);
        java.lang.String str15 = closureCodingConvention0.getGlobalObject();
        com.google.javascript.rhino.Node node16 = null;
        java.util.Map<java.lang.String, java.lang.String> strMap17 = null;
        closureCodingConvention0.checkForCallingConventionDefiningCalls(node16, strMap17);
        com.google.javascript.rhino.Node node19 = null;
        com.google.javascript.rhino.Node node20 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str21 = closureCodingConvention0.extractClassNameIfRequire(node19, node20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "goog.exportProperty" + "'", str7, "goog.exportProperty");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "goog.global" + "'", str8, "goog.global");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "goog.exportSymbol" + "'", str11, "goog.exportSymbol");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "goog.global" + "'", str15, "goog.global");
    }

    @Test
    public void test0503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0503");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        boolean boolean4 = closureCodingConvention0.isSuperClassReference("hi!");
        boolean boolean6 = closureCodingConvention0.isPrivate("goog.exportProperty");
        boolean boolean8 = closureCodingConvention0.isValidEnumKey("");
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection9 = closureCodingConvention0.getAssertionFunctions();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection9);
    }

    @Test
    public void test0504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0504");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection1 = closureCodingConvention0.getAssertionFunctions();
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection2 = closureCodingConvention0.getAssertionFunctions();
        java.lang.String str3 = closureCodingConvention0.getGlobalObject();
        com.google.javascript.rhino.Node node4 = null;
        java.util.Map<java.lang.String, java.lang.String> strMap5 = null;
        closureCodingConvention0.checkForCallingConventionDefiningCalls(node4, strMap5);
        com.google.javascript.rhino.Node node7 = null;
        boolean boolean8 = closureCodingConvention0.isVarArgsParameter(node7);
        com.google.javascript.rhino.Node node9 = null;
        com.google.javascript.rhino.Node node10 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str11 = closureCodingConvention0.extractClassNameIfProvide(node9, node10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection1);
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "goog.global" + "'", str3, "goog.global");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test0505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0505");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        boolean boolean2 = closureCodingConvention0.isValidEnumKey("goog.abstractMethod");
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection3 = closureCodingConvention0.getAssertionFunctions();
        boolean boolean5 = closureCodingConvention0.isConstantKey("goog.exportProperty");
        com.google.javascript.rhino.Node node6 = null;
        java.util.Map<java.lang.String, java.lang.String> strMap7 = null;
        closureCodingConvention0.checkForCallingConventionDefiningCalls(node6, strMap7);
        boolean boolean10 = closureCodingConvention0.isConstant("");
        java.lang.String str11 = closureCodingConvention0.getAbstractMethodName();
        java.lang.String str12 = closureCodingConvention0.getExportSymbolFunction();
        com.google.javascript.rhino.Node node13 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.String> strList14 = closureCodingConvention0.identifyTypeDeclarationCall(node13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "goog.abstractMethod" + "'", str11, "goog.abstractMethod");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "goog.exportSymbol" + "'", str12, "goog.exportSymbol");
    }

    @Test
    public void test0506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0506");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        boolean boolean4 = closureCodingConvention0.isSuperClassReference("hi!");
        boolean boolean6 = closureCodingConvention0.isSuperClassReference("goog.global");
        java.lang.String str7 = closureCodingConvention0.getDelegateSuperclassName();
        java.lang.String str8 = closureCodingConvention0.getExportPropertyFunction();
        com.google.javascript.jscomp.NodeTraversal nodeTraversal9 = null;
        com.google.javascript.rhino.Node node10 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.jscomp.CodingConvention.ObjectLiteralCast objectLiteralCast11 = closureCodingConvention0.getObjectLiteralCast(nodeTraversal9, node10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "goog.exportProperty" + "'", str8, "goog.exportProperty");
    }

    @Test
    public void test0507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0507");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection1 = closureCodingConvention0.getAssertionFunctions();
        java.lang.String str2 = closureCodingConvention0.getAbstractMethodName();
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "goog.abstractMethod" + "'", str2, "goog.abstractMethod");
    }

    @Test
    public void test0508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0508");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        boolean boolean4 = closureCodingConvention0.isSuperClassReference("hi!");
        com.google.javascript.rhino.Node node5 = null;
        boolean boolean6 = closureCodingConvention0.isOptionalParameter(node5);
        boolean boolean8 = closureCodingConvention0.isExported("hi!");
        java.lang.String str9 = closureCodingConvention0.getExportPropertyFunction();
        com.google.javascript.rhino.jstype.FunctionType functionType10 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType11 = null;
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType12 = null;
        closureCodingConvention0.applySubclassRelationship(functionType10, functionType11, subclassType12);
        com.google.javascript.rhino.jstype.ObjectType objectType14 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType15 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType16 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType17 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType18 = null;
        closureCodingConvention0.applyDelegateRelationship(objectType14, objectType15, objectType16, functionType17, functionType18);
        com.google.javascript.rhino.jstype.FunctionType functionType20 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType21 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType22 = null;
        // The following exception was thrown during execution in test generation
        try {
            closureCodingConvention0.applySingletonGetter(functionType20, functionType21, objectType22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "goog.exportProperty" + "'", str9, "goog.exportProperty");
    }

    @Test
    public void test0509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0509");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        boolean boolean4 = closureCodingConvention0.isSuperClassReference("hi!");
        com.google.javascript.rhino.Node node5 = null;
        boolean boolean6 = closureCodingConvention0.isOptionalParameter(node5);
        boolean boolean8 = closureCodingConvention0.isConstantKey("hi!");
        com.google.javascript.rhino.Node node9 = null;
        boolean boolean10 = closureCodingConvention0.isVarArgsParameter(node9);
        com.google.javascript.rhino.Node node11 = null;
        boolean boolean12 = closureCodingConvention0.isVarArgsParameter(node11);
        com.google.javascript.rhino.Node node13 = null;
        java.util.Map<java.lang.String, java.lang.String> strMap14 = null;
        closureCodingConvention0.checkForCallingConventionDefiningCalls(node13, strMap14);
        com.google.javascript.rhino.jstype.FunctionType functionType16 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType17 = null;
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType18 = null;
        closureCodingConvention0.applySubclassRelationship(functionType16, functionType17, subclassType18);
        java.lang.String str20 = closureCodingConvention0.getAbstractMethodName();
        boolean boolean22 = closureCodingConvention0.isValidEnumKey("goog.exportSymbol");
        boolean boolean24 = closureCodingConvention0.isConstantKey("goog.global");
        com.google.javascript.rhino.Node node25 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean26 = closureCodingConvention0.isPropertyTestFunction(node25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "goog.abstractMethod" + "'", str20, "goog.abstractMethod");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test0510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0510");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry3 = null;
        com.google.javascript.jscomp.Scope scope4 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention5 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node6 = null;
        boolean boolean7 = closureCodingConvention5.isOptionalParameter(node6);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry8 = null;
        com.google.javascript.jscomp.Scope scope9 = null;
        com.google.javascript.rhino.jstype.ObjectType[] objectTypeArray10 = new com.google.javascript.rhino.jstype.ObjectType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType> objectTypeList11 = new java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList11, objectTypeArray10);
        java.util.Map<java.lang.String, java.lang.String> strMap13 = null;
        closureCodingConvention5.defineDelegateProxyPrototypeProperties(jSTypeRegistry8, scope9, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList11, strMap13);
        java.util.Map<java.lang.String, java.lang.String> strMap15 = null;
        closureCodingConvention0.defineDelegateProxyPrototypeProperties(jSTypeRegistry3, scope4, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList11, strMap15);
        com.google.javascript.rhino.Node node17 = null;
        java.util.Map<java.lang.String, java.lang.String> strMap18 = null;
        closureCodingConvention0.checkForCallingConventionDefiningCalls(node17, strMap18);
        java.lang.String str20 = closureCodingConvention0.getGlobalObject();
        boolean boolean22 = closureCodingConvention0.isConstant("hi!");
        boolean boolean24 = closureCodingConvention0.isPrivate("goog.exportSymbol");
        com.google.javascript.rhino.jstype.FunctionType functionType25 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType26 = null;
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType27 = null;
        closureCodingConvention0.applySubclassRelationship(functionType25, functionType26, subclassType27);
        java.lang.String str29 = closureCodingConvention0.getGlobalObject();
        java.lang.String str30 = closureCodingConvention0.getGlobalObject();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(objectTypeArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "goog.global" + "'", str20, "goog.global");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "goog.global" + "'", str29, "goog.global");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "goog.global" + "'", str30, "goog.global");
    }

    @Test
    public void test0511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0511");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        java.lang.String str3 = closureCodingConvention0.getAbstractMethodName();
        boolean boolean5 = closureCodingConvention0.isConstant("goog.abstractMethod");
        boolean boolean7 = closureCodingConvention0.isValidEnumKey("hi!");
        boolean boolean9 = closureCodingConvention0.isConstant("goog.global");
        com.google.javascript.rhino.Node node10 = null;
        boolean boolean11 = closureCodingConvention0.isOptionalParameter(node10);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "goog.abstractMethod" + "'", str3, "goog.abstractMethod");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test0512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0512");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        boolean boolean2 = closureCodingConvention0.isConstant("goog.global");
        boolean boolean4 = closureCodingConvention0.isConstant("hi!");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test0513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0513");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        java.lang.String str3 = closureCodingConvention0.getAbstractMethodName();
        java.lang.String str4 = closureCodingConvention0.getGlobalObject();
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection5 = closureCodingConvention0.getAssertionFunctions();
        boolean boolean7 = closureCodingConvention0.isConstant("goog.global");
        com.google.javascript.rhino.Node node8 = null;
        com.google.javascript.jscomp.CodingConvention.DelegateRelationship delegateRelationship9 = closureCodingConvention0.getDelegateRelationship(node8);
        com.google.javascript.rhino.Node node10 = null;
        boolean boolean11 = closureCodingConvention0.isOptionalParameter(node10);
        com.google.javascript.rhino.Node node12 = null;
        boolean boolean13 = closureCodingConvention0.isOptionalParameter(node12);
        com.google.javascript.rhino.Node node14 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str15 = closureCodingConvention0.getSingletonGetterClassName(node14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "goog.abstractMethod" + "'", str3, "goog.abstractMethod");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "goog.global" + "'", str4, "goog.global");
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(delegateRelationship9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test0514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0514");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        boolean boolean2 = closureCodingConvention0.isExported("goog.global");
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection3 = closureCodingConvention0.getAssertionFunctions();
        java.lang.String str4 = closureCodingConvention0.getGlobalObject();
        boolean boolean7 = closureCodingConvention0.isExported("goog.exportProperty", false);
        boolean boolean9 = closureCodingConvention0.isExported("goog.abstractMethod");
        com.google.javascript.rhino.Node node10 = null;
        boolean boolean11 = closureCodingConvention0.isVarArgsParameter(node10);
        java.lang.String str12 = closureCodingConvention0.getExportSymbolFunction();
        com.google.javascript.rhino.Node node13 = null;
        boolean boolean14 = closureCodingConvention0.isVarArgsParameter(node13);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "goog.global" + "'", str4, "goog.global");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "goog.exportSymbol" + "'", str12, "goog.exportSymbol");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test0515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0515");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry3 = null;
        com.google.javascript.jscomp.Scope scope4 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention5 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node6 = null;
        boolean boolean7 = closureCodingConvention5.isOptionalParameter(node6);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry8 = null;
        com.google.javascript.jscomp.Scope scope9 = null;
        com.google.javascript.rhino.jstype.ObjectType[] objectTypeArray10 = new com.google.javascript.rhino.jstype.ObjectType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType> objectTypeList11 = new java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList11, objectTypeArray10);
        java.util.Map<java.lang.String, java.lang.String> strMap13 = null;
        closureCodingConvention5.defineDelegateProxyPrototypeProperties(jSTypeRegistry8, scope9, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList11, strMap13);
        java.util.Map<java.lang.String, java.lang.String> strMap15 = null;
        closureCodingConvention0.defineDelegateProxyPrototypeProperties(jSTypeRegistry3, scope4, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList11, strMap15);
        com.google.javascript.rhino.Node node17 = null;
        java.util.Map<java.lang.String, java.lang.String> strMap18 = null;
        closureCodingConvention0.checkForCallingConventionDefiningCalls(node17, strMap18);
        boolean boolean21 = closureCodingConvention0.isConstant("");
        java.lang.String str22 = closureCodingConvention0.getExportSymbolFunction();
        java.lang.String str23 = closureCodingConvention0.getAbstractMethodName();
        com.google.javascript.rhino.Node node24 = null;
        com.google.javascript.jscomp.CodingConvention.DelegateRelationship delegateRelationship25 = closureCodingConvention0.getDelegateRelationship(node24);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(objectTypeArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "goog.exportSymbol" + "'", str22, "goog.exportSymbol");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "goog.abstractMethod" + "'", str23, "goog.abstractMethod");
        org.junit.Assert.assertNull(delegateRelationship25);
    }

    @Test
    public void test0516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0516");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        java.lang.String str3 = closureCodingConvention0.getAbstractMethodName();
        java.lang.String str4 = closureCodingConvention0.getGlobalObject();
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection5 = closureCodingConvention0.getAssertionFunctions();
        boolean boolean7 = closureCodingConvention0.isConstant("goog.global");
        boolean boolean9 = closureCodingConvention0.isSuperClassReference("goog.exportProperty");
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection10 = closureCodingConvention0.getAssertionFunctions();
        java.lang.Class<?> wildcardClass11 = closureCodingConvention0.getClass();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "goog.abstractMethod" + "'", str3, "goog.abstractMethod");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "goog.global" + "'", str4, "goog.global");
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0517");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection1 = closureCodingConvention0.getAssertionFunctions();
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection2 = closureCodingConvention0.getAssertionFunctions();
        com.google.javascript.rhino.Node node3 = null;
        boolean boolean4 = closureCodingConvention0.isOptionalParameter(node3);
        java.lang.String str5 = closureCodingConvention0.getDelegateSuperclassName();
        java.lang.Class<?> wildcardClass6 = closureCodingConvention0.getClass();
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection1);
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test0518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0518");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry3 = null;
        com.google.javascript.jscomp.Scope scope4 = null;
        com.google.javascript.rhino.jstype.ObjectType[] objectTypeArray5 = new com.google.javascript.rhino.jstype.ObjectType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType> objectTypeList6 = new java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList6, objectTypeArray5);
        java.util.Map<java.lang.String, java.lang.String> strMap8 = null;
        closureCodingConvention0.defineDelegateProxyPrototypeProperties(jSTypeRegistry3, scope4, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList6, strMap8);
        com.google.javascript.rhino.Node node10 = null;
        boolean boolean11 = closureCodingConvention0.isVarArgsParameter(node10);
        boolean boolean13 = closureCodingConvention0.isConstantKey("");
        java.lang.String str14 = closureCodingConvention0.getAbstractMethodName();
        com.google.javascript.rhino.Node node15 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship16 = closureCodingConvention0.getClassesDefinedByCall(node15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(objectTypeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "goog.abstractMethod" + "'", str14, "goog.abstractMethod");
    }

    @Test
    public void test0519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0519");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        boolean boolean4 = closureCodingConvention0.isConstant("hi!");
        boolean boolean6 = closureCodingConvention0.isPrivate("hi!");
        boolean boolean8 = closureCodingConvention0.isConstantKey("goog.exportProperty");
        boolean boolean10 = closureCodingConvention0.isPrivate("goog.global");
        com.google.javascript.rhino.jstype.ObjectType objectType11 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType12 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType13 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType14 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType15 = null;
        closureCodingConvention0.applyDelegateRelationship(objectType11, objectType12, objectType13, functionType14, functionType15);
        com.google.javascript.jscomp.NodeTraversal nodeTraversal17 = null;
        com.google.javascript.rhino.Node node18 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.jscomp.CodingConvention.ObjectLiteralCast objectLiteralCast19 = closureCodingConvention0.getObjectLiteralCast(nodeTraversal17, node18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test0520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0520");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        java.lang.String str3 = closureCodingConvention0.getAbstractMethodName();
        java.lang.String str4 = closureCodingConvention0.getGlobalObject();
        boolean boolean6 = closureCodingConvention0.isExported("goog.global");
        com.google.javascript.rhino.Node node7 = null;
        com.google.javascript.jscomp.CodingConvention.DelegateRelationship delegateRelationship8 = closureCodingConvention0.getDelegateRelationship(node7);
        com.google.javascript.rhino.Node node9 = null;
        com.google.javascript.jscomp.CodingConvention.DelegateRelationship delegateRelationship10 = closureCodingConvention0.getDelegateRelationship(node9);
        com.google.javascript.rhino.Node node11 = null;
        com.google.javascript.jscomp.CodingConvention.DelegateRelationship delegateRelationship12 = closureCodingConvention0.getDelegateRelationship(node11);
        com.google.javascript.rhino.Node node13 = null;
        com.google.javascript.rhino.Node node14 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str15 = closureCodingConvention0.extractClassNameIfRequire(node13, node14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "goog.abstractMethod" + "'", str3, "goog.abstractMethod");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "goog.global" + "'", str4, "goog.global");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(delegateRelationship8);
        org.junit.Assert.assertNull(delegateRelationship10);
        org.junit.Assert.assertNull(delegateRelationship12);
    }

    @Test
    public void test0521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0521");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        java.lang.String str3 = closureCodingConvention0.getAbstractMethodName();
        java.lang.String str4 = closureCodingConvention0.getGlobalObject();
        boolean boolean6 = closureCodingConvention0.isExported("goog.global");
        com.google.javascript.rhino.Node node7 = null;
        com.google.javascript.jscomp.CodingConvention.DelegateRelationship delegateRelationship8 = closureCodingConvention0.getDelegateRelationship(node7);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry9 = null;
        com.google.javascript.jscomp.Scope scope10 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention11 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node12 = null;
        boolean boolean13 = closureCodingConvention11.isOptionalParameter(node12);
        java.lang.String str14 = closureCodingConvention11.getAbstractMethodName();
        java.lang.String str15 = closureCodingConvention11.getGlobalObject();
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection16 = closureCodingConvention11.getAssertionFunctions();
        boolean boolean18 = closureCodingConvention11.isConstant("goog.global");
        boolean boolean20 = closureCodingConvention11.isSuperClassReference("goog.exportProperty");
        com.google.javascript.rhino.jstype.FunctionType functionType21 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType22 = null;
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType23 = null;
        closureCodingConvention11.applySubclassRelationship(functionType21, functionType22, subclassType23);
        boolean boolean26 = closureCodingConvention11.isSuperClassReference("goog.global");
        boolean boolean29 = closureCodingConvention11.isExported("hi!", false);
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection30 = closureCodingConvention11.getAssertionFunctions();
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry31 = null;
        com.google.javascript.jscomp.Scope scope32 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention33 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node34 = null;
        boolean boolean35 = closureCodingConvention33.isOptionalParameter(node34);
        java.lang.String str36 = closureCodingConvention33.getAbstractMethodName();
        java.lang.String str37 = closureCodingConvention33.getGlobalObject();
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection38 = closureCodingConvention33.getAssertionFunctions();
        boolean boolean40 = closureCodingConvention33.isConstant("goog.global");
        com.google.javascript.rhino.Node node41 = null;
        com.google.javascript.jscomp.CodingConvention.DelegateRelationship delegateRelationship42 = closureCodingConvention33.getDelegateRelationship(node41);
        com.google.javascript.rhino.jstype.ObjectType objectType43 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType44 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType45 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType46 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType47 = null;
        closureCodingConvention33.applyDelegateRelationship(objectType43, objectType44, objectType45, functionType46, functionType47);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry49 = null;
        com.google.javascript.jscomp.Scope scope50 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention51 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node52 = null;
        boolean boolean53 = closureCodingConvention51.isOptionalParameter(node52);
        boolean boolean55 = closureCodingConvention51.isSuperClassReference("hi!");
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry56 = null;
        com.google.javascript.jscomp.Scope scope57 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention58 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node59 = null;
        boolean boolean60 = closureCodingConvention58.isOptionalParameter(node59);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry61 = null;
        com.google.javascript.jscomp.Scope scope62 = null;
        com.google.javascript.rhino.jstype.ObjectType[] objectTypeArray63 = new com.google.javascript.rhino.jstype.ObjectType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType> objectTypeList64 = new java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList64, objectTypeArray63);
        java.util.Map<java.lang.String, java.lang.String> strMap66 = null;
        closureCodingConvention58.defineDelegateProxyPrototypeProperties(jSTypeRegistry61, scope62, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList64, strMap66);
        java.util.Map<java.lang.String, java.lang.String> strMap68 = null;
        closureCodingConvention51.defineDelegateProxyPrototypeProperties(jSTypeRegistry56, scope57, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList64, strMap68);
        java.util.Map<java.lang.String, java.lang.String> strMap70 = null;
        closureCodingConvention33.defineDelegateProxyPrototypeProperties(jSTypeRegistry49, scope50, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList64, strMap70);
        java.util.Map<java.lang.String, java.lang.String> strMap72 = null;
        closureCodingConvention11.defineDelegateProxyPrototypeProperties(jSTypeRegistry31, scope32, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList64, strMap72);
        java.util.Map<java.lang.String, java.lang.String> strMap74 = null;
        closureCodingConvention0.defineDelegateProxyPrototypeProperties(jSTypeRegistry9, scope10, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList64, strMap74);
        java.lang.String str76 = closureCodingConvention0.getAbstractMethodName();
        java.lang.String str77 = closureCodingConvention0.getExportSymbolFunction();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "goog.abstractMethod" + "'", str3, "goog.abstractMethod");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "goog.global" + "'", str4, "goog.global");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(delegateRelationship8);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "goog.abstractMethod" + "'", str14, "goog.abstractMethod");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "goog.global" + "'", str15, "goog.global");
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "goog.abstractMethod" + "'", str36, "goog.abstractMethod");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "goog.global" + "'", str37, "goog.global");
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNull(delegateRelationship42);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(objectTypeArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "goog.abstractMethod" + "'", str76, "goog.abstractMethod");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "goog.exportSymbol" + "'", str77, "goog.exportSymbol");
    }

    @Test
    public void test0522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0522");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.jstype.ObjectType objectType1 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType2 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType3 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType4 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType5 = null;
        closureCodingConvention0.applyDelegateRelationship(objectType1, objectType2, objectType3, functionType4, functionType5);
        java.lang.String str7 = closureCodingConvention0.getGlobalObject();
        boolean boolean9 = closureCodingConvention0.isPrivate("goog.abstractMethod");
        boolean boolean11 = closureCodingConvention0.isConstantKey("goog.abstractMethod");
        com.google.javascript.rhino.Node node12 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean13 = closureCodingConvention0.isPropertyTestFunction(node12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "goog.global" + "'", str7, "goog.global");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test0523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0523");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        boolean boolean4 = closureCodingConvention0.isSuperClassReference("hi!");
        com.google.javascript.rhino.Node node5 = null;
        boolean boolean6 = closureCodingConvention0.isOptionalParameter(node5);
        boolean boolean8 = closureCodingConvention0.isConstantKey("hi!");
        com.google.javascript.rhino.Node node9 = null;
        boolean boolean10 = closureCodingConvention0.isVarArgsParameter(node9);
        java.lang.String str11 = closureCodingConvention0.getDelegateSuperclassName();
        java.lang.String str12 = closureCodingConvention0.getAbstractMethodName();
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection13 = closureCodingConvention0.getAssertionFunctions();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "goog.abstractMethod" + "'", str12, "goog.abstractMethod");
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection13);
    }

    @Test
    public void test0524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0524");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        boolean boolean4 = closureCodingConvention0.isSuperClassReference("hi!");
        com.google.javascript.rhino.Node node5 = null;
        boolean boolean6 = closureCodingConvention0.isOptionalParameter(node5);
        boolean boolean8 = closureCodingConvention0.isConstantKey("hi!");
        com.google.javascript.rhino.Node node9 = null;
        boolean boolean10 = closureCodingConvention0.isVarArgsParameter(node9);
        boolean boolean12 = closureCodingConvention0.isExported("");
        com.google.javascript.rhino.Node node13 = null;
        boolean boolean14 = closureCodingConvention0.isVarArgsParameter(node13);
        java.lang.String str15 = closureCodingConvention0.getExportSymbolFunction();
        java.lang.String str16 = closureCodingConvention0.getAbstractMethodName();
        com.google.javascript.rhino.Node node17 = null;
        java.util.Map<java.lang.String, java.lang.String> strMap18 = null;
        closureCodingConvention0.checkForCallingConventionDefiningCalls(node17, strMap18);
        boolean boolean21 = closureCodingConvention0.isExported("goog.abstractMethod");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "goog.exportSymbol" + "'", str15, "goog.exportSymbol");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "goog.abstractMethod" + "'", str16, "goog.abstractMethod");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test0525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0525");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        boolean boolean4 = closureCodingConvention0.isConstant("hi!");
        java.lang.String str5 = closureCodingConvention0.getExportPropertyFunction();
        com.google.javascript.rhino.Node node6 = null;
        boolean boolean7 = closureCodingConvention0.isOptionalParameter(node6);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "goog.exportProperty" + "'", str5, "goog.exportProperty");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test0526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0526");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        boolean boolean4 = closureCodingConvention0.isSuperClassReference("hi!");
        com.google.javascript.rhino.Node node5 = null;
        boolean boolean6 = closureCodingConvention0.isOptionalParameter(node5);
        boolean boolean8 = closureCodingConvention0.isConstantKey("hi!");
        com.google.javascript.rhino.Node node9 = null;
        boolean boolean10 = closureCodingConvention0.isVarArgsParameter(node9);
        java.lang.String str11 = closureCodingConvention0.getDelegateSuperclassName();
        java.lang.String str12 = closureCodingConvention0.getAbstractMethodName();
        boolean boolean14 = closureCodingConvention0.isConstantKey("goog.global");
        com.google.javascript.rhino.jstype.FunctionType functionType15 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType16 = null;
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType17 = null;
        closureCodingConvention0.applySubclassRelationship(functionType15, functionType16, subclassType17);
        boolean boolean20 = closureCodingConvention0.isExported("goog.global");
        com.google.javascript.jscomp.NodeTraversal nodeTraversal21 = null;
        com.google.javascript.rhino.Node node22 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.jscomp.CodingConvention.ObjectLiteralCast objectLiteralCast23 = closureCodingConvention0.getObjectLiteralCast(nodeTraversal21, node22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "goog.abstractMethod" + "'", str12, "goog.abstractMethod");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test0527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0527");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        boolean boolean4 = closureCodingConvention0.isSuperClassReference("hi!");
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = null;
        com.google.javascript.jscomp.Scope scope6 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention7 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node8 = null;
        boolean boolean9 = closureCodingConvention7.isOptionalParameter(node8);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry10 = null;
        com.google.javascript.jscomp.Scope scope11 = null;
        com.google.javascript.rhino.jstype.ObjectType[] objectTypeArray12 = new com.google.javascript.rhino.jstype.ObjectType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType> objectTypeList13 = new java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList13, objectTypeArray12);
        java.util.Map<java.lang.String, java.lang.String> strMap15 = null;
        closureCodingConvention7.defineDelegateProxyPrototypeProperties(jSTypeRegistry10, scope11, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList13, strMap15);
        java.util.Map<java.lang.String, java.lang.String> strMap17 = null;
        closureCodingConvention0.defineDelegateProxyPrototypeProperties(jSTypeRegistry5, scope6, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList13, strMap17);
        java.lang.String str19 = closureCodingConvention0.getAbstractMethodName();
        boolean boolean21 = closureCodingConvention0.isSuperClassReference("goog.abstractMethod");
        com.google.javascript.rhino.Node node22 = null;
        boolean boolean23 = closureCodingConvention0.isOptionalParameter(node22);
        com.google.javascript.rhino.Node node24 = null;
        com.google.javascript.rhino.Node node25 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str26 = closureCodingConvention0.extractClassNameIfProvide(node24, node25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(objectTypeArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "goog.abstractMethod" + "'", str19, "goog.abstractMethod");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test0528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0528");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        boolean boolean2 = closureCodingConvention0.isExported("goog.global");
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection3 = closureCodingConvention0.getAssertionFunctions();
        java.lang.String str4 = closureCodingConvention0.getGlobalObject();
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = null;
        com.google.javascript.jscomp.Scope scope6 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention7 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node8 = null;
        boolean boolean9 = closureCodingConvention7.isOptionalParameter(node8);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry10 = null;
        com.google.javascript.jscomp.Scope scope11 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention12 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node13 = null;
        boolean boolean14 = closureCodingConvention12.isOptionalParameter(node13);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry15 = null;
        com.google.javascript.jscomp.Scope scope16 = null;
        com.google.javascript.rhino.jstype.ObjectType[] objectTypeArray17 = new com.google.javascript.rhino.jstype.ObjectType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType> objectTypeList18 = new java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList18, objectTypeArray17);
        java.util.Map<java.lang.String, java.lang.String> strMap20 = null;
        closureCodingConvention12.defineDelegateProxyPrototypeProperties(jSTypeRegistry15, scope16, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList18, strMap20);
        java.util.Map<java.lang.String, java.lang.String> strMap22 = null;
        closureCodingConvention7.defineDelegateProxyPrototypeProperties(jSTypeRegistry10, scope11, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList18, strMap22);
        java.util.Map<java.lang.String, java.lang.String> strMap24 = null;
        closureCodingConvention0.defineDelegateProxyPrototypeProperties(jSTypeRegistry5, scope6, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList18, strMap24);
        java.lang.String str26 = closureCodingConvention0.getGlobalObject();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "goog.global" + "'", str4, "goog.global");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(objectTypeArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "goog.global" + "'", str26, "goog.global");
    }

    @Test
    public void test0529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0529");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        boolean boolean2 = closureCodingConvention0.isExported("goog.global");
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection3 = closureCodingConvention0.getAssertionFunctions();
        java.lang.String str4 = closureCodingConvention0.getGlobalObject();
        boolean boolean7 = closureCodingConvention0.isExported("goog.exportProperty", false);
        com.google.javascript.rhino.Node node8 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.jscomp.CodingConvention.Bind bind9 = closureCodingConvention0.describeFunctionBind(node8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "goog.global" + "'", str4, "goog.global");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test0530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0530");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        boolean boolean4 = closureCodingConvention0.isSuperClassReference("hi!");
        com.google.javascript.rhino.Node node5 = null;
        boolean boolean6 = closureCodingConvention0.isOptionalParameter(node5);
        java.lang.String str7 = closureCodingConvention0.getExportPropertyFunction();
        java.lang.String str8 = closureCodingConvention0.getGlobalObject();
        boolean boolean10 = closureCodingConvention0.isValidEnumKey("");
        java.lang.String str11 = closureCodingConvention0.getExportSymbolFunction();
        java.lang.String str12 = closureCodingConvention0.getExportPropertyFunction();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "goog.exportProperty" + "'", str7, "goog.exportProperty");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "goog.global" + "'", str8, "goog.global");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "goog.exportSymbol" + "'", str11, "goog.exportSymbol");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "goog.exportProperty" + "'", str12, "goog.exportProperty");
    }

    @Test
    public void test0531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0531");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        java.lang.String str3 = closureCodingConvention0.getAbstractMethodName();
        boolean boolean5 = closureCodingConvention0.isConstant("goog.abstractMethod");
        java.lang.String str6 = closureCodingConvention0.getDelegateSuperclassName();
        com.google.javascript.rhino.jstype.ObjectType objectType7 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType8 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType9 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType10 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType11 = null;
        closureCodingConvention0.applyDelegateRelationship(objectType7, objectType8, objectType9, functionType10, functionType11);
        java.lang.String str13 = closureCodingConvention0.getExportPropertyFunction();
        com.google.javascript.rhino.Node node14 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship15 = closureCodingConvention0.getClassesDefinedByCall(node14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "goog.abstractMethod" + "'", str3, "goog.abstractMethod");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "goog.exportProperty" + "'", str13, "goog.exportProperty");
    }

    @Test
    public void test0532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0532");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        boolean boolean4 = closureCodingConvention0.isSuperClassReference("hi!");
        boolean boolean6 = closureCodingConvention0.isSuperClassReference("goog.global");
        boolean boolean8 = closureCodingConvention0.isConstant("goog.abstractMethod");
        boolean boolean10 = closureCodingConvention0.isValidEnumKey("hi!");
        boolean boolean12 = closureCodingConvention0.isSuperClassReference("goog.global");
        boolean boolean14 = closureCodingConvention0.isPrivate("goog.abstractMethod");
        boolean boolean17 = closureCodingConvention0.isExported("", true);
        com.google.javascript.rhino.Node node18 = null;
        boolean boolean19 = closureCodingConvention0.isOptionalParameter(node18);
        java.lang.String str20 = closureCodingConvention0.getDelegateSuperclassName();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(str20);
    }

    @Test
    public void test0533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0533");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry3 = null;
        com.google.javascript.jscomp.Scope scope4 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention5 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node6 = null;
        boolean boolean7 = closureCodingConvention5.isOptionalParameter(node6);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry8 = null;
        com.google.javascript.jscomp.Scope scope9 = null;
        com.google.javascript.rhino.jstype.ObjectType[] objectTypeArray10 = new com.google.javascript.rhino.jstype.ObjectType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType> objectTypeList11 = new java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList11, objectTypeArray10);
        java.util.Map<java.lang.String, java.lang.String> strMap13 = null;
        closureCodingConvention5.defineDelegateProxyPrototypeProperties(jSTypeRegistry8, scope9, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList11, strMap13);
        java.util.Map<java.lang.String, java.lang.String> strMap15 = null;
        closureCodingConvention0.defineDelegateProxyPrototypeProperties(jSTypeRegistry3, scope4, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList11, strMap15);
        com.google.javascript.rhino.Node node17 = null;
        java.util.Map<java.lang.String, java.lang.String> strMap18 = null;
        closureCodingConvention0.checkForCallingConventionDefiningCalls(node17, strMap18);
        boolean boolean21 = closureCodingConvention0.isConstant("");
        java.lang.String str22 = closureCodingConvention0.getExportSymbolFunction();
        boolean boolean24 = closureCodingConvention0.isConstant("goog.global");
        com.google.javascript.jscomp.NodeTraversal nodeTraversal25 = null;
        com.google.javascript.rhino.Node node26 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.jscomp.CodingConvention.ObjectLiteralCast objectLiteralCast27 = closureCodingConvention0.getObjectLiteralCast(nodeTraversal25, node26);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(objectTypeArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "goog.exportSymbol" + "'", str22, "goog.exportSymbol");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test0534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0534");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        boolean boolean4 = closureCodingConvention0.isSuperClassReference("hi!");
        com.google.javascript.rhino.Node node5 = null;
        boolean boolean6 = closureCodingConvention0.isOptionalParameter(node5);
        boolean boolean8 = closureCodingConvention0.isConstantKey("hi!");
        com.google.javascript.rhino.Node node9 = null;
        boolean boolean10 = closureCodingConvention0.isVarArgsParameter(node9);
        boolean boolean12 = closureCodingConvention0.isExported("");
        java.lang.String str13 = closureCodingConvention0.getDelegateSuperclassName();
        java.lang.String str14 = closureCodingConvention0.getExportPropertyFunction();
        boolean boolean16 = closureCodingConvention0.isSuperClassReference("");
        com.google.javascript.rhino.Node node17 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean18 = closureCodingConvention0.isPropertyTestFunction(node17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "goog.exportProperty" + "'", str14, "goog.exportProperty");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test0535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0535");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        boolean boolean4 = closureCodingConvention0.isSuperClassReference("hi!");
        boolean boolean6 = closureCodingConvention0.isSuperClassReference("goog.global");
        boolean boolean8 = closureCodingConvention0.isConstant("goog.abstractMethod");
        java.lang.String str9 = closureCodingConvention0.getExportPropertyFunction();
        boolean boolean12 = closureCodingConvention0.isExported("goog.global", false);
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection13 = closureCodingConvention0.getAssertionFunctions();
        java.lang.String str14 = closureCodingConvention0.getAbstractMethodName();
        java.lang.String str15 = closureCodingConvention0.getExportPropertyFunction();
        java.lang.String str16 = closureCodingConvention0.getExportPropertyFunction();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "goog.exportProperty" + "'", str9, "goog.exportProperty");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "goog.abstractMethod" + "'", str14, "goog.abstractMethod");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "goog.exportProperty" + "'", str15, "goog.exportProperty");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "goog.exportProperty" + "'", str16, "goog.exportProperty");
    }

    @Test
    public void test0536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0536");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        java.lang.String str3 = closureCodingConvention0.getAbstractMethodName();
        java.lang.String str4 = closureCodingConvention0.getGlobalObject();
        com.google.javascript.rhino.Node node5 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.jscomp.CodingConvention.Bind bind6 = closureCodingConvention0.describeFunctionBind(node5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "goog.abstractMethod" + "'", str3, "goog.abstractMethod");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "goog.global" + "'", str4, "goog.global");
    }

    @Test
    public void test0537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0537");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        boolean boolean2 = closureCodingConvention0.isValidEnumKey("goog.abstractMethod");
        boolean boolean4 = closureCodingConvention0.isValidEnumKey("goog.exportSymbol");
        boolean boolean6 = closureCodingConvention0.isConstant("goog.abstractMethod");
        boolean boolean8 = closureCodingConvention0.isPrivate("hi!");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test0538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0538");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        java.lang.String str3 = closureCodingConvention0.getAbstractMethodName();
        java.lang.String str4 = closureCodingConvention0.getGlobalObject();
        boolean boolean6 = closureCodingConvention0.isExported("goog.global");
        boolean boolean8 = closureCodingConvention0.isConstant("goog.abstractMethod");
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry9 = null;
        com.google.javascript.jscomp.Scope scope10 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention11 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node12 = null;
        boolean boolean13 = closureCodingConvention11.isOptionalParameter(node12);
        java.lang.String str14 = closureCodingConvention11.getAbstractMethodName();
        java.lang.String str15 = closureCodingConvention11.getGlobalObject();
        com.google.javascript.rhino.Node node16 = null;
        com.google.javascript.jscomp.CodingConvention.DelegateRelationship delegateRelationship17 = closureCodingConvention11.getDelegateRelationship(node16);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry18 = null;
        com.google.javascript.jscomp.Scope scope19 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention20 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node21 = null;
        boolean boolean22 = closureCodingConvention20.isOptionalParameter(node21);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry23 = null;
        com.google.javascript.jscomp.Scope scope24 = null;
        com.google.javascript.rhino.jstype.ObjectType[] objectTypeArray25 = new com.google.javascript.rhino.jstype.ObjectType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType> objectTypeList26 = new java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList26, objectTypeArray25);
        java.util.Map<java.lang.String, java.lang.String> strMap28 = null;
        closureCodingConvention20.defineDelegateProxyPrototypeProperties(jSTypeRegistry23, scope24, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList26, strMap28);
        java.util.Map<java.lang.String, java.lang.String> strMap30 = null;
        closureCodingConvention11.defineDelegateProxyPrototypeProperties(jSTypeRegistry18, scope19, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList26, strMap30);
        java.util.Map<java.lang.String, java.lang.String> strMap32 = null;
        closureCodingConvention0.defineDelegateProxyPrototypeProperties(jSTypeRegistry9, scope10, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList26, strMap32);
        java.lang.String str34 = closureCodingConvention0.getExportSymbolFunction();
        java.lang.String str35 = closureCodingConvention0.getExportSymbolFunction();
        java.lang.String str36 = closureCodingConvention0.getExportPropertyFunction();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "goog.abstractMethod" + "'", str3, "goog.abstractMethod");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "goog.global" + "'", str4, "goog.global");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "goog.abstractMethod" + "'", str14, "goog.abstractMethod");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "goog.global" + "'", str15, "goog.global");
        org.junit.Assert.assertNull(delegateRelationship17);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(objectTypeArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "goog.exportSymbol" + "'", str34, "goog.exportSymbol");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "goog.exportSymbol" + "'", str35, "goog.exportSymbol");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "goog.exportProperty" + "'", str36, "goog.exportProperty");
    }

    @Test
    public void test0539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0539");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        java.lang.String str3 = closureCodingConvention0.getAbstractMethodName();
        boolean boolean5 = closureCodingConvention0.isConstant("goog.abstractMethod");
        boolean boolean7 = closureCodingConvention0.isValidEnumKey("hi!");
        com.google.javascript.rhino.Node node8 = null;
        com.google.javascript.jscomp.CodingConvention.DelegateRelationship delegateRelationship9 = closureCodingConvention0.getDelegateRelationship(node8);
        com.google.javascript.rhino.Node node10 = null;
        java.util.Map<java.lang.String, java.lang.String> strMap11 = null;
        closureCodingConvention0.checkForCallingConventionDefiningCalls(node10, strMap11);
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection13 = closureCodingConvention0.getAssertionFunctions();
        java.lang.Class<?> wildcardClass14 = assertionFunctionSpecCollection13.getClass();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "goog.abstractMethod" + "'", str3, "goog.abstractMethod");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNull(delegateRelationship9);
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection13);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test0540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0540");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        java.lang.String str3 = closureCodingConvention0.getAbstractMethodName();
        java.lang.String str4 = closureCodingConvention0.getGlobalObject();
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection5 = closureCodingConvention0.getAssertionFunctions();
        boolean boolean7 = closureCodingConvention0.isConstant("goog.global");
        boolean boolean9 = closureCodingConvention0.isSuperClassReference("goog.exportProperty");
        com.google.javascript.rhino.jstype.FunctionType functionType10 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType11 = null;
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType12 = null;
        closureCodingConvention0.applySubclassRelationship(functionType10, functionType11, subclassType12);
        boolean boolean15 = closureCodingConvention0.isSuperClassReference("goog.global");
        boolean boolean17 = closureCodingConvention0.isConstantKey("");
        com.google.javascript.rhino.Node node18 = null;
        java.util.Map<java.lang.String, java.lang.String> strMap19 = null;
        closureCodingConvention0.checkForCallingConventionDefiningCalls(node18, strMap19);
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection21 = closureCodingConvention0.getAssertionFunctions();
        com.google.javascript.rhino.Node node22 = null;
        com.google.javascript.jscomp.CodingConvention.DelegateRelationship delegateRelationship23 = closureCodingConvention0.getDelegateRelationship(node22);
        boolean boolean26 = closureCodingConvention0.isExported("goog.exportProperty", true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "goog.abstractMethod" + "'", str3, "goog.abstractMethod");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "goog.global" + "'", str4, "goog.global");
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection21);
        org.junit.Assert.assertNull(delegateRelationship23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test0541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0541");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        boolean boolean4 = closureCodingConvention0.isConstant("hi!");
        boolean boolean6 = closureCodingConvention0.isConstant("goog.exportProperty");
        java.lang.Class<?> wildcardClass7 = closureCodingConvention0.getClass();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0542");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        java.lang.String str3 = closureCodingConvention0.getAbstractMethodName();
        java.lang.String str4 = closureCodingConvention0.getGlobalObject();
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection5 = closureCodingConvention0.getAssertionFunctions();
        boolean boolean7 = closureCodingConvention0.isConstant("goog.global");
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection8 = closureCodingConvention0.getAssertionFunctions();
        boolean boolean10 = closureCodingConvention0.isValidEnumKey("goog.exportProperty");
        boolean boolean12 = closureCodingConvention0.isConstant("goog.global");
        java.lang.String str13 = closureCodingConvention0.getAbstractMethodName();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "goog.abstractMethod" + "'", str3, "goog.abstractMethod");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "goog.global" + "'", str4, "goog.global");
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "goog.abstractMethod" + "'", str13, "goog.abstractMethod");
    }

    @Test
    public void test0543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0543");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        boolean boolean2 = closureCodingConvention0.isExported("goog.global");
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection3 = closureCodingConvention0.getAssertionFunctions();
        java.lang.String str4 = closureCodingConvention0.getGlobalObject();
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = null;
        com.google.javascript.jscomp.Scope scope6 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention7 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node8 = null;
        boolean boolean9 = closureCodingConvention7.isOptionalParameter(node8);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry10 = null;
        com.google.javascript.jscomp.Scope scope11 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention12 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node13 = null;
        boolean boolean14 = closureCodingConvention12.isOptionalParameter(node13);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry15 = null;
        com.google.javascript.jscomp.Scope scope16 = null;
        com.google.javascript.rhino.jstype.ObjectType[] objectTypeArray17 = new com.google.javascript.rhino.jstype.ObjectType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType> objectTypeList18 = new java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList18, objectTypeArray17);
        java.util.Map<java.lang.String, java.lang.String> strMap20 = null;
        closureCodingConvention12.defineDelegateProxyPrototypeProperties(jSTypeRegistry15, scope16, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList18, strMap20);
        java.util.Map<java.lang.String, java.lang.String> strMap22 = null;
        closureCodingConvention7.defineDelegateProxyPrototypeProperties(jSTypeRegistry10, scope11, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList18, strMap22);
        java.util.Map<java.lang.String, java.lang.String> strMap24 = null;
        closureCodingConvention0.defineDelegateProxyPrototypeProperties(jSTypeRegistry5, scope6, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList18, strMap24);
        boolean boolean27 = closureCodingConvention0.isPrivate("goog.abstractMethod");
        boolean boolean29 = closureCodingConvention0.isValidEnumKey("");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "goog.global" + "'", str4, "goog.global");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(objectTypeArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test0544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0544");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        boolean boolean4 = closureCodingConvention0.isSuperClassReference("hi!");
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = null;
        com.google.javascript.jscomp.Scope scope6 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention7 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node8 = null;
        boolean boolean9 = closureCodingConvention7.isOptionalParameter(node8);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry10 = null;
        com.google.javascript.jscomp.Scope scope11 = null;
        com.google.javascript.rhino.jstype.ObjectType[] objectTypeArray12 = new com.google.javascript.rhino.jstype.ObjectType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType> objectTypeList13 = new java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList13, objectTypeArray12);
        java.util.Map<java.lang.String, java.lang.String> strMap15 = null;
        closureCodingConvention7.defineDelegateProxyPrototypeProperties(jSTypeRegistry10, scope11, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList13, strMap15);
        java.util.Map<java.lang.String, java.lang.String> strMap17 = null;
        closureCodingConvention0.defineDelegateProxyPrototypeProperties(jSTypeRegistry5, scope6, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList13, strMap17);
        java.lang.String str19 = closureCodingConvention0.getAbstractMethodName();
        com.google.javascript.rhino.Node node20 = null;
        com.google.javascript.jscomp.CodingConvention.DelegateRelationship delegateRelationship21 = closureCodingConvention0.getDelegateRelationship(node20);
        boolean boolean23 = closureCodingConvention0.isConstantKey("goog.abstractMethod");
        boolean boolean26 = closureCodingConvention0.isExported("goog.exportProperty", true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(objectTypeArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "goog.abstractMethod" + "'", str19, "goog.abstractMethod");
        org.junit.Assert.assertNull(delegateRelationship21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test0545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0545");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry3 = null;
        com.google.javascript.jscomp.Scope scope4 = null;
        com.google.javascript.rhino.jstype.ObjectType[] objectTypeArray5 = new com.google.javascript.rhino.jstype.ObjectType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType> objectTypeList6 = new java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList6, objectTypeArray5);
        java.util.Map<java.lang.String, java.lang.String> strMap8 = null;
        closureCodingConvention0.defineDelegateProxyPrototypeProperties(jSTypeRegistry3, scope4, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList6, strMap8);
        com.google.javascript.rhino.Node node10 = null;
        boolean boolean11 = closureCodingConvention0.isVarArgsParameter(node10);
        boolean boolean13 = closureCodingConvention0.isConstantKey("");
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection14 = closureCodingConvention0.getAssertionFunctions();
        com.google.javascript.rhino.Node node15 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.jscomp.CodingConvention.Bind bind16 = closureCodingConvention0.describeFunctionBind(node15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(objectTypeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection14);
    }

    @Test
    public void test0546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0546");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        java.lang.String str3 = closureCodingConvention0.getAbstractMethodName();
        java.lang.String str4 = closureCodingConvention0.getGlobalObject();
        com.google.javascript.rhino.Node node5 = null;
        java.util.Map<java.lang.String, java.lang.String> strMap6 = null;
        closureCodingConvention0.checkForCallingConventionDefiningCalls(node5, strMap6);
        boolean boolean9 = closureCodingConvention0.isExported("goog.exportSymbol");
        com.google.javascript.rhino.jstype.FunctionType functionType10 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType11 = null;
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType12 = null;
        closureCodingConvention0.applySubclassRelationship(functionType10, functionType11, subclassType12);
        boolean boolean15 = closureCodingConvention0.isSuperClassReference("goog.exportProperty");
        boolean boolean17 = closureCodingConvention0.isConstant("hi!");
        java.lang.String str18 = closureCodingConvention0.getExportSymbolFunction();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "goog.abstractMethod" + "'", str3, "goog.abstractMethod");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "goog.global" + "'", str4, "goog.global");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "goog.exportSymbol" + "'", str18, "goog.exportSymbol");
    }

    @Test
    public void test0547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0547");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        java.lang.String str3 = closureCodingConvention0.getAbstractMethodName();
        java.lang.String str4 = closureCodingConvention0.getGlobalObject();
        boolean boolean6 = closureCodingConvention0.isExported("goog.global");
        boolean boolean8 = closureCodingConvention0.isConstant("goog.abstractMethod");
        com.google.javascript.rhino.jstype.FunctionType functionType9 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType10 = null;
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType11 = null;
        closureCodingConvention0.applySubclassRelationship(functionType9, functionType10, subclassType11);
        boolean boolean15 = closureCodingConvention0.isExported("goog.abstractMethod", true);
        java.lang.String str16 = closureCodingConvention0.getGlobalObject();
        java.lang.String str17 = closureCodingConvention0.getExportSymbolFunction();
        java.lang.String str18 = closureCodingConvention0.getGlobalObject();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "goog.abstractMethod" + "'", str3, "goog.abstractMethod");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "goog.global" + "'", str4, "goog.global");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "goog.global" + "'", str16, "goog.global");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "goog.exportSymbol" + "'", str17, "goog.exportSymbol");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "goog.global" + "'", str18, "goog.global");
    }

    @Test
    public void test0548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0548");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        boolean boolean4 = closureCodingConvention0.isSuperClassReference("hi!");
        com.google.javascript.rhino.Node node5 = null;
        boolean boolean6 = closureCodingConvention0.isOptionalParameter(node5);
        java.lang.String str7 = closureCodingConvention0.getExportPropertyFunction();
        java.lang.String str8 = closureCodingConvention0.getGlobalObject();
        boolean boolean10 = closureCodingConvention0.isValidEnumKey("");
        java.lang.String str11 = closureCodingConvention0.getExportSymbolFunction();
        com.google.javascript.rhino.jstype.ObjectType objectType12 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType13 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType14 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType15 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType16 = null;
        closureCodingConvention0.applyDelegateRelationship(objectType12, objectType13, objectType14, functionType15, functionType16);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "goog.exportProperty" + "'", str7, "goog.exportProperty");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "goog.global" + "'", str8, "goog.global");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "goog.exportSymbol" + "'", str11, "goog.exportSymbol");
    }

    @Test
    public void test0549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0549");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        boolean boolean2 = closureCodingConvention0.isConstantKey("goog.abstractMethod");
        java.lang.String str3 = closureCodingConvention0.getGlobalObject();
        com.google.javascript.rhino.Node node4 = null;
        java.util.Map<java.lang.String, java.lang.String> strMap5 = null;
        closureCodingConvention0.checkForCallingConventionDefiningCalls(node4, strMap5);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "goog.global" + "'", str3, "goog.global");
    }

    @Test
    public void test0550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0550");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        boolean boolean2 = closureCodingConvention0.isExported("goog.global");
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection3 = closureCodingConvention0.getAssertionFunctions();
        java.lang.String str4 = closureCodingConvention0.getGlobalObject();
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = null;
        com.google.javascript.jscomp.Scope scope6 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention7 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node8 = null;
        boolean boolean9 = closureCodingConvention7.isOptionalParameter(node8);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry10 = null;
        com.google.javascript.jscomp.Scope scope11 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention12 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node13 = null;
        boolean boolean14 = closureCodingConvention12.isOptionalParameter(node13);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry15 = null;
        com.google.javascript.jscomp.Scope scope16 = null;
        com.google.javascript.rhino.jstype.ObjectType[] objectTypeArray17 = new com.google.javascript.rhino.jstype.ObjectType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType> objectTypeList18 = new java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList18, objectTypeArray17);
        java.util.Map<java.lang.String, java.lang.String> strMap20 = null;
        closureCodingConvention12.defineDelegateProxyPrototypeProperties(jSTypeRegistry15, scope16, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList18, strMap20);
        java.util.Map<java.lang.String, java.lang.String> strMap22 = null;
        closureCodingConvention7.defineDelegateProxyPrototypeProperties(jSTypeRegistry10, scope11, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList18, strMap22);
        java.util.Map<java.lang.String, java.lang.String> strMap24 = null;
        closureCodingConvention0.defineDelegateProxyPrototypeProperties(jSTypeRegistry5, scope6, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList18, strMap24);
        boolean boolean27 = closureCodingConvention0.isPrivate("goog.abstractMethod");
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection28 = closureCodingConvention0.getAssertionFunctions();
        com.google.javascript.jscomp.NodeTraversal nodeTraversal29 = null;
        com.google.javascript.rhino.Node node30 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.jscomp.CodingConvention.ObjectLiteralCast objectLiteralCast31 = closureCodingConvention0.getObjectLiteralCast(nodeTraversal29, node30);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "goog.global" + "'", str4, "goog.global");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(objectTypeArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection28);
    }

    @Test
    public void test0551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0551");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        boolean boolean4 = closureCodingConvention0.isSuperClassReference("hi!");
        com.google.javascript.rhino.Node node5 = null;
        boolean boolean6 = closureCodingConvention0.isOptionalParameter(node5);
        java.lang.String str7 = closureCodingConvention0.getExportPropertyFunction();
        java.lang.String str8 = closureCodingConvention0.getGlobalObject();
        boolean boolean10 = closureCodingConvention0.isValidEnumKey("");
        java.lang.String str11 = closureCodingConvention0.getDelegateSuperclassName();
        com.google.javascript.rhino.jstype.ObjectType objectType12 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType13 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType14 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType15 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType16 = null;
        closureCodingConvention0.applyDelegateRelationship(objectType12, objectType13, objectType14, functionType15, functionType16);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "goog.exportProperty" + "'", str7, "goog.exportProperty");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "goog.global" + "'", str8, "goog.global");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test0552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0552");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        boolean boolean2 = closureCodingConvention0.isExported("goog.global");
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection3 = closureCodingConvention0.getAssertionFunctions();
        boolean boolean5 = closureCodingConvention0.isPrivate("");
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry6 = null;
        com.google.javascript.jscomp.Scope scope7 = null;
        java.util.List<com.google.javascript.rhino.jstype.ObjectType> objectTypeList8 = null;
        java.util.Map<java.lang.String, java.lang.String> strMap9 = null;
        closureCodingConvention0.defineDelegateProxyPrototypeProperties(jSTypeRegistry6, scope7, objectTypeList8, strMap9);
        boolean boolean12 = closureCodingConvention0.isConstant("goog.exportSymbol");
        boolean boolean14 = closureCodingConvention0.isConstantKey("goog.abstractMethod");
        java.lang.String str15 = closureCodingConvention0.getExportPropertyFunction();
        com.google.javascript.jscomp.NodeTraversal nodeTraversal16 = null;
        com.google.javascript.rhino.Node node17 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.jscomp.CodingConvention.ObjectLiteralCast objectLiteralCast18 = closureCodingConvention0.getObjectLiteralCast(nodeTraversal16, node17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "goog.exportProperty" + "'", str15, "goog.exportProperty");
    }

    @Test
    public void test0553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0553");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        boolean boolean4 = closureCodingConvention0.isConstant("hi!");
        boolean boolean6 = closureCodingConvention0.isPrivate("hi!");
        java.lang.String str7 = closureCodingConvention0.getDelegateSuperclassName();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test0554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0554");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        boolean boolean4 = closureCodingConvention0.isSuperClassReference("hi!");
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = null;
        com.google.javascript.jscomp.Scope scope6 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention7 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node8 = null;
        boolean boolean9 = closureCodingConvention7.isOptionalParameter(node8);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry10 = null;
        com.google.javascript.jscomp.Scope scope11 = null;
        com.google.javascript.rhino.jstype.ObjectType[] objectTypeArray12 = new com.google.javascript.rhino.jstype.ObjectType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType> objectTypeList13 = new java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList13, objectTypeArray12);
        java.util.Map<java.lang.String, java.lang.String> strMap15 = null;
        closureCodingConvention7.defineDelegateProxyPrototypeProperties(jSTypeRegistry10, scope11, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList13, strMap15);
        java.util.Map<java.lang.String, java.lang.String> strMap17 = null;
        closureCodingConvention0.defineDelegateProxyPrototypeProperties(jSTypeRegistry5, scope6, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList13, strMap17);
        java.lang.String str19 = closureCodingConvention0.getAbstractMethodName();
        boolean boolean21 = closureCodingConvention0.isSuperClassReference("goog.abstractMethod");
        java.lang.String str22 = closureCodingConvention0.getExportPropertyFunction();
        com.google.javascript.rhino.Node node23 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.String> strList24 = closureCodingConvention0.identifyTypeDeclarationCall(node23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(objectTypeArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "goog.abstractMethod" + "'", str19, "goog.abstractMethod");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "goog.exportProperty" + "'", str22, "goog.exportProperty");
    }

    @Test
    public void test0555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0555");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        boolean boolean4 = closureCodingConvention0.isSuperClassReference("hi!");
        com.google.javascript.rhino.Node node5 = null;
        boolean boolean6 = closureCodingConvention0.isOptionalParameter(node5);
        boolean boolean8 = closureCodingConvention0.isConstantKey("hi!");
        boolean boolean10 = closureCodingConvention0.isExported("goog.abstractMethod");
        boolean boolean12 = closureCodingConvention0.isConstantKey("goog.abstractMethod");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test0556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0556");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        java.lang.String str3 = closureCodingConvention0.getAbstractMethodName();
        java.lang.String str4 = closureCodingConvention0.getGlobalObject();
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection5 = closureCodingConvention0.getAssertionFunctions();
        boolean boolean7 = closureCodingConvention0.isConstant("goog.global");
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection8 = closureCodingConvention0.getAssertionFunctions();
        com.google.javascript.rhino.Node node9 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.String> strList10 = closureCodingConvention0.identifyTypeDeclarationCall(node9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "goog.abstractMethod" + "'", str3, "goog.abstractMethod");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "goog.global" + "'", str4, "goog.global");
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection8);
    }

    @Test
    public void test0557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0557");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        boolean boolean4 = closureCodingConvention0.isSuperClassReference("hi!");
        boolean boolean6 = closureCodingConvention0.isValidEnumKey("");
        com.google.javascript.rhino.jstype.FunctionType functionType7 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType8 = null;
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType9 = null;
        closureCodingConvention0.applySubclassRelationship(functionType7, functionType8, subclassType9);
        com.google.javascript.rhino.Node node11 = null;
        java.util.Map<java.lang.String, java.lang.String> strMap12 = null;
        closureCodingConvention0.checkForCallingConventionDefiningCalls(node11, strMap12);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test0558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0558");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        java.lang.String str3 = closureCodingConvention0.getAbstractMethodName();
        java.lang.String str4 = closureCodingConvention0.getGlobalObject();
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection5 = closureCodingConvention0.getAssertionFunctions();
        boolean boolean7 = closureCodingConvention0.isConstant("goog.global");
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection8 = closureCodingConvention0.getAssertionFunctions();
        boolean boolean10 = closureCodingConvention0.isValidEnumKey("goog.exportProperty");
        java.lang.String str11 = closureCodingConvention0.getAbstractMethodName();
        boolean boolean13 = closureCodingConvention0.isConstantKey("hi!");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "goog.abstractMethod" + "'", str3, "goog.abstractMethod");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "goog.global" + "'", str4, "goog.global");
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "goog.abstractMethod" + "'", str11, "goog.abstractMethod");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test0559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0559");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        boolean boolean4 = closureCodingConvention0.isSuperClassReference("hi!");
        boolean boolean6 = closureCodingConvention0.isSuperClassReference("goog.global");
        boolean boolean8 = closureCodingConvention0.isConstant("goog.abstractMethod");
        boolean boolean10 = closureCodingConvention0.isValidEnumKey("hi!");
        boolean boolean12 = closureCodingConvention0.isSuperClassReference("goog.global");
        boolean boolean14 = closureCodingConvention0.isPrivate("goog.abstractMethod");
        boolean boolean16 = closureCodingConvention0.isConstant("goog.global");
        boolean boolean18 = closureCodingConvention0.isPrivate("hi!");
        com.google.javascript.rhino.Node node19 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.jscomp.CodingConvention.Bind bind20 = closureCodingConvention0.describeFunctionBind(node19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test0560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0560");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        boolean boolean4 = closureCodingConvention0.isSuperClassReference("hi!");
        boolean boolean6 = closureCodingConvention0.isSuperClassReference("goog.global");
        boolean boolean8 = closureCodingConvention0.isConstant("goog.abstractMethod");
        boolean boolean10 = closureCodingConvention0.isValidEnumKey("hi!");
        boolean boolean12 = closureCodingConvention0.isSuperClassReference("goog.global");
        boolean boolean14 = closureCodingConvention0.isPrivate("goog.abstractMethod");
        boolean boolean17 = closureCodingConvention0.isExported("", true);
        boolean boolean19 = closureCodingConvention0.isPrivate("goog.abstractMethod");
        boolean boolean21 = closureCodingConvention0.isPrivate("goog.exportSymbol");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test0561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0561");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection1 = closureCodingConvention0.getAssertionFunctions();
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection2 = closureCodingConvention0.getAssertionFunctions();
        boolean boolean4 = closureCodingConvention0.isValidEnumKey("");
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection5 = closureCodingConvention0.getAssertionFunctions();
        boolean boolean7 = closureCodingConvention0.isPrivate("goog.global");
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection1);
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test0562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0562");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry3 = null;
        com.google.javascript.jscomp.Scope scope4 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention5 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node6 = null;
        boolean boolean7 = closureCodingConvention5.isOptionalParameter(node6);
        boolean boolean9 = closureCodingConvention5.isSuperClassReference("hi!");
        com.google.javascript.rhino.Node node10 = null;
        boolean boolean11 = closureCodingConvention5.isOptionalParameter(node10);
        boolean boolean13 = closureCodingConvention5.isConstantKey("hi!");
        com.google.javascript.rhino.Node node14 = null;
        boolean boolean15 = closureCodingConvention5.isVarArgsParameter(node14);
        boolean boolean17 = closureCodingConvention5.isExported("");
        com.google.javascript.rhino.Node node18 = null;
        boolean boolean19 = closureCodingConvention5.isVarArgsParameter(node18);
        java.lang.String str20 = closureCodingConvention5.getExportSymbolFunction();
        java.lang.String str21 = closureCodingConvention5.getAbstractMethodName();
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry22 = null;
        com.google.javascript.jscomp.Scope scope23 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention24 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node25 = null;
        boolean boolean26 = closureCodingConvention24.isOptionalParameter(node25);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry27 = null;
        com.google.javascript.jscomp.Scope scope28 = null;
        com.google.javascript.rhino.jstype.ObjectType[] objectTypeArray29 = new com.google.javascript.rhino.jstype.ObjectType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType> objectTypeList30 = new java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList30, objectTypeArray29);
        java.util.Map<java.lang.String, java.lang.String> strMap32 = null;
        closureCodingConvention24.defineDelegateProxyPrototypeProperties(jSTypeRegistry27, scope28, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList30, strMap32);
        java.util.Map<java.lang.String, java.lang.String> strMap34 = null;
        closureCodingConvention5.defineDelegateProxyPrototypeProperties(jSTypeRegistry22, scope23, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList30, strMap34);
        java.util.Map<java.lang.String, java.lang.String> strMap36 = null;
        closureCodingConvention0.defineDelegateProxyPrototypeProperties(jSTypeRegistry3, scope4, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList30, strMap36);
        boolean boolean39 = closureCodingConvention0.isSuperClassReference("goog.exportProperty");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "goog.exportSymbol" + "'", str20, "goog.exportSymbol");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "goog.abstractMethod" + "'", str21, "goog.abstractMethod");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(objectTypeArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test0563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0563");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        boolean boolean2 = closureCodingConvention0.isValidEnumKey("goog.abstractMethod");
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection3 = closureCodingConvention0.getAssertionFunctions();
        boolean boolean5 = closureCodingConvention0.isConstantKey("goog.exportProperty");
        boolean boolean7 = closureCodingConvention0.isConstantKey("");
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry8 = null;
        com.google.javascript.jscomp.Scope scope9 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention10 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node11 = null;
        boolean boolean12 = closureCodingConvention10.isOptionalParameter(node11);
        boolean boolean14 = closureCodingConvention10.isSuperClassReference("hi!");
        boolean boolean16 = closureCodingConvention10.isSuperClassReference("goog.global");
        boolean boolean18 = closureCodingConvention10.isConstant("goog.abstractMethod");
        boolean boolean20 = closureCodingConvention10.isValidEnumKey("hi!");
        boolean boolean22 = closureCodingConvention10.isSuperClassReference("goog.global");
        boolean boolean24 = closureCodingConvention10.isPrivate("goog.abstractMethod");
        boolean boolean26 = closureCodingConvention10.isValidEnumKey("");
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry27 = null;
        com.google.javascript.jscomp.Scope scope28 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention29 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node30 = null;
        boolean boolean31 = closureCodingConvention29.isOptionalParameter(node30);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry32 = null;
        com.google.javascript.jscomp.Scope scope33 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention34 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node35 = null;
        boolean boolean36 = closureCodingConvention34.isOptionalParameter(node35);
        boolean boolean38 = closureCodingConvention34.isSuperClassReference("hi!");
        com.google.javascript.rhino.Node node39 = null;
        boolean boolean40 = closureCodingConvention34.isOptionalParameter(node39);
        boolean boolean42 = closureCodingConvention34.isConstantKey("hi!");
        com.google.javascript.rhino.Node node43 = null;
        boolean boolean44 = closureCodingConvention34.isVarArgsParameter(node43);
        boolean boolean46 = closureCodingConvention34.isExported("");
        com.google.javascript.rhino.Node node47 = null;
        boolean boolean48 = closureCodingConvention34.isVarArgsParameter(node47);
        java.lang.String str49 = closureCodingConvention34.getExportSymbolFunction();
        java.lang.String str50 = closureCodingConvention34.getAbstractMethodName();
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry51 = null;
        com.google.javascript.jscomp.Scope scope52 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention53 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node54 = null;
        boolean boolean55 = closureCodingConvention53.isOptionalParameter(node54);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry56 = null;
        com.google.javascript.jscomp.Scope scope57 = null;
        com.google.javascript.rhino.jstype.ObjectType[] objectTypeArray58 = new com.google.javascript.rhino.jstype.ObjectType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType> objectTypeList59 = new java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList59, objectTypeArray58);
        java.util.Map<java.lang.String, java.lang.String> strMap61 = null;
        closureCodingConvention53.defineDelegateProxyPrototypeProperties(jSTypeRegistry56, scope57, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList59, strMap61);
        java.util.Map<java.lang.String, java.lang.String> strMap63 = null;
        closureCodingConvention34.defineDelegateProxyPrototypeProperties(jSTypeRegistry51, scope52, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList59, strMap63);
        java.util.Map<java.lang.String, java.lang.String> strMap65 = null;
        closureCodingConvention29.defineDelegateProxyPrototypeProperties(jSTypeRegistry32, scope33, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList59, strMap65);
        java.util.Map<java.lang.String, java.lang.String> strMap67 = null;
        closureCodingConvention10.defineDelegateProxyPrototypeProperties(jSTypeRegistry27, scope28, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList59, strMap67);
        java.util.Map<java.lang.String, java.lang.String> strMap69 = null;
        closureCodingConvention0.defineDelegateProxyPrototypeProperties(jSTypeRegistry8, scope9, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList59, strMap69);
        com.google.javascript.jscomp.NodeTraversal nodeTraversal71 = null;
        com.google.javascript.rhino.Node node72 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.jscomp.CodingConvention.ObjectLiteralCast objectLiteralCast73 = closureCodingConvention0.getObjectLiteralCast(nodeTraversal71, node72);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "goog.exportSymbol" + "'", str49, "goog.exportSymbol");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "goog.abstractMethod" + "'", str50, "goog.abstractMethod");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(objectTypeArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test0564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0564");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        boolean boolean4 = closureCodingConvention0.isSuperClassReference("hi!");
        com.google.javascript.rhino.Node node5 = null;
        boolean boolean6 = closureCodingConvention0.isOptionalParameter(node5);
        boolean boolean8 = closureCodingConvention0.isConstantKey("hi!");
        com.google.javascript.rhino.Node node9 = null;
        boolean boolean10 = closureCodingConvention0.isVarArgsParameter(node9);
        java.lang.String str11 = closureCodingConvention0.getDelegateSuperclassName();
        java.lang.String str12 = closureCodingConvention0.getAbstractMethodName();
        boolean boolean14 = closureCodingConvention0.isConstantKey("goog.global");
        com.google.javascript.rhino.jstype.FunctionType functionType15 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType16 = null;
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType17 = null;
        closureCodingConvention0.applySubclassRelationship(functionType15, functionType16, subclassType17);
        boolean boolean20 = closureCodingConvention0.isExported("goog.abstractMethod");
        boolean boolean23 = closureCodingConvention0.isExported("goog.exportProperty", true);
        com.google.javascript.rhino.Node node24 = null;
        com.google.javascript.rhino.Node node25 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str26 = closureCodingConvention0.extractClassNameIfRequire(node24, node25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "goog.abstractMethod" + "'", str12, "goog.abstractMethod");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test0565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0565");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry3 = null;
        com.google.javascript.jscomp.Scope scope4 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention5 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node6 = null;
        boolean boolean7 = closureCodingConvention5.isOptionalParameter(node6);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry8 = null;
        com.google.javascript.jscomp.Scope scope9 = null;
        com.google.javascript.rhino.jstype.ObjectType[] objectTypeArray10 = new com.google.javascript.rhino.jstype.ObjectType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType> objectTypeList11 = new java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList11, objectTypeArray10);
        java.util.Map<java.lang.String, java.lang.String> strMap13 = null;
        closureCodingConvention5.defineDelegateProxyPrototypeProperties(jSTypeRegistry8, scope9, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList11, strMap13);
        java.util.Map<java.lang.String, java.lang.String> strMap15 = null;
        closureCodingConvention0.defineDelegateProxyPrototypeProperties(jSTypeRegistry3, scope4, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList11, strMap15);
        com.google.javascript.rhino.Node node17 = null;
        com.google.javascript.jscomp.CodingConvention.DelegateRelationship delegateRelationship18 = closureCodingConvention0.getDelegateRelationship(node17);
        boolean boolean21 = closureCodingConvention0.isExported("goog.exportProperty", false);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry22 = null;
        com.google.javascript.jscomp.Scope scope23 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention24 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node25 = null;
        boolean boolean26 = closureCodingConvention24.isOptionalParameter(node25);
        java.lang.String str27 = closureCodingConvention24.getAbstractMethodName();
        boolean boolean29 = closureCodingConvention24.isConstant("goog.abstractMethod");
        boolean boolean31 = closureCodingConvention24.isValidEnumKey("hi!");
        com.google.javascript.rhino.Node node32 = null;
        com.google.javascript.jscomp.CodingConvention.DelegateRelationship delegateRelationship33 = closureCodingConvention24.getDelegateRelationship(node32);
        com.google.javascript.rhino.Node node34 = null;
        java.util.Map<java.lang.String, java.lang.String> strMap35 = null;
        closureCodingConvention24.checkForCallingConventionDefiningCalls(node34, strMap35);
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection37 = closureCodingConvention24.getAssertionFunctions();
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry38 = null;
        com.google.javascript.jscomp.Scope scope39 = null;
        com.google.javascript.rhino.jstype.ObjectType[] objectTypeArray40 = new com.google.javascript.rhino.jstype.ObjectType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType> objectTypeList41 = new java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList41, objectTypeArray40);
        java.util.Map<java.lang.String, java.lang.String> strMap43 = null;
        closureCodingConvention24.defineDelegateProxyPrototypeProperties(jSTypeRegistry38, scope39, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList41, strMap43);
        java.util.Map<java.lang.String, java.lang.String> strMap45 = null;
        closureCodingConvention0.defineDelegateProxyPrototypeProperties(jSTypeRegistry22, scope23, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList41, strMap45);
        com.google.javascript.rhino.Node node47 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str48 = closureCodingConvention0.getSingletonGetterClassName(node47);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(objectTypeArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(delegateRelationship18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "goog.abstractMethod" + "'", str27, "goog.abstractMethod");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNull(delegateRelationship33);
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection37);
        org.junit.Assert.assertNotNull(objectTypeArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test0566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0566");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        java.lang.String str3 = closureCodingConvention0.getAbstractMethodName();
        java.lang.String str4 = closureCodingConvention0.getGlobalObject();
        boolean boolean6 = closureCodingConvention0.isSuperClassReference("");
        java.lang.String str7 = closureCodingConvention0.getGlobalObject();
        com.google.javascript.rhino.jstype.FunctionType functionType8 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType9 = null;
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType10 = null;
        closureCodingConvention0.applySubclassRelationship(functionType8, functionType9, subclassType10);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "goog.abstractMethod" + "'", str3, "goog.abstractMethod");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "goog.global" + "'", str4, "goog.global");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "goog.global" + "'", str7, "goog.global");
    }

    @Test
    public void test0567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0567");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        boolean boolean4 = closureCodingConvention0.isSuperClassReference("hi!");
        boolean boolean6 = closureCodingConvention0.isSuperClassReference("goog.global");
        boolean boolean8 = closureCodingConvention0.isConstant("goog.abstractMethod");
        java.lang.String str9 = closureCodingConvention0.getExportPropertyFunction();
        boolean boolean12 = closureCodingConvention0.isExported("goog.global", false);
        com.google.javascript.rhino.Node node13 = null;
        boolean boolean14 = closureCodingConvention0.isOptionalParameter(node13);
        java.lang.String str15 = closureCodingConvention0.getDelegateSuperclassName();
        com.google.javascript.rhino.Node node16 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.jscomp.CodingConvention.Bind bind17 = closureCodingConvention0.describeFunctionBind(node16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "goog.exportProperty" + "'", str9, "goog.exportProperty");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(str15);
    }

    @Test
    public void test0568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0568");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        boolean boolean4 = closureCodingConvention0.isSuperClassReference("hi!");
        com.google.javascript.rhino.Node node5 = null;
        boolean boolean6 = closureCodingConvention0.isOptionalParameter(node5);
        java.lang.String str7 = closureCodingConvention0.getExportPropertyFunction();
        java.lang.String str8 = closureCodingConvention0.getGlobalObject();
        boolean boolean10 = closureCodingConvention0.isValidEnumKey("");
        boolean boolean13 = closureCodingConvention0.isExported("goog.exportProperty", true);
        boolean boolean15 = closureCodingConvention0.isSuperClassReference("");
        boolean boolean17 = closureCodingConvention0.isValidEnumKey("goog.abstractMethod");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "goog.exportProperty" + "'", str7, "goog.exportProperty");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "goog.global" + "'", str8, "goog.global");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
    }

    @Test
    public void test0569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0569");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection1 = closureCodingConvention0.getAssertionFunctions();
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection2 = closureCodingConvention0.getAssertionFunctions();
        java.lang.String str3 = closureCodingConvention0.getGlobalObject();
        java.lang.String str4 = closureCodingConvention0.getExportPropertyFunction();
        com.google.javascript.rhino.Node node5 = null;
        com.google.javascript.rhino.Node node6 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str7 = closureCodingConvention0.extractClassNameIfProvide(node5, node6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection1);
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "goog.global" + "'", str3, "goog.global");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "goog.exportProperty" + "'", str4, "goog.exportProperty");
    }

    @Test
    public void test0570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0570");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        boolean boolean2 = closureCodingConvention0.isValidEnumKey("goog.abstractMethod");
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection3 = closureCodingConvention0.getAssertionFunctions();
        boolean boolean5 = closureCodingConvention0.isConstantKey("");
        java.lang.String str6 = closureCodingConvention0.getExportSymbolFunction();
        java.lang.String str7 = closureCodingConvention0.getAbstractMethodName();
        com.google.javascript.rhino.Node node8 = null;
        com.google.javascript.jscomp.CodingConvention.DelegateRelationship delegateRelationship9 = closureCodingConvention0.getDelegateRelationship(node8);
        com.google.javascript.rhino.Node node10 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str11 = closureCodingConvention0.getSingletonGetterClassName(node10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "goog.exportSymbol" + "'", str6, "goog.exportSymbol");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "goog.abstractMethod" + "'", str7, "goog.abstractMethod");
        org.junit.Assert.assertNull(delegateRelationship9);
    }

    @Test
    public void test0571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0571");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        boolean boolean2 = closureCodingConvention0.isExported("goog.global");
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection3 = closureCodingConvention0.getAssertionFunctions();
        java.lang.String str4 = closureCodingConvention0.getGlobalObject();
        boolean boolean7 = closureCodingConvention0.isExported("goog.exportProperty", false);
        java.lang.String str8 = closureCodingConvention0.getExportSymbolFunction();
        java.lang.String str9 = closureCodingConvention0.getExportPropertyFunction();
        com.google.javascript.jscomp.NodeTraversal nodeTraversal10 = null;
        com.google.javascript.rhino.Node node11 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.jscomp.CodingConvention.ObjectLiteralCast objectLiteralCast12 = closureCodingConvention0.getObjectLiteralCast(nodeTraversal10, node11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "goog.global" + "'", str4, "goog.global");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "goog.exportSymbol" + "'", str8, "goog.exportSymbol");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "goog.exportProperty" + "'", str9, "goog.exportProperty");
    }

    @Test
    public void test0572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0572");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        boolean boolean4 = closureCodingConvention0.isSuperClassReference("hi!");
        com.google.javascript.rhino.Node node5 = null;
        boolean boolean6 = closureCodingConvention0.isOptionalParameter(node5);
        boolean boolean8 = closureCodingConvention0.isConstantKey("hi!");
        com.google.javascript.rhino.Node node9 = null;
        boolean boolean10 = closureCodingConvention0.isVarArgsParameter(node9);
        boolean boolean12 = closureCodingConvention0.isExported("");
        com.google.javascript.rhino.Node node13 = null;
        boolean boolean14 = closureCodingConvention0.isVarArgsParameter(node13);
        java.lang.String str15 = closureCodingConvention0.getExportSymbolFunction();
        java.lang.String str16 = closureCodingConvention0.getAbstractMethodName();
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry17 = null;
        com.google.javascript.jscomp.Scope scope18 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention19 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node20 = null;
        boolean boolean21 = closureCodingConvention19.isOptionalParameter(node20);
        java.lang.String str22 = closureCodingConvention19.getAbstractMethodName();
        java.lang.String str23 = closureCodingConvention19.getGlobalObject();
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection24 = closureCodingConvention19.getAssertionFunctions();
        boolean boolean26 = closureCodingConvention19.isConstant("goog.global");
        com.google.javascript.rhino.Node node27 = null;
        com.google.javascript.jscomp.CodingConvention.DelegateRelationship delegateRelationship28 = closureCodingConvention19.getDelegateRelationship(node27);
        com.google.javascript.rhino.jstype.ObjectType objectType29 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType30 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType31 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType32 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType33 = null;
        closureCodingConvention19.applyDelegateRelationship(objectType29, objectType30, objectType31, functionType32, functionType33);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry35 = null;
        com.google.javascript.jscomp.Scope scope36 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention37 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node38 = null;
        boolean boolean39 = closureCodingConvention37.isOptionalParameter(node38);
        boolean boolean41 = closureCodingConvention37.isSuperClassReference("hi!");
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry42 = null;
        com.google.javascript.jscomp.Scope scope43 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention44 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node45 = null;
        boolean boolean46 = closureCodingConvention44.isOptionalParameter(node45);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry47 = null;
        com.google.javascript.jscomp.Scope scope48 = null;
        com.google.javascript.rhino.jstype.ObjectType[] objectTypeArray49 = new com.google.javascript.rhino.jstype.ObjectType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType> objectTypeList50 = new java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList50, objectTypeArray49);
        java.util.Map<java.lang.String, java.lang.String> strMap52 = null;
        closureCodingConvention44.defineDelegateProxyPrototypeProperties(jSTypeRegistry47, scope48, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList50, strMap52);
        java.util.Map<java.lang.String, java.lang.String> strMap54 = null;
        closureCodingConvention37.defineDelegateProxyPrototypeProperties(jSTypeRegistry42, scope43, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList50, strMap54);
        java.util.Map<java.lang.String, java.lang.String> strMap56 = null;
        closureCodingConvention19.defineDelegateProxyPrototypeProperties(jSTypeRegistry35, scope36, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList50, strMap56);
        java.util.Map<java.lang.String, java.lang.String> strMap58 = null;
        closureCodingConvention0.defineDelegateProxyPrototypeProperties(jSTypeRegistry17, scope18, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList50, strMap58);
        java.lang.String str60 = closureCodingConvention0.getExportPropertyFunction();
        boolean boolean62 = closureCodingConvention0.isConstant("hi!");
        com.google.javascript.rhino.Node node63 = null;
        boolean boolean64 = closureCodingConvention0.isOptionalParameter(node63);
        boolean boolean66 = closureCodingConvention0.isConstant("");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "goog.exportSymbol" + "'", str15, "goog.exportSymbol");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "goog.abstractMethod" + "'", str16, "goog.abstractMethod");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "goog.abstractMethod" + "'", str22, "goog.abstractMethod");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "goog.global" + "'", str23, "goog.global");
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(delegateRelationship28);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(objectTypeArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "goog.exportProperty" + "'", str60, "goog.exportProperty");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
    }

    @Test
    public void test0573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0573");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry3 = null;
        com.google.javascript.jscomp.Scope scope4 = null;
        com.google.javascript.rhino.jstype.ObjectType[] objectTypeArray5 = new com.google.javascript.rhino.jstype.ObjectType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType> objectTypeList6 = new java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList6, objectTypeArray5);
        java.util.Map<java.lang.String, java.lang.String> strMap8 = null;
        closureCodingConvention0.defineDelegateProxyPrototypeProperties(jSTypeRegistry3, scope4, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList6, strMap8);
        com.google.javascript.rhino.Node node10 = null;
        boolean boolean11 = closureCodingConvention0.isVarArgsParameter(node10);
        boolean boolean13 = closureCodingConvention0.isConstantKey("");
        java.lang.String str14 = closureCodingConvention0.getExportPropertyFunction();
        java.lang.String str15 = closureCodingConvention0.getDelegateSuperclassName();
        boolean boolean17 = closureCodingConvention0.isConstant("goog.abstractMethod");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(objectTypeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "goog.exportProperty" + "'", str14, "goog.exportProperty");
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test0574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0574");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.jstype.ObjectType objectType1 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType2 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType3 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType4 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType5 = null;
        closureCodingConvention0.applyDelegateRelationship(objectType1, objectType2, objectType3, functionType4, functionType5);
        boolean boolean9 = closureCodingConvention0.isExported("goog.exportSymbol", true);
        com.google.javascript.rhino.Node node10 = null;
        boolean boolean11 = closureCodingConvention0.isVarArgsParameter(node10);
        com.google.javascript.rhino.Node node12 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.String> strList13 = closureCodingConvention0.identifyTypeDeclarationCall(node12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test0575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0575");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        boolean boolean2 = closureCodingConvention0.isExported("goog.global");
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection3 = closureCodingConvention0.getAssertionFunctions();
        java.lang.String str4 = closureCodingConvention0.getGlobalObject();
        boolean boolean7 = closureCodingConvention0.isExported("goog.abstractMethod", true);
        com.google.javascript.rhino.jstype.FunctionType functionType8 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType9 = null;
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType10 = null;
        closureCodingConvention0.applySubclassRelationship(functionType8, functionType9, subclassType10);
        com.google.javascript.rhino.Node node12 = null;
        com.google.javascript.rhino.Node node13 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str14 = closureCodingConvention0.extractClassNameIfProvide(node12, node13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "goog.global" + "'", str4, "goog.global");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test0576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0576");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        java.lang.String str3 = closureCodingConvention0.getAbstractMethodName();
        java.lang.String str4 = closureCodingConvention0.getGlobalObject();
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection5 = closureCodingConvention0.getAssertionFunctions();
        boolean boolean7 = closureCodingConvention0.isExported("goog.abstractMethod");
        com.google.javascript.rhino.jstype.FunctionType functionType8 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType9 = null;
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType10 = null;
        closureCodingConvention0.applySubclassRelationship(functionType8, functionType9, subclassType10);
        com.google.javascript.rhino.Node node12 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean13 = closureCodingConvention0.isPropertyTestFunction(node12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "goog.abstractMethod" + "'", str3, "goog.abstractMethod");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "goog.global" + "'", str4, "goog.global");
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test0577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0577");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        java.lang.String str3 = closureCodingConvention0.getAbstractMethodName();
        java.lang.String str4 = closureCodingConvention0.getGlobalObject();
        com.google.javascript.rhino.Node node5 = null;
        java.util.Map<java.lang.String, java.lang.String> strMap6 = null;
        closureCodingConvention0.checkForCallingConventionDefiningCalls(node5, strMap6);
        com.google.javascript.rhino.Node node8 = null;
        com.google.javascript.jscomp.CodingConvention.DelegateRelationship delegateRelationship9 = closureCodingConvention0.getDelegateRelationship(node8);
        boolean boolean11 = closureCodingConvention0.isExported("hi!");
        com.google.javascript.rhino.Node node12 = null;
        com.google.javascript.jscomp.CodingConvention.DelegateRelationship delegateRelationship13 = closureCodingConvention0.getDelegateRelationship(node12);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "goog.abstractMethod" + "'", str3, "goog.abstractMethod");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "goog.global" + "'", str4, "goog.global");
        org.junit.Assert.assertNull(delegateRelationship9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(delegateRelationship13);
    }

    @Test
    public void test0578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0578");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        boolean boolean2 = closureCodingConvention0.isValidEnumKey("goog.abstractMethod");
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection3 = closureCodingConvention0.getAssertionFunctions();
        boolean boolean6 = closureCodingConvention0.isExported("", true);
        java.lang.String str7 = closureCodingConvention0.getGlobalObject();
        java.lang.String str8 = closureCodingConvention0.getExportSymbolFunction();
        boolean boolean10 = closureCodingConvention0.isExported("hi!");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "goog.global" + "'", str7, "goog.global");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "goog.exportSymbol" + "'", str8, "goog.exportSymbol");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test0579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0579");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry3 = null;
        com.google.javascript.jscomp.Scope scope4 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention5 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node6 = null;
        boolean boolean7 = closureCodingConvention5.isOptionalParameter(node6);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry8 = null;
        com.google.javascript.jscomp.Scope scope9 = null;
        com.google.javascript.rhino.jstype.ObjectType[] objectTypeArray10 = new com.google.javascript.rhino.jstype.ObjectType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType> objectTypeList11 = new java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList11, objectTypeArray10);
        java.util.Map<java.lang.String, java.lang.String> strMap13 = null;
        closureCodingConvention5.defineDelegateProxyPrototypeProperties(jSTypeRegistry8, scope9, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList11, strMap13);
        java.util.Map<java.lang.String, java.lang.String> strMap15 = null;
        closureCodingConvention0.defineDelegateProxyPrototypeProperties(jSTypeRegistry3, scope4, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList11, strMap15);
        java.lang.String str17 = closureCodingConvention0.getDelegateSuperclassName();
        boolean boolean19 = closureCodingConvention0.isConstantKey("goog.abstractMethod");
        java.lang.String str20 = closureCodingConvention0.getDelegateSuperclassName();
        java.lang.String str21 = closureCodingConvention0.getAbstractMethodName();
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry22 = null;
        com.google.javascript.jscomp.Scope scope23 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention24 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node25 = null;
        boolean boolean26 = closureCodingConvention24.isOptionalParameter(node25);
        boolean boolean28 = closureCodingConvention24.isSuperClassReference("hi!");
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry29 = null;
        com.google.javascript.jscomp.Scope scope30 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention31 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node32 = null;
        boolean boolean33 = closureCodingConvention31.isOptionalParameter(node32);
        java.lang.String str34 = closureCodingConvention31.getAbstractMethodName();
        java.lang.String str35 = closureCodingConvention31.getGlobalObject();
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection36 = closureCodingConvention31.getAssertionFunctions();
        boolean boolean38 = closureCodingConvention31.isConstant("goog.global");
        com.google.javascript.rhino.Node node39 = null;
        com.google.javascript.jscomp.CodingConvention.DelegateRelationship delegateRelationship40 = closureCodingConvention31.getDelegateRelationship(node39);
        com.google.javascript.rhino.jstype.ObjectType objectType41 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType42 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType43 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType44 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType45 = null;
        closureCodingConvention31.applyDelegateRelationship(objectType41, objectType42, objectType43, functionType44, functionType45);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry47 = null;
        com.google.javascript.jscomp.Scope scope48 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention49 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node50 = null;
        boolean boolean51 = closureCodingConvention49.isOptionalParameter(node50);
        boolean boolean53 = closureCodingConvention49.isSuperClassReference("hi!");
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry54 = null;
        com.google.javascript.jscomp.Scope scope55 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention56 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node57 = null;
        boolean boolean58 = closureCodingConvention56.isOptionalParameter(node57);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry59 = null;
        com.google.javascript.jscomp.Scope scope60 = null;
        com.google.javascript.rhino.jstype.ObjectType[] objectTypeArray61 = new com.google.javascript.rhino.jstype.ObjectType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType> objectTypeList62 = new java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList62, objectTypeArray61);
        java.util.Map<java.lang.String, java.lang.String> strMap64 = null;
        closureCodingConvention56.defineDelegateProxyPrototypeProperties(jSTypeRegistry59, scope60, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList62, strMap64);
        java.util.Map<java.lang.String, java.lang.String> strMap66 = null;
        closureCodingConvention49.defineDelegateProxyPrototypeProperties(jSTypeRegistry54, scope55, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList62, strMap66);
        java.util.Map<java.lang.String, java.lang.String> strMap68 = null;
        closureCodingConvention31.defineDelegateProxyPrototypeProperties(jSTypeRegistry47, scope48, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList62, strMap68);
        java.util.Map<java.lang.String, java.lang.String> strMap70 = null;
        closureCodingConvention24.defineDelegateProxyPrototypeProperties(jSTypeRegistry29, scope30, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList62, strMap70);
        java.util.Map<java.lang.String, java.lang.String> strMap72 = null;
        closureCodingConvention0.defineDelegateProxyPrototypeProperties(jSTypeRegistry22, scope23, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList62, strMap72);
        com.google.javascript.rhino.Node node74 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean75 = closureCodingConvention0.isPropertyTestFunction(node74);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(objectTypeArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "goog.abstractMethod" + "'", str21, "goog.abstractMethod");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "goog.abstractMethod" + "'", str34, "goog.abstractMethod");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "goog.global" + "'", str35, "goog.global");
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(delegateRelationship40);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(objectTypeArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
    }

    @Test
    public void test0580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0580");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        boolean boolean4 = closureCodingConvention0.isSuperClassReference("hi!");
        com.google.javascript.rhino.Node node5 = null;
        boolean boolean6 = closureCodingConvention0.isOptionalParameter(node5);
        boolean boolean8 = closureCodingConvention0.isExported("hi!");
        java.lang.String str9 = closureCodingConvention0.getExportPropertyFunction();
        com.google.javascript.rhino.jstype.FunctionType functionType10 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType11 = null;
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType12 = null;
        closureCodingConvention0.applySubclassRelationship(functionType10, functionType11, subclassType12);
        com.google.javascript.rhino.jstype.ObjectType objectType14 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType15 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType16 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType17 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType18 = null;
        closureCodingConvention0.applyDelegateRelationship(objectType14, objectType15, objectType16, functionType17, functionType18);
        boolean boolean21 = closureCodingConvention0.isConstant("goog.exportSymbol");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "goog.exportProperty" + "'", str9, "goog.exportProperty");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test0581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0581");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        boolean boolean4 = closureCodingConvention0.isConstant("hi!");
        boolean boolean6 = closureCodingConvention0.isConstant("goog.exportProperty");
        boolean boolean9 = closureCodingConvention0.isExported("goog.global", false);
        com.google.javascript.rhino.Node node10 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.jscomp.CodingConvention.Bind bind11 = closureCodingConvention0.describeFunctionBind(node10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test0582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0582");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        boolean boolean4 = closureCodingConvention0.isSuperClassReference("hi!");
        com.google.javascript.rhino.Node node5 = null;
        boolean boolean6 = closureCodingConvention0.isOptionalParameter(node5);
        boolean boolean8 = closureCodingConvention0.isConstantKey("hi!");
        com.google.javascript.rhino.Node node9 = null;
        boolean boolean10 = closureCodingConvention0.isVarArgsParameter(node9);
        java.lang.String str11 = closureCodingConvention0.getDelegateSuperclassName();
        java.lang.String str12 = closureCodingConvention0.getAbstractMethodName();
        boolean boolean14 = closureCodingConvention0.isConstantKey("goog.global");
        com.google.javascript.rhino.jstype.FunctionType functionType15 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType16 = null;
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType17 = null;
        closureCodingConvention0.applySubclassRelationship(functionType15, functionType16, subclassType17);
        java.lang.String str19 = closureCodingConvention0.getAbstractMethodName();
        java.lang.Class<?> wildcardClass20 = closureCodingConvention0.getClass();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "goog.abstractMethod" + "'", str12, "goog.abstractMethod");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "goog.abstractMethod" + "'", str19, "goog.abstractMethod");
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test0583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0583");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        boolean boolean4 = closureCodingConvention0.isSuperClassReference("hi!");
        com.google.javascript.rhino.Node node5 = null;
        boolean boolean6 = closureCodingConvention0.isOptionalParameter(node5);
        boolean boolean8 = closureCodingConvention0.isSuperClassReference("goog.exportSymbol");
        com.google.javascript.rhino.jstype.FunctionType functionType9 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType10 = null;
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType11 = null;
        closureCodingConvention0.applySubclassRelationship(functionType9, functionType10, subclassType11);
        java.lang.String str13 = closureCodingConvention0.getExportPropertyFunction();
        java.lang.Class<?> wildcardClass14 = closureCodingConvention0.getClass();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "goog.exportProperty" + "'", str13, "goog.exportProperty");
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test0584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0584");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        java.lang.String str3 = closureCodingConvention0.getAbstractMethodName();
        java.lang.String str4 = closureCodingConvention0.getGlobalObject();
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection5 = closureCodingConvention0.getAssertionFunctions();
        boolean boolean7 = closureCodingConvention0.isConstant("goog.global");
        boolean boolean9 = closureCodingConvention0.isSuperClassReference("goog.exportProperty");
        com.google.javascript.rhino.jstype.FunctionType functionType10 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType11 = null;
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType12 = null;
        closureCodingConvention0.applySubclassRelationship(functionType10, functionType11, subclassType12);
        boolean boolean15 = closureCodingConvention0.isSuperClassReference("goog.global");
        boolean boolean18 = closureCodingConvention0.isExported("hi!", false);
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection19 = closureCodingConvention0.getAssertionFunctions();
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry20 = null;
        com.google.javascript.jscomp.Scope scope21 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention22 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node23 = null;
        boolean boolean24 = closureCodingConvention22.isOptionalParameter(node23);
        java.lang.String str25 = closureCodingConvention22.getAbstractMethodName();
        java.lang.String str26 = closureCodingConvention22.getGlobalObject();
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection27 = closureCodingConvention22.getAssertionFunctions();
        boolean boolean29 = closureCodingConvention22.isConstant("goog.global");
        com.google.javascript.rhino.Node node30 = null;
        com.google.javascript.jscomp.CodingConvention.DelegateRelationship delegateRelationship31 = closureCodingConvention22.getDelegateRelationship(node30);
        com.google.javascript.rhino.jstype.ObjectType objectType32 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType33 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType34 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType35 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType36 = null;
        closureCodingConvention22.applyDelegateRelationship(objectType32, objectType33, objectType34, functionType35, functionType36);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry38 = null;
        com.google.javascript.jscomp.Scope scope39 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention40 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node41 = null;
        boolean boolean42 = closureCodingConvention40.isOptionalParameter(node41);
        boolean boolean44 = closureCodingConvention40.isSuperClassReference("hi!");
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry45 = null;
        com.google.javascript.jscomp.Scope scope46 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention47 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node48 = null;
        boolean boolean49 = closureCodingConvention47.isOptionalParameter(node48);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry50 = null;
        com.google.javascript.jscomp.Scope scope51 = null;
        com.google.javascript.rhino.jstype.ObjectType[] objectTypeArray52 = new com.google.javascript.rhino.jstype.ObjectType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType> objectTypeList53 = new java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList53, objectTypeArray52);
        java.util.Map<java.lang.String, java.lang.String> strMap55 = null;
        closureCodingConvention47.defineDelegateProxyPrototypeProperties(jSTypeRegistry50, scope51, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList53, strMap55);
        java.util.Map<java.lang.String, java.lang.String> strMap57 = null;
        closureCodingConvention40.defineDelegateProxyPrototypeProperties(jSTypeRegistry45, scope46, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList53, strMap57);
        java.util.Map<java.lang.String, java.lang.String> strMap59 = null;
        closureCodingConvention22.defineDelegateProxyPrototypeProperties(jSTypeRegistry38, scope39, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList53, strMap59);
        java.util.Map<java.lang.String, java.lang.String> strMap61 = null;
        closureCodingConvention0.defineDelegateProxyPrototypeProperties(jSTypeRegistry20, scope21, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList53, strMap61);
        com.google.javascript.rhino.Node node63 = null;
        com.google.javascript.rhino.Node node64 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str65 = closureCodingConvention0.extractClassNameIfProvide(node63, node64);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "goog.abstractMethod" + "'", str3, "goog.abstractMethod");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "goog.global" + "'", str4, "goog.global");
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection19);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "goog.abstractMethod" + "'", str25, "goog.abstractMethod");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "goog.global" + "'", str26, "goog.global");
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(delegateRelationship31);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(objectTypeArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test0585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0585");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        java.lang.String str3 = closureCodingConvention0.getAbstractMethodName();
        java.lang.String str4 = closureCodingConvention0.getGlobalObject();
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection5 = closureCodingConvention0.getAssertionFunctions();
        boolean boolean7 = closureCodingConvention0.isConstant("goog.global");
        boolean boolean9 = closureCodingConvention0.isSuperClassReference("goog.exportProperty");
        com.google.javascript.rhino.jstype.FunctionType functionType10 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType11 = null;
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType12 = null;
        closureCodingConvention0.applySubclassRelationship(functionType10, functionType11, subclassType12);
        boolean boolean15 = closureCodingConvention0.isSuperClassReference("goog.global");
        boolean boolean17 = closureCodingConvention0.isConstantKey("");
        com.google.javascript.rhino.Node node18 = null;
        boolean boolean19 = closureCodingConvention0.isVarArgsParameter(node18);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "goog.abstractMethod" + "'", str3, "goog.abstractMethod");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "goog.global" + "'", str4, "goog.global");
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test0586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0586");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        boolean boolean4 = closureCodingConvention0.isSuperClassReference("hi!");
        boolean boolean6 = closureCodingConvention0.isSuperClassReference("goog.global");
        boolean boolean8 = closureCodingConvention0.isConstant("goog.abstractMethod");
        java.lang.String str9 = closureCodingConvention0.getExportPropertyFunction();
        boolean boolean12 = closureCodingConvention0.isExported("goog.global", false);
        com.google.javascript.rhino.Node node13 = null;
        boolean boolean14 = closureCodingConvention0.isOptionalParameter(node13);
        java.lang.String str15 = closureCodingConvention0.getDelegateSuperclassName();
        boolean boolean17 = closureCodingConvention0.isExported("");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "goog.exportProperty" + "'", str9, "goog.exportProperty");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test0587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0587");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        boolean boolean2 = closureCodingConvention0.isValidEnumKey("goog.abstractMethod");
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection3 = closureCodingConvention0.getAssertionFunctions();
        boolean boolean5 = closureCodingConvention0.isConstantKey("goog.exportProperty");
        com.google.javascript.rhino.Node node6 = null;
        java.util.Map<java.lang.String, java.lang.String> strMap7 = null;
        closureCodingConvention0.checkForCallingConventionDefiningCalls(node6, strMap7);
        boolean boolean10 = closureCodingConvention0.isConstant("");
        java.lang.String str11 = closureCodingConvention0.getAbstractMethodName();
        java.lang.String str12 = closureCodingConvention0.getExportSymbolFunction();
        com.google.javascript.jscomp.NodeTraversal nodeTraversal13 = null;
        com.google.javascript.rhino.Node node14 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.jscomp.CodingConvention.ObjectLiteralCast objectLiteralCast15 = closureCodingConvention0.getObjectLiteralCast(nodeTraversal13, node14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "goog.abstractMethod" + "'", str11, "goog.abstractMethod");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "goog.exportSymbol" + "'", str12, "goog.exportSymbol");
    }

    @Test
    public void test0588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0588");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        boolean boolean4 = closureCodingConvention0.isSuperClassReference("hi!");
        com.google.javascript.rhino.Node node5 = null;
        boolean boolean6 = closureCodingConvention0.isOptionalParameter(node5);
        boolean boolean8 = closureCodingConvention0.isConstantKey("hi!");
        boolean boolean10 = closureCodingConvention0.isConstantKey("");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test0589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0589");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        boolean boolean4 = closureCodingConvention0.isSuperClassReference("hi!");
        com.google.javascript.rhino.Node node5 = null;
        boolean boolean6 = closureCodingConvention0.isOptionalParameter(node5);
        boolean boolean8 = closureCodingConvention0.isConstantKey("hi!");
        com.google.javascript.rhino.Node node9 = null;
        boolean boolean10 = closureCodingConvention0.isVarArgsParameter(node9);
        com.google.javascript.rhino.Node node11 = null;
        boolean boolean12 = closureCodingConvention0.isVarArgsParameter(node11);
        boolean boolean15 = closureCodingConvention0.isExported("goog.exportSymbol", false);
        java.lang.Class<?> wildcardClass16 = closureCodingConvention0.getClass();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test0590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0590");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        java.lang.String str3 = closureCodingConvention0.getAbstractMethodName();
        com.google.javascript.rhino.jstype.FunctionType functionType4 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType5 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType6 = null;
        // The following exception was thrown during execution in test generation
        try {
            closureCodingConvention0.applySingletonGetter(functionType4, functionType5, objectType6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "goog.abstractMethod" + "'", str3, "goog.abstractMethod");
    }

    @Test
    public void test0591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0591");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        java.lang.String str3 = closureCodingConvention0.getAbstractMethodName();
        java.lang.String str4 = closureCodingConvention0.getGlobalObject();
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection5 = closureCodingConvention0.getAssertionFunctions();
        boolean boolean7 = closureCodingConvention0.isConstant("goog.global");
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection8 = closureCodingConvention0.getAssertionFunctions();
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection9 = closureCodingConvention0.getAssertionFunctions();
        com.google.javascript.rhino.Node node10 = null;
        com.google.javascript.rhino.Node node11 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str12 = closureCodingConvention0.extractClassNameIfProvide(node10, node11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "goog.abstractMethod" + "'", str3, "goog.abstractMethod");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "goog.global" + "'", str4, "goog.global");
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection8);
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection9);
    }

    @Test
    public void test0592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0592");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        java.lang.String str3 = closureCodingConvention0.getAbstractMethodName();
        java.lang.String str4 = closureCodingConvention0.getGlobalObject();
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection5 = closureCodingConvention0.getAssertionFunctions();
        boolean boolean7 = closureCodingConvention0.isConstant("goog.global");
        com.google.javascript.rhino.Node node8 = null;
        com.google.javascript.jscomp.CodingConvention.DelegateRelationship delegateRelationship9 = closureCodingConvention0.getDelegateRelationship(node8);
        com.google.javascript.rhino.jstype.ObjectType objectType10 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType11 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType12 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType13 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType14 = null;
        closureCodingConvention0.applyDelegateRelationship(objectType10, objectType11, objectType12, functionType13, functionType14);
        boolean boolean17 = closureCodingConvention0.isConstantKey("goog.exportProperty");
        com.google.javascript.rhino.jstype.ObjectType objectType18 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType19 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType20 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType21 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType22 = null;
        closureCodingConvention0.applyDelegateRelationship(objectType18, objectType19, objectType20, functionType21, functionType22);
        com.google.javascript.rhino.Node node24 = null;
        boolean boolean25 = closureCodingConvention0.isOptionalParameter(node24);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "goog.abstractMethod" + "'", str3, "goog.abstractMethod");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "goog.global" + "'", str4, "goog.global");
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(delegateRelationship9);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test0593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0593");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        boolean boolean2 = closureCodingConvention0.isValidEnumKey("goog.abstractMethod");
        boolean boolean4 = closureCodingConvention0.isValidEnumKey("goog.abstractMethod");
        com.google.javascript.rhino.Node node5 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str6 = closureCodingConvention0.getSingletonGetterClassName(node5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
    }

    @Test
    public void test0594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0594");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        java.lang.String str3 = closureCodingConvention0.getAbstractMethodName();
        java.lang.String str4 = closureCodingConvention0.getGlobalObject();
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection5 = closureCodingConvention0.getAssertionFunctions();
        boolean boolean7 = closureCodingConvention0.isConstant("goog.global");
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection8 = closureCodingConvention0.getAssertionFunctions();
        boolean boolean10 = closureCodingConvention0.isValidEnumKey("goog.exportProperty");
        boolean boolean12 = closureCodingConvention0.isConstant("goog.global");
        com.google.javascript.rhino.Node node13 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean14 = closureCodingConvention0.isPropertyTestFunction(node13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "goog.abstractMethod" + "'", str3, "goog.abstractMethod");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "goog.global" + "'", str4, "goog.global");
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test0595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0595");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        java.lang.String str3 = closureCodingConvention0.getAbstractMethodName();
        java.lang.String str4 = closureCodingConvention0.getGlobalObject();
        com.google.javascript.rhino.Node node5 = null;
        java.util.Map<java.lang.String, java.lang.String> strMap6 = null;
        closureCodingConvention0.checkForCallingConventionDefiningCalls(node5, strMap6);
        com.google.javascript.rhino.Node node8 = null;
        com.google.javascript.jscomp.CodingConvention.DelegateRelationship delegateRelationship9 = closureCodingConvention0.getDelegateRelationship(node8);
        java.lang.String str10 = closureCodingConvention0.getDelegateSuperclassName();
        com.google.javascript.rhino.Node node11 = null;
        boolean boolean12 = closureCodingConvention0.isVarArgsParameter(node11);
        boolean boolean14 = closureCodingConvention0.isExported("");
        boolean boolean17 = closureCodingConvention0.isExported("goog.global", false);
        boolean boolean19 = closureCodingConvention0.isConstantKey("");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "goog.abstractMethod" + "'", str3, "goog.abstractMethod");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "goog.global" + "'", str4, "goog.global");
        org.junit.Assert.assertNull(delegateRelationship9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test0596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0596");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        boolean boolean4 = closureCodingConvention0.isSuperClassReference("hi!");
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = null;
        com.google.javascript.jscomp.Scope scope6 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention7 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node8 = null;
        boolean boolean9 = closureCodingConvention7.isOptionalParameter(node8);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry10 = null;
        com.google.javascript.jscomp.Scope scope11 = null;
        com.google.javascript.rhino.jstype.ObjectType[] objectTypeArray12 = new com.google.javascript.rhino.jstype.ObjectType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType> objectTypeList13 = new java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList13, objectTypeArray12);
        java.util.Map<java.lang.String, java.lang.String> strMap15 = null;
        closureCodingConvention7.defineDelegateProxyPrototypeProperties(jSTypeRegistry10, scope11, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList13, strMap15);
        java.util.Map<java.lang.String, java.lang.String> strMap17 = null;
        closureCodingConvention0.defineDelegateProxyPrototypeProperties(jSTypeRegistry5, scope6, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList13, strMap17);
        com.google.javascript.rhino.Node node19 = null;
        java.util.Map<java.lang.String, java.lang.String> strMap20 = null;
        closureCodingConvention0.checkForCallingConventionDefiningCalls(node19, strMap20);
        boolean boolean23 = closureCodingConvention0.isSuperClassReference("goog.exportProperty");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(objectTypeArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test0597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0597");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        boolean boolean4 = closureCodingConvention0.isSuperClassReference("hi!");
        com.google.javascript.rhino.Node node5 = null;
        boolean boolean6 = closureCodingConvention0.isOptionalParameter(node5);
        boolean boolean8 = closureCodingConvention0.isExported("hi!");
        java.lang.String str9 = closureCodingConvention0.getExportPropertyFunction();
        boolean boolean11 = closureCodingConvention0.isConstant("goog.global");
        com.google.javascript.rhino.jstype.ObjectType objectType12 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType13 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType14 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType15 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType16 = null;
        closureCodingConvention0.applyDelegateRelationship(objectType12, objectType13, objectType14, functionType15, functionType16);
        boolean boolean19 = closureCodingConvention0.isSuperClassReference("goog.abstractMethod");
        boolean boolean21 = closureCodingConvention0.isConstantKey("");
        boolean boolean23 = closureCodingConvention0.isPrivate("goog.exportSymbol");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "goog.exportProperty" + "'", str9, "goog.exportProperty");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test0598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0598");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        java.lang.String str3 = closureCodingConvention0.getAbstractMethodName();
        java.lang.String str4 = closureCodingConvention0.getGlobalObject();
        com.google.javascript.rhino.Node node5 = null;
        java.util.Map<java.lang.String, java.lang.String> strMap6 = null;
        closureCodingConvention0.checkForCallingConventionDefiningCalls(node5, strMap6);
        boolean boolean9 = closureCodingConvention0.isConstant("");
        java.lang.String str10 = closureCodingConvention0.getDelegateSuperclassName();
        com.google.javascript.rhino.Node node11 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str12 = closureCodingConvention0.getSingletonGetterClassName(node11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "goog.abstractMethod" + "'", str3, "goog.abstractMethod");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "goog.global" + "'", str4, "goog.global");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test0599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0599");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        java.lang.String str3 = closureCodingConvention0.getAbstractMethodName();
        java.lang.String str4 = closureCodingConvention0.getGlobalObject();
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection5 = closureCodingConvention0.getAssertionFunctions();
        boolean boolean7 = closureCodingConvention0.isConstant("goog.global");
        com.google.javascript.rhino.jstype.FunctionType functionType8 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType9 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType10 = null;
        // The following exception was thrown during execution in test generation
        try {
            closureCodingConvention0.applySingletonGetter(functionType8, functionType9, objectType10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "goog.abstractMethod" + "'", str3, "goog.abstractMethod");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "goog.global" + "'", str4, "goog.global");
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test0600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0600");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry3 = null;
        com.google.javascript.jscomp.Scope scope4 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention5 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node6 = null;
        boolean boolean7 = closureCodingConvention5.isOptionalParameter(node6);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry8 = null;
        com.google.javascript.jscomp.Scope scope9 = null;
        com.google.javascript.rhino.jstype.ObjectType[] objectTypeArray10 = new com.google.javascript.rhino.jstype.ObjectType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType> objectTypeList11 = new java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList11, objectTypeArray10);
        java.util.Map<java.lang.String, java.lang.String> strMap13 = null;
        closureCodingConvention5.defineDelegateProxyPrototypeProperties(jSTypeRegistry8, scope9, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList11, strMap13);
        java.util.Map<java.lang.String, java.lang.String> strMap15 = null;
        closureCodingConvention0.defineDelegateProxyPrototypeProperties(jSTypeRegistry3, scope4, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList11, strMap15);
        com.google.javascript.rhino.Node node17 = null;
        java.util.Map<java.lang.String, java.lang.String> strMap18 = null;
        closureCodingConvention0.checkForCallingConventionDefiningCalls(node17, strMap18);
        boolean boolean22 = closureCodingConvention0.isExported("goog.exportSymbol", false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(objectTypeArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test0601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0601");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        java.lang.String str3 = closureCodingConvention0.getAbstractMethodName();
        boolean boolean5 = closureCodingConvention0.isConstant("goog.abstractMethod");
        boolean boolean7 = closureCodingConvention0.isValidEnumKey("hi!");
        com.google.javascript.rhino.Node node8 = null;
        com.google.javascript.jscomp.CodingConvention.DelegateRelationship delegateRelationship9 = closureCodingConvention0.getDelegateRelationship(node8);
        com.google.javascript.rhino.Node node10 = null;
        java.util.Map<java.lang.String, java.lang.String> strMap11 = null;
        closureCodingConvention0.checkForCallingConventionDefiningCalls(node10, strMap11);
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection13 = closureCodingConvention0.getAssertionFunctions();
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry14 = null;
        com.google.javascript.jscomp.Scope scope15 = null;
        com.google.javascript.rhino.jstype.ObjectType[] objectTypeArray16 = new com.google.javascript.rhino.jstype.ObjectType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType> objectTypeList17 = new java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList17, objectTypeArray16);
        java.util.Map<java.lang.String, java.lang.String> strMap19 = null;
        closureCodingConvention0.defineDelegateProxyPrototypeProperties(jSTypeRegistry14, scope15, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList17, strMap19);
        boolean boolean22 = closureCodingConvention0.isExported("");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "goog.abstractMethod" + "'", str3, "goog.abstractMethod");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNull(delegateRelationship9);
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection13);
        org.junit.Assert.assertNotNull(objectTypeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test0602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0602");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        java.lang.String str3 = closureCodingConvention0.getAbstractMethodName();
        java.lang.String str4 = closureCodingConvention0.getGlobalObject();
        boolean boolean6 = closureCodingConvention0.isExported("goog.global");
        boolean boolean8 = closureCodingConvention0.isConstant("goog.abstractMethod");
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry9 = null;
        com.google.javascript.jscomp.Scope scope10 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention11 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node12 = null;
        boolean boolean13 = closureCodingConvention11.isOptionalParameter(node12);
        java.lang.String str14 = closureCodingConvention11.getAbstractMethodName();
        java.lang.String str15 = closureCodingConvention11.getGlobalObject();
        com.google.javascript.rhino.Node node16 = null;
        com.google.javascript.jscomp.CodingConvention.DelegateRelationship delegateRelationship17 = closureCodingConvention11.getDelegateRelationship(node16);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry18 = null;
        com.google.javascript.jscomp.Scope scope19 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention20 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node21 = null;
        boolean boolean22 = closureCodingConvention20.isOptionalParameter(node21);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry23 = null;
        com.google.javascript.jscomp.Scope scope24 = null;
        com.google.javascript.rhino.jstype.ObjectType[] objectTypeArray25 = new com.google.javascript.rhino.jstype.ObjectType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType> objectTypeList26 = new java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList26, objectTypeArray25);
        java.util.Map<java.lang.String, java.lang.String> strMap28 = null;
        closureCodingConvention20.defineDelegateProxyPrototypeProperties(jSTypeRegistry23, scope24, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList26, strMap28);
        java.util.Map<java.lang.String, java.lang.String> strMap30 = null;
        closureCodingConvention11.defineDelegateProxyPrototypeProperties(jSTypeRegistry18, scope19, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList26, strMap30);
        java.util.Map<java.lang.String, java.lang.String> strMap32 = null;
        closureCodingConvention0.defineDelegateProxyPrototypeProperties(jSTypeRegistry9, scope10, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList26, strMap32);
        boolean boolean36 = closureCodingConvention0.isExported("hi!", true);
        java.lang.String str37 = closureCodingConvention0.getGlobalObject();
        com.google.javascript.rhino.Node node38 = null;
        java.util.Map<java.lang.String, java.lang.String> strMap39 = null;
        closureCodingConvention0.checkForCallingConventionDefiningCalls(node38, strMap39);
        boolean boolean42 = closureCodingConvention0.isConstant("goog.exportProperty");
        boolean boolean44 = closureCodingConvention0.isSuperClassReference("goog.abstractMethod");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "goog.abstractMethod" + "'", str3, "goog.abstractMethod");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "goog.global" + "'", str4, "goog.global");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "goog.abstractMethod" + "'", str14, "goog.abstractMethod");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "goog.global" + "'", str15, "goog.global");
        org.junit.Assert.assertNull(delegateRelationship17);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(objectTypeArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "goog.global" + "'", str37, "goog.global");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test0603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0603");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        java.lang.String str3 = closureCodingConvention0.getAbstractMethodName();
        java.lang.String str4 = closureCodingConvention0.getGlobalObject();
        boolean boolean6 = closureCodingConvention0.isExported("goog.global");
        boolean boolean8 = closureCodingConvention0.isConstant("goog.abstractMethod");
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry9 = null;
        com.google.javascript.jscomp.Scope scope10 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention11 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node12 = null;
        boolean boolean13 = closureCodingConvention11.isOptionalParameter(node12);
        java.lang.String str14 = closureCodingConvention11.getAbstractMethodName();
        java.lang.String str15 = closureCodingConvention11.getGlobalObject();
        com.google.javascript.rhino.Node node16 = null;
        com.google.javascript.jscomp.CodingConvention.DelegateRelationship delegateRelationship17 = closureCodingConvention11.getDelegateRelationship(node16);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry18 = null;
        com.google.javascript.jscomp.Scope scope19 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention20 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node21 = null;
        boolean boolean22 = closureCodingConvention20.isOptionalParameter(node21);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry23 = null;
        com.google.javascript.jscomp.Scope scope24 = null;
        com.google.javascript.rhino.jstype.ObjectType[] objectTypeArray25 = new com.google.javascript.rhino.jstype.ObjectType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType> objectTypeList26 = new java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList26, objectTypeArray25);
        java.util.Map<java.lang.String, java.lang.String> strMap28 = null;
        closureCodingConvention20.defineDelegateProxyPrototypeProperties(jSTypeRegistry23, scope24, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList26, strMap28);
        java.util.Map<java.lang.String, java.lang.String> strMap30 = null;
        closureCodingConvention11.defineDelegateProxyPrototypeProperties(jSTypeRegistry18, scope19, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList26, strMap30);
        java.util.Map<java.lang.String, java.lang.String> strMap32 = null;
        closureCodingConvention0.defineDelegateProxyPrototypeProperties(jSTypeRegistry9, scope10, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList26, strMap32);
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection34 = closureCodingConvention0.getAssertionFunctions();
        com.google.javascript.rhino.jstype.FunctionType functionType35 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType36 = null;
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType37 = null;
        closureCodingConvention0.applySubclassRelationship(functionType35, functionType36, subclassType37);
        boolean boolean40 = closureCodingConvention0.isConstant("hi!");
        com.google.javascript.rhino.Node node41 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.jscomp.CodingConvention.Bind bind42 = closureCodingConvention0.describeFunctionBind(node41);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "goog.abstractMethod" + "'", str3, "goog.abstractMethod");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "goog.global" + "'", str4, "goog.global");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "goog.abstractMethod" + "'", str14, "goog.abstractMethod");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "goog.global" + "'", str15, "goog.global");
        org.junit.Assert.assertNull(delegateRelationship17);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(objectTypeArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection34);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test0604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0604");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        boolean boolean4 = closureCodingConvention0.isPrivate("goog.exportSymbol");
        com.google.javascript.rhino.Node node5 = null;
        com.google.javascript.jscomp.CodingConvention.DelegateRelationship delegateRelationship6 = closureCodingConvention0.getDelegateRelationship(node5);
        boolean boolean8 = closureCodingConvention0.isSuperClassReference("goog.global");
        com.google.javascript.rhino.jstype.FunctionType functionType9 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType10 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType11 = null;
        // The following exception was thrown during execution in test generation
        try {
            closureCodingConvention0.applySingletonGetter(functionType9, functionType10, objectType11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(delegateRelationship6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test0605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0605");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection1 = closureCodingConvention0.getAssertionFunctions();
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection2 = closureCodingConvention0.getAssertionFunctions();
        java.lang.String str3 = closureCodingConvention0.getGlobalObject();
        com.google.javascript.rhino.Node node4 = null;
        java.util.Map<java.lang.String, java.lang.String> strMap5 = null;
        closureCodingConvention0.checkForCallingConventionDefiningCalls(node4, strMap5);
        boolean boolean8 = closureCodingConvention0.isExported("goog.exportSymbol");
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection1);
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "goog.global" + "'", str3, "goog.global");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test0606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0606");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        boolean boolean4 = closureCodingConvention0.isSuperClassReference("hi!");
        com.google.javascript.rhino.Node node5 = null;
        boolean boolean6 = closureCodingConvention0.isOptionalParameter(node5);
        boolean boolean8 = closureCodingConvention0.isConstantKey("hi!");
        com.google.javascript.rhino.Node node9 = null;
        boolean boolean10 = closureCodingConvention0.isVarArgsParameter(node9);
        boolean boolean12 = closureCodingConvention0.isExported("");
        com.google.javascript.rhino.jstype.ObjectType objectType13 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType14 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType15 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType16 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType17 = null;
        closureCodingConvention0.applyDelegateRelationship(objectType13, objectType14, objectType15, functionType16, functionType17);
        boolean boolean20 = closureCodingConvention0.isConstantKey("goog.exportSymbol");
        boolean boolean22 = closureCodingConvention0.isExported("hi!");
        java.lang.String str23 = closureCodingConvention0.getExportSymbolFunction();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "goog.exportSymbol" + "'", str23, "goog.exportSymbol");
    }

    @Test
    public void test0607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0607");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        boolean boolean4 = closureCodingConvention0.isSuperClassReference("hi!");
        boolean boolean6 = closureCodingConvention0.isSuperClassReference("goog.global");
        boolean boolean8 = closureCodingConvention0.isValidEnumKey("");
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry9 = null;
        com.google.javascript.jscomp.Scope scope10 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention11 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node12 = null;
        boolean boolean13 = closureCodingConvention11.isOptionalParameter(node12);
        java.lang.String str14 = closureCodingConvention11.getAbstractMethodName();
        java.lang.String str15 = closureCodingConvention11.getGlobalObject();
        com.google.javascript.rhino.Node node16 = null;
        java.util.Map<java.lang.String, java.lang.String> strMap17 = null;
        closureCodingConvention11.checkForCallingConventionDefiningCalls(node16, strMap17);
        com.google.javascript.rhino.Node node19 = null;
        com.google.javascript.jscomp.CodingConvention.DelegateRelationship delegateRelationship20 = closureCodingConvention11.getDelegateRelationship(node19);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry21 = null;
        com.google.javascript.jscomp.Scope scope22 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention23 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node24 = null;
        boolean boolean25 = closureCodingConvention23.isOptionalParameter(node24);
        java.lang.String str26 = closureCodingConvention23.getAbstractMethodName();
        java.lang.String str27 = closureCodingConvention23.getGlobalObject();
        boolean boolean29 = closureCodingConvention23.isExported("goog.global");
        boolean boolean31 = closureCodingConvention23.isConstant("goog.abstractMethod");
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry32 = null;
        com.google.javascript.jscomp.Scope scope33 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention34 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node35 = null;
        boolean boolean36 = closureCodingConvention34.isOptionalParameter(node35);
        java.lang.String str37 = closureCodingConvention34.getAbstractMethodName();
        java.lang.String str38 = closureCodingConvention34.getGlobalObject();
        com.google.javascript.rhino.Node node39 = null;
        com.google.javascript.jscomp.CodingConvention.DelegateRelationship delegateRelationship40 = closureCodingConvention34.getDelegateRelationship(node39);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry41 = null;
        com.google.javascript.jscomp.Scope scope42 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention43 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node44 = null;
        boolean boolean45 = closureCodingConvention43.isOptionalParameter(node44);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry46 = null;
        com.google.javascript.jscomp.Scope scope47 = null;
        com.google.javascript.rhino.jstype.ObjectType[] objectTypeArray48 = new com.google.javascript.rhino.jstype.ObjectType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType> objectTypeList49 = new java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList49, objectTypeArray48);
        java.util.Map<java.lang.String, java.lang.String> strMap51 = null;
        closureCodingConvention43.defineDelegateProxyPrototypeProperties(jSTypeRegistry46, scope47, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList49, strMap51);
        java.util.Map<java.lang.String, java.lang.String> strMap53 = null;
        closureCodingConvention34.defineDelegateProxyPrototypeProperties(jSTypeRegistry41, scope42, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList49, strMap53);
        java.util.Map<java.lang.String, java.lang.String> strMap55 = null;
        closureCodingConvention23.defineDelegateProxyPrototypeProperties(jSTypeRegistry32, scope33, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList49, strMap55);
        java.util.Map<java.lang.String, java.lang.String> strMap57 = null;
        closureCodingConvention11.defineDelegateProxyPrototypeProperties(jSTypeRegistry21, scope22, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList49, strMap57);
        java.util.Map<java.lang.String, java.lang.String> strMap59 = null;
        closureCodingConvention0.defineDelegateProxyPrototypeProperties(jSTypeRegistry9, scope10, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList49, strMap59);
        java.lang.String str61 = closureCodingConvention0.getExportSymbolFunction();
        com.google.javascript.rhino.jstype.FunctionType functionType62 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType63 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType64 = null;
        // The following exception was thrown during execution in test generation
        try {
            closureCodingConvention0.applySingletonGetter(functionType62, functionType63, objectType64);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "goog.abstractMethod" + "'", str14, "goog.abstractMethod");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "goog.global" + "'", str15, "goog.global");
        org.junit.Assert.assertNull(delegateRelationship20);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "goog.abstractMethod" + "'", str26, "goog.abstractMethod");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "goog.global" + "'", str27, "goog.global");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "goog.abstractMethod" + "'", str37, "goog.abstractMethod");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "goog.global" + "'", str38, "goog.global");
        org.junit.Assert.assertNull(delegateRelationship40);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(objectTypeArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "goog.exportSymbol" + "'", str61, "goog.exportSymbol");
    }

    @Test
    public void test0608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0608");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        boolean boolean2 = closureCodingConvention0.isValidEnumKey("goog.abstractMethod");
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection3 = closureCodingConvention0.getAssertionFunctions();
        boolean boolean5 = closureCodingConvention0.isConstantKey("goog.exportProperty");
        com.google.javascript.rhino.Node node6 = null;
        java.util.Map<java.lang.String, java.lang.String> strMap7 = null;
        closureCodingConvention0.checkForCallingConventionDefiningCalls(node6, strMap7);
        boolean boolean10 = closureCodingConvention0.isConstant("");
        boolean boolean12 = closureCodingConvention0.isConstant("goog.abstractMethod");
        java.lang.String str13 = closureCodingConvention0.getExportPropertyFunction();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "goog.exportProperty" + "'", str13, "goog.exportProperty");
    }

    @Test
    public void test0609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0609");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        java.lang.String str3 = closureCodingConvention0.getAbstractMethodName();
        java.lang.String str4 = closureCodingConvention0.getGlobalObject();
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection5 = closureCodingConvention0.getAssertionFunctions();
        boolean boolean7 = closureCodingConvention0.isConstant("goog.global");
        boolean boolean9 = closureCodingConvention0.isSuperClassReference("goog.exportProperty");
        com.google.javascript.rhino.jstype.FunctionType functionType10 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType11 = null;
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType12 = null;
        closureCodingConvention0.applySubclassRelationship(functionType10, functionType11, subclassType12);
        boolean boolean15 = closureCodingConvention0.isSuperClassReference("goog.global");
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection16 = closureCodingConvention0.getAssertionFunctions();
        boolean boolean18 = closureCodingConvention0.isExported("");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "goog.abstractMethod" + "'", str3, "goog.abstractMethod");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "goog.global" + "'", str4, "goog.global");
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test0610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0610");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.jstype.ObjectType objectType1 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType2 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType3 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType4 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType5 = null;
        closureCodingConvention0.applyDelegateRelationship(objectType1, objectType2, objectType3, functionType4, functionType5);
        com.google.javascript.rhino.Node node7 = null;
        boolean boolean8 = closureCodingConvention0.isOptionalParameter(node7);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry9 = null;
        com.google.javascript.jscomp.Scope scope10 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention11 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node12 = null;
        boolean boolean13 = closureCodingConvention11.isOptionalParameter(node12);
        boolean boolean15 = closureCodingConvention11.isSuperClassReference("hi!");
        com.google.javascript.rhino.Node node16 = null;
        boolean boolean17 = closureCodingConvention11.isOptionalParameter(node16);
        boolean boolean19 = closureCodingConvention11.isConstantKey("hi!");
        com.google.javascript.rhino.Node node20 = null;
        boolean boolean21 = closureCodingConvention11.isVarArgsParameter(node20);
        boolean boolean23 = closureCodingConvention11.isExported("");
        java.lang.String str24 = closureCodingConvention11.getDelegateSuperclassName();
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry25 = null;
        com.google.javascript.jscomp.Scope scope26 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention27 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node28 = null;
        boolean boolean29 = closureCodingConvention27.isOptionalParameter(node28);
        java.lang.String str30 = closureCodingConvention27.getAbstractMethodName();
        java.lang.String str31 = closureCodingConvention27.getGlobalObject();
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection32 = closureCodingConvention27.getAssertionFunctions();
        boolean boolean34 = closureCodingConvention27.isConstant("goog.global");
        com.google.javascript.rhino.Node node35 = null;
        com.google.javascript.jscomp.CodingConvention.DelegateRelationship delegateRelationship36 = closureCodingConvention27.getDelegateRelationship(node35);
        com.google.javascript.rhino.jstype.ObjectType objectType37 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType38 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType39 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType40 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType41 = null;
        closureCodingConvention27.applyDelegateRelationship(objectType37, objectType38, objectType39, functionType40, functionType41);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry43 = null;
        com.google.javascript.jscomp.Scope scope44 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention45 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node46 = null;
        boolean boolean47 = closureCodingConvention45.isOptionalParameter(node46);
        boolean boolean49 = closureCodingConvention45.isSuperClassReference("hi!");
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry50 = null;
        com.google.javascript.jscomp.Scope scope51 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention52 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node53 = null;
        boolean boolean54 = closureCodingConvention52.isOptionalParameter(node53);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry55 = null;
        com.google.javascript.jscomp.Scope scope56 = null;
        com.google.javascript.rhino.jstype.ObjectType[] objectTypeArray57 = new com.google.javascript.rhino.jstype.ObjectType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType> objectTypeList58 = new java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList58, objectTypeArray57);
        java.util.Map<java.lang.String, java.lang.String> strMap60 = null;
        closureCodingConvention52.defineDelegateProxyPrototypeProperties(jSTypeRegistry55, scope56, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList58, strMap60);
        java.util.Map<java.lang.String, java.lang.String> strMap62 = null;
        closureCodingConvention45.defineDelegateProxyPrototypeProperties(jSTypeRegistry50, scope51, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList58, strMap62);
        java.util.Map<java.lang.String, java.lang.String> strMap64 = null;
        closureCodingConvention27.defineDelegateProxyPrototypeProperties(jSTypeRegistry43, scope44, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList58, strMap64);
        java.util.Map<java.lang.String, java.lang.String> strMap66 = null;
        closureCodingConvention11.defineDelegateProxyPrototypeProperties(jSTypeRegistry25, scope26, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList58, strMap66);
        java.util.Map<java.lang.String, java.lang.String> strMap68 = null;
        closureCodingConvention0.defineDelegateProxyPrototypeProperties(jSTypeRegistry9, scope10, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList58, strMap68);
        boolean boolean71 = closureCodingConvention0.isConstant("goog.exportProperty");
        com.google.javascript.rhino.Node node72 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.jscomp.CodingConvention.Bind bind73 = closureCodingConvention0.describeFunctionBind(node72);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "goog.abstractMethod" + "'", str30, "goog.abstractMethod");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "goog.global" + "'", str31, "goog.global");
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(delegateRelationship36);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(objectTypeArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
    }

    @Test
    public void test0611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0611");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        java.lang.String str3 = closureCodingConvention0.getAbstractMethodName();
        boolean boolean5 = closureCodingConvention0.isConstant("goog.abstractMethod");
        boolean boolean7 = closureCodingConvention0.isValidEnumKey("hi!");
        com.google.javascript.rhino.Node node8 = null;
        com.google.javascript.jscomp.CodingConvention.DelegateRelationship delegateRelationship9 = closureCodingConvention0.getDelegateRelationship(node8);
        boolean boolean11 = closureCodingConvention0.isSuperClassReference("goog.exportProperty");
        com.google.javascript.rhino.Node node12 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.String> strList13 = closureCodingConvention0.identifyTypeDeclarationCall(node12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "goog.abstractMethod" + "'", str3, "goog.abstractMethod");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNull(delegateRelationship9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test0612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0612");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        boolean boolean4 = closureCodingConvention0.isSuperClassReference("hi!");
        com.google.javascript.rhino.Node node5 = null;
        boolean boolean6 = closureCodingConvention0.isOptionalParameter(node5);
        boolean boolean8 = closureCodingConvention0.isConstantKey("hi!");
        com.google.javascript.rhino.Node node9 = null;
        boolean boolean10 = closureCodingConvention0.isVarArgsParameter(node9);
        boolean boolean12 = closureCodingConvention0.isExported("");
        com.google.javascript.rhino.Node node13 = null;
        boolean boolean14 = closureCodingConvention0.isVarArgsParameter(node13);
        java.lang.String str15 = closureCodingConvention0.getExportSymbolFunction();
        java.lang.String str16 = closureCodingConvention0.getAbstractMethodName();
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry17 = null;
        com.google.javascript.jscomp.Scope scope18 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention19 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node20 = null;
        boolean boolean21 = closureCodingConvention19.isOptionalParameter(node20);
        java.lang.String str22 = closureCodingConvention19.getAbstractMethodName();
        java.lang.String str23 = closureCodingConvention19.getGlobalObject();
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection24 = closureCodingConvention19.getAssertionFunctions();
        boolean boolean26 = closureCodingConvention19.isConstant("goog.global");
        com.google.javascript.rhino.Node node27 = null;
        com.google.javascript.jscomp.CodingConvention.DelegateRelationship delegateRelationship28 = closureCodingConvention19.getDelegateRelationship(node27);
        com.google.javascript.rhino.jstype.ObjectType objectType29 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType30 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType31 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType32 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType33 = null;
        closureCodingConvention19.applyDelegateRelationship(objectType29, objectType30, objectType31, functionType32, functionType33);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry35 = null;
        com.google.javascript.jscomp.Scope scope36 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention37 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node38 = null;
        boolean boolean39 = closureCodingConvention37.isOptionalParameter(node38);
        boolean boolean41 = closureCodingConvention37.isSuperClassReference("hi!");
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry42 = null;
        com.google.javascript.jscomp.Scope scope43 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention44 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node45 = null;
        boolean boolean46 = closureCodingConvention44.isOptionalParameter(node45);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry47 = null;
        com.google.javascript.jscomp.Scope scope48 = null;
        com.google.javascript.rhino.jstype.ObjectType[] objectTypeArray49 = new com.google.javascript.rhino.jstype.ObjectType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType> objectTypeList50 = new java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList50, objectTypeArray49);
        java.util.Map<java.lang.String, java.lang.String> strMap52 = null;
        closureCodingConvention44.defineDelegateProxyPrototypeProperties(jSTypeRegistry47, scope48, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList50, strMap52);
        java.util.Map<java.lang.String, java.lang.String> strMap54 = null;
        closureCodingConvention37.defineDelegateProxyPrototypeProperties(jSTypeRegistry42, scope43, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList50, strMap54);
        java.util.Map<java.lang.String, java.lang.String> strMap56 = null;
        closureCodingConvention19.defineDelegateProxyPrototypeProperties(jSTypeRegistry35, scope36, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList50, strMap56);
        java.util.Map<java.lang.String, java.lang.String> strMap58 = null;
        closureCodingConvention0.defineDelegateProxyPrototypeProperties(jSTypeRegistry17, scope18, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList50, strMap58);
        java.lang.String str60 = closureCodingConvention0.getExportPropertyFunction();
        boolean boolean62 = closureCodingConvention0.isConstant("hi!");
        com.google.javascript.rhino.Node node63 = null;
        com.google.javascript.jscomp.CodingConvention.DelegateRelationship delegateRelationship64 = closureCodingConvention0.getDelegateRelationship(node63);
        com.google.javascript.rhino.Node node65 = null;
        com.google.javascript.rhino.Node node66 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str67 = closureCodingConvention0.extractClassNameIfRequire(node65, node66);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "goog.exportSymbol" + "'", str15, "goog.exportSymbol");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "goog.abstractMethod" + "'", str16, "goog.abstractMethod");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "goog.abstractMethod" + "'", str22, "goog.abstractMethod");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "goog.global" + "'", str23, "goog.global");
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(delegateRelationship28);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(objectTypeArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "goog.exportProperty" + "'", str60, "goog.exportProperty");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNull(delegateRelationship64);
    }

    @Test
    public void test0613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0613");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        java.lang.String str3 = closureCodingConvention0.getAbstractMethodName();
        java.lang.String str4 = closureCodingConvention0.getGlobalObject();
        boolean boolean6 = closureCodingConvention0.isExported("goog.global");
        boolean boolean8 = closureCodingConvention0.isConstant("goog.abstractMethod");
        com.google.javascript.rhino.Node node9 = null;
        boolean boolean10 = closureCodingConvention0.isOptionalParameter(node9);
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection11 = closureCodingConvention0.getAssertionFunctions();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "goog.abstractMethod" + "'", str3, "goog.abstractMethod");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "goog.global" + "'", str4, "goog.global");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection11);
    }

    @Test
    public void test0614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0614");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        boolean boolean4 = closureCodingConvention0.isSuperClassReference("hi!");
        boolean boolean6 = closureCodingConvention0.isSuperClassReference("goog.global");
        java.lang.String str7 = closureCodingConvention0.getGlobalObject();
        com.google.javascript.rhino.Node node8 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str9 = closureCodingConvention0.getSingletonGetterClassName(node8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "goog.global" + "'", str7, "goog.global");
    }

    @Test
    public void test0615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0615");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        boolean boolean4 = closureCodingConvention0.isConstant("hi!");
        boolean boolean6 = closureCodingConvention0.isConstant("goog.exportProperty");
        boolean boolean9 = closureCodingConvention0.isExported("goog.global", false);
        boolean boolean11 = closureCodingConvention0.isConstant("hi!");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test0616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0616");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        boolean boolean4 = closureCodingConvention0.isSuperClassReference("hi!");
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = null;
        com.google.javascript.jscomp.Scope scope6 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention7 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node8 = null;
        boolean boolean9 = closureCodingConvention7.isOptionalParameter(node8);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry10 = null;
        com.google.javascript.jscomp.Scope scope11 = null;
        com.google.javascript.rhino.jstype.ObjectType[] objectTypeArray12 = new com.google.javascript.rhino.jstype.ObjectType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType> objectTypeList13 = new java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList13, objectTypeArray12);
        java.util.Map<java.lang.String, java.lang.String> strMap15 = null;
        closureCodingConvention7.defineDelegateProxyPrototypeProperties(jSTypeRegistry10, scope11, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList13, strMap15);
        java.util.Map<java.lang.String, java.lang.String> strMap17 = null;
        closureCodingConvention0.defineDelegateProxyPrototypeProperties(jSTypeRegistry5, scope6, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList13, strMap17);
        com.google.javascript.rhino.Node node19 = null;
        java.util.Map<java.lang.String, java.lang.String> strMap20 = null;
        closureCodingConvention0.checkForCallingConventionDefiningCalls(node19, strMap20);
        java.lang.String str22 = closureCodingConvention0.getDelegateSuperclassName();
        java.lang.String str23 = closureCodingConvention0.getExportSymbolFunction();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(objectTypeArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "goog.exportSymbol" + "'", str23, "goog.exportSymbol");
    }

    @Test
    public void test0617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0617");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection1 = closureCodingConvention0.getAssertionFunctions();
        com.google.javascript.rhino.Node node2 = null;
        com.google.javascript.jscomp.CodingConvention.DelegateRelationship delegateRelationship3 = closureCodingConvention0.getDelegateRelationship(node2);
        boolean boolean5 = closureCodingConvention0.isSuperClassReference("");
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection1);
        org.junit.Assert.assertNull(delegateRelationship3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test0618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0618");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        boolean boolean4 = closureCodingConvention0.isSuperClassReference("hi!");
        com.google.javascript.rhino.Node node5 = null;
        boolean boolean6 = closureCodingConvention0.isOptionalParameter(node5);
        boolean boolean8 = closureCodingConvention0.isConstantKey("hi!");
        com.google.javascript.rhino.Node node9 = null;
        boolean boolean10 = closureCodingConvention0.isVarArgsParameter(node9);
        com.google.javascript.rhino.Node node11 = null;
        boolean boolean12 = closureCodingConvention0.isVarArgsParameter(node11);
        boolean boolean14 = closureCodingConvention0.isValidEnumKey("goog.abstractMethod");
        java.lang.String str15 = closureCodingConvention0.getDelegateSuperclassName();
        boolean boolean17 = closureCodingConvention0.isExported("");
        boolean boolean19 = closureCodingConvention0.isConstantKey("goog.exportProperty");
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry20 = null;
        com.google.javascript.jscomp.Scope scope21 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention22 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node23 = null;
        boolean boolean24 = closureCodingConvention22.isOptionalParameter(node23);
        java.lang.String str25 = closureCodingConvention22.getAbstractMethodName();
        java.lang.String str26 = closureCodingConvention22.getGlobalObject();
        boolean boolean28 = closureCodingConvention22.isExported("goog.global");
        boolean boolean30 = closureCodingConvention22.isConstant("goog.abstractMethod");
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry31 = null;
        com.google.javascript.jscomp.Scope scope32 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention33 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node34 = null;
        boolean boolean35 = closureCodingConvention33.isOptionalParameter(node34);
        java.lang.String str36 = closureCodingConvention33.getAbstractMethodName();
        java.lang.String str37 = closureCodingConvention33.getGlobalObject();
        com.google.javascript.rhino.Node node38 = null;
        com.google.javascript.jscomp.CodingConvention.DelegateRelationship delegateRelationship39 = closureCodingConvention33.getDelegateRelationship(node38);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry40 = null;
        com.google.javascript.jscomp.Scope scope41 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention42 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node43 = null;
        boolean boolean44 = closureCodingConvention42.isOptionalParameter(node43);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry45 = null;
        com.google.javascript.jscomp.Scope scope46 = null;
        com.google.javascript.rhino.jstype.ObjectType[] objectTypeArray47 = new com.google.javascript.rhino.jstype.ObjectType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType> objectTypeList48 = new java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList48, objectTypeArray47);
        java.util.Map<java.lang.String, java.lang.String> strMap50 = null;
        closureCodingConvention42.defineDelegateProxyPrototypeProperties(jSTypeRegistry45, scope46, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList48, strMap50);
        java.util.Map<java.lang.String, java.lang.String> strMap52 = null;
        closureCodingConvention33.defineDelegateProxyPrototypeProperties(jSTypeRegistry40, scope41, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList48, strMap52);
        java.util.Map<java.lang.String, java.lang.String> strMap54 = null;
        closureCodingConvention22.defineDelegateProxyPrototypeProperties(jSTypeRegistry31, scope32, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList48, strMap54);
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection56 = closureCodingConvention22.getAssertionFunctions();
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry57 = null;
        com.google.javascript.jscomp.Scope scope58 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention59 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node60 = null;
        boolean boolean61 = closureCodingConvention59.isOptionalParameter(node60);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry62 = null;
        com.google.javascript.jscomp.Scope scope63 = null;
        com.google.javascript.rhino.jstype.ObjectType[] objectTypeArray64 = new com.google.javascript.rhino.jstype.ObjectType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType> objectTypeList65 = new java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList65, objectTypeArray64);
        java.util.Map<java.lang.String, java.lang.String> strMap67 = null;
        closureCodingConvention59.defineDelegateProxyPrototypeProperties(jSTypeRegistry62, scope63, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList65, strMap67);
        java.util.Map<java.lang.String, java.lang.String> strMap69 = null;
        closureCodingConvention22.defineDelegateProxyPrototypeProperties(jSTypeRegistry57, scope58, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList65, strMap69);
        java.util.Map<java.lang.String, java.lang.String> strMap71 = null;
        closureCodingConvention0.defineDelegateProxyPrototypeProperties(jSTypeRegistry20, scope21, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList65, strMap71);
        com.google.javascript.rhino.Node node73 = null;
        com.google.javascript.rhino.Node node74 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str75 = closureCodingConvention0.extractClassNameIfRequire(node73, node74);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "goog.abstractMethod" + "'", str25, "goog.abstractMethod");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "goog.global" + "'", str26, "goog.global");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "goog.abstractMethod" + "'", str36, "goog.abstractMethod");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "goog.global" + "'", str37, "goog.global");
        org.junit.Assert.assertNull(delegateRelationship39);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(objectTypeArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection56);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(objectTypeArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
    }

    @Test
    public void test0619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0619");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        boolean boolean4 = closureCodingConvention0.isSuperClassReference("hi!");
        boolean boolean6 = closureCodingConvention0.isSuperClassReference("goog.global");
        boolean boolean8 = closureCodingConvention0.isConstant("goog.abstractMethod");
        boolean boolean10 = closureCodingConvention0.isValidEnumKey("hi!");
        boolean boolean12 = closureCodingConvention0.isConstantKey("hi!");
        boolean boolean14 = closureCodingConvention0.isSuperClassReference("goog.exportSymbol");
        boolean boolean16 = closureCodingConvention0.isConstantKey("");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test0620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0620");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        java.lang.String str3 = closureCodingConvention0.getAbstractMethodName();
        java.lang.String str4 = closureCodingConvention0.getGlobalObject();
        boolean boolean6 = closureCodingConvention0.isExported("goog.global");
        boolean boolean8 = closureCodingConvention0.isConstant("goog.abstractMethod");
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry9 = null;
        com.google.javascript.jscomp.Scope scope10 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention11 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node12 = null;
        boolean boolean13 = closureCodingConvention11.isOptionalParameter(node12);
        java.lang.String str14 = closureCodingConvention11.getAbstractMethodName();
        java.lang.String str15 = closureCodingConvention11.getGlobalObject();
        com.google.javascript.rhino.Node node16 = null;
        com.google.javascript.jscomp.CodingConvention.DelegateRelationship delegateRelationship17 = closureCodingConvention11.getDelegateRelationship(node16);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry18 = null;
        com.google.javascript.jscomp.Scope scope19 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention20 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node21 = null;
        boolean boolean22 = closureCodingConvention20.isOptionalParameter(node21);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry23 = null;
        com.google.javascript.jscomp.Scope scope24 = null;
        com.google.javascript.rhino.jstype.ObjectType[] objectTypeArray25 = new com.google.javascript.rhino.jstype.ObjectType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType> objectTypeList26 = new java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList26, objectTypeArray25);
        java.util.Map<java.lang.String, java.lang.String> strMap28 = null;
        closureCodingConvention20.defineDelegateProxyPrototypeProperties(jSTypeRegistry23, scope24, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList26, strMap28);
        java.util.Map<java.lang.String, java.lang.String> strMap30 = null;
        closureCodingConvention11.defineDelegateProxyPrototypeProperties(jSTypeRegistry18, scope19, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList26, strMap30);
        java.util.Map<java.lang.String, java.lang.String> strMap32 = null;
        closureCodingConvention0.defineDelegateProxyPrototypeProperties(jSTypeRegistry9, scope10, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList26, strMap32);
        java.lang.String str34 = closureCodingConvention0.getExportSymbolFunction();
        java.lang.String str35 = closureCodingConvention0.getExportSymbolFunction();
        com.google.javascript.rhino.Node node36 = null;
        com.google.javascript.jscomp.CodingConvention.DelegateRelationship delegateRelationship37 = closureCodingConvention0.getDelegateRelationship(node36);
        com.google.javascript.rhino.Node node38 = null;
        com.google.javascript.rhino.Node node39 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str40 = closureCodingConvention0.extractClassNameIfRequire(node38, node39);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "goog.abstractMethod" + "'", str3, "goog.abstractMethod");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "goog.global" + "'", str4, "goog.global");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "goog.abstractMethod" + "'", str14, "goog.abstractMethod");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "goog.global" + "'", str15, "goog.global");
        org.junit.Assert.assertNull(delegateRelationship17);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(objectTypeArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "goog.exportSymbol" + "'", str34, "goog.exportSymbol");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "goog.exportSymbol" + "'", str35, "goog.exportSymbol");
        org.junit.Assert.assertNull(delegateRelationship37);
    }

    @Test
    public void test0621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0621");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        boolean boolean4 = closureCodingConvention0.isSuperClassReference("hi!");
        com.google.javascript.rhino.Node node5 = null;
        boolean boolean6 = closureCodingConvention0.isOptionalParameter(node5);
        java.lang.String str7 = closureCodingConvention0.getExportPropertyFunction();
        java.lang.String str8 = closureCodingConvention0.getGlobalObject();
        boolean boolean10 = closureCodingConvention0.isValidEnumKey("");
        com.google.javascript.rhino.Node node11 = null;
        boolean boolean12 = closureCodingConvention0.isVarArgsParameter(node11);
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection13 = closureCodingConvention0.getAssertionFunctions();
        boolean boolean15 = closureCodingConvention0.isConstantKey("goog.abstractMethod");
        com.google.javascript.rhino.Node node16 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean17 = closureCodingConvention0.isPropertyTestFunction(node16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "goog.exportProperty" + "'", str7, "goog.exportProperty");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "goog.global" + "'", str8, "goog.global");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test0622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0622");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        boolean boolean4 = closureCodingConvention0.isConstant("hi!");
        boolean boolean6 = closureCodingConvention0.isPrivate("hi!");
        boolean boolean8 = closureCodingConvention0.isConstantKey("goog.exportProperty");
        boolean boolean10 = closureCodingConvention0.isPrivate("goog.global");
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection11 = closureCodingConvention0.getAssertionFunctions();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection11);
    }

    @Test
    public void test0623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0623");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry3 = null;
        com.google.javascript.jscomp.Scope scope4 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention5 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node6 = null;
        boolean boolean7 = closureCodingConvention5.isOptionalParameter(node6);
        boolean boolean9 = closureCodingConvention5.isSuperClassReference("hi!");
        com.google.javascript.rhino.Node node10 = null;
        boolean boolean11 = closureCodingConvention5.isOptionalParameter(node10);
        boolean boolean13 = closureCodingConvention5.isConstantKey("hi!");
        com.google.javascript.rhino.Node node14 = null;
        boolean boolean15 = closureCodingConvention5.isVarArgsParameter(node14);
        boolean boolean17 = closureCodingConvention5.isExported("");
        com.google.javascript.rhino.Node node18 = null;
        boolean boolean19 = closureCodingConvention5.isVarArgsParameter(node18);
        java.lang.String str20 = closureCodingConvention5.getExportSymbolFunction();
        java.lang.String str21 = closureCodingConvention5.getAbstractMethodName();
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry22 = null;
        com.google.javascript.jscomp.Scope scope23 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention24 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node25 = null;
        boolean boolean26 = closureCodingConvention24.isOptionalParameter(node25);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry27 = null;
        com.google.javascript.jscomp.Scope scope28 = null;
        com.google.javascript.rhino.jstype.ObjectType[] objectTypeArray29 = new com.google.javascript.rhino.jstype.ObjectType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType> objectTypeList30 = new java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList30, objectTypeArray29);
        java.util.Map<java.lang.String, java.lang.String> strMap32 = null;
        closureCodingConvention24.defineDelegateProxyPrototypeProperties(jSTypeRegistry27, scope28, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList30, strMap32);
        java.util.Map<java.lang.String, java.lang.String> strMap34 = null;
        closureCodingConvention5.defineDelegateProxyPrototypeProperties(jSTypeRegistry22, scope23, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList30, strMap34);
        java.util.Map<java.lang.String, java.lang.String> strMap36 = null;
        closureCodingConvention0.defineDelegateProxyPrototypeProperties(jSTypeRegistry3, scope4, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList30, strMap36);
        com.google.javascript.rhino.Node node38 = null;
        com.google.javascript.rhino.Node node39 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str40 = closureCodingConvention0.extractClassNameIfProvide(node38, node39);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "goog.exportSymbol" + "'", str20, "goog.exportSymbol");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "goog.abstractMethod" + "'", str21, "goog.abstractMethod");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(objectTypeArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test0624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0624");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        java.lang.String str3 = closureCodingConvention0.getAbstractMethodName();
        java.lang.String str4 = closureCodingConvention0.getGlobalObject();
        boolean boolean6 = closureCodingConvention0.isSuperClassReference("");
        java.lang.String str7 = closureCodingConvention0.getExportSymbolFunction();
        java.lang.String str8 = closureCodingConvention0.getAbstractMethodName();
        com.google.javascript.rhino.Node node9 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship10 = closureCodingConvention0.getClassesDefinedByCall(node9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "goog.abstractMethod" + "'", str3, "goog.abstractMethod");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "goog.global" + "'", str4, "goog.global");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "goog.exportSymbol" + "'", str7, "goog.exportSymbol");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "goog.abstractMethod" + "'", str8, "goog.abstractMethod");
    }

    @Test
    public void test0625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0625");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry3 = null;
        com.google.javascript.jscomp.Scope scope4 = null;
        com.google.javascript.rhino.jstype.ObjectType[] objectTypeArray5 = new com.google.javascript.rhino.jstype.ObjectType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType> objectTypeList6 = new java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList6, objectTypeArray5);
        java.util.Map<java.lang.String, java.lang.String> strMap8 = null;
        closureCodingConvention0.defineDelegateProxyPrototypeProperties(jSTypeRegistry3, scope4, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList6, strMap8);
        com.google.javascript.rhino.Node node10 = null;
        boolean boolean11 = closureCodingConvention0.isVarArgsParameter(node10);
        java.lang.String str12 = closureCodingConvention0.getExportPropertyFunction();
        boolean boolean14 = closureCodingConvention0.isExported("goog.abstractMethod");
        java.lang.String str15 = closureCodingConvention0.getExportPropertyFunction();
        java.lang.String str16 = closureCodingConvention0.getAbstractMethodName();
        com.google.javascript.rhino.Node node17 = null;
        boolean boolean18 = closureCodingConvention0.isOptionalParameter(node17);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(objectTypeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "goog.exportProperty" + "'", str12, "goog.exportProperty");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "goog.exportProperty" + "'", str15, "goog.exportProperty");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "goog.abstractMethod" + "'", str16, "goog.abstractMethod");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test0626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0626");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        java.lang.String str3 = closureCodingConvention0.getAbstractMethodName();
        java.lang.String str4 = closureCodingConvention0.getGlobalObject();
        boolean boolean6 = closureCodingConvention0.isSuperClassReference("");
        java.lang.String str7 = closureCodingConvention0.getGlobalObject();
        boolean boolean9 = closureCodingConvention0.isConstantKey("goog.exportProperty");
        com.google.javascript.rhino.Node node10 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.String> strList11 = closureCodingConvention0.identifyTypeDeclarationCall(node10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "goog.abstractMethod" + "'", str3, "goog.abstractMethod");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "goog.global" + "'", str4, "goog.global");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "goog.global" + "'", str7, "goog.global");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test0627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0627");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection1 = closureCodingConvention0.getAssertionFunctions();
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection2 = closureCodingConvention0.getAssertionFunctions();
        com.google.javascript.rhino.Node node3 = null;
        boolean boolean4 = closureCodingConvention0.isOptionalParameter(node3);
        com.google.javascript.rhino.Node node5 = null;
        boolean boolean6 = closureCodingConvention0.isVarArgsParameter(node5);
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection1);
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test0628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0628");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        boolean boolean2 = closureCodingConvention0.isConstantKey("goog.abstractMethod");
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection3 = closureCodingConvention0.getAssertionFunctions();
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection4 = closureCodingConvention0.getAssertionFunctions();
        com.google.javascript.rhino.Node node5 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean6 = closureCodingConvention0.isPropertyTestFunction(node5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection3);
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection4);
    }

    @Test
    public void test0629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0629");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        boolean boolean4 = closureCodingConvention0.isSuperClassReference("hi!");
        com.google.javascript.rhino.Node node5 = null;
        boolean boolean6 = closureCodingConvention0.isOptionalParameter(node5);
        boolean boolean8 = closureCodingConvention0.isConstantKey("hi!");
        com.google.javascript.rhino.Node node9 = null;
        boolean boolean10 = closureCodingConvention0.isVarArgsParameter(node9);
        com.google.javascript.rhino.Node node11 = null;
        boolean boolean12 = closureCodingConvention0.isVarArgsParameter(node11);
        com.google.javascript.rhino.Node node13 = null;
        java.util.Map<java.lang.String, java.lang.String> strMap14 = null;
        closureCodingConvention0.checkForCallingConventionDefiningCalls(node13, strMap14);
        com.google.javascript.rhino.jstype.FunctionType functionType16 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType17 = null;
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType18 = null;
        closureCodingConvention0.applySubclassRelationship(functionType16, functionType17, subclassType18);
        com.google.javascript.rhino.Node node20 = null;
        java.util.Map<java.lang.String, java.lang.String> strMap21 = null;
        closureCodingConvention0.checkForCallingConventionDefiningCalls(node20, strMap21);
        boolean boolean24 = closureCodingConvention0.isSuperClassReference("goog.global");
        boolean boolean26 = closureCodingConvention0.isSuperClassReference("goog.exportProperty");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test0630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0630");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        boolean boolean2 = closureCodingConvention0.isConstantKey("goog.abstractMethod");
        boolean boolean4 = closureCodingConvention0.isConstantKey("");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test0631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0631");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        boolean boolean4 = closureCodingConvention0.isSuperClassReference("hi!");
        com.google.javascript.rhino.Node node5 = null;
        boolean boolean6 = closureCodingConvention0.isOptionalParameter(node5);
        boolean boolean8 = closureCodingConvention0.isConstantKey("hi!");
        com.google.javascript.rhino.Node node9 = null;
        boolean boolean10 = closureCodingConvention0.isVarArgsParameter(node9);
        boolean boolean12 = closureCodingConvention0.isExported("");
        java.lang.String str13 = closureCodingConvention0.getDelegateSuperclassName();
        java.lang.String str14 = closureCodingConvention0.getExportPropertyFunction();
        boolean boolean16 = closureCodingConvention0.isExported("");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "goog.exportProperty" + "'", str14, "goog.exportProperty");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test0632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0632");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection1 = closureCodingConvention0.getAssertionFunctions();
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection2 = closureCodingConvention0.getAssertionFunctions();
        boolean boolean4 = closureCodingConvention0.isSuperClassReference("goog.exportProperty");
        com.google.javascript.rhino.Node node5 = null;
        boolean boolean6 = closureCodingConvention0.isVarArgsParameter(node5);
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection1);
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test0633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0633");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        java.lang.String str3 = closureCodingConvention0.getAbstractMethodName();
        java.lang.String str4 = closureCodingConvention0.getGlobalObject();
        com.google.javascript.rhino.Node node5 = null;
        java.util.Map<java.lang.String, java.lang.String> strMap6 = null;
        closureCodingConvention0.checkForCallingConventionDefiningCalls(node5, strMap6);
        boolean boolean9 = closureCodingConvention0.isConstant("");
        java.lang.String str10 = closureCodingConvention0.getExportSymbolFunction();
        com.google.javascript.rhino.Node node11 = null;
        boolean boolean12 = closureCodingConvention0.isOptionalParameter(node11);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "goog.abstractMethod" + "'", str3, "goog.abstractMethod");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "goog.global" + "'", str4, "goog.global");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "goog.exportSymbol" + "'", str10, "goog.exportSymbol");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test0634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0634");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        boolean boolean2 = closureCodingConvention0.isExported("goog.global");
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection3 = closureCodingConvention0.getAssertionFunctions();
        java.lang.String str4 = closureCodingConvention0.getGlobalObject();
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection5 = closureCodingConvention0.getAssertionFunctions();
        boolean boolean7 = closureCodingConvention0.isSuperClassReference("hi!");
        boolean boolean9 = closureCodingConvention0.isConstantKey("goog.abstractMethod");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "goog.global" + "'", str4, "goog.global");
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test0635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0635");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        boolean boolean2 = closureCodingConvention0.isExported("goog.global");
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection3 = closureCodingConvention0.getAssertionFunctions();
        java.lang.String str4 = closureCodingConvention0.getGlobalObject();
        com.google.javascript.rhino.Node node5 = null;
        boolean boolean6 = closureCodingConvention0.isOptionalParameter(node5);
        java.lang.String str7 = closureCodingConvention0.getAbstractMethodName();
        boolean boolean9 = closureCodingConvention0.isConstant("goog.abstractMethod");
        java.lang.String str10 = closureCodingConvention0.getDelegateSuperclassName();
        com.google.javascript.rhino.Node node11 = null;
        com.google.javascript.rhino.Node node12 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str13 = closureCodingConvention0.extractClassNameIfProvide(node11, node12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "goog.global" + "'", str4, "goog.global");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "goog.abstractMethod" + "'", str7, "goog.abstractMethod");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test0636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0636");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry3 = null;
        com.google.javascript.jscomp.Scope scope4 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention5 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node6 = null;
        boolean boolean7 = closureCodingConvention5.isOptionalParameter(node6);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry8 = null;
        com.google.javascript.jscomp.Scope scope9 = null;
        com.google.javascript.rhino.jstype.ObjectType[] objectTypeArray10 = new com.google.javascript.rhino.jstype.ObjectType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType> objectTypeList11 = new java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList11, objectTypeArray10);
        java.util.Map<java.lang.String, java.lang.String> strMap13 = null;
        closureCodingConvention5.defineDelegateProxyPrototypeProperties(jSTypeRegistry8, scope9, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList11, strMap13);
        java.util.Map<java.lang.String, java.lang.String> strMap15 = null;
        closureCodingConvention0.defineDelegateProxyPrototypeProperties(jSTypeRegistry3, scope4, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList11, strMap15);
        com.google.javascript.rhino.Node node17 = null;
        java.util.Map<java.lang.String, java.lang.String> strMap18 = null;
        closureCodingConvention0.checkForCallingConventionDefiningCalls(node17, strMap18);
        java.lang.String str20 = closureCodingConvention0.getGlobalObject();
        boolean boolean22 = closureCodingConvention0.isConstant("hi!");
        boolean boolean24 = closureCodingConvention0.isPrivate("goog.exportSymbol");
        com.google.javascript.rhino.jstype.FunctionType functionType25 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType26 = null;
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType27 = null;
        closureCodingConvention0.applySubclassRelationship(functionType25, functionType26, subclassType27);
        com.google.javascript.rhino.jstype.ObjectType objectType29 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType30 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType31 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType32 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType33 = null;
        closureCodingConvention0.applyDelegateRelationship(objectType29, objectType30, objectType31, functionType32, functionType33);
        boolean boolean36 = closureCodingConvention0.isExported("goog.exportSymbol");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(objectTypeArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "goog.global" + "'", str20, "goog.global");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test0637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0637");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        boolean boolean4 = closureCodingConvention0.isSuperClassReference("hi!");
        com.google.javascript.rhino.Node node5 = null;
        boolean boolean6 = closureCodingConvention0.isOptionalParameter(node5);
        boolean boolean8 = closureCodingConvention0.isConstantKey("hi!");
        com.google.javascript.rhino.Node node9 = null;
        boolean boolean10 = closureCodingConvention0.isVarArgsParameter(node9);
        java.lang.String str11 = closureCodingConvention0.getDelegateSuperclassName();
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection12 = closureCodingConvention0.getAssertionFunctions();
        boolean boolean14 = closureCodingConvention0.isPrivate("goog.global");
        java.lang.String str15 = closureCodingConvention0.getDelegateSuperclassName();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(str15);
    }

    @Test
    public void test0638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0638");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry3 = null;
        com.google.javascript.jscomp.Scope scope4 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention5 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node6 = null;
        boolean boolean7 = closureCodingConvention5.isOptionalParameter(node6);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry8 = null;
        com.google.javascript.jscomp.Scope scope9 = null;
        com.google.javascript.rhino.jstype.ObjectType[] objectTypeArray10 = new com.google.javascript.rhino.jstype.ObjectType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType> objectTypeList11 = new java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList11, objectTypeArray10);
        java.util.Map<java.lang.String, java.lang.String> strMap13 = null;
        closureCodingConvention5.defineDelegateProxyPrototypeProperties(jSTypeRegistry8, scope9, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList11, strMap13);
        java.util.Map<java.lang.String, java.lang.String> strMap15 = null;
        closureCodingConvention0.defineDelegateProxyPrototypeProperties(jSTypeRegistry3, scope4, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList11, strMap15);
        com.google.javascript.rhino.Node node17 = null;
        com.google.javascript.jscomp.CodingConvention.DelegateRelationship delegateRelationship18 = closureCodingConvention0.getDelegateRelationship(node17);
        boolean boolean21 = closureCodingConvention0.isExported("goog.exportProperty", false);
        com.google.javascript.rhino.jstype.FunctionType functionType22 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType23 = null;
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType24 = null;
        closureCodingConvention0.applySubclassRelationship(functionType22, functionType23, subclassType24);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(objectTypeArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(delegateRelationship18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test0639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0639");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        java.lang.String str3 = closureCodingConvention0.getAbstractMethodName();
        java.lang.String str4 = closureCodingConvention0.getGlobalObject();
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection5 = closureCodingConvention0.getAssertionFunctions();
        boolean boolean7 = closureCodingConvention0.isConstant("goog.global");
        com.google.javascript.rhino.Node node8 = null;
        com.google.javascript.jscomp.CodingConvention.DelegateRelationship delegateRelationship9 = closureCodingConvention0.getDelegateRelationship(node8);
        com.google.javascript.rhino.jstype.ObjectType objectType10 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType11 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType12 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType13 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType14 = null;
        closureCodingConvention0.applyDelegateRelationship(objectType10, objectType11, objectType12, functionType13, functionType14);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry16 = null;
        com.google.javascript.jscomp.Scope scope17 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention18 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node19 = null;
        boolean boolean20 = closureCodingConvention18.isOptionalParameter(node19);
        boolean boolean22 = closureCodingConvention18.isSuperClassReference("hi!");
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry23 = null;
        com.google.javascript.jscomp.Scope scope24 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention25 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node26 = null;
        boolean boolean27 = closureCodingConvention25.isOptionalParameter(node26);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry28 = null;
        com.google.javascript.jscomp.Scope scope29 = null;
        com.google.javascript.rhino.jstype.ObjectType[] objectTypeArray30 = new com.google.javascript.rhino.jstype.ObjectType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType> objectTypeList31 = new java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList31, objectTypeArray30);
        java.util.Map<java.lang.String, java.lang.String> strMap33 = null;
        closureCodingConvention25.defineDelegateProxyPrototypeProperties(jSTypeRegistry28, scope29, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList31, strMap33);
        java.util.Map<java.lang.String, java.lang.String> strMap35 = null;
        closureCodingConvention18.defineDelegateProxyPrototypeProperties(jSTypeRegistry23, scope24, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList31, strMap35);
        java.util.Map<java.lang.String, java.lang.String> strMap37 = null;
        closureCodingConvention0.defineDelegateProxyPrototypeProperties(jSTypeRegistry16, scope17, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList31, strMap37);
        boolean boolean40 = closureCodingConvention0.isSuperClassReference("goog.abstractMethod");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "goog.abstractMethod" + "'", str3, "goog.abstractMethod");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "goog.global" + "'", str4, "goog.global");
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(delegateRelationship9);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(objectTypeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test0640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0640");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        boolean boolean2 = closureCodingConvention0.isExported("goog.global");
        boolean boolean4 = closureCodingConvention0.isConstant("");
        boolean boolean6 = closureCodingConvention0.isValidEnumKey("goog.abstractMethod");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
    }

    @Test
    public void test0641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0641");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        boolean boolean4 = closureCodingConvention0.isSuperClassReference("hi!");
        boolean boolean6 = closureCodingConvention0.isSuperClassReference("goog.global");
        boolean boolean8 = closureCodingConvention0.isConstant("goog.abstractMethod");
        boolean boolean10 = closureCodingConvention0.isValidEnumKey("hi!");
        boolean boolean12 = closureCodingConvention0.isSuperClassReference("goog.global");
        boolean boolean14 = closureCodingConvention0.isPrivate("goog.abstractMethod");
        boolean boolean16 = closureCodingConvention0.isConstant("goog.global");
        boolean boolean18 = closureCodingConvention0.isPrivate("hi!");
        com.google.javascript.rhino.Node node19 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.String> strList20 = closureCodingConvention0.identifyTypeDeclarationCall(node19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test0642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0642");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        boolean boolean4 = closureCodingConvention0.isSuperClassReference("hi!");
        com.google.javascript.rhino.Node node5 = null;
        boolean boolean6 = closureCodingConvention0.isOptionalParameter(node5);
        boolean boolean8 = closureCodingConvention0.isConstantKey("hi!");
        com.google.javascript.rhino.Node node9 = null;
        boolean boolean10 = closureCodingConvention0.isVarArgsParameter(node9);
        com.google.javascript.rhino.Node node11 = null;
        boolean boolean12 = closureCodingConvention0.isVarArgsParameter(node11);
        com.google.javascript.rhino.Node node13 = null;
        java.util.Map<java.lang.String, java.lang.String> strMap14 = null;
        closureCodingConvention0.checkForCallingConventionDefiningCalls(node13, strMap14);
        com.google.javascript.rhino.jstype.FunctionType functionType16 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType17 = null;
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType18 = null;
        closureCodingConvention0.applySubclassRelationship(functionType16, functionType17, subclassType18);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry20 = null;
        com.google.javascript.jscomp.Scope scope21 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention22 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node23 = null;
        boolean boolean24 = closureCodingConvention22.isOptionalParameter(node23);
        boolean boolean26 = closureCodingConvention22.isSuperClassReference("hi!");
        boolean boolean28 = closureCodingConvention22.isSuperClassReference("goog.global");
        boolean boolean30 = closureCodingConvention22.isConstant("goog.abstractMethod");
        boolean boolean32 = closureCodingConvention22.isValidEnumKey("hi!");
        boolean boolean34 = closureCodingConvention22.isSuperClassReference("goog.global");
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry35 = null;
        com.google.javascript.jscomp.Scope scope36 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention37 = new com.google.javascript.jscomp.ClosureCodingConvention();
        boolean boolean39 = closureCodingConvention37.isExported("goog.global");
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection40 = closureCodingConvention37.getAssertionFunctions();
        java.lang.String str41 = closureCodingConvention37.getGlobalObject();
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry42 = null;
        com.google.javascript.jscomp.Scope scope43 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention44 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node45 = null;
        boolean boolean46 = closureCodingConvention44.isOptionalParameter(node45);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry47 = null;
        com.google.javascript.jscomp.Scope scope48 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention49 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node50 = null;
        boolean boolean51 = closureCodingConvention49.isOptionalParameter(node50);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry52 = null;
        com.google.javascript.jscomp.Scope scope53 = null;
        com.google.javascript.rhino.jstype.ObjectType[] objectTypeArray54 = new com.google.javascript.rhino.jstype.ObjectType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType> objectTypeList55 = new java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList55, objectTypeArray54);
        java.util.Map<java.lang.String, java.lang.String> strMap57 = null;
        closureCodingConvention49.defineDelegateProxyPrototypeProperties(jSTypeRegistry52, scope53, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList55, strMap57);
        java.util.Map<java.lang.String, java.lang.String> strMap59 = null;
        closureCodingConvention44.defineDelegateProxyPrototypeProperties(jSTypeRegistry47, scope48, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList55, strMap59);
        java.util.Map<java.lang.String, java.lang.String> strMap61 = null;
        closureCodingConvention37.defineDelegateProxyPrototypeProperties(jSTypeRegistry42, scope43, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList55, strMap61);
        java.util.Map<java.lang.String, java.lang.String> strMap63 = null;
        closureCodingConvention22.defineDelegateProxyPrototypeProperties(jSTypeRegistry35, scope36, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList55, strMap63);
        java.util.Map<java.lang.String, java.lang.String> strMap65 = null;
        closureCodingConvention0.defineDelegateProxyPrototypeProperties(jSTypeRegistry20, scope21, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList55, strMap65);
        com.google.javascript.rhino.Node node67 = null;
        java.util.Map<java.lang.String, java.lang.String> strMap68 = null;
        closureCodingConvention0.checkForCallingConventionDefiningCalls(node67, strMap68);
        com.google.javascript.rhino.jstype.FunctionType functionType70 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType71 = null;
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType72 = null;
        closureCodingConvention0.applySubclassRelationship(functionType70, functionType71, subclassType72);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "goog.global" + "'", str41, "goog.global");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(objectTypeArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test0643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0643");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection1 = closureCodingConvention0.getAssertionFunctions();
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection2 = closureCodingConvention0.getAssertionFunctions();
        boolean boolean4 = closureCodingConvention0.isValidEnumKey("");
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection5 = closureCodingConvention0.getAssertionFunctions();
        com.google.javascript.rhino.Node node6 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean7 = closureCodingConvention0.isPropertyTestFunction(node6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection1);
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection5);
    }

    @Test
    public void test0644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0644");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection1 = closureCodingConvention0.getAssertionFunctions();
        com.google.javascript.rhino.Node node2 = null;
        boolean boolean3 = closureCodingConvention0.isVarArgsParameter(node2);
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test0645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0645");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        java.lang.String str3 = closureCodingConvention0.getAbstractMethodName();
        java.lang.String str4 = closureCodingConvention0.getGlobalObject();
        com.google.javascript.rhino.Node node5 = null;
        java.util.Map<java.lang.String, java.lang.String> strMap6 = null;
        closureCodingConvention0.checkForCallingConventionDefiningCalls(node5, strMap6);
        boolean boolean9 = closureCodingConvention0.isExported("goog.exportSymbol");
        com.google.javascript.rhino.jstype.FunctionType functionType10 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType11 = null;
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType12 = null;
        closureCodingConvention0.applySubclassRelationship(functionType10, functionType11, subclassType12);
        boolean boolean15 = closureCodingConvention0.isSuperClassReference("goog.exportProperty");
        com.google.javascript.rhino.jstype.ObjectType objectType16 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType17 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType18 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType19 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType20 = null;
        closureCodingConvention0.applyDelegateRelationship(objectType16, objectType17, objectType18, functionType19, functionType20);
        java.lang.String str22 = closureCodingConvention0.getAbstractMethodName();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "goog.abstractMethod" + "'", str3, "goog.abstractMethod");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "goog.global" + "'", str4, "goog.global");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "goog.abstractMethod" + "'", str22, "goog.abstractMethod");
    }

    @Test
    public void test0646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0646");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        java.lang.String str3 = closureCodingConvention0.getAbstractMethodName();
        java.lang.String str4 = closureCodingConvention0.getGlobalObject();
        com.google.javascript.rhino.Node node5 = null;
        java.util.Map<java.lang.String, java.lang.String> strMap6 = null;
        closureCodingConvention0.checkForCallingConventionDefiningCalls(node5, strMap6);
        boolean boolean9 = closureCodingConvention0.isExported("goog.exportSymbol");
        com.google.javascript.rhino.jstype.FunctionType functionType10 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType11 = null;
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType12 = null;
        closureCodingConvention0.applySubclassRelationship(functionType10, functionType11, subclassType12);
        boolean boolean15 = closureCodingConvention0.isSuperClassReference("goog.exportProperty");
        com.google.javascript.rhino.jstype.ObjectType objectType16 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType17 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType18 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType19 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType20 = null;
        closureCodingConvention0.applyDelegateRelationship(objectType16, objectType17, objectType18, functionType19, functionType20);
        java.lang.String str22 = closureCodingConvention0.getGlobalObject();
        com.google.javascript.rhino.jstype.FunctionType functionType23 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType24 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType25 = null;
        // The following exception was thrown during execution in test generation
        try {
            closureCodingConvention0.applySingletonGetter(functionType23, functionType24, objectType25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "goog.abstractMethod" + "'", str3, "goog.abstractMethod");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "goog.global" + "'", str4, "goog.global");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "goog.global" + "'", str22, "goog.global");
    }

    @Test
    public void test0647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0647");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        boolean boolean4 = closureCodingConvention0.isConstant("hi!");
        boolean boolean6 = closureCodingConvention0.isPrivate("hi!");
        boolean boolean8 = closureCodingConvention0.isConstantKey("goog.exportProperty");
        boolean boolean10 = closureCodingConvention0.isPrivate("goog.global");
        boolean boolean12 = closureCodingConvention0.isConstant("goog.exportProperty");
        com.google.javascript.rhino.Node node13 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.String> strList14 = closureCodingConvention0.identifyTypeDeclarationCall(node13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test0648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0648");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        boolean boolean4 = closureCodingConvention0.isSuperClassReference("hi!");
        com.google.javascript.rhino.Node node5 = null;
        boolean boolean6 = closureCodingConvention0.isOptionalParameter(node5);
        boolean boolean8 = closureCodingConvention0.isConstantKey("hi!");
        com.google.javascript.rhino.Node node9 = null;
        boolean boolean10 = closureCodingConvention0.isVarArgsParameter(node9);
        boolean boolean12 = closureCodingConvention0.isExported("");
        com.google.javascript.rhino.Node node13 = null;
        boolean boolean14 = closureCodingConvention0.isVarArgsParameter(node13);
        java.lang.String str15 = closureCodingConvention0.getExportSymbolFunction();
        java.lang.String str16 = closureCodingConvention0.getAbstractMethodName();
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry17 = null;
        com.google.javascript.jscomp.Scope scope18 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention19 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node20 = null;
        boolean boolean21 = closureCodingConvention19.isOptionalParameter(node20);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry22 = null;
        com.google.javascript.jscomp.Scope scope23 = null;
        com.google.javascript.rhino.jstype.ObjectType[] objectTypeArray24 = new com.google.javascript.rhino.jstype.ObjectType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType> objectTypeList25 = new java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList25, objectTypeArray24);
        java.util.Map<java.lang.String, java.lang.String> strMap27 = null;
        closureCodingConvention19.defineDelegateProxyPrototypeProperties(jSTypeRegistry22, scope23, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList25, strMap27);
        java.util.Map<java.lang.String, java.lang.String> strMap29 = null;
        closureCodingConvention0.defineDelegateProxyPrototypeProperties(jSTypeRegistry17, scope18, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList25, strMap29);
        com.google.javascript.rhino.Node node31 = null;
        java.util.Map<java.lang.String, java.lang.String> strMap32 = null;
        closureCodingConvention0.checkForCallingConventionDefiningCalls(node31, strMap32);
        com.google.javascript.rhino.jstype.ObjectType objectType34 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType35 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType36 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType37 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType38 = null;
        closureCodingConvention0.applyDelegateRelationship(objectType34, objectType35, objectType36, functionType37, functionType38);
        com.google.javascript.rhino.Node node40 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.jscomp.CodingConvention.Bind bind41 = closureCodingConvention0.describeFunctionBind(node40);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "goog.exportSymbol" + "'", str15, "goog.exportSymbol");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "goog.abstractMethod" + "'", str16, "goog.abstractMethod");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(objectTypeArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test0649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0649");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        boolean boolean4 = closureCodingConvention0.isSuperClassReference("hi!");
        boolean boolean6 = closureCodingConvention0.isPrivate("goog.exportProperty");
        com.google.javascript.rhino.jstype.ObjectType objectType7 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType8 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType9 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType10 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType11 = null;
        closureCodingConvention0.applyDelegateRelationship(objectType7, objectType8, objectType9, functionType10, functionType11);
        com.google.javascript.rhino.jstype.FunctionType functionType13 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType14 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType15 = null;
        // The following exception was thrown during execution in test generation
        try {
            closureCodingConvention0.applySingletonGetter(functionType13, functionType14, objectType15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test0650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0650");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        boolean boolean4 = closureCodingConvention0.isSuperClassReference("hi!");
        boolean boolean6 = closureCodingConvention0.isSuperClassReference("goog.global");
        boolean boolean8 = closureCodingConvention0.isConstantKey("goog.exportProperty");
        boolean boolean10 = closureCodingConvention0.isConstantKey("hi!");
        java.lang.String str11 = closureCodingConvention0.getGlobalObject();
        com.google.javascript.rhino.jstype.FunctionType functionType12 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType13 = null;
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType14 = null;
        closureCodingConvention0.applySubclassRelationship(functionType12, functionType13, subclassType14);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "goog.global" + "'", str11, "goog.global");
    }

    @Test
    public void test0651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0651");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        boolean boolean4 = closureCodingConvention0.isSuperClassReference("hi!");
        boolean boolean6 = closureCodingConvention0.isSuperClassReference("goog.global");
        boolean boolean8 = closureCodingConvention0.isValidEnumKey("");
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry9 = null;
        com.google.javascript.jscomp.Scope scope10 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention11 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node12 = null;
        boolean boolean13 = closureCodingConvention11.isOptionalParameter(node12);
        java.lang.String str14 = closureCodingConvention11.getAbstractMethodName();
        java.lang.String str15 = closureCodingConvention11.getGlobalObject();
        com.google.javascript.rhino.Node node16 = null;
        java.util.Map<java.lang.String, java.lang.String> strMap17 = null;
        closureCodingConvention11.checkForCallingConventionDefiningCalls(node16, strMap17);
        com.google.javascript.rhino.Node node19 = null;
        com.google.javascript.jscomp.CodingConvention.DelegateRelationship delegateRelationship20 = closureCodingConvention11.getDelegateRelationship(node19);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry21 = null;
        com.google.javascript.jscomp.Scope scope22 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention23 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node24 = null;
        boolean boolean25 = closureCodingConvention23.isOptionalParameter(node24);
        java.lang.String str26 = closureCodingConvention23.getAbstractMethodName();
        java.lang.String str27 = closureCodingConvention23.getGlobalObject();
        boolean boolean29 = closureCodingConvention23.isExported("goog.global");
        boolean boolean31 = closureCodingConvention23.isConstant("goog.abstractMethod");
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry32 = null;
        com.google.javascript.jscomp.Scope scope33 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention34 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node35 = null;
        boolean boolean36 = closureCodingConvention34.isOptionalParameter(node35);
        java.lang.String str37 = closureCodingConvention34.getAbstractMethodName();
        java.lang.String str38 = closureCodingConvention34.getGlobalObject();
        com.google.javascript.rhino.Node node39 = null;
        com.google.javascript.jscomp.CodingConvention.DelegateRelationship delegateRelationship40 = closureCodingConvention34.getDelegateRelationship(node39);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry41 = null;
        com.google.javascript.jscomp.Scope scope42 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention43 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node44 = null;
        boolean boolean45 = closureCodingConvention43.isOptionalParameter(node44);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry46 = null;
        com.google.javascript.jscomp.Scope scope47 = null;
        com.google.javascript.rhino.jstype.ObjectType[] objectTypeArray48 = new com.google.javascript.rhino.jstype.ObjectType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType> objectTypeList49 = new java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList49, objectTypeArray48);
        java.util.Map<java.lang.String, java.lang.String> strMap51 = null;
        closureCodingConvention43.defineDelegateProxyPrototypeProperties(jSTypeRegistry46, scope47, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList49, strMap51);
        java.util.Map<java.lang.String, java.lang.String> strMap53 = null;
        closureCodingConvention34.defineDelegateProxyPrototypeProperties(jSTypeRegistry41, scope42, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList49, strMap53);
        java.util.Map<java.lang.String, java.lang.String> strMap55 = null;
        closureCodingConvention23.defineDelegateProxyPrototypeProperties(jSTypeRegistry32, scope33, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList49, strMap55);
        java.util.Map<java.lang.String, java.lang.String> strMap57 = null;
        closureCodingConvention11.defineDelegateProxyPrototypeProperties(jSTypeRegistry21, scope22, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList49, strMap57);
        java.util.Map<java.lang.String, java.lang.String> strMap59 = null;
        closureCodingConvention0.defineDelegateProxyPrototypeProperties(jSTypeRegistry9, scope10, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList49, strMap59);
        java.lang.String str61 = closureCodingConvention0.getExportSymbolFunction();
        boolean boolean63 = closureCodingConvention0.isConstantKey("goog.abstractMethod");
        java.lang.String str64 = closureCodingConvention0.getDelegateSuperclassName();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "goog.abstractMethod" + "'", str14, "goog.abstractMethod");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "goog.global" + "'", str15, "goog.global");
        org.junit.Assert.assertNull(delegateRelationship20);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "goog.abstractMethod" + "'", str26, "goog.abstractMethod");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "goog.global" + "'", str27, "goog.global");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "goog.abstractMethod" + "'", str37, "goog.abstractMethod");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "goog.global" + "'", str38, "goog.global");
        org.junit.Assert.assertNull(delegateRelationship40);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(objectTypeArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "goog.exportSymbol" + "'", str61, "goog.exportSymbol");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNull(str64);
    }

    @Test
    public void test0652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0652");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        java.lang.String str3 = closureCodingConvention0.getAbstractMethodName();
        java.lang.String str4 = closureCodingConvention0.getGlobalObject();
        com.google.javascript.rhino.Node node5 = null;
        java.util.Map<java.lang.String, java.lang.String> strMap6 = null;
        closureCodingConvention0.checkForCallingConventionDefiningCalls(node5, strMap6);
        com.google.javascript.rhino.Node node8 = null;
        com.google.javascript.jscomp.CodingConvention.DelegateRelationship delegateRelationship9 = closureCodingConvention0.getDelegateRelationship(node8);
        java.lang.String str10 = closureCodingConvention0.getDelegateSuperclassName();
        com.google.javascript.rhino.Node node11 = null;
        boolean boolean12 = closureCodingConvention0.isVarArgsParameter(node11);
        boolean boolean14 = closureCodingConvention0.isExported("");
        boolean boolean17 = closureCodingConvention0.isExported("goog.global", false);
        boolean boolean19 = closureCodingConvention0.isPrivate("hi!");
        com.google.javascript.rhino.Node node20 = null;
        com.google.javascript.rhino.Node node21 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str22 = closureCodingConvention0.extractClassNameIfRequire(node20, node21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "goog.abstractMethod" + "'", str3, "goog.abstractMethod");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "goog.global" + "'", str4, "goog.global");
        org.junit.Assert.assertNull(delegateRelationship9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test0653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0653");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        boolean boolean4 = closureCodingConvention0.isSuperClassReference("hi!");
        com.google.javascript.rhino.Node node5 = null;
        boolean boolean6 = closureCodingConvention0.isOptionalParameter(node5);
        boolean boolean8 = closureCodingConvention0.isConstantKey("hi!");
        com.google.javascript.rhino.Node node9 = null;
        boolean boolean10 = closureCodingConvention0.isVarArgsParameter(node9);
        boolean boolean12 = closureCodingConvention0.isExported("");
        com.google.javascript.rhino.jstype.ObjectType objectType13 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType14 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType15 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType16 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType17 = null;
        closureCodingConvention0.applyDelegateRelationship(objectType13, objectType14, objectType15, functionType16, functionType17);
        boolean boolean21 = closureCodingConvention0.isExported("goog.global", true);
        com.google.javascript.rhino.Node node22 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship23 = closureCodingConvention0.getClassesDefinedByCall(node22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test0654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0654");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        boolean boolean4 = closureCodingConvention0.isSuperClassReference("hi!");
        boolean boolean6 = closureCodingConvention0.isValidEnumKey("");
        java.lang.String str7 = closureCodingConvention0.getExportPropertyFunction();
        com.google.javascript.rhino.Node node8 = null;
        com.google.javascript.jscomp.CodingConvention.DelegateRelationship delegateRelationship9 = closureCodingConvention0.getDelegateRelationship(node8);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "goog.exportProperty" + "'", str7, "goog.exportProperty");
        org.junit.Assert.assertNull(delegateRelationship9);
    }

    @Test
    public void test0655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0655");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        boolean boolean4 = closureCodingConvention0.isSuperClassReference("hi!");
        boolean boolean6 = closureCodingConvention0.isSuperClassReference("goog.global");
        boolean boolean8 = closureCodingConvention0.isConstant("goog.abstractMethod");
        boolean boolean10 = closureCodingConvention0.isValidEnumKey("hi!");
        boolean boolean12 = closureCodingConvention0.isConstantKey("hi!");
        boolean boolean14 = closureCodingConvention0.isSuperClassReference("goog.exportSymbol");
        com.google.javascript.rhino.Node node15 = null;
        boolean boolean16 = closureCodingConvention0.isVarArgsParameter(node15);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test0656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0656");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        java.lang.String str3 = closureCodingConvention0.getAbstractMethodName();
        java.lang.String str4 = closureCodingConvention0.getGlobalObject();
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection5 = closureCodingConvention0.getAssertionFunctions();
        boolean boolean7 = closureCodingConvention0.isConstant("goog.global");
        boolean boolean9 = closureCodingConvention0.isSuperClassReference("goog.exportProperty");
        com.google.javascript.rhino.jstype.FunctionType functionType10 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType11 = null;
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType12 = null;
        closureCodingConvention0.applySubclassRelationship(functionType10, functionType11, subclassType12);
        java.lang.String str14 = closureCodingConvention0.getDelegateSuperclassName();
        boolean boolean17 = closureCodingConvention0.isExported("goog.global", false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "goog.abstractMethod" + "'", str3, "goog.abstractMethod");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "goog.global" + "'", str4, "goog.global");
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test0657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0657");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection1 = closureCodingConvention0.getAssertionFunctions();
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection2 = closureCodingConvention0.getAssertionFunctions();
        com.google.javascript.rhino.Node node3 = null;
        boolean boolean4 = closureCodingConvention0.isOptionalParameter(node3);
        java.lang.String str5 = closureCodingConvention0.getDelegateSuperclassName();
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry6 = null;
        com.google.javascript.jscomp.Scope scope7 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention8 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node9 = null;
        boolean boolean10 = closureCodingConvention8.isOptionalParameter(node9);
        boolean boolean12 = closureCodingConvention8.isSuperClassReference("hi!");
        boolean boolean14 = closureCodingConvention8.isValidEnumKey("");
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry15 = null;
        com.google.javascript.jscomp.Scope scope16 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention17 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node18 = null;
        boolean boolean19 = closureCodingConvention17.isOptionalParameter(node18);
        java.lang.String str20 = closureCodingConvention17.getAbstractMethodName();
        java.lang.String str21 = closureCodingConvention17.getGlobalObject();
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection22 = closureCodingConvention17.getAssertionFunctions();
        boolean boolean24 = closureCodingConvention17.isConstant("goog.global");
        com.google.javascript.rhino.Node node25 = null;
        com.google.javascript.jscomp.CodingConvention.DelegateRelationship delegateRelationship26 = closureCodingConvention17.getDelegateRelationship(node25);
        com.google.javascript.rhino.jstype.ObjectType objectType27 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType28 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType29 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType30 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType31 = null;
        closureCodingConvention17.applyDelegateRelationship(objectType27, objectType28, objectType29, functionType30, functionType31);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry33 = null;
        com.google.javascript.jscomp.Scope scope34 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention35 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node36 = null;
        boolean boolean37 = closureCodingConvention35.isOptionalParameter(node36);
        boolean boolean39 = closureCodingConvention35.isSuperClassReference("hi!");
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry40 = null;
        com.google.javascript.jscomp.Scope scope41 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention42 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node43 = null;
        boolean boolean44 = closureCodingConvention42.isOptionalParameter(node43);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry45 = null;
        com.google.javascript.jscomp.Scope scope46 = null;
        com.google.javascript.rhino.jstype.ObjectType[] objectTypeArray47 = new com.google.javascript.rhino.jstype.ObjectType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType> objectTypeList48 = new java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList48, objectTypeArray47);
        java.util.Map<java.lang.String, java.lang.String> strMap50 = null;
        closureCodingConvention42.defineDelegateProxyPrototypeProperties(jSTypeRegistry45, scope46, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList48, strMap50);
        java.util.Map<java.lang.String, java.lang.String> strMap52 = null;
        closureCodingConvention35.defineDelegateProxyPrototypeProperties(jSTypeRegistry40, scope41, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList48, strMap52);
        java.util.Map<java.lang.String, java.lang.String> strMap54 = null;
        closureCodingConvention17.defineDelegateProxyPrototypeProperties(jSTypeRegistry33, scope34, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList48, strMap54);
        java.util.Map<java.lang.String, java.lang.String> strMap56 = null;
        closureCodingConvention8.defineDelegateProxyPrototypeProperties(jSTypeRegistry15, scope16, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList48, strMap56);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry58 = null;
        com.google.javascript.jscomp.Scope scope59 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention60 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node61 = null;
        boolean boolean62 = closureCodingConvention60.isOptionalParameter(node61);
        boolean boolean64 = closureCodingConvention60.isSuperClassReference("hi!");
        com.google.javascript.rhino.Node node65 = null;
        boolean boolean66 = closureCodingConvention60.isOptionalParameter(node65);
        boolean boolean68 = closureCodingConvention60.isConstantKey("hi!");
        com.google.javascript.rhino.Node node69 = null;
        boolean boolean70 = closureCodingConvention60.isVarArgsParameter(node69);
        boolean boolean72 = closureCodingConvention60.isExported("");
        com.google.javascript.rhino.Node node73 = null;
        boolean boolean74 = closureCodingConvention60.isVarArgsParameter(node73);
        java.lang.String str75 = closureCodingConvention60.getExportSymbolFunction();
        java.lang.String str76 = closureCodingConvention60.getAbstractMethodName();
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry77 = null;
        com.google.javascript.jscomp.Scope scope78 = null;
        com.google.javascript.rhino.jstype.ObjectType[] objectTypeArray79 = new com.google.javascript.rhino.jstype.ObjectType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType> objectTypeList80 = new java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType>();
        boolean boolean81 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList80, objectTypeArray79);
        java.util.Map<java.lang.String, java.lang.String> strMap82 = null;
        closureCodingConvention60.defineDelegateProxyPrototypeProperties(jSTypeRegistry77, scope78, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList80, strMap82);
        java.util.Map<java.lang.String, java.lang.String> strMap84 = null;
        closureCodingConvention8.defineDelegateProxyPrototypeProperties(jSTypeRegistry58, scope59, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList80, strMap84);
        java.util.Map<java.lang.String, java.lang.String> strMap86 = null;
        closureCodingConvention0.defineDelegateProxyPrototypeProperties(jSTypeRegistry6, scope7, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList80, strMap86);
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection1);
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "goog.abstractMethod" + "'", str20, "goog.abstractMethod");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "goog.global" + "'", str21, "goog.global");
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(delegateRelationship26);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(objectTypeArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "goog.exportSymbol" + "'", str75, "goog.exportSymbol");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "goog.abstractMethod" + "'", str76, "goog.abstractMethod");
        org.junit.Assert.assertNotNull(objectTypeArray79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
    }

    @Test
    public void test0658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0658");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        boolean boolean4 = closureCodingConvention0.isSuperClassReference("hi!");
        boolean boolean6 = closureCodingConvention0.isSuperClassReference("goog.global");
        boolean boolean8 = closureCodingConvention0.isConstant("goog.abstractMethod");
        boolean boolean10 = closureCodingConvention0.isValidEnumKey("hi!");
        boolean boolean12 = closureCodingConvention0.isSuperClassReference("goog.global");
        boolean boolean14 = closureCodingConvention0.isPrivate("goog.abstractMethod");
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection15 = closureCodingConvention0.getAssertionFunctions();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection15);
    }

    @Test
    public void test0659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0659");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        boolean boolean4 = closureCodingConvention0.isSuperClassReference("hi!");
        boolean boolean6 = closureCodingConvention0.isValidEnumKey("");
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry7 = null;
        com.google.javascript.jscomp.Scope scope8 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention9 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node10 = null;
        boolean boolean11 = closureCodingConvention9.isOptionalParameter(node10);
        java.lang.String str12 = closureCodingConvention9.getAbstractMethodName();
        java.lang.String str13 = closureCodingConvention9.getGlobalObject();
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection14 = closureCodingConvention9.getAssertionFunctions();
        boolean boolean16 = closureCodingConvention9.isConstant("goog.global");
        com.google.javascript.rhino.Node node17 = null;
        com.google.javascript.jscomp.CodingConvention.DelegateRelationship delegateRelationship18 = closureCodingConvention9.getDelegateRelationship(node17);
        com.google.javascript.rhino.jstype.ObjectType objectType19 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType20 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType21 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType22 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType23 = null;
        closureCodingConvention9.applyDelegateRelationship(objectType19, objectType20, objectType21, functionType22, functionType23);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry25 = null;
        com.google.javascript.jscomp.Scope scope26 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention27 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node28 = null;
        boolean boolean29 = closureCodingConvention27.isOptionalParameter(node28);
        boolean boolean31 = closureCodingConvention27.isSuperClassReference("hi!");
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry32 = null;
        com.google.javascript.jscomp.Scope scope33 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention34 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node35 = null;
        boolean boolean36 = closureCodingConvention34.isOptionalParameter(node35);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry37 = null;
        com.google.javascript.jscomp.Scope scope38 = null;
        com.google.javascript.rhino.jstype.ObjectType[] objectTypeArray39 = new com.google.javascript.rhino.jstype.ObjectType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType> objectTypeList40 = new java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList40, objectTypeArray39);
        java.util.Map<java.lang.String, java.lang.String> strMap42 = null;
        closureCodingConvention34.defineDelegateProxyPrototypeProperties(jSTypeRegistry37, scope38, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList40, strMap42);
        java.util.Map<java.lang.String, java.lang.String> strMap44 = null;
        closureCodingConvention27.defineDelegateProxyPrototypeProperties(jSTypeRegistry32, scope33, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList40, strMap44);
        java.util.Map<java.lang.String, java.lang.String> strMap46 = null;
        closureCodingConvention9.defineDelegateProxyPrototypeProperties(jSTypeRegistry25, scope26, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList40, strMap46);
        java.util.Map<java.lang.String, java.lang.String> strMap48 = null;
        closureCodingConvention0.defineDelegateProxyPrototypeProperties(jSTypeRegistry7, scope8, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList40, strMap48);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry50 = null;
        com.google.javascript.jscomp.Scope scope51 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention52 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node53 = null;
        boolean boolean54 = closureCodingConvention52.isOptionalParameter(node53);
        boolean boolean56 = closureCodingConvention52.isSuperClassReference("hi!");
        com.google.javascript.rhino.Node node57 = null;
        boolean boolean58 = closureCodingConvention52.isOptionalParameter(node57);
        boolean boolean60 = closureCodingConvention52.isConstantKey("hi!");
        com.google.javascript.rhino.Node node61 = null;
        boolean boolean62 = closureCodingConvention52.isVarArgsParameter(node61);
        boolean boolean64 = closureCodingConvention52.isExported("");
        com.google.javascript.rhino.Node node65 = null;
        boolean boolean66 = closureCodingConvention52.isVarArgsParameter(node65);
        java.lang.String str67 = closureCodingConvention52.getExportSymbolFunction();
        java.lang.String str68 = closureCodingConvention52.getAbstractMethodName();
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry69 = null;
        com.google.javascript.jscomp.Scope scope70 = null;
        com.google.javascript.rhino.jstype.ObjectType[] objectTypeArray71 = new com.google.javascript.rhino.jstype.ObjectType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType> objectTypeList72 = new java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType>();
        boolean boolean73 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList72, objectTypeArray71);
        java.util.Map<java.lang.String, java.lang.String> strMap74 = null;
        closureCodingConvention52.defineDelegateProxyPrototypeProperties(jSTypeRegistry69, scope70, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList72, strMap74);
        java.util.Map<java.lang.String, java.lang.String> strMap76 = null;
        closureCodingConvention0.defineDelegateProxyPrototypeProperties(jSTypeRegistry50, scope51, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList72, strMap76);
        com.google.javascript.rhino.Node node78 = null;
        com.google.javascript.rhino.Node node79 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str80 = closureCodingConvention0.extractClassNameIfRequire(node78, node79);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "goog.abstractMethod" + "'", str12, "goog.abstractMethod");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "goog.global" + "'", str13, "goog.global");
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(delegateRelationship18);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(objectTypeArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "goog.exportSymbol" + "'", str67, "goog.exportSymbol");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "goog.abstractMethod" + "'", str68, "goog.abstractMethod");
        org.junit.Assert.assertNotNull(objectTypeArray71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
    }

    @Test
    public void test0660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0660");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        java.lang.String str3 = closureCodingConvention0.getAbstractMethodName();
        boolean boolean5 = closureCodingConvention0.isConstant("goog.abstractMethod");
        boolean boolean7 = closureCodingConvention0.isValidEnumKey("hi!");
        com.google.javascript.rhino.Node node8 = null;
        com.google.javascript.jscomp.CodingConvention.DelegateRelationship delegateRelationship9 = closureCodingConvention0.getDelegateRelationship(node8);
        com.google.javascript.rhino.Node node10 = null;
        java.util.Map<java.lang.String, java.lang.String> strMap11 = null;
        closureCodingConvention0.checkForCallingConventionDefiningCalls(node10, strMap11);
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection13 = closureCodingConvention0.getAssertionFunctions();
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry14 = null;
        com.google.javascript.jscomp.Scope scope15 = null;
        com.google.javascript.rhino.jstype.ObjectType[] objectTypeArray16 = new com.google.javascript.rhino.jstype.ObjectType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType> objectTypeList17 = new java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList17, objectTypeArray16);
        java.util.Map<java.lang.String, java.lang.String> strMap19 = null;
        closureCodingConvention0.defineDelegateProxyPrototypeProperties(jSTypeRegistry14, scope15, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList17, strMap19);
        java.lang.String str21 = closureCodingConvention0.getExportPropertyFunction();
        com.google.javascript.rhino.Node node22 = null;
        com.google.javascript.rhino.Node node23 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str24 = closureCodingConvention0.extractClassNameIfProvide(node22, node23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "goog.abstractMethod" + "'", str3, "goog.abstractMethod");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNull(delegateRelationship9);
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection13);
        org.junit.Assert.assertNotNull(objectTypeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "goog.exportProperty" + "'", str21, "goog.exportProperty");
    }

    @Test
    public void test0661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0661");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        java.lang.String str3 = closureCodingConvention0.getAbstractMethodName();
        java.lang.String str4 = closureCodingConvention0.getGlobalObject();
        boolean boolean6 = closureCodingConvention0.isExported("goog.global");
        boolean boolean8 = closureCodingConvention0.isConstant("goog.abstractMethod");
        com.google.javascript.rhino.jstype.FunctionType functionType9 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType10 = null;
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType11 = null;
        closureCodingConvention0.applySubclassRelationship(functionType9, functionType10, subclassType11);
        boolean boolean15 = closureCodingConvention0.isExported("goog.abstractMethod", true);
        java.lang.String str16 = closureCodingConvention0.getGlobalObject();
        com.google.javascript.rhino.Node node17 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.String> strList18 = closureCodingConvention0.identifyTypeDeclarationCall(node17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "goog.abstractMethod" + "'", str3, "goog.abstractMethod");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "goog.global" + "'", str4, "goog.global");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "goog.global" + "'", str16, "goog.global");
    }

    @Test
    public void test0662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0662");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry3 = null;
        com.google.javascript.jscomp.Scope scope4 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention5 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node6 = null;
        boolean boolean7 = closureCodingConvention5.isOptionalParameter(node6);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry8 = null;
        com.google.javascript.jscomp.Scope scope9 = null;
        com.google.javascript.rhino.jstype.ObjectType[] objectTypeArray10 = new com.google.javascript.rhino.jstype.ObjectType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType> objectTypeList11 = new java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList11, objectTypeArray10);
        java.util.Map<java.lang.String, java.lang.String> strMap13 = null;
        closureCodingConvention5.defineDelegateProxyPrototypeProperties(jSTypeRegistry8, scope9, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList11, strMap13);
        java.util.Map<java.lang.String, java.lang.String> strMap15 = null;
        closureCodingConvention0.defineDelegateProxyPrototypeProperties(jSTypeRegistry3, scope4, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList11, strMap15);
        com.google.javascript.rhino.Node node17 = null;
        java.util.Map<java.lang.String, java.lang.String> strMap18 = null;
        closureCodingConvention0.checkForCallingConventionDefiningCalls(node17, strMap18);
        boolean boolean21 = closureCodingConvention0.isValidEnumKey("goog.exportSymbol");
        com.google.javascript.rhino.Node node22 = null;
        com.google.javascript.jscomp.CodingConvention.DelegateRelationship delegateRelationship23 = closureCodingConvention0.getDelegateRelationship(node22);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(objectTypeArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNull(delegateRelationship23);
    }

    @Test
    public void test0663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0663");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        boolean boolean2 = closureCodingConvention0.isValidEnumKey("goog.abstractMethod");
        java.lang.String str3 = closureCodingConvention0.getExportPropertyFunction();
        java.lang.String str4 = closureCodingConvention0.getExportPropertyFunction();
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection5 = closureCodingConvention0.getAssertionFunctions();
        com.google.javascript.rhino.Node node6 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.jscomp.CodingConvention.Bind bind7 = closureCodingConvention0.describeFunctionBind(node6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "goog.exportProperty" + "'", str3, "goog.exportProperty");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "goog.exportProperty" + "'", str4, "goog.exportProperty");
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection5);
    }

    @Test
    public void test0664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0664");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        boolean boolean2 = closureCodingConvention0.isValidEnumKey("goog.abstractMethod");
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection3 = closureCodingConvention0.getAssertionFunctions();
        com.google.javascript.rhino.Node node4 = null;
        boolean boolean5 = closureCodingConvention0.isVarArgsParameter(node4);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry6 = null;
        com.google.javascript.jscomp.Scope scope7 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention8 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node9 = null;
        boolean boolean10 = closureCodingConvention8.isOptionalParameter(node9);
        java.lang.String str11 = closureCodingConvention8.getAbstractMethodName();
        java.lang.String str12 = closureCodingConvention8.getGlobalObject();
        com.google.javascript.rhino.Node node13 = null;
        java.util.Map<java.lang.String, java.lang.String> strMap14 = null;
        closureCodingConvention8.checkForCallingConventionDefiningCalls(node13, strMap14);
        com.google.javascript.rhino.Node node16 = null;
        com.google.javascript.jscomp.CodingConvention.DelegateRelationship delegateRelationship17 = closureCodingConvention8.getDelegateRelationship(node16);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry18 = null;
        com.google.javascript.jscomp.Scope scope19 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention20 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node21 = null;
        boolean boolean22 = closureCodingConvention20.isOptionalParameter(node21);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry23 = null;
        com.google.javascript.jscomp.Scope scope24 = null;
        com.google.javascript.rhino.jstype.ObjectType[] objectTypeArray25 = new com.google.javascript.rhino.jstype.ObjectType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType> objectTypeList26 = new java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList26, objectTypeArray25);
        java.util.Map<java.lang.String, java.lang.String> strMap28 = null;
        closureCodingConvention20.defineDelegateProxyPrototypeProperties(jSTypeRegistry23, scope24, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList26, strMap28);
        java.util.Map<java.lang.String, java.lang.String> strMap30 = null;
        closureCodingConvention8.defineDelegateProxyPrototypeProperties(jSTypeRegistry18, scope19, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList26, strMap30);
        java.util.Map<java.lang.String, java.lang.String> strMap32 = null;
        closureCodingConvention0.defineDelegateProxyPrototypeProperties(jSTypeRegistry6, scope7, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList26, strMap32);
        com.google.javascript.rhino.jstype.FunctionType functionType34 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType35 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType36 = null;
        // The following exception was thrown during execution in test generation
        try {
            closureCodingConvention0.applySingletonGetter(functionType34, functionType35, objectType36);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "goog.abstractMethod" + "'", str11, "goog.abstractMethod");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "goog.global" + "'", str12, "goog.global");
        org.junit.Assert.assertNull(delegateRelationship17);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(objectTypeArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test0665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0665");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        java.lang.String str3 = closureCodingConvention0.getAbstractMethodName();
        java.lang.String str4 = closureCodingConvention0.getGlobalObject();
        com.google.javascript.rhino.Node node5 = null;
        com.google.javascript.jscomp.CodingConvention.DelegateRelationship delegateRelationship6 = closureCodingConvention0.getDelegateRelationship(node5);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry7 = null;
        com.google.javascript.jscomp.Scope scope8 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention9 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node10 = null;
        boolean boolean11 = closureCodingConvention9.isOptionalParameter(node10);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry12 = null;
        com.google.javascript.jscomp.Scope scope13 = null;
        com.google.javascript.rhino.jstype.ObjectType[] objectTypeArray14 = new com.google.javascript.rhino.jstype.ObjectType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType> objectTypeList15 = new java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList15, objectTypeArray14);
        java.util.Map<java.lang.String, java.lang.String> strMap17 = null;
        closureCodingConvention9.defineDelegateProxyPrototypeProperties(jSTypeRegistry12, scope13, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList15, strMap17);
        java.util.Map<java.lang.String, java.lang.String> strMap19 = null;
        closureCodingConvention0.defineDelegateProxyPrototypeProperties(jSTypeRegistry7, scope8, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList15, strMap19);
        com.google.javascript.rhino.jstype.FunctionType functionType21 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType22 = null;
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType23 = null;
        closureCodingConvention0.applySubclassRelationship(functionType21, functionType22, subclassType23);
        com.google.javascript.rhino.Node node25 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship26 = closureCodingConvention0.getClassesDefinedByCall(node25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "goog.abstractMethod" + "'", str3, "goog.abstractMethod");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "goog.global" + "'", str4, "goog.global");
        org.junit.Assert.assertNull(delegateRelationship6);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(objectTypeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test0666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0666");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        boolean boolean2 = closureCodingConvention0.isExported("goog.global");
        boolean boolean4 = closureCodingConvention0.isConstant("goog.exportProperty");
        java.lang.String str5 = closureCodingConvention0.getAbstractMethodName();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "goog.abstractMethod" + "'", str5, "goog.abstractMethod");
    }

    @Test
    public void test0667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0667");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry3 = null;
        com.google.javascript.jscomp.Scope scope4 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention5 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node6 = null;
        boolean boolean7 = closureCodingConvention5.isOptionalParameter(node6);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry8 = null;
        com.google.javascript.jscomp.Scope scope9 = null;
        com.google.javascript.rhino.jstype.ObjectType[] objectTypeArray10 = new com.google.javascript.rhino.jstype.ObjectType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType> objectTypeList11 = new java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList11, objectTypeArray10);
        java.util.Map<java.lang.String, java.lang.String> strMap13 = null;
        closureCodingConvention5.defineDelegateProxyPrototypeProperties(jSTypeRegistry8, scope9, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList11, strMap13);
        java.util.Map<java.lang.String, java.lang.String> strMap15 = null;
        closureCodingConvention0.defineDelegateProxyPrototypeProperties(jSTypeRegistry3, scope4, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList11, strMap15);
        com.google.javascript.rhino.Node node17 = null;
        java.util.Map<java.lang.String, java.lang.String> strMap18 = null;
        closureCodingConvention0.checkForCallingConventionDefiningCalls(node17, strMap18);
        boolean boolean21 = closureCodingConvention0.isExported("goog.global");
        boolean boolean23 = closureCodingConvention0.isExported("goog.global");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(objectTypeArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test0668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0668");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry3 = null;
        com.google.javascript.jscomp.Scope scope4 = null;
        com.google.javascript.rhino.jstype.ObjectType[] objectTypeArray5 = new com.google.javascript.rhino.jstype.ObjectType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType> objectTypeList6 = new java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList6, objectTypeArray5);
        java.util.Map<java.lang.String, java.lang.String> strMap8 = null;
        closureCodingConvention0.defineDelegateProxyPrototypeProperties(jSTypeRegistry3, scope4, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList6, strMap8);
        com.google.javascript.rhino.Node node10 = null;
        boolean boolean11 = closureCodingConvention0.isVarArgsParameter(node10);
        boolean boolean13 = closureCodingConvention0.isConstantKey("");
        java.lang.String str14 = closureCodingConvention0.getAbstractMethodName();
        boolean boolean17 = closureCodingConvention0.isExported("goog.abstractMethod", true);
        com.google.javascript.rhino.Node node18 = null;
        boolean boolean19 = closureCodingConvention0.isVarArgsParameter(node18);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(objectTypeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "goog.abstractMethod" + "'", str14, "goog.abstractMethod");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test0669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0669");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        boolean boolean4 = closureCodingConvention0.isSuperClassReference("hi!");
        com.google.javascript.rhino.Node node5 = null;
        boolean boolean6 = closureCodingConvention0.isOptionalParameter(node5);
        java.lang.String str7 = closureCodingConvention0.getExportPropertyFunction();
        java.lang.String str8 = closureCodingConvention0.getGlobalObject();
        java.lang.String str9 = closureCodingConvention0.getAbstractMethodName();
        boolean boolean11 = closureCodingConvention0.isConstant("hi!");
        boolean boolean14 = closureCodingConvention0.isExported("goog.abstractMethod", true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "goog.exportProperty" + "'", str7, "goog.exportProperty");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "goog.global" + "'", str8, "goog.global");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "goog.abstractMethod" + "'", str9, "goog.abstractMethod");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test0670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0670");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        boolean boolean4 = closureCodingConvention0.isSuperClassReference("hi!");
        com.google.javascript.rhino.Node node5 = null;
        boolean boolean6 = closureCodingConvention0.isOptionalParameter(node5);
        boolean boolean8 = closureCodingConvention0.isExported("hi!");
        java.lang.String str9 = closureCodingConvention0.getExportPropertyFunction();
        java.lang.String str10 = closureCodingConvention0.getDelegateSuperclassName();
        boolean boolean13 = closureCodingConvention0.isExported("", false);
        boolean boolean15 = closureCodingConvention0.isSuperClassReference("goog.exportSymbol");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "goog.exportProperty" + "'", str9, "goog.exportProperty");
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test0671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0671");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        java.lang.String str3 = closureCodingConvention0.getAbstractMethodName();
        java.lang.String str4 = closureCodingConvention0.getGlobalObject();
        boolean boolean6 = closureCodingConvention0.isExported("goog.global");
        boolean boolean8 = closureCodingConvention0.isConstant("goog.abstractMethod");
        java.lang.String str9 = closureCodingConvention0.getExportPropertyFunction();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "goog.abstractMethod" + "'", str3, "goog.abstractMethod");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "goog.global" + "'", str4, "goog.global");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "goog.exportProperty" + "'", str9, "goog.exportProperty");
    }

    @Test
    public void test0672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0672");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry3 = null;
        com.google.javascript.jscomp.Scope scope4 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention5 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node6 = null;
        boolean boolean7 = closureCodingConvention5.isOptionalParameter(node6);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry8 = null;
        com.google.javascript.jscomp.Scope scope9 = null;
        com.google.javascript.rhino.jstype.ObjectType[] objectTypeArray10 = new com.google.javascript.rhino.jstype.ObjectType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType> objectTypeList11 = new java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList11, objectTypeArray10);
        java.util.Map<java.lang.String, java.lang.String> strMap13 = null;
        closureCodingConvention5.defineDelegateProxyPrototypeProperties(jSTypeRegistry8, scope9, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList11, strMap13);
        java.util.Map<java.lang.String, java.lang.String> strMap15 = null;
        closureCodingConvention0.defineDelegateProxyPrototypeProperties(jSTypeRegistry3, scope4, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList11, strMap15);
        java.lang.String str17 = closureCodingConvention0.getDelegateSuperclassName();
        boolean boolean19 = closureCodingConvention0.isPrivate("");
        com.google.javascript.rhino.Node node20 = null;
        com.google.javascript.rhino.Node node21 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str22 = closureCodingConvention0.extractClassNameIfRequire(node20, node21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(objectTypeArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test0673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0673");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry3 = null;
        com.google.javascript.jscomp.Scope scope4 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention5 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node6 = null;
        boolean boolean7 = closureCodingConvention5.isOptionalParameter(node6);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry8 = null;
        com.google.javascript.jscomp.Scope scope9 = null;
        com.google.javascript.rhino.jstype.ObjectType[] objectTypeArray10 = new com.google.javascript.rhino.jstype.ObjectType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType> objectTypeList11 = new java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList11, objectTypeArray10);
        java.util.Map<java.lang.String, java.lang.String> strMap13 = null;
        closureCodingConvention5.defineDelegateProxyPrototypeProperties(jSTypeRegistry8, scope9, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList11, strMap13);
        java.util.Map<java.lang.String, java.lang.String> strMap15 = null;
        closureCodingConvention0.defineDelegateProxyPrototypeProperties(jSTypeRegistry3, scope4, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList11, strMap15);
        boolean boolean18 = closureCodingConvention0.isConstant("goog.abstractMethod");
        boolean boolean20 = closureCodingConvention0.isSuperClassReference("goog.global");
        com.google.javascript.rhino.Node node21 = null;
        com.google.javascript.rhino.Node node22 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str23 = closureCodingConvention0.extractClassNameIfRequire(node21, node22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(objectTypeArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test0674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0674");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        boolean boolean4 = closureCodingConvention0.isPrivate("goog.exportSymbol");
        com.google.javascript.rhino.Node node5 = null;
        com.google.javascript.jscomp.CodingConvention.DelegateRelationship delegateRelationship6 = closureCodingConvention0.getDelegateRelationship(node5);
        boolean boolean8 = closureCodingConvention0.isSuperClassReference("goog.global");
        com.google.javascript.rhino.Node node9 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.jscomp.CodingConvention.Bind bind10 = closureCodingConvention0.describeFunctionBind(node9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(delegateRelationship6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test0675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0675");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection1 = closureCodingConvention0.getAssertionFunctions();
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection2 = closureCodingConvention0.getAssertionFunctions();
        boolean boolean4 = closureCodingConvention0.isSuperClassReference("goog.exportProperty");
        boolean boolean6 = closureCodingConvention0.isPrivate("hi!");
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection1);
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test0676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0676");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry3 = null;
        com.google.javascript.jscomp.Scope scope4 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention5 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node6 = null;
        boolean boolean7 = closureCodingConvention5.isOptionalParameter(node6);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry8 = null;
        com.google.javascript.jscomp.Scope scope9 = null;
        com.google.javascript.rhino.jstype.ObjectType[] objectTypeArray10 = new com.google.javascript.rhino.jstype.ObjectType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType> objectTypeList11 = new java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList11, objectTypeArray10);
        java.util.Map<java.lang.String, java.lang.String> strMap13 = null;
        closureCodingConvention5.defineDelegateProxyPrototypeProperties(jSTypeRegistry8, scope9, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList11, strMap13);
        java.util.Map<java.lang.String, java.lang.String> strMap15 = null;
        closureCodingConvention0.defineDelegateProxyPrototypeProperties(jSTypeRegistry3, scope4, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList11, strMap15);
        com.google.javascript.rhino.Node node17 = null;
        com.google.javascript.jscomp.CodingConvention.DelegateRelationship delegateRelationship18 = closureCodingConvention0.getDelegateRelationship(node17);
        boolean boolean20 = closureCodingConvention0.isConstantKey("");
        java.lang.String str21 = closureCodingConvention0.getDelegateSuperclassName();
        boolean boolean23 = closureCodingConvention0.isExported("");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(objectTypeArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(delegateRelationship18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test0677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0677");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        boolean boolean4 = closureCodingConvention0.isSuperClassReference("hi!");
        boolean boolean6 = closureCodingConvention0.isSuperClassReference("goog.global");
        boolean boolean8 = closureCodingConvention0.isConstant("goog.abstractMethod");
        boolean boolean10 = closureCodingConvention0.isValidEnumKey("hi!");
        boolean boolean12 = closureCodingConvention0.isSuperClassReference("goog.global");
        boolean boolean14 = closureCodingConvention0.isPrivate("goog.abstractMethod");
        boolean boolean16 = closureCodingConvention0.isValidEnumKey("");
        java.lang.String str17 = closureCodingConvention0.getGlobalObject();
        com.google.javascript.rhino.Node node18 = null;
        boolean boolean19 = closureCodingConvention0.isOptionalParameter(node18);
        com.google.javascript.rhino.Node node20 = null;
        boolean boolean21 = closureCodingConvention0.isOptionalParameter(node20);
        boolean boolean23 = closureCodingConvention0.isSuperClassReference("goog.exportSymbol");
        java.lang.String str24 = closureCodingConvention0.getAbstractMethodName();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "goog.global" + "'", str17, "goog.global");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "goog.abstractMethod" + "'", str24, "goog.abstractMethod");
    }

    @Test
    public void test0678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0678");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        java.lang.String str3 = closureCodingConvention0.getAbstractMethodName();
        java.lang.String str4 = closureCodingConvention0.getGlobalObject();
        boolean boolean6 = closureCodingConvention0.isExported("goog.global");
        com.google.javascript.rhino.Node node7 = null;
        com.google.javascript.jscomp.CodingConvention.DelegateRelationship delegateRelationship8 = closureCodingConvention0.getDelegateRelationship(node7);
        com.google.javascript.rhino.Node node9 = null;
        com.google.javascript.jscomp.CodingConvention.DelegateRelationship delegateRelationship10 = closureCodingConvention0.getDelegateRelationship(node9);
        com.google.javascript.rhino.Node node11 = null;
        com.google.javascript.jscomp.CodingConvention.DelegateRelationship delegateRelationship12 = closureCodingConvention0.getDelegateRelationship(node11);
        boolean boolean14 = closureCodingConvention0.isConstant("goog.exportProperty");
        boolean boolean16 = closureCodingConvention0.isSuperClassReference("hi!");
        com.google.javascript.jscomp.NodeTraversal nodeTraversal17 = null;
        com.google.javascript.rhino.Node node18 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.jscomp.CodingConvention.ObjectLiteralCast objectLiteralCast19 = closureCodingConvention0.getObjectLiteralCast(nodeTraversal17, node18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "goog.abstractMethod" + "'", str3, "goog.abstractMethod");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "goog.global" + "'", str4, "goog.global");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(delegateRelationship8);
        org.junit.Assert.assertNull(delegateRelationship10);
        org.junit.Assert.assertNull(delegateRelationship12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test0679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0679");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        java.lang.String str3 = closureCodingConvention0.getAbstractMethodName();
        java.lang.String str4 = closureCodingConvention0.getGlobalObject();
        boolean boolean6 = closureCodingConvention0.isExported("goog.global");
        boolean boolean8 = closureCodingConvention0.isConstant("goog.abstractMethod");
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry9 = null;
        com.google.javascript.jscomp.Scope scope10 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention11 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node12 = null;
        boolean boolean13 = closureCodingConvention11.isOptionalParameter(node12);
        java.lang.String str14 = closureCodingConvention11.getAbstractMethodName();
        java.lang.String str15 = closureCodingConvention11.getGlobalObject();
        com.google.javascript.rhino.Node node16 = null;
        com.google.javascript.jscomp.CodingConvention.DelegateRelationship delegateRelationship17 = closureCodingConvention11.getDelegateRelationship(node16);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry18 = null;
        com.google.javascript.jscomp.Scope scope19 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention20 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node21 = null;
        boolean boolean22 = closureCodingConvention20.isOptionalParameter(node21);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry23 = null;
        com.google.javascript.jscomp.Scope scope24 = null;
        com.google.javascript.rhino.jstype.ObjectType[] objectTypeArray25 = new com.google.javascript.rhino.jstype.ObjectType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType> objectTypeList26 = new java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList26, objectTypeArray25);
        java.util.Map<java.lang.String, java.lang.String> strMap28 = null;
        closureCodingConvention20.defineDelegateProxyPrototypeProperties(jSTypeRegistry23, scope24, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList26, strMap28);
        java.util.Map<java.lang.String, java.lang.String> strMap30 = null;
        closureCodingConvention11.defineDelegateProxyPrototypeProperties(jSTypeRegistry18, scope19, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList26, strMap30);
        java.util.Map<java.lang.String, java.lang.String> strMap32 = null;
        closureCodingConvention0.defineDelegateProxyPrototypeProperties(jSTypeRegistry9, scope10, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList26, strMap32);
        java.lang.String str34 = closureCodingConvention0.getExportSymbolFunction();
        java.lang.String str35 = closureCodingConvention0.getExportSymbolFunction();
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry36 = null;
        com.google.javascript.jscomp.Scope scope37 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention38 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node39 = null;
        boolean boolean40 = closureCodingConvention38.isOptionalParameter(node39);
        boolean boolean42 = closureCodingConvention38.isSuperClassReference("hi!");
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry43 = null;
        com.google.javascript.jscomp.Scope scope44 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention45 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node46 = null;
        boolean boolean47 = closureCodingConvention45.isOptionalParameter(node46);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry48 = null;
        com.google.javascript.jscomp.Scope scope49 = null;
        com.google.javascript.rhino.jstype.ObjectType[] objectTypeArray50 = new com.google.javascript.rhino.jstype.ObjectType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType> objectTypeList51 = new java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList51, objectTypeArray50);
        java.util.Map<java.lang.String, java.lang.String> strMap53 = null;
        closureCodingConvention45.defineDelegateProxyPrototypeProperties(jSTypeRegistry48, scope49, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList51, strMap53);
        java.util.Map<java.lang.String, java.lang.String> strMap55 = null;
        closureCodingConvention38.defineDelegateProxyPrototypeProperties(jSTypeRegistry43, scope44, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList51, strMap55);
        java.util.Map<java.lang.String, java.lang.String> strMap57 = null;
        closureCodingConvention0.defineDelegateProxyPrototypeProperties(jSTypeRegistry36, scope37, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList51, strMap57);
        com.google.javascript.rhino.jstype.FunctionType functionType59 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType60 = null;
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType61 = null;
        closureCodingConvention0.applySubclassRelationship(functionType59, functionType60, subclassType61);
        boolean boolean64 = closureCodingConvention0.isPrivate("hi!");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "goog.abstractMethod" + "'", str3, "goog.abstractMethod");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "goog.global" + "'", str4, "goog.global");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "goog.abstractMethod" + "'", str14, "goog.abstractMethod");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "goog.global" + "'", str15, "goog.global");
        org.junit.Assert.assertNull(delegateRelationship17);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(objectTypeArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "goog.exportSymbol" + "'", str34, "goog.exportSymbol");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "goog.exportSymbol" + "'", str35, "goog.exportSymbol");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(objectTypeArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
    }

    @Test
    public void test0680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0680");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        java.lang.String str3 = closureCodingConvention0.getAbstractMethodName();
        java.lang.String str4 = closureCodingConvention0.getGlobalObject();
        boolean boolean6 = closureCodingConvention0.isExported("goog.global");
        com.google.javascript.rhino.Node node7 = null;
        com.google.javascript.jscomp.CodingConvention.DelegateRelationship delegateRelationship8 = closureCodingConvention0.getDelegateRelationship(node7);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry9 = null;
        com.google.javascript.jscomp.Scope scope10 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention11 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node12 = null;
        boolean boolean13 = closureCodingConvention11.isOptionalParameter(node12);
        java.lang.String str14 = closureCodingConvention11.getAbstractMethodName();
        java.lang.String str15 = closureCodingConvention11.getGlobalObject();
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection16 = closureCodingConvention11.getAssertionFunctions();
        boolean boolean18 = closureCodingConvention11.isConstant("goog.global");
        boolean boolean20 = closureCodingConvention11.isSuperClassReference("goog.exportProperty");
        com.google.javascript.rhino.jstype.FunctionType functionType21 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType22 = null;
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType23 = null;
        closureCodingConvention11.applySubclassRelationship(functionType21, functionType22, subclassType23);
        boolean boolean26 = closureCodingConvention11.isSuperClassReference("goog.global");
        boolean boolean29 = closureCodingConvention11.isExported("hi!", false);
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection30 = closureCodingConvention11.getAssertionFunctions();
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry31 = null;
        com.google.javascript.jscomp.Scope scope32 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention33 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node34 = null;
        boolean boolean35 = closureCodingConvention33.isOptionalParameter(node34);
        java.lang.String str36 = closureCodingConvention33.getAbstractMethodName();
        java.lang.String str37 = closureCodingConvention33.getGlobalObject();
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection38 = closureCodingConvention33.getAssertionFunctions();
        boolean boolean40 = closureCodingConvention33.isConstant("goog.global");
        com.google.javascript.rhino.Node node41 = null;
        com.google.javascript.jscomp.CodingConvention.DelegateRelationship delegateRelationship42 = closureCodingConvention33.getDelegateRelationship(node41);
        com.google.javascript.rhino.jstype.ObjectType objectType43 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType44 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType45 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType46 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType47 = null;
        closureCodingConvention33.applyDelegateRelationship(objectType43, objectType44, objectType45, functionType46, functionType47);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry49 = null;
        com.google.javascript.jscomp.Scope scope50 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention51 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node52 = null;
        boolean boolean53 = closureCodingConvention51.isOptionalParameter(node52);
        boolean boolean55 = closureCodingConvention51.isSuperClassReference("hi!");
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry56 = null;
        com.google.javascript.jscomp.Scope scope57 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention58 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node59 = null;
        boolean boolean60 = closureCodingConvention58.isOptionalParameter(node59);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry61 = null;
        com.google.javascript.jscomp.Scope scope62 = null;
        com.google.javascript.rhino.jstype.ObjectType[] objectTypeArray63 = new com.google.javascript.rhino.jstype.ObjectType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType> objectTypeList64 = new java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList64, objectTypeArray63);
        java.util.Map<java.lang.String, java.lang.String> strMap66 = null;
        closureCodingConvention58.defineDelegateProxyPrototypeProperties(jSTypeRegistry61, scope62, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList64, strMap66);
        java.util.Map<java.lang.String, java.lang.String> strMap68 = null;
        closureCodingConvention51.defineDelegateProxyPrototypeProperties(jSTypeRegistry56, scope57, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList64, strMap68);
        java.util.Map<java.lang.String, java.lang.String> strMap70 = null;
        closureCodingConvention33.defineDelegateProxyPrototypeProperties(jSTypeRegistry49, scope50, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList64, strMap70);
        java.util.Map<java.lang.String, java.lang.String> strMap72 = null;
        closureCodingConvention11.defineDelegateProxyPrototypeProperties(jSTypeRegistry31, scope32, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList64, strMap72);
        java.util.Map<java.lang.String, java.lang.String> strMap74 = null;
        closureCodingConvention0.defineDelegateProxyPrototypeProperties(jSTypeRegistry9, scope10, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList64, strMap74);
        boolean boolean77 = closureCodingConvention0.isValidEnumKey("hi!");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "goog.abstractMethod" + "'", str3, "goog.abstractMethod");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "goog.global" + "'", str4, "goog.global");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(delegateRelationship8);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "goog.abstractMethod" + "'", str14, "goog.abstractMethod");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "goog.global" + "'", str15, "goog.global");
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "goog.abstractMethod" + "'", str36, "goog.abstractMethod");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "goog.global" + "'", str37, "goog.global");
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNull(delegateRelationship42);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(objectTypeArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
    }

    @Test
    public void test0681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0681");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        java.lang.String str3 = closureCodingConvention0.getAbstractMethodName();
        java.lang.String str4 = closureCodingConvention0.getGlobalObject();
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection5 = closureCodingConvention0.getAssertionFunctions();
        boolean boolean7 = closureCodingConvention0.isConstant("goog.global");
        com.google.javascript.rhino.Node node8 = null;
        com.google.javascript.jscomp.CodingConvention.DelegateRelationship delegateRelationship9 = closureCodingConvention0.getDelegateRelationship(node8);
        com.google.javascript.rhino.jstype.ObjectType objectType10 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType11 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType12 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType13 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType14 = null;
        closureCodingConvention0.applyDelegateRelationship(objectType10, objectType11, objectType12, functionType13, functionType14);
        com.google.javascript.rhino.Node node16 = null;
        com.google.javascript.jscomp.CodingConvention.DelegateRelationship delegateRelationship17 = closureCodingConvention0.getDelegateRelationship(node16);
        java.lang.String str18 = closureCodingConvention0.getExportPropertyFunction();
        com.google.javascript.rhino.jstype.ObjectType objectType19 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType20 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType21 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType22 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType23 = null;
        closureCodingConvention0.applyDelegateRelationship(objectType19, objectType20, objectType21, functionType22, functionType23);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "goog.abstractMethod" + "'", str3, "goog.abstractMethod");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "goog.global" + "'", str4, "goog.global");
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(delegateRelationship9);
        org.junit.Assert.assertNull(delegateRelationship17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "goog.exportProperty" + "'", str18, "goog.exportProperty");
    }

    @Test
    public void test0682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0682");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        boolean boolean2 = closureCodingConvention0.isValidEnumKey("goog.abstractMethod");
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection3 = closureCodingConvention0.getAssertionFunctions();
        boolean boolean5 = closureCodingConvention0.isConstantKey("goog.exportProperty");
        com.google.javascript.rhino.Node node6 = null;
        java.util.Map<java.lang.String, java.lang.String> strMap7 = null;
        closureCodingConvention0.checkForCallingConventionDefiningCalls(node6, strMap7);
        boolean boolean10 = closureCodingConvention0.isConstant("");
        java.lang.String str11 = closureCodingConvention0.getAbstractMethodName();
        java.lang.String str12 = closureCodingConvention0.getExportSymbolFunction();
        boolean boolean14 = closureCodingConvention0.isPrivate("goog.abstractMethod");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "goog.abstractMethod" + "'", str11, "goog.abstractMethod");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "goog.exportSymbol" + "'", str12, "goog.exportSymbol");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test0683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0683");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        boolean boolean2 = closureCodingConvention0.isConstant("goog.exportProperty");
        java.lang.String str3 = closureCodingConvention0.getExportPropertyFunction();
        java.lang.String str4 = closureCodingConvention0.getDelegateSuperclassName();
        boolean boolean6 = closureCodingConvention0.isConstant("goog.abstractMethod");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "goog.exportProperty" + "'", str3, "goog.exportProperty");
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test0684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0684");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry3 = null;
        com.google.javascript.jscomp.Scope scope4 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention5 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node6 = null;
        boolean boolean7 = closureCodingConvention5.isOptionalParameter(node6);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry8 = null;
        com.google.javascript.jscomp.Scope scope9 = null;
        com.google.javascript.rhino.jstype.ObjectType[] objectTypeArray10 = new com.google.javascript.rhino.jstype.ObjectType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType> objectTypeList11 = new java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList11, objectTypeArray10);
        java.util.Map<java.lang.String, java.lang.String> strMap13 = null;
        closureCodingConvention5.defineDelegateProxyPrototypeProperties(jSTypeRegistry8, scope9, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList11, strMap13);
        java.util.Map<java.lang.String, java.lang.String> strMap15 = null;
        closureCodingConvention0.defineDelegateProxyPrototypeProperties(jSTypeRegistry3, scope4, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList11, strMap15);
        java.lang.String str17 = closureCodingConvention0.getDelegateSuperclassName();
        boolean boolean19 = closureCodingConvention0.isConstantKey("goog.abstractMethod");
        com.google.javascript.rhino.Node node20 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean21 = closureCodingConvention0.isPropertyTestFunction(node20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(objectTypeArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test0685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0685");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        java.lang.String str3 = closureCodingConvention0.getAbstractMethodName();
        java.lang.String str4 = closureCodingConvention0.getGlobalObject();
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection5 = closureCodingConvention0.getAssertionFunctions();
        boolean boolean7 = closureCodingConvention0.isConstant("goog.global");
        com.google.javascript.rhino.Node node8 = null;
        com.google.javascript.jscomp.CodingConvention.DelegateRelationship delegateRelationship9 = closureCodingConvention0.getDelegateRelationship(node8);
        com.google.javascript.rhino.jstype.ObjectType objectType10 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType11 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType12 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType13 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType14 = null;
        closureCodingConvention0.applyDelegateRelationship(objectType10, objectType11, objectType12, functionType13, functionType14);
        java.lang.String str16 = closureCodingConvention0.getGlobalObject();
        java.lang.String str17 = closureCodingConvention0.getExportSymbolFunction();
        com.google.javascript.rhino.Node node18 = null;
        java.util.Map<java.lang.String, java.lang.String> strMap19 = null;
        closureCodingConvention0.checkForCallingConventionDefiningCalls(node18, strMap19);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "goog.abstractMethod" + "'", str3, "goog.abstractMethod");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "goog.global" + "'", str4, "goog.global");
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(delegateRelationship9);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "goog.global" + "'", str16, "goog.global");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "goog.exportSymbol" + "'", str17, "goog.exportSymbol");
    }

    @Test
    public void test0686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0686");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        java.lang.String str3 = closureCodingConvention0.getAbstractMethodName();
        java.lang.String str4 = closureCodingConvention0.getGlobalObject();
        com.google.javascript.rhino.Node node5 = null;
        java.util.Map<java.lang.String, java.lang.String> strMap6 = null;
        closureCodingConvention0.checkForCallingConventionDefiningCalls(node5, strMap6);
        com.google.javascript.rhino.Node node8 = null;
        com.google.javascript.jscomp.CodingConvention.DelegateRelationship delegateRelationship9 = closureCodingConvention0.getDelegateRelationship(node8);
        com.google.javascript.rhino.Node node10 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship11 = closureCodingConvention0.getClassesDefinedByCall(node10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "goog.abstractMethod" + "'", str3, "goog.abstractMethod");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "goog.global" + "'", str4, "goog.global");
        org.junit.Assert.assertNull(delegateRelationship9);
    }

    @Test
    public void test0687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0687");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry3 = null;
        com.google.javascript.jscomp.Scope scope4 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention5 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node6 = null;
        boolean boolean7 = closureCodingConvention5.isOptionalParameter(node6);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry8 = null;
        com.google.javascript.jscomp.Scope scope9 = null;
        com.google.javascript.rhino.jstype.ObjectType[] objectTypeArray10 = new com.google.javascript.rhino.jstype.ObjectType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType> objectTypeList11 = new java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList11, objectTypeArray10);
        java.util.Map<java.lang.String, java.lang.String> strMap13 = null;
        closureCodingConvention5.defineDelegateProxyPrototypeProperties(jSTypeRegistry8, scope9, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList11, strMap13);
        java.util.Map<java.lang.String, java.lang.String> strMap15 = null;
        closureCodingConvention0.defineDelegateProxyPrototypeProperties(jSTypeRegistry3, scope4, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList11, strMap15);
        com.google.javascript.rhino.Node node17 = null;
        java.util.Map<java.lang.String, java.lang.String> strMap18 = null;
        closureCodingConvention0.checkForCallingConventionDefiningCalls(node17, strMap18);
        java.lang.String str20 = closureCodingConvention0.getGlobalObject();
        java.lang.String str21 = closureCodingConvention0.getExportPropertyFunction();
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection22 = closureCodingConvention0.getAssertionFunctions();
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection23 = closureCodingConvention0.getAssertionFunctions();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(objectTypeArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "goog.global" + "'", str20, "goog.global");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "goog.exportProperty" + "'", str21, "goog.exportProperty");
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection22);
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection23);
    }

    @Test
    public void test0688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0688");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        boolean boolean4 = closureCodingConvention0.isSuperClassReference("hi!");
        boolean boolean6 = closureCodingConvention0.isSuperClassReference("goog.global");
        boolean boolean8 = closureCodingConvention0.isConstant("goog.abstractMethod");
        boolean boolean10 = closureCodingConvention0.isValidEnumKey("hi!");
        boolean boolean12 = closureCodingConvention0.isSuperClassReference("goog.global");
        boolean boolean14 = closureCodingConvention0.isPrivate("goog.abstractMethod");
        boolean boolean16 = closureCodingConvention0.isValidEnumKey("");
        java.lang.String str17 = closureCodingConvention0.getGlobalObject();
        com.google.javascript.rhino.Node node18 = null;
        boolean boolean19 = closureCodingConvention0.isOptionalParameter(node18);
        com.google.javascript.rhino.Node node20 = null;
        boolean boolean21 = closureCodingConvention0.isOptionalParameter(node20);
        java.lang.String str22 = closureCodingConvention0.getExportPropertyFunction();
        com.google.javascript.rhino.jstype.FunctionType functionType23 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType24 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType25 = null;
        // The following exception was thrown during execution in test generation
        try {
            closureCodingConvention0.applySingletonGetter(functionType23, functionType24, objectType25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "goog.global" + "'", str17, "goog.global");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "goog.exportProperty" + "'", str22, "goog.exportProperty");
    }

    @Test
    public void test0689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0689");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        java.lang.String str3 = closureCodingConvention0.getAbstractMethodName();
        java.lang.String str4 = closureCodingConvention0.getGlobalObject();
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection5 = closureCodingConvention0.getAssertionFunctions();
        boolean boolean7 = closureCodingConvention0.isConstant("goog.global");
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection8 = closureCodingConvention0.getAssertionFunctions();
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection9 = closureCodingConvention0.getAssertionFunctions();
        com.google.javascript.rhino.Node node10 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.jscomp.CodingConvention.Bind bind11 = closureCodingConvention0.describeFunctionBind(node10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "goog.abstractMethod" + "'", str3, "goog.abstractMethod");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "goog.global" + "'", str4, "goog.global");
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection8);
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection9);
    }

    @Test
    public void test0690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0690");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        boolean boolean4 = closureCodingConvention0.isSuperClassReference("hi!");
        com.google.javascript.rhino.Node node5 = null;
        boolean boolean6 = closureCodingConvention0.isOptionalParameter(node5);
        java.lang.String str7 = closureCodingConvention0.getExportPropertyFunction();
        com.google.javascript.rhino.Node node8 = null;
        boolean boolean9 = closureCodingConvention0.isOptionalParameter(node8);
        com.google.javascript.rhino.jstype.FunctionType functionType10 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType11 = null;
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType12 = null;
        closureCodingConvention0.applySubclassRelationship(functionType10, functionType11, subclassType12);
        boolean boolean15 = closureCodingConvention0.isPrivate("goog.exportSymbol");
        com.google.javascript.jscomp.NodeTraversal nodeTraversal16 = null;
        com.google.javascript.rhino.Node node17 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.jscomp.CodingConvention.ObjectLiteralCast objectLiteralCast18 = closureCodingConvention0.getObjectLiteralCast(nodeTraversal16, node17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "goog.exportProperty" + "'", str7, "goog.exportProperty");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test0691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0691");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry3 = null;
        com.google.javascript.jscomp.Scope scope4 = null;
        com.google.javascript.rhino.jstype.ObjectType[] objectTypeArray5 = new com.google.javascript.rhino.jstype.ObjectType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType> objectTypeList6 = new java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList6, objectTypeArray5);
        java.util.Map<java.lang.String, java.lang.String> strMap8 = null;
        closureCodingConvention0.defineDelegateProxyPrototypeProperties(jSTypeRegistry3, scope4, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList6, strMap8);
        com.google.javascript.rhino.Node node10 = null;
        boolean boolean11 = closureCodingConvention0.isVarArgsParameter(node10);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry12 = null;
        com.google.javascript.jscomp.Scope scope13 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention14 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node15 = null;
        boolean boolean16 = closureCodingConvention14.isOptionalParameter(node15);
        boolean boolean18 = closureCodingConvention14.isSuperClassReference("hi!");
        com.google.javascript.rhino.Node node19 = null;
        boolean boolean20 = closureCodingConvention14.isOptionalParameter(node19);
        boolean boolean22 = closureCodingConvention14.isConstantKey("hi!");
        com.google.javascript.rhino.Node node23 = null;
        boolean boolean24 = closureCodingConvention14.isVarArgsParameter(node23);
        java.lang.String str25 = closureCodingConvention14.getDelegateSuperclassName();
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection26 = closureCodingConvention14.getAssertionFunctions();
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry27 = null;
        com.google.javascript.jscomp.Scope scope28 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention29 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node30 = null;
        boolean boolean31 = closureCodingConvention29.isOptionalParameter(node30);
        java.lang.String str32 = closureCodingConvention29.getAbstractMethodName();
        java.lang.String str33 = closureCodingConvention29.getGlobalObject();
        com.google.javascript.rhino.Node node34 = null;
        com.google.javascript.jscomp.CodingConvention.DelegateRelationship delegateRelationship35 = closureCodingConvention29.getDelegateRelationship(node34);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry36 = null;
        com.google.javascript.jscomp.Scope scope37 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention38 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node39 = null;
        boolean boolean40 = closureCodingConvention38.isOptionalParameter(node39);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry41 = null;
        com.google.javascript.jscomp.Scope scope42 = null;
        com.google.javascript.rhino.jstype.ObjectType[] objectTypeArray43 = new com.google.javascript.rhino.jstype.ObjectType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType> objectTypeList44 = new java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList44, objectTypeArray43);
        java.util.Map<java.lang.String, java.lang.String> strMap46 = null;
        closureCodingConvention38.defineDelegateProxyPrototypeProperties(jSTypeRegistry41, scope42, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList44, strMap46);
        java.util.Map<java.lang.String, java.lang.String> strMap48 = null;
        closureCodingConvention29.defineDelegateProxyPrototypeProperties(jSTypeRegistry36, scope37, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList44, strMap48);
        java.util.Map<java.lang.String, java.lang.String> strMap50 = null;
        closureCodingConvention14.defineDelegateProxyPrototypeProperties(jSTypeRegistry27, scope28, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList44, strMap50);
        java.util.Map<java.lang.String, java.lang.String> strMap52 = null;
        closureCodingConvention0.defineDelegateProxyPrototypeProperties(jSTypeRegistry12, scope13, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList44, strMap52);
        com.google.javascript.rhino.Node node54 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.jscomp.CodingConvention.Bind bind55 = closureCodingConvention0.describeFunctionBind(node54);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(objectTypeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection26);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "goog.abstractMethod" + "'", str32, "goog.abstractMethod");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "goog.global" + "'", str33, "goog.global");
        org.junit.Assert.assertNull(delegateRelationship35);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(objectTypeArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test0692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0692");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        boolean boolean4 = closureCodingConvention0.isSuperClassReference("hi!");
        com.google.javascript.rhino.Node node5 = null;
        boolean boolean6 = closureCodingConvention0.isOptionalParameter(node5);
        boolean boolean8 = closureCodingConvention0.isConstantKey("hi!");
        com.google.javascript.rhino.Node node9 = null;
        boolean boolean10 = closureCodingConvention0.isVarArgsParameter(node9);
        java.lang.String str11 = closureCodingConvention0.getDelegateSuperclassName();
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection12 = closureCodingConvention0.getAssertionFunctions();
        java.lang.String str13 = closureCodingConvention0.getExportSymbolFunction();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "goog.exportSymbol" + "'", str13, "goog.exportSymbol");
    }

    @Test
    public void test0693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0693");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        java.lang.String str3 = closureCodingConvention0.getAbstractMethodName();
        java.lang.String str4 = closureCodingConvention0.getGlobalObject();
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection5 = closureCodingConvention0.getAssertionFunctions();
        boolean boolean7 = closureCodingConvention0.isConstant("goog.global");
        com.google.javascript.rhino.Node node8 = null;
        com.google.javascript.jscomp.CodingConvention.DelegateRelationship delegateRelationship9 = closureCodingConvention0.getDelegateRelationship(node8);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry10 = null;
        com.google.javascript.jscomp.Scope scope11 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention12 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node13 = null;
        boolean boolean14 = closureCodingConvention12.isOptionalParameter(node13);
        boolean boolean16 = closureCodingConvention12.isSuperClassReference("hi!");
        boolean boolean18 = closureCodingConvention12.isSuperClassReference("goog.global");
        boolean boolean20 = closureCodingConvention12.isConstant("goog.abstractMethod");
        boolean boolean22 = closureCodingConvention12.isValidEnumKey("hi!");
        boolean boolean24 = closureCodingConvention12.isSuperClassReference("goog.global");
        boolean boolean26 = closureCodingConvention12.isPrivate("goog.abstractMethod");
        boolean boolean28 = closureCodingConvention12.isValidEnumKey("");
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry29 = null;
        com.google.javascript.jscomp.Scope scope30 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention31 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node32 = null;
        boolean boolean33 = closureCodingConvention31.isOptionalParameter(node32);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry34 = null;
        com.google.javascript.jscomp.Scope scope35 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention36 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node37 = null;
        boolean boolean38 = closureCodingConvention36.isOptionalParameter(node37);
        boolean boolean40 = closureCodingConvention36.isSuperClassReference("hi!");
        com.google.javascript.rhino.Node node41 = null;
        boolean boolean42 = closureCodingConvention36.isOptionalParameter(node41);
        boolean boolean44 = closureCodingConvention36.isConstantKey("hi!");
        com.google.javascript.rhino.Node node45 = null;
        boolean boolean46 = closureCodingConvention36.isVarArgsParameter(node45);
        boolean boolean48 = closureCodingConvention36.isExported("");
        com.google.javascript.rhino.Node node49 = null;
        boolean boolean50 = closureCodingConvention36.isVarArgsParameter(node49);
        java.lang.String str51 = closureCodingConvention36.getExportSymbolFunction();
        java.lang.String str52 = closureCodingConvention36.getAbstractMethodName();
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry53 = null;
        com.google.javascript.jscomp.Scope scope54 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention55 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node56 = null;
        boolean boolean57 = closureCodingConvention55.isOptionalParameter(node56);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry58 = null;
        com.google.javascript.jscomp.Scope scope59 = null;
        com.google.javascript.rhino.jstype.ObjectType[] objectTypeArray60 = new com.google.javascript.rhino.jstype.ObjectType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType> objectTypeList61 = new java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList61, objectTypeArray60);
        java.util.Map<java.lang.String, java.lang.String> strMap63 = null;
        closureCodingConvention55.defineDelegateProxyPrototypeProperties(jSTypeRegistry58, scope59, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList61, strMap63);
        java.util.Map<java.lang.String, java.lang.String> strMap65 = null;
        closureCodingConvention36.defineDelegateProxyPrototypeProperties(jSTypeRegistry53, scope54, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList61, strMap65);
        java.util.Map<java.lang.String, java.lang.String> strMap67 = null;
        closureCodingConvention31.defineDelegateProxyPrototypeProperties(jSTypeRegistry34, scope35, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList61, strMap67);
        java.util.Map<java.lang.String, java.lang.String> strMap69 = null;
        closureCodingConvention12.defineDelegateProxyPrototypeProperties(jSTypeRegistry29, scope30, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList61, strMap69);
        java.util.Map<java.lang.String, java.lang.String> strMap71 = null;
        closureCodingConvention0.defineDelegateProxyPrototypeProperties(jSTypeRegistry10, scope11, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList61, strMap71);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "goog.abstractMethod" + "'", str3, "goog.abstractMethod");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "goog.global" + "'", str4, "goog.global");
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(delegateRelationship9);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "goog.exportSymbol" + "'", str51, "goog.exportSymbol");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "goog.abstractMethod" + "'", str52, "goog.abstractMethod");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(objectTypeArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
    }

    @Test
    public void test0694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0694");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        java.lang.String str3 = closureCodingConvention0.getAbstractMethodName();
        java.lang.String str4 = closureCodingConvention0.getGlobalObject();
        com.google.javascript.rhino.Node node5 = null;
        java.util.Map<java.lang.String, java.lang.String> strMap6 = null;
        closureCodingConvention0.checkForCallingConventionDefiningCalls(node5, strMap6);
        com.google.javascript.rhino.Node node8 = null;
        com.google.javascript.jscomp.CodingConvention.DelegateRelationship delegateRelationship9 = closureCodingConvention0.getDelegateRelationship(node8);
        java.lang.String str10 = closureCodingConvention0.getDelegateSuperclassName();
        com.google.javascript.rhino.Node node11 = null;
        boolean boolean12 = closureCodingConvention0.isVarArgsParameter(node11);
        boolean boolean14 = closureCodingConvention0.isExported("");
        boolean boolean17 = closureCodingConvention0.isExported("goog.global", false);
        java.lang.String str18 = closureCodingConvention0.getAbstractMethodName();
        com.google.javascript.rhino.Node node19 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.String> strList20 = closureCodingConvention0.identifyTypeDeclarationCall(node19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "goog.abstractMethod" + "'", str3, "goog.abstractMethod");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "goog.global" + "'", str4, "goog.global");
        org.junit.Assert.assertNull(delegateRelationship9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "goog.abstractMethod" + "'", str18, "goog.abstractMethod");
    }

    @Test
    public void test0695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0695");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        java.lang.String str3 = closureCodingConvention0.getAbstractMethodName();
        java.lang.String str4 = closureCodingConvention0.getGlobalObject();
        com.google.javascript.rhino.Node node5 = null;
        java.util.Map<java.lang.String, java.lang.String> strMap6 = null;
        closureCodingConvention0.checkForCallingConventionDefiningCalls(node5, strMap6);
        boolean boolean9 = closureCodingConvention0.isExported("goog.exportSymbol");
        com.google.javascript.rhino.jstype.FunctionType functionType10 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType11 = null;
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType12 = null;
        closureCodingConvention0.applySubclassRelationship(functionType10, functionType11, subclassType12);
        boolean boolean15 = closureCodingConvention0.isSuperClassReference("goog.exportProperty");
        com.google.javascript.rhino.jstype.ObjectType objectType16 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType17 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType18 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType19 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType20 = null;
        closureCodingConvention0.applyDelegateRelationship(objectType16, objectType17, objectType18, functionType19, functionType20);
        com.google.javascript.rhino.Node node22 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.String> strList23 = closureCodingConvention0.identifyTypeDeclarationCall(node22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "goog.abstractMethod" + "'", str3, "goog.abstractMethod");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "goog.global" + "'", str4, "goog.global");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test0696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0696");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        java.lang.String str3 = closureCodingConvention0.getAbstractMethodName();
        java.lang.String str4 = closureCodingConvention0.getGlobalObject();
        com.google.javascript.rhino.Node node5 = null;
        com.google.javascript.jscomp.CodingConvention.DelegateRelationship delegateRelationship6 = closureCodingConvention0.getDelegateRelationship(node5);
        java.lang.String str7 = closureCodingConvention0.getDelegateSuperclassName();
        boolean boolean9 = closureCodingConvention0.isValidEnumKey("goog.exportProperty");
        com.google.javascript.rhino.Node node10 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str11 = closureCodingConvention0.getSingletonGetterClassName(node10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "goog.abstractMethod" + "'", str3, "goog.abstractMethod");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "goog.global" + "'", str4, "goog.global");
        org.junit.Assert.assertNull(delegateRelationship6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test0697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0697");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        java.lang.String str3 = closureCodingConvention0.getAbstractMethodName();
        java.lang.String str4 = closureCodingConvention0.getGlobalObject();
        com.google.javascript.rhino.Node node5 = null;
        java.util.Map<java.lang.String, java.lang.String> strMap6 = null;
        closureCodingConvention0.checkForCallingConventionDefiningCalls(node5, strMap6);
        com.google.javascript.rhino.Node node8 = null;
        com.google.javascript.jscomp.CodingConvention.DelegateRelationship delegateRelationship9 = closureCodingConvention0.getDelegateRelationship(node8);
        java.lang.String str10 = closureCodingConvention0.getDelegateSuperclassName();
        com.google.javascript.rhino.Node node11 = null;
        boolean boolean12 = closureCodingConvention0.isVarArgsParameter(node11);
        boolean boolean14 = closureCodingConvention0.isExported("");
        com.google.javascript.rhino.jstype.ObjectType objectType15 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType16 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType17 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType18 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType19 = null;
        closureCodingConvention0.applyDelegateRelationship(objectType15, objectType16, objectType17, functionType18, functionType19);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "goog.abstractMethod" + "'", str3, "goog.abstractMethod");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "goog.global" + "'", str4, "goog.global");
        org.junit.Assert.assertNull(delegateRelationship9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test0698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0698");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        boolean boolean4 = closureCodingConvention0.isSuperClassReference("hi!");
        boolean boolean6 = closureCodingConvention0.isSuperClassReference("goog.global");
        boolean boolean8 = closureCodingConvention0.isValidEnumKey("");
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry9 = null;
        com.google.javascript.jscomp.Scope scope10 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention11 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node12 = null;
        boolean boolean13 = closureCodingConvention11.isOptionalParameter(node12);
        java.lang.String str14 = closureCodingConvention11.getAbstractMethodName();
        java.lang.String str15 = closureCodingConvention11.getGlobalObject();
        com.google.javascript.rhino.Node node16 = null;
        java.util.Map<java.lang.String, java.lang.String> strMap17 = null;
        closureCodingConvention11.checkForCallingConventionDefiningCalls(node16, strMap17);
        com.google.javascript.rhino.Node node19 = null;
        com.google.javascript.jscomp.CodingConvention.DelegateRelationship delegateRelationship20 = closureCodingConvention11.getDelegateRelationship(node19);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry21 = null;
        com.google.javascript.jscomp.Scope scope22 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention23 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node24 = null;
        boolean boolean25 = closureCodingConvention23.isOptionalParameter(node24);
        java.lang.String str26 = closureCodingConvention23.getAbstractMethodName();
        java.lang.String str27 = closureCodingConvention23.getGlobalObject();
        boolean boolean29 = closureCodingConvention23.isExported("goog.global");
        boolean boolean31 = closureCodingConvention23.isConstant("goog.abstractMethod");
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry32 = null;
        com.google.javascript.jscomp.Scope scope33 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention34 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node35 = null;
        boolean boolean36 = closureCodingConvention34.isOptionalParameter(node35);
        java.lang.String str37 = closureCodingConvention34.getAbstractMethodName();
        java.lang.String str38 = closureCodingConvention34.getGlobalObject();
        com.google.javascript.rhino.Node node39 = null;
        com.google.javascript.jscomp.CodingConvention.DelegateRelationship delegateRelationship40 = closureCodingConvention34.getDelegateRelationship(node39);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry41 = null;
        com.google.javascript.jscomp.Scope scope42 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention43 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node44 = null;
        boolean boolean45 = closureCodingConvention43.isOptionalParameter(node44);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry46 = null;
        com.google.javascript.jscomp.Scope scope47 = null;
        com.google.javascript.rhino.jstype.ObjectType[] objectTypeArray48 = new com.google.javascript.rhino.jstype.ObjectType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType> objectTypeList49 = new java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList49, objectTypeArray48);
        java.util.Map<java.lang.String, java.lang.String> strMap51 = null;
        closureCodingConvention43.defineDelegateProxyPrototypeProperties(jSTypeRegistry46, scope47, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList49, strMap51);
        java.util.Map<java.lang.String, java.lang.String> strMap53 = null;
        closureCodingConvention34.defineDelegateProxyPrototypeProperties(jSTypeRegistry41, scope42, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList49, strMap53);
        java.util.Map<java.lang.String, java.lang.String> strMap55 = null;
        closureCodingConvention23.defineDelegateProxyPrototypeProperties(jSTypeRegistry32, scope33, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList49, strMap55);
        java.util.Map<java.lang.String, java.lang.String> strMap57 = null;
        closureCodingConvention11.defineDelegateProxyPrototypeProperties(jSTypeRegistry21, scope22, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList49, strMap57);
        java.util.Map<java.lang.String, java.lang.String> strMap59 = null;
        closureCodingConvention0.defineDelegateProxyPrototypeProperties(jSTypeRegistry9, scope10, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList49, strMap59);
        java.lang.String str61 = closureCodingConvention0.getExportSymbolFunction();
        com.google.javascript.rhino.Node node62 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str63 = closureCodingConvention0.getSingletonGetterClassName(node62);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "goog.abstractMethod" + "'", str14, "goog.abstractMethod");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "goog.global" + "'", str15, "goog.global");
        org.junit.Assert.assertNull(delegateRelationship20);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "goog.abstractMethod" + "'", str26, "goog.abstractMethod");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "goog.global" + "'", str27, "goog.global");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "goog.abstractMethod" + "'", str37, "goog.abstractMethod");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "goog.global" + "'", str38, "goog.global");
        org.junit.Assert.assertNull(delegateRelationship40);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(objectTypeArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "goog.exportSymbol" + "'", str61, "goog.exportSymbol");
    }

    @Test
    public void test0699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0699");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry3 = null;
        com.google.javascript.jscomp.Scope scope4 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention5 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node6 = null;
        boolean boolean7 = closureCodingConvention5.isOptionalParameter(node6);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry8 = null;
        com.google.javascript.jscomp.Scope scope9 = null;
        com.google.javascript.rhino.jstype.ObjectType[] objectTypeArray10 = new com.google.javascript.rhino.jstype.ObjectType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType> objectTypeList11 = new java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList11, objectTypeArray10);
        java.util.Map<java.lang.String, java.lang.String> strMap13 = null;
        closureCodingConvention5.defineDelegateProxyPrototypeProperties(jSTypeRegistry8, scope9, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList11, strMap13);
        java.util.Map<java.lang.String, java.lang.String> strMap15 = null;
        closureCodingConvention0.defineDelegateProxyPrototypeProperties(jSTypeRegistry3, scope4, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList11, strMap15);
        com.google.javascript.rhino.Node node17 = null;
        java.util.Map<java.lang.String, java.lang.String> strMap18 = null;
        closureCodingConvention0.checkForCallingConventionDefiningCalls(node17, strMap18);
        boolean boolean21 = closureCodingConvention0.isConstant("");
        com.google.javascript.rhino.jstype.FunctionType functionType22 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType23 = null;
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType24 = null;
        closureCodingConvention0.applySubclassRelationship(functionType22, functionType23, subclassType24);
        com.google.javascript.rhino.jstype.ObjectType objectType26 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType27 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType28 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType29 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType30 = null;
        closureCodingConvention0.applyDelegateRelationship(objectType26, objectType27, objectType28, functionType29, functionType30);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(objectTypeArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test0700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0700");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        boolean boolean4 = closureCodingConvention0.isSuperClassReference("hi!");
        com.google.javascript.rhino.Node node5 = null;
        boolean boolean6 = closureCodingConvention0.isOptionalParameter(node5);
        boolean boolean8 = closureCodingConvention0.isConstantKey("hi!");
        com.google.javascript.rhino.Node node9 = null;
        boolean boolean10 = closureCodingConvention0.isVarArgsParameter(node9);
        boolean boolean12 = closureCodingConvention0.isExported("");
        com.google.javascript.rhino.Node node13 = null;
        boolean boolean14 = closureCodingConvention0.isVarArgsParameter(node13);
        java.lang.String str15 = closureCodingConvention0.getExportSymbolFunction();
        java.lang.String str16 = closureCodingConvention0.getAbstractMethodName();
        com.google.javascript.rhino.Node node17 = null;
        java.util.Map<java.lang.String, java.lang.String> strMap18 = null;
        closureCodingConvention0.checkForCallingConventionDefiningCalls(node17, strMap18);
        java.lang.Class<?> wildcardClass20 = closureCodingConvention0.getClass();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "goog.exportSymbol" + "'", str15, "goog.exportSymbol");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "goog.abstractMethod" + "'", str16, "goog.abstractMethod");
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test0701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0701");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        boolean boolean2 = closureCodingConvention0.isValidEnumKey("goog.abstractMethod");
        boolean boolean4 = closureCodingConvention0.isValidEnumKey("goog.abstractMethod");
        boolean boolean7 = closureCodingConvention0.isExported("goog.exportSymbol", false);
        boolean boolean9 = closureCodingConvention0.isPrivate("goog.exportSymbol");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test0702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0702");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        boolean boolean2 = closureCodingConvention0.isConstantKey("goog.abstractMethod");
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection3 = closureCodingConvention0.getAssertionFunctions();
        boolean boolean5 = closureCodingConvention0.isExported("goog.exportSymbol");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test0703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0703");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        boolean boolean4 = closureCodingConvention0.isSuperClassReference("hi!");
        boolean boolean6 = closureCodingConvention0.isValidEnumKey("goog.exportProperty");
        com.google.javascript.rhino.Node node7 = null;
        java.util.Map<java.lang.String, java.lang.String> strMap8 = null;
        closureCodingConvention0.checkForCallingConventionDefiningCalls(node7, strMap8);
        com.google.javascript.rhino.jstype.FunctionType functionType10 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType11 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType12 = null;
        // The following exception was thrown during execution in test generation
        try {
            closureCodingConvention0.applySingletonGetter(functionType10, functionType11, objectType12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
    }

    @Test
    public void test0704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0704");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        java.lang.String str3 = closureCodingConvention0.getAbstractMethodName();
        java.lang.String str4 = closureCodingConvention0.getGlobalObject();
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection5 = closureCodingConvention0.getAssertionFunctions();
        com.google.javascript.rhino.jstype.FunctionType functionType6 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType7 = null;
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType8 = null;
        closureCodingConvention0.applySubclassRelationship(functionType6, functionType7, subclassType8);
        java.lang.String str10 = closureCodingConvention0.getDelegateSuperclassName();
        java.lang.String str11 = closureCodingConvention0.getExportSymbolFunction();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "goog.abstractMethod" + "'", str3, "goog.abstractMethod");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "goog.global" + "'", str4, "goog.global");
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection5);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "goog.exportSymbol" + "'", str11, "goog.exportSymbol");
    }

    @Test
    public void test0705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0705");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        java.lang.String str3 = closureCodingConvention0.getAbstractMethodName();
        java.lang.String str4 = closureCodingConvention0.getGlobalObject();
        boolean boolean6 = closureCodingConvention0.isExported("goog.global");
        com.google.javascript.rhino.Node node7 = null;
        com.google.javascript.jscomp.CodingConvention.DelegateRelationship delegateRelationship8 = closureCodingConvention0.getDelegateRelationship(node7);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry9 = null;
        com.google.javascript.jscomp.Scope scope10 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention11 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node12 = null;
        boolean boolean13 = closureCodingConvention11.isOptionalParameter(node12);
        java.lang.String str14 = closureCodingConvention11.getAbstractMethodName();
        java.lang.String str15 = closureCodingConvention11.getGlobalObject();
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection16 = closureCodingConvention11.getAssertionFunctions();
        boolean boolean18 = closureCodingConvention11.isConstant("goog.global");
        boolean boolean20 = closureCodingConvention11.isSuperClassReference("goog.exportProperty");
        com.google.javascript.rhino.jstype.FunctionType functionType21 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType22 = null;
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType23 = null;
        closureCodingConvention11.applySubclassRelationship(functionType21, functionType22, subclassType23);
        boolean boolean26 = closureCodingConvention11.isSuperClassReference("goog.global");
        boolean boolean29 = closureCodingConvention11.isExported("hi!", false);
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection30 = closureCodingConvention11.getAssertionFunctions();
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry31 = null;
        com.google.javascript.jscomp.Scope scope32 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention33 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node34 = null;
        boolean boolean35 = closureCodingConvention33.isOptionalParameter(node34);
        java.lang.String str36 = closureCodingConvention33.getAbstractMethodName();
        java.lang.String str37 = closureCodingConvention33.getGlobalObject();
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection38 = closureCodingConvention33.getAssertionFunctions();
        boolean boolean40 = closureCodingConvention33.isConstant("goog.global");
        com.google.javascript.rhino.Node node41 = null;
        com.google.javascript.jscomp.CodingConvention.DelegateRelationship delegateRelationship42 = closureCodingConvention33.getDelegateRelationship(node41);
        com.google.javascript.rhino.jstype.ObjectType objectType43 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType44 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType45 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType46 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType47 = null;
        closureCodingConvention33.applyDelegateRelationship(objectType43, objectType44, objectType45, functionType46, functionType47);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry49 = null;
        com.google.javascript.jscomp.Scope scope50 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention51 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node52 = null;
        boolean boolean53 = closureCodingConvention51.isOptionalParameter(node52);
        boolean boolean55 = closureCodingConvention51.isSuperClassReference("hi!");
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry56 = null;
        com.google.javascript.jscomp.Scope scope57 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention58 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node59 = null;
        boolean boolean60 = closureCodingConvention58.isOptionalParameter(node59);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry61 = null;
        com.google.javascript.jscomp.Scope scope62 = null;
        com.google.javascript.rhino.jstype.ObjectType[] objectTypeArray63 = new com.google.javascript.rhino.jstype.ObjectType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType> objectTypeList64 = new java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList64, objectTypeArray63);
        java.util.Map<java.lang.String, java.lang.String> strMap66 = null;
        closureCodingConvention58.defineDelegateProxyPrototypeProperties(jSTypeRegistry61, scope62, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList64, strMap66);
        java.util.Map<java.lang.String, java.lang.String> strMap68 = null;
        closureCodingConvention51.defineDelegateProxyPrototypeProperties(jSTypeRegistry56, scope57, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList64, strMap68);
        java.util.Map<java.lang.String, java.lang.String> strMap70 = null;
        closureCodingConvention33.defineDelegateProxyPrototypeProperties(jSTypeRegistry49, scope50, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList64, strMap70);
        java.util.Map<java.lang.String, java.lang.String> strMap72 = null;
        closureCodingConvention11.defineDelegateProxyPrototypeProperties(jSTypeRegistry31, scope32, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList64, strMap72);
        java.util.Map<java.lang.String, java.lang.String> strMap74 = null;
        closureCodingConvention0.defineDelegateProxyPrototypeProperties(jSTypeRegistry9, scope10, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList64, strMap74);
        boolean boolean78 = closureCodingConvention0.isExported("goog.abstractMethod", true);
        java.lang.String str79 = closureCodingConvention0.getDelegateSuperclassName();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "goog.abstractMethod" + "'", str3, "goog.abstractMethod");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "goog.global" + "'", str4, "goog.global");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(delegateRelationship8);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "goog.abstractMethod" + "'", str14, "goog.abstractMethod");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "goog.global" + "'", str15, "goog.global");
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "goog.abstractMethod" + "'", str36, "goog.abstractMethod");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "goog.global" + "'", str37, "goog.global");
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNull(delegateRelationship42);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(objectTypeArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNull(str79);
    }

    @Test
    public void test0706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0706");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        boolean boolean4 = closureCodingConvention0.isSuperClassReference("hi!");
        boolean boolean6 = closureCodingConvention0.isSuperClassReference("goog.global");
        boolean boolean8 = closureCodingConvention0.isConstant("goog.abstractMethod");
        boolean boolean10 = closureCodingConvention0.isValidEnumKey("hi!");
        boolean boolean12 = closureCodingConvention0.isSuperClassReference("goog.global");
        boolean boolean14 = closureCodingConvention0.isPrivate("goog.abstractMethod");
        com.google.javascript.rhino.Node node15 = null;
        com.google.javascript.jscomp.CodingConvention.DelegateRelationship delegateRelationship16 = closureCodingConvention0.getDelegateRelationship(node15);
        boolean boolean18 = closureCodingConvention0.isExported("hi!");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(delegateRelationship16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test0707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0707");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry3 = null;
        com.google.javascript.jscomp.Scope scope4 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention5 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node6 = null;
        boolean boolean7 = closureCodingConvention5.isOptionalParameter(node6);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry8 = null;
        com.google.javascript.jscomp.Scope scope9 = null;
        com.google.javascript.rhino.jstype.ObjectType[] objectTypeArray10 = new com.google.javascript.rhino.jstype.ObjectType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType> objectTypeList11 = new java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList11, objectTypeArray10);
        java.util.Map<java.lang.String, java.lang.String> strMap13 = null;
        closureCodingConvention5.defineDelegateProxyPrototypeProperties(jSTypeRegistry8, scope9, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList11, strMap13);
        java.util.Map<java.lang.String, java.lang.String> strMap15 = null;
        closureCodingConvention0.defineDelegateProxyPrototypeProperties(jSTypeRegistry3, scope4, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList11, strMap15);
        com.google.javascript.rhino.Node node17 = null;
        com.google.javascript.jscomp.CodingConvention.DelegateRelationship delegateRelationship18 = closureCodingConvention0.getDelegateRelationship(node17);
        com.google.javascript.rhino.Node node19 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str20 = closureCodingConvention0.getSingletonGetterClassName(node19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(objectTypeArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(delegateRelationship18);
    }

    @Test
    public void test0708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0708");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry3 = null;
        com.google.javascript.jscomp.Scope scope4 = null;
        com.google.javascript.rhino.jstype.ObjectType[] objectTypeArray5 = new com.google.javascript.rhino.jstype.ObjectType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType> objectTypeList6 = new java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList6, objectTypeArray5);
        java.util.Map<java.lang.String, java.lang.String> strMap8 = null;
        closureCodingConvention0.defineDelegateProxyPrototypeProperties(jSTypeRegistry3, scope4, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList6, strMap8);
        com.google.javascript.rhino.Node node10 = null;
        boolean boolean11 = closureCodingConvention0.isVarArgsParameter(node10);
        boolean boolean13 = closureCodingConvention0.isConstantKey("");
        com.google.javascript.rhino.Node node14 = null;
        boolean boolean15 = closureCodingConvention0.isVarArgsParameter(node14);
        java.lang.Class<?> wildcardClass16 = closureCodingConvention0.getClass();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(objectTypeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test0709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0709");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.jstype.ObjectType objectType1 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType2 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType3 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType4 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType5 = null;
        closureCodingConvention0.applyDelegateRelationship(objectType1, objectType2, objectType3, functionType4, functionType5);
        com.google.javascript.rhino.Node node7 = null;
        boolean boolean8 = closureCodingConvention0.isOptionalParameter(node7);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry9 = null;
        com.google.javascript.jscomp.Scope scope10 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention11 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node12 = null;
        boolean boolean13 = closureCodingConvention11.isOptionalParameter(node12);
        boolean boolean15 = closureCodingConvention11.isSuperClassReference("hi!");
        com.google.javascript.rhino.Node node16 = null;
        boolean boolean17 = closureCodingConvention11.isOptionalParameter(node16);
        boolean boolean19 = closureCodingConvention11.isConstantKey("hi!");
        com.google.javascript.rhino.Node node20 = null;
        boolean boolean21 = closureCodingConvention11.isVarArgsParameter(node20);
        boolean boolean23 = closureCodingConvention11.isExported("");
        java.lang.String str24 = closureCodingConvention11.getDelegateSuperclassName();
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry25 = null;
        com.google.javascript.jscomp.Scope scope26 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention27 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node28 = null;
        boolean boolean29 = closureCodingConvention27.isOptionalParameter(node28);
        java.lang.String str30 = closureCodingConvention27.getAbstractMethodName();
        java.lang.String str31 = closureCodingConvention27.getGlobalObject();
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection32 = closureCodingConvention27.getAssertionFunctions();
        boolean boolean34 = closureCodingConvention27.isConstant("goog.global");
        com.google.javascript.rhino.Node node35 = null;
        com.google.javascript.jscomp.CodingConvention.DelegateRelationship delegateRelationship36 = closureCodingConvention27.getDelegateRelationship(node35);
        com.google.javascript.rhino.jstype.ObjectType objectType37 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType38 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType39 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType40 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType41 = null;
        closureCodingConvention27.applyDelegateRelationship(objectType37, objectType38, objectType39, functionType40, functionType41);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry43 = null;
        com.google.javascript.jscomp.Scope scope44 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention45 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node46 = null;
        boolean boolean47 = closureCodingConvention45.isOptionalParameter(node46);
        boolean boolean49 = closureCodingConvention45.isSuperClassReference("hi!");
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry50 = null;
        com.google.javascript.jscomp.Scope scope51 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention52 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node53 = null;
        boolean boolean54 = closureCodingConvention52.isOptionalParameter(node53);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry55 = null;
        com.google.javascript.jscomp.Scope scope56 = null;
        com.google.javascript.rhino.jstype.ObjectType[] objectTypeArray57 = new com.google.javascript.rhino.jstype.ObjectType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType> objectTypeList58 = new java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList58, objectTypeArray57);
        java.util.Map<java.lang.String, java.lang.String> strMap60 = null;
        closureCodingConvention52.defineDelegateProxyPrototypeProperties(jSTypeRegistry55, scope56, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList58, strMap60);
        java.util.Map<java.lang.String, java.lang.String> strMap62 = null;
        closureCodingConvention45.defineDelegateProxyPrototypeProperties(jSTypeRegistry50, scope51, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList58, strMap62);
        java.util.Map<java.lang.String, java.lang.String> strMap64 = null;
        closureCodingConvention27.defineDelegateProxyPrototypeProperties(jSTypeRegistry43, scope44, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList58, strMap64);
        java.util.Map<java.lang.String, java.lang.String> strMap66 = null;
        closureCodingConvention11.defineDelegateProxyPrototypeProperties(jSTypeRegistry25, scope26, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList58, strMap66);
        java.util.Map<java.lang.String, java.lang.String> strMap68 = null;
        closureCodingConvention0.defineDelegateProxyPrototypeProperties(jSTypeRegistry9, scope10, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList58, strMap68);
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection70 = closureCodingConvention0.getAssertionFunctions();
        java.lang.String str71 = closureCodingConvention0.getAbstractMethodName();
        com.google.javascript.rhino.Node node72 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str73 = closureCodingConvention0.getSingletonGetterClassName(node72);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "goog.abstractMethod" + "'", str30, "goog.abstractMethod");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "goog.global" + "'", str31, "goog.global");
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(delegateRelationship36);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(objectTypeArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "goog.abstractMethod" + "'", str71, "goog.abstractMethod");
    }

    @Test
    public void test0710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0710");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        boolean boolean4 = closureCodingConvention0.isSuperClassReference("hi!");
        com.google.javascript.rhino.Node node5 = null;
        boolean boolean6 = closureCodingConvention0.isOptionalParameter(node5);
        java.lang.String str7 = closureCodingConvention0.getExportPropertyFunction();
        com.google.javascript.rhino.Node node8 = null;
        boolean boolean9 = closureCodingConvention0.isOptionalParameter(node8);
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection10 = closureCodingConvention0.getAssertionFunctions();
        boolean boolean12 = closureCodingConvention0.isExported("goog.exportProperty");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "goog.exportProperty" + "'", str7, "goog.exportProperty");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test0711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0711");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection1 = closureCodingConvention0.getAssertionFunctions();
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection2 = closureCodingConvention0.getAssertionFunctions();
        com.google.javascript.rhino.Node node3 = null;
        boolean boolean4 = closureCodingConvention0.isOptionalParameter(node3);
        com.google.javascript.rhino.Node node5 = null;
        com.google.javascript.jscomp.CodingConvention.DelegateRelationship delegateRelationship6 = closureCodingConvention0.getDelegateRelationship(node5);
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection7 = closureCodingConvention0.getAssertionFunctions();
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection1);
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(delegateRelationship6);
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection7);
    }

    @Test
    public void test0712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0712");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        java.lang.String str3 = closureCodingConvention0.getAbstractMethodName();
        java.lang.String str4 = closureCodingConvention0.getGlobalObject();
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection5 = closureCodingConvention0.getAssertionFunctions();
        com.google.javascript.rhino.jstype.FunctionType functionType6 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType7 = null;
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType8 = null;
        closureCodingConvention0.applySubclassRelationship(functionType6, functionType7, subclassType8);
        java.lang.String str10 = closureCodingConvention0.getDelegateSuperclassName();
        boolean boolean13 = closureCodingConvention0.isExported("", false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "goog.abstractMethod" + "'", str3, "goog.abstractMethod");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "goog.global" + "'", str4, "goog.global");
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection5);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test0713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0713");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        java.lang.String str3 = closureCodingConvention0.getAbstractMethodName();
        java.lang.String str4 = closureCodingConvention0.getGlobalObject();
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection5 = closureCodingConvention0.getAssertionFunctions();
        boolean boolean7 = closureCodingConvention0.isConstant("goog.global");
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection8 = closureCodingConvention0.getAssertionFunctions();
        boolean boolean10 = closureCodingConvention0.isValidEnumKey("goog.exportProperty");
        com.google.javascript.rhino.Node node11 = null;
        com.google.javascript.jscomp.CodingConvention.DelegateRelationship delegateRelationship12 = closureCodingConvention0.getDelegateRelationship(node11);
        boolean boolean14 = closureCodingConvention0.isValidEnumKey("");
        com.google.javascript.rhino.Node node15 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean16 = closureCodingConvention0.isPropertyTestFunction(node15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "goog.abstractMethod" + "'", str3, "goog.abstractMethod");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "goog.global" + "'", str4, "goog.global");
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(delegateRelationship12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test0714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0714");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        boolean boolean4 = closureCodingConvention0.isSuperClassReference("hi!");
        com.google.javascript.rhino.Node node5 = null;
        boolean boolean6 = closureCodingConvention0.isOptionalParameter(node5);
        boolean boolean8 = closureCodingConvention0.isExported("hi!");
        java.lang.String str9 = closureCodingConvention0.getExportPropertyFunction();
        java.lang.String str10 = closureCodingConvention0.getDelegateSuperclassName();
        boolean boolean12 = closureCodingConvention0.isConstantKey("goog.exportProperty");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "goog.exportProperty" + "'", str9, "goog.exportProperty");
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test0715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0715");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry3 = null;
        com.google.javascript.jscomp.Scope scope4 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention5 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node6 = null;
        boolean boolean7 = closureCodingConvention5.isOptionalParameter(node6);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry8 = null;
        com.google.javascript.jscomp.Scope scope9 = null;
        com.google.javascript.rhino.jstype.ObjectType[] objectTypeArray10 = new com.google.javascript.rhino.jstype.ObjectType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType> objectTypeList11 = new java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList11, objectTypeArray10);
        java.util.Map<java.lang.String, java.lang.String> strMap13 = null;
        closureCodingConvention5.defineDelegateProxyPrototypeProperties(jSTypeRegistry8, scope9, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList11, strMap13);
        java.util.Map<java.lang.String, java.lang.String> strMap15 = null;
        closureCodingConvention0.defineDelegateProxyPrototypeProperties(jSTypeRegistry3, scope4, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList11, strMap15);
        boolean boolean18 = closureCodingConvention0.isConstant("goog.abstractMethod");
        boolean boolean20 = closureCodingConvention0.isConstant("");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(objectTypeArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test0716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0716");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        boolean boolean2 = closureCodingConvention0.isExported("goog.global");
        boolean boolean4 = closureCodingConvention0.isConstant("");
        java.lang.String str5 = closureCodingConvention0.getDelegateSuperclassName();
        boolean boolean7 = closureCodingConvention0.isValidEnumKey("goog.exportProperty");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void test0717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0717");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        boolean boolean4 = closureCodingConvention0.isSuperClassReference("hi!");
        com.google.javascript.rhino.Node node5 = null;
        boolean boolean6 = closureCodingConvention0.isOptionalParameter(node5);
        boolean boolean8 = closureCodingConvention0.isConstantKey("hi!");
        com.google.javascript.rhino.Node node9 = null;
        boolean boolean10 = closureCodingConvention0.isVarArgsParameter(node9);
        com.google.javascript.rhino.Node node11 = null;
        boolean boolean12 = closureCodingConvention0.isVarArgsParameter(node11);
        com.google.javascript.rhino.Node node13 = null;
        java.util.Map<java.lang.String, java.lang.String> strMap14 = null;
        closureCodingConvention0.checkForCallingConventionDefiningCalls(node13, strMap14);
        java.lang.String str16 = closureCodingConvention0.getDelegateSuperclassName();
        com.google.javascript.rhino.jstype.ObjectType objectType17 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType18 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType19 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType20 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType21 = null;
        closureCodingConvention0.applyDelegateRelationship(objectType17, objectType18, objectType19, functionType20, functionType21);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(str16);
    }

    @Test
    public void test0718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0718");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        java.lang.String str3 = closureCodingConvention0.getAbstractMethodName();
        java.lang.String str4 = closureCodingConvention0.getGlobalObject();
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection5 = closureCodingConvention0.getAssertionFunctions();
        boolean boolean7 = closureCodingConvention0.isConstant("goog.global");
        boolean boolean9 = closureCodingConvention0.isSuperClassReference("goog.exportProperty");
        com.google.javascript.rhino.jstype.FunctionType functionType10 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType11 = null;
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType12 = null;
        closureCodingConvention0.applySubclassRelationship(functionType10, functionType11, subclassType12);
        boolean boolean15 = closureCodingConvention0.isSuperClassReference("goog.global");
        boolean boolean18 = closureCodingConvention0.isExported("hi!", false);
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection19 = closureCodingConvention0.getAssertionFunctions();
        java.lang.String str20 = closureCodingConvention0.getAbstractMethodName();
        com.google.javascript.rhino.Node node21 = null;
        boolean boolean22 = closureCodingConvention0.isVarArgsParameter(node21);
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection23 = closureCodingConvention0.getAssertionFunctions();
        com.google.javascript.rhino.Node node24 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.String> strList25 = closureCodingConvention0.identifyTypeDeclarationCall(node24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "goog.abstractMethod" + "'", str3, "goog.abstractMethod");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "goog.global" + "'", str4, "goog.global");
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "goog.abstractMethod" + "'", str20, "goog.abstractMethod");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection23);
    }

    @Test
    public void test0719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0719");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        boolean boolean4 = closureCodingConvention0.isSuperClassReference("hi!");
        com.google.javascript.rhino.Node node5 = null;
        boolean boolean6 = closureCodingConvention0.isOptionalParameter(node5);
        boolean boolean8 = closureCodingConvention0.isConstantKey("hi!");
        com.google.javascript.rhino.Node node9 = null;
        boolean boolean10 = closureCodingConvention0.isVarArgsParameter(node9);
        java.lang.String str11 = closureCodingConvention0.getDelegateSuperclassName();
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection12 = closureCodingConvention0.getAssertionFunctions();
        java.lang.String str13 = closureCodingConvention0.getDelegateSuperclassName();
        com.google.javascript.rhino.jstype.ObjectType objectType14 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType15 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType16 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType17 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType18 = null;
        closureCodingConvention0.applyDelegateRelationship(objectType14, objectType15, objectType16, functionType17, functionType18);
        com.google.javascript.rhino.jstype.ObjectType objectType20 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType21 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType22 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType23 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType24 = null;
        closureCodingConvention0.applyDelegateRelationship(objectType20, objectType21, objectType22, functionType23, functionType24);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection12);
        org.junit.Assert.assertNull(str13);
    }

    @Test
    public void test0720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0720");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        boolean boolean4 = closureCodingConvention0.isSuperClassReference("hi!");
        boolean boolean6 = closureCodingConvention0.isSuperClassReference("goog.global");
        boolean boolean8 = closureCodingConvention0.isConstant("goog.abstractMethod");
        boolean boolean10 = closureCodingConvention0.isValidEnumKey("hi!");
        boolean boolean12 = closureCodingConvention0.isSuperClassReference("goog.global");
        boolean boolean14 = closureCodingConvention0.isPrivate("goog.abstractMethod");
        boolean boolean16 = closureCodingConvention0.isValidEnumKey("");
        java.lang.String str17 = closureCodingConvention0.getGlobalObject();
        com.google.javascript.rhino.Node node18 = null;
        boolean boolean19 = closureCodingConvention0.isOptionalParameter(node18);
        com.google.javascript.rhino.Node node20 = null;
        com.google.javascript.rhino.Node node21 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str22 = closureCodingConvention0.extractClassNameIfRequire(node20, node21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "goog.global" + "'", str17, "goog.global");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test0721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0721");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        boolean boolean4 = closureCodingConvention0.isSuperClassReference("hi!");
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = null;
        com.google.javascript.jscomp.Scope scope6 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention7 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node8 = null;
        boolean boolean9 = closureCodingConvention7.isOptionalParameter(node8);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry10 = null;
        com.google.javascript.jscomp.Scope scope11 = null;
        com.google.javascript.rhino.jstype.ObjectType[] objectTypeArray12 = new com.google.javascript.rhino.jstype.ObjectType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType> objectTypeList13 = new java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList13, objectTypeArray12);
        java.util.Map<java.lang.String, java.lang.String> strMap15 = null;
        closureCodingConvention7.defineDelegateProxyPrototypeProperties(jSTypeRegistry10, scope11, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList13, strMap15);
        java.util.Map<java.lang.String, java.lang.String> strMap17 = null;
        closureCodingConvention0.defineDelegateProxyPrototypeProperties(jSTypeRegistry5, scope6, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList13, strMap17);
        com.google.javascript.rhino.Node node19 = null;
        java.util.Map<java.lang.String, java.lang.String> strMap20 = null;
        closureCodingConvention0.checkForCallingConventionDefiningCalls(node19, strMap20);
        com.google.javascript.rhino.jstype.FunctionType functionType22 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType23 = null;
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType24 = null;
        closureCodingConvention0.applySubclassRelationship(functionType22, functionType23, subclassType24);
        com.google.javascript.rhino.Node node26 = null;
        boolean boolean27 = closureCodingConvention0.isOptionalParameter(node26);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(objectTypeArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test0722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0722");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        java.lang.String str3 = closureCodingConvention0.getAbstractMethodName();
        java.lang.String str4 = closureCodingConvention0.getGlobalObject();
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection5 = closureCodingConvention0.getAssertionFunctions();
        boolean boolean7 = closureCodingConvention0.isConstant("goog.global");
        com.google.javascript.rhino.Node node8 = null;
        com.google.javascript.jscomp.CodingConvention.DelegateRelationship delegateRelationship9 = closureCodingConvention0.getDelegateRelationship(node8);
        com.google.javascript.rhino.jstype.FunctionType functionType10 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType11 = null;
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType12 = null;
        closureCodingConvention0.applySubclassRelationship(functionType10, functionType11, subclassType12);
        com.google.javascript.rhino.Node node14 = null;
        boolean boolean15 = closureCodingConvention0.isVarArgsParameter(node14);
        boolean boolean17 = closureCodingConvention0.isExported("goog.exportSymbol");
        com.google.javascript.rhino.Node node18 = null;
        com.google.javascript.jscomp.CodingConvention.DelegateRelationship delegateRelationship19 = closureCodingConvention0.getDelegateRelationship(node18);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "goog.abstractMethod" + "'", str3, "goog.abstractMethod");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "goog.global" + "'", str4, "goog.global");
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(delegateRelationship9);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(delegateRelationship19);
    }

    @Test
    public void test0723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0723");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        boolean boolean4 = closureCodingConvention0.isSuperClassReference("hi!");
        boolean boolean6 = closureCodingConvention0.isSuperClassReference("goog.global");
        boolean boolean8 = closureCodingConvention0.isValidEnumKey("");
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry9 = null;
        com.google.javascript.jscomp.Scope scope10 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention11 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node12 = null;
        boolean boolean13 = closureCodingConvention11.isOptionalParameter(node12);
        java.lang.String str14 = closureCodingConvention11.getAbstractMethodName();
        java.lang.String str15 = closureCodingConvention11.getGlobalObject();
        com.google.javascript.rhino.Node node16 = null;
        java.util.Map<java.lang.String, java.lang.String> strMap17 = null;
        closureCodingConvention11.checkForCallingConventionDefiningCalls(node16, strMap17);
        com.google.javascript.rhino.Node node19 = null;
        com.google.javascript.jscomp.CodingConvention.DelegateRelationship delegateRelationship20 = closureCodingConvention11.getDelegateRelationship(node19);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry21 = null;
        com.google.javascript.jscomp.Scope scope22 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention23 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node24 = null;
        boolean boolean25 = closureCodingConvention23.isOptionalParameter(node24);
        java.lang.String str26 = closureCodingConvention23.getAbstractMethodName();
        java.lang.String str27 = closureCodingConvention23.getGlobalObject();
        boolean boolean29 = closureCodingConvention23.isExported("goog.global");
        boolean boolean31 = closureCodingConvention23.isConstant("goog.abstractMethod");
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry32 = null;
        com.google.javascript.jscomp.Scope scope33 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention34 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node35 = null;
        boolean boolean36 = closureCodingConvention34.isOptionalParameter(node35);
        java.lang.String str37 = closureCodingConvention34.getAbstractMethodName();
        java.lang.String str38 = closureCodingConvention34.getGlobalObject();
        com.google.javascript.rhino.Node node39 = null;
        com.google.javascript.jscomp.CodingConvention.DelegateRelationship delegateRelationship40 = closureCodingConvention34.getDelegateRelationship(node39);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry41 = null;
        com.google.javascript.jscomp.Scope scope42 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention43 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node44 = null;
        boolean boolean45 = closureCodingConvention43.isOptionalParameter(node44);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry46 = null;
        com.google.javascript.jscomp.Scope scope47 = null;
        com.google.javascript.rhino.jstype.ObjectType[] objectTypeArray48 = new com.google.javascript.rhino.jstype.ObjectType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType> objectTypeList49 = new java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList49, objectTypeArray48);
        java.util.Map<java.lang.String, java.lang.String> strMap51 = null;
        closureCodingConvention43.defineDelegateProxyPrototypeProperties(jSTypeRegistry46, scope47, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList49, strMap51);
        java.util.Map<java.lang.String, java.lang.String> strMap53 = null;
        closureCodingConvention34.defineDelegateProxyPrototypeProperties(jSTypeRegistry41, scope42, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList49, strMap53);
        java.util.Map<java.lang.String, java.lang.String> strMap55 = null;
        closureCodingConvention23.defineDelegateProxyPrototypeProperties(jSTypeRegistry32, scope33, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList49, strMap55);
        java.util.Map<java.lang.String, java.lang.String> strMap57 = null;
        closureCodingConvention11.defineDelegateProxyPrototypeProperties(jSTypeRegistry21, scope22, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList49, strMap57);
        java.util.Map<java.lang.String, java.lang.String> strMap59 = null;
        closureCodingConvention0.defineDelegateProxyPrototypeProperties(jSTypeRegistry9, scope10, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList49, strMap59);
        java.lang.String str61 = closureCodingConvention0.getExportSymbolFunction();
        com.google.javascript.jscomp.NodeTraversal nodeTraversal62 = null;
        com.google.javascript.rhino.Node node63 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.jscomp.CodingConvention.ObjectLiteralCast objectLiteralCast64 = closureCodingConvention0.getObjectLiteralCast(nodeTraversal62, node63);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "goog.abstractMethod" + "'", str14, "goog.abstractMethod");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "goog.global" + "'", str15, "goog.global");
        org.junit.Assert.assertNull(delegateRelationship20);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "goog.abstractMethod" + "'", str26, "goog.abstractMethod");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "goog.global" + "'", str27, "goog.global");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "goog.abstractMethod" + "'", str37, "goog.abstractMethod");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "goog.global" + "'", str38, "goog.global");
        org.junit.Assert.assertNull(delegateRelationship40);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(objectTypeArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "goog.exportSymbol" + "'", str61, "goog.exportSymbol");
    }

    @Test
    public void test0724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0724");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.jstype.ObjectType objectType1 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType2 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType3 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType4 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType5 = null;
        closureCodingConvention0.applyDelegateRelationship(objectType1, objectType2, objectType3, functionType4, functionType5);
        java.lang.String str7 = closureCodingConvention0.getGlobalObject();
        java.lang.String str8 = closureCodingConvention0.getExportPropertyFunction();
        boolean boolean10 = closureCodingConvention0.isConstantKey("goog.abstractMethod");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "goog.global" + "'", str7, "goog.global");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "goog.exportProperty" + "'", str8, "goog.exportProperty");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test0725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0725");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        boolean boolean2 = closureCodingConvention0.isExported("goog.global");
        boolean boolean4 = closureCodingConvention0.isConstant("goog.exportProperty");
        boolean boolean6 = closureCodingConvention0.isPrivate("goog.global");
        com.google.javascript.rhino.jstype.FunctionType functionType7 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType8 = null;
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType9 = null;
        closureCodingConvention0.applySubclassRelationship(functionType7, functionType8, subclassType9);
        java.lang.String str11 = closureCodingConvention0.getGlobalObject();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "goog.global" + "'", str11, "goog.global");
    }

    @Test
    public void test0726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0726");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        java.lang.String str3 = closureCodingConvention0.getAbstractMethodName();
        java.lang.String str4 = closureCodingConvention0.getGlobalObject();
        com.google.javascript.rhino.Node node5 = null;
        java.util.Map<java.lang.String, java.lang.String> strMap6 = null;
        closureCodingConvention0.checkForCallingConventionDefiningCalls(node5, strMap6);
        com.google.javascript.rhino.Node node8 = null;
        com.google.javascript.jscomp.CodingConvention.DelegateRelationship delegateRelationship9 = closureCodingConvention0.getDelegateRelationship(node8);
        java.lang.String str10 = closureCodingConvention0.getDelegateSuperclassName();
        com.google.javascript.rhino.Node node11 = null;
        boolean boolean12 = closureCodingConvention0.isVarArgsParameter(node11);
        boolean boolean14 = closureCodingConvention0.isPrivate("goog.global");
        java.lang.String str15 = closureCodingConvention0.getExportSymbolFunction();
        boolean boolean17 = closureCodingConvention0.isSuperClassReference("hi!");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "goog.abstractMethod" + "'", str3, "goog.abstractMethod");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "goog.global" + "'", str4, "goog.global");
        org.junit.Assert.assertNull(delegateRelationship9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "goog.exportSymbol" + "'", str15, "goog.exportSymbol");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test0727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0727");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry3 = null;
        com.google.javascript.jscomp.Scope scope4 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention5 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node6 = null;
        boolean boolean7 = closureCodingConvention5.isOptionalParameter(node6);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry8 = null;
        com.google.javascript.jscomp.Scope scope9 = null;
        com.google.javascript.rhino.jstype.ObjectType[] objectTypeArray10 = new com.google.javascript.rhino.jstype.ObjectType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType> objectTypeList11 = new java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList11, objectTypeArray10);
        java.util.Map<java.lang.String, java.lang.String> strMap13 = null;
        closureCodingConvention5.defineDelegateProxyPrototypeProperties(jSTypeRegistry8, scope9, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList11, strMap13);
        java.util.Map<java.lang.String, java.lang.String> strMap15 = null;
        closureCodingConvention0.defineDelegateProxyPrototypeProperties(jSTypeRegistry3, scope4, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList11, strMap15);
        com.google.javascript.rhino.Node node17 = null;
        com.google.javascript.jscomp.CodingConvention.DelegateRelationship delegateRelationship18 = closureCodingConvention0.getDelegateRelationship(node17);
        boolean boolean20 = closureCodingConvention0.isExported("");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(objectTypeArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(delegateRelationship18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test0728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0728");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        boolean boolean2 = closureCodingConvention0.isExported("goog.global");
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection3 = closureCodingConvention0.getAssertionFunctions();
        java.lang.String str4 = closureCodingConvention0.getGlobalObject();
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = null;
        com.google.javascript.jscomp.Scope scope6 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention7 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node8 = null;
        boolean boolean9 = closureCodingConvention7.isOptionalParameter(node8);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry10 = null;
        com.google.javascript.jscomp.Scope scope11 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention12 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node13 = null;
        boolean boolean14 = closureCodingConvention12.isOptionalParameter(node13);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry15 = null;
        com.google.javascript.jscomp.Scope scope16 = null;
        com.google.javascript.rhino.jstype.ObjectType[] objectTypeArray17 = new com.google.javascript.rhino.jstype.ObjectType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType> objectTypeList18 = new java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList18, objectTypeArray17);
        java.util.Map<java.lang.String, java.lang.String> strMap20 = null;
        closureCodingConvention12.defineDelegateProxyPrototypeProperties(jSTypeRegistry15, scope16, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList18, strMap20);
        java.util.Map<java.lang.String, java.lang.String> strMap22 = null;
        closureCodingConvention7.defineDelegateProxyPrototypeProperties(jSTypeRegistry10, scope11, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList18, strMap22);
        java.util.Map<java.lang.String, java.lang.String> strMap24 = null;
        closureCodingConvention0.defineDelegateProxyPrototypeProperties(jSTypeRegistry5, scope6, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList18, strMap24);
        boolean boolean27 = closureCodingConvention0.isPrivate("goog.abstractMethod");
        java.lang.String str28 = closureCodingConvention0.getExportSymbolFunction();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "goog.global" + "'", str4, "goog.global");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(objectTypeArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "goog.exportSymbol" + "'", str28, "goog.exportSymbol");
    }

    @Test
    public void test0729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0729");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        boolean boolean2 = closureCodingConvention0.isExported("goog.global");
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection3 = closureCodingConvention0.getAssertionFunctions();
        boolean boolean5 = closureCodingConvention0.isPrivate("");
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry6 = null;
        com.google.javascript.jscomp.Scope scope7 = null;
        java.util.List<com.google.javascript.rhino.jstype.ObjectType> objectTypeList8 = null;
        java.util.Map<java.lang.String, java.lang.String> strMap9 = null;
        closureCodingConvention0.defineDelegateProxyPrototypeProperties(jSTypeRegistry6, scope7, objectTypeList8, strMap9);
        boolean boolean12 = closureCodingConvention0.isConstant("goog.exportSymbol");
        boolean boolean14 = closureCodingConvention0.isConstantKey("goog.abstractMethod");
        java.lang.String str15 = closureCodingConvention0.getExportPropertyFunction();
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection16 = closureCodingConvention0.getAssertionFunctions();
        boolean boolean18 = closureCodingConvention0.isConstantKey("goog.global");
        com.google.javascript.rhino.Node node19 = null;
        com.google.javascript.rhino.Node node20 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str21 = closureCodingConvention0.extractClassNameIfRequire(node19, node20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "goog.exportProperty" + "'", str15, "goog.exportProperty");
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test0730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0730");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        boolean boolean4 = closureCodingConvention0.isSuperClassReference("hi!");
        boolean boolean6 = closureCodingConvention0.isValidEnumKey("");
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry7 = null;
        com.google.javascript.jscomp.Scope scope8 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention9 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node10 = null;
        boolean boolean11 = closureCodingConvention9.isOptionalParameter(node10);
        java.lang.String str12 = closureCodingConvention9.getAbstractMethodName();
        java.lang.String str13 = closureCodingConvention9.getGlobalObject();
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection14 = closureCodingConvention9.getAssertionFunctions();
        boolean boolean16 = closureCodingConvention9.isConstant("goog.global");
        com.google.javascript.rhino.Node node17 = null;
        com.google.javascript.jscomp.CodingConvention.DelegateRelationship delegateRelationship18 = closureCodingConvention9.getDelegateRelationship(node17);
        com.google.javascript.rhino.jstype.ObjectType objectType19 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType20 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType21 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType22 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType23 = null;
        closureCodingConvention9.applyDelegateRelationship(objectType19, objectType20, objectType21, functionType22, functionType23);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry25 = null;
        com.google.javascript.jscomp.Scope scope26 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention27 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node28 = null;
        boolean boolean29 = closureCodingConvention27.isOptionalParameter(node28);
        boolean boolean31 = closureCodingConvention27.isSuperClassReference("hi!");
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry32 = null;
        com.google.javascript.jscomp.Scope scope33 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention34 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node35 = null;
        boolean boolean36 = closureCodingConvention34.isOptionalParameter(node35);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry37 = null;
        com.google.javascript.jscomp.Scope scope38 = null;
        com.google.javascript.rhino.jstype.ObjectType[] objectTypeArray39 = new com.google.javascript.rhino.jstype.ObjectType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType> objectTypeList40 = new java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList40, objectTypeArray39);
        java.util.Map<java.lang.String, java.lang.String> strMap42 = null;
        closureCodingConvention34.defineDelegateProxyPrototypeProperties(jSTypeRegistry37, scope38, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList40, strMap42);
        java.util.Map<java.lang.String, java.lang.String> strMap44 = null;
        closureCodingConvention27.defineDelegateProxyPrototypeProperties(jSTypeRegistry32, scope33, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList40, strMap44);
        java.util.Map<java.lang.String, java.lang.String> strMap46 = null;
        closureCodingConvention9.defineDelegateProxyPrototypeProperties(jSTypeRegistry25, scope26, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList40, strMap46);
        java.util.Map<java.lang.String, java.lang.String> strMap48 = null;
        closureCodingConvention0.defineDelegateProxyPrototypeProperties(jSTypeRegistry7, scope8, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList40, strMap48);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry50 = null;
        com.google.javascript.jscomp.Scope scope51 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention52 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node53 = null;
        boolean boolean54 = closureCodingConvention52.isOptionalParameter(node53);
        boolean boolean56 = closureCodingConvention52.isSuperClassReference("hi!");
        com.google.javascript.rhino.Node node57 = null;
        boolean boolean58 = closureCodingConvention52.isOptionalParameter(node57);
        boolean boolean60 = closureCodingConvention52.isConstantKey("hi!");
        com.google.javascript.rhino.Node node61 = null;
        boolean boolean62 = closureCodingConvention52.isVarArgsParameter(node61);
        boolean boolean64 = closureCodingConvention52.isExported("");
        com.google.javascript.rhino.Node node65 = null;
        boolean boolean66 = closureCodingConvention52.isVarArgsParameter(node65);
        java.lang.String str67 = closureCodingConvention52.getExportSymbolFunction();
        java.lang.String str68 = closureCodingConvention52.getAbstractMethodName();
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry69 = null;
        com.google.javascript.jscomp.Scope scope70 = null;
        com.google.javascript.rhino.jstype.ObjectType[] objectTypeArray71 = new com.google.javascript.rhino.jstype.ObjectType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType> objectTypeList72 = new java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType>();
        boolean boolean73 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList72, objectTypeArray71);
        java.util.Map<java.lang.String, java.lang.String> strMap74 = null;
        closureCodingConvention52.defineDelegateProxyPrototypeProperties(jSTypeRegistry69, scope70, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList72, strMap74);
        java.util.Map<java.lang.String, java.lang.String> strMap76 = null;
        closureCodingConvention0.defineDelegateProxyPrototypeProperties(jSTypeRegistry50, scope51, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList72, strMap76);
        com.google.javascript.rhino.Node node78 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.jscomp.CodingConvention.Bind bind79 = closureCodingConvention0.describeFunctionBind(node78);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "goog.abstractMethod" + "'", str12, "goog.abstractMethod");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "goog.global" + "'", str13, "goog.global");
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(delegateRelationship18);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(objectTypeArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "goog.exportSymbol" + "'", str67, "goog.exportSymbol");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "goog.abstractMethod" + "'", str68, "goog.abstractMethod");
        org.junit.Assert.assertNotNull(objectTypeArray71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
    }

    @Test
    public void test0731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0731");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        java.lang.String str3 = closureCodingConvention0.getAbstractMethodName();
        boolean boolean5 = closureCodingConvention0.isConstant("goog.abstractMethod");
        boolean boolean7 = closureCodingConvention0.isExported("goog.exportSymbol");
        com.google.javascript.rhino.Node node8 = null;
        boolean boolean9 = closureCodingConvention0.isVarArgsParameter(node8);
        boolean boolean11 = closureCodingConvention0.isSuperClassReference("goog.global");
        com.google.javascript.rhino.Node node12 = null;
        com.google.javascript.rhino.Node node13 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str14 = closureCodingConvention0.extractClassNameIfRequire(node12, node13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "goog.abstractMethod" + "'", str3, "goog.abstractMethod");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test0732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0732");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        boolean boolean4 = closureCodingConvention0.isSuperClassReference("hi!");
        boolean boolean6 = closureCodingConvention0.isSuperClassReference("goog.global");
        boolean boolean8 = closureCodingConvention0.isConstant("goog.abstractMethod");
        boolean boolean10 = closureCodingConvention0.isValidEnumKey("hi!");
        java.lang.String str11 = closureCodingConvention0.getGlobalObject();
        boolean boolean13 = closureCodingConvention0.isPrivate("");
        com.google.javascript.rhino.Node node14 = null;
        com.google.javascript.jscomp.CodingConvention.DelegateRelationship delegateRelationship15 = closureCodingConvention0.getDelegateRelationship(node14);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "goog.global" + "'", str11, "goog.global");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(delegateRelationship15);
    }

    @Test
    public void test0733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0733");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        java.lang.String str3 = closureCodingConvention0.getAbstractMethodName();
        java.lang.String str4 = closureCodingConvention0.getGlobalObject();
        com.google.javascript.rhino.Node node5 = null;
        com.google.javascript.jscomp.CodingConvention.DelegateRelationship delegateRelationship6 = closureCodingConvention0.getDelegateRelationship(node5);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry7 = null;
        com.google.javascript.jscomp.Scope scope8 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention9 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node10 = null;
        boolean boolean11 = closureCodingConvention9.isOptionalParameter(node10);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry12 = null;
        com.google.javascript.jscomp.Scope scope13 = null;
        com.google.javascript.rhino.jstype.ObjectType[] objectTypeArray14 = new com.google.javascript.rhino.jstype.ObjectType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType> objectTypeList15 = new java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList15, objectTypeArray14);
        java.util.Map<java.lang.String, java.lang.String> strMap17 = null;
        closureCodingConvention9.defineDelegateProxyPrototypeProperties(jSTypeRegistry12, scope13, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList15, strMap17);
        java.util.Map<java.lang.String, java.lang.String> strMap19 = null;
        closureCodingConvention0.defineDelegateProxyPrototypeProperties(jSTypeRegistry7, scope8, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList15, strMap19);
        boolean boolean22 = closureCodingConvention0.isPrivate("goog.exportSymbol");
        boolean boolean24 = closureCodingConvention0.isConstant("goog.abstractMethod");
        boolean boolean26 = closureCodingConvention0.isExported("goog.exportProperty");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "goog.abstractMethod" + "'", str3, "goog.abstractMethod");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "goog.global" + "'", str4, "goog.global");
        org.junit.Assert.assertNull(delegateRelationship6);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(objectTypeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test0734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0734");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        java.lang.String str3 = closureCodingConvention0.getAbstractMethodName();
        java.lang.String str4 = closureCodingConvention0.getGlobalObject();
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection5 = closureCodingConvention0.getAssertionFunctions();
        boolean boolean7 = closureCodingConvention0.isConstant("goog.global");
        com.google.javascript.rhino.Node node8 = null;
        com.google.javascript.jscomp.CodingConvention.DelegateRelationship delegateRelationship9 = closureCodingConvention0.getDelegateRelationship(node8);
        java.lang.String str10 = closureCodingConvention0.getAbstractMethodName();
        boolean boolean12 = closureCodingConvention0.isValidEnumKey("goog.abstractMethod");
        java.lang.String str13 = closureCodingConvention0.getDelegateSuperclassName();
        com.google.javascript.rhino.Node node14 = null;
        boolean boolean15 = closureCodingConvention0.isVarArgsParameter(node14);
        java.lang.Class<?> wildcardClass16 = closureCodingConvention0.getClass();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "goog.abstractMethod" + "'", str3, "goog.abstractMethod");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "goog.global" + "'", str4, "goog.global");
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(delegateRelationship9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "goog.abstractMethod" + "'", str10, "goog.abstractMethod");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test0735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0735");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        boolean boolean2 = closureCodingConvention0.isExported("goog.global");
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection3 = closureCodingConvention0.getAssertionFunctions();
        java.lang.String str4 = closureCodingConvention0.getGlobalObject();
        com.google.javascript.rhino.Node node5 = null;
        boolean boolean6 = closureCodingConvention0.isOptionalParameter(node5);
        java.lang.String str7 = closureCodingConvention0.getDelegateSuperclassName();
        boolean boolean9 = closureCodingConvention0.isConstant("");
        com.google.javascript.rhino.Node node10 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.jscomp.CodingConvention.Bind bind11 = closureCodingConvention0.describeFunctionBind(node10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "goog.global" + "'", str4, "goog.global");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test0736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0736");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        boolean boolean4 = closureCodingConvention0.isSuperClassReference("hi!");
        com.google.javascript.rhino.Node node5 = null;
        boolean boolean6 = closureCodingConvention0.isOptionalParameter(node5);
        boolean boolean8 = closureCodingConvention0.isConstantKey("hi!");
        com.google.javascript.rhino.Node node9 = null;
        boolean boolean10 = closureCodingConvention0.isVarArgsParameter(node9);
        boolean boolean12 = closureCodingConvention0.isExported("");
        com.google.javascript.rhino.Node node13 = null;
        boolean boolean14 = closureCodingConvention0.isVarArgsParameter(node13);
        java.lang.String str15 = closureCodingConvention0.getExportSymbolFunction();
        java.lang.String str16 = closureCodingConvention0.getAbstractMethodName();
        com.google.javascript.rhino.Node node17 = null;
        java.util.Map<java.lang.String, java.lang.String> strMap18 = null;
        closureCodingConvention0.checkForCallingConventionDefiningCalls(node17, strMap18);
        com.google.javascript.rhino.jstype.FunctionType functionType20 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType21 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType22 = null;
        // The following exception was thrown during execution in test generation
        try {
            closureCodingConvention0.applySingletonGetter(functionType20, functionType21, objectType22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "goog.exportSymbol" + "'", str15, "goog.exportSymbol");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "goog.abstractMethod" + "'", str16, "goog.abstractMethod");
    }

    @Test
    public void test0737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0737");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        boolean boolean2 = closureCodingConvention0.isValidEnumKey("goog.abstractMethod");
        boolean boolean4 = closureCodingConvention0.isValidEnumKey("goog.exportSymbol");
        com.google.javascript.rhino.Node node5 = null;
        com.google.javascript.jscomp.CodingConvention.DelegateRelationship delegateRelationship6 = closureCodingConvention0.getDelegateRelationship(node5);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNull(delegateRelationship6);
    }

    @Test
    public void test0738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0738");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        java.lang.String str3 = closureCodingConvention0.getAbstractMethodName();
        java.lang.String str4 = closureCodingConvention0.getGlobalObject();
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection5 = closureCodingConvention0.getAssertionFunctions();
        boolean boolean7 = closureCodingConvention0.isConstant("goog.global");
        boolean boolean9 = closureCodingConvention0.isSuperClassReference("goog.exportProperty");
        com.google.javascript.rhino.jstype.FunctionType functionType10 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType11 = null;
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType12 = null;
        closureCodingConvention0.applySubclassRelationship(functionType10, functionType11, subclassType12);
        java.lang.Class<?> wildcardClass14 = closureCodingConvention0.getClass();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "goog.abstractMethod" + "'", str3, "goog.abstractMethod");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "goog.global" + "'", str4, "goog.global");
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test0739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0739");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        boolean boolean4 = closureCodingConvention0.isSuperClassReference("hi!");
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = null;
        com.google.javascript.jscomp.Scope scope6 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention7 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node8 = null;
        boolean boolean9 = closureCodingConvention7.isOptionalParameter(node8);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry10 = null;
        com.google.javascript.jscomp.Scope scope11 = null;
        com.google.javascript.rhino.jstype.ObjectType[] objectTypeArray12 = new com.google.javascript.rhino.jstype.ObjectType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType> objectTypeList13 = new java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList13, objectTypeArray12);
        java.util.Map<java.lang.String, java.lang.String> strMap15 = null;
        closureCodingConvention7.defineDelegateProxyPrototypeProperties(jSTypeRegistry10, scope11, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList13, strMap15);
        java.util.Map<java.lang.String, java.lang.String> strMap17 = null;
        closureCodingConvention0.defineDelegateProxyPrototypeProperties(jSTypeRegistry5, scope6, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList13, strMap17);
        java.lang.String str19 = closureCodingConvention0.getAbstractMethodName();
        com.google.javascript.rhino.Node node20 = null;
        com.google.javascript.jscomp.CodingConvention.DelegateRelationship delegateRelationship21 = closureCodingConvention0.getDelegateRelationship(node20);
        boolean boolean23 = closureCodingConvention0.isConstantKey("goog.abstractMethod");
        boolean boolean26 = closureCodingConvention0.isExported("goog.exportProperty", false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(objectTypeArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "goog.abstractMethod" + "'", str19, "goog.abstractMethod");
        org.junit.Assert.assertNull(delegateRelationship21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test0740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0740");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        java.lang.String str3 = closureCodingConvention0.getAbstractMethodName();
        boolean boolean5 = closureCodingConvention0.isConstant("goog.abstractMethod");
        java.lang.String str6 = closureCodingConvention0.getDelegateSuperclassName();
        com.google.javascript.rhino.jstype.ObjectType objectType7 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType8 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType9 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType10 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType11 = null;
        closureCodingConvention0.applyDelegateRelationship(objectType7, objectType8, objectType9, functionType10, functionType11);
        boolean boolean14 = closureCodingConvention0.isValidEnumKey("goog.exportProperty");
        java.lang.String str15 = closureCodingConvention0.getAbstractMethodName();
        com.google.javascript.rhino.Node node16 = null;
        com.google.javascript.rhino.Node node17 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str18 = closureCodingConvention0.extractClassNameIfRequire(node16, node17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "goog.abstractMethod" + "'", str3, "goog.abstractMethod");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "goog.abstractMethod" + "'", str15, "goog.abstractMethod");
    }

    @Test
    public void test0741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0741");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        java.lang.String str3 = closureCodingConvention0.getAbstractMethodName();
        java.lang.String str4 = closureCodingConvention0.getGlobalObject();
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection5 = closureCodingConvention0.getAssertionFunctions();
        boolean boolean7 = closureCodingConvention0.isConstant("goog.global");
        boolean boolean9 = closureCodingConvention0.isSuperClassReference("goog.exportProperty");
        com.google.javascript.rhino.jstype.FunctionType functionType10 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType11 = null;
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType12 = null;
        closureCodingConvention0.applySubclassRelationship(functionType10, functionType11, subclassType12);
        boolean boolean15 = closureCodingConvention0.isSuperClassReference("goog.global");
        boolean boolean17 = closureCodingConvention0.isConstantKey("");
        com.google.javascript.rhino.Node node18 = null;
        java.util.Map<java.lang.String, java.lang.String> strMap19 = null;
        closureCodingConvention0.checkForCallingConventionDefiningCalls(node18, strMap19);
        boolean boolean22 = closureCodingConvention0.isValidEnumKey("hi!");
        java.lang.String str23 = closureCodingConvention0.getExportPropertyFunction();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "goog.abstractMethod" + "'", str3, "goog.abstractMethod");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "goog.global" + "'", str4, "goog.global");
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "goog.exportProperty" + "'", str23, "goog.exportProperty");
    }

    @Test
    public void test0742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0742");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        boolean boolean4 = closureCodingConvention0.isSuperClassReference("hi!");
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = null;
        com.google.javascript.jscomp.Scope scope6 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention7 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node8 = null;
        boolean boolean9 = closureCodingConvention7.isOptionalParameter(node8);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry10 = null;
        com.google.javascript.jscomp.Scope scope11 = null;
        com.google.javascript.rhino.jstype.ObjectType[] objectTypeArray12 = new com.google.javascript.rhino.jstype.ObjectType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType> objectTypeList13 = new java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList13, objectTypeArray12);
        java.util.Map<java.lang.String, java.lang.String> strMap15 = null;
        closureCodingConvention7.defineDelegateProxyPrototypeProperties(jSTypeRegistry10, scope11, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList13, strMap15);
        java.util.Map<java.lang.String, java.lang.String> strMap17 = null;
        closureCodingConvention0.defineDelegateProxyPrototypeProperties(jSTypeRegistry5, scope6, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList13, strMap17);
        boolean boolean20 = closureCodingConvention0.isPrivate("goog.global");
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry21 = null;
        com.google.javascript.jscomp.Scope scope22 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention23 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node24 = null;
        boolean boolean25 = closureCodingConvention23.isOptionalParameter(node24);
        java.lang.String str26 = closureCodingConvention23.getAbstractMethodName();
        java.lang.String str27 = closureCodingConvention23.getGlobalObject();
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry28 = null;
        com.google.javascript.jscomp.Scope scope29 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention30 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node31 = null;
        boolean boolean32 = closureCodingConvention30.isOptionalParameter(node31);
        java.lang.String str33 = closureCodingConvention30.getAbstractMethodName();
        boolean boolean35 = closureCodingConvention30.isConstant("goog.abstractMethod");
        boolean boolean37 = closureCodingConvention30.isValidEnumKey("hi!");
        com.google.javascript.rhino.Node node38 = null;
        com.google.javascript.jscomp.CodingConvention.DelegateRelationship delegateRelationship39 = closureCodingConvention30.getDelegateRelationship(node38);
        com.google.javascript.rhino.Node node40 = null;
        java.util.Map<java.lang.String, java.lang.String> strMap41 = null;
        closureCodingConvention30.checkForCallingConventionDefiningCalls(node40, strMap41);
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection43 = closureCodingConvention30.getAssertionFunctions();
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry44 = null;
        com.google.javascript.jscomp.Scope scope45 = null;
        com.google.javascript.rhino.jstype.ObjectType[] objectTypeArray46 = new com.google.javascript.rhino.jstype.ObjectType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType> objectTypeList47 = new java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList47, objectTypeArray46);
        java.util.Map<java.lang.String, java.lang.String> strMap49 = null;
        closureCodingConvention30.defineDelegateProxyPrototypeProperties(jSTypeRegistry44, scope45, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList47, strMap49);
        java.util.Map<java.lang.String, java.lang.String> strMap51 = null;
        closureCodingConvention23.defineDelegateProxyPrototypeProperties(jSTypeRegistry28, scope29, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList47, strMap51);
        java.util.Map<java.lang.String, java.lang.String> strMap53 = null;
        closureCodingConvention0.defineDelegateProxyPrototypeProperties(jSTypeRegistry21, scope22, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList47, strMap53);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(objectTypeArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "goog.abstractMethod" + "'", str26, "goog.abstractMethod");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "goog.global" + "'", str27, "goog.global");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "goog.abstractMethod" + "'", str33, "goog.abstractMethod");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNull(delegateRelationship39);
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection43);
        org.junit.Assert.assertNotNull(objectTypeArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test0743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0743");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry3 = null;
        com.google.javascript.jscomp.Scope scope4 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention5 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node6 = null;
        boolean boolean7 = closureCodingConvention5.isOptionalParameter(node6);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry8 = null;
        com.google.javascript.jscomp.Scope scope9 = null;
        com.google.javascript.rhino.jstype.ObjectType[] objectTypeArray10 = new com.google.javascript.rhino.jstype.ObjectType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType> objectTypeList11 = new java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList11, objectTypeArray10);
        java.util.Map<java.lang.String, java.lang.String> strMap13 = null;
        closureCodingConvention5.defineDelegateProxyPrototypeProperties(jSTypeRegistry8, scope9, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList11, strMap13);
        java.util.Map<java.lang.String, java.lang.String> strMap15 = null;
        closureCodingConvention0.defineDelegateProxyPrototypeProperties(jSTypeRegistry3, scope4, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList11, strMap15);
        com.google.javascript.rhino.Node node17 = null;
        java.util.Map<java.lang.String, java.lang.String> strMap18 = null;
        closureCodingConvention0.checkForCallingConventionDefiningCalls(node17, strMap18);
        boolean boolean21 = closureCodingConvention0.isConstant("");
        java.lang.String str22 = closureCodingConvention0.getExportSymbolFunction();
        com.google.javascript.rhino.Node node23 = null;
        java.util.Map<java.lang.String, java.lang.String> strMap24 = null;
        closureCodingConvention0.checkForCallingConventionDefiningCalls(node23, strMap24);
        boolean boolean28 = closureCodingConvention0.isExported("hi!", true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(objectTypeArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "goog.exportSymbol" + "'", str22, "goog.exportSymbol");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test0744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0744");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        boolean boolean2 = closureCodingConvention0.isExported("goog.global");
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection3 = closureCodingConvention0.getAssertionFunctions();
        boolean boolean5 = closureCodingConvention0.isPrivate("");
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry6 = null;
        com.google.javascript.jscomp.Scope scope7 = null;
        java.util.List<com.google.javascript.rhino.jstype.ObjectType> objectTypeList8 = null;
        java.util.Map<java.lang.String, java.lang.String> strMap9 = null;
        closureCodingConvention0.defineDelegateProxyPrototypeProperties(jSTypeRegistry6, scope7, objectTypeList8, strMap9);
        boolean boolean12 = closureCodingConvention0.isConstant("goog.exportSymbol");
        boolean boolean14 = closureCodingConvention0.isConstantKey("goog.abstractMethod");
        java.lang.String str15 = closureCodingConvention0.getExportPropertyFunction();
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection16 = closureCodingConvention0.getAssertionFunctions();
        com.google.javascript.rhino.Node node17 = null;
        java.util.Map<java.lang.String, java.lang.String> strMap18 = null;
        closureCodingConvention0.checkForCallingConventionDefiningCalls(node17, strMap18);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "goog.exportProperty" + "'", str15, "goog.exportProperty");
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection16);
    }

    @Test
    public void test0745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0745");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        boolean boolean4 = closureCodingConvention0.isSuperClassReference("hi!");
        boolean boolean6 = closureCodingConvention0.isSuperClassReference("goog.global");
        boolean boolean8 = closureCodingConvention0.isConstant("goog.abstractMethod");
        boolean boolean10 = closureCodingConvention0.isValidEnumKey("hi!");
        boolean boolean12 = closureCodingConvention0.isSuperClassReference("goog.global");
        java.lang.String str13 = closureCodingConvention0.getAbstractMethodName();
        boolean boolean15 = closureCodingConvention0.isConstant("hi!");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "goog.abstractMethod" + "'", str13, "goog.abstractMethod");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test0746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0746");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        boolean boolean4 = closureCodingConvention0.isSuperClassReference("hi!");
        com.google.javascript.rhino.Node node5 = null;
        boolean boolean6 = closureCodingConvention0.isOptionalParameter(node5);
        java.lang.String str7 = closureCodingConvention0.getExportPropertyFunction();
        java.lang.String str8 = closureCodingConvention0.getGlobalObject();
        boolean boolean10 = closureCodingConvention0.isValidEnumKey("");
        java.lang.String str11 = closureCodingConvention0.getDelegateSuperclassName();
        boolean boolean13 = closureCodingConvention0.isPrivate("hi!");
        com.google.javascript.rhino.jstype.FunctionType functionType14 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType15 = null;
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType16 = null;
        closureCodingConvention0.applySubclassRelationship(functionType14, functionType15, subclassType16);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "goog.exportProperty" + "'", str7, "goog.exportProperty");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "goog.global" + "'", str8, "goog.global");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test0747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0747");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        java.lang.String str3 = closureCodingConvention0.getAbstractMethodName();
        java.lang.String str4 = closureCodingConvention0.getGlobalObject();
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection5 = closureCodingConvention0.getAssertionFunctions();
        boolean boolean7 = closureCodingConvention0.isConstant("goog.global");
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection8 = closureCodingConvention0.getAssertionFunctions();
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection9 = closureCodingConvention0.getAssertionFunctions();
        com.google.javascript.rhino.Node node10 = null;
        boolean boolean11 = closureCodingConvention0.isOptionalParameter(node10);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "goog.abstractMethod" + "'", str3, "goog.abstractMethod");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "goog.global" + "'", str4, "goog.global");
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection8);
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test0748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0748");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        java.lang.String str3 = closureCodingConvention0.getAbstractMethodName();
        java.lang.String str4 = closureCodingConvention0.getGlobalObject();
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection5 = closureCodingConvention0.getAssertionFunctions();
        boolean boolean7 = closureCodingConvention0.isConstant("goog.global");
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection8 = closureCodingConvention0.getAssertionFunctions();
        boolean boolean10 = closureCodingConvention0.isValidEnumKey("goog.exportProperty");
        java.lang.String str11 = closureCodingConvention0.getAbstractMethodName();
        com.google.javascript.rhino.Node node12 = null;
        java.util.Map<java.lang.String, java.lang.String> strMap13 = null;
        closureCodingConvention0.checkForCallingConventionDefiningCalls(node12, strMap13);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "goog.abstractMethod" + "'", str3, "goog.abstractMethod");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "goog.global" + "'", str4, "goog.global");
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "goog.abstractMethod" + "'", str11, "goog.abstractMethod");
    }

    @Test
    public void test0749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0749");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        boolean boolean2 = closureCodingConvention0.isExported("goog.global");
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection3 = closureCodingConvention0.getAssertionFunctions();
        boolean boolean5 = closureCodingConvention0.isPrivate("");
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry6 = null;
        com.google.javascript.jscomp.Scope scope7 = null;
        java.util.List<com.google.javascript.rhino.jstype.ObjectType> objectTypeList8 = null;
        java.util.Map<java.lang.String, java.lang.String> strMap9 = null;
        closureCodingConvention0.defineDelegateProxyPrototypeProperties(jSTypeRegistry6, scope7, objectTypeList8, strMap9);
        com.google.javascript.rhino.Node node11 = null;
        java.util.Map<java.lang.String, java.lang.String> strMap12 = null;
        closureCodingConvention0.checkForCallingConventionDefiningCalls(node11, strMap12);
        com.google.javascript.rhino.Node node14 = null;
        boolean boolean15 = closureCodingConvention0.isOptionalParameter(node14);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test0750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0750");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        boolean boolean4 = closureCodingConvention0.isSuperClassReference("hi!");
        boolean boolean6 = closureCodingConvention0.isSuperClassReference("goog.global");
        boolean boolean8 = closureCodingConvention0.isConstant("goog.abstractMethod");
        boolean boolean10 = closureCodingConvention0.isValidEnumKey("hi!");
        boolean boolean12 = closureCodingConvention0.isSuperClassReference("goog.global");
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry13 = null;
        com.google.javascript.jscomp.Scope scope14 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention15 = new com.google.javascript.jscomp.ClosureCodingConvention();
        boolean boolean17 = closureCodingConvention15.isExported("goog.global");
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection18 = closureCodingConvention15.getAssertionFunctions();
        java.lang.String str19 = closureCodingConvention15.getGlobalObject();
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry20 = null;
        com.google.javascript.jscomp.Scope scope21 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention22 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node23 = null;
        boolean boolean24 = closureCodingConvention22.isOptionalParameter(node23);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry25 = null;
        com.google.javascript.jscomp.Scope scope26 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention27 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node28 = null;
        boolean boolean29 = closureCodingConvention27.isOptionalParameter(node28);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry30 = null;
        com.google.javascript.jscomp.Scope scope31 = null;
        com.google.javascript.rhino.jstype.ObjectType[] objectTypeArray32 = new com.google.javascript.rhino.jstype.ObjectType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType> objectTypeList33 = new java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList33, objectTypeArray32);
        java.util.Map<java.lang.String, java.lang.String> strMap35 = null;
        closureCodingConvention27.defineDelegateProxyPrototypeProperties(jSTypeRegistry30, scope31, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList33, strMap35);
        java.util.Map<java.lang.String, java.lang.String> strMap37 = null;
        closureCodingConvention22.defineDelegateProxyPrototypeProperties(jSTypeRegistry25, scope26, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList33, strMap37);
        java.util.Map<java.lang.String, java.lang.String> strMap39 = null;
        closureCodingConvention15.defineDelegateProxyPrototypeProperties(jSTypeRegistry20, scope21, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList33, strMap39);
        java.util.Map<java.lang.String, java.lang.String> strMap41 = null;
        closureCodingConvention0.defineDelegateProxyPrototypeProperties(jSTypeRegistry13, scope14, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList33, strMap41);
        com.google.javascript.rhino.Node node43 = null;
        boolean boolean44 = closureCodingConvention0.isOptionalParameter(node43);
        com.google.javascript.rhino.Node node45 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean46 = closureCodingConvention0.isPropertyTestFunction(node45);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "goog.global" + "'", str19, "goog.global");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(objectTypeArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test0751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0751");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        boolean boolean4 = closureCodingConvention0.isSuperClassReference("hi!");
        boolean boolean6 = closureCodingConvention0.isSuperClassReference("goog.global");
        boolean boolean8 = closureCodingConvention0.isConstant("goog.abstractMethod");
        boolean boolean10 = closureCodingConvention0.isValidEnumKey("hi!");
        java.lang.String str11 = closureCodingConvention0.getGlobalObject();
        com.google.javascript.rhino.Node node12 = null;
        com.google.javascript.rhino.Node node13 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str14 = closureCodingConvention0.extractClassNameIfProvide(node12, node13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "goog.global" + "'", str11, "goog.global");
    }

    @Test
    public void test0752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0752");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        boolean boolean2 = closureCodingConvention0.isExported("goog.global");
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection3 = closureCodingConvention0.getAssertionFunctions();
        java.lang.String str4 = closureCodingConvention0.getGlobalObject();
        boolean boolean7 = closureCodingConvention0.isExported("goog.exportProperty", false);
        java.lang.String str8 = closureCodingConvention0.getExportSymbolFunction();
        java.lang.String str9 = closureCodingConvention0.getExportPropertyFunction();
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry10 = null;
        com.google.javascript.jscomp.Scope scope11 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention12 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node13 = null;
        boolean boolean14 = closureCodingConvention12.isOptionalParameter(node13);
        java.lang.String str15 = closureCodingConvention12.getAbstractMethodName();
        java.lang.String str16 = closureCodingConvention12.getGlobalObject();
        boolean boolean18 = closureCodingConvention12.isExported("goog.global");
        boolean boolean20 = closureCodingConvention12.isConstant("goog.abstractMethod");
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry21 = null;
        com.google.javascript.jscomp.Scope scope22 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention23 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node24 = null;
        boolean boolean25 = closureCodingConvention23.isOptionalParameter(node24);
        java.lang.String str26 = closureCodingConvention23.getAbstractMethodName();
        java.lang.String str27 = closureCodingConvention23.getGlobalObject();
        com.google.javascript.rhino.Node node28 = null;
        com.google.javascript.jscomp.CodingConvention.DelegateRelationship delegateRelationship29 = closureCodingConvention23.getDelegateRelationship(node28);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry30 = null;
        com.google.javascript.jscomp.Scope scope31 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention32 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node33 = null;
        boolean boolean34 = closureCodingConvention32.isOptionalParameter(node33);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry35 = null;
        com.google.javascript.jscomp.Scope scope36 = null;
        com.google.javascript.rhino.jstype.ObjectType[] objectTypeArray37 = new com.google.javascript.rhino.jstype.ObjectType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType> objectTypeList38 = new java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList38, objectTypeArray37);
        java.util.Map<java.lang.String, java.lang.String> strMap40 = null;
        closureCodingConvention32.defineDelegateProxyPrototypeProperties(jSTypeRegistry35, scope36, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList38, strMap40);
        java.util.Map<java.lang.String, java.lang.String> strMap42 = null;
        closureCodingConvention23.defineDelegateProxyPrototypeProperties(jSTypeRegistry30, scope31, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList38, strMap42);
        java.util.Map<java.lang.String, java.lang.String> strMap44 = null;
        closureCodingConvention12.defineDelegateProxyPrototypeProperties(jSTypeRegistry21, scope22, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList38, strMap44);
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection46 = closureCodingConvention12.getAssertionFunctions();
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry47 = null;
        com.google.javascript.jscomp.Scope scope48 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention49 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node50 = null;
        boolean boolean51 = closureCodingConvention49.isOptionalParameter(node50);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry52 = null;
        com.google.javascript.jscomp.Scope scope53 = null;
        com.google.javascript.rhino.jstype.ObjectType[] objectTypeArray54 = new com.google.javascript.rhino.jstype.ObjectType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType> objectTypeList55 = new java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList55, objectTypeArray54);
        java.util.Map<java.lang.String, java.lang.String> strMap57 = null;
        closureCodingConvention49.defineDelegateProxyPrototypeProperties(jSTypeRegistry52, scope53, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList55, strMap57);
        java.util.Map<java.lang.String, java.lang.String> strMap59 = null;
        closureCodingConvention12.defineDelegateProxyPrototypeProperties(jSTypeRegistry47, scope48, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList55, strMap59);
        java.util.Map<java.lang.String, java.lang.String> strMap61 = null;
        closureCodingConvention0.defineDelegateProxyPrototypeProperties(jSTypeRegistry10, scope11, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList55, strMap61);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "goog.global" + "'", str4, "goog.global");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "goog.exportSymbol" + "'", str8, "goog.exportSymbol");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "goog.exportProperty" + "'", str9, "goog.exportProperty");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "goog.abstractMethod" + "'", str15, "goog.abstractMethod");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "goog.global" + "'", str16, "goog.global");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "goog.abstractMethod" + "'", str26, "goog.abstractMethod");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "goog.global" + "'", str27, "goog.global");
        org.junit.Assert.assertNull(delegateRelationship29);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(objectTypeArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection46);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(objectTypeArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test0753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0753");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        boolean boolean4 = closureCodingConvention0.isSuperClassReference("hi!");
        com.google.javascript.rhino.Node node5 = null;
        boolean boolean6 = closureCodingConvention0.isOptionalParameter(node5);
        boolean boolean8 = closureCodingConvention0.isConstantKey("hi!");
        com.google.javascript.rhino.Node node9 = null;
        boolean boolean10 = closureCodingConvention0.isVarArgsParameter(node9);
        com.google.javascript.rhino.Node node11 = null;
        boolean boolean12 = closureCodingConvention0.isVarArgsParameter(node11);
        com.google.javascript.rhino.Node node13 = null;
        java.util.Map<java.lang.String, java.lang.String> strMap14 = null;
        closureCodingConvention0.checkForCallingConventionDefiningCalls(node13, strMap14);
        com.google.javascript.rhino.jstype.FunctionType functionType16 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType17 = null;
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType18 = null;
        closureCodingConvention0.applySubclassRelationship(functionType16, functionType17, subclassType18);
        com.google.javascript.rhino.jstype.ObjectType objectType20 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType21 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType22 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType23 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType24 = null;
        closureCodingConvention0.applyDelegateRelationship(objectType20, objectType21, objectType22, functionType23, functionType24);
        com.google.javascript.rhino.Node node26 = null;
        boolean boolean27 = closureCodingConvention0.isVarArgsParameter(node26);
        java.lang.String str28 = closureCodingConvention0.getExportPropertyFunction();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "goog.exportProperty" + "'", str28, "goog.exportProperty");
    }

    @Test
    public void test0754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0754");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        boolean boolean4 = closureCodingConvention0.isSuperClassReference("hi!");
        boolean boolean6 = closureCodingConvention0.isSuperClassReference("goog.global");
        boolean boolean8 = closureCodingConvention0.isConstant("goog.abstractMethod");
        boolean boolean10 = closureCodingConvention0.isValidEnumKey("hi!");
        boolean boolean12 = closureCodingConvention0.isSuperClassReference("goog.global");
        boolean boolean14 = closureCodingConvention0.isPrivate("goog.abstractMethod");
        boolean boolean16 = closureCodingConvention0.isValidEnumKey("");
        java.lang.String str17 = closureCodingConvention0.getGlobalObject();
        com.google.javascript.rhino.Node node18 = null;
        boolean boolean19 = closureCodingConvention0.isOptionalParameter(node18);
        com.google.javascript.rhino.Node node20 = null;
        boolean boolean21 = closureCodingConvention0.isVarArgsParameter(node20);
        boolean boolean23 = closureCodingConvention0.isValidEnumKey("");
        com.google.javascript.rhino.Node node24 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.String> strList25 = closureCodingConvention0.identifyTypeDeclarationCall(node24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "goog.global" + "'", str17, "goog.global");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test0755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0755");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        boolean boolean4 = closureCodingConvention0.isSuperClassReference("hi!");
        boolean boolean6 = closureCodingConvention0.isSuperClassReference("goog.global");
        boolean boolean8 = closureCodingConvention0.isConstant("goog.abstractMethod");
        boolean boolean10 = closureCodingConvention0.isValidEnumKey("hi!");
        boolean boolean12 = closureCodingConvention0.isSuperClassReference("goog.global");
        boolean boolean14 = closureCodingConvention0.isPrivate("goog.abstractMethod");
        boolean boolean16 = closureCodingConvention0.isConstant("goog.global");
        boolean boolean18 = closureCodingConvention0.isPrivate("hi!");
        com.google.javascript.rhino.Node node19 = null;
        com.google.javascript.jscomp.CodingConvention.DelegateRelationship delegateRelationship20 = closureCodingConvention0.getDelegateRelationship(node19);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(delegateRelationship20);
    }

    @Test
    public void test0756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0756");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        java.lang.String str3 = closureCodingConvention0.getAbstractMethodName();
        java.lang.String str4 = closureCodingConvention0.getGlobalObject();
        com.google.javascript.rhino.Node node5 = null;
        java.util.Map<java.lang.String, java.lang.String> strMap6 = null;
        closureCodingConvention0.checkForCallingConventionDefiningCalls(node5, strMap6);
        boolean boolean9 = closureCodingConvention0.isValidEnumKey("goog.abstractMethod");
        java.lang.String str10 = closureCodingConvention0.getExportSymbolFunction();
        com.google.javascript.rhino.jstype.ObjectType objectType11 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType12 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType13 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType14 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType15 = null;
        closureCodingConvention0.applyDelegateRelationship(objectType11, objectType12, objectType13, functionType14, functionType15);
        java.lang.String str17 = closureCodingConvention0.getExportSymbolFunction();
        com.google.javascript.rhino.jstype.FunctionType functionType18 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType19 = null;
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType20 = null;
        closureCodingConvention0.applySubclassRelationship(functionType18, functionType19, subclassType20);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "goog.abstractMethod" + "'", str3, "goog.abstractMethod");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "goog.global" + "'", str4, "goog.global");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "goog.exportSymbol" + "'", str10, "goog.exportSymbol");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "goog.exportSymbol" + "'", str17, "goog.exportSymbol");
    }

    @Test
    public void test0757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0757");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        java.lang.String str3 = closureCodingConvention0.getAbstractMethodName();
        java.lang.String str4 = closureCodingConvention0.getGlobalObject();
        boolean boolean6 = closureCodingConvention0.isExported("goog.global");
        com.google.javascript.rhino.Node node7 = null;
        com.google.javascript.jscomp.CodingConvention.DelegateRelationship delegateRelationship8 = closureCodingConvention0.getDelegateRelationship(node7);
        com.google.javascript.rhino.jstype.ObjectType objectType9 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType10 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType11 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType12 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType13 = null;
        closureCodingConvention0.applyDelegateRelationship(objectType9, objectType10, objectType11, functionType12, functionType13);
        com.google.javascript.rhino.Node node15 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.String> strList16 = closureCodingConvention0.identifyTypeDeclarationCall(node15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "goog.abstractMethod" + "'", str3, "goog.abstractMethod");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "goog.global" + "'", str4, "goog.global");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(delegateRelationship8);
    }

    @Test
    public void test0758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0758");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        boolean boolean4 = closureCodingConvention0.isSuperClassReference("hi!");
        boolean boolean6 = closureCodingConvention0.isSuperClassReference("goog.global");
        boolean boolean8 = closureCodingConvention0.isConstant("goog.abstractMethod");
        boolean boolean10 = closureCodingConvention0.isValidEnumKey("hi!");
        java.lang.String str11 = closureCodingConvention0.getGlobalObject();
        boolean boolean13 = closureCodingConvention0.isPrivate("");
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry14 = null;
        com.google.javascript.jscomp.Scope scope15 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention16 = new com.google.javascript.jscomp.ClosureCodingConvention();
        boolean boolean18 = closureCodingConvention16.isValidEnumKey("goog.abstractMethod");
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection19 = closureCodingConvention16.getAssertionFunctions();
        com.google.javascript.rhino.Node node20 = null;
        boolean boolean21 = closureCodingConvention16.isVarArgsParameter(node20);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry22 = null;
        com.google.javascript.jscomp.Scope scope23 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention24 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node25 = null;
        boolean boolean26 = closureCodingConvention24.isOptionalParameter(node25);
        java.lang.String str27 = closureCodingConvention24.getAbstractMethodName();
        java.lang.String str28 = closureCodingConvention24.getGlobalObject();
        com.google.javascript.rhino.Node node29 = null;
        java.util.Map<java.lang.String, java.lang.String> strMap30 = null;
        closureCodingConvention24.checkForCallingConventionDefiningCalls(node29, strMap30);
        com.google.javascript.rhino.Node node32 = null;
        com.google.javascript.jscomp.CodingConvention.DelegateRelationship delegateRelationship33 = closureCodingConvention24.getDelegateRelationship(node32);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry34 = null;
        com.google.javascript.jscomp.Scope scope35 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention36 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node37 = null;
        boolean boolean38 = closureCodingConvention36.isOptionalParameter(node37);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry39 = null;
        com.google.javascript.jscomp.Scope scope40 = null;
        com.google.javascript.rhino.jstype.ObjectType[] objectTypeArray41 = new com.google.javascript.rhino.jstype.ObjectType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType> objectTypeList42 = new java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList42, objectTypeArray41);
        java.util.Map<java.lang.String, java.lang.String> strMap44 = null;
        closureCodingConvention36.defineDelegateProxyPrototypeProperties(jSTypeRegistry39, scope40, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList42, strMap44);
        java.util.Map<java.lang.String, java.lang.String> strMap46 = null;
        closureCodingConvention24.defineDelegateProxyPrototypeProperties(jSTypeRegistry34, scope35, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList42, strMap46);
        java.util.Map<java.lang.String, java.lang.String> strMap48 = null;
        closureCodingConvention16.defineDelegateProxyPrototypeProperties(jSTypeRegistry22, scope23, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList42, strMap48);
        java.util.Map<java.lang.String, java.lang.String> strMap50 = null;
        closureCodingConvention0.defineDelegateProxyPrototypeProperties(jSTypeRegistry14, scope15, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList42, strMap50);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "goog.global" + "'", str11, "goog.global");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "goog.abstractMethod" + "'", str27, "goog.abstractMethod");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "goog.global" + "'", str28, "goog.global");
        org.junit.Assert.assertNull(delegateRelationship33);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(objectTypeArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    public void test0759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0759");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry3 = null;
        com.google.javascript.jscomp.Scope scope4 = null;
        com.google.javascript.rhino.jstype.ObjectType[] objectTypeArray5 = new com.google.javascript.rhino.jstype.ObjectType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType> objectTypeList6 = new java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList6, objectTypeArray5);
        java.util.Map<java.lang.String, java.lang.String> strMap8 = null;
        closureCodingConvention0.defineDelegateProxyPrototypeProperties(jSTypeRegistry3, scope4, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList6, strMap8);
        java.lang.String str10 = closureCodingConvention0.getDelegateSuperclassName();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(objectTypeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test0760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0760");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        java.lang.String str3 = closureCodingConvention0.getAbstractMethodName();
        java.lang.String str4 = closureCodingConvention0.getGlobalObject();
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection5 = closureCodingConvention0.getAssertionFunctions();
        boolean boolean7 = closureCodingConvention0.isConstant("goog.global");
        com.google.javascript.rhino.Node node8 = null;
        com.google.javascript.jscomp.CodingConvention.DelegateRelationship delegateRelationship9 = closureCodingConvention0.getDelegateRelationship(node8);
        com.google.javascript.rhino.jstype.FunctionType functionType10 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType11 = null;
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType12 = null;
        closureCodingConvention0.applySubclassRelationship(functionType10, functionType11, subclassType12);
        java.lang.String str14 = closureCodingConvention0.getExportSymbolFunction();
        com.google.javascript.rhino.jstype.FunctionType functionType15 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType16 = null;
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType17 = null;
        closureCodingConvention0.applySubclassRelationship(functionType15, functionType16, subclassType17);
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection19 = closureCodingConvention0.getAssertionFunctions();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "goog.abstractMethod" + "'", str3, "goog.abstractMethod");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "goog.global" + "'", str4, "goog.global");
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(delegateRelationship9);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "goog.exportSymbol" + "'", str14, "goog.exportSymbol");
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection19);
    }

    @Test
    public void test0761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0761");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        boolean boolean4 = closureCodingConvention0.isSuperClassReference("hi!");
        com.google.javascript.rhino.Node node5 = null;
        boolean boolean6 = closureCodingConvention0.isOptionalParameter(node5);
        boolean boolean8 = closureCodingConvention0.isSuperClassReference("goog.exportSymbol");
        com.google.javascript.rhino.jstype.FunctionType functionType9 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType10 = null;
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType11 = null;
        closureCodingConvention0.applySubclassRelationship(functionType9, functionType10, subclassType11);
        com.google.javascript.rhino.jstype.FunctionType functionType13 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType14 = null;
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType15 = null;
        closureCodingConvention0.applySubclassRelationship(functionType13, functionType14, subclassType15);
        java.lang.String str17 = closureCodingConvention0.getExportPropertyFunction();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "goog.exportProperty" + "'", str17, "goog.exportProperty");
    }

    @Test
    public void test0762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0762");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        java.lang.String str3 = closureCodingConvention0.getAbstractMethodName();
        boolean boolean5 = closureCodingConvention0.isConstant("goog.abstractMethod");
        java.lang.String str6 = closureCodingConvention0.getDelegateSuperclassName();
        com.google.javascript.rhino.jstype.ObjectType objectType7 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType8 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType9 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType10 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType11 = null;
        closureCodingConvention0.applyDelegateRelationship(objectType7, objectType8, objectType9, functionType10, functionType11);
        boolean boolean14 = closureCodingConvention0.isValidEnumKey("goog.exportProperty");
        java.lang.String str15 = closureCodingConvention0.getGlobalObject();
        com.google.javascript.rhino.Node node16 = null;
        boolean boolean17 = closureCodingConvention0.isOptionalParameter(node16);
        boolean boolean19 = closureCodingConvention0.isConstantKey("goog.abstractMethod");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "goog.abstractMethod" + "'", str3, "goog.abstractMethod");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "goog.global" + "'", str15, "goog.global");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test0763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0763");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        boolean boolean4 = closureCodingConvention0.isSuperClassReference("hi!");
        com.google.javascript.rhino.Node node5 = null;
        boolean boolean6 = closureCodingConvention0.isOptionalParameter(node5);
        boolean boolean8 = closureCodingConvention0.isConstantKey("hi!");
        com.google.javascript.rhino.Node node9 = null;
        boolean boolean10 = closureCodingConvention0.isVarArgsParameter(node9);
        com.google.javascript.rhino.Node node11 = null;
        boolean boolean12 = closureCodingConvention0.isVarArgsParameter(node11);
        boolean boolean14 = closureCodingConvention0.isValidEnumKey("goog.abstractMethod");
        java.lang.String str15 = closureCodingConvention0.getDelegateSuperclassName();
        boolean boolean17 = closureCodingConvention0.isExported("");
        com.google.javascript.rhino.Node node18 = null;
        java.util.Map<java.lang.String, java.lang.String> strMap19 = null;
        closureCodingConvention0.checkForCallingConventionDefiningCalls(node18, strMap19);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test0764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0764");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        boolean boolean4 = closureCodingConvention0.isSuperClassReference("hi!");
        com.google.javascript.rhino.Node node5 = null;
        boolean boolean6 = closureCodingConvention0.isOptionalParameter(node5);
        boolean boolean8 = closureCodingConvention0.isConstantKey("hi!");
        com.google.javascript.rhino.Node node9 = null;
        boolean boolean10 = closureCodingConvention0.isVarArgsParameter(node9);
        boolean boolean12 = closureCodingConvention0.isExported("");
        com.google.javascript.rhino.jstype.ObjectType objectType13 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType14 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType15 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType16 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType17 = null;
        closureCodingConvention0.applyDelegateRelationship(objectType13, objectType14, objectType15, functionType16, functionType17);
        boolean boolean20 = closureCodingConvention0.isConstantKey("goog.exportSymbol");
        java.lang.Class<?> wildcardClass21 = closureCodingConvention0.getClass();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test0765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0765");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        boolean boolean4 = closureCodingConvention0.isSuperClassReference("hi!");
        com.google.javascript.rhino.Node node5 = null;
        boolean boolean6 = closureCodingConvention0.isOptionalParameter(node5);
        boolean boolean8 = closureCodingConvention0.isConstantKey("hi!");
        com.google.javascript.rhino.Node node9 = null;
        boolean boolean10 = closureCodingConvention0.isVarArgsParameter(node9);
        java.lang.String str11 = closureCodingConvention0.getDelegateSuperclassName();
        java.lang.String str12 = closureCodingConvention0.getAbstractMethodName();
        boolean boolean14 = closureCodingConvention0.isConstantKey("goog.global");
        com.google.javascript.rhino.jstype.FunctionType functionType15 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType16 = null;
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType17 = null;
        closureCodingConvention0.applySubclassRelationship(functionType15, functionType16, subclassType17);
        java.lang.Class<?> wildcardClass19 = closureCodingConvention0.getClass();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "goog.abstractMethod" + "'", str12, "goog.abstractMethod");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test0766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0766");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        java.lang.String str3 = closureCodingConvention0.getAbstractMethodName();
        java.lang.String str4 = closureCodingConvention0.getGlobalObject();
        boolean boolean6 = closureCodingConvention0.isSuperClassReference("");
        java.lang.String str7 = closureCodingConvention0.getGlobalObject();
        java.lang.String str8 = closureCodingConvention0.getExportSymbolFunction();
        com.google.javascript.rhino.Node node9 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean10 = closureCodingConvention0.isPropertyTestFunction(node9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "goog.abstractMethod" + "'", str3, "goog.abstractMethod");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "goog.global" + "'", str4, "goog.global");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "goog.global" + "'", str7, "goog.global");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "goog.exportSymbol" + "'", str8, "goog.exportSymbol");
    }

    @Test
    public void test0767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0767");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection1 = closureCodingConvention0.getAssertionFunctions();
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection2 = closureCodingConvention0.getAssertionFunctions();
        java.lang.String str3 = closureCodingConvention0.getGlobalObject();
        com.google.javascript.rhino.Node node4 = null;
        java.util.Map<java.lang.String, java.lang.String> strMap5 = null;
        closureCodingConvention0.checkForCallingConventionDefiningCalls(node4, strMap5);
        com.google.javascript.rhino.Node node7 = null;
        boolean boolean8 = closureCodingConvention0.isVarArgsParameter(node7);
        com.google.javascript.rhino.Node node9 = null;
        boolean boolean10 = closureCodingConvention0.isOptionalParameter(node9);
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection1);
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "goog.global" + "'", str3, "goog.global");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test0768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0768");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        boolean boolean2 = closureCodingConvention0.isExported("goog.global");
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection3 = closureCodingConvention0.getAssertionFunctions();
        java.lang.String str4 = closureCodingConvention0.getGlobalObject();
        com.google.javascript.rhino.Node node5 = null;
        boolean boolean6 = closureCodingConvention0.isOptionalParameter(node5);
        java.lang.String str7 = closureCodingConvention0.getAbstractMethodName();
        com.google.javascript.rhino.jstype.FunctionType functionType8 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType9 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType10 = null;
        // The following exception was thrown during execution in test generation
        try {
            closureCodingConvention0.applySingletonGetter(functionType8, functionType9, objectType10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "goog.global" + "'", str4, "goog.global");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "goog.abstractMethod" + "'", str7, "goog.abstractMethod");
    }

    @Test
    public void test0769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0769");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry3 = null;
        com.google.javascript.jscomp.Scope scope4 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention5 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node6 = null;
        boolean boolean7 = closureCodingConvention5.isOptionalParameter(node6);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry8 = null;
        com.google.javascript.jscomp.Scope scope9 = null;
        com.google.javascript.rhino.jstype.ObjectType[] objectTypeArray10 = new com.google.javascript.rhino.jstype.ObjectType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType> objectTypeList11 = new java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList11, objectTypeArray10);
        java.util.Map<java.lang.String, java.lang.String> strMap13 = null;
        closureCodingConvention5.defineDelegateProxyPrototypeProperties(jSTypeRegistry8, scope9, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList11, strMap13);
        java.util.Map<java.lang.String, java.lang.String> strMap15 = null;
        closureCodingConvention0.defineDelegateProxyPrototypeProperties(jSTypeRegistry3, scope4, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList11, strMap15);
        com.google.javascript.rhino.Node node17 = null;
        java.util.Map<java.lang.String, java.lang.String> strMap18 = null;
        closureCodingConvention0.checkForCallingConventionDefiningCalls(node17, strMap18);
        java.lang.String str20 = closureCodingConvention0.getGlobalObject();
        boolean boolean22 = closureCodingConvention0.isConstant("hi!");
        java.lang.String str23 = closureCodingConvention0.getDelegateSuperclassName();
        com.google.javascript.rhino.Node node24 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean25 = closureCodingConvention0.isPropertyTestFunction(node24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(objectTypeArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "goog.global" + "'", str20, "goog.global");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(str23);
    }

    @Test
    public void test0770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0770");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        boolean boolean4 = closureCodingConvention0.isSuperClassReference("hi!");
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = null;
        com.google.javascript.jscomp.Scope scope6 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention7 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node8 = null;
        boolean boolean9 = closureCodingConvention7.isOptionalParameter(node8);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry10 = null;
        com.google.javascript.jscomp.Scope scope11 = null;
        com.google.javascript.rhino.jstype.ObjectType[] objectTypeArray12 = new com.google.javascript.rhino.jstype.ObjectType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType> objectTypeList13 = new java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList13, objectTypeArray12);
        java.util.Map<java.lang.String, java.lang.String> strMap15 = null;
        closureCodingConvention7.defineDelegateProxyPrototypeProperties(jSTypeRegistry10, scope11, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList13, strMap15);
        java.util.Map<java.lang.String, java.lang.String> strMap17 = null;
        closureCodingConvention0.defineDelegateProxyPrototypeProperties(jSTypeRegistry5, scope6, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList13, strMap17);
        com.google.javascript.rhino.Node node19 = null;
        java.util.Map<java.lang.String, java.lang.String> strMap20 = null;
        closureCodingConvention0.checkForCallingConventionDefiningCalls(node19, strMap20);
        com.google.javascript.rhino.jstype.FunctionType functionType22 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType23 = null;
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType24 = null;
        closureCodingConvention0.applySubclassRelationship(functionType22, functionType23, subclassType24);
        java.lang.String str26 = closureCodingConvention0.getAbstractMethodName();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(objectTypeArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "goog.abstractMethod" + "'", str26, "goog.abstractMethod");
    }

    @Test
    public void test0771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0771");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        boolean boolean4 = closureCodingConvention0.isSuperClassReference("hi!");
        boolean boolean6 = closureCodingConvention0.isSuperClassReference("goog.global");
        boolean boolean8 = closureCodingConvention0.isConstant("goog.abstractMethod");
        boolean boolean10 = closureCodingConvention0.isValidEnumKey("hi!");
        boolean boolean12 = closureCodingConvention0.isSuperClassReference("goog.global");
        boolean boolean14 = closureCodingConvention0.isPrivate("goog.abstractMethod");
        boolean boolean16 = closureCodingConvention0.isConstant("goog.global");
        boolean boolean18 = closureCodingConvention0.isSuperClassReference("goog.exportSymbol");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test0772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0772");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        java.lang.String str3 = closureCodingConvention0.getAbstractMethodName();
        java.lang.String str4 = closureCodingConvention0.getGlobalObject();
        boolean boolean6 = closureCodingConvention0.isExported("goog.global");
        boolean boolean8 = closureCodingConvention0.isConstant("goog.abstractMethod");
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry9 = null;
        com.google.javascript.jscomp.Scope scope10 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention11 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node12 = null;
        boolean boolean13 = closureCodingConvention11.isOptionalParameter(node12);
        java.lang.String str14 = closureCodingConvention11.getAbstractMethodName();
        java.lang.String str15 = closureCodingConvention11.getGlobalObject();
        com.google.javascript.rhino.Node node16 = null;
        com.google.javascript.jscomp.CodingConvention.DelegateRelationship delegateRelationship17 = closureCodingConvention11.getDelegateRelationship(node16);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry18 = null;
        com.google.javascript.jscomp.Scope scope19 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention20 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node21 = null;
        boolean boolean22 = closureCodingConvention20.isOptionalParameter(node21);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry23 = null;
        com.google.javascript.jscomp.Scope scope24 = null;
        com.google.javascript.rhino.jstype.ObjectType[] objectTypeArray25 = new com.google.javascript.rhino.jstype.ObjectType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType> objectTypeList26 = new java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList26, objectTypeArray25);
        java.util.Map<java.lang.String, java.lang.String> strMap28 = null;
        closureCodingConvention20.defineDelegateProxyPrototypeProperties(jSTypeRegistry23, scope24, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList26, strMap28);
        java.util.Map<java.lang.String, java.lang.String> strMap30 = null;
        closureCodingConvention11.defineDelegateProxyPrototypeProperties(jSTypeRegistry18, scope19, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList26, strMap30);
        java.util.Map<java.lang.String, java.lang.String> strMap32 = null;
        closureCodingConvention0.defineDelegateProxyPrototypeProperties(jSTypeRegistry9, scope10, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList26, strMap32);
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection34 = closureCodingConvention0.getAssertionFunctions();
        boolean boolean36 = closureCodingConvention0.isValidEnumKey("");
        java.lang.String str37 = closureCodingConvention0.getExportPropertyFunction();
        boolean boolean39 = closureCodingConvention0.isPrivate("goog.global");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "goog.abstractMethod" + "'", str3, "goog.abstractMethod");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "goog.global" + "'", str4, "goog.global");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "goog.abstractMethod" + "'", str14, "goog.abstractMethod");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "goog.global" + "'", str15, "goog.global");
        org.junit.Assert.assertNull(delegateRelationship17);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(objectTypeArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "goog.exportProperty" + "'", str37, "goog.exportProperty");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test0773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0773");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        boolean boolean2 = closureCodingConvention0.isExported("goog.global");
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection3 = closureCodingConvention0.getAssertionFunctions();
        java.lang.String str4 = closureCodingConvention0.getGlobalObject();
        boolean boolean7 = closureCodingConvention0.isExported("goog.exportProperty", false);
        boolean boolean9 = closureCodingConvention0.isPrivate("");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "goog.global" + "'", str4, "goog.global");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test0774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0774");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        boolean boolean2 = closureCodingConvention0.isExported("goog.global");
        boolean boolean4 = closureCodingConvention0.isConstant("goog.exportProperty");
        boolean boolean6 = closureCodingConvention0.isSuperClassReference("goog.exportSymbol");
        boolean boolean8 = closureCodingConvention0.isPrivate("goog.exportSymbol");
        com.google.javascript.rhino.Node node9 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.jscomp.CodingConvention.Bind bind10 = closureCodingConvention0.describeFunctionBind(node9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test0775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0775");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        boolean boolean4 = closureCodingConvention0.isConstant("hi!");
        boolean boolean6 = closureCodingConvention0.isPrivate("hi!");
        boolean boolean8 = closureCodingConvention0.isConstantKey("goog.exportProperty");
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection9 = closureCodingConvention0.getAssertionFunctions();
        com.google.javascript.rhino.Node node10 = null;
        boolean boolean11 = closureCodingConvention0.isOptionalParameter(node10);
        com.google.javascript.rhino.Node node12 = null;
        com.google.javascript.rhino.Node node13 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str14 = closureCodingConvention0.extractClassNameIfRequire(node12, node13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test0776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0776");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        java.lang.String str3 = closureCodingConvention0.getAbstractMethodName();
        java.lang.String str4 = closureCodingConvention0.getGlobalObject();
        com.google.javascript.rhino.Node node5 = null;
        java.util.Map<java.lang.String, java.lang.String> strMap6 = null;
        closureCodingConvention0.checkForCallingConventionDefiningCalls(node5, strMap6);
        com.google.javascript.rhino.Node node8 = null;
        com.google.javascript.jscomp.CodingConvention.DelegateRelationship delegateRelationship9 = closureCodingConvention0.getDelegateRelationship(node8);
        java.lang.String str10 = closureCodingConvention0.getDelegateSuperclassName();
        com.google.javascript.rhino.Node node11 = null;
        boolean boolean12 = closureCodingConvention0.isVarArgsParameter(node11);
        boolean boolean14 = closureCodingConvention0.isExported("");
        boolean boolean17 = closureCodingConvention0.isExported("goog.global", false);
        java.lang.String str18 = closureCodingConvention0.getAbstractMethodName();
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection19 = closureCodingConvention0.getAssertionFunctions();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "goog.abstractMethod" + "'", str3, "goog.abstractMethod");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "goog.global" + "'", str4, "goog.global");
        org.junit.Assert.assertNull(delegateRelationship9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "goog.abstractMethod" + "'", str18, "goog.abstractMethod");
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection19);
    }

    @Test
    public void test0777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0777");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        boolean boolean2 = closureCodingConvention0.isValidEnumKey("goog.abstractMethod");
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection3 = closureCodingConvention0.getAssertionFunctions();
        boolean boolean5 = closureCodingConvention0.isConstantKey("goog.exportProperty");
        com.google.javascript.rhino.Node node6 = null;
        java.util.Map<java.lang.String, java.lang.String> strMap7 = null;
        closureCodingConvention0.checkForCallingConventionDefiningCalls(node6, strMap7);
        boolean boolean10 = closureCodingConvention0.isConstant("");
        java.lang.String str11 = closureCodingConvention0.getAbstractMethodName();
        java.lang.String str12 = closureCodingConvention0.getExportSymbolFunction();
        com.google.javascript.rhino.Node node13 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean14 = closureCodingConvention0.isPropertyTestFunction(node13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "goog.abstractMethod" + "'", str11, "goog.abstractMethod");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "goog.exportSymbol" + "'", str12, "goog.exportSymbol");
    }

    @Test
    public void test0778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0778");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        boolean boolean4 = closureCodingConvention0.isSuperClassReference("hi!");
        com.google.javascript.rhino.Node node5 = null;
        boolean boolean6 = closureCodingConvention0.isOptionalParameter(node5);
        boolean boolean8 = closureCodingConvention0.isConstantKey("hi!");
        com.google.javascript.rhino.Node node9 = null;
        boolean boolean10 = closureCodingConvention0.isVarArgsParameter(node9);
        java.lang.String str11 = closureCodingConvention0.getDelegateSuperclassName();
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection12 = closureCodingConvention0.getAssertionFunctions();
        java.lang.String str13 = closureCodingConvention0.getDelegateSuperclassName();
        com.google.javascript.rhino.jstype.FunctionType functionType14 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType15 = null;
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType16 = null;
        closureCodingConvention0.applySubclassRelationship(functionType14, functionType15, subclassType16);
        java.lang.String str18 = closureCodingConvention0.getAbstractMethodName();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "goog.abstractMethod" + "'", str18, "goog.abstractMethod");
    }

    @Test
    public void test0779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0779");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        boolean boolean2 = closureCodingConvention0.isConstant("goog.exportSymbol");
        java.lang.String str3 = closureCodingConvention0.getGlobalObject();
        com.google.javascript.rhino.jstype.FunctionType functionType4 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType5 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType6 = null;
        // The following exception was thrown during execution in test generation
        try {
            closureCodingConvention0.applySingletonGetter(functionType4, functionType5, objectType6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "goog.global" + "'", str3, "goog.global");
    }

    @Test
    public void test0780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0780");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        boolean boolean4 = closureCodingConvention0.isSuperClassReference("hi!");
        com.google.javascript.rhino.Node node5 = null;
        boolean boolean6 = closureCodingConvention0.isOptionalParameter(node5);
        boolean boolean8 = closureCodingConvention0.isConstantKey("hi!");
        com.google.javascript.rhino.Node node9 = null;
        boolean boolean10 = closureCodingConvention0.isVarArgsParameter(node9);
        java.lang.String str11 = closureCodingConvention0.getDelegateSuperclassName();
        com.google.javascript.rhino.Node node12 = null;
        boolean boolean13 = closureCodingConvention0.isOptionalParameter(node12);
        com.google.javascript.rhino.Node node14 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship15 = closureCodingConvention0.getClassesDefinedByCall(node14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test0781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0781");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        boolean boolean4 = closureCodingConvention0.isSuperClassReference("hi!");
        com.google.javascript.rhino.Node node5 = null;
        boolean boolean6 = closureCodingConvention0.isOptionalParameter(node5);
        boolean boolean8 = closureCodingConvention0.isConstantKey("hi!");
        com.google.javascript.rhino.Node node9 = null;
        boolean boolean10 = closureCodingConvention0.isVarArgsParameter(node9);
        com.google.javascript.rhino.Node node11 = null;
        boolean boolean12 = closureCodingConvention0.isVarArgsParameter(node11);
        boolean boolean14 = closureCodingConvention0.isValidEnumKey("goog.abstractMethod");
        java.lang.String str15 = closureCodingConvention0.getDelegateSuperclassName();
        boolean boolean17 = closureCodingConvention0.isExported("");
        boolean boolean19 = closureCodingConvention0.isConstantKey("goog.exportProperty");
        java.lang.String str20 = closureCodingConvention0.getExportPropertyFunction();
        com.google.javascript.rhino.Node node21 = null;
        java.util.Map<java.lang.String, java.lang.String> strMap22 = null;
        closureCodingConvention0.checkForCallingConventionDefiningCalls(node21, strMap22);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "goog.exportProperty" + "'", str20, "goog.exportProperty");
    }

    @Test
    public void test0782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0782");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        java.lang.String str3 = closureCodingConvention0.getAbstractMethodName();
        java.lang.String str4 = closureCodingConvention0.getGlobalObject();
        boolean boolean6 = closureCodingConvention0.isExported("goog.global");
        java.lang.String str7 = closureCodingConvention0.getDelegateSuperclassName();
        com.google.javascript.rhino.Node node8 = null;
        boolean boolean9 = closureCodingConvention0.isVarArgsParameter(node8);
        java.lang.String str10 = closureCodingConvention0.getDelegateSuperclassName();
        java.lang.String str11 = closureCodingConvention0.getDelegateSuperclassName();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "goog.abstractMethod" + "'", str3, "goog.abstractMethod");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "goog.global" + "'", str4, "goog.global");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test0783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0783");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        boolean boolean2 = closureCodingConvention0.isExported("goog.global");
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection3 = closureCodingConvention0.getAssertionFunctions();
        java.lang.String str4 = closureCodingConvention0.getGlobalObject();
        boolean boolean7 = closureCodingConvention0.isExported("goog.exportProperty", false);
        java.lang.String str8 = closureCodingConvention0.getExportSymbolFunction();
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry9 = null;
        com.google.javascript.jscomp.Scope scope10 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention11 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node12 = null;
        boolean boolean13 = closureCodingConvention11.isOptionalParameter(node12);
        boolean boolean15 = closureCodingConvention11.isSuperClassReference("hi!");
        com.google.javascript.rhino.Node node16 = null;
        boolean boolean17 = closureCodingConvention11.isOptionalParameter(node16);
        boolean boolean19 = closureCodingConvention11.isConstantKey("hi!");
        com.google.javascript.rhino.Node node20 = null;
        boolean boolean21 = closureCodingConvention11.isVarArgsParameter(node20);
        boolean boolean23 = closureCodingConvention11.isExported("");
        com.google.javascript.rhino.Node node24 = null;
        boolean boolean25 = closureCodingConvention11.isVarArgsParameter(node24);
        java.lang.String str26 = closureCodingConvention11.getExportSymbolFunction();
        java.lang.String str27 = closureCodingConvention11.getAbstractMethodName();
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry28 = null;
        com.google.javascript.jscomp.Scope scope29 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention30 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node31 = null;
        boolean boolean32 = closureCodingConvention30.isOptionalParameter(node31);
        java.lang.String str33 = closureCodingConvention30.getAbstractMethodName();
        java.lang.String str34 = closureCodingConvention30.getGlobalObject();
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection35 = closureCodingConvention30.getAssertionFunctions();
        boolean boolean37 = closureCodingConvention30.isConstant("goog.global");
        com.google.javascript.rhino.Node node38 = null;
        com.google.javascript.jscomp.CodingConvention.DelegateRelationship delegateRelationship39 = closureCodingConvention30.getDelegateRelationship(node38);
        com.google.javascript.rhino.jstype.ObjectType objectType40 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType41 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType42 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType43 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType44 = null;
        closureCodingConvention30.applyDelegateRelationship(objectType40, objectType41, objectType42, functionType43, functionType44);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry46 = null;
        com.google.javascript.jscomp.Scope scope47 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention48 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node49 = null;
        boolean boolean50 = closureCodingConvention48.isOptionalParameter(node49);
        boolean boolean52 = closureCodingConvention48.isSuperClassReference("hi!");
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry53 = null;
        com.google.javascript.jscomp.Scope scope54 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention55 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node56 = null;
        boolean boolean57 = closureCodingConvention55.isOptionalParameter(node56);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry58 = null;
        com.google.javascript.jscomp.Scope scope59 = null;
        com.google.javascript.rhino.jstype.ObjectType[] objectTypeArray60 = new com.google.javascript.rhino.jstype.ObjectType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType> objectTypeList61 = new java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList61, objectTypeArray60);
        java.util.Map<java.lang.String, java.lang.String> strMap63 = null;
        closureCodingConvention55.defineDelegateProxyPrototypeProperties(jSTypeRegistry58, scope59, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList61, strMap63);
        java.util.Map<java.lang.String, java.lang.String> strMap65 = null;
        closureCodingConvention48.defineDelegateProxyPrototypeProperties(jSTypeRegistry53, scope54, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList61, strMap65);
        java.util.Map<java.lang.String, java.lang.String> strMap67 = null;
        closureCodingConvention30.defineDelegateProxyPrototypeProperties(jSTypeRegistry46, scope47, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList61, strMap67);
        java.util.Map<java.lang.String, java.lang.String> strMap69 = null;
        closureCodingConvention11.defineDelegateProxyPrototypeProperties(jSTypeRegistry28, scope29, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList61, strMap69);
        java.util.Map<java.lang.String, java.lang.String> strMap71 = null;
        closureCodingConvention0.defineDelegateProxyPrototypeProperties(jSTypeRegistry9, scope10, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList61, strMap71);
        boolean boolean75 = closureCodingConvention0.isExported("goog.exportSymbol", false);
        com.google.javascript.rhino.jstype.ObjectType objectType76 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType77 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType78 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType79 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType80 = null;
        closureCodingConvention0.applyDelegateRelationship(objectType76, objectType77, objectType78, functionType79, functionType80);
        com.google.javascript.rhino.Node node82 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.String> strList83 = closureCodingConvention0.identifyTypeDeclarationCall(node82);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "goog.global" + "'", str4, "goog.global");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "goog.exportSymbol" + "'", str8, "goog.exportSymbol");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "goog.exportSymbol" + "'", str26, "goog.exportSymbol");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "goog.abstractMethod" + "'", str27, "goog.abstractMethod");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "goog.abstractMethod" + "'", str33, "goog.abstractMethod");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "goog.global" + "'", str34, "goog.global");
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(delegateRelationship39);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(objectTypeArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
    }

    @Test
    public void test0784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0784");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        boolean boolean4 = closureCodingConvention0.isSuperClassReference("hi!");
        boolean boolean6 = closureCodingConvention0.isValidEnumKey("");
        com.google.javascript.rhino.Node node7 = null;
        boolean boolean8 = closureCodingConvention0.isVarArgsParameter(node7);
        com.google.javascript.rhino.jstype.FunctionType functionType9 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType10 = null;
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType11 = null;
        closureCodingConvention0.applySubclassRelationship(functionType9, functionType10, subclassType11);
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection13 = closureCodingConvention0.getAssertionFunctions();
        com.google.javascript.rhino.jstype.FunctionType functionType14 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType15 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType16 = null;
        // The following exception was thrown during execution in test generation
        try {
            closureCodingConvention0.applySingletonGetter(functionType14, functionType15, objectType16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection13);
    }

    @Test
    public void test0785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0785");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection1 = closureCodingConvention0.getAssertionFunctions();
        com.google.javascript.rhino.Node node2 = null;
        com.google.javascript.jscomp.CodingConvention.DelegateRelationship delegateRelationship3 = closureCodingConvention0.getDelegateRelationship(node2);
        boolean boolean5 = closureCodingConvention0.isValidEnumKey("goog.exportSymbol");
        com.google.javascript.rhino.jstype.FunctionType functionType6 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType7 = null;
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType8 = null;
        closureCodingConvention0.applySubclassRelationship(functionType6, functionType7, subclassType8);
        java.lang.Class<?> wildcardClass10 = closureCodingConvention0.getClass();
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection1);
        org.junit.Assert.assertNull(delegateRelationship3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test0786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0786");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        java.lang.String str3 = closureCodingConvention0.getAbstractMethodName();
        java.lang.String str4 = closureCodingConvention0.getGlobalObject();
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection5 = closureCodingConvention0.getAssertionFunctions();
        boolean boolean7 = closureCodingConvention0.isConstant("goog.global");
        boolean boolean9 = closureCodingConvention0.isSuperClassReference("goog.exportProperty");
        com.google.javascript.rhino.jstype.FunctionType functionType10 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType11 = null;
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType12 = null;
        closureCodingConvention0.applySubclassRelationship(functionType10, functionType11, subclassType12);
        boolean boolean15 = closureCodingConvention0.isSuperClassReference("goog.global");
        boolean boolean17 = closureCodingConvention0.isConstantKey("");
        com.google.javascript.rhino.Node node18 = null;
        java.util.Map<java.lang.String, java.lang.String> strMap19 = null;
        closureCodingConvention0.checkForCallingConventionDefiningCalls(node18, strMap19);
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection21 = closureCodingConvention0.getAssertionFunctions();
        com.google.javascript.rhino.Node node22 = null;
        com.google.javascript.jscomp.CodingConvention.DelegateRelationship delegateRelationship23 = closureCodingConvention0.getDelegateRelationship(node22);
        boolean boolean26 = closureCodingConvention0.isExported("hi!", false);
        com.google.javascript.rhino.Node node27 = null;
        boolean boolean28 = closureCodingConvention0.isVarArgsParameter(node27);
        com.google.javascript.rhino.Node node29 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship30 = closureCodingConvention0.getClassesDefinedByCall(node29);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "goog.abstractMethod" + "'", str3, "goog.abstractMethod");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "goog.global" + "'", str4, "goog.global");
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection21);
        org.junit.Assert.assertNull(delegateRelationship23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test0787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0787");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        boolean boolean4 = closureCodingConvention0.isSuperClassReference("hi!");
        com.google.javascript.rhino.Node node5 = null;
        boolean boolean6 = closureCodingConvention0.isOptionalParameter(node5);
        boolean boolean8 = closureCodingConvention0.isConstantKey("hi!");
        com.google.javascript.rhino.Node node9 = null;
        boolean boolean10 = closureCodingConvention0.isVarArgsParameter(node9);
        boolean boolean12 = closureCodingConvention0.isExported("");
        com.google.javascript.rhino.Node node13 = null;
        boolean boolean14 = closureCodingConvention0.isVarArgsParameter(node13);
        java.lang.String str15 = closureCodingConvention0.getExportSymbolFunction();
        java.lang.String str16 = closureCodingConvention0.getAbstractMethodName();
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry17 = null;
        com.google.javascript.jscomp.Scope scope18 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention19 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node20 = null;
        boolean boolean21 = closureCodingConvention19.isOptionalParameter(node20);
        java.lang.String str22 = closureCodingConvention19.getAbstractMethodName();
        java.lang.String str23 = closureCodingConvention19.getGlobalObject();
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection24 = closureCodingConvention19.getAssertionFunctions();
        boolean boolean26 = closureCodingConvention19.isConstant("goog.global");
        com.google.javascript.rhino.Node node27 = null;
        com.google.javascript.jscomp.CodingConvention.DelegateRelationship delegateRelationship28 = closureCodingConvention19.getDelegateRelationship(node27);
        com.google.javascript.rhino.jstype.ObjectType objectType29 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType30 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType31 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType32 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType33 = null;
        closureCodingConvention19.applyDelegateRelationship(objectType29, objectType30, objectType31, functionType32, functionType33);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry35 = null;
        com.google.javascript.jscomp.Scope scope36 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention37 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node38 = null;
        boolean boolean39 = closureCodingConvention37.isOptionalParameter(node38);
        boolean boolean41 = closureCodingConvention37.isSuperClassReference("hi!");
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry42 = null;
        com.google.javascript.jscomp.Scope scope43 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention44 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node45 = null;
        boolean boolean46 = closureCodingConvention44.isOptionalParameter(node45);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry47 = null;
        com.google.javascript.jscomp.Scope scope48 = null;
        com.google.javascript.rhino.jstype.ObjectType[] objectTypeArray49 = new com.google.javascript.rhino.jstype.ObjectType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType> objectTypeList50 = new java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList50, objectTypeArray49);
        java.util.Map<java.lang.String, java.lang.String> strMap52 = null;
        closureCodingConvention44.defineDelegateProxyPrototypeProperties(jSTypeRegistry47, scope48, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList50, strMap52);
        java.util.Map<java.lang.String, java.lang.String> strMap54 = null;
        closureCodingConvention37.defineDelegateProxyPrototypeProperties(jSTypeRegistry42, scope43, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList50, strMap54);
        java.util.Map<java.lang.String, java.lang.String> strMap56 = null;
        closureCodingConvention19.defineDelegateProxyPrototypeProperties(jSTypeRegistry35, scope36, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList50, strMap56);
        java.util.Map<java.lang.String, java.lang.String> strMap58 = null;
        closureCodingConvention0.defineDelegateProxyPrototypeProperties(jSTypeRegistry17, scope18, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList50, strMap58);
        com.google.javascript.rhino.Node node60 = null;
        com.google.javascript.rhino.Node node61 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str62 = closureCodingConvention0.extractClassNameIfProvide(node60, node61);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "goog.exportSymbol" + "'", str15, "goog.exportSymbol");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "goog.abstractMethod" + "'", str16, "goog.abstractMethod");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "goog.abstractMethod" + "'", str22, "goog.abstractMethod");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "goog.global" + "'", str23, "goog.global");
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(delegateRelationship28);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(objectTypeArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
    }

    @Test
    public void test0788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0788");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        java.lang.String str3 = closureCodingConvention0.getAbstractMethodName();
        java.lang.String str4 = closureCodingConvention0.getGlobalObject();
        boolean boolean6 = closureCodingConvention0.isSuperClassReference("");
        java.lang.String str7 = closureCodingConvention0.getExportSymbolFunction();
        com.google.javascript.rhino.jstype.ObjectType objectType8 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType9 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType10 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType11 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType12 = null;
        closureCodingConvention0.applyDelegateRelationship(objectType8, objectType9, objectType10, functionType11, functionType12);
        com.google.javascript.rhino.jstype.FunctionType functionType14 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType15 = null;
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType16 = null;
        closureCodingConvention0.applySubclassRelationship(functionType14, functionType15, subclassType16);
        boolean boolean19 = closureCodingConvention0.isPrivate("goog.exportProperty");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "goog.abstractMethod" + "'", str3, "goog.abstractMethod");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "goog.global" + "'", str4, "goog.global");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "goog.exportSymbol" + "'", str7, "goog.exportSymbol");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test0789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0789");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry3 = null;
        com.google.javascript.jscomp.Scope scope4 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention5 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node6 = null;
        boolean boolean7 = closureCodingConvention5.isOptionalParameter(node6);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry8 = null;
        com.google.javascript.jscomp.Scope scope9 = null;
        com.google.javascript.rhino.jstype.ObjectType[] objectTypeArray10 = new com.google.javascript.rhino.jstype.ObjectType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType> objectTypeList11 = new java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList11, objectTypeArray10);
        java.util.Map<java.lang.String, java.lang.String> strMap13 = null;
        closureCodingConvention5.defineDelegateProxyPrototypeProperties(jSTypeRegistry8, scope9, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList11, strMap13);
        java.util.Map<java.lang.String, java.lang.String> strMap15 = null;
        closureCodingConvention0.defineDelegateProxyPrototypeProperties(jSTypeRegistry3, scope4, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList11, strMap15);
        java.lang.String str17 = closureCodingConvention0.getDelegateSuperclassName();
        java.lang.String str18 = closureCodingConvention0.getAbstractMethodName();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(objectTypeArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "goog.abstractMethod" + "'", str18, "goog.abstractMethod");
    }

    @Test
    public void test0790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0790");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        java.lang.String str3 = closureCodingConvention0.getAbstractMethodName();
        boolean boolean5 = closureCodingConvention0.isConstant("goog.abstractMethod");
        com.google.javascript.rhino.Node node6 = null;
        com.google.javascript.jscomp.CodingConvention.DelegateRelationship delegateRelationship7 = closureCodingConvention0.getDelegateRelationship(node6);
        java.lang.String str8 = closureCodingConvention0.getAbstractMethodName();
        com.google.javascript.rhino.Node node9 = null;
        com.google.javascript.rhino.Node node10 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str11 = closureCodingConvention0.extractClassNameIfProvide(node9, node10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "goog.abstractMethod" + "'", str3, "goog.abstractMethod");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(delegateRelationship7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "goog.abstractMethod" + "'", str8, "goog.abstractMethod");
    }

    @Test
    public void test0791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0791");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        java.lang.String str3 = closureCodingConvention0.getAbstractMethodName();
        java.lang.String str4 = closureCodingConvention0.getGlobalObject();
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection5 = closureCodingConvention0.getAssertionFunctions();
        boolean boolean7 = closureCodingConvention0.isConstant("goog.global");
        com.google.javascript.rhino.Node node8 = null;
        com.google.javascript.jscomp.CodingConvention.DelegateRelationship delegateRelationship9 = closureCodingConvention0.getDelegateRelationship(node8);
        com.google.javascript.rhino.jstype.FunctionType functionType10 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType11 = null;
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType12 = null;
        closureCodingConvention0.applySubclassRelationship(functionType10, functionType11, subclassType12);
        java.lang.String str14 = closureCodingConvention0.getExportSymbolFunction();
        boolean boolean16 = closureCodingConvention0.isExported("");
        boolean boolean18 = closureCodingConvention0.isPrivate("hi!");
        java.lang.Class<?> wildcardClass19 = closureCodingConvention0.getClass();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "goog.abstractMethod" + "'", str3, "goog.abstractMethod");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "goog.global" + "'", str4, "goog.global");
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(delegateRelationship9);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "goog.exportSymbol" + "'", str14, "goog.exportSymbol");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test0792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0792");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        boolean boolean4 = closureCodingConvention0.isSuperClassReference("hi!");
        boolean boolean6 = closureCodingConvention0.isSuperClassReference("goog.global");
        boolean boolean8 = closureCodingConvention0.isConstant("goog.abstractMethod");
        boolean boolean10 = closureCodingConvention0.isValidEnumKey("goog.global");
        boolean boolean12 = closureCodingConvention0.isConstant("hi!");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test0793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0793");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        java.lang.String str3 = closureCodingConvention0.getAbstractMethodName();
        java.lang.String str4 = closureCodingConvention0.getGlobalObject();
        com.google.javascript.rhino.Node node5 = null;
        java.util.Map<java.lang.String, java.lang.String> strMap6 = null;
        closureCodingConvention0.checkForCallingConventionDefiningCalls(node5, strMap6);
        boolean boolean9 = closureCodingConvention0.isValidEnumKey("goog.abstractMethod");
        java.lang.String str10 = closureCodingConvention0.getDelegateSuperclassName();
        boolean boolean12 = closureCodingConvention0.isExported("hi!");
        com.google.javascript.rhino.jstype.FunctionType functionType13 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType14 = null;
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType15 = null;
        closureCodingConvention0.applySubclassRelationship(functionType13, functionType14, subclassType15);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "goog.abstractMethod" + "'", str3, "goog.abstractMethod");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "goog.global" + "'", str4, "goog.global");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test0794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0794");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        boolean boolean2 = closureCodingConvention0.isExported("goog.global");
        boolean boolean4 = closureCodingConvention0.isConstant("");
        com.google.javascript.rhino.Node node5 = null;
        com.google.javascript.jscomp.CodingConvention.DelegateRelationship delegateRelationship6 = closureCodingConvention0.getDelegateRelationship(node5);
        java.lang.Class<?> wildcardClass7 = closureCodingConvention0.getClass();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(delegateRelationship6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0795");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        java.lang.String str3 = closureCodingConvention0.getAbstractMethodName();
        java.lang.String str4 = closureCodingConvention0.getGlobalObject();
        com.google.javascript.rhino.Node node5 = null;
        java.util.Map<java.lang.String, java.lang.String> strMap6 = null;
        closureCodingConvention0.checkForCallingConventionDefiningCalls(node5, strMap6);
        com.google.javascript.rhino.Node node8 = null;
        com.google.javascript.jscomp.CodingConvention.DelegateRelationship delegateRelationship9 = closureCodingConvention0.getDelegateRelationship(node8);
        java.lang.String str10 = closureCodingConvention0.getDelegateSuperclassName();
        com.google.javascript.rhino.jstype.ObjectType objectType11 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType12 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType13 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType14 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType15 = null;
        closureCodingConvention0.applyDelegateRelationship(objectType11, objectType12, objectType13, functionType14, functionType15);
        boolean boolean18 = closureCodingConvention0.isExported("goog.exportSymbol");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "goog.abstractMethod" + "'", str3, "goog.abstractMethod");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "goog.global" + "'", str4, "goog.global");
        org.junit.Assert.assertNull(delegateRelationship9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test0796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0796");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        java.lang.String str3 = closureCodingConvention0.getAbstractMethodName();
        java.lang.String str4 = closureCodingConvention0.getGlobalObject();
        boolean boolean6 = closureCodingConvention0.isSuperClassReference("");
        java.lang.String str7 = closureCodingConvention0.getExportSymbolFunction();
        com.google.javascript.rhino.jstype.ObjectType objectType8 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType9 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType10 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType11 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType12 = null;
        closureCodingConvention0.applyDelegateRelationship(objectType8, objectType9, objectType10, functionType11, functionType12);
        com.google.javascript.rhino.jstype.FunctionType functionType14 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType15 = null;
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType16 = null;
        closureCodingConvention0.applySubclassRelationship(functionType14, functionType15, subclassType16);
        com.google.javascript.rhino.jstype.ObjectType objectType18 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType19 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType20 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType21 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType22 = null;
        closureCodingConvention0.applyDelegateRelationship(objectType18, objectType19, objectType20, functionType21, functionType22);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "goog.abstractMethod" + "'", str3, "goog.abstractMethod");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "goog.global" + "'", str4, "goog.global");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "goog.exportSymbol" + "'", str7, "goog.exportSymbol");
    }

    @Test
    public void test0797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0797");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        boolean boolean4 = closureCodingConvention0.isSuperClassReference("hi!");
        boolean boolean6 = closureCodingConvention0.isSuperClassReference("goog.global");
        java.lang.String str7 = closureCodingConvention0.getGlobalObject();
        java.lang.String str8 = closureCodingConvention0.getGlobalObject();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "goog.global" + "'", str7, "goog.global");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "goog.global" + "'", str8, "goog.global");
    }

    @Test
    public void test0798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0798");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection1 = closureCodingConvention0.getAssertionFunctions();
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection2 = closureCodingConvention0.getAssertionFunctions();
        com.google.javascript.jscomp.NodeTraversal nodeTraversal3 = null;
        com.google.javascript.rhino.Node node4 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.jscomp.CodingConvention.ObjectLiteralCast objectLiteralCast5 = closureCodingConvention0.getObjectLiteralCast(nodeTraversal3, node4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection1);
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection2);
    }

    @Test
    public void test0799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0799");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry3 = null;
        com.google.javascript.jscomp.Scope scope4 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention5 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node6 = null;
        boolean boolean7 = closureCodingConvention5.isOptionalParameter(node6);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry8 = null;
        com.google.javascript.jscomp.Scope scope9 = null;
        com.google.javascript.rhino.jstype.ObjectType[] objectTypeArray10 = new com.google.javascript.rhino.jstype.ObjectType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType> objectTypeList11 = new java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList11, objectTypeArray10);
        java.util.Map<java.lang.String, java.lang.String> strMap13 = null;
        closureCodingConvention5.defineDelegateProxyPrototypeProperties(jSTypeRegistry8, scope9, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList11, strMap13);
        java.util.Map<java.lang.String, java.lang.String> strMap15 = null;
        closureCodingConvention0.defineDelegateProxyPrototypeProperties(jSTypeRegistry3, scope4, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList11, strMap15);
        com.google.javascript.rhino.Node node17 = null;
        java.util.Map<java.lang.String, java.lang.String> strMap18 = null;
        closureCodingConvention0.checkForCallingConventionDefiningCalls(node17, strMap18);
        java.lang.String str20 = closureCodingConvention0.getGlobalObject();
        boolean boolean22 = closureCodingConvention0.isConstant("hi!");
        boolean boolean24 = closureCodingConvention0.isPrivate("goog.exportSymbol");
        com.google.javascript.rhino.jstype.FunctionType functionType25 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType26 = null;
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType27 = null;
        closureCodingConvention0.applySubclassRelationship(functionType25, functionType26, subclassType27);
        com.google.javascript.rhino.Node node29 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.jscomp.CodingConvention.Bind bind30 = closureCodingConvention0.describeFunctionBind(node29);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(objectTypeArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "goog.global" + "'", str20, "goog.global");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test0800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0800");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry3 = null;
        com.google.javascript.jscomp.Scope scope4 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention5 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node6 = null;
        boolean boolean7 = closureCodingConvention5.isOptionalParameter(node6);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry8 = null;
        com.google.javascript.jscomp.Scope scope9 = null;
        com.google.javascript.rhino.jstype.ObjectType[] objectTypeArray10 = new com.google.javascript.rhino.jstype.ObjectType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType> objectTypeList11 = new java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList11, objectTypeArray10);
        java.util.Map<java.lang.String, java.lang.String> strMap13 = null;
        closureCodingConvention5.defineDelegateProxyPrototypeProperties(jSTypeRegistry8, scope9, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList11, strMap13);
        java.util.Map<java.lang.String, java.lang.String> strMap15 = null;
        closureCodingConvention0.defineDelegateProxyPrototypeProperties(jSTypeRegistry3, scope4, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList11, strMap15);
        boolean boolean18 = closureCodingConvention0.isConstant("goog.abstractMethod");
        com.google.javascript.rhino.jstype.FunctionType functionType19 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType20 = null;
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType21 = null;
        closureCodingConvention0.applySubclassRelationship(functionType19, functionType20, subclassType21);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(objectTypeArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test0801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0801");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        java.lang.String str3 = closureCodingConvention0.getAbstractMethodName();
        java.lang.String str4 = closureCodingConvention0.getGlobalObject();
        com.google.javascript.rhino.Node node5 = null;
        java.util.Map<java.lang.String, java.lang.String> strMap6 = null;
        closureCodingConvention0.checkForCallingConventionDefiningCalls(node5, strMap6);
        com.google.javascript.rhino.Node node8 = null;
        com.google.javascript.jscomp.CodingConvention.DelegateRelationship delegateRelationship9 = closureCodingConvention0.getDelegateRelationship(node8);
        java.lang.String str10 = closureCodingConvention0.getDelegateSuperclassName();
        com.google.javascript.rhino.Node node11 = null;
        boolean boolean12 = closureCodingConvention0.isVarArgsParameter(node11);
        boolean boolean14 = closureCodingConvention0.isExported("");
        boolean boolean17 = closureCodingConvention0.isExported("goog.global", false);
        com.google.javascript.rhino.Node node18 = null;
        boolean boolean19 = closureCodingConvention0.isVarArgsParameter(node18);
        java.lang.String str20 = closureCodingConvention0.getExportSymbolFunction();
        com.google.javascript.rhino.Node node21 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean22 = closureCodingConvention0.isPropertyTestFunction(node21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "goog.abstractMethod" + "'", str3, "goog.abstractMethod");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "goog.global" + "'", str4, "goog.global");
        org.junit.Assert.assertNull(delegateRelationship9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "goog.exportSymbol" + "'", str20, "goog.exportSymbol");
    }

    @Test
    public void test0802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0802");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry3 = null;
        com.google.javascript.jscomp.Scope scope4 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention5 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node6 = null;
        boolean boolean7 = closureCodingConvention5.isOptionalParameter(node6);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry8 = null;
        com.google.javascript.jscomp.Scope scope9 = null;
        com.google.javascript.rhino.jstype.ObjectType[] objectTypeArray10 = new com.google.javascript.rhino.jstype.ObjectType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType> objectTypeList11 = new java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList11, objectTypeArray10);
        java.util.Map<java.lang.String, java.lang.String> strMap13 = null;
        closureCodingConvention5.defineDelegateProxyPrototypeProperties(jSTypeRegistry8, scope9, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList11, strMap13);
        java.util.Map<java.lang.String, java.lang.String> strMap15 = null;
        closureCodingConvention0.defineDelegateProxyPrototypeProperties(jSTypeRegistry3, scope4, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList11, strMap15);
        com.google.javascript.rhino.Node node17 = null;
        java.util.Map<java.lang.String, java.lang.String> strMap18 = null;
        closureCodingConvention0.checkForCallingConventionDefiningCalls(node17, strMap18);
        java.lang.String str20 = closureCodingConvention0.getGlobalObject();
        boolean boolean22 = closureCodingConvention0.isConstant("hi!");
        boolean boolean24 = closureCodingConvention0.isPrivate("goog.exportSymbol");
        com.google.javascript.rhino.jstype.FunctionType functionType25 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType26 = null;
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType27 = null;
        closureCodingConvention0.applySubclassRelationship(functionType25, functionType26, subclassType27);
        java.lang.String str29 = closureCodingConvention0.getGlobalObject();
        boolean boolean31 = closureCodingConvention0.isValidEnumKey("goog.exportProperty");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(objectTypeArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "goog.global" + "'", str20, "goog.global");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "goog.global" + "'", str29, "goog.global");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
    }

    @Test
    public void test0803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0803");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        boolean boolean4 = closureCodingConvention0.isSuperClassReference("hi!");
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = null;
        com.google.javascript.jscomp.Scope scope6 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention7 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node8 = null;
        boolean boolean9 = closureCodingConvention7.isOptionalParameter(node8);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry10 = null;
        com.google.javascript.jscomp.Scope scope11 = null;
        com.google.javascript.rhino.jstype.ObjectType[] objectTypeArray12 = new com.google.javascript.rhino.jstype.ObjectType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType> objectTypeList13 = new java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList13, objectTypeArray12);
        java.util.Map<java.lang.String, java.lang.String> strMap15 = null;
        closureCodingConvention7.defineDelegateProxyPrototypeProperties(jSTypeRegistry10, scope11, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList13, strMap15);
        java.util.Map<java.lang.String, java.lang.String> strMap17 = null;
        closureCodingConvention0.defineDelegateProxyPrototypeProperties(jSTypeRegistry5, scope6, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList13, strMap17);
        com.google.javascript.rhino.Node node19 = null;
        java.util.Map<java.lang.String, java.lang.String> strMap20 = null;
        closureCodingConvention0.checkForCallingConventionDefiningCalls(node19, strMap20);
        com.google.javascript.rhino.jstype.ObjectType objectType22 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType23 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType24 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType25 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType26 = null;
        closureCodingConvention0.applyDelegateRelationship(objectType22, objectType23, objectType24, functionType25, functionType26);
        com.google.javascript.rhino.Node node28 = null;
        java.util.Map<java.lang.String, java.lang.String> strMap29 = null;
        closureCodingConvention0.checkForCallingConventionDefiningCalls(node28, strMap29);
        com.google.javascript.rhino.Node node31 = null;
        java.util.Map<java.lang.String, java.lang.String> strMap32 = null;
        closureCodingConvention0.checkForCallingConventionDefiningCalls(node31, strMap32);
        boolean boolean35 = closureCodingConvention0.isConstant("goog.abstractMethod");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(objectTypeArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test0804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0804");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        boolean boolean4 = closureCodingConvention0.isSuperClassReference("hi!");
        com.google.javascript.rhino.Node node5 = null;
        boolean boolean6 = closureCodingConvention0.isOptionalParameter(node5);
        boolean boolean8 = closureCodingConvention0.isConstantKey("hi!");
        com.google.javascript.rhino.Node node9 = null;
        boolean boolean10 = closureCodingConvention0.isVarArgsParameter(node9);
        boolean boolean12 = closureCodingConvention0.isExported("");
        com.google.javascript.rhino.Node node13 = null;
        boolean boolean14 = closureCodingConvention0.isVarArgsParameter(node13);
        boolean boolean17 = closureCodingConvention0.isExported("hi!", true);
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection18 = closureCodingConvention0.getAssertionFunctions();
        com.google.javascript.rhino.Node node19 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean20 = closureCodingConvention0.isPropertyTestFunction(node19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection18);
    }

    @Test
    public void test0805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0805");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        boolean boolean4 = closureCodingConvention0.isPrivate("goog.exportSymbol");
        com.google.javascript.rhino.Node node5 = null;
        com.google.javascript.jscomp.CodingConvention.DelegateRelationship delegateRelationship6 = closureCodingConvention0.getDelegateRelationship(node5);
        boolean boolean8 = closureCodingConvention0.isSuperClassReference("goog.global");
        boolean boolean11 = closureCodingConvention0.isExported("goog.exportSymbol", true);
        boolean boolean13 = closureCodingConvention0.isSuperClassReference("goog.exportProperty");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(delegateRelationship6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test0806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0806");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        boolean boolean4 = closureCodingConvention0.isSuperClassReference("hi!");
        boolean boolean6 = closureCodingConvention0.isValidEnumKey("");
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry7 = null;
        com.google.javascript.jscomp.Scope scope8 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention9 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node10 = null;
        boolean boolean11 = closureCodingConvention9.isOptionalParameter(node10);
        java.lang.String str12 = closureCodingConvention9.getAbstractMethodName();
        java.lang.String str13 = closureCodingConvention9.getGlobalObject();
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection14 = closureCodingConvention9.getAssertionFunctions();
        boolean boolean16 = closureCodingConvention9.isConstant("goog.global");
        com.google.javascript.rhino.Node node17 = null;
        com.google.javascript.jscomp.CodingConvention.DelegateRelationship delegateRelationship18 = closureCodingConvention9.getDelegateRelationship(node17);
        com.google.javascript.rhino.jstype.ObjectType objectType19 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType20 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType21 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType22 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType23 = null;
        closureCodingConvention9.applyDelegateRelationship(objectType19, objectType20, objectType21, functionType22, functionType23);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry25 = null;
        com.google.javascript.jscomp.Scope scope26 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention27 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node28 = null;
        boolean boolean29 = closureCodingConvention27.isOptionalParameter(node28);
        boolean boolean31 = closureCodingConvention27.isSuperClassReference("hi!");
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry32 = null;
        com.google.javascript.jscomp.Scope scope33 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention34 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node35 = null;
        boolean boolean36 = closureCodingConvention34.isOptionalParameter(node35);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry37 = null;
        com.google.javascript.jscomp.Scope scope38 = null;
        com.google.javascript.rhino.jstype.ObjectType[] objectTypeArray39 = new com.google.javascript.rhino.jstype.ObjectType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType> objectTypeList40 = new java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList40, objectTypeArray39);
        java.util.Map<java.lang.String, java.lang.String> strMap42 = null;
        closureCodingConvention34.defineDelegateProxyPrototypeProperties(jSTypeRegistry37, scope38, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList40, strMap42);
        java.util.Map<java.lang.String, java.lang.String> strMap44 = null;
        closureCodingConvention27.defineDelegateProxyPrototypeProperties(jSTypeRegistry32, scope33, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList40, strMap44);
        java.util.Map<java.lang.String, java.lang.String> strMap46 = null;
        closureCodingConvention9.defineDelegateProxyPrototypeProperties(jSTypeRegistry25, scope26, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList40, strMap46);
        java.util.Map<java.lang.String, java.lang.String> strMap48 = null;
        closureCodingConvention0.defineDelegateProxyPrototypeProperties(jSTypeRegistry7, scope8, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList40, strMap48);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry50 = null;
        com.google.javascript.jscomp.Scope scope51 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention52 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node53 = null;
        boolean boolean54 = closureCodingConvention52.isOptionalParameter(node53);
        boolean boolean56 = closureCodingConvention52.isSuperClassReference("hi!");
        com.google.javascript.rhino.Node node57 = null;
        boolean boolean58 = closureCodingConvention52.isOptionalParameter(node57);
        boolean boolean60 = closureCodingConvention52.isConstantKey("hi!");
        com.google.javascript.rhino.Node node61 = null;
        boolean boolean62 = closureCodingConvention52.isVarArgsParameter(node61);
        boolean boolean64 = closureCodingConvention52.isExported("");
        com.google.javascript.rhino.Node node65 = null;
        boolean boolean66 = closureCodingConvention52.isVarArgsParameter(node65);
        java.lang.String str67 = closureCodingConvention52.getExportSymbolFunction();
        java.lang.String str68 = closureCodingConvention52.getAbstractMethodName();
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry69 = null;
        com.google.javascript.jscomp.Scope scope70 = null;
        com.google.javascript.rhino.jstype.ObjectType[] objectTypeArray71 = new com.google.javascript.rhino.jstype.ObjectType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType> objectTypeList72 = new java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType>();
        boolean boolean73 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList72, objectTypeArray71);
        java.util.Map<java.lang.String, java.lang.String> strMap74 = null;
        closureCodingConvention52.defineDelegateProxyPrototypeProperties(jSTypeRegistry69, scope70, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList72, strMap74);
        java.util.Map<java.lang.String, java.lang.String> strMap76 = null;
        closureCodingConvention0.defineDelegateProxyPrototypeProperties(jSTypeRegistry50, scope51, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList72, strMap76);
        com.google.javascript.jscomp.NodeTraversal nodeTraversal78 = null;
        com.google.javascript.rhino.Node node79 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.jscomp.CodingConvention.ObjectLiteralCast objectLiteralCast80 = closureCodingConvention0.getObjectLiteralCast(nodeTraversal78, node79);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "goog.abstractMethod" + "'", str12, "goog.abstractMethod");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "goog.global" + "'", str13, "goog.global");
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(delegateRelationship18);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(objectTypeArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "goog.exportSymbol" + "'", str67, "goog.exportSymbol");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "goog.abstractMethod" + "'", str68, "goog.abstractMethod");
        org.junit.Assert.assertNotNull(objectTypeArray71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
    }

    @Test
    public void test0807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0807");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry3 = null;
        com.google.javascript.jscomp.Scope scope4 = null;
        com.google.javascript.rhino.jstype.ObjectType[] objectTypeArray5 = new com.google.javascript.rhino.jstype.ObjectType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType> objectTypeList6 = new java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList6, objectTypeArray5);
        java.util.Map<java.lang.String, java.lang.String> strMap8 = null;
        closureCodingConvention0.defineDelegateProxyPrototypeProperties(jSTypeRegistry3, scope4, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList6, strMap8);
        com.google.javascript.rhino.Node node10 = null;
        boolean boolean11 = closureCodingConvention0.isVarArgsParameter(node10);
        boolean boolean13 = closureCodingConvention0.isConstantKey("");
        java.lang.String str14 = closureCodingConvention0.getAbstractMethodName();
        boolean boolean17 = closureCodingConvention0.isExported("goog.abstractMethod", true);
        boolean boolean19 = closureCodingConvention0.isConstantKey("goog.global");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(objectTypeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "goog.abstractMethod" + "'", str14, "goog.abstractMethod");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test0808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0808");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        boolean boolean4 = closureCodingConvention0.isSuperClassReference("hi!");
        boolean boolean6 = closureCodingConvention0.isSuperClassReference("goog.global");
        boolean boolean8 = closureCodingConvention0.isConstant("goog.abstractMethod");
        java.lang.String str9 = closureCodingConvention0.getExportPropertyFunction();
        boolean boolean12 = closureCodingConvention0.isExported("goog.global", false);
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection13 = closureCodingConvention0.getAssertionFunctions();
        java.lang.String str14 = closureCodingConvention0.getAbstractMethodName();
        java.lang.String str15 = closureCodingConvention0.getExportSymbolFunction();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "goog.exportProperty" + "'", str9, "goog.exportProperty");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "goog.abstractMethod" + "'", str14, "goog.abstractMethod");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "goog.exportSymbol" + "'", str15, "goog.exportSymbol");
    }

    @Test
    public void test0809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0809");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        boolean boolean4 = closureCodingConvention0.isSuperClassReference("hi!");
        com.google.javascript.rhino.Node node5 = null;
        boolean boolean6 = closureCodingConvention0.isOptionalParameter(node5);
        boolean boolean8 = closureCodingConvention0.isConstantKey("hi!");
        com.google.javascript.rhino.Node node9 = null;
        boolean boolean10 = closureCodingConvention0.isVarArgsParameter(node9);
        java.lang.String str11 = closureCodingConvention0.getDelegateSuperclassName();
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection12 = closureCodingConvention0.getAssertionFunctions();
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry13 = null;
        com.google.javascript.jscomp.Scope scope14 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention15 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node16 = null;
        boolean boolean17 = closureCodingConvention15.isOptionalParameter(node16);
        java.lang.String str18 = closureCodingConvention15.getAbstractMethodName();
        java.lang.String str19 = closureCodingConvention15.getGlobalObject();
        com.google.javascript.rhino.Node node20 = null;
        com.google.javascript.jscomp.CodingConvention.DelegateRelationship delegateRelationship21 = closureCodingConvention15.getDelegateRelationship(node20);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry22 = null;
        com.google.javascript.jscomp.Scope scope23 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention24 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node25 = null;
        boolean boolean26 = closureCodingConvention24.isOptionalParameter(node25);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry27 = null;
        com.google.javascript.jscomp.Scope scope28 = null;
        com.google.javascript.rhino.jstype.ObjectType[] objectTypeArray29 = new com.google.javascript.rhino.jstype.ObjectType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType> objectTypeList30 = new java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList30, objectTypeArray29);
        java.util.Map<java.lang.String, java.lang.String> strMap32 = null;
        closureCodingConvention24.defineDelegateProxyPrototypeProperties(jSTypeRegistry27, scope28, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList30, strMap32);
        java.util.Map<java.lang.String, java.lang.String> strMap34 = null;
        closureCodingConvention15.defineDelegateProxyPrototypeProperties(jSTypeRegistry22, scope23, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList30, strMap34);
        java.util.Map<java.lang.String, java.lang.String> strMap36 = null;
        closureCodingConvention0.defineDelegateProxyPrototypeProperties(jSTypeRegistry13, scope14, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList30, strMap36);
        boolean boolean39 = closureCodingConvention0.isSuperClassReference("goog.exportSymbol");
        java.lang.String str40 = closureCodingConvention0.getExportPropertyFunction();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection12);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "goog.abstractMethod" + "'", str18, "goog.abstractMethod");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "goog.global" + "'", str19, "goog.global");
        org.junit.Assert.assertNull(delegateRelationship21);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(objectTypeArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "goog.exportProperty" + "'", str40, "goog.exportProperty");
    }

    @Test
    public void test0810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0810");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        boolean boolean4 = closureCodingConvention0.isSuperClassReference("hi!");
        com.google.javascript.rhino.Node node5 = null;
        boolean boolean6 = closureCodingConvention0.isOptionalParameter(node5);
        boolean boolean8 = closureCodingConvention0.isConstantKey("hi!");
        com.google.javascript.rhino.Node node9 = null;
        boolean boolean10 = closureCodingConvention0.isVarArgsParameter(node9);
        java.lang.String str11 = closureCodingConvention0.getDelegateSuperclassName();
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection12 = closureCodingConvention0.getAssertionFunctions();
        boolean boolean14 = closureCodingConvention0.isPrivate("goog.global");
        boolean boolean16 = closureCodingConvention0.isExported("hi!");
        boolean boolean18 = closureCodingConvention0.isExported("goog.global");
        java.lang.String str19 = closureCodingConvention0.getAbstractMethodName();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "goog.abstractMethod" + "'", str19, "goog.abstractMethod");
    }

    @Test
    public void test0811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0811");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        boolean boolean4 = closureCodingConvention0.isSuperClassReference("hi!");
        com.google.javascript.rhino.Node node5 = null;
        boolean boolean6 = closureCodingConvention0.isOptionalParameter(node5);
        boolean boolean8 = closureCodingConvention0.isConstantKey("hi!");
        com.google.javascript.rhino.Node node9 = null;
        boolean boolean10 = closureCodingConvention0.isVarArgsParameter(node9);
        boolean boolean12 = closureCodingConvention0.isExported("");
        com.google.javascript.rhino.Node node13 = null;
        boolean boolean14 = closureCodingConvention0.isVarArgsParameter(node13);
        java.lang.String str15 = closureCodingConvention0.getExportSymbolFunction();
        java.lang.String str16 = closureCodingConvention0.getAbstractMethodName();
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry17 = null;
        com.google.javascript.jscomp.Scope scope18 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention19 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node20 = null;
        boolean boolean21 = closureCodingConvention19.isOptionalParameter(node20);
        java.lang.String str22 = closureCodingConvention19.getAbstractMethodName();
        java.lang.String str23 = closureCodingConvention19.getGlobalObject();
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection24 = closureCodingConvention19.getAssertionFunctions();
        boolean boolean26 = closureCodingConvention19.isConstant("goog.global");
        com.google.javascript.rhino.Node node27 = null;
        com.google.javascript.jscomp.CodingConvention.DelegateRelationship delegateRelationship28 = closureCodingConvention19.getDelegateRelationship(node27);
        com.google.javascript.rhino.jstype.ObjectType objectType29 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType30 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType31 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType32 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType33 = null;
        closureCodingConvention19.applyDelegateRelationship(objectType29, objectType30, objectType31, functionType32, functionType33);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry35 = null;
        com.google.javascript.jscomp.Scope scope36 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention37 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node38 = null;
        boolean boolean39 = closureCodingConvention37.isOptionalParameter(node38);
        boolean boolean41 = closureCodingConvention37.isSuperClassReference("hi!");
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry42 = null;
        com.google.javascript.jscomp.Scope scope43 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention44 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node45 = null;
        boolean boolean46 = closureCodingConvention44.isOptionalParameter(node45);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry47 = null;
        com.google.javascript.jscomp.Scope scope48 = null;
        com.google.javascript.rhino.jstype.ObjectType[] objectTypeArray49 = new com.google.javascript.rhino.jstype.ObjectType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType> objectTypeList50 = new java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList50, objectTypeArray49);
        java.util.Map<java.lang.String, java.lang.String> strMap52 = null;
        closureCodingConvention44.defineDelegateProxyPrototypeProperties(jSTypeRegistry47, scope48, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList50, strMap52);
        java.util.Map<java.lang.String, java.lang.String> strMap54 = null;
        closureCodingConvention37.defineDelegateProxyPrototypeProperties(jSTypeRegistry42, scope43, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList50, strMap54);
        java.util.Map<java.lang.String, java.lang.String> strMap56 = null;
        closureCodingConvention19.defineDelegateProxyPrototypeProperties(jSTypeRegistry35, scope36, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList50, strMap56);
        java.util.Map<java.lang.String, java.lang.String> strMap58 = null;
        closureCodingConvention0.defineDelegateProxyPrototypeProperties(jSTypeRegistry17, scope18, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList50, strMap58);
        java.lang.String str60 = closureCodingConvention0.getExportPropertyFunction();
        com.google.javascript.rhino.Node node61 = null;
        com.google.javascript.rhino.Node node62 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str63 = closureCodingConvention0.extractClassNameIfRequire(node61, node62);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "goog.exportSymbol" + "'", str15, "goog.exportSymbol");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "goog.abstractMethod" + "'", str16, "goog.abstractMethod");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "goog.abstractMethod" + "'", str22, "goog.abstractMethod");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "goog.global" + "'", str23, "goog.global");
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(delegateRelationship28);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(objectTypeArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "goog.exportProperty" + "'", str60, "goog.exportProperty");
    }

    @Test
    public void test0812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0812");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        boolean boolean4 = closureCodingConvention0.isConstant("hi!");
        boolean boolean6 = closureCodingConvention0.isPrivate("hi!");
        java.lang.String str7 = closureCodingConvention0.getExportPropertyFunction();
        com.google.javascript.rhino.jstype.FunctionType functionType8 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType9 = null;
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType10 = null;
        closureCodingConvention0.applySubclassRelationship(functionType8, functionType9, subclassType10);
        boolean boolean13 = closureCodingConvention0.isConstantKey("goog.exportProperty");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "goog.exportProperty" + "'", str7, "goog.exportProperty");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test0813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0813");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry3 = null;
        com.google.javascript.jscomp.Scope scope4 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention5 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node6 = null;
        boolean boolean7 = closureCodingConvention5.isOptionalParameter(node6);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry8 = null;
        com.google.javascript.jscomp.Scope scope9 = null;
        com.google.javascript.rhino.jstype.ObjectType[] objectTypeArray10 = new com.google.javascript.rhino.jstype.ObjectType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType> objectTypeList11 = new java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList11, objectTypeArray10);
        java.util.Map<java.lang.String, java.lang.String> strMap13 = null;
        closureCodingConvention5.defineDelegateProxyPrototypeProperties(jSTypeRegistry8, scope9, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList11, strMap13);
        java.util.Map<java.lang.String, java.lang.String> strMap15 = null;
        closureCodingConvention0.defineDelegateProxyPrototypeProperties(jSTypeRegistry3, scope4, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList11, strMap15);
        java.lang.String str17 = closureCodingConvention0.getDelegateSuperclassName();
        boolean boolean19 = closureCodingConvention0.isConstantKey("goog.abstractMethod");
        java.lang.String str20 = closureCodingConvention0.getDelegateSuperclassName();
        java.lang.String str21 = closureCodingConvention0.getAbstractMethodName();
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry22 = null;
        com.google.javascript.jscomp.Scope scope23 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention24 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node25 = null;
        boolean boolean26 = closureCodingConvention24.isOptionalParameter(node25);
        boolean boolean28 = closureCodingConvention24.isSuperClassReference("hi!");
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry29 = null;
        com.google.javascript.jscomp.Scope scope30 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention31 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node32 = null;
        boolean boolean33 = closureCodingConvention31.isOptionalParameter(node32);
        java.lang.String str34 = closureCodingConvention31.getAbstractMethodName();
        java.lang.String str35 = closureCodingConvention31.getGlobalObject();
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection36 = closureCodingConvention31.getAssertionFunctions();
        boolean boolean38 = closureCodingConvention31.isConstant("goog.global");
        com.google.javascript.rhino.Node node39 = null;
        com.google.javascript.jscomp.CodingConvention.DelegateRelationship delegateRelationship40 = closureCodingConvention31.getDelegateRelationship(node39);
        com.google.javascript.rhino.jstype.ObjectType objectType41 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType42 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType43 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType44 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType45 = null;
        closureCodingConvention31.applyDelegateRelationship(objectType41, objectType42, objectType43, functionType44, functionType45);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry47 = null;
        com.google.javascript.jscomp.Scope scope48 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention49 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node50 = null;
        boolean boolean51 = closureCodingConvention49.isOptionalParameter(node50);
        boolean boolean53 = closureCodingConvention49.isSuperClassReference("hi!");
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry54 = null;
        com.google.javascript.jscomp.Scope scope55 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention56 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node57 = null;
        boolean boolean58 = closureCodingConvention56.isOptionalParameter(node57);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry59 = null;
        com.google.javascript.jscomp.Scope scope60 = null;
        com.google.javascript.rhino.jstype.ObjectType[] objectTypeArray61 = new com.google.javascript.rhino.jstype.ObjectType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType> objectTypeList62 = new java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList62, objectTypeArray61);
        java.util.Map<java.lang.String, java.lang.String> strMap64 = null;
        closureCodingConvention56.defineDelegateProxyPrototypeProperties(jSTypeRegistry59, scope60, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList62, strMap64);
        java.util.Map<java.lang.String, java.lang.String> strMap66 = null;
        closureCodingConvention49.defineDelegateProxyPrototypeProperties(jSTypeRegistry54, scope55, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList62, strMap66);
        java.util.Map<java.lang.String, java.lang.String> strMap68 = null;
        closureCodingConvention31.defineDelegateProxyPrototypeProperties(jSTypeRegistry47, scope48, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList62, strMap68);
        java.util.Map<java.lang.String, java.lang.String> strMap70 = null;
        closureCodingConvention24.defineDelegateProxyPrototypeProperties(jSTypeRegistry29, scope30, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList62, strMap70);
        java.util.Map<java.lang.String, java.lang.String> strMap72 = null;
        closureCodingConvention0.defineDelegateProxyPrototypeProperties(jSTypeRegistry22, scope23, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList62, strMap72);
        com.google.javascript.rhino.jstype.FunctionType functionType74 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType75 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType76 = null;
        // The following exception was thrown during execution in test generation
        try {
            closureCodingConvention0.applySingletonGetter(functionType74, functionType75, objectType76);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(objectTypeArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "goog.abstractMethod" + "'", str21, "goog.abstractMethod");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "goog.abstractMethod" + "'", str34, "goog.abstractMethod");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "goog.global" + "'", str35, "goog.global");
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(delegateRelationship40);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(objectTypeArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
    }

    @Test
    public void test0814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0814");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry3 = null;
        com.google.javascript.jscomp.Scope scope4 = null;
        com.google.javascript.rhino.jstype.ObjectType[] objectTypeArray5 = new com.google.javascript.rhino.jstype.ObjectType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType> objectTypeList6 = new java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList6, objectTypeArray5);
        java.util.Map<java.lang.String, java.lang.String> strMap8 = null;
        closureCodingConvention0.defineDelegateProxyPrototypeProperties(jSTypeRegistry3, scope4, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList6, strMap8);
        com.google.javascript.rhino.Node node10 = null;
        boolean boolean11 = closureCodingConvention0.isVarArgsParameter(node10);
        java.lang.String str12 = closureCodingConvention0.getExportPropertyFunction();
        java.lang.String str13 = closureCodingConvention0.getExportSymbolFunction();
        com.google.javascript.rhino.Node node14 = null;
        boolean boolean15 = closureCodingConvention0.isOptionalParameter(node14);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(objectTypeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "goog.exportProperty" + "'", str12, "goog.exportProperty");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "goog.exportSymbol" + "'", str13, "goog.exportSymbol");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test0815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0815");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        boolean boolean4 = closureCodingConvention0.isSuperClassReference("hi!");
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = null;
        com.google.javascript.jscomp.Scope scope6 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention7 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node8 = null;
        boolean boolean9 = closureCodingConvention7.isOptionalParameter(node8);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry10 = null;
        com.google.javascript.jscomp.Scope scope11 = null;
        com.google.javascript.rhino.jstype.ObjectType[] objectTypeArray12 = new com.google.javascript.rhino.jstype.ObjectType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType> objectTypeList13 = new java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList13, objectTypeArray12);
        java.util.Map<java.lang.String, java.lang.String> strMap15 = null;
        closureCodingConvention7.defineDelegateProxyPrototypeProperties(jSTypeRegistry10, scope11, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList13, strMap15);
        java.util.Map<java.lang.String, java.lang.String> strMap17 = null;
        closureCodingConvention0.defineDelegateProxyPrototypeProperties(jSTypeRegistry5, scope6, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList13, strMap17);
        com.google.javascript.rhino.Node node19 = null;
        boolean boolean20 = closureCodingConvention0.isVarArgsParameter(node19);
        com.google.javascript.rhino.Node node21 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str22 = closureCodingConvention0.getSingletonGetterClassName(node21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(objectTypeArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test0816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0816");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        java.lang.String str3 = closureCodingConvention0.getAbstractMethodName();
        java.lang.String str4 = closureCodingConvention0.getGlobalObject();
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection5 = closureCodingConvention0.getAssertionFunctions();
        boolean boolean7 = closureCodingConvention0.isConstant("goog.global");
        com.google.javascript.rhino.Node node8 = null;
        com.google.javascript.jscomp.CodingConvention.DelegateRelationship delegateRelationship9 = closureCodingConvention0.getDelegateRelationship(node8);
        com.google.javascript.rhino.jstype.ObjectType objectType10 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType11 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType12 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType13 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType14 = null;
        closureCodingConvention0.applyDelegateRelationship(objectType10, objectType11, objectType12, functionType13, functionType14);
        java.lang.String str16 = closureCodingConvention0.getAbstractMethodName();
        com.google.javascript.rhino.Node node17 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str18 = closureCodingConvention0.getSingletonGetterClassName(node17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "goog.abstractMethod" + "'", str3, "goog.abstractMethod");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "goog.global" + "'", str4, "goog.global");
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(delegateRelationship9);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "goog.abstractMethod" + "'", str16, "goog.abstractMethod");
    }

    @Test
    public void test0817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0817");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        boolean boolean4 = closureCodingConvention0.isSuperClassReference("hi!");
        com.google.javascript.rhino.Node node5 = null;
        boolean boolean6 = closureCodingConvention0.isOptionalParameter(node5);
        boolean boolean8 = closureCodingConvention0.isConstantKey("hi!");
        com.google.javascript.rhino.Node node9 = null;
        boolean boolean10 = closureCodingConvention0.isVarArgsParameter(node9);
        java.lang.String str11 = closureCodingConvention0.getDelegateSuperclassName();
        com.google.javascript.rhino.Node node12 = null;
        boolean boolean13 = closureCodingConvention0.isOptionalParameter(node12);
        java.lang.String str14 = closureCodingConvention0.getAbstractMethodName();
        com.google.javascript.rhino.Node node15 = null;
        boolean boolean16 = closureCodingConvention0.isVarArgsParameter(node15);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "goog.abstractMethod" + "'", str14, "goog.abstractMethod");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test0818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0818");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        boolean boolean4 = closureCodingConvention0.isSuperClassReference("hi!");
        com.google.javascript.rhino.Node node5 = null;
        boolean boolean6 = closureCodingConvention0.isOptionalParameter(node5);
        boolean boolean8 = closureCodingConvention0.isConstantKey("hi!");
        com.google.javascript.rhino.Node node9 = null;
        boolean boolean10 = closureCodingConvention0.isVarArgsParameter(node9);
        java.lang.String str11 = closureCodingConvention0.getDelegateSuperclassName();
        java.lang.String str12 = closureCodingConvention0.getAbstractMethodName();
        boolean boolean14 = closureCodingConvention0.isConstantKey("goog.global");
        boolean boolean16 = closureCodingConvention0.isPrivate("goog.exportProperty");
        java.lang.String str17 = closureCodingConvention0.getExportSymbolFunction();
        java.lang.String str18 = closureCodingConvention0.getGlobalObject();
        com.google.javascript.rhino.jstype.ObjectType objectType19 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType20 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType21 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType22 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType23 = null;
        closureCodingConvention0.applyDelegateRelationship(objectType19, objectType20, objectType21, functionType22, functionType23);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "goog.abstractMethod" + "'", str12, "goog.abstractMethod");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "goog.exportSymbol" + "'", str17, "goog.exportSymbol");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "goog.global" + "'", str18, "goog.global");
    }

    @Test
    public void test0819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0819");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        boolean boolean2 = closureCodingConvention0.isExported("goog.global");
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection3 = closureCodingConvention0.getAssertionFunctions();
        java.lang.String str4 = closureCodingConvention0.getGlobalObject();
        boolean boolean7 = closureCodingConvention0.isExported("goog.exportProperty", false);
        boolean boolean9 = closureCodingConvention0.isExported("goog.abstractMethod");
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection10 = closureCodingConvention0.getAssertionFunctions();
        boolean boolean12 = closureCodingConvention0.isConstant("goog.global");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "goog.global" + "'", str4, "goog.global");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test0820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0820");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        boolean boolean2 = closureCodingConvention0.isConstantKey("goog.abstractMethod");
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection3 = closureCodingConvention0.getAssertionFunctions();
        boolean boolean5 = closureCodingConvention0.isExported("goog.global");
        com.google.javascript.rhino.Node node6 = null;
        com.google.javascript.rhino.Node node7 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str8 = closureCodingConvention0.extractClassNameIfProvide(node6, node7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test0821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0821");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        java.lang.String str3 = closureCodingConvention0.getAbstractMethodName();
        java.lang.String str4 = closureCodingConvention0.getGlobalObject();
        boolean boolean6 = closureCodingConvention0.isExported("goog.global");
        boolean boolean8 = closureCodingConvention0.isConstant("goog.abstractMethod");
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry9 = null;
        com.google.javascript.jscomp.Scope scope10 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention11 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node12 = null;
        boolean boolean13 = closureCodingConvention11.isOptionalParameter(node12);
        java.lang.String str14 = closureCodingConvention11.getAbstractMethodName();
        java.lang.String str15 = closureCodingConvention11.getGlobalObject();
        com.google.javascript.rhino.Node node16 = null;
        com.google.javascript.jscomp.CodingConvention.DelegateRelationship delegateRelationship17 = closureCodingConvention11.getDelegateRelationship(node16);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry18 = null;
        com.google.javascript.jscomp.Scope scope19 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention20 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node21 = null;
        boolean boolean22 = closureCodingConvention20.isOptionalParameter(node21);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry23 = null;
        com.google.javascript.jscomp.Scope scope24 = null;
        com.google.javascript.rhino.jstype.ObjectType[] objectTypeArray25 = new com.google.javascript.rhino.jstype.ObjectType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType> objectTypeList26 = new java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList26, objectTypeArray25);
        java.util.Map<java.lang.String, java.lang.String> strMap28 = null;
        closureCodingConvention20.defineDelegateProxyPrototypeProperties(jSTypeRegistry23, scope24, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList26, strMap28);
        java.util.Map<java.lang.String, java.lang.String> strMap30 = null;
        closureCodingConvention11.defineDelegateProxyPrototypeProperties(jSTypeRegistry18, scope19, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList26, strMap30);
        java.util.Map<java.lang.String, java.lang.String> strMap32 = null;
        closureCodingConvention0.defineDelegateProxyPrototypeProperties(jSTypeRegistry9, scope10, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList26, strMap32);
        boolean boolean36 = closureCodingConvention0.isExported("hi!", true);
        boolean boolean39 = closureCodingConvention0.isExported("goog.abstractMethod", false);
        com.google.javascript.jscomp.NodeTraversal nodeTraversal40 = null;
        com.google.javascript.rhino.Node node41 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.jscomp.CodingConvention.ObjectLiteralCast objectLiteralCast42 = closureCodingConvention0.getObjectLiteralCast(nodeTraversal40, node41);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "goog.abstractMethod" + "'", str3, "goog.abstractMethod");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "goog.global" + "'", str4, "goog.global");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "goog.abstractMethod" + "'", str14, "goog.abstractMethod");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "goog.global" + "'", str15, "goog.global");
        org.junit.Assert.assertNull(delegateRelationship17);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(objectTypeArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test0822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0822");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        java.lang.String str3 = closureCodingConvention0.getAbstractMethodName();
        boolean boolean5 = closureCodingConvention0.isConstant("goog.abstractMethod");
        boolean boolean7 = closureCodingConvention0.isExported("goog.exportSymbol");
        com.google.javascript.rhino.Node node8 = null;
        boolean boolean9 = closureCodingConvention0.isVarArgsParameter(node8);
        boolean boolean11 = closureCodingConvention0.isPrivate("hi!");
        boolean boolean13 = closureCodingConvention0.isSuperClassReference("goog.global");
        com.google.javascript.rhino.Node node14 = null;
        com.google.javascript.rhino.Node node15 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str16 = closureCodingConvention0.extractClassNameIfRequire(node14, node15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "goog.abstractMethod" + "'", str3, "goog.abstractMethod");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test0823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0823");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        java.lang.String str3 = closureCodingConvention0.getAbstractMethodName();
        java.lang.String str4 = closureCodingConvention0.getGlobalObject();
        com.google.javascript.rhino.Node node5 = null;
        java.util.Map<java.lang.String, java.lang.String> strMap6 = null;
        closureCodingConvention0.checkForCallingConventionDefiningCalls(node5, strMap6);
        boolean boolean9 = closureCodingConvention0.isConstant("");
        java.lang.String str10 = closureCodingConvention0.getExportPropertyFunction();
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry11 = null;
        com.google.javascript.jscomp.Scope scope12 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention13 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node14 = null;
        boolean boolean15 = closureCodingConvention13.isOptionalParameter(node14);
        java.lang.String str16 = closureCodingConvention13.getAbstractMethodName();
        java.lang.String str17 = closureCodingConvention13.getGlobalObject();
        boolean boolean19 = closureCodingConvention13.isExported("goog.global");
        boolean boolean21 = closureCodingConvention13.isConstant("goog.abstractMethod");
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry22 = null;
        com.google.javascript.jscomp.Scope scope23 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention24 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node25 = null;
        boolean boolean26 = closureCodingConvention24.isOptionalParameter(node25);
        java.lang.String str27 = closureCodingConvention24.getAbstractMethodName();
        java.lang.String str28 = closureCodingConvention24.getGlobalObject();
        com.google.javascript.rhino.Node node29 = null;
        com.google.javascript.jscomp.CodingConvention.DelegateRelationship delegateRelationship30 = closureCodingConvention24.getDelegateRelationship(node29);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry31 = null;
        com.google.javascript.jscomp.Scope scope32 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention33 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node34 = null;
        boolean boolean35 = closureCodingConvention33.isOptionalParameter(node34);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry36 = null;
        com.google.javascript.jscomp.Scope scope37 = null;
        com.google.javascript.rhino.jstype.ObjectType[] objectTypeArray38 = new com.google.javascript.rhino.jstype.ObjectType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType> objectTypeList39 = new java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList39, objectTypeArray38);
        java.util.Map<java.lang.String, java.lang.String> strMap41 = null;
        closureCodingConvention33.defineDelegateProxyPrototypeProperties(jSTypeRegistry36, scope37, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList39, strMap41);
        java.util.Map<java.lang.String, java.lang.String> strMap43 = null;
        closureCodingConvention24.defineDelegateProxyPrototypeProperties(jSTypeRegistry31, scope32, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList39, strMap43);
        java.util.Map<java.lang.String, java.lang.String> strMap45 = null;
        closureCodingConvention13.defineDelegateProxyPrototypeProperties(jSTypeRegistry22, scope23, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList39, strMap45);
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection47 = closureCodingConvention13.getAssertionFunctions();
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry48 = null;
        com.google.javascript.jscomp.Scope scope49 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention50 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node51 = null;
        boolean boolean52 = closureCodingConvention50.isOptionalParameter(node51);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry53 = null;
        com.google.javascript.jscomp.Scope scope54 = null;
        com.google.javascript.rhino.jstype.ObjectType[] objectTypeArray55 = new com.google.javascript.rhino.jstype.ObjectType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType> objectTypeList56 = new java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList56, objectTypeArray55);
        java.util.Map<java.lang.String, java.lang.String> strMap58 = null;
        closureCodingConvention50.defineDelegateProxyPrototypeProperties(jSTypeRegistry53, scope54, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList56, strMap58);
        java.util.Map<java.lang.String, java.lang.String> strMap60 = null;
        closureCodingConvention13.defineDelegateProxyPrototypeProperties(jSTypeRegistry48, scope49, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList56, strMap60);
        java.util.Map<java.lang.String, java.lang.String> strMap62 = null;
        closureCodingConvention0.defineDelegateProxyPrototypeProperties(jSTypeRegistry11, scope12, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList56, strMap62);
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection64 = closureCodingConvention0.getAssertionFunctions();
        java.lang.String str65 = closureCodingConvention0.getExportPropertyFunction();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "goog.abstractMethod" + "'", str3, "goog.abstractMethod");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "goog.global" + "'", str4, "goog.global");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "goog.exportProperty" + "'", str10, "goog.exportProperty");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "goog.abstractMethod" + "'", str16, "goog.abstractMethod");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "goog.global" + "'", str17, "goog.global");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "goog.abstractMethod" + "'", str27, "goog.abstractMethod");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "goog.global" + "'", str28, "goog.global");
        org.junit.Assert.assertNull(delegateRelationship30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(objectTypeArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection47);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(objectTypeArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "goog.exportProperty" + "'", str65, "goog.exportProperty");
    }

    @Test
    public void test0824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0824");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        java.lang.String str3 = closureCodingConvention0.getAbstractMethodName();
        java.lang.String str4 = closureCodingConvention0.getGlobalObject();
        com.google.javascript.rhino.Node node5 = null;
        java.util.Map<java.lang.String, java.lang.String> strMap6 = null;
        closureCodingConvention0.checkForCallingConventionDefiningCalls(node5, strMap6);
        com.google.javascript.rhino.Node node8 = null;
        com.google.javascript.jscomp.CodingConvention.DelegateRelationship delegateRelationship9 = closureCodingConvention0.getDelegateRelationship(node8);
        java.lang.String str10 = closureCodingConvention0.getDelegateSuperclassName();
        com.google.javascript.rhino.Node node11 = null;
        boolean boolean12 = closureCodingConvention0.isVarArgsParameter(node11);
        boolean boolean14 = closureCodingConvention0.isExported("");
        boolean boolean17 = closureCodingConvention0.isExported("goog.global", false);
        com.google.javascript.rhino.Node node18 = null;
        boolean boolean19 = closureCodingConvention0.isVarArgsParameter(node18);
        com.google.javascript.rhino.Node node20 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.jscomp.CodingConvention.Bind bind21 = closureCodingConvention0.describeFunctionBind(node20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "goog.abstractMethod" + "'", str3, "goog.abstractMethod");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "goog.global" + "'", str4, "goog.global");
        org.junit.Assert.assertNull(delegateRelationship9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test0825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0825");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        java.lang.String str3 = closureCodingConvention0.getAbstractMethodName();
        java.lang.String str4 = closureCodingConvention0.getGlobalObject();
        boolean boolean6 = closureCodingConvention0.isExported("goog.global");
        boolean boolean8 = closureCodingConvention0.isConstant("goog.abstractMethod");
        com.google.javascript.rhino.jstype.FunctionType functionType9 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType10 = null;
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType11 = null;
        closureCodingConvention0.applySubclassRelationship(functionType9, functionType10, subclassType11);
        boolean boolean15 = closureCodingConvention0.isExported("goog.abstractMethod", true);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry16 = null;
        com.google.javascript.jscomp.Scope scope17 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention18 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node19 = null;
        boolean boolean20 = closureCodingConvention18.isOptionalParameter(node19);
        java.lang.String str21 = closureCodingConvention18.getAbstractMethodName();
        java.lang.String str22 = closureCodingConvention18.getGlobalObject();
        boolean boolean24 = closureCodingConvention18.isExported("goog.global");
        boolean boolean26 = closureCodingConvention18.isConstant("goog.abstractMethod");
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry27 = null;
        com.google.javascript.jscomp.Scope scope28 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention29 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node30 = null;
        boolean boolean31 = closureCodingConvention29.isOptionalParameter(node30);
        java.lang.String str32 = closureCodingConvention29.getAbstractMethodName();
        java.lang.String str33 = closureCodingConvention29.getGlobalObject();
        com.google.javascript.rhino.Node node34 = null;
        com.google.javascript.jscomp.CodingConvention.DelegateRelationship delegateRelationship35 = closureCodingConvention29.getDelegateRelationship(node34);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry36 = null;
        com.google.javascript.jscomp.Scope scope37 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention38 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node39 = null;
        boolean boolean40 = closureCodingConvention38.isOptionalParameter(node39);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry41 = null;
        com.google.javascript.jscomp.Scope scope42 = null;
        com.google.javascript.rhino.jstype.ObjectType[] objectTypeArray43 = new com.google.javascript.rhino.jstype.ObjectType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType> objectTypeList44 = new java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList44, objectTypeArray43);
        java.util.Map<java.lang.String, java.lang.String> strMap46 = null;
        closureCodingConvention38.defineDelegateProxyPrototypeProperties(jSTypeRegistry41, scope42, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList44, strMap46);
        java.util.Map<java.lang.String, java.lang.String> strMap48 = null;
        closureCodingConvention29.defineDelegateProxyPrototypeProperties(jSTypeRegistry36, scope37, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList44, strMap48);
        java.util.Map<java.lang.String, java.lang.String> strMap50 = null;
        closureCodingConvention18.defineDelegateProxyPrototypeProperties(jSTypeRegistry27, scope28, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList44, strMap50);
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection52 = closureCodingConvention18.getAssertionFunctions();
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry53 = null;
        com.google.javascript.jscomp.Scope scope54 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention55 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node56 = null;
        boolean boolean57 = closureCodingConvention55.isOptionalParameter(node56);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry58 = null;
        com.google.javascript.jscomp.Scope scope59 = null;
        com.google.javascript.rhino.jstype.ObjectType[] objectTypeArray60 = new com.google.javascript.rhino.jstype.ObjectType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType> objectTypeList61 = new java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList61, objectTypeArray60);
        java.util.Map<java.lang.String, java.lang.String> strMap63 = null;
        closureCodingConvention55.defineDelegateProxyPrototypeProperties(jSTypeRegistry58, scope59, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList61, strMap63);
        java.util.Map<java.lang.String, java.lang.String> strMap65 = null;
        closureCodingConvention18.defineDelegateProxyPrototypeProperties(jSTypeRegistry53, scope54, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList61, strMap65);
        java.util.Map<java.lang.String, java.lang.String> strMap67 = null;
        closureCodingConvention0.defineDelegateProxyPrototypeProperties(jSTypeRegistry16, scope17, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList61, strMap67);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "goog.abstractMethod" + "'", str3, "goog.abstractMethod");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "goog.global" + "'", str4, "goog.global");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "goog.abstractMethod" + "'", str21, "goog.abstractMethod");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "goog.global" + "'", str22, "goog.global");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "goog.abstractMethod" + "'", str32, "goog.abstractMethod");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "goog.global" + "'", str33, "goog.global");
        org.junit.Assert.assertNull(delegateRelationship35);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(objectTypeArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection52);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(objectTypeArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
    }

    @Test
    public void test0826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0826");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        java.lang.String str3 = closureCodingConvention0.getAbstractMethodName();
        java.lang.String str4 = closureCodingConvention0.getGlobalObject();
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection5 = closureCodingConvention0.getAssertionFunctions();
        boolean boolean7 = closureCodingConvention0.isConstant("goog.global");
        com.google.javascript.rhino.Node node8 = null;
        com.google.javascript.jscomp.CodingConvention.DelegateRelationship delegateRelationship9 = closureCodingConvention0.getDelegateRelationship(node8);
        com.google.javascript.rhino.Node node10 = null;
        boolean boolean11 = closureCodingConvention0.isVarArgsParameter(node10);
        com.google.javascript.rhino.Node node12 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.String> strList13 = closureCodingConvention0.identifyTypeDeclarationCall(node12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "goog.abstractMethod" + "'", str3, "goog.abstractMethod");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "goog.global" + "'", str4, "goog.global");
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(delegateRelationship9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test0827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0827");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry3 = null;
        com.google.javascript.jscomp.Scope scope4 = null;
        com.google.javascript.rhino.jstype.ObjectType[] objectTypeArray5 = new com.google.javascript.rhino.jstype.ObjectType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType> objectTypeList6 = new java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList6, objectTypeArray5);
        java.util.Map<java.lang.String, java.lang.String> strMap8 = null;
        closureCodingConvention0.defineDelegateProxyPrototypeProperties(jSTypeRegistry3, scope4, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList6, strMap8);
        com.google.javascript.rhino.Node node10 = null;
        boolean boolean11 = closureCodingConvention0.isVarArgsParameter(node10);
        boolean boolean13 = closureCodingConvention0.isConstantKey("");
        java.lang.String str14 = closureCodingConvention0.getExportPropertyFunction();
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection15 = closureCodingConvention0.getAssertionFunctions();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(objectTypeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "goog.exportProperty" + "'", str14, "goog.exportProperty");
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection15);
    }

    @Test
    public void test0828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0828");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        java.lang.String str3 = closureCodingConvention0.getAbstractMethodName();
        java.lang.String str4 = closureCodingConvention0.getGlobalObject();
        boolean boolean6 = closureCodingConvention0.isExported("goog.global");
        java.lang.String str7 = closureCodingConvention0.getDelegateSuperclassName();
        boolean boolean9 = closureCodingConvention0.isConstantKey("goog.abstractMethod");
        java.lang.Class<?> wildcardClass10 = closureCodingConvention0.getClass();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "goog.abstractMethod" + "'", str3, "goog.abstractMethod");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "goog.global" + "'", str4, "goog.global");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test0829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0829");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.jstype.ObjectType objectType1 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType2 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType3 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType4 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType5 = null;
        closureCodingConvention0.applyDelegateRelationship(objectType1, objectType2, objectType3, functionType4, functionType5);
        java.lang.String str7 = closureCodingConvention0.getGlobalObject();
        boolean boolean9 = closureCodingConvention0.isPrivate("goog.abstractMethod");
        com.google.javascript.rhino.jstype.ObjectType objectType10 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType11 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType12 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType13 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType14 = null;
        closureCodingConvention0.applyDelegateRelationship(objectType10, objectType11, objectType12, functionType13, functionType14);
        java.lang.String str16 = closureCodingConvention0.getGlobalObject();
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry17 = null;
        com.google.javascript.jscomp.Scope scope18 = null;
        java.util.List<com.google.javascript.rhino.jstype.ObjectType> objectTypeList19 = null;
        java.util.Map<java.lang.String, java.lang.String> strMap20 = null;
        closureCodingConvention0.defineDelegateProxyPrototypeProperties(jSTypeRegistry17, scope18, objectTypeList19, strMap20);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry22 = null;
        com.google.javascript.jscomp.Scope scope23 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention24 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node25 = null;
        boolean boolean26 = closureCodingConvention24.isOptionalParameter(node25);
        java.lang.String str27 = closureCodingConvention24.getAbstractMethodName();
        boolean boolean29 = closureCodingConvention24.isConstant("goog.abstractMethod");
        java.lang.String str30 = closureCodingConvention24.getDelegateSuperclassName();
        com.google.javascript.rhino.jstype.ObjectType objectType31 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType32 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType33 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType34 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType35 = null;
        closureCodingConvention24.applyDelegateRelationship(objectType31, objectType32, objectType33, functionType34, functionType35);
        boolean boolean38 = closureCodingConvention24.isValidEnumKey("goog.exportProperty");
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry39 = null;
        com.google.javascript.jscomp.Scope scope40 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention41 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node42 = null;
        boolean boolean43 = closureCodingConvention41.isOptionalParameter(node42);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry44 = null;
        com.google.javascript.jscomp.Scope scope45 = null;
        com.google.javascript.rhino.jstype.ObjectType[] objectTypeArray46 = new com.google.javascript.rhino.jstype.ObjectType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType> objectTypeList47 = new java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList47, objectTypeArray46);
        java.util.Map<java.lang.String, java.lang.String> strMap49 = null;
        closureCodingConvention41.defineDelegateProxyPrototypeProperties(jSTypeRegistry44, scope45, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList47, strMap49);
        com.google.javascript.rhino.Node node51 = null;
        boolean boolean52 = closureCodingConvention41.isVarArgsParameter(node51);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry53 = null;
        com.google.javascript.jscomp.Scope scope54 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention55 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node56 = null;
        boolean boolean57 = closureCodingConvention55.isOptionalParameter(node56);
        boolean boolean59 = closureCodingConvention55.isSuperClassReference("hi!");
        com.google.javascript.rhino.Node node60 = null;
        boolean boolean61 = closureCodingConvention55.isOptionalParameter(node60);
        boolean boolean63 = closureCodingConvention55.isConstantKey("hi!");
        com.google.javascript.rhino.Node node64 = null;
        boolean boolean65 = closureCodingConvention55.isVarArgsParameter(node64);
        java.lang.String str66 = closureCodingConvention55.getDelegateSuperclassName();
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection67 = closureCodingConvention55.getAssertionFunctions();
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry68 = null;
        com.google.javascript.jscomp.Scope scope69 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention70 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node71 = null;
        boolean boolean72 = closureCodingConvention70.isOptionalParameter(node71);
        java.lang.String str73 = closureCodingConvention70.getAbstractMethodName();
        java.lang.String str74 = closureCodingConvention70.getGlobalObject();
        com.google.javascript.rhino.Node node75 = null;
        com.google.javascript.jscomp.CodingConvention.DelegateRelationship delegateRelationship76 = closureCodingConvention70.getDelegateRelationship(node75);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry77 = null;
        com.google.javascript.jscomp.Scope scope78 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention79 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node80 = null;
        boolean boolean81 = closureCodingConvention79.isOptionalParameter(node80);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry82 = null;
        com.google.javascript.jscomp.Scope scope83 = null;
        com.google.javascript.rhino.jstype.ObjectType[] objectTypeArray84 = new com.google.javascript.rhino.jstype.ObjectType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType> objectTypeList85 = new java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType>();
        boolean boolean86 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList85, objectTypeArray84);
        java.util.Map<java.lang.String, java.lang.String> strMap87 = null;
        closureCodingConvention79.defineDelegateProxyPrototypeProperties(jSTypeRegistry82, scope83, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList85, strMap87);
        java.util.Map<java.lang.String, java.lang.String> strMap89 = null;
        closureCodingConvention70.defineDelegateProxyPrototypeProperties(jSTypeRegistry77, scope78, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList85, strMap89);
        java.util.Map<java.lang.String, java.lang.String> strMap91 = null;
        closureCodingConvention55.defineDelegateProxyPrototypeProperties(jSTypeRegistry68, scope69, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList85, strMap91);
        java.util.Map<java.lang.String, java.lang.String> strMap93 = null;
        closureCodingConvention41.defineDelegateProxyPrototypeProperties(jSTypeRegistry53, scope54, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList85, strMap93);
        java.util.Map<java.lang.String, java.lang.String> strMap95 = null;
        closureCodingConvention24.defineDelegateProxyPrototypeProperties(jSTypeRegistry39, scope40, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList85, strMap95);
        java.util.Map<java.lang.String, java.lang.String> strMap97 = null;
        closureCodingConvention0.defineDelegateProxyPrototypeProperties(jSTypeRegistry22, scope23, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList85, strMap97);
        java.lang.String str99 = closureCodingConvention0.getExportSymbolFunction();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "goog.global" + "'", str7, "goog.global");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "goog.global" + "'", str16, "goog.global");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "goog.abstractMethod" + "'", str27, "goog.abstractMethod");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(objectTypeArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection67);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "goog.abstractMethod" + "'", str73, "goog.abstractMethod");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "goog.global" + "'", str74, "goog.global");
        org.junit.Assert.assertNull(delegateRelationship76);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(objectTypeArray84);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertEquals("'" + str99 + "' != '" + "goog.exportSymbol" + "'", str99, "goog.exportSymbol");
    }

    @Test
    public void test0830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0830");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        java.lang.String str3 = closureCodingConvention0.getAbstractMethodName();
        boolean boolean5 = closureCodingConvention0.isConstant("goog.abstractMethod");
        java.lang.String str6 = closureCodingConvention0.getDelegateSuperclassName();
        com.google.javascript.rhino.jstype.ObjectType objectType7 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType8 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType9 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType10 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType11 = null;
        closureCodingConvention0.applyDelegateRelationship(objectType7, objectType8, objectType9, functionType10, functionType11);
        com.google.javascript.rhino.Node node13 = null;
        com.google.javascript.jscomp.CodingConvention.DelegateRelationship delegateRelationship14 = closureCodingConvention0.getDelegateRelationship(node13);
        boolean boolean16 = closureCodingConvention0.isValidEnumKey("goog.exportProperty");
        boolean boolean18 = closureCodingConvention0.isConstantKey("goog.abstractMethod");
        com.google.javascript.rhino.jstype.FunctionType functionType19 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType20 = null;
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType21 = null;
        closureCodingConvention0.applySubclassRelationship(functionType19, functionType20, subclassType21);
        boolean boolean24 = closureCodingConvention0.isConstantKey("goog.abstractMethod");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "goog.abstractMethod" + "'", str3, "goog.abstractMethod");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(delegateRelationship14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test0831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0831");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        boolean boolean2 = closureCodingConvention0.isExported("goog.global");
        boolean boolean4 = closureCodingConvention0.isConstant("");
        com.google.javascript.rhino.Node node5 = null;
        com.google.javascript.jscomp.CodingConvention.DelegateRelationship delegateRelationship6 = closureCodingConvention0.getDelegateRelationship(node5);
        java.lang.String str7 = closureCodingConvention0.getDelegateSuperclassName();
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection8 = closureCodingConvention0.getAssertionFunctions();
        java.lang.String str9 = closureCodingConvention0.getDelegateSuperclassName();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(delegateRelationship6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection8);
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test0832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0832");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        boolean boolean4 = closureCodingConvention0.isSuperClassReference("hi!");
        com.google.javascript.rhino.Node node5 = null;
        boolean boolean6 = closureCodingConvention0.isOptionalParameter(node5);
        boolean boolean8 = closureCodingConvention0.isConstantKey("hi!");
        com.google.javascript.rhino.Node node9 = null;
        boolean boolean10 = closureCodingConvention0.isVarArgsParameter(node9);
        boolean boolean12 = closureCodingConvention0.isExported("");
        com.google.javascript.rhino.Node node13 = null;
        boolean boolean14 = closureCodingConvention0.isVarArgsParameter(node13);
        java.lang.String str15 = closureCodingConvention0.getExportSymbolFunction();
        java.lang.String str16 = closureCodingConvention0.getAbstractMethodName();
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry17 = null;
        com.google.javascript.jscomp.Scope scope18 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention19 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node20 = null;
        boolean boolean21 = closureCodingConvention19.isOptionalParameter(node20);
        java.lang.String str22 = closureCodingConvention19.getAbstractMethodName();
        java.lang.String str23 = closureCodingConvention19.getGlobalObject();
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection24 = closureCodingConvention19.getAssertionFunctions();
        boolean boolean26 = closureCodingConvention19.isConstant("goog.global");
        com.google.javascript.rhino.Node node27 = null;
        com.google.javascript.jscomp.CodingConvention.DelegateRelationship delegateRelationship28 = closureCodingConvention19.getDelegateRelationship(node27);
        com.google.javascript.rhino.jstype.ObjectType objectType29 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType30 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType31 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType32 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType33 = null;
        closureCodingConvention19.applyDelegateRelationship(objectType29, objectType30, objectType31, functionType32, functionType33);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry35 = null;
        com.google.javascript.jscomp.Scope scope36 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention37 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node38 = null;
        boolean boolean39 = closureCodingConvention37.isOptionalParameter(node38);
        boolean boolean41 = closureCodingConvention37.isSuperClassReference("hi!");
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry42 = null;
        com.google.javascript.jscomp.Scope scope43 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention44 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node45 = null;
        boolean boolean46 = closureCodingConvention44.isOptionalParameter(node45);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry47 = null;
        com.google.javascript.jscomp.Scope scope48 = null;
        com.google.javascript.rhino.jstype.ObjectType[] objectTypeArray49 = new com.google.javascript.rhino.jstype.ObjectType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType> objectTypeList50 = new java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList50, objectTypeArray49);
        java.util.Map<java.lang.String, java.lang.String> strMap52 = null;
        closureCodingConvention44.defineDelegateProxyPrototypeProperties(jSTypeRegistry47, scope48, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList50, strMap52);
        java.util.Map<java.lang.String, java.lang.String> strMap54 = null;
        closureCodingConvention37.defineDelegateProxyPrototypeProperties(jSTypeRegistry42, scope43, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList50, strMap54);
        java.util.Map<java.lang.String, java.lang.String> strMap56 = null;
        closureCodingConvention19.defineDelegateProxyPrototypeProperties(jSTypeRegistry35, scope36, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList50, strMap56);
        java.util.Map<java.lang.String, java.lang.String> strMap58 = null;
        closureCodingConvention0.defineDelegateProxyPrototypeProperties(jSTypeRegistry17, scope18, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList50, strMap58);
        java.lang.String str60 = closureCodingConvention0.getExportPropertyFunction();
        boolean boolean62 = closureCodingConvention0.isConstant("hi!");
        boolean boolean64 = closureCodingConvention0.isExported("hi!");
        java.lang.String str65 = closureCodingConvention0.getAbstractMethodName();
        com.google.javascript.rhino.Node node66 = null;
        java.util.Map<java.lang.String, java.lang.String> strMap67 = null;
        closureCodingConvention0.checkForCallingConventionDefiningCalls(node66, strMap67);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "goog.exportSymbol" + "'", str15, "goog.exportSymbol");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "goog.abstractMethod" + "'", str16, "goog.abstractMethod");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "goog.abstractMethod" + "'", str22, "goog.abstractMethod");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "goog.global" + "'", str23, "goog.global");
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(delegateRelationship28);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(objectTypeArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "goog.exportProperty" + "'", str60, "goog.exportProperty");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "goog.abstractMethod" + "'", str65, "goog.abstractMethod");
    }

    @Test
    public void test0833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0833");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        boolean boolean4 = closureCodingConvention0.isSuperClassReference("hi!");
        boolean boolean6 = closureCodingConvention0.isSuperClassReference("goog.global");
        boolean boolean8 = closureCodingConvention0.isConstant("goog.abstractMethod");
        boolean boolean10 = closureCodingConvention0.isValidEnumKey("hi!");
        boolean boolean12 = closureCodingConvention0.isConstantKey("hi!");
        boolean boolean14 = closureCodingConvention0.isConstantKey("goog.exportSymbol");
        com.google.javascript.rhino.Node node15 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.jscomp.CodingConvention.Bind bind16 = closureCodingConvention0.describeFunctionBind(node15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test0834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0834");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry3 = null;
        com.google.javascript.jscomp.Scope scope4 = null;
        com.google.javascript.rhino.jstype.ObjectType[] objectTypeArray5 = new com.google.javascript.rhino.jstype.ObjectType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType> objectTypeList6 = new java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList6, objectTypeArray5);
        java.util.Map<java.lang.String, java.lang.String> strMap8 = null;
        closureCodingConvention0.defineDelegateProxyPrototypeProperties(jSTypeRegistry3, scope4, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList6, strMap8);
        com.google.javascript.rhino.Node node10 = null;
        boolean boolean11 = closureCodingConvention0.isVarArgsParameter(node10);
        boolean boolean13 = closureCodingConvention0.isConstantKey("");
        java.lang.String str14 = closureCodingConvention0.getAbstractMethodName();
        com.google.javascript.rhino.jstype.FunctionType functionType15 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType16 = null;
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType17 = null;
        closureCodingConvention0.applySubclassRelationship(functionType15, functionType16, subclassType17);
        com.google.javascript.rhino.Node node19 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean20 = closureCodingConvention0.isPropertyTestFunction(node19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(objectTypeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "goog.abstractMethod" + "'", str14, "goog.abstractMethod");
    }

    @Test
    public void test0835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0835");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        boolean boolean4 = closureCodingConvention0.isSuperClassReference("hi!");
        boolean boolean6 = closureCodingConvention0.isSuperClassReference("goog.global");
        boolean boolean8 = closureCodingConvention0.isConstant("goog.abstractMethod");
        java.lang.String str9 = closureCodingConvention0.getExportPropertyFunction();
        boolean boolean12 = closureCodingConvention0.isExported("goog.global", false);
        java.lang.String str13 = closureCodingConvention0.getAbstractMethodName();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "goog.exportProperty" + "'", str9, "goog.exportProperty");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "goog.abstractMethod" + "'", str13, "goog.abstractMethod");
    }

    @Test
    public void test0836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0836");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        java.lang.String str3 = closureCodingConvention0.getAbstractMethodName();
        java.lang.String str4 = closureCodingConvention0.getGlobalObject();
        com.google.javascript.rhino.Node node5 = null;
        java.util.Map<java.lang.String, java.lang.String> strMap6 = null;
        closureCodingConvention0.checkForCallingConventionDefiningCalls(node5, strMap6);
        boolean boolean9 = closureCodingConvention0.isValidEnumKey("goog.abstractMethod");
        boolean boolean11 = closureCodingConvention0.isValidEnumKey("goog.exportSymbol");
        boolean boolean14 = closureCodingConvention0.isExported("goog.exportSymbol", false);
        boolean boolean17 = closureCodingConvention0.isExported("hi!", false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "goog.abstractMethod" + "'", str3, "goog.abstractMethod");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "goog.global" + "'", str4, "goog.global");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test0837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0837");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        boolean boolean4 = closureCodingConvention0.isSuperClassReference("hi!");
        com.google.javascript.rhino.Node node5 = null;
        boolean boolean6 = closureCodingConvention0.isOptionalParameter(node5);
        boolean boolean8 = closureCodingConvention0.isConstantKey("hi!");
        com.google.javascript.rhino.Node node9 = null;
        boolean boolean10 = closureCodingConvention0.isVarArgsParameter(node9);
        boolean boolean12 = closureCodingConvention0.isExported("");
        com.google.javascript.rhino.Node node13 = null;
        boolean boolean14 = closureCodingConvention0.isVarArgsParameter(node13);
        java.lang.String str15 = closureCodingConvention0.getExportSymbolFunction();
        java.lang.String str16 = closureCodingConvention0.getAbstractMethodName();
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry17 = null;
        com.google.javascript.jscomp.Scope scope18 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention19 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node20 = null;
        boolean boolean21 = closureCodingConvention19.isOptionalParameter(node20);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry22 = null;
        com.google.javascript.jscomp.Scope scope23 = null;
        com.google.javascript.rhino.jstype.ObjectType[] objectTypeArray24 = new com.google.javascript.rhino.jstype.ObjectType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType> objectTypeList25 = new java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList25, objectTypeArray24);
        java.util.Map<java.lang.String, java.lang.String> strMap27 = null;
        closureCodingConvention19.defineDelegateProxyPrototypeProperties(jSTypeRegistry22, scope23, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList25, strMap27);
        java.util.Map<java.lang.String, java.lang.String> strMap29 = null;
        closureCodingConvention0.defineDelegateProxyPrototypeProperties(jSTypeRegistry17, scope18, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList25, strMap29);
        com.google.javascript.rhino.Node node31 = null;
        java.util.Map<java.lang.String, java.lang.String> strMap32 = null;
        closureCodingConvention0.checkForCallingConventionDefiningCalls(node31, strMap32);
        com.google.javascript.rhino.jstype.ObjectType objectType34 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType35 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType36 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType37 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType38 = null;
        closureCodingConvention0.applyDelegateRelationship(objectType34, objectType35, objectType36, functionType37, functionType38);
        com.google.javascript.rhino.Node node40 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.String> strList41 = closureCodingConvention0.identifyTypeDeclarationCall(node40);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "goog.exportSymbol" + "'", str15, "goog.exportSymbol");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "goog.abstractMethod" + "'", str16, "goog.abstractMethod");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(objectTypeArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test0838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0838");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.jstype.ObjectType objectType1 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType2 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType3 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType4 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType5 = null;
        closureCodingConvention0.applyDelegateRelationship(objectType1, objectType2, objectType3, functionType4, functionType5);
        boolean boolean9 = closureCodingConvention0.isExported("goog.exportSymbol", true);
        boolean boolean11 = closureCodingConvention0.isConstantKey("");
        java.lang.Class<?> wildcardClass12 = closureCodingConvention0.getClass();
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test0839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0839");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        java.lang.String str3 = closureCodingConvention0.getAbstractMethodName();
        java.lang.String str4 = closureCodingConvention0.getGlobalObject();
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection5 = closureCodingConvention0.getAssertionFunctions();
        boolean boolean7 = closureCodingConvention0.isConstant("goog.global");
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection8 = closureCodingConvention0.getAssertionFunctions();
        boolean boolean10 = closureCodingConvention0.isValidEnumKey("goog.exportProperty");
        boolean boolean12 = closureCodingConvention0.isPrivate("");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "goog.abstractMethod" + "'", str3, "goog.abstractMethod");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "goog.global" + "'", str4, "goog.global");
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test0840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0840");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        boolean boolean4 = closureCodingConvention0.isConstant("hi!");
        boolean boolean6 = closureCodingConvention0.isPrivate("hi!");
        java.lang.String str7 = closureCodingConvention0.getExportPropertyFunction();
        boolean boolean9 = closureCodingConvention0.isValidEnumKey("hi!");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "goog.exportProperty" + "'", str7, "goog.exportProperty");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test0841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0841");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry3 = null;
        com.google.javascript.jscomp.Scope scope4 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention5 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node6 = null;
        boolean boolean7 = closureCodingConvention5.isOptionalParameter(node6);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry8 = null;
        com.google.javascript.jscomp.Scope scope9 = null;
        com.google.javascript.rhino.jstype.ObjectType[] objectTypeArray10 = new com.google.javascript.rhino.jstype.ObjectType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType> objectTypeList11 = new java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList11, objectTypeArray10);
        java.util.Map<java.lang.String, java.lang.String> strMap13 = null;
        closureCodingConvention5.defineDelegateProxyPrototypeProperties(jSTypeRegistry8, scope9, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList11, strMap13);
        java.util.Map<java.lang.String, java.lang.String> strMap15 = null;
        closureCodingConvention0.defineDelegateProxyPrototypeProperties(jSTypeRegistry3, scope4, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList11, strMap15);
        com.google.javascript.rhino.Node node17 = null;
        com.google.javascript.jscomp.CodingConvention.DelegateRelationship delegateRelationship18 = closureCodingConvention0.getDelegateRelationship(node17);
        com.google.javascript.rhino.Node node19 = null;
        com.google.javascript.jscomp.CodingConvention.DelegateRelationship delegateRelationship20 = closureCodingConvention0.getDelegateRelationship(node19);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(objectTypeArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(delegateRelationship18);
        org.junit.Assert.assertNull(delegateRelationship20);
    }

    @Test
    public void test0842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0842");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        java.lang.String str3 = closureCodingConvention0.getAbstractMethodName();
        boolean boolean5 = closureCodingConvention0.isConstant("goog.abstractMethod");
        boolean boolean7 = closureCodingConvention0.isValidEnumKey("hi!");
        com.google.javascript.rhino.Node node8 = null;
        com.google.javascript.jscomp.CodingConvention.DelegateRelationship delegateRelationship9 = closureCodingConvention0.getDelegateRelationship(node8);
        com.google.javascript.rhino.Node node10 = null;
        java.util.Map<java.lang.String, java.lang.String> strMap11 = null;
        closureCodingConvention0.checkForCallingConventionDefiningCalls(node10, strMap11);
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection13 = closureCodingConvention0.getAssertionFunctions();
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry14 = null;
        com.google.javascript.jscomp.Scope scope15 = null;
        com.google.javascript.rhino.jstype.ObjectType[] objectTypeArray16 = new com.google.javascript.rhino.jstype.ObjectType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType> objectTypeList17 = new java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList17, objectTypeArray16);
        java.util.Map<java.lang.String, java.lang.String> strMap19 = null;
        closureCodingConvention0.defineDelegateProxyPrototypeProperties(jSTypeRegistry14, scope15, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList17, strMap19);
        java.lang.String str21 = closureCodingConvention0.getExportPropertyFunction();
        boolean boolean23 = closureCodingConvention0.isValidEnumKey("goog.exportSymbol");
        java.lang.String str24 = closureCodingConvention0.getDelegateSuperclassName();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "goog.abstractMethod" + "'", str3, "goog.abstractMethod");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNull(delegateRelationship9);
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection13);
        org.junit.Assert.assertNotNull(objectTypeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "goog.exportProperty" + "'", str21, "goog.exportProperty");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNull(str24);
    }

    @Test
    public void test0843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0843");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry3 = null;
        com.google.javascript.jscomp.Scope scope4 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention5 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node6 = null;
        boolean boolean7 = closureCodingConvention5.isOptionalParameter(node6);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry8 = null;
        com.google.javascript.jscomp.Scope scope9 = null;
        com.google.javascript.rhino.jstype.ObjectType[] objectTypeArray10 = new com.google.javascript.rhino.jstype.ObjectType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType> objectTypeList11 = new java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList11, objectTypeArray10);
        java.util.Map<java.lang.String, java.lang.String> strMap13 = null;
        closureCodingConvention5.defineDelegateProxyPrototypeProperties(jSTypeRegistry8, scope9, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList11, strMap13);
        java.util.Map<java.lang.String, java.lang.String> strMap15 = null;
        closureCodingConvention0.defineDelegateProxyPrototypeProperties(jSTypeRegistry3, scope4, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList11, strMap15);
        boolean boolean18 = closureCodingConvention0.isPrivate("");
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = null;
        com.google.javascript.jscomp.Scope scope20 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention21 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node22 = null;
        boolean boolean23 = closureCodingConvention21.isOptionalParameter(node22);
        java.lang.String str24 = closureCodingConvention21.getAbstractMethodName();
        java.lang.String str25 = closureCodingConvention21.getGlobalObject();
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection26 = closureCodingConvention21.getAssertionFunctions();
        boolean boolean28 = closureCodingConvention21.isConstant("goog.global");
        com.google.javascript.rhino.Node node29 = null;
        com.google.javascript.jscomp.CodingConvention.DelegateRelationship delegateRelationship30 = closureCodingConvention21.getDelegateRelationship(node29);
        com.google.javascript.rhino.jstype.ObjectType objectType31 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType32 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType33 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType34 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType35 = null;
        closureCodingConvention21.applyDelegateRelationship(objectType31, objectType32, objectType33, functionType34, functionType35);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry37 = null;
        com.google.javascript.jscomp.Scope scope38 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention39 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node40 = null;
        boolean boolean41 = closureCodingConvention39.isOptionalParameter(node40);
        boolean boolean43 = closureCodingConvention39.isSuperClassReference("hi!");
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry44 = null;
        com.google.javascript.jscomp.Scope scope45 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention46 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node47 = null;
        boolean boolean48 = closureCodingConvention46.isOptionalParameter(node47);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry49 = null;
        com.google.javascript.jscomp.Scope scope50 = null;
        com.google.javascript.rhino.jstype.ObjectType[] objectTypeArray51 = new com.google.javascript.rhino.jstype.ObjectType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType> objectTypeList52 = new java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList52, objectTypeArray51);
        java.util.Map<java.lang.String, java.lang.String> strMap54 = null;
        closureCodingConvention46.defineDelegateProxyPrototypeProperties(jSTypeRegistry49, scope50, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList52, strMap54);
        java.util.Map<java.lang.String, java.lang.String> strMap56 = null;
        closureCodingConvention39.defineDelegateProxyPrototypeProperties(jSTypeRegistry44, scope45, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList52, strMap56);
        java.util.Map<java.lang.String, java.lang.String> strMap58 = null;
        closureCodingConvention21.defineDelegateProxyPrototypeProperties(jSTypeRegistry37, scope38, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList52, strMap58);
        java.util.Map<java.lang.String, java.lang.String> strMap60 = null;
        closureCodingConvention0.defineDelegateProxyPrototypeProperties(jSTypeRegistry19, scope20, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList52, strMap60);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(objectTypeArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "goog.abstractMethod" + "'", str24, "goog.abstractMethod");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "goog.global" + "'", str25, "goog.global");
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(delegateRelationship30);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(objectTypeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test0844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0844");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        boolean boolean4 = closureCodingConvention0.isSuperClassReference("hi!");
        com.google.javascript.rhino.Node node5 = null;
        boolean boolean6 = closureCodingConvention0.isOptionalParameter(node5);
        boolean boolean8 = closureCodingConvention0.isExported("hi!");
        java.lang.String str9 = closureCodingConvention0.getExportPropertyFunction();
        java.lang.String str10 = closureCodingConvention0.getDelegateSuperclassName();
        java.lang.String str11 = closureCodingConvention0.getGlobalObject();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "goog.exportProperty" + "'", str9, "goog.exportProperty");
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "goog.global" + "'", str11, "goog.global");
    }

    @Test
    public void test0845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0845");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        boolean boolean2 = closureCodingConvention0.isExported("goog.global");
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection3 = closureCodingConvention0.getAssertionFunctions();
        java.lang.String str4 = closureCodingConvention0.getGlobalObject();
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection5 = closureCodingConvention0.getAssertionFunctions();
        boolean boolean7 = closureCodingConvention0.isConstantKey("goog.exportSymbol");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "goog.global" + "'", str4, "goog.global");
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test0846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0846");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        java.lang.String str3 = closureCodingConvention0.getAbstractMethodName();
        java.lang.String str4 = closureCodingConvention0.getGlobalObject();
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection5 = closureCodingConvention0.getAssertionFunctions();
        boolean boolean7 = closureCodingConvention0.isConstant("goog.global");
        com.google.javascript.rhino.Node node8 = null;
        com.google.javascript.jscomp.CodingConvention.DelegateRelationship delegateRelationship9 = closureCodingConvention0.getDelegateRelationship(node8);
        com.google.javascript.rhino.jstype.FunctionType functionType10 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType11 = null;
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType12 = null;
        closureCodingConvention0.applySubclassRelationship(functionType10, functionType11, subclassType12);
        java.lang.String str14 = closureCodingConvention0.getExportSymbolFunction();
        boolean boolean16 = closureCodingConvention0.isExported("");
        java.lang.String str17 = closureCodingConvention0.getDelegateSuperclassName();
        com.google.javascript.rhino.Node node18 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.String> strList19 = closureCodingConvention0.identifyTypeDeclarationCall(node18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "goog.abstractMethod" + "'", str3, "goog.abstractMethod");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "goog.global" + "'", str4, "goog.global");
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(delegateRelationship9);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "goog.exportSymbol" + "'", str14, "goog.exportSymbol");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(str17);
    }

    @Test
    public void test0847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0847");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        java.lang.String str3 = closureCodingConvention0.getAbstractMethodName();
        boolean boolean5 = closureCodingConvention0.isConstant("goog.abstractMethod");
        com.google.javascript.rhino.Node node6 = null;
        com.google.javascript.jscomp.CodingConvention.DelegateRelationship delegateRelationship7 = closureCodingConvention0.getDelegateRelationship(node6);
        java.lang.String str8 = closureCodingConvention0.getAbstractMethodName();
        java.lang.String str9 = closureCodingConvention0.getAbstractMethodName();
        java.lang.Class<?> wildcardClass10 = closureCodingConvention0.getClass();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "goog.abstractMethod" + "'", str3, "goog.abstractMethod");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(delegateRelationship7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "goog.abstractMethod" + "'", str8, "goog.abstractMethod");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "goog.abstractMethod" + "'", str9, "goog.abstractMethod");
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test0848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0848");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        boolean boolean4 = closureCodingConvention0.isSuperClassReference("hi!");
        com.google.javascript.rhino.Node node5 = null;
        boolean boolean6 = closureCodingConvention0.isOptionalParameter(node5);
        java.lang.String str7 = closureCodingConvention0.getExportPropertyFunction();
        java.lang.String str8 = closureCodingConvention0.getGlobalObject();
        boolean boolean10 = closureCodingConvention0.isValidEnumKey("");
        boolean boolean12 = closureCodingConvention0.isPrivate("goog.abstractMethod");
        boolean boolean14 = closureCodingConvention0.isExported("hi!");
        boolean boolean16 = closureCodingConvention0.isValidEnumKey("goog.exportSymbol");
        boolean boolean18 = closureCodingConvention0.isConstantKey("goog.exportProperty");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "goog.exportProperty" + "'", str7, "goog.exportProperty");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "goog.global" + "'", str8, "goog.global");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test0849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0849");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        boolean boolean4 = closureCodingConvention0.isSuperClassReference("hi!");
        com.google.javascript.rhino.Node node5 = null;
        boolean boolean6 = closureCodingConvention0.isOptionalParameter(node5);
        java.lang.String str7 = closureCodingConvention0.getExportPropertyFunction();
        java.lang.String str8 = closureCodingConvention0.getGlobalObject();
        boolean boolean10 = closureCodingConvention0.isValidEnumKey("");
        java.lang.String str11 = closureCodingConvention0.getDelegateSuperclassName();
        boolean boolean13 = closureCodingConvention0.isPrivate("hi!");
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection14 = closureCodingConvention0.getAssertionFunctions();
        com.google.javascript.rhino.jstype.ObjectType objectType15 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType16 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType17 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType18 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType19 = null;
        closureCodingConvention0.applyDelegateRelationship(objectType15, objectType16, objectType17, functionType18, functionType19);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "goog.exportProperty" + "'", str7, "goog.exportProperty");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "goog.global" + "'", str8, "goog.global");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection14);
    }

    @Test
    public void test0850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0850");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        java.lang.String str3 = closureCodingConvention0.getAbstractMethodName();
        java.lang.String str4 = closureCodingConvention0.getGlobalObject();
        com.google.javascript.rhino.Node node5 = null;
        com.google.javascript.jscomp.CodingConvention.DelegateRelationship delegateRelationship6 = closureCodingConvention0.getDelegateRelationship(node5);
        java.lang.String str7 = closureCodingConvention0.getDelegateSuperclassName();
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection8 = closureCodingConvention0.getAssertionFunctions();
        com.google.javascript.rhino.Node node9 = null;
        boolean boolean10 = closureCodingConvention0.isVarArgsParameter(node9);
        com.google.javascript.rhino.jstype.FunctionType functionType11 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType12 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType13 = null;
        // The following exception was thrown during execution in test generation
        try {
            closureCodingConvention0.applySingletonGetter(functionType11, functionType12, objectType13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "goog.abstractMethod" + "'", str3, "goog.abstractMethod");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "goog.global" + "'", str4, "goog.global");
        org.junit.Assert.assertNull(delegateRelationship6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test0851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0851");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        java.lang.String str3 = closureCodingConvention0.getAbstractMethodName();
        java.lang.String str4 = closureCodingConvention0.getGlobalObject();
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection5 = closureCodingConvention0.getAssertionFunctions();
        boolean boolean7 = closureCodingConvention0.isConstant("goog.global");
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection8 = closureCodingConvention0.getAssertionFunctions();
        com.google.javascript.rhino.Node node9 = null;
        java.util.Map<java.lang.String, java.lang.String> strMap10 = null;
        closureCodingConvention0.checkForCallingConventionDefiningCalls(node9, strMap10);
        com.google.javascript.rhino.Node node12 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.jscomp.CodingConvention.Bind bind13 = closureCodingConvention0.describeFunctionBind(node12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "goog.abstractMethod" + "'", str3, "goog.abstractMethod");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "goog.global" + "'", str4, "goog.global");
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection8);
    }

    @Test
    public void test0852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0852");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        boolean boolean4 = closureCodingConvention0.isSuperClassReference("hi!");
        com.google.javascript.rhino.Node node5 = null;
        boolean boolean6 = closureCodingConvention0.isOptionalParameter(node5);
        boolean boolean8 = closureCodingConvention0.isConstantKey("hi!");
        com.google.javascript.rhino.Node node9 = null;
        boolean boolean10 = closureCodingConvention0.isVarArgsParameter(node9);
        boolean boolean12 = closureCodingConvention0.isExported("");
        com.google.javascript.rhino.Node node13 = null;
        boolean boolean14 = closureCodingConvention0.isVarArgsParameter(node13);
        boolean boolean17 = closureCodingConvention0.isExported("hi!", true);
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection18 = closureCodingConvention0.getAssertionFunctions();
        com.google.javascript.rhino.Node node19 = null;
        com.google.javascript.rhino.Node node20 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str21 = closureCodingConvention0.extractClassNameIfProvide(node19, node20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection18);
    }

    @Test
    public void test0853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0853");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        boolean boolean4 = closureCodingConvention0.isSuperClassReference("hi!");
        boolean boolean6 = closureCodingConvention0.isSuperClassReference("goog.global");
        boolean boolean8 = closureCodingConvention0.isConstant("goog.abstractMethod");
        java.lang.String str9 = closureCodingConvention0.getExportPropertyFunction();
        boolean boolean11 = closureCodingConvention0.isConstant("goog.exportProperty");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "goog.exportProperty" + "'", str9, "goog.exportProperty");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test0854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0854");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        boolean boolean4 = closureCodingConvention0.isSuperClassReference("hi!");
        com.google.javascript.rhino.Node node5 = null;
        boolean boolean6 = closureCodingConvention0.isOptionalParameter(node5);
        boolean boolean8 = closureCodingConvention0.isConstantKey("hi!");
        com.google.javascript.rhino.Node node9 = null;
        boolean boolean10 = closureCodingConvention0.isVarArgsParameter(node9);
        boolean boolean12 = closureCodingConvention0.isExported("");
        com.google.javascript.rhino.Node node13 = null;
        boolean boolean14 = closureCodingConvention0.isVarArgsParameter(node13);
        java.lang.String str15 = closureCodingConvention0.getExportSymbolFunction();
        java.lang.String str16 = closureCodingConvention0.getAbstractMethodName();
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry17 = null;
        com.google.javascript.jscomp.Scope scope18 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention19 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node20 = null;
        boolean boolean21 = closureCodingConvention19.isOptionalParameter(node20);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry22 = null;
        com.google.javascript.jscomp.Scope scope23 = null;
        com.google.javascript.rhino.jstype.ObjectType[] objectTypeArray24 = new com.google.javascript.rhino.jstype.ObjectType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType> objectTypeList25 = new java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList25, objectTypeArray24);
        java.util.Map<java.lang.String, java.lang.String> strMap27 = null;
        closureCodingConvention19.defineDelegateProxyPrototypeProperties(jSTypeRegistry22, scope23, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList25, strMap27);
        java.util.Map<java.lang.String, java.lang.String> strMap29 = null;
        closureCodingConvention0.defineDelegateProxyPrototypeProperties(jSTypeRegistry17, scope18, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList25, strMap29);
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection31 = closureCodingConvention0.getAssertionFunctions();
        boolean boolean33 = closureCodingConvention0.isConstant("");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "goog.exportSymbol" + "'", str15, "goog.exportSymbol");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "goog.abstractMethod" + "'", str16, "goog.abstractMethod");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(objectTypeArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test0855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0855");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        java.lang.String str3 = closureCodingConvention0.getAbstractMethodName();
        java.lang.String str4 = closureCodingConvention0.getGlobalObject();
        boolean boolean6 = closureCodingConvention0.isExported("goog.global");
        boolean boolean8 = closureCodingConvention0.isConstant("goog.abstractMethod");
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry9 = null;
        com.google.javascript.jscomp.Scope scope10 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention11 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node12 = null;
        boolean boolean13 = closureCodingConvention11.isOptionalParameter(node12);
        java.lang.String str14 = closureCodingConvention11.getAbstractMethodName();
        java.lang.String str15 = closureCodingConvention11.getGlobalObject();
        com.google.javascript.rhino.Node node16 = null;
        com.google.javascript.jscomp.CodingConvention.DelegateRelationship delegateRelationship17 = closureCodingConvention11.getDelegateRelationship(node16);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry18 = null;
        com.google.javascript.jscomp.Scope scope19 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention20 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node21 = null;
        boolean boolean22 = closureCodingConvention20.isOptionalParameter(node21);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry23 = null;
        com.google.javascript.jscomp.Scope scope24 = null;
        com.google.javascript.rhino.jstype.ObjectType[] objectTypeArray25 = new com.google.javascript.rhino.jstype.ObjectType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType> objectTypeList26 = new java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList26, objectTypeArray25);
        java.util.Map<java.lang.String, java.lang.String> strMap28 = null;
        closureCodingConvention20.defineDelegateProxyPrototypeProperties(jSTypeRegistry23, scope24, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList26, strMap28);
        java.util.Map<java.lang.String, java.lang.String> strMap30 = null;
        closureCodingConvention11.defineDelegateProxyPrototypeProperties(jSTypeRegistry18, scope19, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList26, strMap30);
        java.util.Map<java.lang.String, java.lang.String> strMap32 = null;
        closureCodingConvention0.defineDelegateProxyPrototypeProperties(jSTypeRegistry9, scope10, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList26, strMap32);
        boolean boolean35 = closureCodingConvention0.isConstant("goog.exportProperty");
        com.google.javascript.rhino.Node node36 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.jscomp.CodingConvention.Bind bind37 = closureCodingConvention0.describeFunctionBind(node36);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "goog.abstractMethod" + "'", str3, "goog.abstractMethod");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "goog.global" + "'", str4, "goog.global");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "goog.abstractMethod" + "'", str14, "goog.abstractMethod");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "goog.global" + "'", str15, "goog.global");
        org.junit.Assert.assertNull(delegateRelationship17);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(objectTypeArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test0856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0856");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry3 = null;
        com.google.javascript.jscomp.Scope scope4 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention5 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node6 = null;
        boolean boolean7 = closureCodingConvention5.isOptionalParameter(node6);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry8 = null;
        com.google.javascript.jscomp.Scope scope9 = null;
        com.google.javascript.rhino.jstype.ObjectType[] objectTypeArray10 = new com.google.javascript.rhino.jstype.ObjectType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType> objectTypeList11 = new java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList11, objectTypeArray10);
        java.util.Map<java.lang.String, java.lang.String> strMap13 = null;
        closureCodingConvention5.defineDelegateProxyPrototypeProperties(jSTypeRegistry8, scope9, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList11, strMap13);
        java.util.Map<java.lang.String, java.lang.String> strMap15 = null;
        closureCodingConvention0.defineDelegateProxyPrototypeProperties(jSTypeRegistry3, scope4, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList11, strMap15);
        com.google.javascript.rhino.Node node17 = null;
        com.google.javascript.jscomp.CodingConvention.DelegateRelationship delegateRelationship18 = closureCodingConvention0.getDelegateRelationship(node17);
        boolean boolean21 = closureCodingConvention0.isExported("goog.exportProperty", false);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry22 = null;
        com.google.javascript.jscomp.Scope scope23 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention24 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node25 = null;
        boolean boolean26 = closureCodingConvention24.isOptionalParameter(node25);
        java.lang.String str27 = closureCodingConvention24.getAbstractMethodName();
        boolean boolean29 = closureCodingConvention24.isConstant("goog.abstractMethod");
        boolean boolean31 = closureCodingConvention24.isValidEnumKey("hi!");
        com.google.javascript.rhino.Node node32 = null;
        com.google.javascript.jscomp.CodingConvention.DelegateRelationship delegateRelationship33 = closureCodingConvention24.getDelegateRelationship(node32);
        com.google.javascript.rhino.Node node34 = null;
        java.util.Map<java.lang.String, java.lang.String> strMap35 = null;
        closureCodingConvention24.checkForCallingConventionDefiningCalls(node34, strMap35);
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection37 = closureCodingConvention24.getAssertionFunctions();
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry38 = null;
        com.google.javascript.jscomp.Scope scope39 = null;
        com.google.javascript.rhino.jstype.ObjectType[] objectTypeArray40 = new com.google.javascript.rhino.jstype.ObjectType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType> objectTypeList41 = new java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList41, objectTypeArray40);
        java.util.Map<java.lang.String, java.lang.String> strMap43 = null;
        closureCodingConvention24.defineDelegateProxyPrototypeProperties(jSTypeRegistry38, scope39, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList41, strMap43);
        java.util.Map<java.lang.String, java.lang.String> strMap45 = null;
        closureCodingConvention0.defineDelegateProxyPrototypeProperties(jSTypeRegistry22, scope23, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList41, strMap45);
        com.google.javascript.rhino.Node node47 = null;
        com.google.javascript.rhino.Node node48 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str49 = closureCodingConvention0.extractClassNameIfRequire(node47, node48);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(objectTypeArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(delegateRelationship18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "goog.abstractMethod" + "'", str27, "goog.abstractMethod");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNull(delegateRelationship33);
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection37);
        org.junit.Assert.assertNotNull(objectTypeArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test0857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0857");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        boolean boolean4 = closureCodingConvention0.isSuperClassReference("hi!");
        com.google.javascript.rhino.Node node5 = null;
        boolean boolean6 = closureCodingConvention0.isOptionalParameter(node5);
        boolean boolean8 = closureCodingConvention0.isConstantKey("hi!");
        com.google.javascript.rhino.Node node9 = null;
        boolean boolean10 = closureCodingConvention0.isVarArgsParameter(node9);
        com.google.javascript.rhino.Node node11 = null;
        boolean boolean12 = closureCodingConvention0.isVarArgsParameter(node11);
        boolean boolean14 = closureCodingConvention0.isValidEnumKey("goog.abstractMethod");
        java.lang.String str15 = closureCodingConvention0.getDelegateSuperclassName();
        boolean boolean17 = closureCodingConvention0.isExported("");
        boolean boolean19 = closureCodingConvention0.isConstantKey("goog.exportProperty");
        java.lang.String str20 = closureCodingConvention0.getExportPropertyFunction();
        boolean boolean22 = closureCodingConvention0.isExported("hi!");
        boolean boolean24 = closureCodingConvention0.isConstantKey("goog.global");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "goog.exportProperty" + "'", str20, "goog.exportProperty");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test0858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0858");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        boolean boolean4 = closureCodingConvention0.isSuperClassReference("hi!");
        com.google.javascript.rhino.Node node5 = null;
        boolean boolean6 = closureCodingConvention0.isOptionalParameter(node5);
        boolean boolean8 = closureCodingConvention0.isConstantKey("hi!");
        com.google.javascript.rhino.Node node9 = null;
        boolean boolean10 = closureCodingConvention0.isVarArgsParameter(node9);
        boolean boolean12 = closureCodingConvention0.isExported("");
        java.lang.String str13 = closureCodingConvention0.getDelegateSuperclassName();
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry14 = null;
        com.google.javascript.jscomp.Scope scope15 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention16 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node17 = null;
        boolean boolean18 = closureCodingConvention16.isOptionalParameter(node17);
        java.lang.String str19 = closureCodingConvention16.getAbstractMethodName();
        java.lang.String str20 = closureCodingConvention16.getGlobalObject();
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection21 = closureCodingConvention16.getAssertionFunctions();
        boolean boolean23 = closureCodingConvention16.isConstant("goog.global");
        com.google.javascript.rhino.Node node24 = null;
        com.google.javascript.jscomp.CodingConvention.DelegateRelationship delegateRelationship25 = closureCodingConvention16.getDelegateRelationship(node24);
        com.google.javascript.rhino.jstype.ObjectType objectType26 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType27 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType28 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType29 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType30 = null;
        closureCodingConvention16.applyDelegateRelationship(objectType26, objectType27, objectType28, functionType29, functionType30);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry32 = null;
        com.google.javascript.jscomp.Scope scope33 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention34 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node35 = null;
        boolean boolean36 = closureCodingConvention34.isOptionalParameter(node35);
        boolean boolean38 = closureCodingConvention34.isSuperClassReference("hi!");
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry39 = null;
        com.google.javascript.jscomp.Scope scope40 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention41 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node42 = null;
        boolean boolean43 = closureCodingConvention41.isOptionalParameter(node42);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry44 = null;
        com.google.javascript.jscomp.Scope scope45 = null;
        com.google.javascript.rhino.jstype.ObjectType[] objectTypeArray46 = new com.google.javascript.rhino.jstype.ObjectType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType> objectTypeList47 = new java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList47, objectTypeArray46);
        java.util.Map<java.lang.String, java.lang.String> strMap49 = null;
        closureCodingConvention41.defineDelegateProxyPrototypeProperties(jSTypeRegistry44, scope45, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList47, strMap49);
        java.util.Map<java.lang.String, java.lang.String> strMap51 = null;
        closureCodingConvention34.defineDelegateProxyPrototypeProperties(jSTypeRegistry39, scope40, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList47, strMap51);
        java.util.Map<java.lang.String, java.lang.String> strMap53 = null;
        closureCodingConvention16.defineDelegateProxyPrototypeProperties(jSTypeRegistry32, scope33, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList47, strMap53);
        java.util.Map<java.lang.String, java.lang.String> strMap55 = null;
        closureCodingConvention0.defineDelegateProxyPrototypeProperties(jSTypeRegistry14, scope15, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList47, strMap55);
        boolean boolean58 = closureCodingConvention0.isPrivate("goog.global");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "goog.abstractMethod" + "'", str19, "goog.abstractMethod");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "goog.global" + "'", str20, "goog.global");
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(delegateRelationship25);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(objectTypeArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test0859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0859");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        boolean boolean2 = closureCodingConvention0.isExported("goog.global");
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection3 = closureCodingConvention0.getAssertionFunctions();
        java.lang.String str4 = closureCodingConvention0.getGlobalObject();
        boolean boolean7 = closureCodingConvention0.isExported("goog.abstractMethod", true);
        com.google.javascript.rhino.jstype.FunctionType functionType8 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType9 = null;
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType10 = null;
        closureCodingConvention0.applySubclassRelationship(functionType8, functionType9, subclassType10);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry12 = null;
        com.google.javascript.jscomp.Scope scope13 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention14 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node15 = null;
        boolean boolean16 = closureCodingConvention14.isOptionalParameter(node15);
        boolean boolean18 = closureCodingConvention14.isSuperClassReference("hi!");
        com.google.javascript.rhino.Node node19 = null;
        boolean boolean20 = closureCodingConvention14.isOptionalParameter(node19);
        boolean boolean22 = closureCodingConvention14.isConstantKey("hi!");
        com.google.javascript.rhino.Node node23 = null;
        boolean boolean24 = closureCodingConvention14.isVarArgsParameter(node23);
        boolean boolean26 = closureCodingConvention14.isExported("");
        com.google.javascript.rhino.jstype.ObjectType objectType27 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType28 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType29 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType30 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType31 = null;
        closureCodingConvention14.applyDelegateRelationship(objectType27, objectType28, objectType29, functionType30, functionType31);
        boolean boolean35 = closureCodingConvention14.isExported("goog.global", true);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry36 = null;
        com.google.javascript.jscomp.Scope scope37 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention38 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node39 = null;
        boolean boolean40 = closureCodingConvention38.isOptionalParameter(node39);
        java.lang.String str41 = closureCodingConvention38.getAbstractMethodName();
        java.lang.String str42 = closureCodingConvention38.getGlobalObject();
        boolean boolean44 = closureCodingConvention38.isExported("goog.global");
        boolean boolean46 = closureCodingConvention38.isConstant("goog.abstractMethod");
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry47 = null;
        com.google.javascript.jscomp.Scope scope48 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention49 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node50 = null;
        boolean boolean51 = closureCodingConvention49.isOptionalParameter(node50);
        java.lang.String str52 = closureCodingConvention49.getAbstractMethodName();
        java.lang.String str53 = closureCodingConvention49.getGlobalObject();
        com.google.javascript.rhino.Node node54 = null;
        com.google.javascript.jscomp.CodingConvention.DelegateRelationship delegateRelationship55 = closureCodingConvention49.getDelegateRelationship(node54);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry56 = null;
        com.google.javascript.jscomp.Scope scope57 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention58 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node59 = null;
        boolean boolean60 = closureCodingConvention58.isOptionalParameter(node59);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry61 = null;
        com.google.javascript.jscomp.Scope scope62 = null;
        com.google.javascript.rhino.jstype.ObjectType[] objectTypeArray63 = new com.google.javascript.rhino.jstype.ObjectType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType> objectTypeList64 = new java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList64, objectTypeArray63);
        java.util.Map<java.lang.String, java.lang.String> strMap66 = null;
        closureCodingConvention58.defineDelegateProxyPrototypeProperties(jSTypeRegistry61, scope62, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList64, strMap66);
        java.util.Map<java.lang.String, java.lang.String> strMap68 = null;
        closureCodingConvention49.defineDelegateProxyPrototypeProperties(jSTypeRegistry56, scope57, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList64, strMap68);
        java.util.Map<java.lang.String, java.lang.String> strMap70 = null;
        closureCodingConvention38.defineDelegateProxyPrototypeProperties(jSTypeRegistry47, scope48, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList64, strMap70);
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection72 = closureCodingConvention38.getAssertionFunctions();
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry73 = null;
        com.google.javascript.jscomp.Scope scope74 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention75 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node76 = null;
        boolean boolean77 = closureCodingConvention75.isOptionalParameter(node76);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry78 = null;
        com.google.javascript.jscomp.Scope scope79 = null;
        com.google.javascript.rhino.jstype.ObjectType[] objectTypeArray80 = new com.google.javascript.rhino.jstype.ObjectType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType> objectTypeList81 = new java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType>();
        boolean boolean82 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList81, objectTypeArray80);
        java.util.Map<java.lang.String, java.lang.String> strMap83 = null;
        closureCodingConvention75.defineDelegateProxyPrototypeProperties(jSTypeRegistry78, scope79, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList81, strMap83);
        java.util.Map<java.lang.String, java.lang.String> strMap85 = null;
        closureCodingConvention38.defineDelegateProxyPrototypeProperties(jSTypeRegistry73, scope74, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList81, strMap85);
        java.util.Map<java.lang.String, java.lang.String> strMap87 = null;
        closureCodingConvention14.defineDelegateProxyPrototypeProperties(jSTypeRegistry36, scope37, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList81, strMap87);
        java.util.Map<java.lang.String, java.lang.String> strMap89 = null;
        closureCodingConvention0.defineDelegateProxyPrototypeProperties(jSTypeRegistry12, scope13, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList81, strMap89);
        com.google.javascript.rhino.Node node91 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship92 = closureCodingConvention0.getClassesDefinedByCall(node91);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "goog.global" + "'", str4, "goog.global");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "goog.abstractMethod" + "'", str41, "goog.abstractMethod");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "goog.global" + "'", str42, "goog.global");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "goog.abstractMethod" + "'", str52, "goog.abstractMethod");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "goog.global" + "'", str53, "goog.global");
        org.junit.Assert.assertNull(delegateRelationship55);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(objectTypeArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection72);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(objectTypeArray80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
    }

    @Test
    public void test0860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0860");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry3 = null;
        com.google.javascript.jscomp.Scope scope4 = null;
        com.google.javascript.rhino.jstype.ObjectType[] objectTypeArray5 = new com.google.javascript.rhino.jstype.ObjectType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType> objectTypeList6 = new java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList6, objectTypeArray5);
        java.util.Map<java.lang.String, java.lang.String> strMap8 = null;
        closureCodingConvention0.defineDelegateProxyPrototypeProperties(jSTypeRegistry3, scope4, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList6, strMap8);
        com.google.javascript.rhino.Node node10 = null;
        boolean boolean11 = closureCodingConvention0.isVarArgsParameter(node10);
        boolean boolean13 = closureCodingConvention0.isConstantKey("");
        java.lang.String str14 = closureCodingConvention0.getExportPropertyFunction();
        com.google.javascript.rhino.Node node15 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean16 = closureCodingConvention0.isPropertyTestFunction(node15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(objectTypeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "goog.exportProperty" + "'", str14, "goog.exportProperty");
    }

    @Test
    public void test0861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0861");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        java.lang.String str3 = closureCodingConvention0.getAbstractMethodName();
        java.lang.String str4 = closureCodingConvention0.getGlobalObject();
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection5 = closureCodingConvention0.getAssertionFunctions();
        boolean boolean7 = closureCodingConvention0.isConstant("goog.global");
        com.google.javascript.rhino.Node node8 = null;
        com.google.javascript.jscomp.CodingConvention.DelegateRelationship delegateRelationship9 = closureCodingConvention0.getDelegateRelationship(node8);
        com.google.javascript.rhino.jstype.ObjectType objectType10 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType11 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType12 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType13 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType14 = null;
        closureCodingConvention0.applyDelegateRelationship(objectType10, objectType11, objectType12, functionType13, functionType14);
        boolean boolean17 = closureCodingConvention0.isConstantKey("goog.exportProperty");
        com.google.javascript.rhino.Node node18 = null;
        boolean boolean19 = closureCodingConvention0.isOptionalParameter(node18);
        boolean boolean21 = closureCodingConvention0.isExported("goog.exportProperty");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "goog.abstractMethod" + "'", str3, "goog.abstractMethod");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "goog.global" + "'", str4, "goog.global");
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(delegateRelationship9);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test0862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0862");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        boolean boolean4 = closureCodingConvention0.isSuperClassReference("hi!");
        com.google.javascript.rhino.Node node5 = null;
        boolean boolean6 = closureCodingConvention0.isOptionalParameter(node5);
        java.lang.String str7 = closureCodingConvention0.getExportPropertyFunction();
        java.lang.String str8 = closureCodingConvention0.getGlobalObject();
        boolean boolean10 = closureCodingConvention0.isValidEnumKey("");
        boolean boolean12 = closureCodingConvention0.isPrivate("goog.abstractMethod");
        boolean boolean14 = closureCodingConvention0.isExported("hi!");
        boolean boolean16 = closureCodingConvention0.isValidEnumKey("goog.exportSymbol");
        java.lang.String str17 = closureCodingConvention0.getGlobalObject();
        com.google.javascript.rhino.Node node18 = null;
        com.google.javascript.rhino.Node node19 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str20 = closureCodingConvention0.extractClassNameIfRequire(node18, node19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "goog.exportProperty" + "'", str7, "goog.exportProperty");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "goog.global" + "'", str8, "goog.global");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "goog.global" + "'", str17, "goog.global");
    }

    @Test
    public void test0863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0863");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry3 = null;
        com.google.javascript.jscomp.Scope scope4 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention5 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node6 = null;
        boolean boolean7 = closureCodingConvention5.isOptionalParameter(node6);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry8 = null;
        com.google.javascript.jscomp.Scope scope9 = null;
        com.google.javascript.rhino.jstype.ObjectType[] objectTypeArray10 = new com.google.javascript.rhino.jstype.ObjectType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType> objectTypeList11 = new java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList11, objectTypeArray10);
        java.util.Map<java.lang.String, java.lang.String> strMap13 = null;
        closureCodingConvention5.defineDelegateProxyPrototypeProperties(jSTypeRegistry8, scope9, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList11, strMap13);
        java.util.Map<java.lang.String, java.lang.String> strMap15 = null;
        closureCodingConvention0.defineDelegateProxyPrototypeProperties(jSTypeRegistry3, scope4, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList11, strMap15);
        boolean boolean18 = closureCodingConvention0.isConstant("goog.abstractMethod");
        com.google.javascript.rhino.jstype.ObjectType objectType19 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType20 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType21 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType22 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType23 = null;
        closureCodingConvention0.applyDelegateRelationship(objectType19, objectType20, objectType21, functionType22, functionType23);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(objectTypeArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test0864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0864");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        boolean boolean4 = closureCodingConvention0.isSuperClassReference("hi!");
        com.google.javascript.rhino.Node node5 = null;
        boolean boolean6 = closureCodingConvention0.isOptionalParameter(node5);
        boolean boolean8 = closureCodingConvention0.isSuperClassReference("goog.exportSymbol");
        com.google.javascript.rhino.jstype.FunctionType functionType9 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType10 = null;
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType11 = null;
        closureCodingConvention0.applySubclassRelationship(functionType9, functionType10, subclassType11);
        com.google.javascript.rhino.Node node13 = null;
        boolean boolean14 = closureCodingConvention0.isOptionalParameter(node13);
        java.lang.String str15 = closureCodingConvention0.getExportPropertyFunction();
        com.google.javascript.rhino.Node node16 = null;
        boolean boolean17 = closureCodingConvention0.isOptionalParameter(node16);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry18 = null;
        com.google.javascript.jscomp.Scope scope19 = null;
        java.util.List<com.google.javascript.rhino.jstype.ObjectType> objectTypeList20 = null;
        java.util.Map<java.lang.String, java.lang.String> strMap21 = null;
        closureCodingConvention0.defineDelegateProxyPrototypeProperties(jSTypeRegistry18, scope19, objectTypeList20, strMap21);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "goog.exportProperty" + "'", str15, "goog.exportProperty");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test0865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0865");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        boolean boolean4 = closureCodingConvention0.isSuperClassReference("hi!");
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = null;
        com.google.javascript.jscomp.Scope scope6 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention7 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node8 = null;
        boolean boolean9 = closureCodingConvention7.isOptionalParameter(node8);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry10 = null;
        com.google.javascript.jscomp.Scope scope11 = null;
        com.google.javascript.rhino.jstype.ObjectType[] objectTypeArray12 = new com.google.javascript.rhino.jstype.ObjectType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType> objectTypeList13 = new java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList13, objectTypeArray12);
        java.util.Map<java.lang.String, java.lang.String> strMap15 = null;
        closureCodingConvention7.defineDelegateProxyPrototypeProperties(jSTypeRegistry10, scope11, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList13, strMap15);
        java.util.Map<java.lang.String, java.lang.String> strMap17 = null;
        closureCodingConvention0.defineDelegateProxyPrototypeProperties(jSTypeRegistry5, scope6, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList13, strMap17);
        java.lang.String str19 = closureCodingConvention0.getAbstractMethodName();
        com.google.javascript.rhino.Node node20 = null;
        com.google.javascript.jscomp.CodingConvention.DelegateRelationship delegateRelationship21 = closureCodingConvention0.getDelegateRelationship(node20);
        boolean boolean23 = closureCodingConvention0.isConstantKey("goog.exportSymbol");
        com.google.javascript.rhino.Node node24 = null;
        boolean boolean25 = closureCodingConvention0.isOptionalParameter(node24);
        com.google.javascript.rhino.jstype.FunctionType functionType26 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType27 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType28 = null;
        // The following exception was thrown during execution in test generation
        try {
            closureCodingConvention0.applySingletonGetter(functionType26, functionType27, objectType28);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(objectTypeArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "goog.abstractMethod" + "'", str19, "goog.abstractMethod");
        org.junit.Assert.assertNull(delegateRelationship21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test0866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0866");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection1 = closureCodingConvention0.getAssertionFunctions();
        com.google.javascript.rhino.Node node2 = null;
        com.google.javascript.jscomp.CodingConvention.DelegateRelationship delegateRelationship3 = closureCodingConvention0.getDelegateRelationship(node2);
        boolean boolean5 = closureCodingConvention0.isConstantKey("");
        com.google.javascript.rhino.Node node6 = null;
        boolean boolean7 = closureCodingConvention0.isVarArgsParameter(node6);
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection1);
        org.junit.Assert.assertNull(delegateRelationship3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test0867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0867");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        boolean boolean2 = closureCodingConvention0.isValidEnumKey("goog.abstractMethod");
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection3 = closureCodingConvention0.getAssertionFunctions();
        boolean boolean5 = closureCodingConvention0.isConstantKey("goog.exportProperty");
        com.google.javascript.rhino.Node node6 = null;
        java.util.Map<java.lang.String, java.lang.String> strMap7 = null;
        closureCodingConvention0.checkForCallingConventionDefiningCalls(node6, strMap7);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry9 = null;
        com.google.javascript.jscomp.Scope scope10 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention11 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node12 = null;
        boolean boolean13 = closureCodingConvention11.isOptionalParameter(node12);
        java.lang.String str14 = closureCodingConvention11.getAbstractMethodName();
        java.lang.String str15 = closureCodingConvention11.getGlobalObject();
        com.google.javascript.rhino.Node node16 = null;
        java.util.Map<java.lang.String, java.lang.String> strMap17 = null;
        closureCodingConvention11.checkForCallingConventionDefiningCalls(node16, strMap17);
        boolean boolean20 = closureCodingConvention11.isValidEnumKey("goog.abstractMethod");
        java.lang.String str21 = closureCodingConvention11.getExportSymbolFunction();
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry22 = null;
        com.google.javascript.jscomp.Scope scope23 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention24 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node25 = null;
        boolean boolean26 = closureCodingConvention24.isOptionalParameter(node25);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry27 = null;
        com.google.javascript.jscomp.Scope scope28 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention29 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node30 = null;
        boolean boolean31 = closureCodingConvention29.isOptionalParameter(node30);
        boolean boolean33 = closureCodingConvention29.isSuperClassReference("hi!");
        com.google.javascript.rhino.Node node34 = null;
        boolean boolean35 = closureCodingConvention29.isOptionalParameter(node34);
        boolean boolean37 = closureCodingConvention29.isConstantKey("hi!");
        com.google.javascript.rhino.Node node38 = null;
        boolean boolean39 = closureCodingConvention29.isVarArgsParameter(node38);
        boolean boolean41 = closureCodingConvention29.isExported("");
        com.google.javascript.rhino.Node node42 = null;
        boolean boolean43 = closureCodingConvention29.isVarArgsParameter(node42);
        java.lang.String str44 = closureCodingConvention29.getExportSymbolFunction();
        java.lang.String str45 = closureCodingConvention29.getAbstractMethodName();
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry46 = null;
        com.google.javascript.jscomp.Scope scope47 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention48 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node49 = null;
        boolean boolean50 = closureCodingConvention48.isOptionalParameter(node49);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry51 = null;
        com.google.javascript.jscomp.Scope scope52 = null;
        com.google.javascript.rhino.jstype.ObjectType[] objectTypeArray53 = new com.google.javascript.rhino.jstype.ObjectType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType> objectTypeList54 = new java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList54, objectTypeArray53);
        java.util.Map<java.lang.String, java.lang.String> strMap56 = null;
        closureCodingConvention48.defineDelegateProxyPrototypeProperties(jSTypeRegistry51, scope52, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList54, strMap56);
        java.util.Map<java.lang.String, java.lang.String> strMap58 = null;
        closureCodingConvention29.defineDelegateProxyPrototypeProperties(jSTypeRegistry46, scope47, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList54, strMap58);
        java.util.Map<java.lang.String, java.lang.String> strMap60 = null;
        closureCodingConvention24.defineDelegateProxyPrototypeProperties(jSTypeRegistry27, scope28, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList54, strMap60);
        java.util.Map<java.lang.String, java.lang.String> strMap62 = null;
        closureCodingConvention11.defineDelegateProxyPrototypeProperties(jSTypeRegistry22, scope23, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList54, strMap62);
        java.util.Map<java.lang.String, java.lang.String> strMap64 = null;
        closureCodingConvention0.defineDelegateProxyPrototypeProperties(jSTypeRegistry9, scope10, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList54, strMap64);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "goog.abstractMethod" + "'", str14, "goog.abstractMethod");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "goog.global" + "'", str15, "goog.global");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "goog.exportSymbol" + "'", str21, "goog.exportSymbol");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "goog.exportSymbol" + "'", str44, "goog.exportSymbol");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "goog.abstractMethod" + "'", str45, "goog.abstractMethod");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(objectTypeArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
    }

    @Test
    public void test0868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0868");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        boolean boolean4 = closureCodingConvention0.isSuperClassReference("hi!");
        com.google.javascript.rhino.Node node5 = null;
        boolean boolean6 = closureCodingConvention0.isOptionalParameter(node5);
        boolean boolean8 = closureCodingConvention0.isConstantKey("hi!");
        com.google.javascript.rhino.Node node9 = null;
        boolean boolean10 = closureCodingConvention0.isVarArgsParameter(node9);
        boolean boolean12 = closureCodingConvention0.isExported("");
        com.google.javascript.rhino.Node node13 = null;
        boolean boolean14 = closureCodingConvention0.isVarArgsParameter(node13);
        java.lang.String str15 = closureCodingConvention0.getExportSymbolFunction();
        java.lang.String str16 = closureCodingConvention0.getAbstractMethodName();
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry17 = null;
        com.google.javascript.jscomp.Scope scope18 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention19 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node20 = null;
        boolean boolean21 = closureCodingConvention19.isOptionalParameter(node20);
        java.lang.String str22 = closureCodingConvention19.getAbstractMethodName();
        java.lang.String str23 = closureCodingConvention19.getGlobalObject();
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection24 = closureCodingConvention19.getAssertionFunctions();
        boolean boolean26 = closureCodingConvention19.isConstant("goog.global");
        com.google.javascript.rhino.Node node27 = null;
        com.google.javascript.jscomp.CodingConvention.DelegateRelationship delegateRelationship28 = closureCodingConvention19.getDelegateRelationship(node27);
        com.google.javascript.rhino.jstype.ObjectType objectType29 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType30 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType31 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType32 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType33 = null;
        closureCodingConvention19.applyDelegateRelationship(objectType29, objectType30, objectType31, functionType32, functionType33);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry35 = null;
        com.google.javascript.jscomp.Scope scope36 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention37 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node38 = null;
        boolean boolean39 = closureCodingConvention37.isOptionalParameter(node38);
        boolean boolean41 = closureCodingConvention37.isSuperClassReference("hi!");
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry42 = null;
        com.google.javascript.jscomp.Scope scope43 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention44 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node45 = null;
        boolean boolean46 = closureCodingConvention44.isOptionalParameter(node45);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry47 = null;
        com.google.javascript.jscomp.Scope scope48 = null;
        com.google.javascript.rhino.jstype.ObjectType[] objectTypeArray49 = new com.google.javascript.rhino.jstype.ObjectType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType> objectTypeList50 = new java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList50, objectTypeArray49);
        java.util.Map<java.lang.String, java.lang.String> strMap52 = null;
        closureCodingConvention44.defineDelegateProxyPrototypeProperties(jSTypeRegistry47, scope48, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList50, strMap52);
        java.util.Map<java.lang.String, java.lang.String> strMap54 = null;
        closureCodingConvention37.defineDelegateProxyPrototypeProperties(jSTypeRegistry42, scope43, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList50, strMap54);
        java.util.Map<java.lang.String, java.lang.String> strMap56 = null;
        closureCodingConvention19.defineDelegateProxyPrototypeProperties(jSTypeRegistry35, scope36, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList50, strMap56);
        java.util.Map<java.lang.String, java.lang.String> strMap58 = null;
        closureCodingConvention0.defineDelegateProxyPrototypeProperties(jSTypeRegistry17, scope18, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList50, strMap58);
        java.lang.String str60 = closureCodingConvention0.getExportPropertyFunction();
        boolean boolean62 = closureCodingConvention0.isConstant("hi!");
        java.lang.String str63 = closureCodingConvention0.getAbstractMethodName();
        com.google.javascript.rhino.Node node64 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean65 = closureCodingConvention0.isPropertyTestFunction(node64);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "goog.exportSymbol" + "'", str15, "goog.exportSymbol");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "goog.abstractMethod" + "'", str16, "goog.abstractMethod");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "goog.abstractMethod" + "'", str22, "goog.abstractMethod");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "goog.global" + "'", str23, "goog.global");
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(delegateRelationship28);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(objectTypeArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "goog.exportProperty" + "'", str60, "goog.exportProperty");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "goog.abstractMethod" + "'", str63, "goog.abstractMethod");
    }

    @Test
    public void test0869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0869");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry3 = null;
        com.google.javascript.jscomp.Scope scope4 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention5 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node6 = null;
        boolean boolean7 = closureCodingConvention5.isOptionalParameter(node6);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry8 = null;
        com.google.javascript.jscomp.Scope scope9 = null;
        com.google.javascript.rhino.jstype.ObjectType[] objectTypeArray10 = new com.google.javascript.rhino.jstype.ObjectType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType> objectTypeList11 = new java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList11, objectTypeArray10);
        java.util.Map<java.lang.String, java.lang.String> strMap13 = null;
        closureCodingConvention5.defineDelegateProxyPrototypeProperties(jSTypeRegistry8, scope9, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList11, strMap13);
        java.util.Map<java.lang.String, java.lang.String> strMap15 = null;
        closureCodingConvention0.defineDelegateProxyPrototypeProperties(jSTypeRegistry3, scope4, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList11, strMap15);
        com.google.javascript.rhino.Node node17 = null;
        java.util.Map<java.lang.String, java.lang.String> strMap18 = null;
        closureCodingConvention0.checkForCallingConventionDefiningCalls(node17, strMap18);
        java.lang.String str20 = closureCodingConvention0.getGlobalObject();
        java.lang.String str21 = closureCodingConvention0.getExportPropertyFunction();
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection22 = closureCodingConvention0.getAssertionFunctions();
        boolean boolean25 = closureCodingConvention0.isExported("goog.exportProperty", true);
        java.lang.String str26 = closureCodingConvention0.getAbstractMethodName();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(objectTypeArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "goog.global" + "'", str20, "goog.global");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "goog.exportProperty" + "'", str21, "goog.exportProperty");
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "goog.abstractMethod" + "'", str26, "goog.abstractMethod");
    }

    @Test
    public void test0870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0870");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        boolean boolean4 = closureCodingConvention0.isPrivate("goog.exportSymbol");
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = null;
        com.google.javascript.jscomp.Scope scope6 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention7 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node8 = null;
        boolean boolean9 = closureCodingConvention7.isOptionalParameter(node8);
        java.lang.String str10 = closureCodingConvention7.getAbstractMethodName();
        java.lang.String str11 = closureCodingConvention7.getGlobalObject();
        com.google.javascript.rhino.Node node12 = null;
        java.util.Map<java.lang.String, java.lang.String> strMap13 = null;
        closureCodingConvention7.checkForCallingConventionDefiningCalls(node12, strMap13);
        boolean boolean16 = closureCodingConvention7.isValidEnumKey("goog.abstractMethod");
        java.lang.String str17 = closureCodingConvention7.getExportSymbolFunction();
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry18 = null;
        com.google.javascript.jscomp.Scope scope19 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention20 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node21 = null;
        boolean boolean22 = closureCodingConvention20.isOptionalParameter(node21);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry23 = null;
        com.google.javascript.jscomp.Scope scope24 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention25 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node26 = null;
        boolean boolean27 = closureCodingConvention25.isOptionalParameter(node26);
        boolean boolean29 = closureCodingConvention25.isSuperClassReference("hi!");
        com.google.javascript.rhino.Node node30 = null;
        boolean boolean31 = closureCodingConvention25.isOptionalParameter(node30);
        boolean boolean33 = closureCodingConvention25.isConstantKey("hi!");
        com.google.javascript.rhino.Node node34 = null;
        boolean boolean35 = closureCodingConvention25.isVarArgsParameter(node34);
        boolean boolean37 = closureCodingConvention25.isExported("");
        com.google.javascript.rhino.Node node38 = null;
        boolean boolean39 = closureCodingConvention25.isVarArgsParameter(node38);
        java.lang.String str40 = closureCodingConvention25.getExportSymbolFunction();
        java.lang.String str41 = closureCodingConvention25.getAbstractMethodName();
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry42 = null;
        com.google.javascript.jscomp.Scope scope43 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention44 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node45 = null;
        boolean boolean46 = closureCodingConvention44.isOptionalParameter(node45);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry47 = null;
        com.google.javascript.jscomp.Scope scope48 = null;
        com.google.javascript.rhino.jstype.ObjectType[] objectTypeArray49 = new com.google.javascript.rhino.jstype.ObjectType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType> objectTypeList50 = new java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList50, objectTypeArray49);
        java.util.Map<java.lang.String, java.lang.String> strMap52 = null;
        closureCodingConvention44.defineDelegateProxyPrototypeProperties(jSTypeRegistry47, scope48, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList50, strMap52);
        java.util.Map<java.lang.String, java.lang.String> strMap54 = null;
        closureCodingConvention25.defineDelegateProxyPrototypeProperties(jSTypeRegistry42, scope43, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList50, strMap54);
        java.util.Map<java.lang.String, java.lang.String> strMap56 = null;
        closureCodingConvention20.defineDelegateProxyPrototypeProperties(jSTypeRegistry23, scope24, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList50, strMap56);
        java.util.Map<java.lang.String, java.lang.String> strMap58 = null;
        closureCodingConvention7.defineDelegateProxyPrototypeProperties(jSTypeRegistry18, scope19, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList50, strMap58);
        java.util.Map<java.lang.String, java.lang.String> strMap60 = null;
        closureCodingConvention0.defineDelegateProxyPrototypeProperties(jSTypeRegistry5, scope6, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList50, strMap60);
        com.google.javascript.rhino.Node node62 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.String> strList63 = closureCodingConvention0.identifyTypeDeclarationCall(node62);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "goog.abstractMethod" + "'", str10, "goog.abstractMethod");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "goog.global" + "'", str11, "goog.global");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "goog.exportSymbol" + "'", str17, "goog.exportSymbol");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "goog.exportSymbol" + "'", str40, "goog.exportSymbol");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "goog.abstractMethod" + "'", str41, "goog.abstractMethod");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(objectTypeArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
    }

    @Test
    public void test0871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0871");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        boolean boolean4 = closureCodingConvention0.isSuperClassReference("hi!");
        boolean boolean6 = closureCodingConvention0.isSuperClassReference("goog.global");
        boolean boolean8 = closureCodingConvention0.isConstant("goog.abstractMethod");
        boolean boolean10 = closureCodingConvention0.isValidEnumKey("hi!");
        boolean boolean12 = closureCodingConvention0.isSuperClassReference("goog.global");
        boolean boolean14 = closureCodingConvention0.isPrivate("goog.abstractMethod");
        boolean boolean16 = closureCodingConvention0.isValidEnumKey("");
        java.lang.String str17 = closureCodingConvention0.getGlobalObject();
        com.google.javascript.rhino.Node node18 = null;
        boolean boolean19 = closureCodingConvention0.isOptionalParameter(node18);
        boolean boolean21 = closureCodingConvention0.isExported("goog.global");
        com.google.javascript.rhino.Node node22 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.String> strList23 = closureCodingConvention0.identifyTypeDeclarationCall(node22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "goog.global" + "'", str17, "goog.global");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test0872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0872");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        boolean boolean4 = closureCodingConvention0.isSuperClassReference("hi!");
        com.google.javascript.rhino.Node node5 = null;
        boolean boolean6 = closureCodingConvention0.isOptionalParameter(node5);
        boolean boolean8 = closureCodingConvention0.isExported("hi!");
        java.lang.String str9 = closureCodingConvention0.getExportPropertyFunction();
        boolean boolean11 = closureCodingConvention0.isConstant("goog.global");
        com.google.javascript.rhino.jstype.ObjectType objectType12 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType13 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType14 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType15 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType16 = null;
        closureCodingConvention0.applyDelegateRelationship(objectType12, objectType13, objectType14, functionType15, functionType16);
        boolean boolean19 = closureCodingConvention0.isSuperClassReference("goog.abstractMethod");
        com.google.javascript.rhino.Node node20 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.String> strList21 = closureCodingConvention0.identifyTypeDeclarationCall(node20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "goog.exportProperty" + "'", str9, "goog.exportProperty");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test0873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0873");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        boolean boolean4 = closureCodingConvention0.isSuperClassReference("hi!");
        com.google.javascript.rhino.Node node5 = null;
        boolean boolean6 = closureCodingConvention0.isOptionalParameter(node5);
        boolean boolean8 = closureCodingConvention0.isConstantKey("hi!");
        com.google.javascript.rhino.Node node9 = null;
        boolean boolean10 = closureCodingConvention0.isVarArgsParameter(node9);
        boolean boolean12 = closureCodingConvention0.isExported("");
        java.lang.String str13 = closureCodingConvention0.getDelegateSuperclassName();
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection14 = closureCodingConvention0.getAssertionFunctions();
        java.lang.String str15 = closureCodingConvention0.getExportPropertyFunction();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "goog.exportProperty" + "'", str15, "goog.exportProperty");
    }

    @Test
    public void test0874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0874");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        java.lang.String str3 = closureCodingConvention0.getAbstractMethodName();
        boolean boolean5 = closureCodingConvention0.isConstant("goog.abstractMethod");
        boolean boolean7 = closureCodingConvention0.isValidEnumKey("hi!");
        com.google.javascript.rhino.Node node8 = null;
        com.google.javascript.jscomp.CodingConvention.DelegateRelationship delegateRelationship9 = closureCodingConvention0.getDelegateRelationship(node8);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry10 = null;
        com.google.javascript.jscomp.Scope scope11 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention12 = new com.google.javascript.jscomp.ClosureCodingConvention();
        boolean boolean14 = closureCodingConvention12.isExported("goog.global");
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection15 = closureCodingConvention12.getAssertionFunctions();
        java.lang.String str16 = closureCodingConvention12.getGlobalObject();
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry17 = null;
        com.google.javascript.jscomp.Scope scope18 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention19 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node20 = null;
        boolean boolean21 = closureCodingConvention19.isOptionalParameter(node20);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry22 = null;
        com.google.javascript.jscomp.Scope scope23 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention24 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node25 = null;
        boolean boolean26 = closureCodingConvention24.isOptionalParameter(node25);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry27 = null;
        com.google.javascript.jscomp.Scope scope28 = null;
        com.google.javascript.rhino.jstype.ObjectType[] objectTypeArray29 = new com.google.javascript.rhino.jstype.ObjectType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType> objectTypeList30 = new java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList30, objectTypeArray29);
        java.util.Map<java.lang.String, java.lang.String> strMap32 = null;
        closureCodingConvention24.defineDelegateProxyPrototypeProperties(jSTypeRegistry27, scope28, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList30, strMap32);
        java.util.Map<java.lang.String, java.lang.String> strMap34 = null;
        closureCodingConvention19.defineDelegateProxyPrototypeProperties(jSTypeRegistry22, scope23, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList30, strMap34);
        java.util.Map<java.lang.String, java.lang.String> strMap36 = null;
        closureCodingConvention12.defineDelegateProxyPrototypeProperties(jSTypeRegistry17, scope18, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList30, strMap36);
        java.util.Map<java.lang.String, java.lang.String> strMap38 = null;
        closureCodingConvention0.defineDelegateProxyPrototypeProperties(jSTypeRegistry10, scope11, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList30, strMap38);
        com.google.javascript.jscomp.NodeTraversal nodeTraversal40 = null;
        com.google.javascript.rhino.Node node41 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.jscomp.CodingConvention.ObjectLiteralCast objectLiteralCast42 = closureCodingConvention0.getObjectLiteralCast(nodeTraversal40, node41);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "goog.abstractMethod" + "'", str3, "goog.abstractMethod");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNull(delegateRelationship9);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "goog.global" + "'", str16, "goog.global");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(objectTypeArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test0875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0875");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection1 = closureCodingConvention0.getAssertionFunctions();
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection2 = closureCodingConvention0.getAssertionFunctions();
        java.lang.String str3 = closureCodingConvention0.getGlobalObject();
        com.google.javascript.rhino.Node node4 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship5 = closureCodingConvention0.getClassesDefinedByCall(node4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection1);
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "goog.global" + "'", str3, "goog.global");
    }

    @Test
    public void test0876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0876");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        boolean boolean2 = closureCodingConvention0.isExported("goog.global");
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection3 = closureCodingConvention0.getAssertionFunctions();
        java.lang.String str4 = closureCodingConvention0.getGlobalObject();
        boolean boolean7 = closureCodingConvention0.isExported("goog.exportProperty", false);
        java.lang.String str8 = closureCodingConvention0.getExportSymbolFunction();
        java.lang.String str9 = closureCodingConvention0.getAbstractMethodName();
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry10 = null;
        com.google.javascript.jscomp.Scope scope11 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention12 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node13 = null;
        boolean boolean14 = closureCodingConvention12.isOptionalParameter(node13);
        boolean boolean16 = closureCodingConvention12.isSuperClassReference("hi!");
        boolean boolean18 = closureCodingConvention12.isSuperClassReference("goog.global");
        boolean boolean20 = closureCodingConvention12.isConstant("goog.abstractMethod");
        java.lang.String str21 = closureCodingConvention12.getExportPropertyFunction();
        boolean boolean24 = closureCodingConvention12.isExported("goog.global", false);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry25 = null;
        com.google.javascript.jscomp.Scope scope26 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention27 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node28 = null;
        boolean boolean29 = closureCodingConvention27.isOptionalParameter(node28);
        java.lang.String str30 = closureCodingConvention27.getAbstractMethodName();
        boolean boolean32 = closureCodingConvention27.isConstant("goog.abstractMethod");
        boolean boolean34 = closureCodingConvention27.isValidEnumKey("hi!");
        com.google.javascript.rhino.Node node35 = null;
        com.google.javascript.jscomp.CodingConvention.DelegateRelationship delegateRelationship36 = closureCodingConvention27.getDelegateRelationship(node35);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry37 = null;
        com.google.javascript.jscomp.Scope scope38 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention39 = new com.google.javascript.jscomp.ClosureCodingConvention();
        boolean boolean41 = closureCodingConvention39.isExported("goog.global");
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection42 = closureCodingConvention39.getAssertionFunctions();
        java.lang.String str43 = closureCodingConvention39.getGlobalObject();
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry44 = null;
        com.google.javascript.jscomp.Scope scope45 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention46 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node47 = null;
        boolean boolean48 = closureCodingConvention46.isOptionalParameter(node47);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry49 = null;
        com.google.javascript.jscomp.Scope scope50 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention51 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node52 = null;
        boolean boolean53 = closureCodingConvention51.isOptionalParameter(node52);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry54 = null;
        com.google.javascript.jscomp.Scope scope55 = null;
        com.google.javascript.rhino.jstype.ObjectType[] objectTypeArray56 = new com.google.javascript.rhino.jstype.ObjectType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType> objectTypeList57 = new java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList57, objectTypeArray56);
        java.util.Map<java.lang.String, java.lang.String> strMap59 = null;
        closureCodingConvention51.defineDelegateProxyPrototypeProperties(jSTypeRegistry54, scope55, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList57, strMap59);
        java.util.Map<java.lang.String, java.lang.String> strMap61 = null;
        closureCodingConvention46.defineDelegateProxyPrototypeProperties(jSTypeRegistry49, scope50, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList57, strMap61);
        java.util.Map<java.lang.String, java.lang.String> strMap63 = null;
        closureCodingConvention39.defineDelegateProxyPrototypeProperties(jSTypeRegistry44, scope45, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList57, strMap63);
        java.util.Map<java.lang.String, java.lang.String> strMap65 = null;
        closureCodingConvention27.defineDelegateProxyPrototypeProperties(jSTypeRegistry37, scope38, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList57, strMap65);
        java.util.Map<java.lang.String, java.lang.String> strMap67 = null;
        closureCodingConvention12.defineDelegateProxyPrototypeProperties(jSTypeRegistry25, scope26, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList57, strMap67);
        java.util.Map<java.lang.String, java.lang.String> strMap69 = null;
        closureCodingConvention0.defineDelegateProxyPrototypeProperties(jSTypeRegistry10, scope11, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList57, strMap69);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "goog.global" + "'", str4, "goog.global");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "goog.exportSymbol" + "'", str8, "goog.exportSymbol");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "goog.abstractMethod" + "'", str9, "goog.abstractMethod");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "goog.exportProperty" + "'", str21, "goog.exportProperty");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "goog.abstractMethod" + "'", str30, "goog.abstractMethod");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNull(delegateRelationship36);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "goog.global" + "'", str43, "goog.global");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(objectTypeArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test0877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0877");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        boolean boolean2 = closureCodingConvention0.isValidEnumKey("goog.abstractMethod");
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection3 = closureCodingConvention0.getAssertionFunctions();
        boolean boolean5 = closureCodingConvention0.isConstantKey("");
        java.lang.String str6 = closureCodingConvention0.getExportSymbolFunction();
        boolean boolean8 = closureCodingConvention0.isExported("goog.abstractMethod");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "goog.exportSymbol" + "'", str6, "goog.exportSymbol");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test0878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0878");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        java.lang.String str3 = closureCodingConvention0.getAbstractMethodName();
        java.lang.String str4 = closureCodingConvention0.getGlobalObject();
        com.google.javascript.rhino.Node node5 = null;
        java.util.Map<java.lang.String, java.lang.String> strMap6 = null;
        closureCodingConvention0.checkForCallingConventionDefiningCalls(node5, strMap6);
        boolean boolean9 = closureCodingConvention0.isExported("goog.exportSymbol");
        com.google.javascript.rhino.jstype.FunctionType functionType10 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType11 = null;
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType12 = null;
        closureCodingConvention0.applySubclassRelationship(functionType10, functionType11, subclassType12);
        com.google.javascript.rhino.jstype.FunctionType functionType14 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType15 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType16 = null;
        // The following exception was thrown during execution in test generation
        try {
            closureCodingConvention0.applySingletonGetter(functionType14, functionType15, objectType16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "goog.abstractMethod" + "'", str3, "goog.abstractMethod");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "goog.global" + "'", str4, "goog.global");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test0879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0879");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        boolean boolean2 = closureCodingConvention0.isExported("goog.global");
        boolean boolean4 = closureCodingConvention0.isConstant("");
        com.google.javascript.rhino.Node node5 = null;
        com.google.javascript.jscomp.CodingConvention.DelegateRelationship delegateRelationship6 = closureCodingConvention0.getDelegateRelationship(node5);
        boolean boolean8 = closureCodingConvention0.isConstant("goog.abstractMethod");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(delegateRelationship6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test0880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0880");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        boolean boolean4 = closureCodingConvention0.isSuperClassReference("hi!");
        com.google.javascript.rhino.Node node5 = null;
        boolean boolean6 = closureCodingConvention0.isOptionalParameter(node5);
        boolean boolean8 = closureCodingConvention0.isConstantKey("hi!");
        com.google.javascript.rhino.Node node9 = null;
        boolean boolean10 = closureCodingConvention0.isVarArgsParameter(node9);
        com.google.javascript.rhino.Node node11 = null;
        boolean boolean12 = closureCodingConvention0.isVarArgsParameter(node11);
        boolean boolean14 = closureCodingConvention0.isValidEnumKey("goog.abstractMethod");
        java.lang.String str15 = closureCodingConvention0.getDelegateSuperclassName();
        boolean boolean17 = closureCodingConvention0.isExported("");
        boolean boolean19 = closureCodingConvention0.isConstantKey("goog.exportProperty");
        com.google.javascript.rhino.Node node20 = null;
        boolean boolean21 = closureCodingConvention0.isVarArgsParameter(node20);
        com.google.javascript.jscomp.NodeTraversal nodeTraversal22 = null;
        com.google.javascript.rhino.Node node23 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.jscomp.CodingConvention.ObjectLiteralCast objectLiteralCast24 = closureCodingConvention0.getObjectLiteralCast(nodeTraversal22, node23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test0881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0881");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        boolean boolean4 = closureCodingConvention0.isSuperClassReference("hi!");
        boolean boolean6 = closureCodingConvention0.isSuperClassReference("goog.global");
        boolean boolean8 = closureCodingConvention0.isConstant("goog.abstractMethod");
        boolean boolean10 = closureCodingConvention0.isValidEnumKey("hi!");
        boolean boolean12 = closureCodingConvention0.isSuperClassReference("goog.global");
        java.lang.String str13 = closureCodingConvention0.getGlobalObject();
        boolean boolean15 = closureCodingConvention0.isValidEnumKey("hi!");
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry16 = null;
        com.google.javascript.jscomp.Scope scope17 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention18 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node19 = null;
        boolean boolean20 = closureCodingConvention18.isOptionalParameter(node19);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry21 = null;
        com.google.javascript.jscomp.Scope scope22 = null;
        com.google.javascript.rhino.jstype.ObjectType[] objectTypeArray23 = new com.google.javascript.rhino.jstype.ObjectType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType> objectTypeList24 = new java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList24, objectTypeArray23);
        java.util.Map<java.lang.String, java.lang.String> strMap26 = null;
        closureCodingConvention18.defineDelegateProxyPrototypeProperties(jSTypeRegistry21, scope22, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList24, strMap26);
        com.google.javascript.rhino.Node node28 = null;
        boolean boolean29 = closureCodingConvention18.isVarArgsParameter(node28);
        boolean boolean31 = closureCodingConvention18.isConstantKey("");
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection32 = closureCodingConvention18.getAssertionFunctions();
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry33 = null;
        com.google.javascript.jscomp.Scope scope34 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention35 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node36 = null;
        boolean boolean37 = closureCodingConvention35.isOptionalParameter(node36);
        boolean boolean39 = closureCodingConvention35.isSuperClassReference("hi!");
        boolean boolean41 = closureCodingConvention35.isSuperClassReference("goog.global");
        boolean boolean43 = closureCodingConvention35.isConstant("goog.abstractMethod");
        boolean boolean45 = closureCodingConvention35.isValidEnumKey("hi!");
        boolean boolean47 = closureCodingConvention35.isSuperClassReference("goog.global");
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry48 = null;
        com.google.javascript.jscomp.Scope scope49 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention50 = new com.google.javascript.jscomp.ClosureCodingConvention();
        boolean boolean52 = closureCodingConvention50.isExported("goog.global");
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection53 = closureCodingConvention50.getAssertionFunctions();
        java.lang.String str54 = closureCodingConvention50.getGlobalObject();
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry55 = null;
        com.google.javascript.jscomp.Scope scope56 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention57 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node58 = null;
        boolean boolean59 = closureCodingConvention57.isOptionalParameter(node58);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry60 = null;
        com.google.javascript.jscomp.Scope scope61 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention62 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node63 = null;
        boolean boolean64 = closureCodingConvention62.isOptionalParameter(node63);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry65 = null;
        com.google.javascript.jscomp.Scope scope66 = null;
        com.google.javascript.rhino.jstype.ObjectType[] objectTypeArray67 = new com.google.javascript.rhino.jstype.ObjectType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType> objectTypeList68 = new java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType>();
        boolean boolean69 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList68, objectTypeArray67);
        java.util.Map<java.lang.String, java.lang.String> strMap70 = null;
        closureCodingConvention62.defineDelegateProxyPrototypeProperties(jSTypeRegistry65, scope66, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList68, strMap70);
        java.util.Map<java.lang.String, java.lang.String> strMap72 = null;
        closureCodingConvention57.defineDelegateProxyPrototypeProperties(jSTypeRegistry60, scope61, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList68, strMap72);
        java.util.Map<java.lang.String, java.lang.String> strMap74 = null;
        closureCodingConvention50.defineDelegateProxyPrototypeProperties(jSTypeRegistry55, scope56, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList68, strMap74);
        java.util.Map<java.lang.String, java.lang.String> strMap76 = null;
        closureCodingConvention35.defineDelegateProxyPrototypeProperties(jSTypeRegistry48, scope49, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList68, strMap76);
        java.util.Map<java.lang.String, java.lang.String> strMap78 = null;
        closureCodingConvention18.defineDelegateProxyPrototypeProperties(jSTypeRegistry33, scope34, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList68, strMap78);
        java.util.Map<java.lang.String, java.lang.String> strMap80 = null;
        closureCodingConvention0.defineDelegateProxyPrototypeProperties(jSTypeRegistry16, scope17, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList68, strMap80);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "goog.global" + "'", str13, "goog.global");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(objectTypeArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection32);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "goog.global" + "'", str54, "goog.global");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(objectTypeArray67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
    }

    @Test
    public void test0882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0882");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        boolean boolean4 = closureCodingConvention0.isSuperClassReference("hi!");
        com.google.javascript.rhino.Node node5 = null;
        boolean boolean6 = closureCodingConvention0.isOptionalParameter(node5);
        boolean boolean8 = closureCodingConvention0.isConstantKey("hi!");
        com.google.javascript.rhino.Node node9 = null;
        boolean boolean10 = closureCodingConvention0.isVarArgsParameter(node9);
        boolean boolean12 = closureCodingConvention0.isExported("");
        com.google.javascript.rhino.Node node13 = null;
        boolean boolean14 = closureCodingConvention0.isVarArgsParameter(node13);
        java.lang.String str15 = closureCodingConvention0.getExportSymbolFunction();
        java.lang.String str16 = closureCodingConvention0.getAbstractMethodName();
        com.google.javascript.rhino.Node node17 = null;
        boolean boolean18 = closureCodingConvention0.isVarArgsParameter(node17);
        com.google.javascript.rhino.jstype.ObjectType objectType19 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType20 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType21 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType22 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType23 = null;
        closureCodingConvention0.applyDelegateRelationship(objectType19, objectType20, objectType21, functionType22, functionType23);
        com.google.javascript.rhino.jstype.FunctionType functionType25 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType26 = null;
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType27 = null;
        closureCodingConvention0.applySubclassRelationship(functionType25, functionType26, subclassType27);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "goog.exportSymbol" + "'", str15, "goog.exportSymbol");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "goog.abstractMethod" + "'", str16, "goog.abstractMethod");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test0883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0883");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        boolean boolean2 = closureCodingConvention0.isValidEnumKey("goog.abstractMethod");
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection3 = closureCodingConvention0.getAssertionFunctions();
        boolean boolean5 = closureCodingConvention0.isConstantKey("goog.exportProperty");
        com.google.javascript.rhino.Node node6 = null;
        java.util.Map<java.lang.String, java.lang.String> strMap7 = null;
        closureCodingConvention0.checkForCallingConventionDefiningCalls(node6, strMap7);
        com.google.javascript.rhino.Node node9 = null;
        boolean boolean10 = closureCodingConvention0.isVarArgsParameter(node9);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test0884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0884");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        boolean boolean4 = closureCodingConvention0.isSuperClassReference("hi!");
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = null;
        com.google.javascript.jscomp.Scope scope6 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention7 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node8 = null;
        boolean boolean9 = closureCodingConvention7.isOptionalParameter(node8);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry10 = null;
        com.google.javascript.jscomp.Scope scope11 = null;
        com.google.javascript.rhino.jstype.ObjectType[] objectTypeArray12 = new com.google.javascript.rhino.jstype.ObjectType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType> objectTypeList13 = new java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList13, objectTypeArray12);
        java.util.Map<java.lang.String, java.lang.String> strMap15 = null;
        closureCodingConvention7.defineDelegateProxyPrototypeProperties(jSTypeRegistry10, scope11, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList13, strMap15);
        java.util.Map<java.lang.String, java.lang.String> strMap17 = null;
        closureCodingConvention0.defineDelegateProxyPrototypeProperties(jSTypeRegistry5, scope6, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList13, strMap17);
        java.lang.String str19 = closureCodingConvention0.getAbstractMethodName();
        com.google.javascript.rhino.Node node20 = null;
        com.google.javascript.jscomp.CodingConvention.DelegateRelationship delegateRelationship21 = closureCodingConvention0.getDelegateRelationship(node20);
        com.google.javascript.rhino.Node node22 = null;
        java.util.Map<java.lang.String, java.lang.String> strMap23 = null;
        closureCodingConvention0.checkForCallingConventionDefiningCalls(node22, strMap23);
        com.google.javascript.rhino.Node node25 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.String> strList26 = closureCodingConvention0.identifyTypeDeclarationCall(node25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(objectTypeArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "goog.abstractMethod" + "'", str19, "goog.abstractMethod");
        org.junit.Assert.assertNull(delegateRelationship21);
    }

    @Test
    public void test0885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0885");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        java.lang.String str3 = closureCodingConvention0.getAbstractMethodName();
        java.lang.String str4 = closureCodingConvention0.getGlobalObject();
        boolean boolean6 = closureCodingConvention0.isSuperClassReference("");
        java.lang.String str7 = closureCodingConvention0.getGlobalObject();
        boolean boolean9 = closureCodingConvention0.isSuperClassReference("goog.abstractMethod");
        com.google.javascript.rhino.Node node10 = null;
        boolean boolean11 = closureCodingConvention0.isVarArgsParameter(node10);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "goog.abstractMethod" + "'", str3, "goog.abstractMethod");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "goog.global" + "'", str4, "goog.global");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "goog.global" + "'", str7, "goog.global");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test0886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0886");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        java.lang.String str3 = closureCodingConvention0.getAbstractMethodName();
        java.lang.String str4 = closureCodingConvention0.getGlobalObject();
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection5 = closureCodingConvention0.getAssertionFunctions();
        boolean boolean7 = closureCodingConvention0.isConstant("goog.global");
        boolean boolean9 = closureCodingConvention0.isSuperClassReference("goog.exportProperty");
        com.google.javascript.rhino.jstype.FunctionType functionType10 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType11 = null;
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType12 = null;
        closureCodingConvention0.applySubclassRelationship(functionType10, functionType11, subclassType12);
        boolean boolean15 = closureCodingConvention0.isSuperClassReference("goog.global");
        boolean boolean17 = closureCodingConvention0.isConstantKey("");
        com.google.javascript.rhino.Node node18 = null;
        java.util.Map<java.lang.String, java.lang.String> strMap19 = null;
        closureCodingConvention0.checkForCallingConventionDefiningCalls(node18, strMap19);
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection21 = closureCodingConvention0.getAssertionFunctions();
        com.google.javascript.rhino.Node node22 = null;
        com.google.javascript.jscomp.CodingConvention.DelegateRelationship delegateRelationship23 = closureCodingConvention0.getDelegateRelationship(node22);
        boolean boolean26 = closureCodingConvention0.isExported("hi!", false);
        com.google.javascript.rhino.Node node27 = null;
        boolean boolean28 = closureCodingConvention0.isVarArgsParameter(node27);
        boolean boolean30 = closureCodingConvention0.isConstantKey("");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "goog.abstractMethod" + "'", str3, "goog.abstractMethod");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "goog.global" + "'", str4, "goog.global");
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection21);
        org.junit.Assert.assertNull(delegateRelationship23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test0887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0887");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        java.lang.String str3 = closureCodingConvention0.getAbstractMethodName();
        java.lang.String str4 = closureCodingConvention0.getGlobalObject();
        boolean boolean6 = closureCodingConvention0.isExported("goog.global");
        boolean boolean8 = closureCodingConvention0.isConstant("goog.abstractMethod");
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry9 = null;
        com.google.javascript.jscomp.Scope scope10 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention11 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node12 = null;
        boolean boolean13 = closureCodingConvention11.isOptionalParameter(node12);
        java.lang.String str14 = closureCodingConvention11.getAbstractMethodName();
        java.lang.String str15 = closureCodingConvention11.getGlobalObject();
        com.google.javascript.rhino.Node node16 = null;
        com.google.javascript.jscomp.CodingConvention.DelegateRelationship delegateRelationship17 = closureCodingConvention11.getDelegateRelationship(node16);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry18 = null;
        com.google.javascript.jscomp.Scope scope19 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention20 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node21 = null;
        boolean boolean22 = closureCodingConvention20.isOptionalParameter(node21);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry23 = null;
        com.google.javascript.jscomp.Scope scope24 = null;
        com.google.javascript.rhino.jstype.ObjectType[] objectTypeArray25 = new com.google.javascript.rhino.jstype.ObjectType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType> objectTypeList26 = new java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList26, objectTypeArray25);
        java.util.Map<java.lang.String, java.lang.String> strMap28 = null;
        closureCodingConvention20.defineDelegateProxyPrototypeProperties(jSTypeRegistry23, scope24, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList26, strMap28);
        java.util.Map<java.lang.String, java.lang.String> strMap30 = null;
        closureCodingConvention11.defineDelegateProxyPrototypeProperties(jSTypeRegistry18, scope19, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList26, strMap30);
        java.util.Map<java.lang.String, java.lang.String> strMap32 = null;
        closureCodingConvention0.defineDelegateProxyPrototypeProperties(jSTypeRegistry9, scope10, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList26, strMap32);
        java.lang.String str34 = closureCodingConvention0.getGlobalObject();
        boolean boolean36 = closureCodingConvention0.isConstant("hi!");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "goog.abstractMethod" + "'", str3, "goog.abstractMethod");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "goog.global" + "'", str4, "goog.global");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "goog.abstractMethod" + "'", str14, "goog.abstractMethod");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "goog.global" + "'", str15, "goog.global");
        org.junit.Assert.assertNull(delegateRelationship17);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(objectTypeArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "goog.global" + "'", str34, "goog.global");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test0888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0888");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        boolean boolean4 = closureCodingConvention0.isSuperClassReference("hi!");
        com.google.javascript.rhino.Node node5 = null;
        boolean boolean6 = closureCodingConvention0.isOptionalParameter(node5);
        java.lang.String str7 = closureCodingConvention0.getExportPropertyFunction();
        com.google.javascript.rhino.Node node8 = null;
        boolean boolean9 = closureCodingConvention0.isOptionalParameter(node8);
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection10 = closureCodingConvention0.getAssertionFunctions();
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry11 = null;
        com.google.javascript.jscomp.Scope scope12 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention13 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node14 = null;
        boolean boolean15 = closureCodingConvention13.isOptionalParameter(node14);
        boolean boolean17 = closureCodingConvention13.isSuperClassReference("hi!");
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry18 = null;
        com.google.javascript.jscomp.Scope scope19 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention20 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node21 = null;
        boolean boolean22 = closureCodingConvention20.isOptionalParameter(node21);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry23 = null;
        com.google.javascript.jscomp.Scope scope24 = null;
        com.google.javascript.rhino.jstype.ObjectType[] objectTypeArray25 = new com.google.javascript.rhino.jstype.ObjectType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType> objectTypeList26 = new java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList26, objectTypeArray25);
        java.util.Map<java.lang.String, java.lang.String> strMap28 = null;
        closureCodingConvention20.defineDelegateProxyPrototypeProperties(jSTypeRegistry23, scope24, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList26, strMap28);
        java.util.Map<java.lang.String, java.lang.String> strMap30 = null;
        closureCodingConvention13.defineDelegateProxyPrototypeProperties(jSTypeRegistry18, scope19, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList26, strMap30);
        java.util.Map<java.lang.String, java.lang.String> strMap32 = null;
        closureCodingConvention0.defineDelegateProxyPrototypeProperties(jSTypeRegistry11, scope12, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList26, strMap32);
        com.google.javascript.rhino.Node node34 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.String> strList35 = closureCodingConvention0.identifyTypeDeclarationCall(node34);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "goog.exportProperty" + "'", str7, "goog.exportProperty");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection10);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(objectTypeArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test0889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0889");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        boolean boolean2 = closureCodingConvention0.isValidEnumKey("goog.abstractMethod");
        java.lang.String str3 = closureCodingConvention0.getExportPropertyFunction();
        java.lang.String str4 = closureCodingConvention0.getExportPropertyFunction();
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection5 = closureCodingConvention0.getAssertionFunctions();
        java.lang.Class<?> wildcardClass6 = assertionFunctionSpecCollection5.getClass();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "goog.exportProperty" + "'", str3, "goog.exportProperty");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "goog.exportProperty" + "'", str4, "goog.exportProperty");
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection5);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test0890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0890");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        boolean boolean4 = closureCodingConvention0.isSuperClassReference("hi!");
        boolean boolean6 = closureCodingConvention0.isSuperClassReference("goog.global");
        boolean boolean8 = closureCodingConvention0.isConstant("goog.abstractMethod");
        java.lang.String str9 = closureCodingConvention0.getExportPropertyFunction();
        boolean boolean12 = closureCodingConvention0.isExported("goog.global", false);
        com.google.javascript.rhino.Node node13 = null;
        boolean boolean14 = closureCodingConvention0.isOptionalParameter(node13);
        boolean boolean16 = closureCodingConvention0.isPrivate("goog.global");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "goog.exportProperty" + "'", str9, "goog.exportProperty");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test0891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0891");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        boolean boolean4 = closureCodingConvention0.isSuperClassReference("hi!");
        com.google.javascript.rhino.Node node5 = null;
        boolean boolean6 = closureCodingConvention0.isOptionalParameter(node5);
        boolean boolean8 = closureCodingConvention0.isConstantKey("hi!");
        com.google.javascript.rhino.Node node9 = null;
        boolean boolean10 = closureCodingConvention0.isVarArgsParameter(node9);
        java.lang.String str11 = closureCodingConvention0.getDelegateSuperclassName();
        com.google.javascript.rhino.Node node12 = null;
        boolean boolean13 = closureCodingConvention0.isOptionalParameter(node12);
        com.google.javascript.rhino.Node node14 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.jscomp.CodingConvention.Bind bind15 = closureCodingConvention0.describeFunctionBind(node14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test0892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0892");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        boolean boolean4 = closureCodingConvention0.isSuperClassReference("hi!");
        boolean boolean6 = closureCodingConvention0.isValidEnumKey("");
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry7 = null;
        com.google.javascript.jscomp.Scope scope8 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention9 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node10 = null;
        boolean boolean11 = closureCodingConvention9.isOptionalParameter(node10);
        boolean boolean13 = closureCodingConvention9.isSuperClassReference("hi!");
        com.google.javascript.rhino.Node node14 = null;
        boolean boolean15 = closureCodingConvention9.isOptionalParameter(node14);
        boolean boolean17 = closureCodingConvention9.isConstantKey("hi!");
        com.google.javascript.rhino.Node node18 = null;
        boolean boolean19 = closureCodingConvention9.isVarArgsParameter(node18);
        com.google.javascript.rhino.Node node20 = null;
        boolean boolean21 = closureCodingConvention9.isVarArgsParameter(node20);
        boolean boolean23 = closureCodingConvention9.isValidEnumKey("goog.abstractMethod");
        java.lang.String str24 = closureCodingConvention9.getDelegateSuperclassName();
        boolean boolean26 = closureCodingConvention9.isExported("");
        boolean boolean28 = closureCodingConvention9.isConstantKey("goog.exportProperty");
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry29 = null;
        com.google.javascript.jscomp.Scope scope30 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention31 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node32 = null;
        boolean boolean33 = closureCodingConvention31.isOptionalParameter(node32);
        java.lang.String str34 = closureCodingConvention31.getAbstractMethodName();
        java.lang.String str35 = closureCodingConvention31.getGlobalObject();
        boolean boolean37 = closureCodingConvention31.isExported("goog.global");
        boolean boolean39 = closureCodingConvention31.isConstant("goog.abstractMethod");
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry40 = null;
        com.google.javascript.jscomp.Scope scope41 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention42 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node43 = null;
        boolean boolean44 = closureCodingConvention42.isOptionalParameter(node43);
        java.lang.String str45 = closureCodingConvention42.getAbstractMethodName();
        java.lang.String str46 = closureCodingConvention42.getGlobalObject();
        com.google.javascript.rhino.Node node47 = null;
        com.google.javascript.jscomp.CodingConvention.DelegateRelationship delegateRelationship48 = closureCodingConvention42.getDelegateRelationship(node47);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry49 = null;
        com.google.javascript.jscomp.Scope scope50 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention51 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node52 = null;
        boolean boolean53 = closureCodingConvention51.isOptionalParameter(node52);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry54 = null;
        com.google.javascript.jscomp.Scope scope55 = null;
        com.google.javascript.rhino.jstype.ObjectType[] objectTypeArray56 = new com.google.javascript.rhino.jstype.ObjectType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType> objectTypeList57 = new java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList57, objectTypeArray56);
        java.util.Map<java.lang.String, java.lang.String> strMap59 = null;
        closureCodingConvention51.defineDelegateProxyPrototypeProperties(jSTypeRegistry54, scope55, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList57, strMap59);
        java.util.Map<java.lang.String, java.lang.String> strMap61 = null;
        closureCodingConvention42.defineDelegateProxyPrototypeProperties(jSTypeRegistry49, scope50, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList57, strMap61);
        java.util.Map<java.lang.String, java.lang.String> strMap63 = null;
        closureCodingConvention31.defineDelegateProxyPrototypeProperties(jSTypeRegistry40, scope41, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList57, strMap63);
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection65 = closureCodingConvention31.getAssertionFunctions();
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry66 = null;
        com.google.javascript.jscomp.Scope scope67 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention68 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node69 = null;
        boolean boolean70 = closureCodingConvention68.isOptionalParameter(node69);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry71 = null;
        com.google.javascript.jscomp.Scope scope72 = null;
        com.google.javascript.rhino.jstype.ObjectType[] objectTypeArray73 = new com.google.javascript.rhino.jstype.ObjectType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType> objectTypeList74 = new java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType>();
        boolean boolean75 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList74, objectTypeArray73);
        java.util.Map<java.lang.String, java.lang.String> strMap76 = null;
        closureCodingConvention68.defineDelegateProxyPrototypeProperties(jSTypeRegistry71, scope72, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList74, strMap76);
        java.util.Map<java.lang.String, java.lang.String> strMap78 = null;
        closureCodingConvention31.defineDelegateProxyPrototypeProperties(jSTypeRegistry66, scope67, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList74, strMap78);
        java.util.Map<java.lang.String, java.lang.String> strMap80 = null;
        closureCodingConvention9.defineDelegateProxyPrototypeProperties(jSTypeRegistry29, scope30, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList74, strMap80);
        java.util.Map<java.lang.String, java.lang.String> strMap82 = null;
        closureCodingConvention0.defineDelegateProxyPrototypeProperties(jSTypeRegistry7, scope8, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList74, strMap82);
        com.google.javascript.rhino.Node node84 = null;
        boolean boolean85 = closureCodingConvention0.isOptionalParameter(node84);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "goog.abstractMethod" + "'", str34, "goog.abstractMethod");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "goog.global" + "'", str35, "goog.global");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "goog.abstractMethod" + "'", str45, "goog.abstractMethod");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "goog.global" + "'", str46, "goog.global");
        org.junit.Assert.assertNull(delegateRelationship48);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(objectTypeArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection65);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(objectTypeArray73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
    }

    @Test
    public void test0893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0893");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        java.lang.String str3 = closureCodingConvention0.getAbstractMethodName();
        java.lang.String str4 = closureCodingConvention0.getGlobalObject();
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection5 = closureCodingConvention0.getAssertionFunctions();
        boolean boolean7 = closureCodingConvention0.isConstant("goog.global");
        boolean boolean9 = closureCodingConvention0.isSuperClassReference("goog.exportProperty");
        com.google.javascript.rhino.jstype.FunctionType functionType10 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType11 = null;
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType12 = null;
        closureCodingConvention0.applySubclassRelationship(functionType10, functionType11, subclassType12);
        boolean boolean15 = closureCodingConvention0.isSuperClassReference("goog.global");
        com.google.javascript.rhino.Node node16 = null;
        boolean boolean17 = closureCodingConvention0.isOptionalParameter(node16);
        java.lang.String str18 = closureCodingConvention0.getGlobalObject();
        com.google.javascript.rhino.Node node19 = null;
        com.google.javascript.rhino.Node node20 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str21 = closureCodingConvention0.extractClassNameIfRequire(node19, node20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "goog.abstractMethod" + "'", str3, "goog.abstractMethod");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "goog.global" + "'", str4, "goog.global");
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "goog.global" + "'", str18, "goog.global");
    }

    @Test
    public void test0894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0894");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        java.lang.String str3 = closureCodingConvention0.getAbstractMethodName();
        java.lang.String str4 = closureCodingConvention0.getGlobalObject();
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection5 = closureCodingConvention0.getAssertionFunctions();
        boolean boolean7 = closureCodingConvention0.isConstant("goog.global");
        boolean boolean9 = closureCodingConvention0.isSuperClassReference("goog.exportProperty");
        com.google.javascript.rhino.jstype.FunctionType functionType10 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType11 = null;
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType12 = null;
        closureCodingConvention0.applySubclassRelationship(functionType10, functionType11, subclassType12);
        boolean boolean15 = closureCodingConvention0.isSuperClassReference("goog.global");
        boolean boolean18 = closureCodingConvention0.isExported("hi!", false);
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection19 = closureCodingConvention0.getAssertionFunctions();
        com.google.javascript.jscomp.NodeTraversal nodeTraversal20 = null;
        com.google.javascript.rhino.Node node21 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.jscomp.CodingConvention.ObjectLiteralCast objectLiteralCast22 = closureCodingConvention0.getObjectLiteralCast(nodeTraversal20, node21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "goog.abstractMethod" + "'", str3, "goog.abstractMethod");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "goog.global" + "'", str4, "goog.global");
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection19);
    }

    @Test
    public void test0895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0895");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        boolean boolean4 = closureCodingConvention0.isSuperClassReference("hi!");
        boolean boolean6 = closureCodingConvention0.isSuperClassReference("goog.global");
        boolean boolean8 = closureCodingConvention0.isConstant("goog.abstractMethod");
        boolean boolean10 = closureCodingConvention0.isValidEnumKey("hi!");
        boolean boolean12 = closureCodingConvention0.isSuperClassReference("goog.global");
        boolean boolean14 = closureCodingConvention0.isPrivate("goog.abstractMethod");
        boolean boolean16 = closureCodingConvention0.isValidEnumKey("");
        java.lang.String str17 = closureCodingConvention0.getAbstractMethodName();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "goog.abstractMethod" + "'", str17, "goog.abstractMethod");
    }

    @Test
    public void test0896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0896");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        boolean boolean4 = closureCodingConvention0.isSuperClassReference("hi!");
        com.google.javascript.rhino.Node node5 = null;
        boolean boolean6 = closureCodingConvention0.isOptionalParameter(node5);
        boolean boolean8 = closureCodingConvention0.isConstantKey("hi!");
        com.google.javascript.rhino.Node node9 = null;
        boolean boolean10 = closureCodingConvention0.isVarArgsParameter(node9);
        java.lang.String str11 = closureCodingConvention0.getDelegateSuperclassName();
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection12 = closureCodingConvention0.getAssertionFunctions();
        java.lang.String str13 = closureCodingConvention0.getDelegateSuperclassName();
        com.google.javascript.rhino.jstype.ObjectType objectType14 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType15 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType16 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType17 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType18 = null;
        closureCodingConvention0.applyDelegateRelationship(objectType14, objectType15, objectType16, functionType17, functionType18);
        boolean boolean21 = closureCodingConvention0.isConstantKey("goog.exportProperty");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test0897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0897");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        boolean boolean4 = closureCodingConvention0.isSuperClassReference("hi!");
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = null;
        com.google.javascript.jscomp.Scope scope6 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention7 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node8 = null;
        boolean boolean9 = closureCodingConvention7.isOptionalParameter(node8);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry10 = null;
        com.google.javascript.jscomp.Scope scope11 = null;
        com.google.javascript.rhino.jstype.ObjectType[] objectTypeArray12 = new com.google.javascript.rhino.jstype.ObjectType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType> objectTypeList13 = new java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList13, objectTypeArray12);
        java.util.Map<java.lang.String, java.lang.String> strMap15 = null;
        closureCodingConvention7.defineDelegateProxyPrototypeProperties(jSTypeRegistry10, scope11, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList13, strMap15);
        java.util.Map<java.lang.String, java.lang.String> strMap17 = null;
        closureCodingConvention0.defineDelegateProxyPrototypeProperties(jSTypeRegistry5, scope6, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList13, strMap17);
        java.lang.String str19 = closureCodingConvention0.getAbstractMethodName();
        com.google.javascript.rhino.Node node20 = null;
        com.google.javascript.jscomp.CodingConvention.DelegateRelationship delegateRelationship21 = closureCodingConvention0.getDelegateRelationship(node20);
        boolean boolean23 = closureCodingConvention0.isConstantKey("goog.abstractMethod");
        boolean boolean25 = closureCodingConvention0.isSuperClassReference("goog.exportProperty");
        boolean boolean27 = closureCodingConvention0.isExported("goog.exportProperty");
        com.google.javascript.rhino.Node node28 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship29 = closureCodingConvention0.getClassesDefinedByCall(node28);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(objectTypeArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "goog.abstractMethod" + "'", str19, "goog.abstractMethod");
        org.junit.Assert.assertNull(delegateRelationship21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test0898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0898");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        boolean boolean4 = closureCodingConvention0.isSuperClassReference("hi!");
        com.google.javascript.rhino.Node node5 = null;
        boolean boolean6 = closureCodingConvention0.isOptionalParameter(node5);
        boolean boolean8 = closureCodingConvention0.isConstantKey("hi!");
        com.google.javascript.rhino.Node node9 = null;
        boolean boolean10 = closureCodingConvention0.isVarArgsParameter(node9);
        boolean boolean12 = closureCodingConvention0.isExported("");
        com.google.javascript.rhino.Node node13 = null;
        boolean boolean14 = closureCodingConvention0.isVarArgsParameter(node13);
        java.lang.String str15 = closureCodingConvention0.getExportSymbolFunction();
        java.lang.String str16 = closureCodingConvention0.getAbstractMethodName();
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry17 = null;
        com.google.javascript.jscomp.Scope scope18 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention19 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node20 = null;
        boolean boolean21 = closureCodingConvention19.isOptionalParameter(node20);
        java.lang.String str22 = closureCodingConvention19.getAbstractMethodName();
        java.lang.String str23 = closureCodingConvention19.getGlobalObject();
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection24 = closureCodingConvention19.getAssertionFunctions();
        boolean boolean26 = closureCodingConvention19.isConstant("goog.global");
        com.google.javascript.rhino.Node node27 = null;
        com.google.javascript.jscomp.CodingConvention.DelegateRelationship delegateRelationship28 = closureCodingConvention19.getDelegateRelationship(node27);
        com.google.javascript.rhino.jstype.ObjectType objectType29 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType30 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType31 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType32 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType33 = null;
        closureCodingConvention19.applyDelegateRelationship(objectType29, objectType30, objectType31, functionType32, functionType33);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry35 = null;
        com.google.javascript.jscomp.Scope scope36 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention37 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node38 = null;
        boolean boolean39 = closureCodingConvention37.isOptionalParameter(node38);
        boolean boolean41 = closureCodingConvention37.isSuperClassReference("hi!");
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry42 = null;
        com.google.javascript.jscomp.Scope scope43 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention44 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node45 = null;
        boolean boolean46 = closureCodingConvention44.isOptionalParameter(node45);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry47 = null;
        com.google.javascript.jscomp.Scope scope48 = null;
        com.google.javascript.rhino.jstype.ObjectType[] objectTypeArray49 = new com.google.javascript.rhino.jstype.ObjectType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType> objectTypeList50 = new java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList50, objectTypeArray49);
        java.util.Map<java.lang.String, java.lang.String> strMap52 = null;
        closureCodingConvention44.defineDelegateProxyPrototypeProperties(jSTypeRegistry47, scope48, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList50, strMap52);
        java.util.Map<java.lang.String, java.lang.String> strMap54 = null;
        closureCodingConvention37.defineDelegateProxyPrototypeProperties(jSTypeRegistry42, scope43, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList50, strMap54);
        java.util.Map<java.lang.String, java.lang.String> strMap56 = null;
        closureCodingConvention19.defineDelegateProxyPrototypeProperties(jSTypeRegistry35, scope36, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList50, strMap56);
        java.util.Map<java.lang.String, java.lang.String> strMap58 = null;
        closureCodingConvention0.defineDelegateProxyPrototypeProperties(jSTypeRegistry17, scope18, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList50, strMap58);
        java.lang.String str60 = closureCodingConvention0.getExportPropertyFunction();
        boolean boolean62 = closureCodingConvention0.isConstant("hi!");
        java.lang.String str63 = closureCodingConvention0.getAbstractMethodName();
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry64 = null;
        com.google.javascript.jscomp.Scope scope65 = null;
        com.google.javascript.rhino.jstype.ObjectType[] objectTypeArray66 = new com.google.javascript.rhino.jstype.ObjectType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType> objectTypeList67 = new java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList67, objectTypeArray66);
        java.util.Map<java.lang.String, java.lang.String> strMap69 = null;
        closureCodingConvention0.defineDelegateProxyPrototypeProperties(jSTypeRegistry64, scope65, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList67, strMap69);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "goog.exportSymbol" + "'", str15, "goog.exportSymbol");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "goog.abstractMethod" + "'", str16, "goog.abstractMethod");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "goog.abstractMethod" + "'", str22, "goog.abstractMethod");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "goog.global" + "'", str23, "goog.global");
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(delegateRelationship28);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(objectTypeArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "goog.exportProperty" + "'", str60, "goog.exportProperty");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "goog.abstractMethod" + "'", str63, "goog.abstractMethod");
        org.junit.Assert.assertNotNull(objectTypeArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
    }

    @Test
    public void test0899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0899");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        boolean boolean4 = closureCodingConvention0.isSuperClassReference("hi!");
        com.google.javascript.rhino.Node node5 = null;
        boolean boolean6 = closureCodingConvention0.isOptionalParameter(node5);
        boolean boolean8 = closureCodingConvention0.isConstantKey("hi!");
        com.google.javascript.rhino.Node node9 = null;
        boolean boolean10 = closureCodingConvention0.isVarArgsParameter(node9);
        boolean boolean12 = closureCodingConvention0.isExported("");
        com.google.javascript.rhino.Node node13 = null;
        boolean boolean14 = closureCodingConvention0.isVarArgsParameter(node13);
        java.lang.String str15 = closureCodingConvention0.getExportSymbolFunction();
        java.lang.String str16 = closureCodingConvention0.getAbstractMethodName();
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry17 = null;
        com.google.javascript.jscomp.Scope scope18 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention19 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node20 = null;
        boolean boolean21 = closureCodingConvention19.isOptionalParameter(node20);
        java.lang.String str22 = closureCodingConvention19.getAbstractMethodName();
        java.lang.String str23 = closureCodingConvention19.getGlobalObject();
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection24 = closureCodingConvention19.getAssertionFunctions();
        boolean boolean26 = closureCodingConvention19.isConstant("goog.global");
        com.google.javascript.rhino.Node node27 = null;
        com.google.javascript.jscomp.CodingConvention.DelegateRelationship delegateRelationship28 = closureCodingConvention19.getDelegateRelationship(node27);
        com.google.javascript.rhino.jstype.ObjectType objectType29 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType30 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType31 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType32 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType33 = null;
        closureCodingConvention19.applyDelegateRelationship(objectType29, objectType30, objectType31, functionType32, functionType33);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry35 = null;
        com.google.javascript.jscomp.Scope scope36 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention37 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node38 = null;
        boolean boolean39 = closureCodingConvention37.isOptionalParameter(node38);
        boolean boolean41 = closureCodingConvention37.isSuperClassReference("hi!");
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry42 = null;
        com.google.javascript.jscomp.Scope scope43 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention44 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node45 = null;
        boolean boolean46 = closureCodingConvention44.isOptionalParameter(node45);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry47 = null;
        com.google.javascript.jscomp.Scope scope48 = null;
        com.google.javascript.rhino.jstype.ObjectType[] objectTypeArray49 = new com.google.javascript.rhino.jstype.ObjectType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType> objectTypeList50 = new java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList50, objectTypeArray49);
        java.util.Map<java.lang.String, java.lang.String> strMap52 = null;
        closureCodingConvention44.defineDelegateProxyPrototypeProperties(jSTypeRegistry47, scope48, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList50, strMap52);
        java.util.Map<java.lang.String, java.lang.String> strMap54 = null;
        closureCodingConvention37.defineDelegateProxyPrototypeProperties(jSTypeRegistry42, scope43, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList50, strMap54);
        java.util.Map<java.lang.String, java.lang.String> strMap56 = null;
        closureCodingConvention19.defineDelegateProxyPrototypeProperties(jSTypeRegistry35, scope36, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList50, strMap56);
        java.util.Map<java.lang.String, java.lang.String> strMap58 = null;
        closureCodingConvention0.defineDelegateProxyPrototypeProperties(jSTypeRegistry17, scope18, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList50, strMap58);
        java.lang.String str60 = closureCodingConvention0.getExportPropertyFunction();
        boolean boolean62 = closureCodingConvention0.isConstant("hi!");
        com.google.javascript.rhino.Node node63 = null;
        com.google.javascript.jscomp.CodingConvention.DelegateRelationship delegateRelationship64 = closureCodingConvention0.getDelegateRelationship(node63);
        boolean boolean67 = closureCodingConvention0.isExported("goog.global", false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "goog.exportSymbol" + "'", str15, "goog.exportSymbol");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "goog.abstractMethod" + "'", str16, "goog.abstractMethod");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "goog.abstractMethod" + "'", str22, "goog.abstractMethod");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "goog.global" + "'", str23, "goog.global");
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(delegateRelationship28);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(objectTypeArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "goog.exportProperty" + "'", str60, "goog.exportProperty");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNull(delegateRelationship64);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
    }

    @Test
    public void test0900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0900");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        boolean boolean4 = closureCodingConvention0.isSuperClassReference("hi!");
        com.google.javascript.rhino.Node node5 = null;
        boolean boolean6 = closureCodingConvention0.isOptionalParameter(node5);
        boolean boolean8 = closureCodingConvention0.isSuperClassReference("goog.exportSymbol");
        com.google.javascript.rhino.jstype.FunctionType functionType9 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType10 = null;
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType11 = null;
        closureCodingConvention0.applySubclassRelationship(functionType9, functionType10, subclassType11);
        com.google.javascript.rhino.Node node13 = null;
        boolean boolean14 = closureCodingConvention0.isOptionalParameter(node13);
        java.lang.Class<?> wildcardClass15 = closureCodingConvention0.getClass();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test0901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0901");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        boolean boolean2 = closureCodingConvention0.isExported("goog.global");
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection3 = closureCodingConvention0.getAssertionFunctions();
        boolean boolean5 = closureCodingConvention0.isPrivate("");
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry6 = null;
        com.google.javascript.jscomp.Scope scope7 = null;
        java.util.List<com.google.javascript.rhino.jstype.ObjectType> objectTypeList8 = null;
        java.util.Map<java.lang.String, java.lang.String> strMap9 = null;
        closureCodingConvention0.defineDelegateProxyPrototypeProperties(jSTypeRegistry6, scope7, objectTypeList8, strMap9);
        boolean boolean12 = closureCodingConvention0.isConstant("goog.exportSymbol");
        com.google.javascript.rhino.Node node13 = null;
        com.google.javascript.jscomp.CodingConvention.DelegateRelationship delegateRelationship14 = closureCodingConvention0.getDelegateRelationship(node13);
        boolean boolean16 = closureCodingConvention0.isSuperClassReference("goog.global");
        com.google.javascript.rhino.Node node17 = null;
        boolean boolean18 = closureCodingConvention0.isOptionalParameter(node17);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(delegateRelationship14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test0902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0902");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        java.lang.String str3 = closureCodingConvention0.getAbstractMethodName();
        java.lang.String str4 = closureCodingConvention0.getGlobalObject();
        boolean boolean6 = closureCodingConvention0.isExported("goog.global");
        com.google.javascript.rhino.Node node7 = null;
        com.google.javascript.jscomp.CodingConvention.DelegateRelationship delegateRelationship8 = closureCodingConvention0.getDelegateRelationship(node7);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry9 = null;
        com.google.javascript.jscomp.Scope scope10 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention11 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node12 = null;
        boolean boolean13 = closureCodingConvention11.isOptionalParameter(node12);
        java.lang.String str14 = closureCodingConvention11.getAbstractMethodName();
        java.lang.String str15 = closureCodingConvention11.getGlobalObject();
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection16 = closureCodingConvention11.getAssertionFunctions();
        boolean boolean18 = closureCodingConvention11.isConstant("goog.global");
        boolean boolean20 = closureCodingConvention11.isSuperClassReference("goog.exportProperty");
        com.google.javascript.rhino.jstype.FunctionType functionType21 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType22 = null;
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType23 = null;
        closureCodingConvention11.applySubclassRelationship(functionType21, functionType22, subclassType23);
        boolean boolean26 = closureCodingConvention11.isSuperClassReference("goog.global");
        boolean boolean29 = closureCodingConvention11.isExported("hi!", false);
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection30 = closureCodingConvention11.getAssertionFunctions();
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry31 = null;
        com.google.javascript.jscomp.Scope scope32 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention33 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node34 = null;
        boolean boolean35 = closureCodingConvention33.isOptionalParameter(node34);
        java.lang.String str36 = closureCodingConvention33.getAbstractMethodName();
        java.lang.String str37 = closureCodingConvention33.getGlobalObject();
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection38 = closureCodingConvention33.getAssertionFunctions();
        boolean boolean40 = closureCodingConvention33.isConstant("goog.global");
        com.google.javascript.rhino.Node node41 = null;
        com.google.javascript.jscomp.CodingConvention.DelegateRelationship delegateRelationship42 = closureCodingConvention33.getDelegateRelationship(node41);
        com.google.javascript.rhino.jstype.ObjectType objectType43 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType44 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType45 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType46 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType47 = null;
        closureCodingConvention33.applyDelegateRelationship(objectType43, objectType44, objectType45, functionType46, functionType47);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry49 = null;
        com.google.javascript.jscomp.Scope scope50 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention51 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node52 = null;
        boolean boolean53 = closureCodingConvention51.isOptionalParameter(node52);
        boolean boolean55 = closureCodingConvention51.isSuperClassReference("hi!");
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry56 = null;
        com.google.javascript.jscomp.Scope scope57 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention58 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node59 = null;
        boolean boolean60 = closureCodingConvention58.isOptionalParameter(node59);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry61 = null;
        com.google.javascript.jscomp.Scope scope62 = null;
        com.google.javascript.rhino.jstype.ObjectType[] objectTypeArray63 = new com.google.javascript.rhino.jstype.ObjectType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType> objectTypeList64 = new java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList64, objectTypeArray63);
        java.util.Map<java.lang.String, java.lang.String> strMap66 = null;
        closureCodingConvention58.defineDelegateProxyPrototypeProperties(jSTypeRegistry61, scope62, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList64, strMap66);
        java.util.Map<java.lang.String, java.lang.String> strMap68 = null;
        closureCodingConvention51.defineDelegateProxyPrototypeProperties(jSTypeRegistry56, scope57, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList64, strMap68);
        java.util.Map<java.lang.String, java.lang.String> strMap70 = null;
        closureCodingConvention33.defineDelegateProxyPrototypeProperties(jSTypeRegistry49, scope50, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList64, strMap70);
        java.util.Map<java.lang.String, java.lang.String> strMap72 = null;
        closureCodingConvention11.defineDelegateProxyPrototypeProperties(jSTypeRegistry31, scope32, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList64, strMap72);
        java.util.Map<java.lang.String, java.lang.String> strMap74 = null;
        closureCodingConvention0.defineDelegateProxyPrototypeProperties(jSTypeRegistry9, scope10, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList64, strMap74);
        java.lang.String str76 = closureCodingConvention0.getAbstractMethodName();
        com.google.javascript.rhino.Node node77 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.String> strList78 = closureCodingConvention0.identifyTypeDeclarationCall(node77);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "goog.abstractMethod" + "'", str3, "goog.abstractMethod");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "goog.global" + "'", str4, "goog.global");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(delegateRelationship8);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "goog.abstractMethod" + "'", str14, "goog.abstractMethod");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "goog.global" + "'", str15, "goog.global");
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "goog.abstractMethod" + "'", str36, "goog.abstractMethod");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "goog.global" + "'", str37, "goog.global");
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNull(delegateRelationship42);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(objectTypeArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "goog.abstractMethod" + "'", str76, "goog.abstractMethod");
    }

    @Test
    public void test0903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0903");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        java.lang.String str3 = closureCodingConvention0.getAbstractMethodName();
        java.lang.String str4 = closureCodingConvention0.getGlobalObject();
        boolean boolean6 = closureCodingConvention0.isExported("goog.global");
        com.google.javascript.rhino.Node node7 = null;
        com.google.javascript.jscomp.CodingConvention.DelegateRelationship delegateRelationship8 = closureCodingConvention0.getDelegateRelationship(node7);
        com.google.javascript.rhino.Node node9 = null;
        com.google.javascript.jscomp.CodingConvention.DelegateRelationship delegateRelationship10 = closureCodingConvention0.getDelegateRelationship(node9);
        com.google.javascript.rhino.Node node11 = null;
        com.google.javascript.jscomp.CodingConvention.DelegateRelationship delegateRelationship12 = closureCodingConvention0.getDelegateRelationship(node11);
        com.google.javascript.rhino.Node node13 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.jscomp.CodingConvention.Bind bind14 = closureCodingConvention0.describeFunctionBind(node13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "goog.abstractMethod" + "'", str3, "goog.abstractMethod");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "goog.global" + "'", str4, "goog.global");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(delegateRelationship8);
        org.junit.Assert.assertNull(delegateRelationship10);
        org.junit.Assert.assertNull(delegateRelationship12);
    }

    @Test
    public void test0904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0904");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        boolean boolean4 = closureCodingConvention0.isSuperClassReference("hi!");
        com.google.javascript.rhino.Node node5 = null;
        boolean boolean6 = closureCodingConvention0.isOptionalParameter(node5);
        java.lang.String str7 = closureCodingConvention0.getExportPropertyFunction();
        com.google.javascript.rhino.Node node8 = null;
        boolean boolean9 = closureCodingConvention0.isOptionalParameter(node8);
        com.google.javascript.rhino.jstype.FunctionType functionType10 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType11 = null;
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType12 = null;
        closureCodingConvention0.applySubclassRelationship(functionType10, functionType11, subclassType12);
        boolean boolean15 = closureCodingConvention0.isPrivate("goog.exportSymbol");
        com.google.javascript.rhino.Node node16 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.jscomp.CodingConvention.Bind bind17 = closureCodingConvention0.describeFunctionBind(node16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "goog.exportProperty" + "'", str7, "goog.exportProperty");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test0905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0905");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        java.lang.String str3 = closureCodingConvention0.getAbstractMethodName();
        java.lang.String str4 = closureCodingConvention0.getGlobalObject();
        boolean boolean6 = closureCodingConvention0.isExported("goog.global");
        com.google.javascript.rhino.Node node7 = null;
        com.google.javascript.jscomp.CodingConvention.DelegateRelationship delegateRelationship8 = closureCodingConvention0.getDelegateRelationship(node7);
        java.lang.String str9 = closureCodingConvention0.getExportPropertyFunction();
        com.google.javascript.rhino.Node node10 = null;
        com.google.javascript.jscomp.CodingConvention.DelegateRelationship delegateRelationship11 = closureCodingConvention0.getDelegateRelationship(node10);
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection12 = closureCodingConvention0.getAssertionFunctions();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "goog.abstractMethod" + "'", str3, "goog.abstractMethod");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "goog.global" + "'", str4, "goog.global");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(delegateRelationship8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "goog.exportProperty" + "'", str9, "goog.exportProperty");
        org.junit.Assert.assertNull(delegateRelationship11);
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection12);
    }

    @Test
    public void test0906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0906");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        boolean boolean4 = closureCodingConvention0.isSuperClassReference("hi!");
        com.google.javascript.rhino.Node node5 = null;
        boolean boolean6 = closureCodingConvention0.isOptionalParameter(node5);
        java.lang.String str7 = closureCodingConvention0.getExportPropertyFunction();
        java.lang.String str8 = closureCodingConvention0.getGlobalObject();
        boolean boolean10 = closureCodingConvention0.isValidEnumKey("");
        boolean boolean13 = closureCodingConvention0.isExported("goog.exportProperty", true);
        java.lang.String str14 = closureCodingConvention0.getGlobalObject();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "goog.exportProperty" + "'", str7, "goog.exportProperty");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "goog.global" + "'", str8, "goog.global");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "goog.global" + "'", str14, "goog.global");
    }

    @Test
    public void test0907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0907");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry3 = null;
        com.google.javascript.jscomp.Scope scope4 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention5 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node6 = null;
        boolean boolean7 = closureCodingConvention5.isOptionalParameter(node6);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry8 = null;
        com.google.javascript.jscomp.Scope scope9 = null;
        com.google.javascript.rhino.jstype.ObjectType[] objectTypeArray10 = new com.google.javascript.rhino.jstype.ObjectType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType> objectTypeList11 = new java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList11, objectTypeArray10);
        java.util.Map<java.lang.String, java.lang.String> strMap13 = null;
        closureCodingConvention5.defineDelegateProxyPrototypeProperties(jSTypeRegistry8, scope9, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList11, strMap13);
        java.util.Map<java.lang.String, java.lang.String> strMap15 = null;
        closureCodingConvention0.defineDelegateProxyPrototypeProperties(jSTypeRegistry3, scope4, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList11, strMap15);
        com.google.javascript.rhino.Node node17 = null;
        com.google.javascript.jscomp.CodingConvention.DelegateRelationship delegateRelationship18 = closureCodingConvention0.getDelegateRelationship(node17);
        boolean boolean20 = closureCodingConvention0.isValidEnumKey("");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(objectTypeArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(delegateRelationship18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test0908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0908");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        java.lang.String str3 = closureCodingConvention0.getAbstractMethodName();
        java.lang.String str4 = closureCodingConvention0.getGlobalObject();
        boolean boolean6 = closureCodingConvention0.isSuperClassReference("");
        java.lang.String str7 = closureCodingConvention0.getGlobalObject();
        boolean boolean9 = closureCodingConvention0.isSuperClassReference("goog.abstractMethod");
        com.google.javascript.rhino.jstype.FunctionType functionType10 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType11 = null;
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType12 = null;
        closureCodingConvention0.applySubclassRelationship(functionType10, functionType11, subclassType12);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "goog.abstractMethod" + "'", str3, "goog.abstractMethod");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "goog.global" + "'", str4, "goog.global");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "goog.global" + "'", str7, "goog.global");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test0909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0909");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        boolean boolean2 = closureCodingConvention0.isValidEnumKey("goog.abstractMethod");
        boolean boolean4 = closureCodingConvention0.isValidEnumKey("goog.abstractMethod");
        boolean boolean7 = closureCodingConvention0.isExported("goog.exportSymbol", false);
        com.google.javascript.rhino.Node node8 = null;
        boolean boolean9 = closureCodingConvention0.isVarArgsParameter(node8);
        com.google.javascript.jscomp.NodeTraversal nodeTraversal10 = null;
        com.google.javascript.rhino.Node node11 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.jscomp.CodingConvention.ObjectLiteralCast objectLiteralCast12 = closureCodingConvention0.getObjectLiteralCast(nodeTraversal10, node11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test0910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0910");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        boolean boolean4 = closureCodingConvention0.isSuperClassReference("hi!");
        com.google.javascript.rhino.Node node5 = null;
        boolean boolean6 = closureCodingConvention0.isOptionalParameter(node5);
        java.lang.String str7 = closureCodingConvention0.getExportPropertyFunction();
        java.lang.String str8 = closureCodingConvention0.getGlobalObject();
        boolean boolean10 = closureCodingConvention0.isValidEnumKey("");
        boolean boolean12 = closureCodingConvention0.isPrivate("goog.abstractMethod");
        com.google.javascript.rhino.Node node13 = null;
        java.util.Map<java.lang.String, java.lang.String> strMap14 = null;
        closureCodingConvention0.checkForCallingConventionDefiningCalls(node13, strMap14);
        boolean boolean17 = closureCodingConvention0.isConstantKey("goog.global");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "goog.exportProperty" + "'", str7, "goog.exportProperty");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "goog.global" + "'", str8, "goog.global");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test0911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0911");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        boolean boolean2 = closureCodingConvention0.isExported("goog.global");
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection3 = closureCodingConvention0.getAssertionFunctions();
        java.lang.String str4 = closureCodingConvention0.getGlobalObject();
        com.google.javascript.rhino.Node node5 = null;
        boolean boolean6 = closureCodingConvention0.isOptionalParameter(node5);
        java.lang.String str7 = closureCodingConvention0.getDelegateSuperclassName();
        com.google.javascript.rhino.jstype.FunctionType functionType8 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType9 = null;
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType10 = null;
        closureCodingConvention0.applySubclassRelationship(functionType8, functionType9, subclassType10);
        boolean boolean13 = closureCodingConvention0.isConstantKey("goog.exportProperty");
        com.google.javascript.jscomp.NodeTraversal nodeTraversal14 = null;
        com.google.javascript.rhino.Node node15 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.jscomp.CodingConvention.ObjectLiteralCast objectLiteralCast16 = closureCodingConvention0.getObjectLiteralCast(nodeTraversal14, node15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "goog.global" + "'", str4, "goog.global");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test0912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0912");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        boolean boolean4 = closureCodingConvention0.isSuperClassReference("hi!");
        com.google.javascript.rhino.Node node5 = null;
        boolean boolean6 = closureCodingConvention0.isOptionalParameter(node5);
        boolean boolean8 = closureCodingConvention0.isConstantKey("hi!");
        com.google.javascript.rhino.Node node9 = null;
        boolean boolean10 = closureCodingConvention0.isVarArgsParameter(node9);
        com.google.javascript.rhino.Node node11 = null;
        boolean boolean12 = closureCodingConvention0.isVarArgsParameter(node11);
        boolean boolean14 = closureCodingConvention0.isValidEnumKey("goog.abstractMethod");
        java.lang.String str15 = closureCodingConvention0.getDelegateSuperclassName();
        boolean boolean17 = closureCodingConvention0.isExported("");
        boolean boolean19 = closureCodingConvention0.isConstantKey("goog.exportProperty");
        java.lang.String str20 = closureCodingConvention0.getExportPropertyFunction();
        java.lang.String str21 = closureCodingConvention0.getExportPropertyFunction();
        boolean boolean23 = closureCodingConvention0.isExported("hi!");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "goog.exportProperty" + "'", str20, "goog.exportProperty");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "goog.exportProperty" + "'", str21, "goog.exportProperty");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test0913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0913");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        boolean boolean2 = closureCodingConvention0.isValidEnumKey("goog.abstractMethod");
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection3 = closureCodingConvention0.getAssertionFunctions();
        boolean boolean5 = closureCodingConvention0.isConstantKey("goog.exportProperty");
        com.google.javascript.rhino.Node node6 = null;
        java.util.Map<java.lang.String, java.lang.String> strMap7 = null;
        closureCodingConvention0.checkForCallingConventionDefiningCalls(node6, strMap7);
        boolean boolean10 = closureCodingConvention0.isConstantKey("");
        com.google.javascript.jscomp.NodeTraversal nodeTraversal11 = null;
        com.google.javascript.rhino.Node node12 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.jscomp.CodingConvention.ObjectLiteralCast objectLiteralCast13 = closureCodingConvention0.getObjectLiteralCast(nodeTraversal11, node12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test0914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0914");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        java.lang.String str3 = closureCodingConvention0.getAbstractMethodName();
        java.lang.String str4 = closureCodingConvention0.getGlobalObject();
        boolean boolean6 = closureCodingConvention0.isExported("goog.global");
        boolean boolean8 = closureCodingConvention0.isConstant("goog.abstractMethod");
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry9 = null;
        com.google.javascript.jscomp.Scope scope10 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention11 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node12 = null;
        boolean boolean13 = closureCodingConvention11.isOptionalParameter(node12);
        java.lang.String str14 = closureCodingConvention11.getAbstractMethodName();
        java.lang.String str15 = closureCodingConvention11.getGlobalObject();
        com.google.javascript.rhino.Node node16 = null;
        com.google.javascript.jscomp.CodingConvention.DelegateRelationship delegateRelationship17 = closureCodingConvention11.getDelegateRelationship(node16);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry18 = null;
        com.google.javascript.jscomp.Scope scope19 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention20 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node21 = null;
        boolean boolean22 = closureCodingConvention20.isOptionalParameter(node21);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry23 = null;
        com.google.javascript.jscomp.Scope scope24 = null;
        com.google.javascript.rhino.jstype.ObjectType[] objectTypeArray25 = new com.google.javascript.rhino.jstype.ObjectType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType> objectTypeList26 = new java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList26, objectTypeArray25);
        java.util.Map<java.lang.String, java.lang.String> strMap28 = null;
        closureCodingConvention20.defineDelegateProxyPrototypeProperties(jSTypeRegistry23, scope24, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList26, strMap28);
        java.util.Map<java.lang.String, java.lang.String> strMap30 = null;
        closureCodingConvention11.defineDelegateProxyPrototypeProperties(jSTypeRegistry18, scope19, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList26, strMap30);
        java.util.Map<java.lang.String, java.lang.String> strMap32 = null;
        closureCodingConvention0.defineDelegateProxyPrototypeProperties(jSTypeRegistry9, scope10, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList26, strMap32);
        boolean boolean36 = closureCodingConvention0.isExported("hi!", true);
        java.lang.String str37 = closureCodingConvention0.getGlobalObject();
        com.google.javascript.rhino.Node node38 = null;
        java.util.Map<java.lang.String, java.lang.String> strMap39 = null;
        closureCodingConvention0.checkForCallingConventionDefiningCalls(node38, strMap39);
        com.google.javascript.rhino.Node node41 = null;
        boolean boolean42 = closureCodingConvention0.isVarArgsParameter(node41);
        com.google.javascript.rhino.Node node43 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str44 = closureCodingConvention0.getSingletonGetterClassName(node43);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "goog.abstractMethod" + "'", str3, "goog.abstractMethod");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "goog.global" + "'", str4, "goog.global");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "goog.abstractMethod" + "'", str14, "goog.abstractMethod");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "goog.global" + "'", str15, "goog.global");
        org.junit.Assert.assertNull(delegateRelationship17);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(objectTypeArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "goog.global" + "'", str37, "goog.global");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test0915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0915");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        boolean boolean4 = closureCodingConvention0.isSuperClassReference("hi!");
        boolean boolean6 = closureCodingConvention0.isSuperClassReference("goog.global");
        boolean boolean8 = closureCodingConvention0.isConstantKey("goog.exportProperty");
        boolean boolean10 = closureCodingConvention0.isConstantKey("hi!");
        java.lang.String str11 = closureCodingConvention0.getGlobalObject();
        boolean boolean13 = closureCodingConvention0.isSuperClassReference("");
        java.lang.String str14 = closureCodingConvention0.getExportSymbolFunction();
        java.lang.String str15 = closureCodingConvention0.getExportPropertyFunction();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "goog.global" + "'", str11, "goog.global");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "goog.exportSymbol" + "'", str14, "goog.exportSymbol");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "goog.exportProperty" + "'", str15, "goog.exportProperty");
    }

    @Test
    public void test0916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0916");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        boolean boolean4 = closureCodingConvention0.isSuperClassReference("hi!");
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = null;
        com.google.javascript.jscomp.Scope scope6 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention7 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node8 = null;
        boolean boolean9 = closureCodingConvention7.isOptionalParameter(node8);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry10 = null;
        com.google.javascript.jscomp.Scope scope11 = null;
        com.google.javascript.rhino.jstype.ObjectType[] objectTypeArray12 = new com.google.javascript.rhino.jstype.ObjectType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType> objectTypeList13 = new java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList13, objectTypeArray12);
        java.util.Map<java.lang.String, java.lang.String> strMap15 = null;
        closureCodingConvention7.defineDelegateProxyPrototypeProperties(jSTypeRegistry10, scope11, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList13, strMap15);
        java.util.Map<java.lang.String, java.lang.String> strMap17 = null;
        closureCodingConvention0.defineDelegateProxyPrototypeProperties(jSTypeRegistry5, scope6, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList13, strMap17);
        com.google.javascript.rhino.Node node19 = null;
        java.util.Map<java.lang.String, java.lang.String> strMap20 = null;
        closureCodingConvention0.checkForCallingConventionDefiningCalls(node19, strMap20);
        com.google.javascript.rhino.jstype.ObjectType objectType22 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType23 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType24 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType25 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType26 = null;
        closureCodingConvention0.applyDelegateRelationship(objectType22, objectType23, objectType24, functionType25, functionType26);
        com.google.javascript.rhino.jstype.ObjectType objectType28 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType29 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType30 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType31 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType32 = null;
        closureCodingConvention0.applyDelegateRelationship(objectType28, objectType29, objectType30, functionType31, functionType32);
        boolean boolean35 = closureCodingConvention0.isValidEnumKey("goog.exportSymbol");
        com.google.javascript.rhino.jstype.FunctionType functionType36 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType37 = null;
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType38 = null;
        closureCodingConvention0.applySubclassRelationship(functionType36, functionType37, subclassType38);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(objectTypeArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
    }

    @Test
    public void test0917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0917");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        boolean boolean4 = closureCodingConvention0.isSuperClassReference("hi!");
        com.google.javascript.rhino.Node node5 = null;
        boolean boolean6 = closureCodingConvention0.isOptionalParameter(node5);
        boolean boolean8 = closureCodingConvention0.isExported("hi!");
        boolean boolean10 = closureCodingConvention0.isConstant("goog.exportProperty");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test0918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0918");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        boolean boolean4 = closureCodingConvention0.isSuperClassReference("hi!");
        boolean boolean6 = closureCodingConvention0.isSuperClassReference("goog.global");
        boolean boolean8 = closureCodingConvention0.isConstantKey("goog.exportProperty");
        com.google.javascript.rhino.jstype.FunctionType functionType9 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType10 = null;
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType11 = null;
        closureCodingConvention0.applySubclassRelationship(functionType9, functionType10, subclassType11);
        com.google.javascript.rhino.jstype.ObjectType objectType13 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType14 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType15 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType16 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType17 = null;
        closureCodingConvention0.applyDelegateRelationship(objectType13, objectType14, objectType15, functionType16, functionType17);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test0919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0919");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        boolean boolean4 = closureCodingConvention0.isSuperClassReference("hi!");
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = null;
        com.google.javascript.jscomp.Scope scope6 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention7 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node8 = null;
        boolean boolean9 = closureCodingConvention7.isOptionalParameter(node8);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry10 = null;
        com.google.javascript.jscomp.Scope scope11 = null;
        com.google.javascript.rhino.jstype.ObjectType[] objectTypeArray12 = new com.google.javascript.rhino.jstype.ObjectType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType> objectTypeList13 = new java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList13, objectTypeArray12);
        java.util.Map<java.lang.String, java.lang.String> strMap15 = null;
        closureCodingConvention7.defineDelegateProxyPrototypeProperties(jSTypeRegistry10, scope11, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList13, strMap15);
        java.util.Map<java.lang.String, java.lang.String> strMap17 = null;
        closureCodingConvention0.defineDelegateProxyPrototypeProperties(jSTypeRegistry5, scope6, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList13, strMap17);
        java.lang.String str19 = closureCodingConvention0.getAbstractMethodName();
        com.google.javascript.rhino.Node node20 = null;
        com.google.javascript.jscomp.CodingConvention.DelegateRelationship delegateRelationship21 = closureCodingConvention0.getDelegateRelationship(node20);
        boolean boolean23 = closureCodingConvention0.isConstantKey("goog.abstractMethod");
        com.google.javascript.rhino.Node node24 = null;
        boolean boolean25 = closureCodingConvention0.isVarArgsParameter(node24);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(objectTypeArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "goog.abstractMethod" + "'", str19, "goog.abstractMethod");
        org.junit.Assert.assertNull(delegateRelationship21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test0920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0920");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.jstype.ObjectType objectType1 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType2 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType3 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType4 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType5 = null;
        closureCodingConvention0.applyDelegateRelationship(objectType1, objectType2, objectType3, functionType4, functionType5);
        java.lang.String str7 = closureCodingConvention0.getGlobalObject();
        java.lang.String str8 = closureCodingConvention0.getDelegateSuperclassName();
        boolean boolean10 = closureCodingConvention0.isValidEnumKey("goog.exportSymbol");
        java.lang.String str11 = closureCodingConvention0.getAbstractMethodName();
        boolean boolean13 = closureCodingConvention0.isExported("hi!");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "goog.global" + "'", str7, "goog.global");
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "goog.abstractMethod" + "'", str11, "goog.abstractMethod");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test0921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0921");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        java.lang.String str3 = closureCodingConvention0.getAbstractMethodName();
        java.lang.String str4 = closureCodingConvention0.getGlobalObject();
        boolean boolean6 = closureCodingConvention0.isExported("goog.global");
        boolean boolean8 = closureCodingConvention0.isConstant("goog.abstractMethod");
        com.google.javascript.rhino.jstype.FunctionType functionType9 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType10 = null;
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType11 = null;
        closureCodingConvention0.applySubclassRelationship(functionType9, functionType10, subclassType11);
        com.google.javascript.rhino.jstype.FunctionType functionType13 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType14 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType15 = null;
        // The following exception was thrown during execution in test generation
        try {
            closureCodingConvention0.applySingletonGetter(functionType13, functionType14, objectType15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "goog.abstractMethod" + "'", str3, "goog.abstractMethod");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "goog.global" + "'", str4, "goog.global");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test0922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0922");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        java.lang.String str3 = closureCodingConvention0.getAbstractMethodName();
        java.lang.String str4 = closureCodingConvention0.getGlobalObject();
        com.google.javascript.rhino.Node node5 = null;
        java.util.Map<java.lang.String, java.lang.String> strMap6 = null;
        closureCodingConvention0.checkForCallingConventionDefiningCalls(node5, strMap6);
        boolean boolean9 = closureCodingConvention0.isConstant("");
        java.lang.String str10 = closureCodingConvention0.getExportPropertyFunction();
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry11 = null;
        com.google.javascript.jscomp.Scope scope12 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention13 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node14 = null;
        boolean boolean15 = closureCodingConvention13.isOptionalParameter(node14);
        java.lang.String str16 = closureCodingConvention13.getAbstractMethodName();
        java.lang.String str17 = closureCodingConvention13.getGlobalObject();
        boolean boolean19 = closureCodingConvention13.isExported("goog.global");
        boolean boolean21 = closureCodingConvention13.isConstant("goog.abstractMethod");
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry22 = null;
        com.google.javascript.jscomp.Scope scope23 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention24 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node25 = null;
        boolean boolean26 = closureCodingConvention24.isOptionalParameter(node25);
        java.lang.String str27 = closureCodingConvention24.getAbstractMethodName();
        java.lang.String str28 = closureCodingConvention24.getGlobalObject();
        com.google.javascript.rhino.Node node29 = null;
        com.google.javascript.jscomp.CodingConvention.DelegateRelationship delegateRelationship30 = closureCodingConvention24.getDelegateRelationship(node29);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry31 = null;
        com.google.javascript.jscomp.Scope scope32 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention33 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node34 = null;
        boolean boolean35 = closureCodingConvention33.isOptionalParameter(node34);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry36 = null;
        com.google.javascript.jscomp.Scope scope37 = null;
        com.google.javascript.rhino.jstype.ObjectType[] objectTypeArray38 = new com.google.javascript.rhino.jstype.ObjectType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType> objectTypeList39 = new java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList39, objectTypeArray38);
        java.util.Map<java.lang.String, java.lang.String> strMap41 = null;
        closureCodingConvention33.defineDelegateProxyPrototypeProperties(jSTypeRegistry36, scope37, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList39, strMap41);
        java.util.Map<java.lang.String, java.lang.String> strMap43 = null;
        closureCodingConvention24.defineDelegateProxyPrototypeProperties(jSTypeRegistry31, scope32, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList39, strMap43);
        java.util.Map<java.lang.String, java.lang.String> strMap45 = null;
        closureCodingConvention13.defineDelegateProxyPrototypeProperties(jSTypeRegistry22, scope23, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList39, strMap45);
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection47 = closureCodingConvention13.getAssertionFunctions();
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry48 = null;
        com.google.javascript.jscomp.Scope scope49 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention50 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node51 = null;
        boolean boolean52 = closureCodingConvention50.isOptionalParameter(node51);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry53 = null;
        com.google.javascript.jscomp.Scope scope54 = null;
        com.google.javascript.rhino.jstype.ObjectType[] objectTypeArray55 = new com.google.javascript.rhino.jstype.ObjectType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType> objectTypeList56 = new java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList56, objectTypeArray55);
        java.util.Map<java.lang.String, java.lang.String> strMap58 = null;
        closureCodingConvention50.defineDelegateProxyPrototypeProperties(jSTypeRegistry53, scope54, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList56, strMap58);
        java.util.Map<java.lang.String, java.lang.String> strMap60 = null;
        closureCodingConvention13.defineDelegateProxyPrototypeProperties(jSTypeRegistry48, scope49, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList56, strMap60);
        java.util.Map<java.lang.String, java.lang.String> strMap62 = null;
        closureCodingConvention0.defineDelegateProxyPrototypeProperties(jSTypeRegistry11, scope12, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList56, strMap62);
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection64 = closureCodingConvention0.getAssertionFunctions();
        boolean boolean67 = closureCodingConvention0.isExported("goog.exportSymbol", false);
        com.google.javascript.rhino.jstype.FunctionType functionType68 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType69 = null;
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType70 = null;
        closureCodingConvention0.applySubclassRelationship(functionType68, functionType69, subclassType70);
        com.google.javascript.rhino.Node node72 = null;
        java.util.Map<java.lang.String, java.lang.String> strMap73 = null;
        closureCodingConvention0.checkForCallingConventionDefiningCalls(node72, strMap73);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "goog.abstractMethod" + "'", str3, "goog.abstractMethod");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "goog.global" + "'", str4, "goog.global");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "goog.exportProperty" + "'", str10, "goog.exportProperty");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "goog.abstractMethod" + "'", str16, "goog.abstractMethod");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "goog.global" + "'", str17, "goog.global");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "goog.abstractMethod" + "'", str27, "goog.abstractMethod");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "goog.global" + "'", str28, "goog.global");
        org.junit.Assert.assertNull(delegateRelationship30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(objectTypeArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection47);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(objectTypeArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection64);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
    }

    @Test
    public void test0923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0923");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        java.lang.String str3 = closureCodingConvention0.getAbstractMethodName();
        java.lang.String str4 = closureCodingConvention0.getGlobalObject();
        boolean boolean6 = closureCodingConvention0.isExported("goog.global");
        boolean boolean8 = closureCodingConvention0.isConstant("goog.abstractMethod");
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry9 = null;
        com.google.javascript.jscomp.Scope scope10 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention11 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node12 = null;
        boolean boolean13 = closureCodingConvention11.isOptionalParameter(node12);
        java.lang.String str14 = closureCodingConvention11.getAbstractMethodName();
        java.lang.String str15 = closureCodingConvention11.getGlobalObject();
        com.google.javascript.rhino.Node node16 = null;
        com.google.javascript.jscomp.CodingConvention.DelegateRelationship delegateRelationship17 = closureCodingConvention11.getDelegateRelationship(node16);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry18 = null;
        com.google.javascript.jscomp.Scope scope19 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention20 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node21 = null;
        boolean boolean22 = closureCodingConvention20.isOptionalParameter(node21);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry23 = null;
        com.google.javascript.jscomp.Scope scope24 = null;
        com.google.javascript.rhino.jstype.ObjectType[] objectTypeArray25 = new com.google.javascript.rhino.jstype.ObjectType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType> objectTypeList26 = new java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList26, objectTypeArray25);
        java.util.Map<java.lang.String, java.lang.String> strMap28 = null;
        closureCodingConvention20.defineDelegateProxyPrototypeProperties(jSTypeRegistry23, scope24, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList26, strMap28);
        java.util.Map<java.lang.String, java.lang.String> strMap30 = null;
        closureCodingConvention11.defineDelegateProxyPrototypeProperties(jSTypeRegistry18, scope19, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList26, strMap30);
        java.util.Map<java.lang.String, java.lang.String> strMap32 = null;
        closureCodingConvention0.defineDelegateProxyPrototypeProperties(jSTypeRegistry9, scope10, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList26, strMap32);
        java.lang.String str34 = closureCodingConvention0.getExportSymbolFunction();
        java.lang.String str35 = closureCodingConvention0.getExportSymbolFunction();
        java.lang.String str36 = closureCodingConvention0.getExportSymbolFunction();
        java.lang.String str37 = closureCodingConvention0.getDelegateSuperclassName();
        com.google.javascript.rhino.jstype.ObjectType objectType38 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType39 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType40 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType41 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType42 = null;
        closureCodingConvention0.applyDelegateRelationship(objectType38, objectType39, objectType40, functionType41, functionType42);
        com.google.javascript.rhino.Node node44 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship45 = closureCodingConvention0.getClassesDefinedByCall(node44);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "goog.abstractMethod" + "'", str3, "goog.abstractMethod");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "goog.global" + "'", str4, "goog.global");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "goog.abstractMethod" + "'", str14, "goog.abstractMethod");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "goog.global" + "'", str15, "goog.global");
        org.junit.Assert.assertNull(delegateRelationship17);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(objectTypeArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "goog.exportSymbol" + "'", str34, "goog.exportSymbol");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "goog.exportSymbol" + "'", str35, "goog.exportSymbol");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "goog.exportSymbol" + "'", str36, "goog.exportSymbol");
        org.junit.Assert.assertNull(str37);
    }

    @Test
    public void test0924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0924");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        java.lang.String str3 = closureCodingConvention0.getAbstractMethodName();
        java.lang.String str4 = closureCodingConvention0.getGlobalObject();
        com.google.javascript.rhino.Node node5 = null;
        com.google.javascript.jscomp.CodingConvention.DelegateRelationship delegateRelationship6 = closureCodingConvention0.getDelegateRelationship(node5);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry7 = null;
        com.google.javascript.jscomp.Scope scope8 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention9 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node10 = null;
        boolean boolean11 = closureCodingConvention9.isOptionalParameter(node10);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry12 = null;
        com.google.javascript.jscomp.Scope scope13 = null;
        com.google.javascript.rhino.jstype.ObjectType[] objectTypeArray14 = new com.google.javascript.rhino.jstype.ObjectType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType> objectTypeList15 = new java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList15, objectTypeArray14);
        java.util.Map<java.lang.String, java.lang.String> strMap17 = null;
        closureCodingConvention9.defineDelegateProxyPrototypeProperties(jSTypeRegistry12, scope13, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList15, strMap17);
        java.util.Map<java.lang.String, java.lang.String> strMap19 = null;
        closureCodingConvention0.defineDelegateProxyPrototypeProperties(jSTypeRegistry7, scope8, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList15, strMap19);
        java.lang.String str21 = closureCodingConvention0.getDelegateSuperclassName();
        boolean boolean23 = closureCodingConvention0.isValidEnumKey("");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "goog.abstractMethod" + "'", str3, "goog.abstractMethod");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "goog.global" + "'", str4, "goog.global");
        org.junit.Assert.assertNull(delegateRelationship6);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(objectTypeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test0925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0925");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        boolean boolean2 = closureCodingConvention0.isExported("goog.global");
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection3 = closureCodingConvention0.getAssertionFunctions();
        java.lang.String str4 = closureCodingConvention0.getGlobalObject();
        com.google.javascript.rhino.Node node5 = null;
        boolean boolean6 = closureCodingConvention0.isOptionalParameter(node5);
        java.lang.String str7 = closureCodingConvention0.getDelegateSuperclassName();
        boolean boolean9 = closureCodingConvention0.isConstant("");
        com.google.javascript.rhino.Node node10 = null;
        com.google.javascript.jscomp.CodingConvention.DelegateRelationship delegateRelationship11 = closureCodingConvention0.getDelegateRelationship(node10);
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection12 = closureCodingConvention0.getAssertionFunctions();
        com.google.javascript.rhino.Node node13 = null;
        boolean boolean14 = closureCodingConvention0.isVarArgsParameter(node13);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "goog.global" + "'", str4, "goog.global");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(delegateRelationship11);
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test0926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0926");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        boolean boolean4 = closureCodingConvention0.isSuperClassReference("hi!");
        boolean boolean6 = closureCodingConvention0.isSuperClassReference("goog.global");
        boolean boolean8 = closureCodingConvention0.isConstant("goog.abstractMethod");
        boolean boolean10 = closureCodingConvention0.isValidEnumKey("hi!");
        java.lang.String str11 = closureCodingConvention0.getGlobalObject();
        boolean boolean13 = closureCodingConvention0.isPrivate("");
        com.google.javascript.jscomp.NodeTraversal nodeTraversal14 = null;
        com.google.javascript.rhino.Node node15 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.jscomp.CodingConvention.ObjectLiteralCast objectLiteralCast16 = closureCodingConvention0.getObjectLiteralCast(nodeTraversal14, node15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "goog.global" + "'", str11, "goog.global");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test0927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0927");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        boolean boolean4 = closureCodingConvention0.isSuperClassReference("hi!");
        com.google.javascript.rhino.Node node5 = null;
        boolean boolean6 = closureCodingConvention0.isOptionalParameter(node5);
        boolean boolean8 = closureCodingConvention0.isConstantKey("hi!");
        com.google.javascript.rhino.Node node9 = null;
        boolean boolean10 = closureCodingConvention0.isVarArgsParameter(node9);
        boolean boolean12 = closureCodingConvention0.isExported("");
        java.lang.String str13 = closureCodingConvention0.getDelegateSuperclassName();
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry14 = null;
        com.google.javascript.jscomp.Scope scope15 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention16 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node17 = null;
        boolean boolean18 = closureCodingConvention16.isOptionalParameter(node17);
        java.lang.String str19 = closureCodingConvention16.getAbstractMethodName();
        java.lang.String str20 = closureCodingConvention16.getGlobalObject();
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection21 = closureCodingConvention16.getAssertionFunctions();
        boolean boolean23 = closureCodingConvention16.isConstant("goog.global");
        com.google.javascript.rhino.Node node24 = null;
        com.google.javascript.jscomp.CodingConvention.DelegateRelationship delegateRelationship25 = closureCodingConvention16.getDelegateRelationship(node24);
        com.google.javascript.rhino.jstype.ObjectType objectType26 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType27 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType28 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType29 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType30 = null;
        closureCodingConvention16.applyDelegateRelationship(objectType26, objectType27, objectType28, functionType29, functionType30);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry32 = null;
        com.google.javascript.jscomp.Scope scope33 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention34 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node35 = null;
        boolean boolean36 = closureCodingConvention34.isOptionalParameter(node35);
        boolean boolean38 = closureCodingConvention34.isSuperClassReference("hi!");
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry39 = null;
        com.google.javascript.jscomp.Scope scope40 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention41 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node42 = null;
        boolean boolean43 = closureCodingConvention41.isOptionalParameter(node42);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry44 = null;
        com.google.javascript.jscomp.Scope scope45 = null;
        com.google.javascript.rhino.jstype.ObjectType[] objectTypeArray46 = new com.google.javascript.rhino.jstype.ObjectType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType> objectTypeList47 = new java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList47, objectTypeArray46);
        java.util.Map<java.lang.String, java.lang.String> strMap49 = null;
        closureCodingConvention41.defineDelegateProxyPrototypeProperties(jSTypeRegistry44, scope45, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList47, strMap49);
        java.util.Map<java.lang.String, java.lang.String> strMap51 = null;
        closureCodingConvention34.defineDelegateProxyPrototypeProperties(jSTypeRegistry39, scope40, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList47, strMap51);
        java.util.Map<java.lang.String, java.lang.String> strMap53 = null;
        closureCodingConvention16.defineDelegateProxyPrototypeProperties(jSTypeRegistry32, scope33, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList47, strMap53);
        java.util.Map<java.lang.String, java.lang.String> strMap55 = null;
        closureCodingConvention0.defineDelegateProxyPrototypeProperties(jSTypeRegistry14, scope15, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList47, strMap55);
        com.google.javascript.rhino.Node node57 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str58 = closureCodingConvention0.getSingletonGetterClassName(node57);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "goog.abstractMethod" + "'", str19, "goog.abstractMethod");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "goog.global" + "'", str20, "goog.global");
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(delegateRelationship25);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(objectTypeArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test0928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0928");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        boolean boolean4 = closureCodingConvention0.isSuperClassReference("hi!");
        com.google.javascript.rhino.Node node5 = null;
        boolean boolean6 = closureCodingConvention0.isOptionalParameter(node5);
        java.lang.String str7 = closureCodingConvention0.getExportPropertyFunction();
        java.lang.String str8 = closureCodingConvention0.getGlobalObject();
        boolean boolean10 = closureCodingConvention0.isValidEnumKey("");
        java.lang.String str11 = closureCodingConvention0.getDelegateSuperclassName();
        boolean boolean13 = closureCodingConvention0.isPrivate("hi!");
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry14 = null;
        com.google.javascript.jscomp.Scope scope15 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention16 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node17 = null;
        boolean boolean18 = closureCodingConvention16.isOptionalParameter(node17);
        java.lang.String str19 = closureCodingConvention16.getAbstractMethodName();
        java.lang.String str20 = closureCodingConvention16.getGlobalObject();
        com.google.javascript.rhino.Node node21 = null;
        java.util.Map<java.lang.String, java.lang.String> strMap22 = null;
        closureCodingConvention16.checkForCallingConventionDefiningCalls(node21, strMap22);
        boolean boolean25 = closureCodingConvention16.isConstant("");
        java.lang.String str26 = closureCodingConvention16.getExportPropertyFunction();
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry27 = null;
        com.google.javascript.jscomp.Scope scope28 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention29 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node30 = null;
        boolean boolean31 = closureCodingConvention29.isOptionalParameter(node30);
        java.lang.String str32 = closureCodingConvention29.getAbstractMethodName();
        java.lang.String str33 = closureCodingConvention29.getGlobalObject();
        boolean boolean35 = closureCodingConvention29.isExported("goog.global");
        boolean boolean37 = closureCodingConvention29.isConstant("goog.abstractMethod");
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry38 = null;
        com.google.javascript.jscomp.Scope scope39 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention40 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node41 = null;
        boolean boolean42 = closureCodingConvention40.isOptionalParameter(node41);
        java.lang.String str43 = closureCodingConvention40.getAbstractMethodName();
        java.lang.String str44 = closureCodingConvention40.getGlobalObject();
        com.google.javascript.rhino.Node node45 = null;
        com.google.javascript.jscomp.CodingConvention.DelegateRelationship delegateRelationship46 = closureCodingConvention40.getDelegateRelationship(node45);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry47 = null;
        com.google.javascript.jscomp.Scope scope48 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention49 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node50 = null;
        boolean boolean51 = closureCodingConvention49.isOptionalParameter(node50);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry52 = null;
        com.google.javascript.jscomp.Scope scope53 = null;
        com.google.javascript.rhino.jstype.ObjectType[] objectTypeArray54 = new com.google.javascript.rhino.jstype.ObjectType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType> objectTypeList55 = new java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList55, objectTypeArray54);
        java.util.Map<java.lang.String, java.lang.String> strMap57 = null;
        closureCodingConvention49.defineDelegateProxyPrototypeProperties(jSTypeRegistry52, scope53, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList55, strMap57);
        java.util.Map<java.lang.String, java.lang.String> strMap59 = null;
        closureCodingConvention40.defineDelegateProxyPrototypeProperties(jSTypeRegistry47, scope48, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList55, strMap59);
        java.util.Map<java.lang.String, java.lang.String> strMap61 = null;
        closureCodingConvention29.defineDelegateProxyPrototypeProperties(jSTypeRegistry38, scope39, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList55, strMap61);
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection63 = closureCodingConvention29.getAssertionFunctions();
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry64 = null;
        com.google.javascript.jscomp.Scope scope65 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention66 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node67 = null;
        boolean boolean68 = closureCodingConvention66.isOptionalParameter(node67);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry69 = null;
        com.google.javascript.jscomp.Scope scope70 = null;
        com.google.javascript.rhino.jstype.ObjectType[] objectTypeArray71 = new com.google.javascript.rhino.jstype.ObjectType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType> objectTypeList72 = new java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType>();
        boolean boolean73 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList72, objectTypeArray71);
        java.util.Map<java.lang.String, java.lang.String> strMap74 = null;
        closureCodingConvention66.defineDelegateProxyPrototypeProperties(jSTypeRegistry69, scope70, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList72, strMap74);
        java.util.Map<java.lang.String, java.lang.String> strMap76 = null;
        closureCodingConvention29.defineDelegateProxyPrototypeProperties(jSTypeRegistry64, scope65, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList72, strMap76);
        java.util.Map<java.lang.String, java.lang.String> strMap78 = null;
        closureCodingConvention16.defineDelegateProxyPrototypeProperties(jSTypeRegistry27, scope28, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList72, strMap78);
        java.util.Map<java.lang.String, java.lang.String> strMap80 = null;
        closureCodingConvention0.defineDelegateProxyPrototypeProperties(jSTypeRegistry14, scope15, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList72, strMap80);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "goog.exportProperty" + "'", str7, "goog.exportProperty");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "goog.global" + "'", str8, "goog.global");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "goog.abstractMethod" + "'", str19, "goog.abstractMethod");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "goog.global" + "'", str20, "goog.global");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "goog.exportProperty" + "'", str26, "goog.exportProperty");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "goog.abstractMethod" + "'", str32, "goog.abstractMethod");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "goog.global" + "'", str33, "goog.global");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "goog.abstractMethod" + "'", str43, "goog.abstractMethod");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "goog.global" + "'", str44, "goog.global");
        org.junit.Assert.assertNull(delegateRelationship46);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(objectTypeArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection63);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(objectTypeArray71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
    }

    @Test
    public void test0929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0929");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        boolean boolean4 = closureCodingConvention0.isSuperClassReference("hi!");
        com.google.javascript.rhino.Node node5 = null;
        boolean boolean6 = closureCodingConvention0.isOptionalParameter(node5);
        boolean boolean8 = closureCodingConvention0.isConstantKey("hi!");
        com.google.javascript.rhino.Node node9 = null;
        boolean boolean10 = closureCodingConvention0.isVarArgsParameter(node9);
        boolean boolean12 = closureCodingConvention0.isExported("");
        com.google.javascript.rhino.jstype.ObjectType objectType13 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType14 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType15 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType16 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType17 = null;
        closureCodingConvention0.applyDelegateRelationship(objectType13, objectType14, objectType15, functionType16, functionType17);
        boolean boolean20 = closureCodingConvention0.isConstantKey("goog.exportSymbol");
        com.google.javascript.rhino.Node node21 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean22 = closureCodingConvention0.isPropertyTestFunction(node21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test0930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0930");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        java.lang.String str3 = closureCodingConvention0.getAbstractMethodName();
        java.lang.String str4 = closureCodingConvention0.getGlobalObject();
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection5 = closureCodingConvention0.getAssertionFunctions();
        boolean boolean7 = closureCodingConvention0.isConstant("goog.global");
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection8 = closureCodingConvention0.getAssertionFunctions();
        boolean boolean10 = closureCodingConvention0.isValidEnumKey("goog.exportProperty");
        com.google.javascript.rhino.Node node11 = null;
        com.google.javascript.jscomp.CodingConvention.DelegateRelationship delegateRelationship12 = closureCodingConvention0.getDelegateRelationship(node11);
        com.google.javascript.rhino.jstype.FunctionType functionType13 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType14 = null;
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType15 = null;
        closureCodingConvention0.applySubclassRelationship(functionType13, functionType14, subclassType15);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "goog.abstractMethod" + "'", str3, "goog.abstractMethod");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "goog.global" + "'", str4, "goog.global");
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(delegateRelationship12);
    }

    @Test
    public void test0931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0931");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        boolean boolean4 = closureCodingConvention0.isSuperClassReference("hi!");
        com.google.javascript.rhino.Node node5 = null;
        boolean boolean6 = closureCodingConvention0.isOptionalParameter(node5);
        java.lang.String str7 = closureCodingConvention0.getExportPropertyFunction();
        com.google.javascript.rhino.Node node8 = null;
        boolean boolean9 = closureCodingConvention0.isOptionalParameter(node8);
        com.google.javascript.rhino.jstype.FunctionType functionType10 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType11 = null;
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType12 = null;
        closureCodingConvention0.applySubclassRelationship(functionType10, functionType11, subclassType12);
        boolean boolean15 = closureCodingConvention0.isExported("goog.exportSymbol");
        boolean boolean17 = closureCodingConvention0.isExported("");
        com.google.javascript.rhino.Node node18 = null;
        boolean boolean19 = closureCodingConvention0.isVarArgsParameter(node18);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "goog.exportProperty" + "'", str7, "goog.exportProperty");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test0932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0932");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        boolean boolean4 = closureCodingConvention0.isSuperClassReference("hi!");
        com.google.javascript.rhino.Node node5 = null;
        boolean boolean6 = closureCodingConvention0.isOptionalParameter(node5);
        boolean boolean8 = closureCodingConvention0.isExported("hi!");
        java.lang.String str9 = closureCodingConvention0.getExportPropertyFunction();
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry10 = null;
        com.google.javascript.jscomp.Scope scope11 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention12 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node13 = null;
        boolean boolean14 = closureCodingConvention12.isOptionalParameter(node13);
        java.lang.String str15 = closureCodingConvention12.getAbstractMethodName();
        java.lang.String str16 = closureCodingConvention12.getGlobalObject();
        com.google.javascript.rhino.Node node17 = null;
        java.util.Map<java.lang.String, java.lang.String> strMap18 = null;
        closureCodingConvention12.checkForCallingConventionDefiningCalls(node17, strMap18);
        boolean boolean21 = closureCodingConvention12.isValidEnumKey("goog.abstractMethod");
        java.lang.String str22 = closureCodingConvention12.getExportSymbolFunction();
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry23 = null;
        com.google.javascript.jscomp.Scope scope24 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention25 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node26 = null;
        boolean boolean27 = closureCodingConvention25.isOptionalParameter(node26);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry28 = null;
        com.google.javascript.jscomp.Scope scope29 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention30 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node31 = null;
        boolean boolean32 = closureCodingConvention30.isOptionalParameter(node31);
        boolean boolean34 = closureCodingConvention30.isSuperClassReference("hi!");
        com.google.javascript.rhino.Node node35 = null;
        boolean boolean36 = closureCodingConvention30.isOptionalParameter(node35);
        boolean boolean38 = closureCodingConvention30.isConstantKey("hi!");
        com.google.javascript.rhino.Node node39 = null;
        boolean boolean40 = closureCodingConvention30.isVarArgsParameter(node39);
        boolean boolean42 = closureCodingConvention30.isExported("");
        com.google.javascript.rhino.Node node43 = null;
        boolean boolean44 = closureCodingConvention30.isVarArgsParameter(node43);
        java.lang.String str45 = closureCodingConvention30.getExportSymbolFunction();
        java.lang.String str46 = closureCodingConvention30.getAbstractMethodName();
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry47 = null;
        com.google.javascript.jscomp.Scope scope48 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention49 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node50 = null;
        boolean boolean51 = closureCodingConvention49.isOptionalParameter(node50);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry52 = null;
        com.google.javascript.jscomp.Scope scope53 = null;
        com.google.javascript.rhino.jstype.ObjectType[] objectTypeArray54 = new com.google.javascript.rhino.jstype.ObjectType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType> objectTypeList55 = new java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList55, objectTypeArray54);
        java.util.Map<java.lang.String, java.lang.String> strMap57 = null;
        closureCodingConvention49.defineDelegateProxyPrototypeProperties(jSTypeRegistry52, scope53, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList55, strMap57);
        java.util.Map<java.lang.String, java.lang.String> strMap59 = null;
        closureCodingConvention30.defineDelegateProxyPrototypeProperties(jSTypeRegistry47, scope48, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList55, strMap59);
        java.util.Map<java.lang.String, java.lang.String> strMap61 = null;
        closureCodingConvention25.defineDelegateProxyPrototypeProperties(jSTypeRegistry28, scope29, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList55, strMap61);
        java.util.Map<java.lang.String, java.lang.String> strMap63 = null;
        closureCodingConvention12.defineDelegateProxyPrototypeProperties(jSTypeRegistry23, scope24, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList55, strMap63);
        java.util.Map<java.lang.String, java.lang.String> strMap65 = null;
        closureCodingConvention0.defineDelegateProxyPrototypeProperties(jSTypeRegistry10, scope11, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList55, strMap65);
        com.google.javascript.rhino.Node node67 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship68 = closureCodingConvention0.getClassesDefinedByCall(node67);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "goog.exportProperty" + "'", str9, "goog.exportProperty");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "goog.abstractMethod" + "'", str15, "goog.abstractMethod");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "goog.global" + "'", str16, "goog.global");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "goog.exportSymbol" + "'", str22, "goog.exportSymbol");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "goog.exportSymbol" + "'", str45, "goog.exportSymbol");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "goog.abstractMethod" + "'", str46, "goog.abstractMethod");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(objectTypeArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test0933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0933");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        java.lang.String str3 = closureCodingConvention0.getAbstractMethodName();
        java.lang.String str4 = closureCodingConvention0.getGlobalObject();
        boolean boolean6 = closureCodingConvention0.isExported("goog.global");
        boolean boolean8 = closureCodingConvention0.isConstant("goog.abstractMethod");
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry9 = null;
        com.google.javascript.jscomp.Scope scope10 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention11 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node12 = null;
        boolean boolean13 = closureCodingConvention11.isOptionalParameter(node12);
        java.lang.String str14 = closureCodingConvention11.getAbstractMethodName();
        java.lang.String str15 = closureCodingConvention11.getGlobalObject();
        com.google.javascript.rhino.Node node16 = null;
        com.google.javascript.jscomp.CodingConvention.DelegateRelationship delegateRelationship17 = closureCodingConvention11.getDelegateRelationship(node16);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry18 = null;
        com.google.javascript.jscomp.Scope scope19 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention20 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node21 = null;
        boolean boolean22 = closureCodingConvention20.isOptionalParameter(node21);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry23 = null;
        com.google.javascript.jscomp.Scope scope24 = null;
        com.google.javascript.rhino.jstype.ObjectType[] objectTypeArray25 = new com.google.javascript.rhino.jstype.ObjectType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType> objectTypeList26 = new java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList26, objectTypeArray25);
        java.util.Map<java.lang.String, java.lang.String> strMap28 = null;
        closureCodingConvention20.defineDelegateProxyPrototypeProperties(jSTypeRegistry23, scope24, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList26, strMap28);
        java.util.Map<java.lang.String, java.lang.String> strMap30 = null;
        closureCodingConvention11.defineDelegateProxyPrototypeProperties(jSTypeRegistry18, scope19, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList26, strMap30);
        java.util.Map<java.lang.String, java.lang.String> strMap32 = null;
        closureCodingConvention0.defineDelegateProxyPrototypeProperties(jSTypeRegistry9, scope10, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList26, strMap32);
        java.lang.String str34 = closureCodingConvention0.getExportSymbolFunction();
        java.lang.String str35 = closureCodingConvention0.getExportSymbolFunction();
        java.lang.String str36 = closureCodingConvention0.getExportSymbolFunction();
        java.lang.String str37 = closureCodingConvention0.getDelegateSuperclassName();
        com.google.javascript.rhino.jstype.ObjectType objectType38 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType39 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType40 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType41 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType42 = null;
        closureCodingConvention0.applyDelegateRelationship(objectType38, objectType39, objectType40, functionType41, functionType42);
        boolean boolean45 = closureCodingConvention0.isPrivate("goog.global");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "goog.abstractMethod" + "'", str3, "goog.abstractMethod");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "goog.global" + "'", str4, "goog.global");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "goog.abstractMethod" + "'", str14, "goog.abstractMethod");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "goog.global" + "'", str15, "goog.global");
        org.junit.Assert.assertNull(delegateRelationship17);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(objectTypeArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "goog.exportSymbol" + "'", str34, "goog.exportSymbol");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "goog.exportSymbol" + "'", str35, "goog.exportSymbol");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "goog.exportSymbol" + "'", str36, "goog.exportSymbol");
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test0934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0934");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.jstype.ObjectType objectType1 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType2 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType3 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType4 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType5 = null;
        closureCodingConvention0.applyDelegateRelationship(objectType1, objectType2, objectType3, functionType4, functionType5);
        com.google.javascript.rhino.Node node7 = null;
        boolean boolean8 = closureCodingConvention0.isOptionalParameter(node7);
        java.lang.String str9 = closureCodingConvention0.getAbstractMethodName();
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "goog.abstractMethod" + "'", str9, "goog.abstractMethod");
    }

    @Test
    public void test0935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0935");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        boolean boolean2 = closureCodingConvention0.isValidEnumKey("goog.abstractMethod");
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection3 = closureCodingConvention0.getAssertionFunctions();
        boolean boolean5 = closureCodingConvention0.isConstantKey("goog.exportProperty");
        com.google.javascript.rhino.Node node6 = null;
        java.util.Map<java.lang.String, java.lang.String> strMap7 = null;
        closureCodingConvention0.checkForCallingConventionDefiningCalls(node6, strMap7);
        boolean boolean10 = closureCodingConvention0.isConstant("");
        java.lang.String str11 = closureCodingConvention0.getExportPropertyFunction();
        com.google.javascript.rhino.Node node12 = null;
        boolean boolean13 = closureCodingConvention0.isOptionalParameter(node12);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry14 = null;
        com.google.javascript.jscomp.Scope scope15 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention16 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node17 = null;
        boolean boolean18 = closureCodingConvention16.isOptionalParameter(node17);
        java.lang.String str19 = closureCodingConvention16.getAbstractMethodName();
        java.lang.String str20 = closureCodingConvention16.getGlobalObject();
        boolean boolean22 = closureCodingConvention16.isExported("goog.global");
        com.google.javascript.rhino.Node node23 = null;
        com.google.javascript.jscomp.CodingConvention.DelegateRelationship delegateRelationship24 = closureCodingConvention16.getDelegateRelationship(node23);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry25 = null;
        com.google.javascript.jscomp.Scope scope26 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention27 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node28 = null;
        boolean boolean29 = closureCodingConvention27.isOptionalParameter(node28);
        java.lang.String str30 = closureCodingConvention27.getAbstractMethodName();
        java.lang.String str31 = closureCodingConvention27.getGlobalObject();
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection32 = closureCodingConvention27.getAssertionFunctions();
        boolean boolean34 = closureCodingConvention27.isConstant("goog.global");
        boolean boolean36 = closureCodingConvention27.isSuperClassReference("goog.exportProperty");
        com.google.javascript.rhino.jstype.FunctionType functionType37 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType38 = null;
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType39 = null;
        closureCodingConvention27.applySubclassRelationship(functionType37, functionType38, subclassType39);
        boolean boolean42 = closureCodingConvention27.isSuperClassReference("goog.global");
        boolean boolean45 = closureCodingConvention27.isExported("hi!", false);
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection46 = closureCodingConvention27.getAssertionFunctions();
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry47 = null;
        com.google.javascript.jscomp.Scope scope48 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention49 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node50 = null;
        boolean boolean51 = closureCodingConvention49.isOptionalParameter(node50);
        java.lang.String str52 = closureCodingConvention49.getAbstractMethodName();
        java.lang.String str53 = closureCodingConvention49.getGlobalObject();
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection54 = closureCodingConvention49.getAssertionFunctions();
        boolean boolean56 = closureCodingConvention49.isConstant("goog.global");
        com.google.javascript.rhino.Node node57 = null;
        com.google.javascript.jscomp.CodingConvention.DelegateRelationship delegateRelationship58 = closureCodingConvention49.getDelegateRelationship(node57);
        com.google.javascript.rhino.jstype.ObjectType objectType59 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType60 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType61 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType62 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType63 = null;
        closureCodingConvention49.applyDelegateRelationship(objectType59, objectType60, objectType61, functionType62, functionType63);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry65 = null;
        com.google.javascript.jscomp.Scope scope66 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention67 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node68 = null;
        boolean boolean69 = closureCodingConvention67.isOptionalParameter(node68);
        boolean boolean71 = closureCodingConvention67.isSuperClassReference("hi!");
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry72 = null;
        com.google.javascript.jscomp.Scope scope73 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention74 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node75 = null;
        boolean boolean76 = closureCodingConvention74.isOptionalParameter(node75);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry77 = null;
        com.google.javascript.jscomp.Scope scope78 = null;
        com.google.javascript.rhino.jstype.ObjectType[] objectTypeArray79 = new com.google.javascript.rhino.jstype.ObjectType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType> objectTypeList80 = new java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType>();
        boolean boolean81 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList80, objectTypeArray79);
        java.util.Map<java.lang.String, java.lang.String> strMap82 = null;
        closureCodingConvention74.defineDelegateProxyPrototypeProperties(jSTypeRegistry77, scope78, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList80, strMap82);
        java.util.Map<java.lang.String, java.lang.String> strMap84 = null;
        closureCodingConvention67.defineDelegateProxyPrototypeProperties(jSTypeRegistry72, scope73, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList80, strMap84);
        java.util.Map<java.lang.String, java.lang.String> strMap86 = null;
        closureCodingConvention49.defineDelegateProxyPrototypeProperties(jSTypeRegistry65, scope66, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList80, strMap86);
        java.util.Map<java.lang.String, java.lang.String> strMap88 = null;
        closureCodingConvention27.defineDelegateProxyPrototypeProperties(jSTypeRegistry47, scope48, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList80, strMap88);
        java.util.Map<java.lang.String, java.lang.String> strMap90 = null;
        closureCodingConvention16.defineDelegateProxyPrototypeProperties(jSTypeRegistry25, scope26, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList80, strMap90);
        java.util.Map<java.lang.String, java.lang.String> strMap92 = null;
        closureCodingConvention0.defineDelegateProxyPrototypeProperties(jSTypeRegistry14, scope15, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList80, strMap92);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "goog.exportProperty" + "'", str11, "goog.exportProperty");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "goog.abstractMethod" + "'", str19, "goog.abstractMethod");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "goog.global" + "'", str20, "goog.global");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(delegateRelationship24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "goog.abstractMethod" + "'", str30, "goog.abstractMethod");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "goog.global" + "'", str31, "goog.global");
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection46);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "goog.abstractMethod" + "'", str52, "goog.abstractMethod");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "goog.global" + "'", str53, "goog.global");
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNull(delegateRelationship58);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(objectTypeArray79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
    }

    @Test
    public void test0936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0936");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        java.lang.String str3 = closureCodingConvention0.getAbstractMethodName();
        java.lang.String str4 = closureCodingConvention0.getGlobalObject();
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection5 = closureCodingConvention0.getAssertionFunctions();
        boolean boolean7 = closureCodingConvention0.isConstant("goog.global");
        com.google.javascript.rhino.Node node8 = null;
        com.google.javascript.jscomp.CodingConvention.DelegateRelationship delegateRelationship9 = closureCodingConvention0.getDelegateRelationship(node8);
        com.google.javascript.rhino.Node node10 = null;
        boolean boolean11 = closureCodingConvention0.isVarArgsParameter(node10);
        boolean boolean13 = closureCodingConvention0.isConstantKey("goog.exportProperty");
        com.google.javascript.rhino.Node node14 = null;
        com.google.javascript.jscomp.CodingConvention.DelegateRelationship delegateRelationship15 = closureCodingConvention0.getDelegateRelationship(node14);
        com.google.javascript.rhino.jstype.FunctionType functionType16 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType17 = null;
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType18 = null;
        closureCodingConvention0.applySubclassRelationship(functionType16, functionType17, subclassType18);
        java.lang.Class<?> wildcardClass20 = closureCodingConvention0.getClass();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "goog.abstractMethod" + "'", str3, "goog.abstractMethod");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "goog.global" + "'", str4, "goog.global");
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(delegateRelationship9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(delegateRelationship15);
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test0937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0937");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        boolean boolean4 = closureCodingConvention0.isSuperClassReference("hi!");
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = null;
        com.google.javascript.jscomp.Scope scope6 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention7 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node8 = null;
        boolean boolean9 = closureCodingConvention7.isOptionalParameter(node8);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry10 = null;
        com.google.javascript.jscomp.Scope scope11 = null;
        com.google.javascript.rhino.jstype.ObjectType[] objectTypeArray12 = new com.google.javascript.rhino.jstype.ObjectType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType> objectTypeList13 = new java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList13, objectTypeArray12);
        java.util.Map<java.lang.String, java.lang.String> strMap15 = null;
        closureCodingConvention7.defineDelegateProxyPrototypeProperties(jSTypeRegistry10, scope11, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList13, strMap15);
        java.util.Map<java.lang.String, java.lang.String> strMap17 = null;
        closureCodingConvention0.defineDelegateProxyPrototypeProperties(jSTypeRegistry5, scope6, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList13, strMap17);
        java.lang.String str19 = closureCodingConvention0.getAbstractMethodName();
        java.lang.String str20 = closureCodingConvention0.getExportSymbolFunction();
        boolean boolean23 = closureCodingConvention0.isExported("goog.abstractMethod", false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(objectTypeArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "goog.abstractMethod" + "'", str19, "goog.abstractMethod");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "goog.exportSymbol" + "'", str20, "goog.exportSymbol");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test0938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0938");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        java.lang.String str3 = closureCodingConvention0.getAbstractMethodName();
        java.lang.String str4 = closureCodingConvention0.getGlobalObject();
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection5 = closureCodingConvention0.getAssertionFunctions();
        boolean boolean7 = closureCodingConvention0.isConstant("goog.global");
        com.google.javascript.rhino.Node node8 = null;
        com.google.javascript.jscomp.CodingConvention.DelegateRelationship delegateRelationship9 = closureCodingConvention0.getDelegateRelationship(node8);
        java.lang.String str10 = closureCodingConvention0.getAbstractMethodName();
        boolean boolean12 = closureCodingConvention0.isValidEnumKey("goog.abstractMethod");
        java.lang.String str13 = closureCodingConvention0.getDelegateSuperclassName();
        boolean boolean15 = closureCodingConvention0.isValidEnumKey("goog.exportSymbol");
        boolean boolean18 = closureCodingConvention0.isExported("goog.exportProperty", true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "goog.abstractMethod" + "'", str3, "goog.abstractMethod");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "goog.global" + "'", str4, "goog.global");
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(delegateRelationship9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "goog.abstractMethod" + "'", str10, "goog.abstractMethod");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test0939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0939");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        boolean boolean4 = closureCodingConvention0.isSuperClassReference("hi!");
        boolean boolean6 = closureCodingConvention0.isSuperClassReference("goog.global");
        boolean boolean8 = closureCodingConvention0.isValidEnumKey("");
        com.google.javascript.rhino.jstype.FunctionType functionType9 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType10 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType11 = null;
        // The following exception was thrown during execution in test generation
        try {
            closureCodingConvention0.applySingletonGetter(functionType9, functionType10, objectType11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test0940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0940");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        java.lang.String str3 = closureCodingConvention0.getAbstractMethodName();
        boolean boolean5 = closureCodingConvention0.isConstant("goog.abstractMethod");
        boolean boolean7 = closureCodingConvention0.isValidEnumKey("hi!");
        com.google.javascript.rhino.Node node8 = null;
        com.google.javascript.jscomp.CodingConvention.DelegateRelationship delegateRelationship9 = closureCodingConvention0.getDelegateRelationship(node8);
        com.google.javascript.rhino.Node node10 = null;
        java.util.Map<java.lang.String, java.lang.String> strMap11 = null;
        closureCodingConvention0.checkForCallingConventionDefiningCalls(node10, strMap11);
        java.lang.String str13 = closureCodingConvention0.getGlobalObject();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "goog.abstractMethod" + "'", str3, "goog.abstractMethod");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNull(delegateRelationship9);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "goog.global" + "'", str13, "goog.global");
    }

    @Test
    public void test0941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0941");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        boolean boolean2 = closureCodingConvention0.isValidEnumKey("goog.abstractMethod");
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection3 = closureCodingConvention0.getAssertionFunctions();
        boolean boolean5 = closureCodingConvention0.isConstantKey("goog.exportProperty");
        com.google.javascript.rhino.Node node6 = null;
        java.util.Map<java.lang.String, java.lang.String> strMap7 = null;
        closureCodingConvention0.checkForCallingConventionDefiningCalls(node6, strMap7);
        boolean boolean10 = closureCodingConvention0.isConstant("");
        java.lang.String str11 = closureCodingConvention0.getAbstractMethodName();
        com.google.javascript.rhino.Node node12 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.String> strList13 = closureCodingConvention0.identifyTypeDeclarationCall(node12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "goog.abstractMethod" + "'", str11, "goog.abstractMethod");
    }

    @Test
    public void test0942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0942");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        boolean boolean2 = closureCodingConvention0.isExported("goog.global");
        boolean boolean4 = closureCodingConvention0.isConstant("");
        com.google.javascript.rhino.Node node5 = null;
        com.google.javascript.jscomp.CodingConvention.DelegateRelationship delegateRelationship6 = closureCodingConvention0.getDelegateRelationship(node5);
        java.lang.String str7 = closureCodingConvention0.getDelegateSuperclassName();
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection8 = closureCodingConvention0.getAssertionFunctions();
        boolean boolean10 = closureCodingConvention0.isValidEnumKey("goog.exportProperty");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(delegateRelationship6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test0943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0943");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        java.lang.String str3 = closureCodingConvention0.getAbstractMethodName();
        java.lang.String str4 = closureCodingConvention0.getGlobalObject();
        boolean boolean6 = closureCodingConvention0.isSuperClassReference("");
        java.lang.String str7 = closureCodingConvention0.getGlobalObject();
        boolean boolean9 = closureCodingConvention0.isSuperClassReference("goog.abstractMethod");
        boolean boolean11 = closureCodingConvention0.isExported("");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "goog.abstractMethod" + "'", str3, "goog.abstractMethod");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "goog.global" + "'", str4, "goog.global");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "goog.global" + "'", str7, "goog.global");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test0944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0944");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        java.lang.String str3 = closureCodingConvention0.getAbstractMethodName();
        java.lang.String str4 = closureCodingConvention0.getGlobalObject();
        com.google.javascript.rhino.Node node5 = null;
        java.util.Map<java.lang.String, java.lang.String> strMap6 = null;
        closureCodingConvention0.checkForCallingConventionDefiningCalls(node5, strMap6);
        com.google.javascript.rhino.Node node8 = null;
        com.google.javascript.jscomp.CodingConvention.DelegateRelationship delegateRelationship9 = closureCodingConvention0.getDelegateRelationship(node8);
        java.lang.String str10 = closureCodingConvention0.getDelegateSuperclassName();
        boolean boolean12 = closureCodingConvention0.isExported("goog.global");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "goog.abstractMethod" + "'", str3, "goog.abstractMethod");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "goog.global" + "'", str4, "goog.global");
        org.junit.Assert.assertNull(delegateRelationship9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test0945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0945");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        boolean boolean4 = closureCodingConvention0.isSuperClassReference("hi!");
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = null;
        com.google.javascript.jscomp.Scope scope6 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention7 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node8 = null;
        boolean boolean9 = closureCodingConvention7.isOptionalParameter(node8);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry10 = null;
        com.google.javascript.jscomp.Scope scope11 = null;
        com.google.javascript.rhino.jstype.ObjectType[] objectTypeArray12 = new com.google.javascript.rhino.jstype.ObjectType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType> objectTypeList13 = new java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList13, objectTypeArray12);
        java.util.Map<java.lang.String, java.lang.String> strMap15 = null;
        closureCodingConvention7.defineDelegateProxyPrototypeProperties(jSTypeRegistry10, scope11, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList13, strMap15);
        java.util.Map<java.lang.String, java.lang.String> strMap17 = null;
        closureCodingConvention0.defineDelegateProxyPrototypeProperties(jSTypeRegistry5, scope6, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList13, strMap17);
        boolean boolean20 = closureCodingConvention0.isPrivate("goog.global");
        com.google.javascript.rhino.Node node21 = null;
        boolean boolean22 = closureCodingConvention0.isVarArgsParameter(node21);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(objectTypeArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test0946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0946");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        boolean boolean4 = closureCodingConvention0.isSuperClassReference("hi!");
        boolean boolean6 = closureCodingConvention0.isSuperClassReference("goog.global");
        boolean boolean8 = closureCodingConvention0.isConstant("goog.abstractMethod");
        boolean boolean10 = closureCodingConvention0.isValidEnumKey("hi!");
        boolean boolean12 = closureCodingConvention0.isSuperClassReference("goog.global");
        boolean boolean14 = closureCodingConvention0.isPrivate("goog.abstractMethod");
        boolean boolean16 = closureCodingConvention0.isValidEnumKey("");
        java.lang.String str17 = closureCodingConvention0.getGlobalObject();
        com.google.javascript.rhino.Node node18 = null;
        boolean boolean19 = closureCodingConvention0.isOptionalParameter(node18);
        boolean boolean21 = closureCodingConvention0.isExported("goog.exportProperty");
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection22 = closureCodingConvention0.getAssertionFunctions();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "goog.global" + "'", str17, "goog.global");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection22);
    }

    @Test
    public void test0947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0947");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        boolean boolean4 = closureCodingConvention0.isSuperClassReference("hi!");
        boolean boolean6 = closureCodingConvention0.isValidEnumKey("");
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry7 = null;
        com.google.javascript.jscomp.Scope scope8 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention9 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node10 = null;
        boolean boolean11 = closureCodingConvention9.isOptionalParameter(node10);
        java.lang.String str12 = closureCodingConvention9.getAbstractMethodName();
        java.lang.String str13 = closureCodingConvention9.getGlobalObject();
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection14 = closureCodingConvention9.getAssertionFunctions();
        boolean boolean16 = closureCodingConvention9.isConstant("goog.global");
        com.google.javascript.rhino.Node node17 = null;
        com.google.javascript.jscomp.CodingConvention.DelegateRelationship delegateRelationship18 = closureCodingConvention9.getDelegateRelationship(node17);
        com.google.javascript.rhino.jstype.ObjectType objectType19 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType20 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType21 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType22 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType23 = null;
        closureCodingConvention9.applyDelegateRelationship(objectType19, objectType20, objectType21, functionType22, functionType23);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry25 = null;
        com.google.javascript.jscomp.Scope scope26 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention27 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node28 = null;
        boolean boolean29 = closureCodingConvention27.isOptionalParameter(node28);
        boolean boolean31 = closureCodingConvention27.isSuperClassReference("hi!");
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry32 = null;
        com.google.javascript.jscomp.Scope scope33 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention34 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node35 = null;
        boolean boolean36 = closureCodingConvention34.isOptionalParameter(node35);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry37 = null;
        com.google.javascript.jscomp.Scope scope38 = null;
        com.google.javascript.rhino.jstype.ObjectType[] objectTypeArray39 = new com.google.javascript.rhino.jstype.ObjectType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType> objectTypeList40 = new java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList40, objectTypeArray39);
        java.util.Map<java.lang.String, java.lang.String> strMap42 = null;
        closureCodingConvention34.defineDelegateProxyPrototypeProperties(jSTypeRegistry37, scope38, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList40, strMap42);
        java.util.Map<java.lang.String, java.lang.String> strMap44 = null;
        closureCodingConvention27.defineDelegateProxyPrototypeProperties(jSTypeRegistry32, scope33, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList40, strMap44);
        java.util.Map<java.lang.String, java.lang.String> strMap46 = null;
        closureCodingConvention9.defineDelegateProxyPrototypeProperties(jSTypeRegistry25, scope26, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList40, strMap46);
        java.util.Map<java.lang.String, java.lang.String> strMap48 = null;
        closureCodingConvention0.defineDelegateProxyPrototypeProperties(jSTypeRegistry7, scope8, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList40, strMap48);
        com.google.javascript.rhino.Node node50 = null;
        com.google.javascript.jscomp.CodingConvention.DelegateRelationship delegateRelationship51 = closureCodingConvention0.getDelegateRelationship(node50);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "goog.abstractMethod" + "'", str12, "goog.abstractMethod");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "goog.global" + "'", str13, "goog.global");
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(delegateRelationship18);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(objectTypeArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNull(delegateRelationship51);
    }

    @Test
    public void test0948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0948");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        boolean boolean2 = closureCodingConvention0.isExported("goog.global");
        boolean boolean4 = closureCodingConvention0.isConstant("");
        com.google.javascript.rhino.Node node5 = null;
        java.util.Map<java.lang.String, java.lang.String> strMap6 = null;
        closureCodingConvention0.checkForCallingConventionDefiningCalls(node5, strMap6);
        boolean boolean9 = closureCodingConvention0.isExported("");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test0949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0949");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        boolean boolean2 = closureCodingConvention0.isConstant("goog.exportProperty");
        java.lang.String str3 = closureCodingConvention0.getExportPropertyFunction();
        boolean boolean5 = closureCodingConvention0.isSuperClassReference("goog.exportSymbol");
        com.google.javascript.rhino.Node node6 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.String> strList7 = closureCodingConvention0.identifyTypeDeclarationCall(node6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "goog.exportProperty" + "'", str3, "goog.exportProperty");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test0950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0950");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        java.lang.String str3 = closureCodingConvention0.getAbstractMethodName();
        java.lang.String str4 = closureCodingConvention0.getGlobalObject();
        com.google.javascript.rhino.Node node5 = null;
        java.util.Map<java.lang.String, java.lang.String> strMap6 = null;
        closureCodingConvention0.checkForCallingConventionDefiningCalls(node5, strMap6);
        com.google.javascript.rhino.Node node8 = null;
        com.google.javascript.jscomp.CodingConvention.DelegateRelationship delegateRelationship9 = closureCodingConvention0.getDelegateRelationship(node8);
        java.lang.String str10 = closureCodingConvention0.getDelegateSuperclassName();
        com.google.javascript.rhino.Node node11 = null;
        boolean boolean12 = closureCodingConvention0.isVarArgsParameter(node11);
        boolean boolean14 = closureCodingConvention0.isExported("");
        boolean boolean17 = closureCodingConvention0.isExported("goog.global", false);
        com.google.javascript.rhino.Node node18 = null;
        boolean boolean19 = closureCodingConvention0.isVarArgsParameter(node18);
        com.google.javascript.rhino.jstype.FunctionType functionType20 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType21 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType22 = null;
        // The following exception was thrown during execution in test generation
        try {
            closureCodingConvention0.applySingletonGetter(functionType20, functionType21, objectType22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "goog.abstractMethod" + "'", str3, "goog.abstractMethod");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "goog.global" + "'", str4, "goog.global");
        org.junit.Assert.assertNull(delegateRelationship9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test0951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0951");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        boolean boolean4 = closureCodingConvention0.isSuperClassReference("hi!");
        com.google.javascript.rhino.Node node5 = null;
        boolean boolean6 = closureCodingConvention0.isOptionalParameter(node5);
        boolean boolean8 = closureCodingConvention0.isExported("hi!");
        java.lang.String str9 = closureCodingConvention0.getExportPropertyFunction();
        boolean boolean11 = closureCodingConvention0.isConstant("goog.global");
        com.google.javascript.rhino.Node node12 = null;
        com.google.javascript.jscomp.CodingConvention.DelegateRelationship delegateRelationship13 = closureCodingConvention0.getDelegateRelationship(node12);
        com.google.javascript.rhino.Node node14 = null;
        com.google.javascript.jscomp.CodingConvention.DelegateRelationship delegateRelationship15 = closureCodingConvention0.getDelegateRelationship(node14);
        java.lang.String str16 = closureCodingConvention0.getExportSymbolFunction();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "goog.exportProperty" + "'", str9, "goog.exportProperty");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(delegateRelationship13);
        org.junit.Assert.assertNull(delegateRelationship15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "goog.exportSymbol" + "'", str16, "goog.exportSymbol");
    }

    @Test
    public void test0952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0952");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry3 = null;
        com.google.javascript.jscomp.Scope scope4 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention5 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node6 = null;
        boolean boolean7 = closureCodingConvention5.isOptionalParameter(node6);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry8 = null;
        com.google.javascript.jscomp.Scope scope9 = null;
        com.google.javascript.rhino.jstype.ObjectType[] objectTypeArray10 = new com.google.javascript.rhino.jstype.ObjectType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType> objectTypeList11 = new java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList11, objectTypeArray10);
        java.util.Map<java.lang.String, java.lang.String> strMap13 = null;
        closureCodingConvention5.defineDelegateProxyPrototypeProperties(jSTypeRegistry8, scope9, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList11, strMap13);
        java.util.Map<java.lang.String, java.lang.String> strMap15 = null;
        closureCodingConvention0.defineDelegateProxyPrototypeProperties(jSTypeRegistry3, scope4, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList11, strMap15);
        com.google.javascript.rhino.Node node17 = null;
        java.util.Map<java.lang.String, java.lang.String> strMap18 = null;
        closureCodingConvention0.checkForCallingConventionDefiningCalls(node17, strMap18);
        java.lang.String str20 = closureCodingConvention0.getGlobalObject();
        boolean boolean22 = closureCodingConvention0.isConstant("hi!");
        boolean boolean24 = closureCodingConvention0.isPrivate("goog.exportSymbol");
        com.google.javascript.rhino.jstype.FunctionType functionType25 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType26 = null;
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType27 = null;
        closureCodingConvention0.applySubclassRelationship(functionType25, functionType26, subclassType27);
        java.lang.String str29 = closureCodingConvention0.getGlobalObject();
        java.lang.String str30 = closureCodingConvention0.getExportSymbolFunction();
        com.google.javascript.rhino.jstype.FunctionType functionType31 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType32 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType33 = null;
        // The following exception was thrown during execution in test generation
        try {
            closureCodingConvention0.applySingletonGetter(functionType31, functionType32, objectType33);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(objectTypeArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "goog.global" + "'", str20, "goog.global");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "goog.global" + "'", str29, "goog.global");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "goog.exportSymbol" + "'", str30, "goog.exportSymbol");
    }

    @Test
    public void test0953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0953");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        java.lang.String str3 = closureCodingConvention0.getAbstractMethodName();
        java.lang.String str4 = closureCodingConvention0.getGlobalObject();
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection5 = closureCodingConvention0.getAssertionFunctions();
        boolean boolean7 = closureCodingConvention0.isConstant("goog.global");
        com.google.javascript.rhino.Node node8 = null;
        com.google.javascript.jscomp.CodingConvention.DelegateRelationship delegateRelationship9 = closureCodingConvention0.getDelegateRelationship(node8);
        com.google.javascript.rhino.jstype.FunctionType functionType10 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType11 = null;
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType12 = null;
        closureCodingConvention0.applySubclassRelationship(functionType10, functionType11, subclassType12);
        java.lang.String str14 = closureCodingConvention0.getExportSymbolFunction();
        boolean boolean16 = closureCodingConvention0.isExported("");
        java.lang.String str17 = closureCodingConvention0.getDelegateSuperclassName();
        java.lang.Class<?> wildcardClass18 = closureCodingConvention0.getClass();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "goog.abstractMethod" + "'", str3, "goog.abstractMethod");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "goog.global" + "'", str4, "goog.global");
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(delegateRelationship9);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "goog.exportSymbol" + "'", str14, "goog.exportSymbol");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test0954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0954");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        boolean boolean2 = closureCodingConvention0.isValidEnumKey("goog.abstractMethod");
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection3 = closureCodingConvention0.getAssertionFunctions();
        boolean boolean5 = closureCodingConvention0.isConstantKey("goog.exportProperty");
        com.google.javascript.rhino.Node node6 = null;
        java.util.Map<java.lang.String, java.lang.String> strMap7 = null;
        closureCodingConvention0.checkForCallingConventionDefiningCalls(node6, strMap7);
        boolean boolean10 = closureCodingConvention0.isConstant("");
        com.google.javascript.rhino.Node node11 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean12 = closureCodingConvention0.isPropertyTestFunction(node11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test0955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0955");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        boolean boolean4 = closureCodingConvention0.isConstant("hi!");
        boolean boolean6 = closureCodingConvention0.isPrivate("hi!");
        java.lang.String str7 = closureCodingConvention0.getExportPropertyFunction();
        com.google.javascript.rhino.jstype.FunctionType functionType8 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType9 = null;
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType10 = null;
        closureCodingConvention0.applySubclassRelationship(functionType8, functionType9, subclassType10);
        boolean boolean13 = closureCodingConvention0.isSuperClassReference("goog.exportSymbol");
        boolean boolean15 = closureCodingConvention0.isConstant("goog.global");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "goog.exportProperty" + "'", str7, "goog.exportProperty");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test0956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0956");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        java.lang.String str3 = closureCodingConvention0.getAbstractMethodName();
        java.lang.String str4 = closureCodingConvention0.getGlobalObject();
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection5 = closureCodingConvention0.getAssertionFunctions();
        com.google.javascript.rhino.Node node6 = null;
        com.google.javascript.jscomp.CodingConvention.DelegateRelationship delegateRelationship7 = closureCodingConvention0.getDelegateRelationship(node6);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "goog.abstractMethod" + "'", str3, "goog.abstractMethod");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "goog.global" + "'", str4, "goog.global");
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection5);
        org.junit.Assert.assertNull(delegateRelationship7);
    }

    @Test
    public void test0957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0957");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        boolean boolean2 = closureCodingConvention0.isExported("goog.global");
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection3 = closureCodingConvention0.getAssertionFunctions();
        java.lang.String str4 = closureCodingConvention0.getGlobalObject();
        boolean boolean7 = closureCodingConvention0.isExported("goog.abstractMethod", true);
        com.google.javascript.rhino.jstype.FunctionType functionType8 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType9 = null;
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType10 = null;
        closureCodingConvention0.applySubclassRelationship(functionType8, functionType9, subclassType10);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry12 = null;
        com.google.javascript.jscomp.Scope scope13 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention14 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node15 = null;
        boolean boolean16 = closureCodingConvention14.isOptionalParameter(node15);
        boolean boolean18 = closureCodingConvention14.isSuperClassReference("hi!");
        com.google.javascript.rhino.Node node19 = null;
        boolean boolean20 = closureCodingConvention14.isOptionalParameter(node19);
        boolean boolean22 = closureCodingConvention14.isConstantKey("hi!");
        com.google.javascript.rhino.Node node23 = null;
        boolean boolean24 = closureCodingConvention14.isVarArgsParameter(node23);
        boolean boolean26 = closureCodingConvention14.isExported("");
        com.google.javascript.rhino.jstype.ObjectType objectType27 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType28 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType29 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType30 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType31 = null;
        closureCodingConvention14.applyDelegateRelationship(objectType27, objectType28, objectType29, functionType30, functionType31);
        boolean boolean35 = closureCodingConvention14.isExported("goog.global", true);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry36 = null;
        com.google.javascript.jscomp.Scope scope37 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention38 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node39 = null;
        boolean boolean40 = closureCodingConvention38.isOptionalParameter(node39);
        java.lang.String str41 = closureCodingConvention38.getAbstractMethodName();
        java.lang.String str42 = closureCodingConvention38.getGlobalObject();
        boolean boolean44 = closureCodingConvention38.isExported("goog.global");
        boolean boolean46 = closureCodingConvention38.isConstant("goog.abstractMethod");
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry47 = null;
        com.google.javascript.jscomp.Scope scope48 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention49 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node50 = null;
        boolean boolean51 = closureCodingConvention49.isOptionalParameter(node50);
        java.lang.String str52 = closureCodingConvention49.getAbstractMethodName();
        java.lang.String str53 = closureCodingConvention49.getGlobalObject();
        com.google.javascript.rhino.Node node54 = null;
        com.google.javascript.jscomp.CodingConvention.DelegateRelationship delegateRelationship55 = closureCodingConvention49.getDelegateRelationship(node54);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry56 = null;
        com.google.javascript.jscomp.Scope scope57 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention58 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node59 = null;
        boolean boolean60 = closureCodingConvention58.isOptionalParameter(node59);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry61 = null;
        com.google.javascript.jscomp.Scope scope62 = null;
        com.google.javascript.rhino.jstype.ObjectType[] objectTypeArray63 = new com.google.javascript.rhino.jstype.ObjectType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType> objectTypeList64 = new java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList64, objectTypeArray63);
        java.util.Map<java.lang.String, java.lang.String> strMap66 = null;
        closureCodingConvention58.defineDelegateProxyPrototypeProperties(jSTypeRegistry61, scope62, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList64, strMap66);
        java.util.Map<java.lang.String, java.lang.String> strMap68 = null;
        closureCodingConvention49.defineDelegateProxyPrototypeProperties(jSTypeRegistry56, scope57, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList64, strMap68);
        java.util.Map<java.lang.String, java.lang.String> strMap70 = null;
        closureCodingConvention38.defineDelegateProxyPrototypeProperties(jSTypeRegistry47, scope48, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList64, strMap70);
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection72 = closureCodingConvention38.getAssertionFunctions();
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry73 = null;
        com.google.javascript.jscomp.Scope scope74 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention75 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node76 = null;
        boolean boolean77 = closureCodingConvention75.isOptionalParameter(node76);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry78 = null;
        com.google.javascript.jscomp.Scope scope79 = null;
        com.google.javascript.rhino.jstype.ObjectType[] objectTypeArray80 = new com.google.javascript.rhino.jstype.ObjectType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType> objectTypeList81 = new java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType>();
        boolean boolean82 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList81, objectTypeArray80);
        java.util.Map<java.lang.String, java.lang.String> strMap83 = null;
        closureCodingConvention75.defineDelegateProxyPrototypeProperties(jSTypeRegistry78, scope79, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList81, strMap83);
        java.util.Map<java.lang.String, java.lang.String> strMap85 = null;
        closureCodingConvention38.defineDelegateProxyPrototypeProperties(jSTypeRegistry73, scope74, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList81, strMap85);
        java.util.Map<java.lang.String, java.lang.String> strMap87 = null;
        closureCodingConvention14.defineDelegateProxyPrototypeProperties(jSTypeRegistry36, scope37, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList81, strMap87);
        java.util.Map<java.lang.String, java.lang.String> strMap89 = null;
        closureCodingConvention0.defineDelegateProxyPrototypeProperties(jSTypeRegistry12, scope13, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList81, strMap89);
        com.google.javascript.rhino.Node node91 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.String> strList92 = closureCodingConvention0.identifyTypeDeclarationCall(node91);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "goog.global" + "'", str4, "goog.global");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "goog.abstractMethod" + "'", str41, "goog.abstractMethod");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "goog.global" + "'", str42, "goog.global");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "goog.abstractMethod" + "'", str52, "goog.abstractMethod");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "goog.global" + "'", str53, "goog.global");
        org.junit.Assert.assertNull(delegateRelationship55);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(objectTypeArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection72);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(objectTypeArray80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
    }

    @Test
    public void test0958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0958");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        java.lang.String str3 = closureCodingConvention0.getAbstractMethodName();
        boolean boolean5 = closureCodingConvention0.isConstant("goog.abstractMethod");
        java.lang.String str6 = closureCodingConvention0.getDelegateSuperclassName();
        com.google.javascript.rhino.jstype.ObjectType objectType7 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType8 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType9 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType10 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType11 = null;
        closureCodingConvention0.applyDelegateRelationship(objectType7, objectType8, objectType9, functionType10, functionType11);
        com.google.javascript.rhino.Node node13 = null;
        com.google.javascript.jscomp.CodingConvention.DelegateRelationship delegateRelationship14 = closureCodingConvention0.getDelegateRelationship(node13);
        boolean boolean16 = closureCodingConvention0.isValidEnumKey("goog.exportProperty");
        boolean boolean18 = closureCodingConvention0.isConstantKey("goog.abstractMethod");
        com.google.javascript.rhino.jstype.FunctionType functionType19 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType20 = null;
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType21 = null;
        closureCodingConvention0.applySubclassRelationship(functionType19, functionType20, subclassType21);
        boolean boolean24 = closureCodingConvention0.isValidEnumKey("goog.abstractMethod");
        com.google.javascript.rhino.Node node25 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str26 = closureCodingConvention0.getSingletonGetterClassName(node25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "goog.abstractMethod" + "'", str3, "goog.abstractMethod");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(delegateRelationship14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
    }

    @Test
    public void test0959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0959");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        boolean boolean4 = closureCodingConvention0.isSuperClassReference("hi!");
        boolean boolean6 = closureCodingConvention0.isSuperClassReference("goog.global");
        boolean boolean8 = closureCodingConvention0.isConstant("goog.abstractMethod");
        boolean boolean10 = closureCodingConvention0.isValidEnumKey("hi!");
        boolean boolean12 = closureCodingConvention0.isSuperClassReference("goog.global");
        boolean boolean14 = closureCodingConvention0.isPrivate("goog.abstractMethod");
        boolean boolean16 = closureCodingConvention0.isValidEnumKey("");
        java.lang.String str17 = closureCodingConvention0.getGlobalObject();
        com.google.javascript.rhino.Node node18 = null;
        boolean boolean19 = closureCodingConvention0.isOptionalParameter(node18);
        com.google.javascript.rhino.Node node20 = null;
        boolean boolean21 = closureCodingConvention0.isOptionalParameter(node20);
        boolean boolean23 = closureCodingConvention0.isSuperClassReference("goog.exportSymbol");
        java.lang.String str24 = closureCodingConvention0.getExportSymbolFunction();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "goog.global" + "'", str17, "goog.global");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "goog.exportSymbol" + "'", str24, "goog.exportSymbol");
    }

    @Test
    public void test0960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0960");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        boolean boolean4 = closureCodingConvention0.isSuperClassReference("hi!");
        boolean boolean6 = closureCodingConvention0.isSuperClassReference("goog.global");
        boolean boolean8 = closureCodingConvention0.isConstant("goog.abstractMethod");
        boolean boolean10 = closureCodingConvention0.isValidEnumKey("hi!");
        boolean boolean12 = closureCodingConvention0.isConstant("hi!");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test0961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0961");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry3 = null;
        com.google.javascript.jscomp.Scope scope4 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention5 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node6 = null;
        boolean boolean7 = closureCodingConvention5.isOptionalParameter(node6);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry8 = null;
        com.google.javascript.jscomp.Scope scope9 = null;
        com.google.javascript.rhino.jstype.ObjectType[] objectTypeArray10 = new com.google.javascript.rhino.jstype.ObjectType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType> objectTypeList11 = new java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList11, objectTypeArray10);
        java.util.Map<java.lang.String, java.lang.String> strMap13 = null;
        closureCodingConvention5.defineDelegateProxyPrototypeProperties(jSTypeRegistry8, scope9, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList11, strMap13);
        java.util.Map<java.lang.String, java.lang.String> strMap15 = null;
        closureCodingConvention0.defineDelegateProxyPrototypeProperties(jSTypeRegistry3, scope4, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList11, strMap15);
        com.google.javascript.rhino.Node node17 = null;
        com.google.javascript.jscomp.CodingConvention.DelegateRelationship delegateRelationship18 = closureCodingConvention0.getDelegateRelationship(node17);
        com.google.javascript.rhino.Node node19 = null;
        boolean boolean20 = closureCodingConvention0.isVarArgsParameter(node19);
        java.lang.Class<?> wildcardClass21 = closureCodingConvention0.getClass();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(objectTypeArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(delegateRelationship18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test0962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0962");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        java.lang.String str3 = closureCodingConvention0.getAbstractMethodName();
        java.lang.String str4 = closureCodingConvention0.getGlobalObject();
        boolean boolean6 = closureCodingConvention0.isExported("goog.global");
        boolean boolean8 = closureCodingConvention0.isConstant("goog.abstractMethod");
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry9 = null;
        com.google.javascript.jscomp.Scope scope10 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention11 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node12 = null;
        boolean boolean13 = closureCodingConvention11.isOptionalParameter(node12);
        java.lang.String str14 = closureCodingConvention11.getAbstractMethodName();
        java.lang.String str15 = closureCodingConvention11.getGlobalObject();
        com.google.javascript.rhino.Node node16 = null;
        com.google.javascript.jscomp.CodingConvention.DelegateRelationship delegateRelationship17 = closureCodingConvention11.getDelegateRelationship(node16);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry18 = null;
        com.google.javascript.jscomp.Scope scope19 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention20 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node21 = null;
        boolean boolean22 = closureCodingConvention20.isOptionalParameter(node21);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry23 = null;
        com.google.javascript.jscomp.Scope scope24 = null;
        com.google.javascript.rhino.jstype.ObjectType[] objectTypeArray25 = new com.google.javascript.rhino.jstype.ObjectType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType> objectTypeList26 = new java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList26, objectTypeArray25);
        java.util.Map<java.lang.String, java.lang.String> strMap28 = null;
        closureCodingConvention20.defineDelegateProxyPrototypeProperties(jSTypeRegistry23, scope24, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList26, strMap28);
        java.util.Map<java.lang.String, java.lang.String> strMap30 = null;
        closureCodingConvention11.defineDelegateProxyPrototypeProperties(jSTypeRegistry18, scope19, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList26, strMap30);
        java.util.Map<java.lang.String, java.lang.String> strMap32 = null;
        closureCodingConvention0.defineDelegateProxyPrototypeProperties(jSTypeRegistry9, scope10, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList26, strMap32);
        java.lang.String str34 = closureCodingConvention0.getExportSymbolFunction();
        java.lang.String str35 = closureCodingConvention0.getExportSymbolFunction();
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry36 = null;
        com.google.javascript.jscomp.Scope scope37 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention38 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node39 = null;
        boolean boolean40 = closureCodingConvention38.isOptionalParameter(node39);
        boolean boolean42 = closureCodingConvention38.isSuperClassReference("hi!");
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry43 = null;
        com.google.javascript.jscomp.Scope scope44 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention45 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node46 = null;
        boolean boolean47 = closureCodingConvention45.isOptionalParameter(node46);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry48 = null;
        com.google.javascript.jscomp.Scope scope49 = null;
        com.google.javascript.rhino.jstype.ObjectType[] objectTypeArray50 = new com.google.javascript.rhino.jstype.ObjectType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType> objectTypeList51 = new java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList51, objectTypeArray50);
        java.util.Map<java.lang.String, java.lang.String> strMap53 = null;
        closureCodingConvention45.defineDelegateProxyPrototypeProperties(jSTypeRegistry48, scope49, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList51, strMap53);
        java.util.Map<java.lang.String, java.lang.String> strMap55 = null;
        closureCodingConvention38.defineDelegateProxyPrototypeProperties(jSTypeRegistry43, scope44, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList51, strMap55);
        java.util.Map<java.lang.String, java.lang.String> strMap57 = null;
        closureCodingConvention0.defineDelegateProxyPrototypeProperties(jSTypeRegistry36, scope37, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList51, strMap57);
        com.google.javascript.rhino.jstype.FunctionType functionType59 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType60 = null;
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType61 = null;
        closureCodingConvention0.applySubclassRelationship(functionType59, functionType60, subclassType61);
        boolean boolean64 = closureCodingConvention0.isConstantKey("goog.exportProperty");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "goog.abstractMethod" + "'", str3, "goog.abstractMethod");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "goog.global" + "'", str4, "goog.global");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "goog.abstractMethod" + "'", str14, "goog.abstractMethod");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "goog.global" + "'", str15, "goog.global");
        org.junit.Assert.assertNull(delegateRelationship17);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(objectTypeArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "goog.exportSymbol" + "'", str34, "goog.exportSymbol");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "goog.exportSymbol" + "'", str35, "goog.exportSymbol");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(objectTypeArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
    }

    @Test
    public void test0963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0963");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        boolean boolean4 = closureCodingConvention0.isSuperClassReference("hi!");
        boolean boolean6 = closureCodingConvention0.isSuperClassReference("goog.global");
        boolean boolean8 = closureCodingConvention0.isConstant("goog.abstractMethod");
        boolean boolean10 = closureCodingConvention0.isValidEnumKey("hi!");
        boolean boolean12 = closureCodingConvention0.isSuperClassReference("goog.global");
        boolean boolean14 = closureCodingConvention0.isPrivate("goog.abstractMethod");
        boolean boolean16 = closureCodingConvention0.isConstant("goog.global");
        boolean boolean18 = closureCodingConvention0.isPrivate("hi!");
        java.lang.String str19 = closureCodingConvention0.getDelegateSuperclassName();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(str19);
    }

    @Test
    public void test0964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0964");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        java.lang.String str3 = closureCodingConvention0.getAbstractMethodName();
        java.lang.String str4 = closureCodingConvention0.getGlobalObject();
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection5 = closureCodingConvention0.getAssertionFunctions();
        boolean boolean7 = closureCodingConvention0.isConstant("goog.global");
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection8 = closureCodingConvention0.getAssertionFunctions();
        boolean boolean10 = closureCodingConvention0.isValidEnumKey("goog.exportProperty");
        com.google.javascript.rhino.Node node11 = null;
        com.google.javascript.jscomp.CodingConvention.DelegateRelationship delegateRelationship12 = closureCodingConvention0.getDelegateRelationship(node11);
        java.lang.String str13 = closureCodingConvention0.getGlobalObject();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "goog.abstractMethod" + "'", str3, "goog.abstractMethod");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "goog.global" + "'", str4, "goog.global");
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(delegateRelationship12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "goog.global" + "'", str13, "goog.global");
    }

    @Test
    public void test0965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0965");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        java.lang.String str3 = closureCodingConvention0.getAbstractMethodName();
        boolean boolean5 = closureCodingConvention0.isConstant("goog.abstractMethod");
        java.lang.String str6 = closureCodingConvention0.getDelegateSuperclassName();
        com.google.javascript.rhino.jstype.ObjectType objectType7 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType8 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType9 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType10 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType11 = null;
        closureCodingConvention0.applyDelegateRelationship(objectType7, objectType8, objectType9, functionType10, functionType11);
        java.lang.String str13 = closureCodingConvention0.getExportPropertyFunction();
        com.google.javascript.rhino.Node node14 = null;
        java.util.Map<java.lang.String, java.lang.String> strMap15 = null;
        closureCodingConvention0.checkForCallingConventionDefiningCalls(node14, strMap15);
        boolean boolean18 = closureCodingConvention0.isPrivate("");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "goog.abstractMethod" + "'", str3, "goog.abstractMethod");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "goog.exportProperty" + "'", str13, "goog.exportProperty");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test0966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0966");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        java.lang.String str3 = closureCodingConvention0.getAbstractMethodName();
        java.lang.String str4 = closureCodingConvention0.getGlobalObject();
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection5 = closureCodingConvention0.getAssertionFunctions();
        boolean boolean7 = closureCodingConvention0.isConstant("goog.global");
        boolean boolean9 = closureCodingConvention0.isSuperClassReference("goog.exportProperty");
        com.google.javascript.rhino.jstype.FunctionType functionType10 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType11 = null;
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType12 = null;
        closureCodingConvention0.applySubclassRelationship(functionType10, functionType11, subclassType12);
        boolean boolean15 = closureCodingConvention0.isSuperClassReference("goog.global");
        boolean boolean18 = closureCodingConvention0.isExported("hi!", false);
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection19 = closureCodingConvention0.getAssertionFunctions();
        java.lang.String str20 = closureCodingConvention0.getAbstractMethodName();
        boolean boolean22 = closureCodingConvention0.isValidEnumKey("goog.global");
        java.lang.String str23 = closureCodingConvention0.getExportSymbolFunction();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "goog.abstractMethod" + "'", str3, "goog.abstractMethod");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "goog.global" + "'", str4, "goog.global");
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "goog.abstractMethod" + "'", str20, "goog.abstractMethod");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "goog.exportSymbol" + "'", str23, "goog.exportSymbol");
    }

    @Test
    public void test0967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0967");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        java.lang.String str3 = closureCodingConvention0.getAbstractMethodName();
        java.lang.String str4 = closureCodingConvention0.getGlobalObject();
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection5 = closureCodingConvention0.getAssertionFunctions();
        boolean boolean7 = closureCodingConvention0.isConstant("goog.global");
        com.google.javascript.rhino.Node node8 = null;
        com.google.javascript.jscomp.CodingConvention.DelegateRelationship delegateRelationship9 = closureCodingConvention0.getDelegateRelationship(node8);
        java.lang.String str10 = closureCodingConvention0.getAbstractMethodName();
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection11 = closureCodingConvention0.getAssertionFunctions();
        java.lang.String str12 = closureCodingConvention0.getDelegateSuperclassName();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "goog.abstractMethod" + "'", str3, "goog.abstractMethod");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "goog.global" + "'", str4, "goog.global");
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(delegateRelationship9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "goog.abstractMethod" + "'", str10, "goog.abstractMethod");
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection11);
        org.junit.Assert.assertNull(str12);
    }

    @Test
    public void test0968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0968");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        boolean boolean4 = closureCodingConvention0.isSuperClassReference("hi!");
        com.google.javascript.rhino.Node node5 = null;
        boolean boolean6 = closureCodingConvention0.isOptionalParameter(node5);
        boolean boolean8 = closureCodingConvention0.isConstantKey("hi!");
        com.google.javascript.rhino.Node node9 = null;
        boolean boolean10 = closureCodingConvention0.isVarArgsParameter(node9);
        java.lang.String str11 = closureCodingConvention0.getDelegateSuperclassName();
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection12 = closureCodingConvention0.getAssertionFunctions();
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry13 = null;
        com.google.javascript.jscomp.Scope scope14 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention15 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node16 = null;
        boolean boolean17 = closureCodingConvention15.isOptionalParameter(node16);
        java.lang.String str18 = closureCodingConvention15.getAbstractMethodName();
        java.lang.String str19 = closureCodingConvention15.getGlobalObject();
        com.google.javascript.rhino.Node node20 = null;
        com.google.javascript.jscomp.CodingConvention.DelegateRelationship delegateRelationship21 = closureCodingConvention15.getDelegateRelationship(node20);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry22 = null;
        com.google.javascript.jscomp.Scope scope23 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention24 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node25 = null;
        boolean boolean26 = closureCodingConvention24.isOptionalParameter(node25);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry27 = null;
        com.google.javascript.jscomp.Scope scope28 = null;
        com.google.javascript.rhino.jstype.ObjectType[] objectTypeArray29 = new com.google.javascript.rhino.jstype.ObjectType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType> objectTypeList30 = new java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList30, objectTypeArray29);
        java.util.Map<java.lang.String, java.lang.String> strMap32 = null;
        closureCodingConvention24.defineDelegateProxyPrototypeProperties(jSTypeRegistry27, scope28, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList30, strMap32);
        java.util.Map<java.lang.String, java.lang.String> strMap34 = null;
        closureCodingConvention15.defineDelegateProxyPrototypeProperties(jSTypeRegistry22, scope23, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList30, strMap34);
        java.util.Map<java.lang.String, java.lang.String> strMap36 = null;
        closureCodingConvention0.defineDelegateProxyPrototypeProperties(jSTypeRegistry13, scope14, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList30, strMap36);
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection38 = closureCodingConvention0.getAssertionFunctions();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection12);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "goog.abstractMethod" + "'", str18, "goog.abstractMethod");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "goog.global" + "'", str19, "goog.global");
        org.junit.Assert.assertNull(delegateRelationship21);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(objectTypeArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection38);
    }

    @Test
    public void test0969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0969");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        boolean boolean4 = closureCodingConvention0.isSuperClassReference("hi!");
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = null;
        com.google.javascript.jscomp.Scope scope6 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention7 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node8 = null;
        boolean boolean9 = closureCodingConvention7.isOptionalParameter(node8);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry10 = null;
        com.google.javascript.jscomp.Scope scope11 = null;
        com.google.javascript.rhino.jstype.ObjectType[] objectTypeArray12 = new com.google.javascript.rhino.jstype.ObjectType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType> objectTypeList13 = new java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList13, objectTypeArray12);
        java.util.Map<java.lang.String, java.lang.String> strMap15 = null;
        closureCodingConvention7.defineDelegateProxyPrototypeProperties(jSTypeRegistry10, scope11, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList13, strMap15);
        java.util.Map<java.lang.String, java.lang.String> strMap17 = null;
        closureCodingConvention0.defineDelegateProxyPrototypeProperties(jSTypeRegistry5, scope6, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList13, strMap17);
        com.google.javascript.rhino.Node node19 = null;
        java.util.Map<java.lang.String, java.lang.String> strMap20 = null;
        closureCodingConvention0.checkForCallingConventionDefiningCalls(node19, strMap20);
        java.lang.String str22 = closureCodingConvention0.getDelegateSuperclassName();
        com.google.javascript.rhino.Node node23 = null;
        com.google.javascript.jscomp.CodingConvention.DelegateRelationship delegateRelationship24 = closureCodingConvention0.getDelegateRelationship(node23);
        com.google.javascript.rhino.Node node25 = null;
        com.google.javascript.jscomp.CodingConvention.DelegateRelationship delegateRelationship26 = closureCodingConvention0.getDelegateRelationship(node25);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(objectTypeArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNull(delegateRelationship24);
        org.junit.Assert.assertNull(delegateRelationship26);
    }

    @Test
    public void test0970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0970");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry3 = null;
        com.google.javascript.jscomp.Scope scope4 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention5 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node6 = null;
        boolean boolean7 = closureCodingConvention5.isOptionalParameter(node6);
        boolean boolean9 = closureCodingConvention5.isSuperClassReference("hi!");
        com.google.javascript.rhino.Node node10 = null;
        boolean boolean11 = closureCodingConvention5.isOptionalParameter(node10);
        boolean boolean13 = closureCodingConvention5.isConstantKey("hi!");
        com.google.javascript.rhino.Node node14 = null;
        boolean boolean15 = closureCodingConvention5.isVarArgsParameter(node14);
        boolean boolean17 = closureCodingConvention5.isExported("");
        com.google.javascript.rhino.Node node18 = null;
        boolean boolean19 = closureCodingConvention5.isVarArgsParameter(node18);
        java.lang.String str20 = closureCodingConvention5.getExportSymbolFunction();
        java.lang.String str21 = closureCodingConvention5.getAbstractMethodName();
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry22 = null;
        com.google.javascript.jscomp.Scope scope23 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention24 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node25 = null;
        boolean boolean26 = closureCodingConvention24.isOptionalParameter(node25);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry27 = null;
        com.google.javascript.jscomp.Scope scope28 = null;
        com.google.javascript.rhino.jstype.ObjectType[] objectTypeArray29 = new com.google.javascript.rhino.jstype.ObjectType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType> objectTypeList30 = new java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList30, objectTypeArray29);
        java.util.Map<java.lang.String, java.lang.String> strMap32 = null;
        closureCodingConvention24.defineDelegateProxyPrototypeProperties(jSTypeRegistry27, scope28, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList30, strMap32);
        java.util.Map<java.lang.String, java.lang.String> strMap34 = null;
        closureCodingConvention5.defineDelegateProxyPrototypeProperties(jSTypeRegistry22, scope23, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList30, strMap34);
        java.util.Map<java.lang.String, java.lang.String> strMap36 = null;
        closureCodingConvention0.defineDelegateProxyPrototypeProperties(jSTypeRegistry3, scope4, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList30, strMap36);
        java.lang.Class<?> wildcardClass38 = objectTypeList30.getClass();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "goog.exportSymbol" + "'", str20, "goog.exportSymbol");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "goog.abstractMethod" + "'", str21, "goog.abstractMethod");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(objectTypeArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(wildcardClass38);
    }

    @Test
    public void test0971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0971");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry3 = null;
        com.google.javascript.jscomp.Scope scope4 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention5 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node6 = null;
        boolean boolean7 = closureCodingConvention5.isOptionalParameter(node6);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry8 = null;
        com.google.javascript.jscomp.Scope scope9 = null;
        com.google.javascript.rhino.jstype.ObjectType[] objectTypeArray10 = new com.google.javascript.rhino.jstype.ObjectType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType> objectTypeList11 = new java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList11, objectTypeArray10);
        java.util.Map<java.lang.String, java.lang.String> strMap13 = null;
        closureCodingConvention5.defineDelegateProxyPrototypeProperties(jSTypeRegistry8, scope9, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList11, strMap13);
        java.util.Map<java.lang.String, java.lang.String> strMap15 = null;
        closureCodingConvention0.defineDelegateProxyPrototypeProperties(jSTypeRegistry3, scope4, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList11, strMap15);
        java.lang.String str17 = closureCodingConvention0.getDelegateSuperclassName();
        boolean boolean19 = closureCodingConvention0.isConstantKey("goog.abstractMethod");
        java.lang.String str20 = closureCodingConvention0.getDelegateSuperclassName();
        java.lang.String str21 = closureCodingConvention0.getAbstractMethodName();
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection22 = closureCodingConvention0.getAssertionFunctions();
        com.google.javascript.rhino.Node node23 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.String> strList24 = closureCodingConvention0.identifyTypeDeclarationCall(node23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(objectTypeArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "goog.abstractMethod" + "'", str21, "goog.abstractMethod");
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection22);
    }

    @Test
    public void test0972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0972");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        boolean boolean4 = closureCodingConvention0.isSuperClassReference("hi!");
        com.google.javascript.rhino.Node node5 = null;
        boolean boolean6 = closureCodingConvention0.isOptionalParameter(node5);
        boolean boolean8 = closureCodingConvention0.isConstantKey("hi!");
        com.google.javascript.rhino.Node node9 = null;
        boolean boolean10 = closureCodingConvention0.isVarArgsParameter(node9);
        boolean boolean12 = closureCodingConvention0.isExported("");
        com.google.javascript.rhino.Node node13 = null;
        boolean boolean14 = closureCodingConvention0.isVarArgsParameter(node13);
        java.lang.String str15 = closureCodingConvention0.getExportSymbolFunction();
        java.lang.String str16 = closureCodingConvention0.getAbstractMethodName();
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry17 = null;
        com.google.javascript.jscomp.Scope scope18 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention19 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node20 = null;
        boolean boolean21 = closureCodingConvention19.isOptionalParameter(node20);
        java.lang.String str22 = closureCodingConvention19.getAbstractMethodName();
        java.lang.String str23 = closureCodingConvention19.getGlobalObject();
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection24 = closureCodingConvention19.getAssertionFunctions();
        boolean boolean26 = closureCodingConvention19.isConstant("goog.global");
        com.google.javascript.rhino.Node node27 = null;
        com.google.javascript.jscomp.CodingConvention.DelegateRelationship delegateRelationship28 = closureCodingConvention19.getDelegateRelationship(node27);
        com.google.javascript.rhino.jstype.ObjectType objectType29 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType30 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType31 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType32 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType33 = null;
        closureCodingConvention19.applyDelegateRelationship(objectType29, objectType30, objectType31, functionType32, functionType33);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry35 = null;
        com.google.javascript.jscomp.Scope scope36 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention37 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node38 = null;
        boolean boolean39 = closureCodingConvention37.isOptionalParameter(node38);
        boolean boolean41 = closureCodingConvention37.isSuperClassReference("hi!");
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry42 = null;
        com.google.javascript.jscomp.Scope scope43 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention44 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node45 = null;
        boolean boolean46 = closureCodingConvention44.isOptionalParameter(node45);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry47 = null;
        com.google.javascript.jscomp.Scope scope48 = null;
        com.google.javascript.rhino.jstype.ObjectType[] objectTypeArray49 = new com.google.javascript.rhino.jstype.ObjectType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType> objectTypeList50 = new java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList50, objectTypeArray49);
        java.util.Map<java.lang.String, java.lang.String> strMap52 = null;
        closureCodingConvention44.defineDelegateProxyPrototypeProperties(jSTypeRegistry47, scope48, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList50, strMap52);
        java.util.Map<java.lang.String, java.lang.String> strMap54 = null;
        closureCodingConvention37.defineDelegateProxyPrototypeProperties(jSTypeRegistry42, scope43, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList50, strMap54);
        java.util.Map<java.lang.String, java.lang.String> strMap56 = null;
        closureCodingConvention19.defineDelegateProxyPrototypeProperties(jSTypeRegistry35, scope36, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList50, strMap56);
        java.util.Map<java.lang.String, java.lang.String> strMap58 = null;
        closureCodingConvention0.defineDelegateProxyPrototypeProperties(jSTypeRegistry17, scope18, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList50, strMap58);
        java.lang.String str60 = closureCodingConvention0.getExportPropertyFunction();
        boolean boolean62 = closureCodingConvention0.isConstant("hi!");
        com.google.javascript.rhino.jstype.ObjectType objectType63 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType64 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType65 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType66 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType67 = null;
        closureCodingConvention0.applyDelegateRelationship(objectType63, objectType64, objectType65, functionType66, functionType67);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "goog.exportSymbol" + "'", str15, "goog.exportSymbol");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "goog.abstractMethod" + "'", str16, "goog.abstractMethod");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "goog.abstractMethod" + "'", str22, "goog.abstractMethod");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "goog.global" + "'", str23, "goog.global");
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(delegateRelationship28);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(objectTypeArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "goog.exportProperty" + "'", str60, "goog.exportProperty");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
    }

    @Test
    public void test0973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0973");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        boolean boolean4 = closureCodingConvention0.isSuperClassReference("hi!");
        com.google.javascript.rhino.Node node5 = null;
        boolean boolean6 = closureCodingConvention0.isOptionalParameter(node5);
        boolean boolean8 = closureCodingConvention0.isConstantKey("hi!");
        com.google.javascript.rhino.Node node9 = null;
        boolean boolean10 = closureCodingConvention0.isVarArgsParameter(node9);
        java.lang.String str11 = closureCodingConvention0.getDelegateSuperclassName();
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection12 = closureCodingConvention0.getAssertionFunctions();
        boolean boolean14 = closureCodingConvention0.isPrivate("goog.global");
        boolean boolean16 = closureCodingConvention0.isExported("hi!");
        com.google.javascript.rhino.Node node17 = null;
        boolean boolean18 = closureCodingConvention0.isOptionalParameter(node17);
        boolean boolean21 = closureCodingConvention0.isExported("", true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test0974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0974");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        java.lang.String str3 = closureCodingConvention0.getAbstractMethodName();
        boolean boolean5 = closureCodingConvention0.isConstant("goog.abstractMethod");
        boolean boolean7 = closureCodingConvention0.isValidEnumKey("hi!");
        java.lang.String str8 = closureCodingConvention0.getExportPropertyFunction();
        com.google.javascript.rhino.Node node9 = null;
        com.google.javascript.rhino.Node node10 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str11 = closureCodingConvention0.extractClassNameIfRequire(node9, node10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "goog.abstractMethod" + "'", str3, "goog.abstractMethod");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "goog.exportProperty" + "'", str8, "goog.exportProperty");
    }

    @Test
    public void test0975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0975");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry3 = null;
        com.google.javascript.jscomp.Scope scope4 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention5 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node6 = null;
        boolean boolean7 = closureCodingConvention5.isOptionalParameter(node6);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry8 = null;
        com.google.javascript.jscomp.Scope scope9 = null;
        com.google.javascript.rhino.jstype.ObjectType[] objectTypeArray10 = new com.google.javascript.rhino.jstype.ObjectType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType> objectTypeList11 = new java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList11, objectTypeArray10);
        java.util.Map<java.lang.String, java.lang.String> strMap13 = null;
        closureCodingConvention5.defineDelegateProxyPrototypeProperties(jSTypeRegistry8, scope9, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList11, strMap13);
        java.util.Map<java.lang.String, java.lang.String> strMap15 = null;
        closureCodingConvention0.defineDelegateProxyPrototypeProperties(jSTypeRegistry3, scope4, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList11, strMap15);
        com.google.javascript.rhino.Node node17 = null;
        java.util.Map<java.lang.String, java.lang.String> strMap18 = null;
        closureCodingConvention0.checkForCallingConventionDefiningCalls(node17, strMap18);
        java.lang.String str20 = closureCodingConvention0.getGlobalObject();
        com.google.javascript.jscomp.NodeTraversal nodeTraversal21 = null;
        com.google.javascript.rhino.Node node22 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.jscomp.CodingConvention.ObjectLiteralCast objectLiteralCast23 = closureCodingConvention0.getObjectLiteralCast(nodeTraversal21, node22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(objectTypeArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "goog.global" + "'", str20, "goog.global");
    }

    @Test
    public void test0976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0976");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        java.lang.String str3 = closureCodingConvention0.getAbstractMethodName();
        java.lang.String str4 = closureCodingConvention0.getGlobalObject();
        boolean boolean6 = closureCodingConvention0.isExported("goog.global");
        boolean boolean8 = closureCodingConvention0.isConstant("goog.abstractMethod");
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry9 = null;
        com.google.javascript.jscomp.Scope scope10 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention11 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node12 = null;
        boolean boolean13 = closureCodingConvention11.isOptionalParameter(node12);
        java.lang.String str14 = closureCodingConvention11.getAbstractMethodName();
        java.lang.String str15 = closureCodingConvention11.getGlobalObject();
        com.google.javascript.rhino.Node node16 = null;
        com.google.javascript.jscomp.CodingConvention.DelegateRelationship delegateRelationship17 = closureCodingConvention11.getDelegateRelationship(node16);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry18 = null;
        com.google.javascript.jscomp.Scope scope19 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention20 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node21 = null;
        boolean boolean22 = closureCodingConvention20.isOptionalParameter(node21);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry23 = null;
        com.google.javascript.jscomp.Scope scope24 = null;
        com.google.javascript.rhino.jstype.ObjectType[] objectTypeArray25 = new com.google.javascript.rhino.jstype.ObjectType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType> objectTypeList26 = new java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList26, objectTypeArray25);
        java.util.Map<java.lang.String, java.lang.String> strMap28 = null;
        closureCodingConvention20.defineDelegateProxyPrototypeProperties(jSTypeRegistry23, scope24, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList26, strMap28);
        java.util.Map<java.lang.String, java.lang.String> strMap30 = null;
        closureCodingConvention11.defineDelegateProxyPrototypeProperties(jSTypeRegistry18, scope19, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList26, strMap30);
        java.util.Map<java.lang.String, java.lang.String> strMap32 = null;
        closureCodingConvention0.defineDelegateProxyPrototypeProperties(jSTypeRegistry9, scope10, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList26, strMap32);
        java.lang.String str34 = closureCodingConvention0.getExportSymbolFunction();
        java.lang.String str35 = closureCodingConvention0.getExportSymbolFunction();
        java.lang.String str36 = closureCodingConvention0.getExportSymbolFunction();
        java.lang.String str37 = closureCodingConvention0.getDelegateSuperclassName();
        com.google.javascript.rhino.Node node38 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship39 = closureCodingConvention0.getClassesDefinedByCall(node38);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "goog.abstractMethod" + "'", str3, "goog.abstractMethod");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "goog.global" + "'", str4, "goog.global");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "goog.abstractMethod" + "'", str14, "goog.abstractMethod");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "goog.global" + "'", str15, "goog.global");
        org.junit.Assert.assertNull(delegateRelationship17);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(objectTypeArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "goog.exportSymbol" + "'", str34, "goog.exportSymbol");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "goog.exportSymbol" + "'", str35, "goog.exportSymbol");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "goog.exportSymbol" + "'", str36, "goog.exportSymbol");
        org.junit.Assert.assertNull(str37);
    }

    @Test
    public void test0977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0977");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        java.lang.String str3 = closureCodingConvention0.getAbstractMethodName();
        java.lang.String str4 = closureCodingConvention0.getGlobalObject();
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection5 = closureCodingConvention0.getAssertionFunctions();
        boolean boolean7 = closureCodingConvention0.isExported("goog.abstractMethod");
        com.google.javascript.rhino.jstype.FunctionType functionType8 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType9 = null;
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType10 = null;
        closureCodingConvention0.applySubclassRelationship(functionType8, functionType9, subclassType10);
        java.lang.String str12 = closureCodingConvention0.getExportPropertyFunction();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "goog.abstractMethod" + "'", str3, "goog.abstractMethod");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "goog.global" + "'", str4, "goog.global");
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "goog.exportProperty" + "'", str12, "goog.exportProperty");
    }

    @Test
    public void test0978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0978");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.jstype.ObjectType objectType1 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType2 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType3 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType4 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType5 = null;
        closureCodingConvention0.applyDelegateRelationship(objectType1, objectType2, objectType3, functionType4, functionType5);
        java.lang.String str7 = closureCodingConvention0.getGlobalObject();
        boolean boolean9 = closureCodingConvention0.isPrivate("goog.abstractMethod");
        com.google.javascript.rhino.jstype.ObjectType objectType10 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType11 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType12 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType13 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType14 = null;
        closureCodingConvention0.applyDelegateRelationship(objectType10, objectType11, objectType12, functionType13, functionType14);
        java.lang.String str16 = closureCodingConvention0.getGlobalObject();
        boolean boolean18 = closureCodingConvention0.isConstant("goog.exportProperty");
        com.google.javascript.rhino.Node node19 = null;
        java.util.Map<java.lang.String, java.lang.String> strMap20 = null;
        closureCodingConvention0.checkForCallingConventionDefiningCalls(node19, strMap20);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry22 = null;
        com.google.javascript.jscomp.Scope scope23 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention24 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node25 = null;
        boolean boolean26 = closureCodingConvention24.isOptionalParameter(node25);
        java.lang.String str27 = closureCodingConvention24.getAbstractMethodName();
        java.lang.String str28 = closureCodingConvention24.getGlobalObject();
        boolean boolean30 = closureCodingConvention24.isExported("goog.global");
        boolean boolean32 = closureCodingConvention24.isConstant("goog.abstractMethod");
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry33 = null;
        com.google.javascript.jscomp.Scope scope34 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention35 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node36 = null;
        boolean boolean37 = closureCodingConvention35.isOptionalParameter(node36);
        java.lang.String str38 = closureCodingConvention35.getAbstractMethodName();
        java.lang.String str39 = closureCodingConvention35.getGlobalObject();
        com.google.javascript.rhino.Node node40 = null;
        com.google.javascript.jscomp.CodingConvention.DelegateRelationship delegateRelationship41 = closureCodingConvention35.getDelegateRelationship(node40);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry42 = null;
        com.google.javascript.jscomp.Scope scope43 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention44 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node45 = null;
        boolean boolean46 = closureCodingConvention44.isOptionalParameter(node45);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry47 = null;
        com.google.javascript.jscomp.Scope scope48 = null;
        com.google.javascript.rhino.jstype.ObjectType[] objectTypeArray49 = new com.google.javascript.rhino.jstype.ObjectType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType> objectTypeList50 = new java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList50, objectTypeArray49);
        java.util.Map<java.lang.String, java.lang.String> strMap52 = null;
        closureCodingConvention44.defineDelegateProxyPrototypeProperties(jSTypeRegistry47, scope48, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList50, strMap52);
        java.util.Map<java.lang.String, java.lang.String> strMap54 = null;
        closureCodingConvention35.defineDelegateProxyPrototypeProperties(jSTypeRegistry42, scope43, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList50, strMap54);
        java.util.Map<java.lang.String, java.lang.String> strMap56 = null;
        closureCodingConvention24.defineDelegateProxyPrototypeProperties(jSTypeRegistry33, scope34, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList50, strMap56);
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection58 = closureCodingConvention24.getAssertionFunctions();
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry59 = null;
        com.google.javascript.jscomp.Scope scope60 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention61 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node62 = null;
        boolean boolean63 = closureCodingConvention61.isOptionalParameter(node62);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry64 = null;
        com.google.javascript.jscomp.Scope scope65 = null;
        com.google.javascript.rhino.jstype.ObjectType[] objectTypeArray66 = new com.google.javascript.rhino.jstype.ObjectType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType> objectTypeList67 = new java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList67, objectTypeArray66);
        java.util.Map<java.lang.String, java.lang.String> strMap69 = null;
        closureCodingConvention61.defineDelegateProxyPrototypeProperties(jSTypeRegistry64, scope65, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList67, strMap69);
        java.util.Map<java.lang.String, java.lang.String> strMap71 = null;
        closureCodingConvention24.defineDelegateProxyPrototypeProperties(jSTypeRegistry59, scope60, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList67, strMap71);
        java.util.Map<java.lang.String, java.lang.String> strMap73 = null;
        closureCodingConvention0.defineDelegateProxyPrototypeProperties(jSTypeRegistry22, scope23, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList67, strMap73);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "goog.global" + "'", str7, "goog.global");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "goog.global" + "'", str16, "goog.global");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "goog.abstractMethod" + "'", str27, "goog.abstractMethod");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "goog.global" + "'", str28, "goog.global");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "goog.abstractMethod" + "'", str38, "goog.abstractMethod");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "goog.global" + "'", str39, "goog.global");
        org.junit.Assert.assertNull(delegateRelationship41);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(objectTypeArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection58);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(objectTypeArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
    }

    @Test
    public void test0979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0979");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        boolean boolean4 = closureCodingConvention0.isSuperClassReference("hi!");
        com.google.javascript.rhino.Node node5 = null;
        boolean boolean6 = closureCodingConvention0.isOptionalParameter(node5);
        boolean boolean8 = closureCodingConvention0.isConstantKey("hi!");
        com.google.javascript.rhino.Node node9 = null;
        boolean boolean10 = closureCodingConvention0.isVarArgsParameter(node9);
        com.google.javascript.rhino.Node node11 = null;
        boolean boolean12 = closureCodingConvention0.isVarArgsParameter(node11);
        com.google.javascript.rhino.Node node13 = null;
        java.util.Map<java.lang.String, java.lang.String> strMap14 = null;
        closureCodingConvention0.checkForCallingConventionDefiningCalls(node13, strMap14);
        com.google.javascript.rhino.jstype.FunctionType functionType16 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType17 = null;
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType18 = null;
        closureCodingConvention0.applySubclassRelationship(functionType16, functionType17, subclassType18);
        com.google.javascript.rhino.Node node20 = null;
        java.util.Map<java.lang.String, java.lang.String> strMap21 = null;
        closureCodingConvention0.checkForCallingConventionDefiningCalls(node20, strMap21);
        boolean boolean24 = closureCodingConvention0.isSuperClassReference("goog.global");
        java.lang.String str25 = closureCodingConvention0.getExportPropertyFunction();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "goog.exportProperty" + "'", str25, "goog.exportProperty");
    }

    @Test
    public void test0980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0980");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        boolean boolean4 = closureCodingConvention0.isSuperClassReference("hi!");
        com.google.javascript.rhino.Node node5 = null;
        boolean boolean6 = closureCodingConvention0.isOptionalParameter(node5);
        boolean boolean8 = closureCodingConvention0.isConstantKey("hi!");
        com.google.javascript.rhino.Node node9 = null;
        boolean boolean10 = closureCodingConvention0.isVarArgsParameter(node9);
        com.google.javascript.rhino.Node node11 = null;
        boolean boolean12 = closureCodingConvention0.isVarArgsParameter(node11);
        boolean boolean14 = closureCodingConvention0.isValidEnumKey("goog.abstractMethod");
        java.lang.String str15 = closureCodingConvention0.getDelegateSuperclassName();
        boolean boolean17 = closureCodingConvention0.isExported("");
        boolean boolean19 = closureCodingConvention0.isConstantKey("goog.exportProperty");
        com.google.javascript.rhino.Node node20 = null;
        boolean boolean21 = closureCodingConvention0.isVarArgsParameter(node20);
        boolean boolean24 = closureCodingConvention0.isExported("goog.exportProperty", true);
        java.lang.String str25 = closureCodingConvention0.getDelegateSuperclassName();
        java.lang.String str26 = closureCodingConvention0.getExportSymbolFunction();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "goog.exportSymbol" + "'", str26, "goog.exportSymbol");
    }

    @Test
    public void test0981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0981");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        java.lang.String str3 = closureCodingConvention0.getAbstractMethodName();
        boolean boolean5 = closureCodingConvention0.isConstant("goog.abstractMethod");
        java.lang.String str6 = closureCodingConvention0.getDelegateSuperclassName();
        com.google.javascript.rhino.jstype.ObjectType objectType7 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType8 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType9 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType10 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType11 = null;
        closureCodingConvention0.applyDelegateRelationship(objectType7, objectType8, objectType9, functionType10, functionType11);
        boolean boolean14 = closureCodingConvention0.isValidEnumKey("goog.exportProperty");
        java.lang.String str15 = closureCodingConvention0.getGlobalObject();
        com.google.javascript.rhino.Node node16 = null;
        boolean boolean17 = closureCodingConvention0.isOptionalParameter(node16);
        java.lang.String str18 = closureCodingConvention0.getGlobalObject();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "goog.abstractMethod" + "'", str3, "goog.abstractMethod");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "goog.global" + "'", str15, "goog.global");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "goog.global" + "'", str18, "goog.global");
    }

    @Test
    public void test0982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0982");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        boolean boolean4 = closureCodingConvention0.isSuperClassReference("hi!");
        com.google.javascript.rhino.Node node5 = null;
        boolean boolean6 = closureCodingConvention0.isOptionalParameter(node5);
        boolean boolean8 = closureCodingConvention0.isConstantKey("hi!");
        com.google.javascript.rhino.Node node9 = null;
        boolean boolean10 = closureCodingConvention0.isVarArgsParameter(node9);
        java.lang.String str11 = closureCodingConvention0.getDelegateSuperclassName();
        java.lang.String str12 = closureCodingConvention0.getAbstractMethodName();
        boolean boolean14 = closureCodingConvention0.isConstantKey("goog.global");
        boolean boolean16 = closureCodingConvention0.isPrivate("goog.exportProperty");
        java.lang.String str17 = closureCodingConvention0.getExportSymbolFunction();
        java.lang.String str18 = closureCodingConvention0.getExportSymbolFunction();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "goog.abstractMethod" + "'", str12, "goog.abstractMethod");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "goog.exportSymbol" + "'", str17, "goog.exportSymbol");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "goog.exportSymbol" + "'", str18, "goog.exportSymbol");
    }

    @Test
    public void test0983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0983");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        boolean boolean4 = closureCodingConvention0.isSuperClassReference("hi!");
        com.google.javascript.rhino.Node node5 = null;
        boolean boolean6 = closureCodingConvention0.isOptionalParameter(node5);
        boolean boolean8 = closureCodingConvention0.isExported("hi!");
        java.lang.String str9 = closureCodingConvention0.getExportPropertyFunction();
        boolean boolean11 = closureCodingConvention0.isConstant("goog.global");
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection12 = closureCodingConvention0.getAssertionFunctions();
        com.google.javascript.rhino.Node node13 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship14 = closureCodingConvention0.getClassesDefinedByCall(node13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "goog.exportProperty" + "'", str9, "goog.exportProperty");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection12);
    }

    @Test
    public void test0984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0984");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry3 = null;
        com.google.javascript.jscomp.Scope scope4 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention5 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node6 = null;
        boolean boolean7 = closureCodingConvention5.isOptionalParameter(node6);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry8 = null;
        com.google.javascript.jscomp.Scope scope9 = null;
        com.google.javascript.rhino.jstype.ObjectType[] objectTypeArray10 = new com.google.javascript.rhino.jstype.ObjectType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType> objectTypeList11 = new java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList11, objectTypeArray10);
        java.util.Map<java.lang.String, java.lang.String> strMap13 = null;
        closureCodingConvention5.defineDelegateProxyPrototypeProperties(jSTypeRegistry8, scope9, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList11, strMap13);
        java.util.Map<java.lang.String, java.lang.String> strMap15 = null;
        closureCodingConvention0.defineDelegateProxyPrototypeProperties(jSTypeRegistry3, scope4, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList11, strMap15);
        com.google.javascript.rhino.Node node17 = null;
        java.util.Map<java.lang.String, java.lang.String> strMap18 = null;
        closureCodingConvention0.checkForCallingConventionDefiningCalls(node17, strMap18);
        java.lang.String str20 = closureCodingConvention0.getGlobalObject();
        boolean boolean22 = closureCodingConvention0.isConstant("hi!");
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry23 = null;
        com.google.javascript.jscomp.Scope scope24 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention25 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node26 = null;
        boolean boolean27 = closureCodingConvention25.isOptionalParameter(node26);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry28 = null;
        com.google.javascript.jscomp.Scope scope29 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention30 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node31 = null;
        boolean boolean32 = closureCodingConvention30.isOptionalParameter(node31);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry33 = null;
        com.google.javascript.jscomp.Scope scope34 = null;
        com.google.javascript.rhino.jstype.ObjectType[] objectTypeArray35 = new com.google.javascript.rhino.jstype.ObjectType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType> objectTypeList36 = new java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList36, objectTypeArray35);
        java.util.Map<java.lang.String, java.lang.String> strMap38 = null;
        closureCodingConvention30.defineDelegateProxyPrototypeProperties(jSTypeRegistry33, scope34, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList36, strMap38);
        java.util.Map<java.lang.String, java.lang.String> strMap40 = null;
        closureCodingConvention25.defineDelegateProxyPrototypeProperties(jSTypeRegistry28, scope29, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList36, strMap40);
        java.util.Map<java.lang.String, java.lang.String> strMap42 = null;
        closureCodingConvention0.defineDelegateProxyPrototypeProperties(jSTypeRegistry23, scope24, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList36, strMap42);
        java.lang.String str44 = closureCodingConvention0.getAbstractMethodName();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(objectTypeArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "goog.global" + "'", str20, "goog.global");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(objectTypeArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "goog.abstractMethod" + "'", str44, "goog.abstractMethod");
    }

    @Test
    public void test0985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0985");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        boolean boolean4 = closureCodingConvention0.isSuperClassReference("hi!");
        com.google.javascript.rhino.Node node5 = null;
        boolean boolean6 = closureCodingConvention0.isOptionalParameter(node5);
        boolean boolean8 = closureCodingConvention0.isConstantKey("hi!");
        com.google.javascript.rhino.Node node9 = null;
        boolean boolean10 = closureCodingConvention0.isVarArgsParameter(node9);
        com.google.javascript.rhino.Node node11 = null;
        boolean boolean12 = closureCodingConvention0.isVarArgsParameter(node11);
        com.google.javascript.rhino.Node node13 = null;
        java.util.Map<java.lang.String, java.lang.String> strMap14 = null;
        closureCodingConvention0.checkForCallingConventionDefiningCalls(node13, strMap14);
        java.lang.String str16 = closureCodingConvention0.getAbstractMethodName();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "goog.abstractMethod" + "'", str16, "goog.abstractMethod");
    }

    @Test
    public void test0986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0986");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        boolean boolean4 = closureCodingConvention0.isValidEnumKey("hi!");
        com.google.javascript.jscomp.NodeTraversal nodeTraversal5 = null;
        com.google.javascript.rhino.Node node6 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.jscomp.CodingConvention.ObjectLiteralCast objectLiteralCast7 = closureCodingConvention0.getObjectLiteralCast(nodeTraversal5, node6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
    }

    @Test
    public void test0987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0987");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry3 = null;
        com.google.javascript.jscomp.Scope scope4 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention5 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node6 = null;
        boolean boolean7 = closureCodingConvention5.isOptionalParameter(node6);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry8 = null;
        com.google.javascript.jscomp.Scope scope9 = null;
        com.google.javascript.rhino.jstype.ObjectType[] objectTypeArray10 = new com.google.javascript.rhino.jstype.ObjectType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType> objectTypeList11 = new java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList11, objectTypeArray10);
        java.util.Map<java.lang.String, java.lang.String> strMap13 = null;
        closureCodingConvention5.defineDelegateProxyPrototypeProperties(jSTypeRegistry8, scope9, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList11, strMap13);
        java.util.Map<java.lang.String, java.lang.String> strMap15 = null;
        closureCodingConvention0.defineDelegateProxyPrototypeProperties(jSTypeRegistry3, scope4, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList11, strMap15);
        com.google.javascript.rhino.Node node17 = null;
        com.google.javascript.jscomp.CodingConvention.DelegateRelationship delegateRelationship18 = closureCodingConvention0.getDelegateRelationship(node17);
        com.google.javascript.rhino.Node node19 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.String> strList20 = closureCodingConvention0.identifyTypeDeclarationCall(node19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(objectTypeArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(delegateRelationship18);
    }

    @Test
    public void test0988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0988");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        boolean boolean4 = closureCodingConvention0.isSuperClassReference("hi!");
        com.google.javascript.rhino.Node node5 = null;
        boolean boolean6 = closureCodingConvention0.isOptionalParameter(node5);
        boolean boolean8 = closureCodingConvention0.isConstantKey("hi!");
        com.google.javascript.rhino.Node node9 = null;
        boolean boolean10 = closureCodingConvention0.isVarArgsParameter(node9);
        java.lang.String str11 = closureCodingConvention0.getDelegateSuperclassName();
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection12 = closureCodingConvention0.getAssertionFunctions();
        boolean boolean14 = closureCodingConvention0.isPrivate("goog.global");
        boolean boolean16 = closureCodingConvention0.isExported("hi!");
        com.google.javascript.rhino.Node node17 = null;
        boolean boolean18 = closureCodingConvention0.isOptionalParameter(node17);
        com.google.javascript.jscomp.NodeTraversal nodeTraversal19 = null;
        com.google.javascript.rhino.Node node20 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.jscomp.CodingConvention.ObjectLiteralCast objectLiteralCast21 = closureCodingConvention0.getObjectLiteralCast(nodeTraversal19, node20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test0989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0989");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        java.lang.String str3 = closureCodingConvention0.getAbstractMethodName();
        boolean boolean5 = closureCodingConvention0.isConstant("goog.abstractMethod");
        java.lang.String str6 = closureCodingConvention0.getDelegateSuperclassName();
        com.google.javascript.rhino.jstype.ObjectType objectType7 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType8 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType9 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType10 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType11 = null;
        closureCodingConvention0.applyDelegateRelationship(objectType7, objectType8, objectType9, functionType10, functionType11);
        java.lang.String str13 = closureCodingConvention0.getExportPropertyFunction();
        com.google.javascript.rhino.Node node14 = null;
        java.util.Map<java.lang.String, java.lang.String> strMap15 = null;
        closureCodingConvention0.checkForCallingConventionDefiningCalls(node14, strMap15);
        com.google.javascript.rhino.Node node17 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean18 = closureCodingConvention0.isPropertyTestFunction(node17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "goog.abstractMethod" + "'", str3, "goog.abstractMethod");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "goog.exportProperty" + "'", str13, "goog.exportProperty");
    }

    @Test
    public void test0990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0990");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        boolean boolean4 = closureCodingConvention0.isSuperClassReference("hi!");
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = null;
        com.google.javascript.jscomp.Scope scope6 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention7 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node8 = null;
        boolean boolean9 = closureCodingConvention7.isOptionalParameter(node8);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry10 = null;
        com.google.javascript.jscomp.Scope scope11 = null;
        com.google.javascript.rhino.jstype.ObjectType[] objectTypeArray12 = new com.google.javascript.rhino.jstype.ObjectType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType> objectTypeList13 = new java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList13, objectTypeArray12);
        java.util.Map<java.lang.String, java.lang.String> strMap15 = null;
        closureCodingConvention7.defineDelegateProxyPrototypeProperties(jSTypeRegistry10, scope11, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList13, strMap15);
        java.util.Map<java.lang.String, java.lang.String> strMap17 = null;
        closureCodingConvention0.defineDelegateProxyPrototypeProperties(jSTypeRegistry5, scope6, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList13, strMap17);
        java.lang.String str19 = closureCodingConvention0.getExportPropertyFunction();
        java.lang.Class<?> wildcardClass20 = closureCodingConvention0.getClass();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(objectTypeArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "goog.exportProperty" + "'", str19, "goog.exportProperty");
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test0991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0991");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        boolean boolean2 = closureCodingConvention0.isExported("goog.global");
        boolean boolean4 = closureCodingConvention0.isConstant("goog.exportProperty");
        boolean boolean6 = closureCodingConvention0.isPrivate("goog.global");
        java.lang.String str7 = closureCodingConvention0.getDelegateSuperclassName();
        com.google.javascript.rhino.jstype.FunctionType functionType8 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType9 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType10 = null;
        // The following exception was thrown during execution in test generation
        try {
            closureCodingConvention0.applySingletonGetter(functionType8, functionType9, objectType10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test0992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0992");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        boolean boolean4 = closureCodingConvention0.isSuperClassReference("hi!");
        com.google.javascript.rhino.Node node5 = null;
        boolean boolean6 = closureCodingConvention0.isOptionalParameter(node5);
        java.lang.String str7 = closureCodingConvention0.getExportPropertyFunction();
        java.lang.String str8 = closureCodingConvention0.getGlobalObject();
        boolean boolean10 = closureCodingConvention0.isValidEnumKey("");
        java.lang.String str11 = closureCodingConvention0.getExportSymbolFunction();
        com.google.javascript.rhino.Node node12 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship13 = closureCodingConvention0.getClassesDefinedByCall(node12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "goog.exportProperty" + "'", str7, "goog.exportProperty");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "goog.global" + "'", str8, "goog.global");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "goog.exportSymbol" + "'", str11, "goog.exportSymbol");
    }

    @Test
    public void test0993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0993");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        java.lang.String str3 = closureCodingConvention0.getAbstractMethodName();
        java.lang.String str4 = closureCodingConvention0.getGlobalObject();
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection5 = closureCodingConvention0.getAssertionFunctions();
        boolean boolean7 = closureCodingConvention0.isConstant("goog.global");
        com.google.javascript.rhino.Node node8 = null;
        com.google.javascript.jscomp.CodingConvention.DelegateRelationship delegateRelationship9 = closureCodingConvention0.getDelegateRelationship(node8);
        com.google.javascript.rhino.jstype.FunctionType functionType10 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType11 = null;
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType12 = null;
        closureCodingConvention0.applySubclassRelationship(functionType10, functionType11, subclassType12);
        java.lang.String str14 = closureCodingConvention0.getExportSymbolFunction();
        boolean boolean16 = closureCodingConvention0.isExported("");
        com.google.javascript.rhino.Node node17 = null;
        com.google.javascript.jscomp.CodingConvention.DelegateRelationship delegateRelationship18 = closureCodingConvention0.getDelegateRelationship(node17);
        boolean boolean20 = closureCodingConvention0.isSuperClassReference("goog.global");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "goog.abstractMethod" + "'", str3, "goog.abstractMethod");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "goog.global" + "'", str4, "goog.global");
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(delegateRelationship9);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "goog.exportSymbol" + "'", str14, "goog.exportSymbol");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(delegateRelationship18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test0994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0994");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        java.lang.String str3 = closureCodingConvention0.getAbstractMethodName();
        java.lang.String str4 = closureCodingConvention0.getGlobalObject();
        com.google.javascript.rhino.Node node5 = null;
        java.util.Map<java.lang.String, java.lang.String> strMap6 = null;
        closureCodingConvention0.checkForCallingConventionDefiningCalls(node5, strMap6);
        boolean boolean9 = closureCodingConvention0.isExported("goog.exportSymbol");
        com.google.javascript.rhino.jstype.FunctionType functionType10 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType11 = null;
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType12 = null;
        closureCodingConvention0.applySubclassRelationship(functionType10, functionType11, subclassType12);
        com.google.javascript.rhino.jstype.ObjectType objectType14 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType15 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType16 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType17 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType18 = null;
        closureCodingConvention0.applyDelegateRelationship(objectType14, objectType15, objectType16, functionType17, functionType18);
        com.google.javascript.rhino.Node node20 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship21 = closureCodingConvention0.getClassesDefinedByCall(node20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "goog.abstractMethod" + "'", str3, "goog.abstractMethod");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "goog.global" + "'", str4, "goog.global");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test0995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0995");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        boolean boolean2 = closureCodingConvention0.isExported("goog.global");
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection3 = closureCodingConvention0.getAssertionFunctions();
        boolean boolean5 = closureCodingConvention0.isPrivate("");
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry6 = null;
        com.google.javascript.jscomp.Scope scope7 = null;
        java.util.List<com.google.javascript.rhino.jstype.ObjectType> objectTypeList8 = null;
        java.util.Map<java.lang.String, java.lang.String> strMap9 = null;
        closureCodingConvention0.defineDelegateProxyPrototypeProperties(jSTypeRegistry6, scope7, objectTypeList8, strMap9);
        com.google.javascript.rhino.Node node11 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean12 = closureCodingConvention0.isPropertyTestFunction(node11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test0996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0996");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry3 = null;
        com.google.javascript.jscomp.Scope scope4 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention5 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node6 = null;
        boolean boolean7 = closureCodingConvention5.isOptionalParameter(node6);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry8 = null;
        com.google.javascript.jscomp.Scope scope9 = null;
        com.google.javascript.rhino.jstype.ObjectType[] objectTypeArray10 = new com.google.javascript.rhino.jstype.ObjectType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType> objectTypeList11 = new java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList11, objectTypeArray10);
        java.util.Map<java.lang.String, java.lang.String> strMap13 = null;
        closureCodingConvention5.defineDelegateProxyPrototypeProperties(jSTypeRegistry8, scope9, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList11, strMap13);
        java.util.Map<java.lang.String, java.lang.String> strMap15 = null;
        closureCodingConvention0.defineDelegateProxyPrototypeProperties(jSTypeRegistry3, scope4, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList11, strMap15);
        com.google.javascript.rhino.Node node17 = null;
        java.util.Map<java.lang.String, java.lang.String> strMap18 = null;
        closureCodingConvention0.checkForCallingConventionDefiningCalls(node17, strMap18);
        java.lang.String str20 = closureCodingConvention0.getGlobalObject();
        java.lang.String str21 = closureCodingConvention0.getExportPropertyFunction();
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection22 = closureCodingConvention0.getAssertionFunctions();
        boolean boolean24 = closureCodingConvention0.isValidEnumKey("goog.exportSymbol");
        com.google.javascript.rhino.Node node25 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship26 = closureCodingConvention0.getClassesDefinedByCall(node25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(objectTypeArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "goog.global" + "'", str20, "goog.global");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "goog.exportProperty" + "'", str21, "goog.exportProperty");
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
    }

    @Test
    public void test0997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0997");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        boolean boolean2 = closureCodingConvention0.isConstantKey("goog.abstractMethod");
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection3 = closureCodingConvention0.getAssertionFunctions();
        boolean boolean5 = closureCodingConvention0.isExported("goog.global");
        java.lang.String str6 = closureCodingConvention0.getDelegateSuperclassName();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
    }

    @Test
    public void test0998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0998");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        boolean boolean4 = closureCodingConvention0.isSuperClassReference("hi!");
        com.google.javascript.rhino.Node node5 = null;
        boolean boolean6 = closureCodingConvention0.isOptionalParameter(node5);
        boolean boolean8 = closureCodingConvention0.isConstantKey("hi!");
        com.google.javascript.rhino.Node node9 = null;
        boolean boolean10 = closureCodingConvention0.isVarArgsParameter(node9);
        boolean boolean12 = closureCodingConvention0.isExported("");
        com.google.javascript.rhino.Node node13 = null;
        boolean boolean14 = closureCodingConvention0.isVarArgsParameter(node13);
        java.lang.String str15 = closureCodingConvention0.getExportSymbolFunction();
        java.lang.String str16 = closureCodingConvention0.getAbstractMethodName();
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry17 = null;
        com.google.javascript.jscomp.Scope scope18 = null;
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention19 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node20 = null;
        boolean boolean21 = closureCodingConvention19.isOptionalParameter(node20);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry22 = null;
        com.google.javascript.jscomp.Scope scope23 = null;
        com.google.javascript.rhino.jstype.ObjectType[] objectTypeArray24 = new com.google.javascript.rhino.jstype.ObjectType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType> objectTypeList25 = new java.util.ArrayList<com.google.javascript.rhino.jstype.ObjectType>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList25, objectTypeArray24);
        java.util.Map<java.lang.String, java.lang.String> strMap27 = null;
        closureCodingConvention19.defineDelegateProxyPrototypeProperties(jSTypeRegistry22, scope23, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList25, strMap27);
        java.util.Map<java.lang.String, java.lang.String> strMap29 = null;
        closureCodingConvention0.defineDelegateProxyPrototypeProperties(jSTypeRegistry17, scope18, (java.util.List<com.google.javascript.rhino.jstype.ObjectType>) objectTypeList25, strMap29);
        com.google.javascript.rhino.Node node31 = null;
        java.util.Map<java.lang.String, java.lang.String> strMap32 = null;
        closureCodingConvention0.checkForCallingConventionDefiningCalls(node31, strMap32);
        com.google.javascript.rhino.jstype.ObjectType objectType34 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType35 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType36 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType37 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType38 = null;
        closureCodingConvention0.applyDelegateRelationship(objectType34, objectType35, objectType36, functionType37, functionType38);
        java.lang.String str40 = closureCodingConvention0.getGlobalObject();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "goog.exportSymbol" + "'", str15, "goog.exportSymbol");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "goog.abstractMethod" + "'", str16, "goog.abstractMethod");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(objectTypeArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "goog.global" + "'", str40, "goog.global");
    }

    @Test
    public void test0999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0999");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        com.google.javascript.rhino.Node node1 = null;
        boolean boolean2 = closureCodingConvention0.isOptionalParameter(node1);
        boolean boolean4 = closureCodingConvention0.isSuperClassReference("hi!");
        boolean boolean6 = closureCodingConvention0.isSuperClassReference("goog.global");
        boolean boolean8 = closureCodingConvention0.isConstantKey("goog.exportProperty");
        boolean boolean10 = closureCodingConvention0.isConstantKey("hi!");
        java.lang.String str11 = closureCodingConvention0.getGlobalObject();
        com.google.javascript.rhino.Node node12 = null;
        boolean boolean13 = closureCodingConvention0.isOptionalParameter(node12);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "goog.global" + "'", str11, "goog.global");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test1000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test1000");
        com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention0 = new com.google.javascript.jscomp.ClosureCodingConvention();
        boolean boolean2 = closureCodingConvention0.isExported("goog.global");
        boolean boolean4 = closureCodingConvention0.isConstant("goog.exportProperty");
        boolean boolean6 = closureCodingConvention0.isPrivate("goog.global");
        com.google.javascript.rhino.Node node7 = null;
        boolean boolean8 = closureCodingConvention0.isVarArgsParameter(node7);
        com.google.javascript.rhino.Node node9 = null;
        boolean boolean10 = closureCodingConvention0.isVarArgsParameter(node9);
        com.google.javascript.rhino.jstype.FunctionType functionType11 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType12 = null;
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType13 = null;
        closureCodingConvention0.applySubclassRelationship(functionType11, functionType12, subclassType13);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }
}


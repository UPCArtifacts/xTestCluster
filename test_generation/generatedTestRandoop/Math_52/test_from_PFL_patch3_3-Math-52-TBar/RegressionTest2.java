import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest2 {

    public static boolean debug = false;

    @Test
    public void test1001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1001");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (short) 10, (double) 10.0f, (-0.1730129508244783d), (double) (-1.0f), true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation19 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D20 = rotation19.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation21 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D13, vector3D20);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation28 = rotation21.applyInverseTo(rotation27);
        double double29 = rotation27.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D36 = rotation35.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation42 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double43 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation35, rotation42);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation49 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D50 = rotation49.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation56 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D57 = rotation56.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation58 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D50, vector3D57);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation64 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation65 = rotation58.applyInverseTo(rotation64);
        double double66 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation42, rotation58);
        double double67 = rotation58.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation68 = rotation27.applyInverseTo(rotation58);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation74 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D75 = rotation74.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation81 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D82 = rotation81.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation83 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D75, vector3D82);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D84 = rotation58.applyTo(vector3D82);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation85 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D84);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation87 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D84, (double) '4');
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D20);
        org.junit.Assert.assertNotNull(rotation28);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 3.141592653589793d + "'", double29 == 3.141592653589793d);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertNotNull(vector3D50);
        org.junit.Assert.assertNotNull(vector3D57);
        org.junit.Assert.assertNotNull(rotation65);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 3.141592653589793d + "'", double66 == 3.141592653589793d);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.0d + "'", double67 == 0.0d);
        org.junit.Assert.assertNotNull(rotation68);
        org.junit.Assert.assertNotNull(vector3D75);
        org.junit.Assert.assertNotNull(vector3D82);
        org.junit.Assert.assertNotNull(vector3D84);
    }

    @Test
    public void test1002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1002");
        org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.geometry.euclidean.threed.Rotation rotation4 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(rotationOrder0, 0.05506338499281072d, (-0.9649660284921133d), (double) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1003");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation20.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = rotation27.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation29 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D21, vector3D28);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D36 = rotation35.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation42 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D43 = rotation42.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation44 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D36, vector3D43);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation45 = rotation29.applyTo(rotation44);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation46 = rotation14.applyTo(rotation45);
        double double47 = rotation14.getQ3();
        double[][] doubleArray48 = rotation14.getMatrix();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation50 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray48, (double) 10L);
        org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder51 = null;
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray52 = rotation50.getAngles(rotationOrder51);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.geometry.euclidean.threed.CardanEulerSingularityException; message: Euler angles singularity");
        } catch (org.apache.commons.math.geometry.euclidean.threed.CardanEulerSingularityException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(rotation45);
        org.junit.Assert.assertNotNull(rotation46);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray48);
    }

    @Test
    public void test1004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1004");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(116.90457705856772d, (-0.5d), 17.66239947251099d, 0.047917108096983706d, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation11 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D12 = rotation11.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation18 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double19 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation11, rotation18);
        double double20 = rotation18.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation26 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D27 = rotation26.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation33 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D34 = rotation33.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D27, vector3D34);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation41 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D42 = rotation41.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation48 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D49 = rotation48.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation50 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D42, vector3D49);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation51 = rotation35.applyTo(rotation50);
        double double52 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation18, rotation51);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation58 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D59 = rotation58.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation65 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double66 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation58, rotation65);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation72 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D73 = rotation72.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation79 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double80 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation72, rotation79);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation81 = rotation65.applyInverseTo(rotation72);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation82 = rotation18.applyInverseTo(rotation72);
        double double83 = rotation72.getQ1();
        org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder84 = null;
        double[] doubleArray85 = rotation72.getAngles(rotationOrder84);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D86 = rotation72.getAxis();
        double double87 = rotation72.getQ2();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation88 = rotation5.applyInverseTo(rotation72);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D89 = rotation72.getAxis();
        org.junit.Assert.assertNotNull(vector3D12);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 3.141592653589793d + "'", double20 == 3.141592653589793d);
        org.junit.Assert.assertNotNull(vector3D27);
        org.junit.Assert.assertNotNull(vector3D34);
        org.junit.Assert.assertNotNull(vector3D42);
        org.junit.Assert.assertNotNull(vector3D49);
        org.junit.Assert.assertNotNull(rotation51);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 3.141592653589793d + "'", double52 == 3.141592653589793d);
        org.junit.Assert.assertNotNull(vector3D59);
        org.junit.Assert.assertTrue(Double.isNaN(double66));
        org.junit.Assert.assertNotNull(vector3D73);
        org.junit.Assert.assertTrue(Double.isNaN(double80));
        org.junit.Assert.assertNotNull(rotation81);
        org.junit.Assert.assertNotNull(rotation82);
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 0.01922366120271981d + "'", double83 == 0.01922366120271981d);
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[2.356194490192345, 0.0543794248094174, -2.356194490192345]");
        org.junit.Assert.assertNotNull(vector3D86);
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 0.01922366120271981d + "'", double87 == 0.01922366120271981d);
        org.junit.Assert.assertNotNull(rotation88);
        org.junit.Assert.assertNotNull(vector3D89);
    }

    @Test
    public void test1005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1005");
        org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.geometry.euclidean.threed.Rotation rotation4 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(rotationOrder0, 0.7368621407866713d, 0.30408632088084614d, (-15.732467415526763d));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1006");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (short) 100, (-8.717516503499631d), (-0.33900504942104487d), 0.7881701093115122d, false);
        double double6 = rotation5.getQ2();
        double double7 = rotation5.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation13 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D14 = rotation13.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation20.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation22 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D14, vector3D21);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation28 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D29 = rotation28.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D36 = rotation35.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation42 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D43 = rotation42.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation44 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D36, vector3D43);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation50 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D51 = rotation50.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation57 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D58 = rotation57.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation59 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D51, vector3D58);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation60 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D21, vector3D29, vector3D43, vector3D58);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation62 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D21, (-0.0d));
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation64 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D21, (-0.1855270382668764d));
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation65 = rotation5.applyInverseTo(rotation64);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation66 = rotation5.revert();
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + (-0.33900504942104487d) + "'", double6 == (-0.33900504942104487d));
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.7881701093115122d + "'", double7 == 0.7881701093115122d);
        org.junit.Assert.assertNotNull(vector3D14);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D29);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(vector3D51);
        org.junit.Assert.assertNotNull(vector3D58);
        org.junit.Assert.assertNotNull(rotation65);
        org.junit.Assert.assertNotNull(rotation66);
    }

    @Test
    public void test1007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1007");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double13 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation5, rotation12);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation19 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D20 = rotation19.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation26 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D27 = rotation26.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation28 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D20, vector3D27);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation34 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = rotation28.applyInverseTo(rotation34);
        double double36 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation12, rotation28);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D37 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation43 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D44 = rotation43.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation50 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D51 = rotation50.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation52 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D44, vector3D51);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation58 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D59 = rotation58.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation65 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D66 = rotation65.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation72 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D73 = rotation72.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation74 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D66, vector3D73);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation80 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D81 = rotation80.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation87 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D88 = rotation87.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation89 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D81, vector3D88);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation90 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D51, vector3D59, vector3D73, vector3D88);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation92 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D59, (double) 1);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation93 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D37, vector3D59);
        double double94 = rotation93.getQ2();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D95 = rotation93.getAxis();
        double double96 = rotation93.getQ0();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertNotNull(vector3D20);
        org.junit.Assert.assertNotNull(vector3D27);
        org.junit.Assert.assertNotNull(rotation35);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 3.141592653589793d + "'", double36 == 3.141592653589793d);
        org.junit.Assert.assertNotNull(vector3D37);
        org.junit.Assert.assertNotNull(vector3D44);
        org.junit.Assert.assertNotNull(vector3D51);
        org.junit.Assert.assertNotNull(vector3D59);
        org.junit.Assert.assertNotNull(vector3D66);
        org.junit.Assert.assertNotNull(vector3D73);
        org.junit.Assert.assertNotNull(vector3D81);
        org.junit.Assert.assertNotNull(vector3D88);
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + (-0.03877567139094669d) + "'", double94 == (-0.03877567139094669d));
        org.junit.Assert.assertNotNull(vector3D95);
        org.junit.Assert.assertTrue("'" + double96 + "' != '" + 0.9028084065328048d + "'", double96 == 0.9028084065328048d);
    }

    @Test
    public void test1008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1008");
        org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.geometry.euclidean.threed.Rotation rotation4 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(rotationOrder0, 0.09900990099009903d, 3.1390038567388605d, 3.1216925665694406d);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1009");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation16 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, (double) 100L);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation22 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-1.0d), (double) (byte) 10, (double) (byte) 100, (double) 0L, true);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation28 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D29 = rotation28.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D36 = rotation35.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation37 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D29, vector3D36);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D38 = rotation22.applyTo(vector3D29);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation44 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D45 = rotation44.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation51 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D52 = rotation51.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation58 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D59 = rotation58.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation60 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D52, vector3D59);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation62 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D52, (double) 100L);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation63 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D45, vector3D52);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation69 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D70 = rotation69.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation71 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D38, vector3D52, vector3D70);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation73 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D38, (-0.0d));
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation79 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D80 = rotation79.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation86 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double87 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation79, rotation86);
        double double88 = rotation86.getQ1();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation89 = rotation73.applyTo(rotation86);
        double double90 = rotation73.getQ1();
        double double91 = rotation73.getQ1();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D29);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D38);
        org.junit.Assert.assertNotNull(vector3D45);
        org.junit.Assert.assertNotNull(vector3D52);
        org.junit.Assert.assertNotNull(vector3D59);
        org.junit.Assert.assertNotNull(vector3D70);
        org.junit.Assert.assertNotNull(vector3D80);
        org.junit.Assert.assertTrue(Double.isNaN(double87));
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 10.0d + "'", double88 == 10.0d);
        org.junit.Assert.assertNotNull(rotation89);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 0.0d + "'", double90 == 0.0d);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 0.0d + "'", double91 == 0.0d);
    }

    @Test
    public void test1010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1010");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation11 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-1.0d), (double) (byte) 10, (double) (byte) 100, (double) 0L, true);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation17 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D18 = rotation17.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation24 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D25 = rotation24.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation26 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D18, vector3D25);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D27 = rotation11.applyTo(vector3D18);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = rotation5.applyTo(vector3D27);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation30 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D27, (double) 1.0f);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation36 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D37 = rotation36.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation43 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D44 = rotation43.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation45 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D37, vector3D44);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation51 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D52 = rotation51.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation58 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D59 = rotation58.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation65 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D66 = rotation65.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation67 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D59, vector3D66);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation73 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D74 = rotation73.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation80 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D81 = rotation80.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation82 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D74, vector3D81);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation83 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D44, vector3D52, vector3D66, vector3D81);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation85 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D44, (-0.0d));
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation87 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D44, (double) 1L);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation88 = rotation30.applyInverseTo(rotation87);
        double double89 = rotation87.getQ3();
        double double90 = rotation87.getQ2();
        org.junit.Assert.assertNotNull(vector3D18);
        org.junit.Assert.assertNotNull(vector3D25);
        org.junit.Assert.assertNotNull(vector3D27);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D37);
        org.junit.Assert.assertNotNull(vector3D44);
        org.junit.Assert.assertNotNull(vector3D52);
        org.junit.Assert.assertNotNull(vector3D59);
        org.junit.Assert.assertNotNull(vector3D66);
        org.junit.Assert.assertNotNull(vector3D74);
        org.junit.Assert.assertNotNull(vector3D81);
        org.junit.Assert.assertNotNull(rotation88);
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 0.0d + "'", double89 == 0.0d);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 0.33900504942104487d + "'", double90 == 0.33900504942104487d);
    }

    @Test
    public void test1011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1011");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation20.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = rotation27.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation29 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D21, vector3D28);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D36 = rotation35.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation42 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D43 = rotation42.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation44 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D36, vector3D43);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation45 = rotation29.applyTo(rotation44);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation46 = rotation14.applyTo(rotation45);
        double[][] doubleArray47 = rotation46.getMatrix();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation49 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray47, (double) '4');
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation51 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray47, (double) '4');
        double double52 = rotation51.getAngle();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(rotation45);
        org.junit.Assert.assertNotNull(rotation46);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.0d + "'", double52 == 0.0d);
    }

    @Test
    public void test1012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1012");
        org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.geometry.euclidean.threed.Rotation rotation4 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(rotationOrder0, 0.0d, (-0.0d), (-1.0d));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1013");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double13 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation5, rotation12);
        double double14 = rotation12.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation20.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = rotation27.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation29 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D21, vector3D28);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D36 = rotation35.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation42 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D43 = rotation42.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation44 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D36, vector3D43);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation45 = rotation29.applyTo(rotation44);
        double double46 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation12, rotation45);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation52 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D53 = rotation52.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation59 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double60 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation52, rotation59);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation66 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D67 = rotation66.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation73 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double74 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation66, rotation73);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation75 = rotation59.applyInverseTo(rotation66);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation76 = rotation12.applyInverseTo(rotation66);
        double[][] doubleArray77 = rotation12.getMatrix();
        double double78 = rotation12.getQ3();
        double double79 = rotation12.getQ0();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation80 = rotation12.revert();
        double double81 = rotation12.getQ3();
        double double82 = rotation12.getQ0();
        double double83 = rotation12.getQ2();
        java.lang.Class<?> wildcardClass84 = rotation12.getClass();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 3.141592653589793d + "'", double14 == 3.141592653589793d);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(rotation45);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 3.141592653589793d + "'", double46 == 3.141592653589793d);
        org.junit.Assert.assertNotNull(vector3D53);
        org.junit.Assert.assertTrue(Double.isNaN(double60));
        org.junit.Assert.assertNotNull(vector3D67);
        org.junit.Assert.assertTrue(Double.isNaN(double74));
        org.junit.Assert.assertNotNull(rotation75);
        org.junit.Assert.assertNotNull(rotation76);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 1.0d + "'", double78 == 1.0d);
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 0.0d + "'", double79 == 0.0d);
        org.junit.Assert.assertNotNull(rotation80);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 1.0d + "'", double81 == 1.0d);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 0.0d + "'", double82 == 0.0d);
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + (-1.0d) + "'", double83 == (-1.0d));
        org.junit.Assert.assertNotNull(wildcardClass84);
    }

    @Test
    public void test1014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1014");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation11 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-1.0d), (double) (byte) 10, (double) (byte) 100, (double) 0L, true);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation17 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D18 = rotation17.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation24 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D25 = rotation24.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation26 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D18, vector3D25);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D27 = rotation11.applyTo(vector3D18);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = rotation5.applyTo(vector3D27);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation34 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-0.1855270382668764d), (double) 10, (double) (short) -1, (double) 100.0f, false);
        double[][] doubleArray35 = rotation34.getMatrix();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation41 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D42 = rotation41.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation48 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D49 = rotation48.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation50 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D42, vector3D49);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation52 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D42, (double) 100L);
        double double53 = rotation52.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation54 = rotation52.revert();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation60 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (byte) 100, (double) 10L, (double) (short) 100, (double) 1L, false);
        double double61 = rotation60.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation62 = rotation54.applyInverseTo(rotation60);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation63 = rotation34.applyInverseTo(rotation62);
        double double64 = rotation63.getQ1();
        double double65 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation5, rotation63);
        double double66 = rotation63.getQ0();
        double double67 = rotation63.getQ1();
        org.junit.Assert.assertNotNull(vector3D18);
        org.junit.Assert.assertNotNull(vector3D25);
        org.junit.Assert.assertNotNull(vector3D27);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(vector3D42);
        org.junit.Assert.assertNotNull(vector3D49);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + (-0.0d) + "'", double53 == (-0.0d));
        org.junit.Assert.assertNotNull(rotation54);
        org.junit.Assert.assertTrue(Double.isNaN(double61));
        org.junit.Assert.assertNotNull(rotation62);
        org.junit.Assert.assertNotNull(rotation63);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 8960.928033465932d + "'", double64 == 8960.928033465932d);
        org.junit.Assert.assertTrue(Double.isNaN(double65));
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + (-1579.617450290328d) + "'", double66 == (-1579.617450290328d));
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 8960.928033465932d + "'", double67 == 8960.928033465932d);
    }

    @Test
    public void test1015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1015");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation20.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = rotation27.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation29 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D21, vector3D28);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation30 = rotation14.applyTo(rotation29);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation36 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) 10, 0.0d, (double) (byte) 0, 10.0d, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation37 = rotation14.applyTo(rotation36);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation38 = rotation37.revert();
        org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder39 = null;
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray40 = rotation38.getAngles(rotationOrder39);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.geometry.euclidean.threed.CardanEulerSingularityException; message: Euler angles singularity");
        } catch (org.apache.commons.math.geometry.euclidean.threed.CardanEulerSingularityException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(rotation30);
        org.junit.Assert.assertNotNull(rotation37);
        org.junit.Assert.assertNotNull(rotation38);
    }

    @Test
    public void test1016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1016");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) 100L, 0.0d, 8960.928033465932d, (double) 100.0f, false);
        double double6 = rotation5.getQ1();
        java.lang.Class<?> wildcardClass7 = rotation5.getClass();
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test1017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1017");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation0 = null;
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation6 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (byte) 100, (double) 10L, (double) (short) 100, (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation19 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D20 = rotation19.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation21 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D13, vector3D20);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation23 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D13, (double) 100L);
        double double24 = rotation23.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation25 = rotation6.applyInverseTo(rotation23);
        double double26 = rotation25.getQ1();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D27 = rotation25.getAxis();
        // The following exception was thrown during execution in test generation
        try {
            double double28 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation0, rotation25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D20);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + (-0.0d) + "'", double24 == (-0.0d));
        org.junit.Assert.assertNotNull(rotation25);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 28.016837073341897d + "'", double26 == 28.016837073341897d);
        org.junit.Assert.assertNotNull(vector3D27);
    }

    @Test
    public void test1018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1018");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation20.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double28 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation20, rotation27);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation34 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D35 = rotation34.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation41 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double42 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation34, rotation41);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation43 = rotation27.applyInverseTo(rotation34);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D44 = rotation43.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation45 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D44);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation47 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D44, (-0.280459243752156d));
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation49 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D44, (-0.6780618572586967d));
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertNotNull(vector3D35);
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertNotNull(rotation43);
        org.junit.Assert.assertNotNull(vector3D44);
    }

    @Test
    public void test1019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1019");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation20.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = rotation27.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation34 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D35 = rotation34.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation36 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D28, vector3D35);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation42 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D43 = rotation42.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation49 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D50 = rotation49.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation51 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D43, vector3D50);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation52 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D13, vector3D21, vector3D35, vector3D50);
        double double53 = rotation52.getQ1();
        double double54 = rotation52.getQ2();
        double[][] doubleArray55 = rotation52.getMatrix();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation61 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D62 = rotation61.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation63 = rotation52.applyTo(rotation61);
        double double64 = rotation61.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder65 = null;
        double[] doubleArray66 = rotation61.getAngles(rotationOrder65);
        double double67 = rotation61.getQ0();
        java.lang.Class<?> wildcardClass68 = rotation61.getClass();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D35);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(vector3D50);
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(vector3D62);
        org.junit.Assert.assertNotNull(rotation63);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 0.0d + "'", double64 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[2.356194490192345, 0.0543794248094174, -2.356194490192345]");
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.9996303825414301d + "'", double67 == 0.9996303825414301d);
        org.junit.Assert.assertNotNull(wildcardClass68);
    }

    @Test
    public void test1020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1020");
        org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.geometry.euclidean.threed.Rotation rotation4 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(rotationOrder0, 0.9856688089870894d, 0.28366218546322625d, (-108.9963038254143d));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1021");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (short) 10, (double) (byte) 0, 0.01922366120271981d, 0.9949879346007117d, true);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation11 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation17 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-1.0d), (double) (byte) 10, (double) (byte) 100, (double) 0L, true);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation23 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D24 = rotation23.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation30 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D31 = rotation30.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation32 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D24, vector3D31);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D33 = rotation17.applyTo(vector3D24);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D34 = rotation11.applyTo(vector3D33);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation36 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D33, (double) 1.0f);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation42 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D43 = rotation42.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation49 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D50 = rotation49.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation51 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D43, vector3D50);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation57 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D58 = rotation57.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation64 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double65 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation57, rotation64);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation71 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D72 = rotation71.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation78 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double79 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation71, rotation78);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation80 = rotation64.applyInverseTo(rotation71);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D81 = rotation80.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation82 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D43, vector3D81);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D83 = rotation36.applyTo(vector3D43);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D84 = rotation5.applyInverseTo(vector3D43);
        double double85 = rotation5.getQ0();
        org.junit.Assert.assertNotNull(vector3D24);
        org.junit.Assert.assertNotNull(vector3D31);
        org.junit.Assert.assertNotNull(vector3D33);
        org.junit.Assert.assertNotNull(vector3D34);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(vector3D50);
        org.junit.Assert.assertNotNull(vector3D58);
        org.junit.Assert.assertTrue(Double.isNaN(double65));
        org.junit.Assert.assertNotNull(vector3D72);
        org.junit.Assert.assertTrue(Double.isNaN(double79));
        org.junit.Assert.assertNotNull(rotation80);
        org.junit.Assert.assertNotNull(vector3D81);
        org.junit.Assert.assertNotNull(vector3D83);
        org.junit.Assert.assertNotNull(vector3D84);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 0.9950846276202212d + "'", double85 == 0.9950846276202212d);
    }

    @Test
    public void test1022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1022");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-10.0d), 0.003388584257121107d, 0.047917108096983706d, 10.315768314846704d, true);
    }

    @Test
    public void test1023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1023");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation20.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = rotation27.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation29 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D21, vector3D28);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation30 = rotation14.applyTo(rotation29);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation36 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) 10, 0.0d, (double) (byte) 0, 10.0d, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation37 = rotation14.applyTo(rotation36);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation38 = rotation37.revert();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation44 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D45 = rotation44.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation51 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double52 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation44, rotation51);
        double double53 = rotation51.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation59 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D60 = rotation59.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation66 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double67 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation59, rotation66);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation73 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D74 = rotation73.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation80 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D81 = rotation80.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation82 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D74, vector3D81);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation88 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation89 = rotation82.applyInverseTo(rotation88);
        double double90 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation66, rotation82);
        double double91 = rotation82.getQ3();
        double double92 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation51, rotation82);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation93 = rotation38.applyInverseTo(rotation82);
        double double94 = rotation93.getQ0();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(rotation30);
        org.junit.Assert.assertNotNull(rotation37);
        org.junit.Assert.assertNotNull(rotation38);
        org.junit.Assert.assertNotNull(vector3D45);
        org.junit.Assert.assertTrue(Double.isNaN(double52));
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 1.0d + "'", double53 == 1.0d);
        org.junit.Assert.assertNotNull(vector3D60);
        org.junit.Assert.assertTrue(Double.isNaN(double67));
        org.junit.Assert.assertNotNull(vector3D74);
        org.junit.Assert.assertNotNull(vector3D81);
        org.junit.Assert.assertNotNull(rotation89);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 3.141592653589793d + "'", double90 == 3.141592653589793d);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 0.0d + "'", double91 == 0.0d);
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 3.141592653589793d + "'", double92 == 3.141592653589793d);
        org.junit.Assert.assertNotNull(rotation93);
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + 10.0d + "'", double94 == 10.0d);
    }

    @Test
    public void test1024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1024");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation20.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = rotation27.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation29 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D21, vector3D28);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D36 = rotation35.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation42 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D43 = rotation42.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation44 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D36, vector3D43);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation45 = rotation29.applyTo(rotation44);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation46 = rotation14.applyTo(rotation45);
        double[][] doubleArray47 = rotation46.getMatrix();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation49 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray47, (double) 10);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation51 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray47, (double) (byte) 100);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation53 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray47, (double) (short) 0);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation55 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray47, 0.0d);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.geometry.euclidean.threed.Rotation rotation57 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray47, (-0.03877567139094669d));
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.geometry.euclidean.threed.NotARotationMatrixException; message: unable to orthogonalize matrix in 10 iterations");
        } catch (org.apache.commons.math.geometry.euclidean.threed.NotARotationMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(rotation45);
        org.junit.Assert.assertNotNull(rotation46);
        org.junit.Assert.assertNotNull(doubleArray47);
    }

    @Test
    public void test1025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1025");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-0.1855270382668764d), (double) 10, (double) (short) -1, (double) 100.0f, false);
        double[][] doubleArray6 = rotation5.getMatrix();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation19 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D20 = rotation19.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation21 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D13, vector3D20);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation23 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D13, (double) 100L);
        double double24 = rotation23.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation25 = rotation23.revert();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation31 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (byte) 100, (double) 10L, (double) (short) 100, (double) 1L, false);
        double double32 = rotation31.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation33 = rotation25.applyInverseTo(rotation31);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation34 = rotation5.applyInverseTo(rotation33);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation40 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D41 = rotation40.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation47 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D48 = rotation47.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation49 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D41, vector3D48);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation55 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D56 = rotation55.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation62 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D63 = rotation62.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation64 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D56, vector3D63);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation65 = rotation49.applyTo(rotation64);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation71 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) 10, 0.0d, (double) (byte) 0, 10.0d, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation72 = rotation49.applyTo(rotation71);
        double double73 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation34, rotation49);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation79 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D80 = rotation79.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation86 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D87 = rotation86.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation88 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D80, vector3D87);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation94 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation95 = rotation88.applyInverseTo(rotation94);
        double double96 = rotation95.getAngle();
        double double97 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation49, rotation95);
        double[][] doubleArray98 = rotation95.getMatrix();
        double double99 = rotation95.getQ2();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D20);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + (-0.0d) + "'", double24 == (-0.0d));
        org.junit.Assert.assertNotNull(rotation25);
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertNotNull(rotation33);
        org.junit.Assert.assertNotNull(rotation34);
        org.junit.Assert.assertNotNull(vector3D41);
        org.junit.Assert.assertNotNull(vector3D48);
        org.junit.Assert.assertNotNull(vector3D56);
        org.junit.Assert.assertNotNull(vector3D63);
        org.junit.Assert.assertNotNull(rotation65);
        org.junit.Assert.assertNotNull(rotation72);
        org.junit.Assert.assertTrue(Double.isNaN(double73));
        org.junit.Assert.assertNotNull(vector3D80);
        org.junit.Assert.assertNotNull(vector3D87);
        org.junit.Assert.assertNotNull(rotation95);
        org.junit.Assert.assertTrue("'" + double96 + "' != '" + 3.141592653589793d + "'", double96 == 3.141592653589793d);
        org.junit.Assert.assertTrue("'" + double97 + "' != '" + 3.141592653589793d + "'", double97 == 3.141592653589793d);
        org.junit.Assert.assertNotNull(doubleArray98);
        org.junit.Assert.assertTrue("'" + double99 + "' != '" + 1.0d + "'", double99 == 1.0d);
    }

    @Test
    public void test1026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1026");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation16 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, (double) 100L);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation22 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-1.0d), (double) (byte) 10, (double) (byte) 100, (double) 0L, true);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation28 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D29 = rotation28.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D36 = rotation35.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation37 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D29, vector3D36);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D38 = rotation22.applyTo(vector3D29);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation44 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D45 = rotation44.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation51 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D52 = rotation51.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation58 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D59 = rotation58.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation60 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D52, vector3D59);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation62 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D52, (double) 100L);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation63 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D45, vector3D52);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation69 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D70 = rotation69.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation71 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D38, vector3D52, vector3D70);
        double double72 = rotation71.getQ0();
        org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder73 = null;
        double[] doubleArray74 = rotation71.getAngles(rotationOrder73);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation80 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-0.1855270382668764d), (double) 10, (double) (short) -1, (double) 100.0f, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation81 = rotation80.revert();
        double double82 = rotation80.getQ2();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D83 = rotation80.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation89 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D90 = rotation89.getAxis();
        double double91 = rotation89.getQ0();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D92 = rotation89.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation93 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D83, vector3D92);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D94 = rotation71.applyInverseTo(vector3D92);
        double double95 = rotation71.getAngle();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D29);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D38);
        org.junit.Assert.assertNotNull(vector3D45);
        org.junit.Assert.assertNotNull(vector3D52);
        org.junit.Assert.assertNotNull(vector3D59);
        org.junit.Assert.assertNotNull(vector3D70);
        org.junit.Assert.assertTrue(Double.isNaN(double72));
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[NaN, NaN, NaN]");
        org.junit.Assert.assertNotNull(rotation81);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + (-1.0d) + "'", double82 == (-1.0d));
        org.junit.Assert.assertNotNull(vector3D83);
        org.junit.Assert.assertNotNull(vector3D90);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 0.9996303825414301d + "'", double91 == 0.9996303825414301d);
        org.junit.Assert.assertNotNull(vector3D92);
        org.junit.Assert.assertNotNull(vector3D94);
        org.junit.Assert.assertTrue(Double.isNaN(double95));
    }

    @Test
    public void test1027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1027");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-0.1855270382668764d), (double) 10, (double) (short) -1, (double) 100.0f, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation6 = rotation5.revert();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation19 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double20 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation12, rotation19);
        double double21 = rotation19.getAngle();
        double double22 = rotation19.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D23 = rotation19.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation24 = rotation6.applyInverseTo(rotation19);
        java.lang.Class<?> wildcardClass25 = rotation6.getClass();
        org.junit.Assert.assertNotNull(rotation6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 3.141592653589793d + "'", double21 == 3.141592653589793d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 3.141592653589793d + "'", double22 == 3.141592653589793d);
        org.junit.Assert.assertNotNull(vector3D23);
        org.junit.Assert.assertNotNull(rotation24);
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test1028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1028");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double13 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation5, rotation12);
        double double14 = rotation12.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation20.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = rotation27.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation29 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D21, vector3D28);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D36 = rotation35.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation42 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D43 = rotation42.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation44 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D36, vector3D43);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation45 = rotation29.applyTo(rotation44);
        double double46 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation12, rotation45);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation52 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D53 = rotation52.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation59 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double60 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation52, rotation59);
        double double61 = rotation59.getQ1();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation67 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D68 = rotation67.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation74 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D75 = rotation74.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation76 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D68, vector3D75);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation78 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D68, (double) 100L);
        double double79 = rotation78.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation80 = rotation78.revert();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation86 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (byte) 100, (double) 10L, (double) (short) 100, (double) 1L, false);
        double double87 = rotation86.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation88 = rotation80.applyInverseTo(rotation86);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D89 = rotation86.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D90 = rotation59.applyInverseTo(vector3D89);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D91 = rotation12.applyTo(vector3D89);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation93 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D89, 0.33900504942104487d);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation95 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D89, 0.9949879346007117d);
        double double96 = rotation95.getQ3();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 3.141592653589793d + "'", double14 == 3.141592653589793d);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(rotation45);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 3.141592653589793d + "'", double46 == 3.141592653589793d);
        org.junit.Assert.assertNotNull(vector3D53);
        org.junit.Assert.assertTrue(Double.isNaN(double60));
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 10.0d + "'", double61 == 10.0d);
        org.junit.Assert.assertNotNull(vector3D68);
        org.junit.Assert.assertNotNull(vector3D75);
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + (-0.0d) + "'", double79 == (-0.0d));
        org.junit.Assert.assertNotNull(rotation80);
        org.junit.Assert.assertTrue(Double.isNaN(double87));
        org.junit.Assert.assertNotNull(rotation88);
        org.junit.Assert.assertNotNull(vector3D89);
        org.junit.Assert.assertNotNull(vector3D90);
        org.junit.Assert.assertNotNull(vector3D91);
        org.junit.Assert.assertTrue("'" + double96 + "' != '" + 0.004748329030341929d + "'", double96 == 0.004748329030341929d);
    }

    @Test
    public void test1029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1029");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (-1), 0.5309649148733836d, (double) (-1), (double) 1, true);
        double[][] doubleArray6 = rotation5.getMatrix();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation8 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray6, 0.09900990099009903d);
        double double9 = rotation8.getQ1();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + (-0.29309039211917487d) + "'", double9 == (-0.29309039211917487d));
    }

    @Test
    public void test1030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1030");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double13 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation5, rotation12);
        double double14 = rotation12.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation20.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double28 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation20, rotation27);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation34 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D35 = rotation34.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation41 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D42 = rotation41.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation43 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D35, vector3D42);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation49 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation50 = rotation43.applyInverseTo(rotation49);
        double double51 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation27, rotation43);
        double double52 = rotation43.getQ3();
        double double53 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation12, rotation43);
        double[][] doubleArray54 = rotation43.getMatrix();
        double double55 = rotation43.getQ1();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1.0d + "'", double14 == 1.0d);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertNotNull(vector3D35);
        org.junit.Assert.assertNotNull(vector3D42);
        org.junit.Assert.assertNotNull(rotation50);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 3.141592653589793d + "'", double51 == 3.141592653589793d);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.0d + "'", double52 == 0.0d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 3.141592653589793d + "'", double53 == 3.141592653589793d);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d);
    }

    @Test
    public void test1031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1031");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-0.1855270382668764d), 3.1382608577831084d, 14.405497554001874d, 0.0d, true);
    }

    @Test
    public void test1032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1032");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double13 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation5, rotation12);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation19 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D20 = rotation19.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation26 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D27 = rotation26.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation28 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D20, vector3D27);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation34 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = rotation28.applyInverseTo(rotation34);
        double double36 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation12, rotation28);
        double double37 = rotation12.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation43 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D44 = rotation43.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation50 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double51 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation43, rotation50);
        double double52 = rotation50.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation58 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D59 = rotation58.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation65 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double66 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation58, rotation65);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation72 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D73 = rotation72.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation79 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double80 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation72, rotation79);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation81 = rotation65.applyInverseTo(rotation72);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation82 = rotation50.applyTo(rotation72);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D83 = rotation50.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D84 = rotation12.applyInverseTo(vector3D83);
        double double85 = rotation12.getQ1();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation91 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) 0, (double) 1.0f, (double) 0.0f, 0.01922366120271981d, true);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation92 = rotation12.applyTo(rotation91);
        double[][] doubleArray93 = rotation92.getMatrix();
        double double94 = rotation92.getQ3();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertNotNull(vector3D20);
        org.junit.Assert.assertNotNull(vector3D27);
        org.junit.Assert.assertNotNull(rotation35);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 3.141592653589793d + "'", double36 == 3.141592653589793d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 3.141592653589793d + "'", double37 == 3.141592653589793d);
        org.junit.Assert.assertNotNull(vector3D44);
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 3.141592653589793d + "'", double52 == 3.141592653589793d);
        org.junit.Assert.assertNotNull(vector3D59);
        org.junit.Assert.assertTrue(Double.isNaN(double66));
        org.junit.Assert.assertNotNull(vector3D73);
        org.junit.Assert.assertTrue(Double.isNaN(double80));
        org.junit.Assert.assertNotNull(rotation81);
        org.junit.Assert.assertNotNull(rotation82);
        org.junit.Assert.assertNotNull(vector3D83);
        org.junit.Assert.assertNotNull(vector3D84);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 10.0d + "'", double85 == 10.0d);
        org.junit.Assert.assertNotNull(rotation92);
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + (-0.9998152766216806d) + "'", double94 == (-0.9998152766216806d));
    }

    @Test
    public void test1033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1033");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double13 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation5, rotation12);
        double double14 = rotation12.getAngle();
        double double15 = rotation12.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D16 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation22 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D23 = rotation22.getAxis();
        double double24 = rotation22.getQ0();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D25 = rotation22.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation26 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D16, vector3D25);
        org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder27 = null;
        double[] doubleArray28 = rotation26.getAngles(rotationOrder27);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation34 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = rotation26.applyTo(rotation34);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation36 = rotation35.revert();
        java.lang.Class<?> wildcardClass37 = rotation36.getClass();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 3.141592653589793d + "'", double14 == 3.141592653589793d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 3.141592653589793d + "'", double15 == 3.141592653589793d);
        org.junit.Assert.assertNotNull(vector3D16);
        org.junit.Assert.assertNotNull(vector3D23);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.9996303825414301d + "'", double24 == 0.9996303825414301d);
        org.junit.Assert.assertNotNull(vector3D25);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.2267643748213466, 0.1097292022168269, -0.34403195197355013]");
        org.junit.Assert.assertNotNull(rotation35);
        org.junit.Assert.assertNotNull(rotation36);
        org.junit.Assert.assertNotNull(wildcardClass37);
    }

    @Test
    public void test1034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1034");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation0 = org.apache.commons.math.geometry.euclidean.threed.Rotation.IDENTITY;
        double double1 = rotation0.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation2 = rotation0.revert();
        double double3 = rotation2.getQ1();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation9 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D10 = rotation9.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation16 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double17 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation9, rotation16);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation23 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D24 = rotation23.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation30 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D31 = rotation30.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation32 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D24, vector3D31);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation38 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation39 = rotation32.applyInverseTo(rotation38);
        double double40 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation16, rotation32);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D41 = rotation16.getAxis();
        double[][] doubleArray42 = rotation16.getMatrix();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation48 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-0.0d), (double) (short) 1, 0.0d, 0.9996303825414301d, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation49 = rotation16.applyTo(rotation48);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation50 = rotation2.applyTo(rotation48);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation56 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D57 = rotation56.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation63 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D64 = rotation63.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation65 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D57, vector3D64);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation71 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation72 = rotation65.applyInverseTo(rotation71);
        double double73 = rotation65.getQ2();
        double[][] doubleArray74 = rotation65.getMatrix();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation76 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray74, 0.7881701093115122d);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation77 = rotation48.applyInverseTo(rotation76);
        double double78 = rotation77.getQ3();
        org.junit.Assert.assertNotNull(rotation0);
        org.junit.Assert.assertTrue("'" + double1 + "' != '" + 0.0d + "'", double1 == 0.0d);
        org.junit.Assert.assertNotNull(rotation2);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertNotNull(vector3D10);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertNotNull(vector3D24);
        org.junit.Assert.assertNotNull(vector3D31);
        org.junit.Assert.assertNotNull(rotation39);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 3.141592653589793d + "'", double40 == 3.141592653589793d);
        org.junit.Assert.assertNotNull(vector3D41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(rotation49);
        org.junit.Assert.assertNotNull(rotation50);
        org.junit.Assert.assertNotNull(vector3D57);
        org.junit.Assert.assertNotNull(vector3D64);
        org.junit.Assert.assertNotNull(rotation72);
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 0.0d + "'", double73 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertNotNull(rotation77);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 0.9996303825414301d + "'", double78 == 0.9996303825414301d);
    }

    @Test
    public void test1035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1035");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-1.0d), (double) (byte) 10, (double) (byte) 100, (double) 0L, true);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation11 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D12 = rotation11.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation18 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D19 = rotation18.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D12, vector3D19);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation5.applyTo(vector3D12);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = rotation27.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation34 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D35 = rotation34.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation36 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D28, vector3D35);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation38 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D28, (double) 100L);
        double double39 = rotation38.getQ3();
        double double40 = rotation38.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D41 = rotation38.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation47 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D48 = rotation47.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation54 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D55 = rotation54.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation56 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D48, vector3D55);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation62 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D63 = rotation62.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation69 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D70 = rotation69.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation76 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D77 = rotation76.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation78 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D70, vector3D77);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation84 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D85 = rotation84.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation91 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D92 = rotation91.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation93 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D85, vector3D92);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation94 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D55, vector3D63, vector3D77, vector3D92);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation95 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D41, vector3D55);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation96 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D21, vector3D41);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation98 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D21, 0.06415703545444096d);
        org.junit.Assert.assertNotNull(vector3D12);
        org.junit.Assert.assertNotNull(vector3D19);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D35);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + (-0.0d) + "'", double39 == (-0.0d));
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + (-0.0d) + "'", double40 == (-0.0d));
        org.junit.Assert.assertNotNull(vector3D41);
        org.junit.Assert.assertNotNull(vector3D48);
        org.junit.Assert.assertNotNull(vector3D55);
        org.junit.Assert.assertNotNull(vector3D63);
        org.junit.Assert.assertNotNull(vector3D70);
        org.junit.Assert.assertNotNull(vector3D77);
        org.junit.Assert.assertNotNull(vector3D85);
        org.junit.Assert.assertNotNull(vector3D92);
    }

    @Test
    public void test1036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1036");
        org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.geometry.euclidean.threed.Rotation rotation4 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(rotationOrder0, (double) (short) 1, 1.047240853549319d, (-0.008670753979228429d));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1037");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double13 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation5, rotation12);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation19 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D20 = rotation19.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation26 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D27 = rotation26.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation28 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D20, vector3D27);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation34 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = rotation28.applyInverseTo(rotation34);
        double double36 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation12, rotation28);
        double double37 = rotation12.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation43 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D44 = rotation43.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation50 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double51 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation43, rotation50);
        double double52 = rotation50.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation58 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D59 = rotation58.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation65 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double66 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation58, rotation65);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation72 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D73 = rotation72.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation79 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double80 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation72, rotation79);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation81 = rotation65.applyInverseTo(rotation72);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation82 = rotation50.applyTo(rotation72);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D83 = rotation50.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D84 = rotation12.applyInverseTo(vector3D83);
        double double85 = rotation12.getQ1();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation91 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) 0, (double) 1.0f, (double) 0.0f, 0.01922366120271981d, true);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation92 = rotation12.applyTo(rotation91);
        double double93 = rotation12.getQ2();
        java.lang.Class<?> wildcardClass94 = rotation12.getClass();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertNotNull(vector3D20);
        org.junit.Assert.assertNotNull(vector3D27);
        org.junit.Assert.assertNotNull(rotation35);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 3.141592653589793d + "'", double36 == 3.141592653589793d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 3.141592653589793d + "'", double37 == 3.141592653589793d);
        org.junit.Assert.assertNotNull(vector3D44);
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 3.141592653589793d + "'", double52 == 3.141592653589793d);
        org.junit.Assert.assertNotNull(vector3D59);
        org.junit.Assert.assertTrue(Double.isNaN(double66));
        org.junit.Assert.assertNotNull(vector3D73);
        org.junit.Assert.assertTrue(Double.isNaN(double80));
        org.junit.Assert.assertNotNull(rotation81);
        org.junit.Assert.assertNotNull(rotation82);
        org.junit.Assert.assertNotNull(vector3D83);
        org.junit.Assert.assertNotNull(vector3D84);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 10.0d + "'", double85 == 10.0d);
        org.junit.Assert.assertNotNull(rotation92);
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + (-1.0d) + "'", double93 == (-1.0d));
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test1038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1038");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-1.0d), (double) (byte) 10, (double) (byte) 100, (double) 0L, true);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation11 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D12 = rotation11.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation5.applyInverseTo(vector3D12);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation19 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D20 = rotation19.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation26 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D27 = rotation26.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation28 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D20, vector3D27);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation30 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D20, (double) 1L);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation31 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D13, vector3D20);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation37 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D38 = rotation37.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation44 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D45 = rotation44.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation46 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D38, vector3D45);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation48 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D38, (double) 1L);
        double double49 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation31, rotation48);
        double double50 = rotation48.getQ1();
        org.junit.Assert.assertNotNull(vector3D12);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D20);
        org.junit.Assert.assertNotNull(vector3D27);
        org.junit.Assert.assertNotNull(vector3D38);
        org.junit.Assert.assertNotNull(vector3D45);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 1.6481559849923735d + "'", double49 == 1.6481559849923735d);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.33900504942104487d + "'", double50 == 0.33900504942104487d);
    }

    @Test
    public void test1039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1039");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-1.0d), (double) (byte) 10, (double) (byte) 100, (double) 0L, true);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation11 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D12 = rotation11.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation18 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D19 = rotation18.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D12, vector3D19);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation5.applyTo(vector3D12);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) 10, 0.0d, (double) (byte) 0, 10.0d, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation33 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (byte) 100, (double) 10L, (double) (short) 100, (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation39 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D40 = rotation39.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation46 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D47 = rotation46.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation48 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D40, vector3D47);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation50 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D40, (double) 100L);
        double double51 = rotation50.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation52 = rotation33.applyInverseTo(rotation50);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation53 = rotation27.applyInverseTo(rotation50);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation54 = rotation5.applyTo(rotation27);
        double double55 = rotation5.getAngle();
        double double56 = rotation5.getQ3();
        double double57 = rotation5.getQ0();
        org.junit.Assert.assertNotNull(vector3D12);
        org.junit.Assert.assertNotNull(vector3D19);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D40);
        org.junit.Assert.assertNotNull(vector3D47);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + (-0.0d) + "'", double51 == (-0.0d));
        org.junit.Assert.assertNotNull(rotation52);
        org.junit.Assert.assertNotNull(rotation53);
        org.junit.Assert.assertNotNull(rotation54);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 3.1216925665368036d + "'", double55 == 3.1216925665368036d);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.0d + "'", double56 == 0.0d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + (-0.009949879346007117d) + "'", double57 == (-0.009949879346007117d));
    }

    @Test
    public void test1040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1040");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation11 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-1.0d), (double) (byte) 10, (double) (byte) 100, (double) 0L, true);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation17 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D18 = rotation17.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation24 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D25 = rotation24.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation26 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D18, vector3D25);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D27 = rotation11.applyTo(vector3D18);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = rotation5.applyTo(vector3D27);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation30 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D27, (double) 1.0f);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation36 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D37 = rotation36.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation43 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D44 = rotation43.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation45 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D37, vector3D44);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation51 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D52 = rotation51.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation58 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double59 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation51, rotation58);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation65 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D66 = rotation65.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation72 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double73 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation65, rotation72);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation74 = rotation58.applyInverseTo(rotation65);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D75 = rotation74.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation76 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D37, vector3D75);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D77 = rotation30.applyTo(vector3D37);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation79 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D77, 3.1216925665368036d);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation81 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D77, (double) (-1L));
        org.junit.Assert.assertNotNull(vector3D18);
        org.junit.Assert.assertNotNull(vector3D25);
        org.junit.Assert.assertNotNull(vector3D27);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D37);
        org.junit.Assert.assertNotNull(vector3D44);
        org.junit.Assert.assertNotNull(vector3D52);
        org.junit.Assert.assertTrue(Double.isNaN(double59));
        org.junit.Assert.assertNotNull(vector3D66);
        org.junit.Assert.assertTrue(Double.isNaN(double73));
        org.junit.Assert.assertNotNull(rotation74);
        org.junit.Assert.assertNotNull(vector3D75);
        org.junit.Assert.assertNotNull(vector3D77);
    }

    @Test
    public void test1041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1041");
        double[][] doubleArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.geometry.euclidean.threed.Rotation rotation2 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray0, 10.315768314846704d);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1042");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation0 = org.apache.commons.math.geometry.euclidean.threed.Rotation.IDENTITY;
        double double1 = rotation0.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation2 = rotation0.revert();
        double double3 = rotation0.getQ1();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation9 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D10 = rotation9.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation16 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D17 = rotation16.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation18 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D10, vector3D17);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation24 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D25 = rotation24.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation31 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D32 = rotation31.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation33 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D25, vector3D32);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation39 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D40 = rotation39.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation46 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D47 = rotation46.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation48 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D40, vector3D47);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation49 = rotation33.applyTo(rotation48);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation50 = rotation18.applyTo(rotation49);
        double[][] doubleArray51 = rotation50.getMatrix();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation52 = rotation0.applyInverseTo(rotation50);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation58 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) 10.0f, 0.7881701093115122d, (-0.1730129508244783d), (double) (byte) 0, true);
        double double59 = rotation58.getAngle();
        double double60 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation52, rotation58);
        org.junit.Assert.assertNotNull(rotation0);
        org.junit.Assert.assertTrue("'" + double1 + "' != '" + 0.0d + "'", double1 == 0.0d);
        org.junit.Assert.assertNotNull(rotation2);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertNotNull(vector3D10);
        org.junit.Assert.assertNotNull(vector3D17);
        org.junit.Assert.assertNotNull(vector3D25);
        org.junit.Assert.assertNotNull(vector3D32);
        org.junit.Assert.assertNotNull(vector3D40);
        org.junit.Assert.assertNotNull(vector3D47);
        org.junit.Assert.assertNotNull(rotation49);
        org.junit.Assert.assertNotNull(rotation50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(rotation52);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 0.1610382605737718d + "'", double59 == 0.1610382605737718d);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.1610382605737718d + "'", double60 == 0.1610382605737718d);
    }

    @Test
    public void test1043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1043");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double13 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation5, rotation12);
        double double14 = rotation12.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation20.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = rotation27.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation29 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D21, vector3D28);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D36 = rotation35.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation42 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D43 = rotation42.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation44 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D36, vector3D43);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation45 = rotation29.applyTo(rotation44);
        double double46 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation12, rotation45);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation52 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D53 = rotation52.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation59 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double60 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation52, rotation59);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation66 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D67 = rotation66.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation73 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double74 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation66, rotation73);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation75 = rotation59.applyInverseTo(rotation66);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation76 = rotation12.applyInverseTo(rotation66);
        double double77 = rotation66.getQ1();
        double double78 = rotation66.getQ1();
        org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder79 = null;
        double[] doubleArray80 = rotation66.getAngles(rotationOrder79);
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 3.141592653589793d + "'", double14 == 3.141592653589793d);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(rotation45);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 3.141592653589793d + "'", double46 == 3.141592653589793d);
        org.junit.Assert.assertNotNull(vector3D53);
        org.junit.Assert.assertTrue(Double.isNaN(double60));
        org.junit.Assert.assertNotNull(vector3D67);
        org.junit.Assert.assertTrue(Double.isNaN(double74));
        org.junit.Assert.assertNotNull(rotation75);
        org.junit.Assert.assertNotNull(rotation76);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 0.01922366120271981d + "'", double77 == 0.01922366120271981d);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 0.01922366120271981d + "'", double78 == 0.01922366120271981d);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[2.356194490192345, 0.0543794248094174, -2.356194490192345]");
    }

    @Test
    public void test1044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1044");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (short) -1, (double) 10.0f, (double) (byte) 100, (-0.005755946541407356d), true);
        double[][] doubleArray6 = rotation5.getMatrix();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation19 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D20 = rotation19.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation21 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D13, vector3D20);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation23 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D13, (double) 100L);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation29 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-1.0d), (double) (byte) 10, (double) (byte) 100, (double) 0L, true);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D36 = rotation35.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation42 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D43 = rotation42.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation44 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D36, vector3D43);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D45 = rotation29.applyTo(vector3D36);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation51 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D52 = rotation51.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation58 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D59 = rotation58.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation65 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D66 = rotation65.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation67 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D59, vector3D66);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation69 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D59, (double) 100L);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation70 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D52, vector3D59);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation76 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D77 = rotation76.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation78 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D13, vector3D45, vector3D59, vector3D77);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation80 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D59, (double) 1.0f);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation81 = rotation80.revert();
        double double82 = rotation81.getQ0();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D83 = rotation81.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D84 = rotation81.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D85 = rotation5.applyTo(vector3D84);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D20);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(vector3D45);
        org.junit.Assert.assertNotNull(vector3D52);
        org.junit.Assert.assertNotNull(vector3D59);
        org.junit.Assert.assertNotNull(vector3D66);
        org.junit.Assert.assertNotNull(vector3D77);
        org.junit.Assert.assertNotNull(rotation81);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + (-0.8775825618903728d) + "'", double82 == (-0.8775825618903728d));
        org.junit.Assert.assertNotNull(vector3D83);
        org.junit.Assert.assertNotNull(vector3D84);
        org.junit.Assert.assertNotNull(vector3D85);
    }

    @Test
    public void test1045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1045");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation20.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = rotation27.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation34 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D35 = rotation34.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation36 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D28, vector3D35);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation42 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D43 = rotation42.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation49 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D50 = rotation49.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation51 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D43, vector3D50);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation52 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D13, vector3D21, vector3D35, vector3D50);
        double double53 = rotation52.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation59 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D60 = rotation59.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation66 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double67 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation59, rotation66);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation73 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D74 = rotation73.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation80 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D81 = rotation80.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation82 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D74, vector3D81);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation88 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation89 = rotation82.applyInverseTo(rotation88);
        double double90 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation66, rotation82);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D91 = rotation66.getAxis();
        double[][] doubleArray92 = rotation66.getMatrix();
        double double93 = rotation66.getQ2();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation94 = rotation52.applyInverseTo(rotation66);
        double double95 = rotation52.getQ0();
        double double96 = rotation52.getQ1();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D35);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(vector3D50);
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertNotNull(vector3D60);
        org.junit.Assert.assertTrue(Double.isNaN(double67));
        org.junit.Assert.assertNotNull(vector3D74);
        org.junit.Assert.assertNotNull(vector3D81);
        org.junit.Assert.assertNotNull(rotation89);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 3.141592653589793d + "'", double90 == 3.141592653589793d);
        org.junit.Assert.assertNotNull(vector3D91);
        org.junit.Assert.assertNotNull(doubleArray92);
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + (-1.0d) + "'", double93 == (-1.0d));
        org.junit.Assert.assertNotNull(rotation94);
        org.junit.Assert.assertTrue(Double.isNaN(double95));
        org.junit.Assert.assertTrue(Double.isNaN(double96));
    }

    @Test
    public void test1046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1046");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double13 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation5, rotation12);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation19 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D20 = rotation19.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation26 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D27 = rotation26.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation28 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D20, vector3D27);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation34 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = rotation28.applyInverseTo(rotation34);
        double double36 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation12, rotation28);
        double double37 = rotation12.getAngle();
        double double38 = rotation12.getQ1();
        double double39 = rotation12.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation40 = rotation12.revert();
        java.lang.Class<?> wildcardClass41 = rotation12.getClass();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertNotNull(vector3D20);
        org.junit.Assert.assertNotNull(vector3D27);
        org.junit.Assert.assertNotNull(rotation35);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 3.141592653589793d + "'", double36 == 3.141592653589793d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 3.141592653589793d + "'", double37 == 3.141592653589793d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 10.0d + "'", double38 == 10.0d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 1.0d + "'", double39 == 1.0d);
        org.junit.Assert.assertNotNull(rotation40);
        org.junit.Assert.assertNotNull(wildcardClass41);
    }

    @Test
    public void test1047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1047");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-0.1855270382668764d), (double) 10, (double) (short) -1, (double) 100.0f, false);
        double[][] doubleArray6 = rotation5.getMatrix();
        double[][] doubleArray7 = rotation5.getMatrix();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D8 = rotation5.getAxis();
        double double9 = rotation5.getQ0();
        double double10 = rotation5.getQ1();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(vector3D8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + (-0.1855270382668764d) + "'", double9 == (-0.1855270382668764d));
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 10.0d + "'", double10 == 10.0d);
    }

    @Test
    public void test1048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1048");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-0.1855270382668764d), (double) 10, (double) (short) -1, (double) 100.0f, false);
        double[][] doubleArray6 = rotation5.getMatrix();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation19 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D20 = rotation19.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation21 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D13, vector3D20);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation23 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D13, (double) 100L);
        double double24 = rotation23.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation25 = rotation23.revert();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation31 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (byte) 100, (double) 10L, (double) (short) 100, (double) 1L, false);
        double double32 = rotation31.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation33 = rotation25.applyInverseTo(rotation31);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation34 = rotation5.applyInverseTo(rotation33);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation40 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D41 = rotation40.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation47 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D48 = rotation47.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation49 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D41, vector3D48);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation55 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D56 = rotation55.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation62 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D63 = rotation62.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation64 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D56, vector3D63);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation65 = rotation49.applyTo(rotation64);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation71 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) 10, 0.0d, (double) (byte) 0, 10.0d, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation72 = rotation49.applyTo(rotation71);
        double double73 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation34, rotation49);
        double double74 = rotation49.getQ1();
        double[][] doubleArray75 = rotation49.getMatrix();
        java.lang.Class<?> wildcardClass76 = rotation49.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D20);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + (-0.0d) + "'", double24 == (-0.0d));
        org.junit.Assert.assertNotNull(rotation25);
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertNotNull(rotation33);
        org.junit.Assert.assertNotNull(rotation34);
        org.junit.Assert.assertNotNull(vector3D41);
        org.junit.Assert.assertNotNull(vector3D48);
        org.junit.Assert.assertNotNull(vector3D56);
        org.junit.Assert.assertNotNull(vector3D63);
        org.junit.Assert.assertNotNull(rotation65);
        org.junit.Assert.assertNotNull(rotation72);
        org.junit.Assert.assertTrue(Double.isNaN(double73));
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 0.0d + "'", double74 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertNotNull(wildcardClass76);
    }

    @Test
    public void test1049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1049");
        org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.geometry.euclidean.threed.Rotation rotation4 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(rotationOrder0, 3.1216925665694406d, (double) (short) 10, 0.28366218546322625d);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1050");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) 10, 0.0d, (double) (byte) 0, 10.0d, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation11 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (byte) 100, (double) 10L, (double) (short) 100, (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation17 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D18 = rotation17.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation24 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D25 = rotation24.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation26 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D18, vector3D25);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation28 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D18, (double) 100L);
        double double29 = rotation28.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation30 = rotation11.applyInverseTo(rotation28);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation31 = rotation5.applyInverseTo(rotation28);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation37 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D38 = rotation37.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation44 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D45 = rotation44.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation46 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D38, vector3D45);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation48 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D38, (double) 1L);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D49 = rotation31.applyTo(vector3D38);
        double double50 = rotation31.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation56 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.9996303825414301d, (double) (short) 0, 3.141592653589793d, 0.09949879346007118d, true);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation57 = rotation31.applyInverseTo(rotation56);
        double double58 = rotation57.getQ1();
        double double59 = rotation57.getQ2();
        org.junit.Assert.assertNotNull(vector3D18);
        org.junit.Assert.assertNotNull(vector3D25);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + (-0.0d) + "'", double29 == (-0.0d));
        org.junit.Assert.assertNotNull(rotation30);
        org.junit.Assert.assertNotNull(rotation31);
        org.junit.Assert.assertNotNull(vector3D38);
        org.junit.Assert.assertNotNull(vector3D45);
        org.junit.Assert.assertNotNull(vector3D49);
        org.junit.Assert.assertTrue(Double.isNaN(double50));
        org.junit.Assert.assertNotNull(rotation57);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 9.079262566818354d + "'", double58 == 9.079262566818354d);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 10.315768314846704d + "'", double59 == 10.315768314846704d);
    }

    @Test
    public void test1051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1051");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double13 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation5, rotation12);
        double double14 = rotation12.getQ1();
        double double15 = rotation12.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation21 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-1.0d), (double) (byte) 10, (double) (byte) 100, (double) 0L, true);
        org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder22 = null;
        double[] doubleArray23 = rotation21.getAngles(rotationOrder22);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation29 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D30 = rotation29.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation36 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double37 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation29, rotation36);
        double double38 = rotation36.getAngle();
        double double39 = rotation36.getAngle();
        double double40 = rotation36.getQ0();
        double double41 = rotation36.getQ0();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation47 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D48 = rotation47.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation54 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D55 = rotation54.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation56 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D48, vector3D55);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation58 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D48, (double) 100L);
        double double59 = rotation58.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation60 = rotation58.revert();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation66 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (byte) 100, (double) 10L, (double) (short) 100, (double) 1L, false);
        double double67 = rotation66.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation68 = rotation60.applyInverseTo(rotation66);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D69 = rotation66.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D70 = rotation36.applyInverseTo(vector3D69);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D71 = rotation21.applyInverseTo(vector3D69);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation77 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-0.1855270382668764d), (double) '4', (-10.0d), (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D78 = rotation77.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation79 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D69, vector3D78);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation81 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D78, 0.0d);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation82 = rotation12.applyTo(rotation81);
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 10.0d + "'", double14 == 10.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 3.141592653589793d + "'", double15 == 3.141592653589793d);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[-0.09966865249116204, 3.121692566536803, 0.09966865249116204]");
        org.junit.Assert.assertNotNull(vector3D30);
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 3.141592653589793d + "'", double38 == 3.141592653589793d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 3.141592653589793d + "'", double39 == 3.141592653589793d);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.0d + "'", double40 == 0.0d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.0d + "'", double41 == 0.0d);
        org.junit.Assert.assertNotNull(vector3D48);
        org.junit.Assert.assertNotNull(vector3D55);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + (-0.0d) + "'", double59 == (-0.0d));
        org.junit.Assert.assertNotNull(rotation60);
        org.junit.Assert.assertTrue(Double.isNaN(double67));
        org.junit.Assert.assertNotNull(rotation68);
        org.junit.Assert.assertNotNull(vector3D69);
        org.junit.Assert.assertNotNull(vector3D70);
        org.junit.Assert.assertNotNull(vector3D71);
        org.junit.Assert.assertNotNull(vector3D78);
        org.junit.Assert.assertNotNull(rotation82);
    }

    @Test
    public void test1052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1052");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double13 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation5, rotation12);
        double double14 = rotation12.getQ1();
        double double15 = rotation12.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation16 = rotation12.revert();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D17 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation23 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D24 = rotation23.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation30 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double31 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation23, rotation30);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation37 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D38 = rotation37.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation44 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D45 = rotation44.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation46 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D38, vector3D45);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation52 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation53 = rotation46.applyInverseTo(rotation52);
        double double54 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation30, rotation46);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D55 = rotation30.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation61 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-1.0d), (double) (byte) 10, (double) (byte) 100, (double) 0L, true);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation67 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D68 = rotation67.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation74 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D75 = rotation74.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation76 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D68, vector3D75);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D77 = rotation61.applyTo(vector3D68);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation78 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D55, vector3D77);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation84 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D85 = rotation84.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation91 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D92 = rotation91.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation93 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D85, vector3D92);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D94 = rotation78.applyTo(vector3D85);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation95 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D17, vector3D94);
        java.lang.Class<?> wildcardClass96 = vector3D17.getClass();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 10.0d + "'", double14 == 10.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 3.141592653589793d + "'", double15 == 3.141592653589793d);
        org.junit.Assert.assertNotNull(rotation16);
        org.junit.Assert.assertNotNull(vector3D17);
        org.junit.Assert.assertNotNull(vector3D24);
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertNotNull(vector3D38);
        org.junit.Assert.assertNotNull(vector3D45);
        org.junit.Assert.assertNotNull(rotation53);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 3.141592653589793d + "'", double54 == 3.141592653589793d);
        org.junit.Assert.assertNotNull(vector3D55);
        org.junit.Assert.assertNotNull(vector3D68);
        org.junit.Assert.assertNotNull(vector3D75);
        org.junit.Assert.assertNotNull(vector3D77);
        org.junit.Assert.assertNotNull(vector3D85);
        org.junit.Assert.assertNotNull(vector3D92);
        org.junit.Assert.assertNotNull(vector3D94);
        org.junit.Assert.assertNotNull(wildcardClass96);
    }

    @Test
    public void test1053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1053");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-1.0d), (double) (byte) 10, (double) (byte) 100, (double) 0L, true);
        org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder6 = null;
        double[] doubleArray7 = rotation5.getAngles(rotationOrder6);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation13 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D14 = rotation13.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double21 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation13, rotation20);
        double double22 = rotation20.getAngle();
        double double23 = rotation20.getAngle();
        double double24 = rotation20.getQ0();
        double double25 = rotation20.getQ0();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation31 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D32 = rotation31.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation38 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D39 = rotation38.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation40 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D32, vector3D39);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation42 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D32, (double) 100L);
        double double43 = rotation42.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation44 = rotation42.revert();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation50 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (byte) 100, (double) 10L, (double) (short) 100, (double) 1L, false);
        double double51 = rotation50.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation52 = rotation44.applyInverseTo(rotation50);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D53 = rotation50.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D54 = rotation20.applyInverseTo(vector3D53);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D55 = rotation5.applyInverseTo(vector3D53);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation61 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-0.1855270382668764d), (double) '4', (-10.0d), (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D62 = rotation61.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation63 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D53, vector3D62);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation64 = rotation63.revert();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation65 = org.apache.commons.math.geometry.euclidean.threed.Rotation.IDENTITY;
        double double66 = rotation65.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation67 = rotation65.revert();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D68 = rotation67.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D69 = rotation64.applyInverseTo(vector3D68);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation71 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D68, 1.3713780210687443d);
        org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder72 = null;
        double[] doubleArray73 = rotation71.getAngles(rotationOrder72);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-0.09966865249116204, 3.121692566536803, 0.09966865249116204]");
        org.junit.Assert.assertNotNull(vector3D14);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 3.141592653589793d + "'", double22 == 3.141592653589793d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 3.141592653589793d + "'", double23 == 3.141592653589793d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertNotNull(vector3D32);
        org.junit.Assert.assertNotNull(vector3D39);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + (-0.0d) + "'", double43 == (-0.0d));
        org.junit.Assert.assertNotNull(rotation44);
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertNotNull(rotation52);
        org.junit.Assert.assertNotNull(vector3D53);
        org.junit.Assert.assertNotNull(vector3D54);
        org.junit.Assert.assertNotNull(vector3D55);
        org.junit.Assert.assertNotNull(vector3D62);
        org.junit.Assert.assertNotNull(rotation64);
        org.junit.Assert.assertNotNull(rotation65);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 0.0d + "'", double66 == 0.0d);
        org.junit.Assert.assertNotNull(rotation67);
        org.junit.Assert.assertNotNull(vector3D68);
        org.junit.Assert.assertNotNull(vector3D69);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[-1.5707963267948966, 1.371378021068744, 1.5707963267948966]");
    }

    @Test
    public void test1054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1054");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        double[][] doubleArray15 = rotation14.getMatrix();
        double[][] doubleArray16 = rotation14.getMatrix();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation18 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray16, 10924.868355180524d);
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(doubleArray16);
    }

    @Test
    public void test1055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1055");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation20.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = rotation27.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation29 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D21, vector3D28);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D36 = rotation35.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation42 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D43 = rotation42.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation44 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D36, vector3D43);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation45 = rotation29.applyTo(rotation44);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation46 = rotation14.applyTo(rotation45);
        double[][] doubleArray47 = rotation46.getMatrix();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation49 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray47, (double) 100.0f);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation55 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-1.0d), (double) (byte) 10, (double) (byte) 100, (double) 0L, true);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation61 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D62 = rotation61.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D63 = rotation55.applyInverseTo(vector3D62);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D64 = rotation49.applyTo(vector3D63);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation66 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D64, 100.0d);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation68 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D64, 1.047240853549319d);
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(rotation45);
        org.junit.Assert.assertNotNull(rotation46);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(vector3D62);
        org.junit.Assert.assertNotNull(vector3D63);
        org.junit.Assert.assertNotNull(vector3D64);
    }

    @Test
    public void test1056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1056");
        org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.geometry.euclidean.threed.Rotation rotation4 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(rotationOrder0, 0.09756195019404022d, 0.7881701093115124d, (double) 10.0f);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1057");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation11 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-1.0d), (double) (byte) 10, (double) (byte) 100, (double) 0L, true);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation17 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D18 = rotation17.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation24 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D25 = rotation24.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation26 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D18, vector3D25);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D27 = rotation11.applyTo(vector3D18);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = rotation5.applyTo(vector3D27);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation30 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D27, (double) 1.0f);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation36 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D37 = rotation36.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation43 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D44 = rotation43.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation45 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D37, vector3D44);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation51 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D52 = rotation51.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation58 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D59 = rotation58.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation65 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D66 = rotation65.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation67 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D59, vector3D66);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation73 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D74 = rotation73.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation80 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D81 = rotation80.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation82 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D74, vector3D81);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation83 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D44, vector3D52, vector3D66, vector3D81);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation85 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D44, (-0.0d));
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation87 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D44, (double) 1L);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation88 = rotation30.applyInverseTo(rotation87);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation89 = rotation88.revert();
        double double90 = rotation88.getQ0();
        double double91 = rotation88.getQ0();
        org.junit.Assert.assertNotNull(vector3D18);
        org.junit.Assert.assertNotNull(vector3D25);
        org.junit.Assert.assertNotNull(vector3D27);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D37);
        org.junit.Assert.assertNotNull(vector3D44);
        org.junit.Assert.assertNotNull(vector3D52);
        org.junit.Assert.assertNotNull(vector3D59);
        org.junit.Assert.assertNotNull(vector3D66);
        org.junit.Assert.assertNotNull(vector3D74);
        org.junit.Assert.assertNotNull(vector3D81);
        org.junit.Assert.assertNotNull(rotation88);
        org.junit.Assert.assertNotNull(rotation89);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + (-0.8156840252218559d) + "'", double90 == (-0.8156840252218559d));
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + (-0.8156840252218559d) + "'", double91 == (-0.8156840252218559d));
    }

    @Test
    public void test1058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1058");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) 10, 0.0d, (double) (byte) 0, 10.0d, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation11 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (byte) 100, (double) 10L, (double) (short) 100, (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation17 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D18 = rotation17.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation24 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D25 = rotation24.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation26 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D18, vector3D25);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation28 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D18, (double) 100L);
        double double29 = rotation28.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation30 = rotation11.applyInverseTo(rotation28);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation31 = rotation5.applyInverseTo(rotation28);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation32 = rotation31.revert();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D33 = rotation32.getAxis();
        double double34 = rotation32.getQ1();
        double double35 = rotation32.getQ0();
        double double36 = rotation32.getQ3();
        double double37 = rotation32.getQ1();
        org.junit.Assert.assertNotNull(vector3D18);
        org.junit.Assert.assertNotNull(vector3D25);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + (-0.0d) + "'", double29 == (-0.0d));
        org.junit.Assert.assertNotNull(rotation30);
        org.junit.Assert.assertNotNull(rotation31);
        org.junit.Assert.assertNotNull(rotation32);
        org.junit.Assert.assertNotNull(vector3D33);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 9.649660284921133d + "'", double35 == 9.649660284921133d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 9.649660284921133d + "'", double36 == 9.649660284921133d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d);
    }

    @Test
    public void test1059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1059");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation20.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = rotation27.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation34 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D35 = rotation34.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation36 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D28, vector3D35);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation42 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D43 = rotation42.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation49 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D50 = rotation49.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation51 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D43, vector3D50);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation52 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D13, vector3D21, vector3D35, vector3D50);
        double double53 = rotation52.getQ1();
        double[][] doubleArray54 = rotation52.getMatrix();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation55 = rotation52.revert();
        double double56 = rotation55.getAngle();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D35);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(vector3D50);
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(rotation55);
        org.junit.Assert.assertTrue(Double.isNaN(double56));
    }

    @Test
    public void test1060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1060");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation11 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D12 = rotation11.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation18 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double19 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation11, rotation18);
        double double20 = rotation18.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation26 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D27 = rotation26.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation33 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D34 = rotation33.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D27, vector3D34);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation41 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D42 = rotation41.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation48 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D49 = rotation48.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation50 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D42, vector3D49);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation51 = rotation35.applyTo(rotation50);
        double double52 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation18, rotation51);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation58 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D59 = rotation58.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation65 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double66 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation58, rotation65);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation72 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D73 = rotation72.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation79 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double80 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation72, rotation79);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation81 = rotation65.applyInverseTo(rotation72);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation82 = rotation18.applyInverseTo(rotation72);
        double double83 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation5, rotation82);
        double double84 = rotation5.getAngle();
        double double85 = rotation5.getQ1();
        double double86 = rotation5.getQ2();
        double double87 = rotation5.getQ3();
        org.junit.Assert.assertNotNull(vector3D12);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 3.141592653589793d + "'", double20 == 3.141592653589793d);
        org.junit.Assert.assertNotNull(vector3D27);
        org.junit.Assert.assertNotNull(vector3D34);
        org.junit.Assert.assertNotNull(vector3D42);
        org.junit.Assert.assertNotNull(vector3D49);
        org.junit.Assert.assertNotNull(rotation51);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 3.141592653589793d + "'", double52 == 3.141592653589793d);
        org.junit.Assert.assertNotNull(vector3D59);
        org.junit.Assert.assertTrue(Double.isNaN(double66));
        org.junit.Assert.assertNotNull(vector3D73);
        org.junit.Assert.assertTrue(Double.isNaN(double80));
        org.junit.Assert.assertNotNull(rotation81);
        org.junit.Assert.assertNotNull(rotation82);
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 3.141592653589793d + "'", double83 == 3.141592653589793d);
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 0.054379424809409445d + "'", double84 == 0.054379424809409445d);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 0.01922366120271981d + "'", double85 == 0.01922366120271981d);
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 0.01922366120271981d + "'", double86 == 0.01922366120271981d);
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 0.0d + "'", double87 == 0.0d);
    }

    @Test
    public void test1061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1061");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation20.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = rotation27.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation29 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D21, vector3D28);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D36 = rotation35.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation42 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D43 = rotation42.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation44 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D36, vector3D43);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation45 = rotation29.applyTo(rotation44);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation46 = rotation14.applyTo(rotation45);
        double[][] doubleArray47 = rotation46.getMatrix();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation49 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray47, (double) 10);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation51 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray47, (double) (byte) 100);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation53 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray47, 0.0d);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation55 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray47, 0.9949438965141721d);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.geometry.euclidean.threed.Rotation rotation57 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray47, (-0.1855270382668764d));
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.geometry.euclidean.threed.NotARotationMatrixException; message: unable to orthogonalize matrix in 10 iterations");
        } catch (org.apache.commons.math.geometry.euclidean.threed.NotARotationMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(rotation45);
        org.junit.Assert.assertNotNull(rotation46);
        org.junit.Assert.assertNotNull(doubleArray47);
    }

    @Test
    public void test1062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1062");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation16 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, (double) 100L);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation22 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-1.0d), (double) (byte) 10, (double) (byte) 100, (double) 0L, true);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation28 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D29 = rotation28.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D36 = rotation35.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation37 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D29, vector3D36);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D38 = rotation22.applyTo(vector3D29);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation44 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D45 = rotation44.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation51 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D52 = rotation51.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation58 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D59 = rotation58.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation60 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D52, vector3D59);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation62 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D52, (double) 100L);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation63 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D45, vector3D52);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation69 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D70 = rotation69.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation71 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D38, vector3D52, vector3D70);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation77 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D78 = rotation77.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation84 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D85 = rotation84.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation86 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D78, vector3D85);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation87 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D70, vector3D85);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation88 = rotation87.revert();
        double double89 = rotation88.getQ0();
        double double90 = rotation88.getQ2();
        double double91 = rotation88.getQ2();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D29);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D38);
        org.junit.Assert.assertNotNull(vector3D45);
        org.junit.Assert.assertNotNull(vector3D52);
        org.junit.Assert.assertNotNull(vector3D59);
        org.junit.Assert.assertNotNull(vector3D70);
        org.junit.Assert.assertNotNull(vector3D78);
        org.junit.Assert.assertNotNull(vector3D85);
        org.junit.Assert.assertNotNull(rotation88);
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + (-1.0d) + "'", double89 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 0.0d + "'", double90 == 0.0d);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 0.0d + "'", double91 == 0.0d);
    }

    @Test
    public void test1063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1063");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-1.0d), Double.NaN, 9.649660284921133d, 3.1030128410395363d, false);
        java.lang.Class<?> wildcardClass6 = rotation5.getClass();
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test1064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1064");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation20.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = rotation27.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation34 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D35 = rotation34.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation36 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D28, vector3D35);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation42 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D43 = rotation42.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation49 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D50 = rotation49.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation51 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D43, vector3D50);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation52 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D13, vector3D21, vector3D35, vector3D50);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation54 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D21, (double) 1);
        double double55 = rotation54.getQ1();
        double double56 = rotation54.getQ1();
        double double57 = rotation54.getQ2();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D58 = rotation54.getAxis();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D35);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(vector3D50);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.33900504942104487d + "'", double55 == 0.33900504942104487d);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.33900504942104487d + "'", double56 == 0.33900504942104487d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.33900504942104487d + "'", double57 == 0.33900504942104487d);
        org.junit.Assert.assertNotNull(vector3D58);
    }

    @Test
    public void test1065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1065");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double13 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation5, rotation12);
        double double14 = rotation12.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation20.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double28 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation20, rotation27);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation34 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D35 = rotation34.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation41 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double42 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation34, rotation41);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation43 = rotation27.applyInverseTo(rotation34);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation44 = rotation12.applyTo(rotation34);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D45 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation47 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D45, 3.7105407653375275d);
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 3.141592653589793d + "'", double14 == 3.141592653589793d);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertNotNull(vector3D35);
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertNotNull(rotation43);
        org.junit.Assert.assertNotNull(rotation44);
        org.junit.Assert.assertNotNull(vector3D45);
    }

    @Test
    public void test1066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1066");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation16 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, (double) 100L);
        double double17 = rotation16.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation18 = rotation16.revert();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation24 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (byte) 100, (double) 10L, (double) (short) 100, (double) 1L, false);
        double double25 = rotation24.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation26 = rotation18.applyInverseTo(rotation24);
        double double27 = rotation24.getQ0();
        double double28 = rotation24.getQ0();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D29 = rotation24.getAxis();
        double double30 = rotation24.getQ2();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation31 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.geometry.euclidean.threed.Rotation rotation32 = rotation24.applyTo(rotation31);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-0.0d) + "'", double17 == (-0.0d));
        org.junit.Assert.assertNotNull(rotation18);
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertNotNull(rotation26);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 100.0d + "'", double27 == 100.0d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 100.0d + "'", double28 == 100.0d);
        org.junit.Assert.assertNotNull(vector3D29);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 100.0d + "'", double30 == 100.0d);
    }

    @Test
    public void test1067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1067");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (-1L), 0.0d, (-0.0d), 17.66239947251099d, false);
        double double6 = rotation5.getQ2();
        org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder7 = null;
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray8 = rotation5.getAngles(rotationOrder7);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.geometry.euclidean.threed.CardanEulerSingularityException; message: Euler angles singularity");
        } catch (org.apache.commons.math.geometry.euclidean.threed.CardanEulerSingularityException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + (-0.0d) + "'", double6 == (-0.0d));
    }

    @Test
    public void test1068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1068");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation20.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = rotation27.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation29 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D21, vector3D28);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D36 = rotation35.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation42 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D43 = rotation42.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation44 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D36, vector3D43);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation45 = rotation29.applyTo(rotation44);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation46 = rotation14.applyTo(rotation45);
        double double47 = rotation46.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D48 = rotation46.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation54 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-0.1855270382668764d), (double) 1, Double.NaN, (double) (short) 100, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation60 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D61 = rotation60.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation67 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D68 = rotation67.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation69 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D61, vector3D68);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation75 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D76 = rotation75.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation82 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D83 = rotation82.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation84 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D76, vector3D83);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation85 = rotation69.applyTo(rotation84);
        double double86 = rotation84.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation87 = rotation84.revert();
        double double88 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation54, rotation84);
        double[][] doubleArray89 = rotation54.getMatrix();
        double[][] doubleArray90 = rotation54.getMatrix();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation91 = rotation46.applyTo(rotation54);
        double double92 = rotation91.getAngle();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(rotation45);
        org.junit.Assert.assertNotNull(rotation46);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d);
        org.junit.Assert.assertNotNull(vector3D48);
        org.junit.Assert.assertNotNull(vector3D61);
        org.junit.Assert.assertNotNull(vector3D68);
        org.junit.Assert.assertNotNull(vector3D76);
        org.junit.Assert.assertNotNull(vector3D83);
        org.junit.Assert.assertNotNull(rotation85);
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 0.0d + "'", double86 == 0.0d);
        org.junit.Assert.assertNotNull(rotation87);
        org.junit.Assert.assertTrue(Double.isNaN(double88));
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertNotNull(rotation91);
        org.junit.Assert.assertTrue(Double.isNaN(double92));
    }

    @Test
    public void test1069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1069");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation20.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = rotation27.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation29 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D21, vector3D28);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D36 = rotation35.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation42 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D43 = rotation42.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation44 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D36, vector3D43);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation45 = rotation29.applyTo(rotation44);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation46 = rotation14.applyTo(rotation45);
        double[][] doubleArray47 = rotation46.getMatrix();
        double[][] doubleArray48 = rotation46.getMatrix();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation50 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray48, (double) 10.0f);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation52 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray48, 0.9949879346007117d);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation58 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D59 = rotation58.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation65 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D66 = rotation65.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation67 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D59, vector3D66);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation69 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D59, (double) 100L);
        double double70 = rotation69.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation71 = rotation69.revert();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation77 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (byte) 100, (double) 10L, (double) (short) 100, (double) 1L, false);
        double double78 = rotation77.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation79 = rotation71.applyInverseTo(rotation77);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation80 = rotation77.revert();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation81 = rotation52.applyTo(rotation77);
        double[][] doubleArray82 = rotation52.getMatrix();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.geometry.euclidean.threed.Rotation rotation84 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray82, (-0.06415703545444096d));
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.geometry.euclidean.threed.NotARotationMatrixException; message: unable to orthogonalize matrix in 10 iterations");
        } catch (org.apache.commons.math.geometry.euclidean.threed.NotARotationMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(rotation45);
        org.junit.Assert.assertNotNull(rotation46);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(vector3D59);
        org.junit.Assert.assertNotNull(vector3D66);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + (-0.0d) + "'", double70 == (-0.0d));
        org.junit.Assert.assertNotNull(rotation71);
        org.junit.Assert.assertTrue(Double.isNaN(double78));
        org.junit.Assert.assertNotNull(rotation79);
        org.junit.Assert.assertNotNull(rotation80);
        org.junit.Assert.assertNotNull(rotation81);
        org.junit.Assert.assertNotNull(doubleArray82);
    }

    @Test
    public void test1070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1070");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation20.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = rotation27.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation34 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D35 = rotation34.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation36 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D28, vector3D35);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation42 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D43 = rotation42.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation49 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D50 = rotation49.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation51 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D43, vector3D50);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation52 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D13, vector3D21, vector3D35, vector3D50);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation54 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D50, 1.0d);
        double double55 = rotation54.getQ1();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D35);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(vector3D50);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.33900504942104487d + "'", double55 == 0.33900504942104487d);
    }

    @Test
    public void test1071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1071");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (short) -1, 0.7881701093115122d, 0.0d, (-0.0d), false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation11 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (short) 100, 0.0d, 0.33900504942104487d, 0.0d, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = rotation5.applyTo(rotation11);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation13 = rotation11.revert();
        org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder14 = null;
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray15 = rotation13.getAngles(rotationOrder14);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.geometry.euclidean.threed.CardanEulerSingularityException; message: Euler angles singularity");
        } catch (org.apache.commons.math.geometry.euclidean.threed.CardanEulerSingularityException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(rotation12);
        org.junit.Assert.assertNotNull(rotation13);
    }

    @Test
    public void test1072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1072");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation16 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, (double) 100L);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation22 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-1.0d), (double) (byte) 10, (double) (byte) 100, (double) 0L, true);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation28 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D29 = rotation28.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D36 = rotation35.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation37 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D29, vector3D36);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D38 = rotation22.applyTo(vector3D29);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation44 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D45 = rotation44.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation51 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D52 = rotation51.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation58 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D59 = rotation58.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation60 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D52, vector3D59);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation62 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D52, (double) 100L);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation63 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D45, vector3D52);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation69 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D70 = rotation69.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation71 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D38, vector3D52, vector3D70);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation73 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, (double) (short) -1);
        double double74 = rotation73.getQ1();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation80 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D81 = rotation80.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation87 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D88 = rotation87.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation89 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D81, vector3D88);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation91 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D81, 0.0d);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation92 = rotation73.applyTo(rotation91);
        org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder93 = null;
        double[] doubleArray94 = rotation73.getAngles(rotationOrder93);
        double double95 = rotation73.getQ2();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D29);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D38);
        org.junit.Assert.assertNotNull(vector3D45);
        org.junit.Assert.assertNotNull(vector3D52);
        org.junit.Assert.assertNotNull(vector3D59);
        org.junit.Assert.assertNotNull(vector3D70);
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + (-0.33900504942104487d) + "'", double74 == (-0.33900504942104487d));
        org.junit.Assert.assertNotNull(vector3D81);
        org.junit.Assert.assertNotNull(vector3D88);
        org.junit.Assert.assertNotNull(rotation92);
        org.junit.Assert.assertNotNull(doubleArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray94), "[-0.7853981633974483, 0.9999999999999999, 0.7853981633974483]");
        org.junit.Assert.assertTrue("'" + double95 + "' != '" + (-0.33900504942104487d) + "'", double95 == (-0.33900504942104487d));
    }

    @Test
    public void test1073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1073");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation19 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D20 = rotation19.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation21 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D13, vector3D20);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation23 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D13, (double) 100L);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation29 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-1.0d), (double) (byte) 10, (double) (byte) 100, (double) 0L, true);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D36 = rotation35.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation42 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D43 = rotation42.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation44 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D36, vector3D43);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D45 = rotation29.applyTo(vector3D36);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation51 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D52 = rotation51.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation58 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D59 = rotation58.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation65 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D66 = rotation65.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation67 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D59, vector3D66);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation69 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D59, (double) 100L);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation70 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D52, vector3D59);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation76 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D77 = rotation76.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation78 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D13, vector3D45, vector3D59, vector3D77);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation80 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D59, (double) 1.0f);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D81 = rotation5.applyInverseTo(vector3D59);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation83 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D59, (-108.9963038254143d));
        java.lang.Class<?> wildcardClass84 = rotation83.getClass();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D20);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(vector3D45);
        org.junit.Assert.assertNotNull(vector3D52);
        org.junit.Assert.assertNotNull(vector3D59);
        org.junit.Assert.assertNotNull(vector3D66);
        org.junit.Assert.assertNotNull(vector3D77);
        org.junit.Assert.assertNotNull(vector3D81);
        org.junit.Assert.assertNotNull(wildcardClass84);
    }

    @Test
    public void test1074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1074");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double13 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation5, rotation12);
        double double14 = rotation12.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation20.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = rotation27.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation29 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D21, vector3D28);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D36 = rotation35.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation42 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D43 = rotation42.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation44 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D36, vector3D43);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation45 = rotation29.applyTo(rotation44);
        double double46 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation12, rotation45);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation52 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D53 = rotation52.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation59 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double60 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation52, rotation59);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation66 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D67 = rotation66.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation73 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double74 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation66, rotation73);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation75 = rotation59.applyInverseTo(rotation66);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation76 = rotation12.applyInverseTo(rotation66);
        double double77 = rotation66.getQ1();
        org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder78 = null;
        double[] doubleArray79 = rotation66.getAngles(rotationOrder78);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D80 = rotation66.getAxis();
        double[][] doubleArray81 = rotation66.getMatrix();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation83 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray81, 3.1382608577831084d);
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 3.141592653589793d + "'", double14 == 3.141592653589793d);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(rotation45);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 3.141592653589793d + "'", double46 == 3.141592653589793d);
        org.junit.Assert.assertNotNull(vector3D53);
        org.junit.Assert.assertTrue(Double.isNaN(double60));
        org.junit.Assert.assertNotNull(vector3D67);
        org.junit.Assert.assertTrue(Double.isNaN(double74));
        org.junit.Assert.assertNotNull(rotation75);
        org.junit.Assert.assertNotNull(rotation76);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 0.01922366120271981d + "'", double77 == 0.01922366120271981d);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[2.356194490192345, 0.0543794248094174, -2.356194490192345]");
        org.junit.Assert.assertNotNull(vector3D80);
        org.junit.Assert.assertNotNull(doubleArray81);
    }

    @Test
    public void test1075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1075");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (byte) 100, (double) 10L, (double) (short) 100, (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation11 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D12 = rotation11.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation18 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D19 = rotation18.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D12, vector3D19);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation22 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D12, (double) 100L);
        double double23 = rotation22.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation24 = rotation5.applyInverseTo(rotation22);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation30 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D31 = rotation30.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation37 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D38 = rotation37.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation39 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D31, vector3D38);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation45 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation46 = rotation39.applyInverseTo(rotation45);
        double double47 = rotation39.getQ2();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation53 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D54 = rotation53.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation60 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D61 = rotation60.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation62 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D54, vector3D61);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation68 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D69 = rotation68.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation75 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D76 = rotation75.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation77 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D69, vector3D76);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation78 = rotation62.applyTo(rotation77);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation84 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) 10, 0.0d, (double) (byte) 0, 10.0d, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation85 = rotation62.applyTo(rotation84);
        double double86 = rotation84.getAngle();
        double double87 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation39, rotation84);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation88 = rotation24.applyInverseTo(rotation39);
        double double89 = rotation88.getQ1();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D90 = rotation88.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation92 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D90, (double) (byte) 10);
        double[][] doubleArray93 = rotation92.getMatrix();
        org.junit.Assert.assertNotNull(vector3D12);
        org.junit.Assert.assertNotNull(vector3D19);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + (-0.0d) + "'", double23 == (-0.0d));
        org.junit.Assert.assertNotNull(rotation24);
        org.junit.Assert.assertNotNull(vector3D31);
        org.junit.Assert.assertNotNull(vector3D38);
        org.junit.Assert.assertNotNull(rotation46);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d);
        org.junit.Assert.assertNotNull(vector3D54);
        org.junit.Assert.assertNotNull(vector3D61);
        org.junit.Assert.assertNotNull(vector3D69);
        org.junit.Assert.assertNotNull(vector3D76);
        org.junit.Assert.assertNotNull(rotation78);
        org.junit.Assert.assertNotNull(rotation85);
        org.junit.Assert.assertTrue(Double.isNaN(double86));
        org.junit.Assert.assertTrue(Double.isNaN(double87));
        org.junit.Assert.assertNotNull(rotation88);
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 28.016837073341897d + "'", double89 == 28.016837073341897d);
        org.junit.Assert.assertNotNull(vector3D90);
        org.junit.Assert.assertNotNull(doubleArray93);
    }

    @Test
    public void test1076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1076");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double13 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation5, rotation12);
        double double14 = rotation12.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation20.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = rotation27.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation29 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D21, vector3D28);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D36 = rotation35.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation42 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D43 = rotation42.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation44 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D36, vector3D43);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation45 = rotation29.applyTo(rotation44);
        double double46 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation12, rotation45);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation52 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D53 = rotation52.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation59 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double60 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation52, rotation59);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation66 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D67 = rotation66.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation73 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double74 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation66, rotation73);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation75 = rotation59.applyInverseTo(rotation66);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation76 = rotation12.applyInverseTo(rotation66);
        double double77 = rotation66.getQ2();
        double double78 = rotation66.getQ2();
        double double79 = rotation66.getQ3();
        double double80 = rotation66.getAngle();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 3.141592653589793d + "'", double14 == 3.141592653589793d);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(rotation45);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 3.141592653589793d + "'", double46 == 3.141592653589793d);
        org.junit.Assert.assertNotNull(vector3D53);
        org.junit.Assert.assertTrue(Double.isNaN(double60));
        org.junit.Assert.assertNotNull(vector3D67);
        org.junit.Assert.assertTrue(Double.isNaN(double74));
        org.junit.Assert.assertNotNull(rotation75);
        org.junit.Assert.assertNotNull(rotation76);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 0.01922366120271981d + "'", double77 == 0.01922366120271981d);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 0.01922366120271981d + "'", double78 == 0.01922366120271981d);
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 0.0d + "'", double79 == 0.0d);
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 0.054379424809409445d + "'", double80 == 0.054379424809409445d);
    }

    @Test
    public void test1077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1077");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation0 = org.apache.commons.math.geometry.euclidean.threed.Rotation.IDENTITY;
        double double1 = rotation0.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation2 = rotation0.revert();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation8 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D9 = rotation8.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation15 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D16 = rotation15.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation17 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D9, vector3D16);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation19 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D9, (double) 1L);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation25 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D26 = rotation25.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation32 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D33 = rotation32.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation34 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D26, vector3D33);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation40 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D41 = rotation40.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation47 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D48 = rotation47.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation54 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D55 = rotation54.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation56 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D48, vector3D55);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation62 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D63 = rotation62.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation69 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D70 = rotation69.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation71 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D63, vector3D70);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation72 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D33, vector3D41, vector3D55, vector3D70);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation73 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D9, vector3D55);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D74 = rotation0.applyInverseTo(vector3D55);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation76 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D74, (double) (byte) 1);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation78 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D74, 0.7881701093115124d);
        org.junit.Assert.assertNotNull(rotation0);
        org.junit.Assert.assertTrue("'" + double1 + "' != '" + 0.0d + "'", double1 == 0.0d);
        org.junit.Assert.assertNotNull(rotation2);
        org.junit.Assert.assertNotNull(vector3D9);
        org.junit.Assert.assertNotNull(vector3D16);
        org.junit.Assert.assertNotNull(vector3D26);
        org.junit.Assert.assertNotNull(vector3D33);
        org.junit.Assert.assertNotNull(vector3D41);
        org.junit.Assert.assertNotNull(vector3D48);
        org.junit.Assert.assertNotNull(vector3D55);
        org.junit.Assert.assertNotNull(vector3D63);
        org.junit.Assert.assertNotNull(vector3D70);
        org.junit.Assert.assertNotNull(vector3D74);
    }

    @Test
    public void test1078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1078");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation20.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = rotation27.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation29 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D21, vector3D28);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D36 = rotation35.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation42 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D43 = rotation42.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation44 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D36, vector3D43);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation45 = rotation29.applyTo(rotation44);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation46 = rotation14.applyTo(rotation45);
        double[][] doubleArray47 = rotation46.getMatrix();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation49 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray47, (double) '4');
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation51 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray47, 0.7881701093115124d);
        java.lang.Class<?> wildcardClass52 = doubleArray47.getClass();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(rotation45);
        org.junit.Assert.assertNotNull(rotation46);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(wildcardClass52);
    }

    @Test
    public void test1079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1079");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation16 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, (double) 100L);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation22 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-1.0d), (double) (byte) 10, (double) (byte) 100, (double) 0L, true);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation28 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D29 = rotation28.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D36 = rotation35.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation37 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D29, vector3D36);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D38 = rotation22.applyTo(vector3D29);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation44 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D45 = rotation44.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation51 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D52 = rotation51.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation58 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D59 = rotation58.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation60 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D52, vector3D59);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation62 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D52, (double) 100L);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation63 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D45, vector3D52);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation69 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D70 = rotation69.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation71 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D38, vector3D52, vector3D70);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation73 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D70, 100.0d);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation75 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D70, (-0.005755946541407356d));
        double double76 = rotation75.getQ0();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D29);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D38);
        org.junit.Assert.assertNotNull(vector3D45);
        org.junit.Assert.assertNotNull(vector3D52);
        org.junit.Assert.assertNotNull(vector3D59);
        org.junit.Assert.assertNotNull(vector3D70);
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 0.9999958586377851d + "'", double76 == 0.9999958586377851d);
    }

    @Test
    public void test1080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1080");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation16 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, (double) 100L);
        double double17 = rotation16.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation18 = rotation16.revert();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation24 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (byte) 100, (double) 10L, (double) (short) 100, (double) 1L, false);
        double double25 = rotation24.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation26 = rotation18.applyInverseTo(rotation24);
        double double27 = rotation18.getAngle();
        double double28 = rotation18.getQ1();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-0.0d) + "'", double17 == (-0.0d));
        org.junit.Assert.assertNotNull(rotation18);
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertNotNull(rotation26);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.5309649148733836d + "'", double27 == 0.5309649148733836d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + (-0.1855270382668764d) + "'", double28 == (-0.1855270382668764d));
    }

    @Test
    public void test1081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1081");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation20.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = rotation27.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation34 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D35 = rotation34.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation36 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D28, vector3D35);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation42 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D43 = rotation42.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation49 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D50 = rotation49.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation51 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D43, vector3D50);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation52 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D13, vector3D21, vector3D35, vector3D50);
        double double53 = rotation52.getQ0();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D35);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(vector3D50);
        org.junit.Assert.assertTrue(Double.isNaN(double53));
    }

    @Test
    public void test1082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1082");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (short) 10, (double) 10.0f, (-0.1730129508244783d), (double) (-1.0f), true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation8 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, (-0.280459243752156d));
        org.junit.Assert.assertNotNull(vector3D6);
    }

    @Test
    public void test1083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1083");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation16 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, (double) 100L);
        double double17 = rotation16.getQ3();
        double double18 = rotation16.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D19 = rotation16.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation25 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D26 = rotation25.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation32 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D33 = rotation32.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation34 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D26, vector3D33);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation40 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D41 = rotation40.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation47 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D48 = rotation47.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation54 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D55 = rotation54.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation56 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D48, vector3D55);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation62 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D63 = rotation62.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation69 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D70 = rotation69.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation71 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D63, vector3D70);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation72 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D33, vector3D41, vector3D55, vector3D70);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation73 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D19, vector3D33);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation74 = rotation73.revert();
        double[][] doubleArray75 = rotation74.getMatrix();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation77 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray75, (double) 10);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation79 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray75, 28.016837073341897d);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation80 = rotation79.revert();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-0.0d) + "'", double17 == (-0.0d));
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + (-0.0d) + "'", double18 == (-0.0d));
        org.junit.Assert.assertNotNull(vector3D19);
        org.junit.Assert.assertNotNull(vector3D26);
        org.junit.Assert.assertNotNull(vector3D33);
        org.junit.Assert.assertNotNull(vector3D41);
        org.junit.Assert.assertNotNull(vector3D48);
        org.junit.Assert.assertNotNull(vector3D55);
        org.junit.Assert.assertNotNull(vector3D63);
        org.junit.Assert.assertNotNull(vector3D70);
        org.junit.Assert.assertNotNull(rotation74);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertNotNull(rotation80);
    }

    @Test
    public void test1084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1084");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation20.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = rotation27.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation34 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D35 = rotation34.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation36 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D28, vector3D35);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation42 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D43 = rotation42.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation49 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D50 = rotation49.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation51 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D43, vector3D50);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation52 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D13, vector3D21, vector3D35, vector3D50);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation53 = rotation52.revert();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D54 = rotation52.getAxis();
        java.lang.Class<?> wildcardClass55 = rotation52.getClass();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D35);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(vector3D50);
        org.junit.Assert.assertNotNull(rotation53);
        org.junit.Assert.assertNotNull(vector3D54);
        org.junit.Assert.assertNotNull(wildcardClass55);
    }

    @Test
    public void test1085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1085");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-0.9649660284921133d), (-116.90457705856772d), 0.09949438965141721d, (-0.1730129508244783d), true);
    }

    @Test
    public void test1086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1086");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) 10, 0.0d, (double) (byte) 0, 10.0d, false);
        double double6 = rotation5.getQ1();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation19 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D20 = rotation19.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation21 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D13, vector3D20);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = rotation27.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation34 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D35 = rotation34.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation41 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D42 = rotation41.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation43 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D35, vector3D42);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation49 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D50 = rotation49.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation56 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D57 = rotation56.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation58 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D50, vector3D57);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation59 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D20, vector3D28, vector3D42, vector3D57);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D60 = rotation5.applyTo(vector3D42);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation62 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D42, 0.7881701093115122d);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation68 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D69 = rotation68.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation75 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D76 = rotation75.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation77 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D69, vector3D76);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation79 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D69, (double) 100L);
        double double80 = rotation79.getQ1();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation81 = rotation62.applyTo(rotation79);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation82 = rotation81.revert();
        java.lang.Class<?> wildcardClass83 = rotation82.getClass();
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D20);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D35);
        org.junit.Assert.assertNotNull(vector3D42);
        org.junit.Assert.assertNotNull(vector3D50);
        org.junit.Assert.assertNotNull(vector3D57);
        org.junit.Assert.assertNotNull(vector3D60);
        org.junit.Assert.assertNotNull(vector3D69);
        org.junit.Assert.assertNotNull(vector3D76);
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + (-0.1855270382668764d) + "'", double80 == (-0.1855270382668764d));
        org.junit.Assert.assertNotNull(rotation81);
        org.junit.Assert.assertNotNull(rotation82);
        org.junit.Assert.assertNotNull(wildcardClass83);
    }

    @Test
    public void test1087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1087");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(9.649660284921133d, 28.016837073341897d, 0.9949879346007117d, 0.016784652862817887d, true);
    }

    @Test
    public void test1088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1088");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.7177793011139257d, (double) 100, (-0.001227201364295339d), 0.9949879346007117d, false);
    }

    @Test
    public void test1089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1089");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation16 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, (double) 100L);
        double double17 = rotation16.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation18 = rotation16.revert();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation24 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (byte) 100, (double) 10L, (double) (short) 100, (double) 1L, false);
        double double25 = rotation24.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation26 = rotation18.applyInverseTo(rotation24);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = rotation24.revert();
        double double28 = rotation24.getQ3();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-0.0d) + "'", double17 == (-0.0d));
        org.junit.Assert.assertNotNull(rotation18);
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertNotNull(rotation26);
        org.junit.Assert.assertNotNull(rotation27);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 1.0d + "'", double28 == 1.0d);
    }

    @Test
    public void test1090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1090");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) 10, 0.0d, (double) (byte) 0, 10.0d, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation11 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (byte) 100, (double) 10L, (double) (short) 100, (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation17 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D18 = rotation17.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation24 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D25 = rotation24.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation26 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D18, vector3D25);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation28 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D18, (double) 100L);
        double double29 = rotation28.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation30 = rotation11.applyInverseTo(rotation28);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation31 = rotation5.applyInverseTo(rotation28);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation32 = rotation31.revert();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D33 = rotation32.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation39 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D40 = rotation39.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation46 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double47 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation39, rotation46);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation53 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D54 = rotation53.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation60 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D61 = rotation60.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation62 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D54, vector3D61);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation68 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation69 = rotation62.applyInverseTo(rotation68);
        double double70 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation46, rotation62);
        double double71 = rotation62.getQ3();
        double double72 = rotation62.getQ0();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation73 = rotation32.applyInverseTo(rotation62);
        double double74 = rotation73.getAngle();
        org.junit.Assert.assertNotNull(vector3D18);
        org.junit.Assert.assertNotNull(vector3D25);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + (-0.0d) + "'", double29 == (-0.0d));
        org.junit.Assert.assertNotNull(rotation30);
        org.junit.Assert.assertNotNull(rotation31);
        org.junit.Assert.assertNotNull(rotation32);
        org.junit.Assert.assertNotNull(vector3D33);
        org.junit.Assert.assertNotNull(vector3D40);
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertNotNull(vector3D54);
        org.junit.Assert.assertNotNull(vector3D61);
        org.junit.Assert.assertNotNull(rotation69);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 3.141592653589793d + "'", double70 == 3.141592653589793d);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 0.0d + "'", double71 == 0.0d);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 1.0d + "'", double72 == 1.0d);
        org.junit.Assert.assertNotNull(rotation73);
        org.junit.Assert.assertTrue(Double.isNaN(double74));
    }

    @Test
    public void test1091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1091");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (byte) 100, (double) 10L, (double) (short) 100, (double) 1L, false);
        double double6 = rotation5.getQ2();
        double double7 = rotation5.getQ1();
        java.lang.Class<?> wildcardClass8 = rotation5.getClass();
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 100.0d + "'", double6 == 100.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 10.0d + "'", double7 == 10.0d);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test1092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1092");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (byte) 100, (double) 10L, (double) (short) 100, (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation11 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D12 = rotation11.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation18 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D19 = rotation18.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D12, vector3D19);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation22 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D12, (double) 100L);
        double double23 = rotation22.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation24 = rotation5.applyInverseTo(rotation22);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation30 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D31 = rotation30.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation37 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D38 = rotation37.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation39 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D31, vector3D38);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation45 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation46 = rotation39.applyInverseTo(rotation45);
        double double47 = rotation39.getQ2();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation53 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D54 = rotation53.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation60 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D61 = rotation60.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation62 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D54, vector3D61);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation68 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D69 = rotation68.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation75 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D76 = rotation75.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation77 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D69, vector3D76);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation78 = rotation62.applyTo(rotation77);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation84 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) 10, 0.0d, (double) (byte) 0, 10.0d, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation85 = rotation62.applyTo(rotation84);
        double double86 = rotation84.getAngle();
        double double87 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation39, rotation84);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation88 = rotation24.applyInverseTo(rotation39);
        double double89 = rotation88.getQ1();
        double double90 = rotation88.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D91 = rotation88.getAxis();
        org.junit.Assert.assertNotNull(vector3D12);
        org.junit.Assert.assertNotNull(vector3D19);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + (-0.0d) + "'", double23 == (-0.0d));
        org.junit.Assert.assertNotNull(rotation24);
        org.junit.Assert.assertNotNull(vector3D31);
        org.junit.Assert.assertNotNull(vector3D38);
        org.junit.Assert.assertNotNull(rotation46);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d);
        org.junit.Assert.assertNotNull(vector3D54);
        org.junit.Assert.assertNotNull(vector3D61);
        org.junit.Assert.assertNotNull(vector3D69);
        org.junit.Assert.assertNotNull(vector3D76);
        org.junit.Assert.assertNotNull(rotation78);
        org.junit.Assert.assertNotNull(rotation85);
        org.junit.Assert.assertTrue(Double.isNaN(double86));
        org.junit.Assert.assertTrue(Double.isNaN(double87));
        org.junit.Assert.assertNotNull(rotation88);
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 28.016837073341897d + "'", double89 == 28.016837073341897d);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + (-15.732467415526763d) + "'", double90 == (-15.732467415526763d));
        org.junit.Assert.assertNotNull(vector3D91);
    }

    @Test
    public void test1093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1093");
        org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.geometry.euclidean.threed.Rotation rotation4 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(rotationOrder0, (-8.717516503499631d), 0.577207977069365d, 2.7755575615628914E-17d);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1094");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation20.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = rotation27.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation29 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D21, vector3D28);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D36 = rotation35.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation42 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D43 = rotation42.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation44 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D36, vector3D43);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation45 = rotation29.applyTo(rotation44);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation46 = rotation14.applyTo(rotation45);
        double[][] doubleArray47 = rotation46.getMatrix();
        double double48 = rotation46.getQ1();
        double[][] doubleArray49 = rotation46.getMatrix();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation51 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray49, (double) ' ');
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation53 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray49, (double) (byte) 10);
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(rotation45);
        org.junit.Assert.assertNotNull(rotation46);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray49);
    }

    @Test
    public void test1095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1095");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-0.1855270382668764d), (double) 10, (double) (short) -1, (double) 100.0f, false);
        double[][] doubleArray6 = rotation5.getMatrix();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation19 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D20 = rotation19.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation21 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D13, vector3D20);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation23 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D13, (double) 100L);
        double double24 = rotation23.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation25 = rotation23.revert();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation31 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (byte) 100, (double) 10L, (double) (short) 100, (double) 1L, false);
        double double32 = rotation31.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation33 = rotation25.applyInverseTo(rotation31);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation34 = rotation5.applyInverseTo(rotation33);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation40 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D41 = rotation40.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation47 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D48 = rotation47.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation49 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D41, vector3D48);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation55 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D56 = rotation55.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation62 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D63 = rotation62.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation64 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D56, vector3D63);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation65 = rotation49.applyTo(rotation64);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation71 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) 10, 0.0d, (double) (byte) 0, 10.0d, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation72 = rotation49.applyTo(rotation71);
        double double73 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation34, rotation49);
        double double74 = rotation34.getAngle();
        double double75 = rotation34.getAngle();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D20);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + (-0.0d) + "'", double24 == (-0.0d));
        org.junit.Assert.assertNotNull(rotation25);
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertNotNull(rotation33);
        org.junit.Assert.assertNotNull(rotation34);
        org.junit.Assert.assertNotNull(vector3D41);
        org.junit.Assert.assertNotNull(vector3D48);
        org.junit.Assert.assertNotNull(vector3D56);
        org.junit.Assert.assertNotNull(vector3D63);
        org.junit.Assert.assertNotNull(rotation65);
        org.junit.Assert.assertNotNull(rotation72);
        org.junit.Assert.assertTrue(Double.isNaN(double73));
        org.junit.Assert.assertTrue(Double.isNaN(double74));
        org.junit.Assert.assertTrue(Double.isNaN(double75));
    }

    @Test
    public void test1096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1096");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double13 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation5, rotation12);
        double double14 = rotation12.getAngle();
        double double15 = rotation12.getAngle();
        double double16 = rotation12.getQ0();
        double double17 = rotation12.getQ0();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation23 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D24 = rotation23.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation30 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D31 = rotation30.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation32 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D24, vector3D31);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation34 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D24, (double) 100L);
        double double35 = rotation34.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation36 = rotation34.revert();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation42 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (byte) 100, (double) 10L, (double) (short) 100, (double) 1L, false);
        double double43 = rotation42.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation44 = rotation36.applyInverseTo(rotation42);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D45 = rotation42.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D46 = rotation12.applyInverseTo(vector3D45);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation48 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D46, 3.1216925665368036d);
        double double49 = rotation48.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder50 = null;
        double[] doubleArray51 = rotation48.getAngles(rotationOrder50);
        java.lang.Class<?> wildcardClass52 = rotation48.getClass();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 3.141592653589793d + "'", double14 == 3.141592653589793d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 3.141592653589793d + "'", double15 == 3.141592653589793d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
        org.junit.Assert.assertNotNull(vector3D24);
        org.junit.Assert.assertNotNull(vector3D31);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + (-0.0d) + "'", double35 == (-0.0d));
        org.junit.Assert.assertNotNull(rotation36);
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertNotNull(rotation44);
        org.junit.Assert.assertNotNull(vector3D45);
        org.junit.Assert.assertNotNull(vector3D46);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 3.1216925665368036d + "'", double49 == 3.1216925665368036d);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[-0.6778429114089792, 3.1137218078453173, -0.8732967261264211]");
        org.junit.Assert.assertNotNull(wildcardClass52);
    }

    @Test
    public void test1097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1097");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (byte) 100, (double) 10L, (double) (short) 100, (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation11 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D12 = rotation11.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation18 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D19 = rotation18.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D12, vector3D19);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation22 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D12, (double) 100L);
        double double23 = rotation22.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation24 = rotation5.applyInverseTo(rotation22);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation30 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D31 = rotation30.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation37 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D38 = rotation37.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation39 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D31, vector3D38);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation45 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation46 = rotation39.applyInverseTo(rotation45);
        double double47 = rotation39.getQ2();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation53 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D54 = rotation53.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation60 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D61 = rotation60.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation62 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D54, vector3D61);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation68 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D69 = rotation68.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation75 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D76 = rotation75.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation77 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D69, vector3D76);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation78 = rotation62.applyTo(rotation77);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation84 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) 10, 0.0d, (double) (byte) 0, 10.0d, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation85 = rotation62.applyTo(rotation84);
        double double86 = rotation84.getAngle();
        double double87 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation39, rotation84);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation88 = rotation24.applyInverseTo(rotation39);
        double double89 = rotation88.getQ1();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D90 = rotation88.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D91 = rotation88.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D92 = rotation88.getAxis();
        org.junit.Assert.assertNotNull(vector3D12);
        org.junit.Assert.assertNotNull(vector3D19);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + (-0.0d) + "'", double23 == (-0.0d));
        org.junit.Assert.assertNotNull(rotation24);
        org.junit.Assert.assertNotNull(vector3D31);
        org.junit.Assert.assertNotNull(vector3D38);
        org.junit.Assert.assertNotNull(rotation46);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d);
        org.junit.Assert.assertNotNull(vector3D54);
        org.junit.Assert.assertNotNull(vector3D61);
        org.junit.Assert.assertNotNull(vector3D69);
        org.junit.Assert.assertNotNull(vector3D76);
        org.junit.Assert.assertNotNull(rotation78);
        org.junit.Assert.assertNotNull(rotation85);
        org.junit.Assert.assertTrue(Double.isNaN(double86));
        org.junit.Assert.assertTrue(Double.isNaN(double87));
        org.junit.Assert.assertNotNull(rotation88);
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 28.016837073341897d + "'", double89 == 28.016837073341897d);
        org.junit.Assert.assertNotNull(vector3D90);
        org.junit.Assert.assertNotNull(vector3D91);
        org.junit.Assert.assertNotNull(vector3D92);
    }

    @Test
    public void test1098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1098");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        double[][] doubleArray15 = rotation14.getMatrix();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation17 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray15, 3.7105407653375275d);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation23 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D24 = rotation23.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation30 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D31 = rotation30.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation32 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D24, vector3D31);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation34 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D24, (double) 100L);
        double double35 = rotation34.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation36 = rotation34.revert();
        double double37 = rotation36.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D38 = rotation36.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D39 = rotation17.applyInverseTo(vector3D38);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation41 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D39, 0.003388584257121107d);
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(vector3D24);
        org.junit.Assert.assertNotNull(vector3D31);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + (-0.0d) + "'", double35 == (-0.0d));
        org.junit.Assert.assertNotNull(rotation36);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + (-0.0d) + "'", double37 == (-0.0d));
        org.junit.Assert.assertNotNull(vector3D38);
        org.junit.Assert.assertNotNull(vector3D39);
    }

    @Test
    public void test1099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1099");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double13 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation5, rotation12);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation19 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D20 = rotation19.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation26 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double27 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation19, rotation26);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation28 = rotation12.applyInverseTo(rotation19);
        double double29 = rotation12.getQ3();
        double double30 = rotation12.getQ3();
        double[][] doubleArray31 = rotation12.getMatrix();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.geometry.euclidean.threed.Rotation rotation33 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray31, 3.082566122054968d);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.geometry.euclidean.threed.NotARotationMatrixException; message: unable to orthogonalize matrix in 10 iterations");
        } catch (org.apache.commons.math.geometry.euclidean.threed.NotARotationMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertNotNull(vector3D20);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertNotNull(rotation28);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 1.0d + "'", double29 == 1.0d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 1.0d + "'", double30 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray31);
    }

    @Test
    public void test1100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1100");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(3.1216925665368036d, (-8.717516503499631d), (-0.0d), 0.9949879346007117d, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation11 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D12 = rotation11.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation18 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double19 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation11, rotation18);
        double double20 = rotation18.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation26 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D27 = rotation26.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation33 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D34 = rotation33.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D27, vector3D34);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation41 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D42 = rotation41.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation48 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D49 = rotation48.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation50 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D42, vector3D49);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation51 = rotation35.applyTo(rotation50);
        double double52 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation18, rotation51);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation58 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D59 = rotation58.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation65 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double66 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation58, rotation65);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation72 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D73 = rotation72.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation79 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double80 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation72, rotation79);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation81 = rotation65.applyInverseTo(rotation72);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation82 = rotation18.applyInverseTo(rotation72);
        double double83 = rotation72.getQ1();
        double double84 = rotation72.getQ1();
        double double85 = rotation72.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation86 = rotation5.applyInverseTo(rotation72);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D87 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder88 = null;
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray89 = rotation5.getAngles(rotationOrder88);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.geometry.euclidean.threed.CardanEulerSingularityException; message: Euler angles singularity");
        } catch (org.apache.commons.math.geometry.euclidean.threed.CardanEulerSingularityException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(vector3D12);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 3.141592653589793d + "'", double20 == 3.141592653589793d);
        org.junit.Assert.assertNotNull(vector3D27);
        org.junit.Assert.assertNotNull(vector3D34);
        org.junit.Assert.assertNotNull(vector3D42);
        org.junit.Assert.assertNotNull(vector3D49);
        org.junit.Assert.assertNotNull(rotation51);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 3.141592653589793d + "'", double52 == 3.141592653589793d);
        org.junit.Assert.assertNotNull(vector3D59);
        org.junit.Assert.assertTrue(Double.isNaN(double66));
        org.junit.Assert.assertNotNull(vector3D73);
        org.junit.Assert.assertTrue(Double.isNaN(double80));
        org.junit.Assert.assertNotNull(rotation81);
        org.junit.Assert.assertNotNull(rotation82);
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 0.01922366120271981d + "'", double83 == 0.01922366120271981d);
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 0.01922366120271981d + "'", double84 == 0.01922366120271981d);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 0.054379424809409445d + "'", double85 == 0.054379424809409445d);
        org.junit.Assert.assertNotNull(rotation86);
        org.junit.Assert.assertNotNull(vector3D87);
    }

    @Test
    public void test1101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1101");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation20.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = rotation27.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation34 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D35 = rotation34.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation36 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D28, vector3D35);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation42 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D43 = rotation42.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation49 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D50 = rotation49.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation51 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D43, vector3D50);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation52 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D13, vector3D21, vector3D35, vector3D50);
        double double53 = rotation52.getQ1();
        double double54 = rotation52.getQ2();
        double[][] doubleArray55 = rotation52.getMatrix();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation61 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D62 = rotation61.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation68 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double69 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation61, rotation68);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation75 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D76 = rotation75.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation82 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double83 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation75, rotation82);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation84 = rotation68.applyInverseTo(rotation75);
        double double85 = rotation68.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation86 = rotation68.revert();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation87 = rotation52.applyTo(rotation86);
        org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder88 = null;
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray89 = rotation86.getAngles(rotationOrder88);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.geometry.euclidean.threed.CardanEulerSingularityException; message: Euler angles singularity");
        } catch (org.apache.commons.math.geometry.euclidean.threed.CardanEulerSingularityException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D35);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(vector3D50);
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(vector3D62);
        org.junit.Assert.assertTrue(Double.isNaN(double69));
        org.junit.Assert.assertNotNull(vector3D76);
        org.junit.Assert.assertTrue(Double.isNaN(double83));
        org.junit.Assert.assertNotNull(rotation84);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 1.0d + "'", double85 == 1.0d);
        org.junit.Assert.assertNotNull(rotation86);
        org.junit.Assert.assertNotNull(rotation87);
    }

    @Test
    public void test1102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1102");
        org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.geometry.euclidean.threed.Rotation rotation4 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(rotationOrder0, (-0.6780618572586967d), 0.5309649148733836d, 0.1610382605737718d);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1103");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (short) -1, 0.7881701093115122d, 0.0d, (-0.0d), false);
        double double6 = rotation5.getQ3();
        double[][] doubleArray7 = rotation5.getMatrix();
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + (-0.0d) + "'", double6 == (-0.0d));
        org.junit.Assert.assertNotNull(doubleArray7);
    }

    @Test
    public void test1104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1104");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) 10.0f, (double) (byte) 10, 0.7881701093115122d, (double) (short) 10, false);
        double double6 = rotation5.getQ3();
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
    }

    @Test
    public void test1105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1105");
        double[][] doubleArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.geometry.euclidean.threed.Rotation rotation2 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray0, 3.1216925665368036d);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1106");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) 10, 0.0d, (double) (byte) 0, 10.0d, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation11 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (byte) 100, (double) 10L, (double) (short) 100, (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation17 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D18 = rotation17.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation24 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D25 = rotation24.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation26 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D18, vector3D25);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation28 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D18, (double) 100L);
        double double29 = rotation28.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation30 = rotation11.applyInverseTo(rotation28);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation31 = rotation5.applyInverseTo(rotation28);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation32 = rotation31.revert();
        double[][] doubleArray33 = rotation31.getMatrix();
        double double34 = rotation31.getQ0();
        org.junit.Assert.assertNotNull(vector3D18);
        org.junit.Assert.assertNotNull(vector3D25);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + (-0.0d) + "'", double29 == (-0.0d));
        org.junit.Assert.assertNotNull(rotation30);
        org.junit.Assert.assertNotNull(rotation31);
        org.junit.Assert.assertNotNull(rotation32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + (-9.649660284921133d) + "'", double34 == (-9.649660284921133d));
    }

    @Test
    public void test1107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1107");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '#', 0.9996303825414301d, (-5.7519881927834584E-5d), (-0.001227201364295339d), true);
        double[][] doubleArray6 = rotation5.getMatrix();
        org.junit.Assert.assertNotNull(doubleArray6);
    }

    @Test
    public void test1108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1108");
        org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.geometry.euclidean.threed.Rotation rotation4 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(rotationOrder0, (double) 10.0f, 32.0d, (-116.90457705856772d));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1109");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation20.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = rotation27.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation34 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D35 = rotation34.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation36 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D28, vector3D35);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation42 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D43 = rotation42.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation49 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D50 = rotation49.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation51 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D43, vector3D50);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation52 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D13, vector3D21, vector3D35, vector3D50);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation54 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D13, (-0.0d));
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation56 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D13, 0.9456205751905904d);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation58 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D13, 0.20120377604668616d);
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D35);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(vector3D50);
    }

    @Test
    public void test1110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1110");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (byte) 100, (double) 10L, (double) (short) 100, (double) 1L, false);
        double double6 = rotation5.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation19 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D20 = rotation19.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation21 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D13, vector3D20);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation28 = rotation21.applyInverseTo(rotation27);
        double double29 = rotation27.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D36 = rotation35.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation42 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D43 = rotation42.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation44 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D36, vector3D43);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation50 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D51 = rotation50.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation57 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D58 = rotation57.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation59 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D51, vector3D58);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation65 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D66 = rotation65.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation72 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D73 = rotation72.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation74 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D66, vector3D73);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation75 = rotation59.applyTo(rotation74);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation76 = rotation44.applyTo(rotation75);
        double[][] doubleArray77 = rotation76.getMatrix();
        double double78 = rotation76.getQ1();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D79 = rotation76.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation81 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D79, 10.0d);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D82 = rotation27.applyInverseTo(vector3D79);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D83 = rotation5.applyTo(vector3D82);
        double double84 = rotation5.getAngle();
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D20);
        org.junit.Assert.assertNotNull(rotation28);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 3.141592653589793d + "'", double29 == 3.141592653589793d);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(vector3D51);
        org.junit.Assert.assertNotNull(vector3D58);
        org.junit.Assert.assertNotNull(vector3D66);
        org.junit.Assert.assertNotNull(vector3D73);
        org.junit.Assert.assertNotNull(rotation75);
        org.junit.Assert.assertNotNull(rotation76);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 0.0d + "'", double78 == 0.0d);
        org.junit.Assert.assertNotNull(vector3D79);
        org.junit.Assert.assertNotNull(vector3D82);
        org.junit.Assert.assertNotNull(vector3D83);
        org.junit.Assert.assertTrue(Double.isNaN(double84));
    }

    @Test
    public void test1111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1111");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation20.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = rotation27.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation34 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D35 = rotation34.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation36 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D28, vector3D35);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation42 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D43 = rotation42.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation49 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D50 = rotation49.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation51 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D43, vector3D50);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation52 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D13, vector3D21, vector3D35, vector3D50);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation54 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D50, 1.0d);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation56 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D50, (double) 10);
        org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder57 = null;
        double[] doubleArray58 = rotation56.getAngles(rotationOrder57);
        double double59 = rotation56.getQ0();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation60 = rotation56.revert();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D35);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(vector3D50);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[-0.7853981633974483, 2.566370614359173, 0.7853981633974483]");
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 0.28366218546322625d + "'", double59 == 0.28366218546322625d);
        org.junit.Assert.assertNotNull(rotation60);
    }

    @Test
    public void test1112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1112");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation16 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, (double) 100L);
        double double17 = rotation16.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation18 = rotation16.revert();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation24 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D25 = rotation24.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation31 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D32 = rotation31.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation33 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D25, vector3D32);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D25, (double) 1L);
        double double36 = rotation35.getQ2();
        org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder37 = null;
        double[] doubleArray38 = rotation35.getAngles(rotationOrder37);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation44 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D45 = rotation44.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation51 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D52 = rotation51.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation53 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D45, vector3D52);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation59 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D60 = rotation59.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation66 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D67 = rotation66.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation73 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D74 = rotation73.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation75 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D67, vector3D74);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation81 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D82 = rotation81.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation88 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D89 = rotation88.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation90 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D82, vector3D89);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation91 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D52, vector3D60, vector3D74, vector3D89);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation93 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D89, 1.0d);
        org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder94 = null;
        double[] doubleArray95 = rotation93.getAngles(rotationOrder94);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation96 = rotation35.applyInverseTo(rotation93);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation97 = rotation18.applyTo(rotation96);
        org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder98 = null;
        double[] doubleArray99 = rotation97.getAngles(rotationOrder98);
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-0.0d) + "'", double17 == (-0.0d));
        org.junit.Assert.assertNotNull(rotation18);
        org.junit.Assert.assertNotNull(vector3D25);
        org.junit.Assert.assertNotNull(vector3D32);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.33900504942104487d + "'", double36 == 0.33900504942104487d);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[2.356194490192345, 0.9999999999999999, -2.356194490192345]");
        org.junit.Assert.assertNotNull(vector3D45);
        org.junit.Assert.assertNotNull(vector3D52);
        org.junit.Assert.assertNotNull(vector3D60);
        org.junit.Assert.assertNotNull(vector3D67);
        org.junit.Assert.assertNotNull(vector3D74);
        org.junit.Assert.assertNotNull(vector3D82);
        org.junit.Assert.assertNotNull(vector3D89);
        org.junit.Assert.assertNotNull(doubleArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray95), "[2.356194490192345, 0.9999999999999999, -2.356194490192345]");
        org.junit.Assert.assertNotNull(rotation96);
        org.junit.Assert.assertNotNull(rotation97);
        org.junit.Assert.assertNotNull(doubleArray99);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray99), "[2.356194490192345, 0.530964914873383, -2.356194490192345]");
    }

    @Test
    public void test1113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1113");
        org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.geometry.euclidean.threed.Rotation rotation4 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(rotationOrder0, (-1.01885404374415d), (double) (byte) 1, 0.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1114");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(10.0d, 2.566370614359174d, (-0.5d), (double) ' ', false);
    }

    @Test
    public void test1115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1115");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double13 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation5, rotation12);
        double double14 = rotation12.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation20.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double28 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation20, rotation27);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation34 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D35 = rotation34.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation41 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double42 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation34, rotation41);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation43 = rotation27.applyInverseTo(rotation34);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation44 = rotation12.applyTo(rotation34);
        org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder45 = null;
        double[] doubleArray46 = rotation44.getAngles(rotationOrder45);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation52 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D53 = rotation52.getAxis();
        double double54 = rotation52.getQ0();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation55 = rotation44.applyInverseTo(rotation52);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation61 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) 100, 0.33900504942104487d, 0.09949879346007118d, true);
        double double62 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation52, rotation61);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation68 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (short) -1, (double) 10.0f, (double) (byte) 100, (-0.005755946541407356d), true);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation69 = rotation52.applyTo(rotation68);
        double double70 = rotation52.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D71 = rotation52.getAxis();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 3.141592653589793d + "'", double14 == 3.141592653589793d);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertNotNull(vector3D35);
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertNotNull(rotation43);
        org.junit.Assert.assertNotNull(rotation44);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[-0.31746367442260337, 1.2637009275001716, 3.026886383418824]");
        org.junit.Assert.assertNotNull(vector3D53);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.9996303825414301d + "'", double54 == 0.9996303825414301d);
        org.junit.Assert.assertNotNull(rotation55);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 3.1030128410395363d + "'", double62 == 3.1030128410395363d);
        org.junit.Assert.assertNotNull(rotation69);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 0.0d + "'", double70 == 0.0d);
        org.junit.Assert.assertNotNull(vector3D71);
    }

    @Test
    public void test1116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1116");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (byte) 100, (double) 10L, (double) (short) 100, (double) 1L, false);
        double double6 = rotation5.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation19 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D20 = rotation19.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation21 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D13, vector3D20);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation28 = rotation21.applyInverseTo(rotation27);
        double double29 = rotation27.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D36 = rotation35.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation42 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D43 = rotation42.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation44 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D36, vector3D43);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation50 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D51 = rotation50.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation57 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D58 = rotation57.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation59 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D51, vector3D58);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation65 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D66 = rotation65.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation72 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D73 = rotation72.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation74 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D66, vector3D73);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation75 = rotation59.applyTo(rotation74);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation76 = rotation44.applyTo(rotation75);
        double[][] doubleArray77 = rotation76.getMatrix();
        double double78 = rotation76.getQ1();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D79 = rotation76.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation81 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D79, 10.0d);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D82 = rotation27.applyInverseTo(vector3D79);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D83 = rotation5.applyTo(vector3D82);
        double double84 = rotation5.getQ3();
        double double85 = rotation5.getQ1();
        org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder86 = null;
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray87 = rotation5.getAngles(rotationOrder86);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.geometry.euclidean.threed.CardanEulerSingularityException; message: Euler angles singularity");
        } catch (org.apache.commons.math.geometry.euclidean.threed.CardanEulerSingularityException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D20);
        org.junit.Assert.assertNotNull(rotation28);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 3.141592653589793d + "'", double29 == 3.141592653589793d);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(vector3D51);
        org.junit.Assert.assertNotNull(vector3D58);
        org.junit.Assert.assertNotNull(vector3D66);
        org.junit.Assert.assertNotNull(vector3D73);
        org.junit.Assert.assertNotNull(rotation75);
        org.junit.Assert.assertNotNull(rotation76);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 0.0d + "'", double78 == 0.0d);
        org.junit.Assert.assertNotNull(vector3D79);
        org.junit.Assert.assertNotNull(vector3D82);
        org.junit.Assert.assertNotNull(vector3D83);
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 1.0d + "'", double84 == 1.0d);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 10.0d + "'", double85 == 10.0d);
    }

    @Test
    public void test1117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1117");
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.geometry.euclidean.threed.Rotation rotation2 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D0, 0.004748329030341929d);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1118");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation20.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = rotation27.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation29 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D21, vector3D28);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D36 = rotation35.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation42 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D43 = rotation42.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation44 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D36, vector3D43);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation45 = rotation29.applyTo(rotation44);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation46 = rotation14.applyTo(rotation45);
        double[][] doubleArray47 = rotation46.getMatrix();
        double double48 = rotation46.getQ1();
        double[][] doubleArray49 = rotation46.getMatrix();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation51 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray49, (double) 100L);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation53 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray49, 0.7881701093115122d);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation55 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray49, 0.9456205751905904d);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation57 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray49, (double) (byte) 10);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation59 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray49, 0.7177793011139257d);
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(rotation45);
        org.junit.Assert.assertNotNull(rotation46);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray49);
    }

    @Test
    public void test1119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1119");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double13 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation5, rotation12);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation19 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D20 = rotation19.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation26 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double27 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation19, rotation26);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation28 = rotation12.applyInverseTo(rotation19);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D29 = rotation28.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        double double36 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation28, rotation35);
        double[][] doubleArray37 = rotation35.getMatrix();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation39 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray37, (double) '#');
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertNotNull(vector3D20);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertNotNull(rotation28);
        org.junit.Assert.assertNotNull(vector3D29);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 3.141592653589793d + "'", double36 == 3.141592653589793d);
        org.junit.Assert.assertNotNull(doubleArray37);
    }

    @Test
    public void test1120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1120");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) 10, 0.0d, (double) (byte) 0, 10.0d, false);
        double double6 = rotation5.getQ1();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation19 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D20 = rotation19.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation21 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D13, vector3D20);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = rotation27.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation34 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D35 = rotation34.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation41 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D42 = rotation41.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation43 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D35, vector3D42);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation49 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D50 = rotation49.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation56 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D57 = rotation56.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation58 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D50, vector3D57);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation59 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D20, vector3D28, vector3D42, vector3D57);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D60 = rotation5.applyTo(vector3D42);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation62 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D42, 0.7881701093115122d);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation68 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D69 = rotation68.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation75 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D76 = rotation75.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation77 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D69, vector3D76);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation79 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D69, (double) 100L);
        double double80 = rotation79.getQ1();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation81 = rotation62.applyTo(rotation79);
        double[][] doubleArray82 = rotation81.getMatrix();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation84 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray82, (double) 0.0f);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation86 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray82, 0.0d);
        double double87 = rotation86.getQ0();
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D20);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D35);
        org.junit.Assert.assertNotNull(vector3D42);
        org.junit.Assert.assertNotNull(vector3D50);
        org.junit.Assert.assertNotNull(vector3D57);
        org.junit.Assert.assertNotNull(vector3D60);
        org.junit.Assert.assertNotNull(vector3D69);
        org.junit.Assert.assertNotNull(vector3D76);
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + (-0.1855270382668764d) + "'", double80 == (-0.1855270382668764d));
        org.junit.Assert.assertNotNull(rotation81);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 0.9917420766388146d + "'", double87 == 0.9917420766388146d);
    }

    @Test
    public void test1121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1121");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation20.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = rotation27.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation29 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D21, vector3D28);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D36 = rotation35.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation42 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D43 = rotation42.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation44 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D36, vector3D43);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation45 = rotation29.applyTo(rotation44);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation46 = rotation14.applyTo(rotation45);
        double[][] doubleArray47 = rotation46.getMatrix();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation53 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-1.0d), (double) (byte) 10, (double) (byte) 100, (double) 0L, true);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation59 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D60 = rotation59.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D61 = rotation53.applyInverseTo(vector3D60);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation67 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D68 = rotation67.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation74 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D75 = rotation74.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation76 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D68, vector3D75);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation78 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D68, (double) 1L);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation79 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D61, vector3D68);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D80 = rotation46.applyTo(vector3D61);
        double double81 = rotation46.getQ1();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(rotation45);
        org.junit.Assert.assertNotNull(rotation46);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(vector3D60);
        org.junit.Assert.assertNotNull(vector3D61);
        org.junit.Assert.assertNotNull(vector3D68);
        org.junit.Assert.assertNotNull(vector3D75);
        org.junit.Assert.assertNotNull(vector3D80);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 0.0d + "'", double81 == 0.0d);
    }

    @Test
    public void test1122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1122");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation20.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = rotation27.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation29 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D21, vector3D28);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D36 = rotation35.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation42 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D43 = rotation42.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation44 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D36, vector3D43);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation45 = rotation29.applyTo(rotation44);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation46 = rotation14.applyTo(rotation45);
        double[][] doubleArray47 = rotation46.getMatrix();
        double double48 = rotation46.getQ1();
        double[][] doubleArray49 = rotation46.getMatrix();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation51 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray49, (double) 100L);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation53 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray49, (double) 0);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation55 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray49, 0.9949879346007117d);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D56 = rotation55.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder57 = null;
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray58 = rotation55.getAngles(rotationOrder57);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.geometry.euclidean.threed.CardanEulerSingularityException; message: Euler angles singularity");
        } catch (org.apache.commons.math.geometry.euclidean.threed.CardanEulerSingularityException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(rotation45);
        org.junit.Assert.assertNotNull(rotation46);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(vector3D56);
    }

    @Test
    public void test1123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1123");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation20.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = rotation27.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation34 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D35 = rotation34.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation36 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D28, vector3D35);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation42 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D43 = rotation42.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation49 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D50 = rotation49.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation51 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D43, vector3D50);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation52 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D13, vector3D21, vector3D35, vector3D50);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation54 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D21, (double) 1);
        double double55 = rotation54.getQ1();
        org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder56 = null;
        double[] doubleArray57 = rotation54.getAngles(rotationOrder56);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation63 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) 0, 100.0d, (double) (short) 100, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation69 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-1.0d), (double) (byte) 10, (double) (byte) 100, (double) 0L, true);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation75 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D76 = rotation75.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation82 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D83 = rotation82.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation84 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D76, vector3D83);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D85 = rotation69.applyTo(vector3D76);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation87 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D76, 0.9996303825414301d);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D88 = rotation63.applyInverseTo(vector3D76);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D89 = rotation54.applyTo(vector3D88);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation90 = rotation54.revert();
        java.lang.Class<?> wildcardClass91 = rotation54.getClass();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D35);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(vector3D50);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.33900504942104487d + "'", double55 == 0.33900504942104487d);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[2.356194490192345, 0.9999999999999999, -2.356194490192345]");
        org.junit.Assert.assertNotNull(vector3D76);
        org.junit.Assert.assertNotNull(vector3D83);
        org.junit.Assert.assertNotNull(vector3D85);
        org.junit.Assert.assertNotNull(vector3D88);
        org.junit.Assert.assertNotNull(vector3D89);
        org.junit.Assert.assertNotNull(rotation90);
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test1124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1124");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation20.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = rotation27.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation34 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D35 = rotation34.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation36 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D28, vector3D35);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation42 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D43 = rotation42.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation49 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D50 = rotation49.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation51 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D43, vector3D50);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation52 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D13, vector3D21, vector3D35, vector3D50);
        double double53 = rotation52.getQ1();
        double double54 = rotation52.getQ2();
        double[][] doubleArray55 = rotation52.getMatrix();
        org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder56 = null;
        double[] doubleArray57 = rotation52.getAngles(rotationOrder56);
        double double58 = rotation52.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation64 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) 10, 0.0d, (double) (byte) 0, 10.0d, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation70 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (byte) 100, (double) 10L, (double) (short) 100, (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation76 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D77 = rotation76.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation83 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D84 = rotation83.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation85 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D77, vector3D84);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation87 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D77, (double) 100L);
        double double88 = rotation87.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation89 = rotation70.applyInverseTo(rotation87);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation90 = rotation64.applyInverseTo(rotation87);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation91 = rotation90.revert();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation92 = rotation52.applyInverseTo(rotation91);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D93 = rotation92.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation95 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D93, (-0.8775825618903728d));
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D35);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(vector3D50);
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[NaN, NaN, NaN]");
        org.junit.Assert.assertTrue(Double.isNaN(double58));
        org.junit.Assert.assertNotNull(vector3D77);
        org.junit.Assert.assertNotNull(vector3D84);
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + (-0.0d) + "'", double88 == (-0.0d));
        org.junit.Assert.assertNotNull(rotation89);
        org.junit.Assert.assertNotNull(rotation90);
        org.junit.Assert.assertNotNull(rotation91);
        org.junit.Assert.assertNotNull(rotation92);
        org.junit.Assert.assertNotNull(vector3D93);
    }

    @Test
    public void test1125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1125");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation16 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, (double) 100L);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation22 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-1.0d), (double) (byte) 10, (double) (byte) 100, (double) 0L, true);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation28 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D29 = rotation28.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D36 = rotation35.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation37 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D29, vector3D36);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D38 = rotation22.applyTo(vector3D29);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation44 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D45 = rotation44.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation51 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D52 = rotation51.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation58 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D59 = rotation58.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation60 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D52, vector3D59);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation62 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D52, (double) 100L);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation63 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D45, vector3D52);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation69 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D70 = rotation69.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation71 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D38, vector3D52, vector3D70);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation73 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, (double) (short) -1);
        java.lang.Class<?> wildcardClass74 = rotation73.getClass();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D29);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D38);
        org.junit.Assert.assertNotNull(vector3D45);
        org.junit.Assert.assertNotNull(vector3D52);
        org.junit.Assert.assertNotNull(vector3D59);
        org.junit.Assert.assertNotNull(vector3D70);
        org.junit.Assert.assertNotNull(wildcardClass74);
    }

    @Test
    public void test1126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1126");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double13 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation5, rotation12);
        double double14 = rotation12.getAngle();
        double double15 = rotation12.getAngle();
        double double16 = rotation12.getQ0();
        double double17 = rotation12.getQ0();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation23 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) 0, (double) ' ', (double) (byte) 100, 17.66239947251099d, true);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation24 = rotation12.applyInverseTo(rotation23);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D25 = rotation24.getAxis();
        double double26 = rotation24.getAngle();
        java.lang.Class<?> wildcardClass27 = rotation24.getClass();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 3.141592653589793d + "'", double14 == 3.141592653589793d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 3.141592653589793d + "'", double15 == 3.141592653589793d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
        org.junit.Assert.assertNotNull(rotation24);
        org.junit.Assert.assertNotNull(vector3D25);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertNotNull(wildcardClass27);
    }

    @Test
    public void test1127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1127");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-0.1855270382668764d), (double) 1, Double.NaN, (double) (short) 100, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation11 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D12 = rotation11.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation18 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D19 = rotation18.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D12, vector3D19);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation26 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D27 = rotation26.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation33 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D34 = rotation33.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D27, vector3D34);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation41 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D42 = rotation41.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation48 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D49 = rotation48.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation50 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D42, vector3D49);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation51 = rotation35.applyTo(rotation50);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation52 = rotation20.applyTo(rotation51);
        double[][] doubleArray53 = rotation52.getMatrix();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation55 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray53, (double) 10);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation57 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray53, (double) (byte) 100);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation59 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray53, 0.0d);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation60 = rotation5.applyInverseTo(rotation59);
        double double61 = rotation5.getQ0();
        double double62 = rotation5.getQ0();
        org.junit.Assert.assertNotNull(vector3D12);
        org.junit.Assert.assertNotNull(vector3D19);
        org.junit.Assert.assertNotNull(vector3D27);
        org.junit.Assert.assertNotNull(vector3D34);
        org.junit.Assert.assertNotNull(vector3D42);
        org.junit.Assert.assertNotNull(vector3D49);
        org.junit.Assert.assertNotNull(rotation51);
        org.junit.Assert.assertNotNull(rotation52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(rotation60);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + (-0.1855270382668764d) + "'", double61 == (-0.1855270382668764d));
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + (-0.1855270382668764d) + "'", double62 == (-0.1855270382668764d));
    }

    @Test
    public void test1128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1128");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (-1), 3.1390038567388605d, (double) (byte) -1, 0.9524892191720237d, false);
    }

    @Test
    public void test1129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1129");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation16 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, (double) 100L);
        double double17 = rotation16.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation18 = rotation16.revert();
        org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder19 = null;
        double[] doubleArray20 = rotation16.getAngles(rotationOrder19);
        double double21 = rotation16.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) 10, 0.0d, (double) (byte) 0, 10.0d, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation33 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (byte) 100, (double) 10L, (double) (short) 100, (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation39 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D40 = rotation39.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation46 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D47 = rotation46.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation48 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D40, vector3D47);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation50 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D40, (double) 100L);
        double double51 = rotation50.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation52 = rotation33.applyInverseTo(rotation50);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation53 = rotation27.applyInverseTo(rotation50);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation54 = rotation53.revert();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation55 = rotation54.revert();
        double double56 = rotation54.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D57 = rotation54.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation58 = rotation16.applyTo(rotation54);
        double double59 = rotation16.getQ1();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-0.0d) + "'", double17 == (-0.0d));
        org.junit.Assert.assertNotNull(rotation18);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-0.7853981633974483, 0.530964914873383, 0.7853981633974483]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.5309649148733836d + "'", double21 == 0.5309649148733836d);
        org.junit.Assert.assertNotNull(vector3D40);
        org.junit.Assert.assertNotNull(vector3D47);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + (-0.0d) + "'", double51 == (-0.0d));
        org.junit.Assert.assertNotNull(rotation52);
        org.junit.Assert.assertNotNull(rotation53);
        org.junit.Assert.assertNotNull(rotation54);
        org.junit.Assert.assertNotNull(rotation55);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 9.649660284921133d + "'", double56 == 9.649660284921133d);
        org.junit.Assert.assertNotNull(vector3D57);
        org.junit.Assert.assertNotNull(rotation58);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + (-0.1855270382668764d) + "'", double59 == (-0.1855270382668764d));
    }

    @Test
    public void test1130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1130");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation16 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, (double) 100L);
        double double17 = rotation16.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation18 = rotation16.revert();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation24 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (byte) 100, (double) 10L, (double) (short) 100, (double) 1L, false);
        double double25 = rotation24.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation26 = rotation18.applyInverseTo(rotation24);
        double double27 = rotation18.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation28 = rotation18.revert();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-0.0d) + "'", double17 == (-0.0d));
        org.junit.Assert.assertNotNull(rotation18);
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertNotNull(rotation26);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.5309649148733836d + "'", double27 == 0.5309649148733836d);
        org.junit.Assert.assertNotNull(rotation28);
    }

    @Test
    public void test1131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1131");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation20.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = rotation27.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation29 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D21, vector3D28);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D36 = rotation35.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation42 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D43 = rotation42.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation44 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D36, vector3D43);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation45 = rotation29.applyTo(rotation44);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation46 = rotation14.applyTo(rotation45);
        double[][] doubleArray47 = rotation46.getMatrix();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation49 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray47, (double) '4');
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation51 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray47, 0.0d);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D52 = rotation51.getAxis();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(rotation45);
        org.junit.Assert.assertNotNull(rotation46);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(vector3D52);
    }

    @Test
    public void test1132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1132");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation20.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = rotation27.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation29 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D21, vector3D28);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D36 = rotation35.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation42 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D43 = rotation42.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation44 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D36, vector3D43);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation45 = rotation29.applyTo(rotation44);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation46 = rotation14.applyTo(rotation45);
        double[][] doubleArray47 = rotation46.getMatrix();
        double double48 = rotation46.getQ1();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation49 = rotation46.revert();
        double double50 = rotation49.getQ2();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation51 = rotation49.revert();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D52 = rotation49.getAxis();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(rotation45);
        org.junit.Assert.assertNotNull(rotation46);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d);
        org.junit.Assert.assertNotNull(rotation49);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.0d + "'", double50 == 0.0d);
        org.junit.Assert.assertNotNull(rotation51);
        org.junit.Assert.assertNotNull(vector3D52);
    }

    @Test
    public void test1133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1133");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double13 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation5, rotation12);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation19 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D20 = rotation19.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation26 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D27 = rotation26.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation28 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D20, vector3D27);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation34 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = rotation28.applyInverseTo(rotation34);
        double double36 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation12, rotation28);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D37 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation43 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D44 = rotation43.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation50 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double51 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation43, rotation50);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation57 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D58 = rotation57.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation64 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double65 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation57, rotation64);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation66 = rotation50.applyInverseTo(rotation57);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation72 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D73 = rotation72.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation79 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D80 = rotation79.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation81 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D73, vector3D80);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation83 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D73, (double) 1L);
        double double84 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation57, rotation83);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation85 = rotation12.applyTo(rotation57);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation86 = rotation12.revert();
        double double87 = rotation86.getQ2();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertNotNull(vector3D20);
        org.junit.Assert.assertNotNull(vector3D27);
        org.junit.Assert.assertNotNull(rotation35);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 3.141592653589793d + "'", double36 == 3.141592653589793d);
        org.junit.Assert.assertNotNull(vector3D37);
        org.junit.Assert.assertNotNull(vector3D44);
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertNotNull(vector3D58);
        org.junit.Assert.assertTrue(Double.isNaN(double65));
        org.junit.Assert.assertNotNull(rotation66);
        org.junit.Assert.assertNotNull(vector3D73);
        org.junit.Assert.assertNotNull(vector3D80);
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 0.9456205751905904d + "'", double84 == 0.9456205751905904d);
        org.junit.Assert.assertNotNull(rotation85);
        org.junit.Assert.assertNotNull(rotation86);
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + (-1.0d) + "'", double87 == (-1.0d));
    }

    @Test
    public void test1134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1134");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (short) -1, 0.7881701093115122d, 0.0d, (-0.0d), false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation11 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (short) 100, 0.0d, 0.33900504942104487d, 0.0d, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = rotation5.applyTo(rotation11);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation13 = rotation11.revert();
        java.lang.Class<?> wildcardClass14 = rotation11.getClass();
        org.junit.Assert.assertNotNull(rotation12);
        org.junit.Assert.assertNotNull(rotation13);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test1135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1135");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-1.0d), (double) (byte) 10, (double) (byte) 100, (double) 0L, true);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation11 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D12 = rotation11.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation5.applyInverseTo(vector3D12);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation19 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D20 = rotation19.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation26 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D27 = rotation26.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation28 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D20, vector3D27);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation30 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D20, (double) 1L);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation31 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D13, vector3D20);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation37 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D38 = rotation37.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation44 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D45 = rotation44.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation46 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D38, vector3D45);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation47 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D13, vector3D38);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation53 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation59 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-1.0d), (double) (byte) 10, (double) (byte) 100, (double) 0L, true);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation65 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D66 = rotation65.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation72 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D73 = rotation72.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation74 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D66, vector3D73);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D75 = rotation59.applyTo(vector3D66);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D76 = rotation53.applyTo(vector3D75);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation82 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-0.1855270382668764d), (double) 10, (double) (short) -1, (double) 100.0f, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation83 = rotation82.revert();
        double double84 = rotation82.getQ2();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D85 = rotation82.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation86 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D75, vector3D85);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation87 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D38, vector3D75);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D88 = rotation87.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder89 = null;
        double[] doubleArray90 = rotation87.getAngles(rotationOrder89);
        org.junit.Assert.assertNotNull(vector3D12);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D20);
        org.junit.Assert.assertNotNull(vector3D27);
        org.junit.Assert.assertNotNull(vector3D38);
        org.junit.Assert.assertNotNull(vector3D45);
        org.junit.Assert.assertNotNull(vector3D66);
        org.junit.Assert.assertNotNull(vector3D73);
        org.junit.Assert.assertNotNull(vector3D75);
        org.junit.Assert.assertNotNull(vector3D76);
        org.junit.Assert.assertNotNull(rotation83);
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + (-1.0d) + "'", double84 == (-1.0d));
        org.junit.Assert.assertNotNull(vector3D85);
        org.junit.Assert.assertNotNull(vector3D88);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[1.4710466742229116, 0.01628045512517074, -0.09974965257198512]");
    }

    @Test
    public void test1136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1136");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-1.0d), (double) (byte) 10, (double) (byte) 100, (double) 0L, true);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation11 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D12 = rotation11.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation5.applyInverseTo(vector3D12);
        double double14 = rotation5.getQ1();
        double double15 = rotation5.getQ1();
        org.junit.Assert.assertNotNull(vector3D12);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.09949879346007118d + "'", double14 == 0.09949879346007118d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.09949879346007118d + "'", double15 == 0.09949879346007118d);
    }

    @Test
    public void test1137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1137");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (byte) 0, (double) (byte) 100, (-0.005755946541407356d), 3.7105407653375275d, true);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation6 = rotation5.revert();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation7 = rotation5.revert();
        org.junit.Assert.assertNotNull(rotation6);
        org.junit.Assert.assertNotNull(rotation7);
    }

    @Test
    public void test1138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1138");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation20.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = rotation27.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation34 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D35 = rotation34.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation36 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D28, vector3D35);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation42 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D43 = rotation42.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation49 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D50 = rotation49.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation51 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D43, vector3D50);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation52 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D13, vector3D21, vector3D35, vector3D50);
        double double53 = rotation52.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation59 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D60 = rotation59.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation66 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double67 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation59, rotation66);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation73 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D74 = rotation73.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation80 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D81 = rotation80.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation82 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D74, vector3D81);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation88 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation89 = rotation82.applyInverseTo(rotation88);
        double double90 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation66, rotation82);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D91 = rotation66.getAxis();
        double[][] doubleArray92 = rotation66.getMatrix();
        double double93 = rotation66.getQ2();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation94 = rotation52.applyInverseTo(rotation66);
        double double95 = rotation52.getQ0();
        double double96 = rotation52.getQ2();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D35);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(vector3D50);
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertNotNull(vector3D60);
        org.junit.Assert.assertTrue(Double.isNaN(double67));
        org.junit.Assert.assertNotNull(vector3D74);
        org.junit.Assert.assertNotNull(vector3D81);
        org.junit.Assert.assertNotNull(rotation89);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 3.141592653589793d + "'", double90 == 3.141592653589793d);
        org.junit.Assert.assertNotNull(vector3D91);
        org.junit.Assert.assertNotNull(doubleArray92);
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + (-1.0d) + "'", double93 == (-1.0d));
        org.junit.Assert.assertNotNull(rotation94);
        org.junit.Assert.assertTrue(Double.isNaN(double95));
        org.junit.Assert.assertTrue(Double.isNaN(double96));
    }

    @Test
    public void test1139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1139");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation0 = org.apache.commons.math.geometry.euclidean.threed.Rotation.IDENTITY;
        double double1 = rotation0.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation2 = rotation0.revert();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation8 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D9 = rotation8.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation15 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D16 = rotation15.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation17 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D9, vector3D16);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation19 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D9, (double) 1L);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation25 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D26 = rotation25.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation32 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D33 = rotation32.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation34 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D26, vector3D33);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation40 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D41 = rotation40.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation47 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D48 = rotation47.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation54 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D55 = rotation54.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation56 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D48, vector3D55);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation62 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D63 = rotation62.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation69 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D70 = rotation69.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation71 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D63, vector3D70);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation72 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D33, vector3D41, vector3D55, vector3D70);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation73 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D9, vector3D55);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D74 = rotation0.applyInverseTo(vector3D55);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation80 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D81 = rotation80.getAxis();
        double double82 = rotation80.getQ0();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D83 = rotation80.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation84 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D74, vector3D83);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation86 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D74, 0.8775825618903728d);
        org.junit.Assert.assertNotNull(rotation0);
        org.junit.Assert.assertTrue("'" + double1 + "' != '" + 0.0d + "'", double1 == 0.0d);
        org.junit.Assert.assertNotNull(rotation2);
        org.junit.Assert.assertNotNull(vector3D9);
        org.junit.Assert.assertNotNull(vector3D16);
        org.junit.Assert.assertNotNull(vector3D26);
        org.junit.Assert.assertNotNull(vector3D33);
        org.junit.Assert.assertNotNull(vector3D41);
        org.junit.Assert.assertNotNull(vector3D48);
        org.junit.Assert.assertNotNull(vector3D55);
        org.junit.Assert.assertNotNull(vector3D63);
        org.junit.Assert.assertNotNull(vector3D70);
        org.junit.Assert.assertNotNull(vector3D74);
        org.junit.Assert.assertNotNull(vector3D81);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 0.9996303825414301d + "'", double82 == 0.9996303825414301d);
        org.junit.Assert.assertNotNull(vector3D83);
    }

    @Test
    public void test1140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1140");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation21 = rotation14.applyInverseTo(rotation20);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = rotation27.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation34 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D35 = rotation34.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation36 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D28, vector3D35);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation38 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D28, (double) 100L);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation44 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-1.0d), (double) (byte) 10, (double) (byte) 100, (double) 0L, true);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation50 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D51 = rotation50.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation57 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D58 = rotation57.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation59 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D51, vector3D58);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D60 = rotation44.applyTo(vector3D51);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation66 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D67 = rotation66.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation73 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D74 = rotation73.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation80 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D81 = rotation80.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation82 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D74, vector3D81);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation84 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D74, (double) 100L);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation85 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D67, vector3D74);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation91 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D92 = rotation91.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation93 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D28, vector3D60, vector3D74, vector3D92);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D94 = rotation20.applyInverseTo(vector3D92);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation96 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D92, 0.5309649148733836d);
        double double97 = rotation96.getAngle();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(rotation21);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D35);
        org.junit.Assert.assertNotNull(vector3D51);
        org.junit.Assert.assertNotNull(vector3D58);
        org.junit.Assert.assertNotNull(vector3D60);
        org.junit.Assert.assertNotNull(vector3D67);
        org.junit.Assert.assertNotNull(vector3D74);
        org.junit.Assert.assertNotNull(vector3D81);
        org.junit.Assert.assertNotNull(vector3D92);
        org.junit.Assert.assertNotNull(vector3D94);
        org.junit.Assert.assertTrue("'" + double97 + "' != '" + 0.5309649148733836d + "'", double97 == 0.5309649148733836d);
    }

    @Test
    public void test1141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1141");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-0.1730129508244783d), (-1.01885404374415d), 28.016837073341897d, 100.0d, true);
        double double6 = rotation5.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder7 = null;
        double[] doubleArray8 = rotation5.getAngles(rotationOrder7);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 3.1382608577831084d + "'", double6 == 3.1382608577831084d);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.605415957644885, 0.5466722923582641, 1.5327164403809992]");
    }

    @Test
    public void test1142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1142");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double13 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation5, rotation12);
        double double14 = rotation12.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation20.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = rotation27.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation29 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D21, vector3D28);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D36 = rotation35.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation42 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D43 = rotation42.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation44 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D36, vector3D43);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation45 = rotation29.applyTo(rotation44);
        double double46 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation12, rotation45);
        double double47 = rotation12.getQ0();
        org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder48 = null;
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray49 = rotation12.getAngles(rotationOrder48);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.geometry.euclidean.threed.CardanEulerSingularityException; message: Euler angles singularity");
        } catch (org.apache.commons.math.geometry.euclidean.threed.CardanEulerSingularityException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 3.141592653589793d + "'", double14 == 3.141592653589793d);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(rotation45);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 3.141592653589793d + "'", double46 == 3.141592653589793d);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d);
    }

    @Test
    public void test1143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1143");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (byte) 100, (double) 10L, (double) (short) 100, (double) 1L, false);
        double double6 = rotation5.getAngle();
        double[][] doubleArray7 = rotation5.getMatrix();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D8 = rotation5.getAxis();
        double double9 = rotation5.getQ1();
        double double10 = rotation5.getQ0();
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(vector3D8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 10.0d + "'", double9 == 10.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 100.0d + "'", double10 == 100.0d);
    }

    @Test
    public void test1144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1144");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double13 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation5, rotation12);
        double double14 = rotation12.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation20.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = rotation27.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation29 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D21, vector3D28);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D36 = rotation35.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation42 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D43 = rotation42.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation44 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D36, vector3D43);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation45 = rotation29.applyTo(rotation44);
        double double46 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation12, rotation45);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation52 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D53 = rotation52.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation59 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double60 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation52, rotation59);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation66 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D67 = rotation66.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation73 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double74 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation66, rotation73);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation75 = rotation59.applyInverseTo(rotation66);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation76 = rotation12.applyInverseTo(rotation66);
        double double77 = rotation66.getQ2();
        double double78 = rotation66.getQ2();
        double double79 = rotation66.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D80 = rotation66.getAxis();
        double double81 = rotation66.getAngle();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 3.141592653589793d + "'", double14 == 3.141592653589793d);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(rotation45);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 3.141592653589793d + "'", double46 == 3.141592653589793d);
        org.junit.Assert.assertNotNull(vector3D53);
        org.junit.Assert.assertTrue(Double.isNaN(double60));
        org.junit.Assert.assertNotNull(vector3D67);
        org.junit.Assert.assertTrue(Double.isNaN(double74));
        org.junit.Assert.assertNotNull(rotation75);
        org.junit.Assert.assertNotNull(rotation76);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 0.01922366120271981d + "'", double77 == 0.01922366120271981d);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 0.01922366120271981d + "'", double78 == 0.01922366120271981d);
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 0.0d + "'", double79 == 0.0d);
        org.junit.Assert.assertNotNull(vector3D80);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 0.054379424809409445d + "'", double81 == 0.054379424809409445d);
    }

    @Test
    public void test1145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1145");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double13 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation5, rotation12);
        double double14 = rotation12.getAngle();
        double double15 = rotation12.getAngle();
        double double16 = rotation12.getQ0();
        double double17 = rotation12.getQ0();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation23 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D24 = rotation23.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation30 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D31 = rotation30.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation32 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D24, vector3D31);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation34 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D24, (double) 100L);
        double double35 = rotation34.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation36 = rotation34.revert();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation42 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (byte) 100, (double) 10L, (double) (short) 100, (double) 1L, false);
        double double43 = rotation42.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation44 = rotation36.applyInverseTo(rotation42);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D45 = rotation42.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D46 = rotation12.applyInverseTo(vector3D45);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation48 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D46, 0.9456205751905904d);
        double double49 = rotation48.getQ0();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 3.141592653589793d + "'", double14 == 3.141592653589793d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 3.141592653589793d + "'", double15 == 3.141592653589793d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
        org.junit.Assert.assertNotNull(vector3D24);
        org.junit.Assert.assertNotNull(vector3D31);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + (-0.0d) + "'", double35 == (-0.0d));
        org.junit.Assert.assertNotNull(rotation36);
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertNotNull(rotation44);
        org.junit.Assert.assertNotNull(vector3D45);
        org.junit.Assert.assertNotNull(vector3D46);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.8902920284863246d + "'", double49 == 0.8902920284863246d);
    }

    @Test
    public void test1146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1146");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double13 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation5, rotation12);
        double double14 = rotation12.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation20.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = rotation27.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation29 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D21, vector3D28);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D36 = rotation35.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation42 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D43 = rotation42.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation44 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D36, vector3D43);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation45 = rotation29.applyTo(rotation44);
        double double46 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation12, rotation45);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation52 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D53 = rotation52.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation59 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double60 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation52, rotation59);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation66 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D67 = rotation66.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation73 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double74 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation66, rotation73);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation75 = rotation59.applyInverseTo(rotation66);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation76 = rotation12.applyInverseTo(rotation66);
        double[][] doubleArray77 = rotation12.getMatrix();
        double double78 = rotation12.getQ3();
        double double79 = rotation12.getQ0();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation80 = rotation12.revert();
        double double81 = rotation12.getQ3();
        double double82 = rotation12.getQ0();
        double double83 = rotation12.getQ2();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation84 = rotation12.revert();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 3.141592653589793d + "'", double14 == 3.141592653589793d);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(rotation45);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 3.141592653589793d + "'", double46 == 3.141592653589793d);
        org.junit.Assert.assertNotNull(vector3D53);
        org.junit.Assert.assertTrue(Double.isNaN(double60));
        org.junit.Assert.assertNotNull(vector3D67);
        org.junit.Assert.assertTrue(Double.isNaN(double74));
        org.junit.Assert.assertNotNull(rotation75);
        org.junit.Assert.assertNotNull(rotation76);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 1.0d + "'", double78 == 1.0d);
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 0.0d + "'", double79 == 0.0d);
        org.junit.Assert.assertNotNull(rotation80);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 1.0d + "'", double81 == 1.0d);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 0.0d + "'", double82 == 0.0d);
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + (-1.0d) + "'", double83 == (-1.0d));
        org.junit.Assert.assertNotNull(rotation84);
    }

    @Test
    public void test1147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1147");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation20.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double28 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation20, rotation27);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation34 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D35 = rotation34.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation41 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double42 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation34, rotation41);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation43 = rotation27.applyInverseTo(rotation34);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D44 = rotation43.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation45 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D44);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation47 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, (-0.8775825618903728d));
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertNotNull(vector3D35);
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertNotNull(rotation43);
        org.junit.Assert.assertNotNull(vector3D44);
    }

    @Test
    public void test1148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1148");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation19 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D20 = rotation19.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation21 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D13, vector3D20);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation23 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D13, (double) 100L);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation24 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation26 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, 0.0d);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation32 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D33 = rotation32.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation39 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double40 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation32, rotation39);
        double double41 = rotation39.getQ1();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation47 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D48 = rotation47.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation54 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D55 = rotation54.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation56 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D48, vector3D55);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation58 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D48, (double) 100L);
        double double59 = rotation58.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation60 = rotation58.revert();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation66 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (byte) 100, (double) 10L, (double) (short) 100, (double) 1L, false);
        double double67 = rotation66.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation68 = rotation60.applyInverseTo(rotation66);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D69 = rotation66.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D70 = rotation39.applyInverseTo(vector3D69);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation71 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D69);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation73 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, 0.30408632088084614d);
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D20);
        org.junit.Assert.assertNotNull(vector3D33);
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 10.0d + "'", double41 == 10.0d);
        org.junit.Assert.assertNotNull(vector3D48);
        org.junit.Assert.assertNotNull(vector3D55);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + (-0.0d) + "'", double59 == (-0.0d));
        org.junit.Assert.assertNotNull(rotation60);
        org.junit.Assert.assertTrue(Double.isNaN(double67));
        org.junit.Assert.assertNotNull(rotation68);
        org.junit.Assert.assertNotNull(vector3D69);
        org.junit.Assert.assertNotNull(vector3D70);
    }

    @Test
    public void test1149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1149");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.6331541195548093d, 0.047917108096983706d, (double) (short) 100, 1.7391742109522712d, true);
    }

    @Test
    public void test1150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1150");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation20.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = rotation27.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation34 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D35 = rotation34.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation36 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D28, vector3D35);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation42 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D43 = rotation42.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation49 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D50 = rotation49.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation51 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D43, vector3D50);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation52 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D13, vector3D21, vector3D35, vector3D50);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation54 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D21, (double) 1);
        double double55 = rotation54.getQ1();
        double double56 = rotation54.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder57 = null;
        double[] doubleArray58 = rotation54.getAngles(rotationOrder57);
        double double59 = rotation54.getQ3();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D35);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(vector3D50);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.33900504942104487d + "'", double55 == 0.33900504942104487d);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.0d + "'", double56 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[2.356194490192345, 0.9999999999999999, -2.356194490192345]");
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 0.0d + "'", double59 == 0.0d);
    }

    @Test
    public void test1151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1151");
        org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.geometry.euclidean.threed.Rotation rotation4 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(rotationOrder0, (-0.1855270382668764d), 0.05506338499281072d, 1.047240853549319d);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1152");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) 0, (double) 0, (double) (short) 1, (double) (byte) 1, false);
        double double6 = rotation5.getQ2();
        double double7 = rotation5.getQ3();
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 1.0d + "'", double7 == 1.0d);
    }

    @Test
    public void test1153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1153");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) 10, 0.0d, (double) (byte) 0, 10.0d, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation11 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (byte) 100, (double) 10L, (double) (short) 100, (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation17 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D18 = rotation17.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation24 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D25 = rotation24.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation26 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D18, vector3D25);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation28 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D18, (double) 100L);
        double double29 = rotation28.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation30 = rotation11.applyInverseTo(rotation28);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation31 = rotation5.applyInverseTo(rotation28);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation32 = rotation31.revert();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation33 = rotation32.revert();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation39 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D40 = rotation39.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation46 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D47 = rotation46.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation48 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D40, vector3D47);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation50 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D40, (double) 100L);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation51 = rotation33.applyInverseTo(rotation50);
        double[][] doubleArray52 = rotation51.getMatrix();
        org.junit.Assert.assertNotNull(vector3D18);
        org.junit.Assert.assertNotNull(vector3D25);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + (-0.0d) + "'", double29 == (-0.0d));
        org.junit.Assert.assertNotNull(rotation30);
        org.junit.Assert.assertNotNull(rotation31);
        org.junit.Assert.assertNotNull(rotation32);
        org.junit.Assert.assertNotNull(rotation33);
        org.junit.Assert.assertNotNull(vector3D40);
        org.junit.Assert.assertNotNull(vector3D47);
        org.junit.Assert.assertNotNull(rotation51);
        org.junit.Assert.assertNotNull(doubleArray52);
    }

    @Test
    public void test1154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1154");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double13 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation5, rotation12);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation19 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D20 = rotation19.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation26 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double27 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation19, rotation26);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation28 = rotation12.applyInverseTo(rotation19);
        double double29 = rotation12.getQ3();
        double double30 = rotation12.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation36 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-1.0d), (double) (byte) 10, (double) (byte) 100, (double) 0L, true);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation42 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D43 = rotation42.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation49 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D50 = rotation49.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation51 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D43, vector3D50);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D52 = rotation36.applyTo(vector3D43);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation54 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D43, (double) (byte) 0);
        double double55 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation12, rotation54);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D56 = rotation54.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation62 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D63 = rotation62.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation69 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D70 = rotation69.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation71 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D63, vector3D70);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation73 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D63, (double) 100L);
        double double74 = rotation73.getQ3();
        double double75 = rotation73.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D76 = rotation73.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation77 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D56, vector3D76);
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertNotNull(vector3D20);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertNotNull(rotation28);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 1.0d + "'", double29 == 1.0d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 1.0d + "'", double30 == 1.0d);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(vector3D50);
        org.junit.Assert.assertNotNull(vector3D52);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 3.141592653589793d + "'", double55 == 3.141592653589793d);
        org.junit.Assert.assertNotNull(vector3D56);
        org.junit.Assert.assertNotNull(vector3D63);
        org.junit.Assert.assertNotNull(vector3D70);
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + (-0.0d) + "'", double74 == (-0.0d));
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + (-0.0d) + "'", double75 == (-0.0d));
        org.junit.Assert.assertNotNull(vector3D76);
    }

    @Test
    public void test1155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1155");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (short) -1, (-0.1730129508244783d), (-0.1730129508244783d), (double) 10.0f, false);
        double double6 = rotation5.getQ2();
        double double7 = rotation5.getQ0();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation13 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-0.0d), 0.09949879346007118d, (double) (-1L), 0.0d, true);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation19 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D20 = rotation19.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation26 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D27 = rotation26.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation28 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D20, vector3D27);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation30 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D20, (double) 100L);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation36 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-1.0d), (double) (byte) 10, (double) (byte) 100, (double) 0L, true);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation42 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D43 = rotation42.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation49 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D50 = rotation49.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation51 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D43, vector3D50);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D52 = rotation36.applyTo(vector3D43);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation58 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D59 = rotation58.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation65 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D66 = rotation65.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation72 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D73 = rotation72.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation74 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D66, vector3D73);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation76 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D66, (double) 100L);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation77 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D59, vector3D66);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation83 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D84 = rotation83.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation85 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D20, vector3D52, vector3D66, vector3D84);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation87 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D66, (double) 1.0f);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation89 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D66, (double) (short) 10);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D90 = rotation89.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D91 = rotation13.applyInverseTo(vector3D90);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D92 = rotation5.applyTo(vector3D90);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D93 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.geometry.euclidean.threed.Rotation rotation94 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D90, vector3D93);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + (-0.1730129508244783d) + "'", double6 == (-0.1730129508244783d));
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1.0d) + "'", double7 == (-1.0d));
        org.junit.Assert.assertNotNull(vector3D20);
        org.junit.Assert.assertNotNull(vector3D27);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(vector3D50);
        org.junit.Assert.assertNotNull(vector3D52);
        org.junit.Assert.assertNotNull(vector3D59);
        org.junit.Assert.assertNotNull(vector3D66);
        org.junit.Assert.assertNotNull(vector3D73);
        org.junit.Assert.assertNotNull(vector3D84);
        org.junit.Assert.assertNotNull(vector3D90);
        org.junit.Assert.assertNotNull(vector3D91);
        org.junit.Assert.assertNotNull(vector3D92);
    }

    @Test
    public void test1156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1156");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double13 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation5, rotation12);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation19 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D20 = rotation19.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation26 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double27 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation19, rotation26);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation28 = rotation12.applyInverseTo(rotation19);
        double double29 = rotation28.getQ1();
        double double30 = rotation28.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder31 = null;
        double[] doubleArray32 = rotation28.getAngles(rotationOrder31);
        double double33 = rotation28.getAngle();
        java.lang.Class<?> wildcardClass34 = rotation28.getClass();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertNotNull(vector3D20);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertNotNull(rotation28);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 10.015527486617021d + "'", double29 == 10.015527486617021d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.7881701093115122d + "'", double30 == 0.7881701093115122d);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[-0.31746367442260337, 1.2637009275001716, 3.026886383418824]");
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertNotNull(wildcardClass34);
    }

    @Test
    public void test1157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1157");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation16 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, (double) 100L);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation22 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-1.0d), (double) (byte) 10, (double) (byte) 100, (double) 0L, true);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation28 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D29 = rotation28.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D36 = rotation35.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation37 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D29, vector3D36);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D38 = rotation22.applyTo(vector3D29);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation44 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D45 = rotation44.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation51 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D52 = rotation51.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation58 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D59 = rotation58.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation60 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D52, vector3D59);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation62 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D52, (double) 100L);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation63 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D45, vector3D52);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation69 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D70 = rotation69.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation71 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D38, vector3D52, vector3D70);
        double double72 = rotation71.getQ0();
        org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder73 = null;
        double[] doubleArray74 = rotation71.getAngles(rotationOrder73);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation80 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (short) -1, (-0.1730129508244783d), (-0.1730129508244783d), (double) 10.0f, false);
        double double81 = rotation80.getQ2();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation82 = rotation71.applyInverseTo(rotation80);
        double double83 = rotation71.getQ0();
        double double84 = rotation71.getAngle();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D29);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D38);
        org.junit.Assert.assertNotNull(vector3D45);
        org.junit.Assert.assertNotNull(vector3D52);
        org.junit.Assert.assertNotNull(vector3D59);
        org.junit.Assert.assertNotNull(vector3D70);
        org.junit.Assert.assertTrue(Double.isNaN(double72));
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[NaN, NaN, NaN]");
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + (-0.1730129508244783d) + "'", double81 == (-0.1730129508244783d));
        org.junit.Assert.assertNotNull(rotation82);
        org.junit.Assert.assertTrue(Double.isNaN(double83));
        org.junit.Assert.assertTrue(Double.isNaN(double84));
    }

    @Test
    public void test1158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1158");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) 10, 0.0d, (double) (byte) 0, 10.0d, false);
        double double6 = rotation5.getQ1();
        double double7 = rotation5.getQ3();
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 10.0d + "'", double7 == 10.0d);
    }

    @Test
    public void test1159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1159");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(28.016837073341897d, (double) (-1), (-8.717516503499631d), (double) ' ', true);
        double double6 = rotation5.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation7 = rotation5.revert();
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.7391742109522712d + "'", double6 == 1.7391742109522712d);
        org.junit.Assert.assertNotNull(rotation7);
    }

    @Test
    public void test1160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1160");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double13 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation5, rotation12);
        double double14 = rotation12.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation20.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double28 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation20, rotation27);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation34 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D35 = rotation34.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation41 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double42 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation34, rotation41);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation43 = rotation27.applyInverseTo(rotation34);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation44 = rotation12.applyTo(rotation34);
        double double45 = rotation12.getQ3();
        double double46 = rotation12.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D47 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation48 = rotation12.revert();
        double double49 = rotation48.getQ3();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 3.141592653589793d + "'", double14 == 3.141592653589793d);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertNotNull(vector3D35);
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertNotNull(rotation43);
        org.junit.Assert.assertNotNull(rotation44);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 1.0d + "'", double45 == 1.0d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 1.0d + "'", double46 == 1.0d);
        org.junit.Assert.assertNotNull(vector3D47);
        org.junit.Assert.assertNotNull(rotation48);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 1.0d + "'", double49 == 1.0d);
    }

    @Test
    public void test1161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1161");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation20.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = rotation27.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation34 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D35 = rotation34.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation36 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D28, vector3D35);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation42 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D43 = rotation42.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation49 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D50 = rotation49.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation51 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D43, vector3D50);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation52 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D13, vector3D21, vector3D35, vector3D50);
        double double53 = rotation52.getQ1();
        double double54 = rotation52.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation60 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-0.1855270382668764d), (double) 10, (double) (short) -1, (double) 100.0f, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation61 = rotation60.revert();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation62 = rotation52.applyInverseTo(rotation60);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D63 = rotation62.getAxis();
        double double64 = rotation62.getQ1();
        double double65 = rotation62.getQ2();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D35);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(vector3D50);
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertNotNull(rotation61);
        org.junit.Assert.assertNotNull(rotation62);
        org.junit.Assert.assertNotNull(vector3D63);
        org.junit.Assert.assertTrue(Double.isNaN(double64));
        org.junit.Assert.assertTrue(Double.isNaN(double65));
    }

    @Test
    public void test1162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1162");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (byte) 100, (double) 10L, (double) (short) 100, (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation11 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D12 = rotation11.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation18 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D19 = rotation18.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D12, vector3D19);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation22 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D12, (double) 100L);
        double double23 = rotation22.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation24 = rotation5.applyInverseTo(rotation22);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation30 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D31 = rotation30.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation37 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D38 = rotation37.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation39 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D31, vector3D38);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation45 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation46 = rotation39.applyInverseTo(rotation45);
        double double47 = rotation39.getQ2();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation53 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D54 = rotation53.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation60 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D61 = rotation60.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation62 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D54, vector3D61);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation68 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D69 = rotation68.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation75 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D76 = rotation75.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation77 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D69, vector3D76);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation78 = rotation62.applyTo(rotation77);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation84 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) 10, 0.0d, (double) (byte) 0, 10.0d, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation85 = rotation62.applyTo(rotation84);
        double double86 = rotation84.getAngle();
        double double87 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation39, rotation84);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation88 = rotation24.applyInverseTo(rotation39);
        double double89 = rotation88.getQ1();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D90 = rotation88.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D91 = rotation88.getAxis();
        double double92 = rotation88.getQ3();
        double double93 = rotation88.getAngle();
        double double94 = rotation88.getQ2();
        org.junit.Assert.assertNotNull(vector3D12);
        org.junit.Assert.assertNotNull(vector3D19);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + (-0.0d) + "'", double23 == (-0.0d));
        org.junit.Assert.assertNotNull(rotation24);
        org.junit.Assert.assertNotNull(vector3D31);
        org.junit.Assert.assertNotNull(vector3D38);
        org.junit.Assert.assertNotNull(rotation46);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d);
        org.junit.Assert.assertNotNull(vector3D54);
        org.junit.Assert.assertNotNull(vector3D61);
        org.junit.Assert.assertNotNull(vector3D69);
        org.junit.Assert.assertNotNull(vector3D76);
        org.junit.Assert.assertNotNull(rotation78);
        org.junit.Assert.assertNotNull(rotation85);
        org.junit.Assert.assertTrue(Double.isNaN(double86));
        org.junit.Assert.assertTrue(Double.isNaN(double87));
        org.junit.Assert.assertNotNull(rotation88);
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 28.016837073341897d + "'", double89 == 28.016837073341897d);
        org.junit.Assert.assertNotNull(vector3D90);
        org.junit.Assert.assertNotNull(vector3D91);
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + (-15.732467415526763d) + "'", double92 == (-15.732467415526763d));
        org.junit.Assert.assertTrue(Double.isNaN(double93));
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + 115.23483371416586d + "'", double94 == 115.23483371416586d);
    }

    @Test
    public void test1163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1163");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (short) -1, (-0.1730129508244783d), (-0.1730129508244783d), (double) 10.0f, false);
        double double6 = rotation5.getQ2();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation19 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double20 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation12, rotation19);
        double double21 = rotation19.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = rotation27.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation34 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double35 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation27, rotation34);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation41 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D42 = rotation41.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation48 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double49 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation41, rotation48);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation50 = rotation34.applyInverseTo(rotation41);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation51 = rotation19.applyTo(rotation41);
        org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder52 = null;
        double[] doubleArray53 = rotation51.getAngles(rotationOrder52);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation59 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D60 = rotation59.getAxis();
        double double61 = rotation59.getQ0();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation62 = rotation51.applyInverseTo(rotation59);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation68 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D69 = rotation68.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation75 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D76 = rotation75.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation82 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D83 = rotation82.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation84 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D76, vector3D83);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation86 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D76, (double) 100L);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation87 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D69, vector3D76);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D88 = rotation62.applyTo(vector3D76);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D89 = rotation5.applyInverseTo(vector3D88);
        double double90 = rotation5.getQ1();
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + (-0.1730129508244783d) + "'", double6 == (-0.1730129508244783d));
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 3.141592653589793d + "'", double21 == 3.141592653589793d);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertNotNull(vector3D42);
        org.junit.Assert.assertTrue(Double.isNaN(double49));
        org.junit.Assert.assertNotNull(rotation50);
        org.junit.Assert.assertNotNull(rotation51);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[-0.31746367442260337, 1.2637009275001716, 3.026886383418824]");
        org.junit.Assert.assertNotNull(vector3D60);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 0.9996303825414301d + "'", double61 == 0.9996303825414301d);
        org.junit.Assert.assertNotNull(rotation62);
        org.junit.Assert.assertNotNull(vector3D69);
        org.junit.Assert.assertNotNull(vector3D76);
        org.junit.Assert.assertNotNull(vector3D83);
        org.junit.Assert.assertNotNull(vector3D88);
        org.junit.Assert.assertNotNull(vector3D89);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + (-0.1730129508244783d) + "'", double90 == (-0.1730129508244783d));
    }

    @Test
    public void test1164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1164");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-1.0d), (double) (byte) 10, (double) (byte) 100, (double) 0L, true);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation11 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D12 = rotation11.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation18 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D19 = rotation18.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D12, vector3D19);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation5.applyTo(vector3D12);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D22 = rotation5.getAxis();
        double[][] doubleArray23 = rotation5.getMatrix();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation29 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.054379424809409445d, (double) 10L, 28.016837073341897d, 0.8890808091523411d, false);
        double double30 = rotation29.getQ3();
        double double31 = rotation29.getQ1();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation32 = rotation5.applyTo(rotation29);
        org.junit.Assert.assertNotNull(vector3D12);
        org.junit.Assert.assertNotNull(vector3D19);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D22);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.8890808091523411d + "'", double30 == 0.8890808091523411d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 10.0d + "'", double31 == 10.0d);
        org.junit.Assert.assertNotNull(rotation32);
    }

    @Test
    public void test1165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1165");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation20.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = rotation27.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation34 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D35 = rotation34.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation36 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D28, vector3D35);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation42 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D43 = rotation42.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation49 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D50 = rotation49.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation51 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D43, vector3D50);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation52 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D13, vector3D21, vector3D35, vector3D50);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation53 = rotation52.revert();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation54 = rotation53.revert();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D35);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(vector3D50);
        org.junit.Assert.assertNotNull(rotation53);
        org.junit.Assert.assertNotNull(rotation54);
    }

    @Test
    public void test1166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1166");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double13 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation5, rotation12);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation19 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D20 = rotation19.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation26 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double27 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation19, rotation26);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation28 = rotation12.applyInverseTo(rotation19);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation34 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D35 = rotation34.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation41 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D42 = rotation41.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation43 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D35, vector3D42);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation45 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D35, (double) 1L);
        double double46 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation19, rotation45);
        double[][] doubleArray47 = rotation45.getMatrix();
        double double48 = rotation45.getQ1();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertNotNull(vector3D20);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertNotNull(rotation28);
        org.junit.Assert.assertNotNull(vector3D35);
        org.junit.Assert.assertNotNull(vector3D42);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.9456205751905904d + "'", double46 == 0.9456205751905904d);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.33900504942104487d + "'", double48 == 0.33900504942104487d);
    }

    @Test
    public void test1167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1167");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation20.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = rotation27.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation29 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D21, vector3D28);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D36 = rotation35.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation42 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D43 = rotation42.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation44 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D36, vector3D43);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation45 = rotation29.applyTo(rotation44);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation46 = rotation14.applyTo(rotation45);
        double[][] doubleArray47 = rotation46.getMatrix();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation49 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray47, (double) 10);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation55 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D56 = rotation55.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation62 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double63 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation55, rotation62);
        double double64 = rotation62.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation70 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D71 = rotation70.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation77 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double78 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation70, rotation77);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation84 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D85 = rotation84.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation91 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double92 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation84, rotation91);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation93 = rotation77.applyInverseTo(rotation84);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation94 = rotation62.applyTo(rotation84);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D95 = rotation62.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation96 = rotation49.applyTo(rotation62);
        double double97 = rotation49.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder98 = null;
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray99 = rotation49.getAngles(rotationOrder98);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.geometry.euclidean.threed.CardanEulerSingularityException; message: Euler angles singularity");
        } catch (org.apache.commons.math.geometry.euclidean.threed.CardanEulerSingularityException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(rotation45);
        org.junit.Assert.assertNotNull(rotation46);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(vector3D56);
        org.junit.Assert.assertTrue(Double.isNaN(double63));
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 3.141592653589793d + "'", double64 == 3.141592653589793d);
        org.junit.Assert.assertNotNull(vector3D71);
        org.junit.Assert.assertTrue(Double.isNaN(double78));
        org.junit.Assert.assertNotNull(vector3D85);
        org.junit.Assert.assertTrue(Double.isNaN(double92));
        org.junit.Assert.assertNotNull(rotation93);
        org.junit.Assert.assertNotNull(rotation94);
        org.junit.Assert.assertNotNull(vector3D95);
        org.junit.Assert.assertNotNull(rotation96);
        org.junit.Assert.assertTrue("'" + double97 + "' != '" + 0.0d + "'", double97 == 0.0d);
    }

    @Test
    public void test1168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1168");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-0.1855270382668764d), (double) 10, (double) (short) -1, (double) 100.0f, false);
        double[][] doubleArray6 = rotation5.getMatrix();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation19 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D20 = rotation19.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation21 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D13, vector3D20);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation23 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D13, (double) 100L);
        double double24 = rotation23.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation25 = rotation23.revert();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation31 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (byte) 100, (double) 10L, (double) (short) 100, (double) 1L, false);
        double double32 = rotation31.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation33 = rotation25.applyInverseTo(rotation31);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation34 = rotation5.applyInverseTo(rotation33);
        double double35 = rotation5.getQ2();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D36 = rotation5.getAxis();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D20);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + (-0.0d) + "'", double24 == (-0.0d));
        org.junit.Assert.assertNotNull(rotation25);
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertNotNull(rotation33);
        org.junit.Assert.assertNotNull(rotation34);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + (-1.0d) + "'", double35 == (-1.0d));
        org.junit.Assert.assertNotNull(vector3D36);
    }

    @Test
    public void test1169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1169");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation20.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = rotation27.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation34 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D35 = rotation34.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation36 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D28, vector3D35);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation42 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D43 = rotation42.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation49 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D50 = rotation49.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation51 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D43, vector3D50);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation52 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D13, vector3D21, vector3D35, vector3D50);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation54 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D21, (double) 1);
        double double55 = rotation54.getQ1();
        org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder56 = null;
        double[] doubleArray57 = rotation54.getAngles(rotationOrder56);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation63 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) 0, 100.0d, (double) (short) 100, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation69 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-1.0d), (double) (byte) 10, (double) (byte) 100, (double) 0L, true);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation75 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D76 = rotation75.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation82 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D83 = rotation82.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation84 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D76, vector3D83);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D85 = rotation69.applyTo(vector3D76);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation87 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D76, 0.9996303825414301d);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D88 = rotation63.applyInverseTo(vector3D76);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D89 = rotation54.applyTo(vector3D88);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation90 = rotation54.revert();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation96 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (-1L), 0.0d, (-0.0d), 17.66239947251099d, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation97 = rotation96.revert();
        double double98 = rotation97.getQ1();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation99 = rotation90.applyInverseTo(rotation97);
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D35);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(vector3D50);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.33900504942104487d + "'", double55 == 0.33900504942104487d);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[2.356194490192345, 0.9999999999999999, -2.356194490192345]");
        org.junit.Assert.assertNotNull(vector3D76);
        org.junit.Assert.assertNotNull(vector3D83);
        org.junit.Assert.assertNotNull(vector3D85);
        org.junit.Assert.assertNotNull(vector3D88);
        org.junit.Assert.assertNotNull(vector3D89);
        org.junit.Assert.assertNotNull(rotation90);
        org.junit.Assert.assertNotNull(rotation97);
        org.junit.Assert.assertTrue("'" + double98 + "' != '" + 0.0d + "'", double98 == 0.0d);
        org.junit.Assert.assertNotNull(rotation99);
    }

    @Test
    public void test1170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1170");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-0.1855270382668764d), (double) 10, (double) (short) -1, (double) 100.0f, false);
        double[][] doubleArray6 = rotation5.getMatrix();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation19 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D20 = rotation19.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation21 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D13, vector3D20);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation23 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D13, (double) 100L);
        double double24 = rotation23.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation25 = rotation23.revert();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation31 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (byte) 100, (double) 10L, (double) (short) 100, (double) 1L, false);
        double double32 = rotation31.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation33 = rotation25.applyInverseTo(rotation31);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation34 = rotation5.applyInverseTo(rotation33);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation40 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D41 = rotation40.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation47 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D48 = rotation47.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation49 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D41, vector3D48);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation55 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D56 = rotation55.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation62 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D63 = rotation62.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation64 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D56, vector3D63);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation65 = rotation49.applyTo(rotation64);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation71 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) 10, 0.0d, (double) (byte) 0, 10.0d, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation72 = rotation49.applyTo(rotation71);
        double double73 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation34, rotation49);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation79 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D80 = rotation79.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation86 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D87 = rotation86.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation88 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D80, vector3D87);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation94 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation95 = rotation88.applyInverseTo(rotation94);
        double double96 = rotation95.getAngle();
        double double97 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation49, rotation95);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D98 = rotation49.getAxis();
        double double99 = rotation49.getQ0();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D20);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + (-0.0d) + "'", double24 == (-0.0d));
        org.junit.Assert.assertNotNull(rotation25);
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertNotNull(rotation33);
        org.junit.Assert.assertNotNull(rotation34);
        org.junit.Assert.assertNotNull(vector3D41);
        org.junit.Assert.assertNotNull(vector3D48);
        org.junit.Assert.assertNotNull(vector3D56);
        org.junit.Assert.assertNotNull(vector3D63);
        org.junit.Assert.assertNotNull(rotation65);
        org.junit.Assert.assertNotNull(rotation72);
        org.junit.Assert.assertTrue(Double.isNaN(double73));
        org.junit.Assert.assertNotNull(vector3D80);
        org.junit.Assert.assertNotNull(vector3D87);
        org.junit.Assert.assertNotNull(rotation95);
        org.junit.Assert.assertTrue("'" + double96 + "' != '" + 3.141592653589793d + "'", double96 == 3.141592653589793d);
        org.junit.Assert.assertTrue("'" + double97 + "' != '" + 3.141592653589793d + "'", double97 == 3.141592653589793d);
        org.junit.Assert.assertNotNull(vector3D98);
        org.junit.Assert.assertTrue("'" + double99 + "' != '" + 1.0d + "'", double99 == 1.0d);
    }

    @Test
    public void test1171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1171");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (byte) 100, (double) 10L, (double) (short) 100, (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation11 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D12 = rotation11.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation18 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D19 = rotation18.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D12, vector3D19);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation22 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D12, (double) 100L);
        double double23 = rotation22.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation24 = rotation5.applyInverseTo(rotation22);
        double double25 = rotation5.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D26 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation28 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D26, (double) 10.0f);
        double[][] doubleArray29 = rotation28.getMatrix();
        org.junit.Assert.assertNotNull(vector3D12);
        org.junit.Assert.assertNotNull(vector3D19);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + (-0.0d) + "'", double23 == (-0.0d));
        org.junit.Assert.assertNotNull(rotation24);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 1.0d + "'", double25 == 1.0d);
        org.junit.Assert.assertNotNull(vector3D26);
        org.junit.Assert.assertNotNull(doubleArray29);
    }

    @Test
    public void test1172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1172");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) 10, 0.0d, (double) (byte) 0, 10.0d, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation11 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (byte) 100, (double) 10L, (double) (short) 100, (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation17 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D18 = rotation17.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation24 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D25 = rotation24.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation26 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D18, vector3D25);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation28 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D18, (double) 100L);
        double double29 = rotation28.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation30 = rotation11.applyInverseTo(rotation28);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation31 = rotation5.applyInverseTo(rotation28);
        double double32 = rotation5.getQ3();
        double double33 = rotation5.getQ0();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation34 = rotation5.revert();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D35 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D36 = rotation34.applyTo(vector3D35);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(vector3D18);
        org.junit.Assert.assertNotNull(vector3D25);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + (-0.0d) + "'", double29 == (-0.0d));
        org.junit.Assert.assertNotNull(rotation30);
        org.junit.Assert.assertNotNull(rotation31);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 10.0d + "'", double32 == 10.0d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 10.0d + "'", double33 == 10.0d);
        org.junit.Assert.assertNotNull(rotation34);
    }

    @Test
    public void test1173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1173");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (-1L), 0.0d, (-0.0d), 17.66239947251099d, false);
        double double6 = rotation5.getQ2();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation19 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D20 = rotation19.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation21 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D13, vector3D20);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation23 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D13, (double) 100L);
        double double24 = rotation23.getQ3();
        double double25 = rotation23.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D26 = rotation23.getAxis();
        double double27 = rotation23.getQ1();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation28 = rotation5.applyInverseTo(rotation23);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + (-0.0d) + "'", double6 == (-0.0d));
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D20);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + (-0.0d) + "'", double24 == (-0.0d));
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + (-0.0d) + "'", double25 == (-0.0d));
        org.junit.Assert.assertNotNull(vector3D26);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + (-0.1855270382668764d) + "'", double27 == (-0.1855270382668764d));
        org.junit.Assert.assertNotNull(rotation28);
    }

    @Test
    public void test1174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1174");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double13 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation5, rotation12);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation19 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D20 = rotation19.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation26 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double27 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation19, rotation26);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation28 = rotation12.applyInverseTo(rotation19);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation34 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D35 = rotation34.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation41 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D42 = rotation41.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation43 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D35, vector3D42);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation45 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D35, (double) 1L);
        double double46 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation19, rotation45);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation47 = rotation45.revert();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D48 = rotation47.getAxis();
        double double49 = rotation47.getAngle();
        double double50 = rotation47.getQ1();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertNotNull(vector3D20);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertNotNull(rotation28);
        org.junit.Assert.assertNotNull(vector3D35);
        org.junit.Assert.assertNotNull(vector3D42);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.9456205751905904d + "'", double46 == 0.9456205751905904d);
        org.junit.Assert.assertNotNull(rotation47);
        org.junit.Assert.assertNotNull(vector3D48);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 1.0d + "'", double49 == 1.0d);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.33900504942104487d + "'", double50 == 0.33900504942104487d);
    }

    @Test
    public void test1175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1175");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation16 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, (double) 100L);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation22 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-1.0d), (double) (byte) 10, (double) (byte) 100, (double) 0L, true);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation28 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D29 = rotation28.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D36 = rotation35.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation37 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D29, vector3D36);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D38 = rotation22.applyTo(vector3D29);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation44 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D45 = rotation44.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation51 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D52 = rotation51.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation58 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D59 = rotation58.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation60 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D52, vector3D59);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation62 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D52, (double) 100L);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation63 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D45, vector3D52);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation69 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D70 = rotation69.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation71 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D38, vector3D52, vector3D70);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation73 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D52, (double) 1.0f);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation74 = rotation73.revert();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D75 = rotation74.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation77 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D75, (-10.0d));
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D29);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D38);
        org.junit.Assert.assertNotNull(vector3D45);
        org.junit.Assert.assertNotNull(vector3D52);
        org.junit.Assert.assertNotNull(vector3D59);
        org.junit.Assert.assertNotNull(vector3D70);
        org.junit.Assert.assertNotNull(rotation74);
        org.junit.Assert.assertNotNull(vector3D75);
    }

    @Test
    public void test1176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1176");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation20.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = rotation27.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation29 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D21, vector3D28);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D36 = rotation35.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation42 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D43 = rotation42.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation44 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D36, vector3D43);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation45 = rotation29.applyTo(rotation44);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation46 = rotation14.applyTo(rotation45);
        double double47 = rotation14.getQ3();
        double[][] doubleArray48 = rotation14.getMatrix();
        double double49 = rotation14.getQ1();
        double double50 = rotation14.getQ1();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(rotation45);
        org.junit.Assert.assertNotNull(rotation46);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.0d + "'", double50 == 0.0d);
    }

    @Test
    public void test1177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1177");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation16 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, (double) 100L);
        double double17 = rotation16.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation18 = rotation16.revert();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation24 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (byte) 100, (double) 10L, (double) (short) 100, (double) 1L, false);
        double double25 = rotation24.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation26 = rotation18.applyInverseTo(rotation24);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D27 = rotation24.getAxis();
        double double28 = rotation24.getAngle();
        double double29 = rotation24.getQ3();
        double double30 = rotation24.getQ3();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-0.0d) + "'", double17 == (-0.0d));
        org.junit.Assert.assertNotNull(rotation18);
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertNotNull(rotation26);
        org.junit.Assert.assertNotNull(vector3D27);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 1.0d + "'", double29 == 1.0d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 1.0d + "'", double30 == 1.0d);
    }

    @Test
    public void test1178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1178");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation20.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = rotation27.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation29 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D21, vector3D28);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D36 = rotation35.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation42 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D43 = rotation42.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation44 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D36, vector3D43);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation45 = rotation29.applyTo(rotation44);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation46 = rotation14.applyTo(rotation45);
        double[][] doubleArray47 = rotation46.getMatrix();
        double double48 = rotation46.getQ1();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation49 = rotation46.revert();
        double double50 = rotation49.getQ2();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation51 = rotation49.revert();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D52 = rotation51.getAxis();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(rotation45);
        org.junit.Assert.assertNotNull(rotation46);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d);
        org.junit.Assert.assertNotNull(rotation49);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.0d + "'", double50 == 0.0d);
        org.junit.Assert.assertNotNull(rotation51);
        org.junit.Assert.assertNotNull(vector3D52);
    }

    @Test
    public void test1179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1179");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-15.732467415526763d), 3.1216032962775833d, 2.566370614359174d, (-0.8981984963621733d), false);
    }

    @Test
    public void test1180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1180");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (short) -1, 0.7881701093115122d, 0.0d, (-0.0d), false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation11 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (short) 100, 0.0d, 0.33900504942104487d, 0.0d, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = rotation5.applyTo(rotation11);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation18 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-0.1855270382668764d), (double) 1, Double.NaN, (double) (short) 100, false);
        double double19 = rotation18.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = rotation18.revert();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation26 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D27 = rotation26.getAxis();
        double double28 = rotation26.getQ0();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D29 = rotation26.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D30 = rotation20.applyInverseTo(vector3D29);
        double double31 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation5, rotation20);
        java.lang.Class<?> wildcardClass32 = rotation5.getClass();
        org.junit.Assert.assertNotNull(rotation12);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertNotNull(rotation20);
        org.junit.Assert.assertNotNull(vector3D27);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.9996303825414301d + "'", double28 == 0.9996303825414301d);
        org.junit.Assert.assertNotNull(vector3D29);
        org.junit.Assert.assertNotNull(vector3D30);
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertNotNull(wildcardClass32);
    }

    @Test
    public void test1181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1181");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double13 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation5, rotation12);
        double double14 = rotation12.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation20.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = rotation27.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation29 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D21, vector3D28);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D36 = rotation35.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation42 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D43 = rotation42.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation44 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D36, vector3D43);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation45 = rotation29.applyTo(rotation44);
        double double46 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation12, rotation45);
        double double47 = rotation12.getQ0();
        double double48 = rotation12.getAngle();
        double double49 = rotation12.getAngle();
        double[][] doubleArray50 = rotation12.getMatrix();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 3.141592653589793d + "'", double14 == 3.141592653589793d);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(rotation45);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 3.141592653589793d + "'", double46 == 3.141592653589793d);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 3.141592653589793d + "'", double48 == 3.141592653589793d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 3.141592653589793d + "'", double49 == 3.141592653589793d);
        org.junit.Assert.assertNotNull(doubleArray50);
    }

    @Test
    public void test1182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1182");
        org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.geometry.euclidean.threed.Rotation rotation4 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(rotationOrder0, 0.27150322035250896d, 0.0d, 0.003388584257121107d);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1183");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation20.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = rotation27.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation29 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D21, vector3D28);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation30 = rotation14.applyTo(rotation29);
        double double31 = rotation29.getAngle();
        double double32 = rotation29.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation38 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) 10, 0.0d, (double) (byte) 0, 10.0d, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation44 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (byte) 100, (double) 10L, (double) (short) 100, (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation50 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D51 = rotation50.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation57 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D58 = rotation57.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation59 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D51, vector3D58);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation61 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D51, (double) 100L);
        double double62 = rotation61.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation63 = rotation44.applyInverseTo(rotation61);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation64 = rotation38.applyInverseTo(rotation61);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation65 = rotation64.revert();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D66 = rotation65.getAxis();
        double double67 = rotation65.getQ1();
        double double68 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation29, rotation65);
        double double69 = rotation29.getQ0();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(rotation30);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
        org.junit.Assert.assertNotNull(vector3D51);
        org.junit.Assert.assertNotNull(vector3D58);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + (-0.0d) + "'", double62 == (-0.0d));
        org.junit.Assert.assertNotNull(rotation63);
        org.junit.Assert.assertNotNull(rotation64);
        org.junit.Assert.assertNotNull(rotation65);
        org.junit.Assert.assertNotNull(vector3D66);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.0d + "'", double67 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double68));
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 1.0d + "'", double69 == 1.0d);
    }

    @Test
    public void test1184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1184");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double13 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation5, rotation12);
        double double14 = rotation12.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation20.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = rotation27.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation29 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D21, vector3D28);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D36 = rotation35.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation42 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D43 = rotation42.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation44 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D36, vector3D43);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation45 = rotation29.applyTo(rotation44);
        double double46 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation12, rotation45);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation52 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D53 = rotation52.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation59 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double60 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation52, rotation59);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation66 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D67 = rotation66.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation73 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double74 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation66, rotation73);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation75 = rotation59.applyInverseTo(rotation66);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation76 = rotation12.applyInverseTo(rotation66);
        double[][] doubleArray77 = rotation12.getMatrix();
        double double78 = rotation12.getQ3();
        double double79 = rotation12.getQ0();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation80 = rotation12.revert();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D81 = rotation12.getAxis();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 3.141592653589793d + "'", double14 == 3.141592653589793d);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(rotation45);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 3.141592653589793d + "'", double46 == 3.141592653589793d);
        org.junit.Assert.assertNotNull(vector3D53);
        org.junit.Assert.assertTrue(Double.isNaN(double60));
        org.junit.Assert.assertNotNull(vector3D67);
        org.junit.Assert.assertTrue(Double.isNaN(double74));
        org.junit.Assert.assertNotNull(rotation75);
        org.junit.Assert.assertNotNull(rotation76);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 1.0d + "'", double78 == 1.0d);
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 0.0d + "'", double79 == 0.0d);
        org.junit.Assert.assertNotNull(rotation80);
        org.junit.Assert.assertNotNull(vector3D81);
    }

    @Test
    public void test1185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1185");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation0 = org.apache.commons.math.geometry.euclidean.threed.Rotation.IDENTITY;
        double double1 = rotation0.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation2 = rotation0.revert();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D3 = rotation2.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation4 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double5 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation2, rotation4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(rotation0);
        org.junit.Assert.assertTrue("'" + double1 + "' != '" + 0.0d + "'", double1 == 0.0d);
        org.junit.Assert.assertNotNull(rotation2);
        org.junit.Assert.assertNotNull(vector3D3);
    }

    @Test
    public void test1186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1186");
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D0 = null;
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation6 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (byte) 100, (double) 10L, (double) (short) 100, (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation19 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D20 = rotation19.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation21 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D13, vector3D20);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation23 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D13, (double) 100L);
        double double24 = rotation23.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation25 = rotation6.applyInverseTo(rotation23);
        double double26 = rotation6.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D27 = rotation6.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation29 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D27, (double) 10.0f);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation31 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D27, (double) '#');
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.geometry.euclidean.threed.Rotation rotation32 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D0, vector3D27);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D20);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + (-0.0d) + "'", double24 == (-0.0d));
        org.junit.Assert.assertNotNull(rotation25);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 1.0d + "'", double26 == 1.0d);
        org.junit.Assert.assertNotNull(vector3D27);
    }

    @Test
    public void test1187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1187");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) 10, 0.0d, (double) (byte) 0, 10.0d, false);
        double double6 = rotation5.getQ1();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation19 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D20 = rotation19.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation21 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D13, vector3D20);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = rotation27.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation34 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D35 = rotation34.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation41 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D42 = rotation41.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation43 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D35, vector3D42);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation49 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D50 = rotation49.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation56 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D57 = rotation56.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation58 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D50, vector3D57);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation59 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D20, vector3D28, vector3D42, vector3D57);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D60 = rotation5.applyTo(vector3D42);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation62 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D42, 0.7881701093115122d);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation64 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D42, 9.649660284921133d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D20);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D35);
        org.junit.Assert.assertNotNull(vector3D42);
        org.junit.Assert.assertNotNull(vector3D50);
        org.junit.Assert.assertNotNull(vector3D57);
        org.junit.Assert.assertNotNull(vector3D60);
    }

    @Test
    public void test1188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1188");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-1.0d), (double) (byte) 10, (double) (byte) 100, (double) 0L, true);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation11 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D12 = rotation11.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation18 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D19 = rotation18.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D12, vector3D19);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation5.applyTo(vector3D12);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation23 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D21, (-5.7519881927834584E-5d));
        double double24 = rotation23.getQ2();
        org.junit.Assert.assertNotNull(vector3D12);
        org.junit.Assert.assertNotNull(vector3D19);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + (-2.3960290344820822E-5d) + "'", double24 == (-2.3960290344820822E-5d));
    }

    @Test
    public void test1189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1189");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation16 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, (double) 100L);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation22 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-1.0d), (double) (byte) 10, (double) (byte) 100, (double) 0L, true);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation28 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D29 = rotation28.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D36 = rotation35.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation37 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D29, vector3D36);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D38 = rotation22.applyTo(vector3D29);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation44 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D45 = rotation44.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation51 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D52 = rotation51.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation58 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D59 = rotation58.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation60 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D52, vector3D59);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation62 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D52, (double) 100L);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation63 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D45, vector3D52);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation69 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D70 = rotation69.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation71 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D38, vector3D52, vector3D70);
        double double72 = rotation71.getQ0();
        org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder73 = null;
        double[] doubleArray74 = rotation71.getAngles(rotationOrder73);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation80 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (short) -1, (-0.1730129508244783d), (-0.1730129508244783d), (double) 10.0f, false);
        double double81 = rotation80.getQ2();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation82 = rotation71.applyInverseTo(rotation80);
        double double83 = rotation71.getQ0();
        double double84 = rotation71.getQ3();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D29);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D38);
        org.junit.Assert.assertNotNull(vector3D45);
        org.junit.Assert.assertNotNull(vector3D52);
        org.junit.Assert.assertNotNull(vector3D59);
        org.junit.Assert.assertNotNull(vector3D70);
        org.junit.Assert.assertTrue(Double.isNaN(double72));
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[NaN, NaN, NaN]");
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + (-0.1730129508244783d) + "'", double81 == (-0.1730129508244783d));
        org.junit.Assert.assertNotNull(rotation82);
        org.junit.Assert.assertTrue(Double.isNaN(double83));
        org.junit.Assert.assertTrue(Double.isNaN(double84));
    }

    @Test
    public void test1190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1190");
        org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.geometry.euclidean.threed.Rotation rotation4 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(rotationOrder0, (double) (short) 100, 0.0d, (double) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1191");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation20.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = rotation27.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation34 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D35 = rotation34.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation36 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D28, vector3D35);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation42 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D43 = rotation42.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation49 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D50 = rotation49.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation51 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D43, vector3D50);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation52 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D13, vector3D21, vector3D35, vector3D50);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation54 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D21, (double) 1);
        double double55 = rotation54.getQ1();
        org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder56 = null;
        double[] doubleArray57 = rotation54.getAngles(rotationOrder56);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation63 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) 0, 100.0d, (double) (short) 100, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation69 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-1.0d), (double) (byte) 10, (double) (byte) 100, (double) 0L, true);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation75 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D76 = rotation75.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation82 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D83 = rotation82.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation84 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D76, vector3D83);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D85 = rotation69.applyTo(vector3D76);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation87 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D76, 0.9996303825414301d);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D88 = rotation63.applyInverseTo(vector3D76);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D89 = rotation54.applyTo(vector3D88);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation90 = rotation54.revert();
        double[][] doubleArray91 = rotation54.getMatrix();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D35);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(vector3D50);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.33900504942104487d + "'", double55 == 0.33900504942104487d);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[2.356194490192345, 0.9999999999999999, -2.356194490192345]");
        org.junit.Assert.assertNotNull(vector3D76);
        org.junit.Assert.assertNotNull(vector3D83);
        org.junit.Assert.assertNotNull(vector3D85);
        org.junit.Assert.assertNotNull(vector3D88);
        org.junit.Assert.assertNotNull(vector3D89);
        org.junit.Assert.assertNotNull(rotation90);
        org.junit.Assert.assertNotNull(doubleArray91);
    }

    @Test
    public void test1192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1192");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation0 = org.apache.commons.math.geometry.euclidean.threed.Rotation.IDENTITY;
        double double1 = rotation0.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation2 = rotation0.revert();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation8 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D9 = rotation8.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation15 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D16 = rotation15.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation17 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D9, vector3D16);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation19 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D9, (double) 100L);
        double double20 = rotation19.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation26 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D27 = rotation26.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation33 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D34 = rotation33.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D27, vector3D34);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation37 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D27, (double) 1L);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation43 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D44 = rotation43.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation50 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D51 = rotation50.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation52 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D44, vector3D51);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation58 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D59 = rotation58.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation65 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D66 = rotation65.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation72 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D73 = rotation72.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation74 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D66, vector3D73);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation80 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D81 = rotation80.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation87 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D88 = rotation87.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation89 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D81, vector3D88);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation90 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D51, vector3D59, vector3D73, vector3D88);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation91 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D27, vector3D73);
        double double92 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation19, rotation91);
        double double93 = rotation91.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation94 = rotation2.applyTo(rotation91);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation95 = rotation91.revert();
        org.junit.Assert.assertNotNull(rotation0);
        org.junit.Assert.assertTrue("'" + double1 + "' != '" + 0.0d + "'", double1 == 0.0d);
        org.junit.Assert.assertNotNull(rotation2);
        org.junit.Assert.assertNotNull(vector3D9);
        org.junit.Assert.assertNotNull(vector3D16);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + (-0.0d) + "'", double20 == (-0.0d));
        org.junit.Assert.assertNotNull(vector3D27);
        org.junit.Assert.assertNotNull(vector3D34);
        org.junit.Assert.assertNotNull(vector3D44);
        org.junit.Assert.assertNotNull(vector3D51);
        org.junit.Assert.assertNotNull(vector3D59);
        org.junit.Assert.assertNotNull(vector3D66);
        org.junit.Assert.assertNotNull(vector3D73);
        org.junit.Assert.assertNotNull(vector3D81);
        org.junit.Assert.assertNotNull(vector3D88);
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 0.5309649148733836d + "'", double92 == 0.5309649148733836d);
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 0.0d + "'", double93 == 0.0d);
        org.junit.Assert.assertNotNull(rotation94);
        org.junit.Assert.assertNotNull(rotation95);
    }

    @Test
    public void test1193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1193");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double13 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation5, rotation12);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation19 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D20 = rotation19.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation26 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D27 = rotation26.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation28 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D20, vector3D27);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation34 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = rotation28.applyInverseTo(rotation34);
        double double36 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation12, rotation28);
        double double37 = rotation12.getAngle();
        double double38 = rotation12.getQ3();
        double double39 = rotation12.getQ2();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation45 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D46 = rotation45.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation52 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double53 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation45, rotation52);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation59 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D60 = rotation59.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation66 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D67 = rotation66.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation68 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D60, vector3D67);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation74 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation75 = rotation68.applyInverseTo(rotation74);
        double double76 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation52, rotation68);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D77 = rotation52.getAxis();
        double[][] doubleArray78 = rotation52.getMatrix();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation84 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-0.0d), (double) (short) 1, 0.0d, 0.9996303825414301d, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation85 = rotation52.applyTo(rotation84);
        double double86 = rotation85.getQ1();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation87 = rotation12.applyInverseTo(rotation85);
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertNotNull(vector3D20);
        org.junit.Assert.assertNotNull(vector3D27);
        org.junit.Assert.assertNotNull(rotation35);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 3.141592653589793d + "'", double36 == 3.141592653589793d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 3.141592653589793d + "'", double37 == 3.141592653589793d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 1.0d + "'", double38 == 1.0d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + (-1.0d) + "'", double39 == (-1.0d));
        org.junit.Assert.assertNotNull(vector3D46);
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertNotNull(vector3D60);
        org.junit.Assert.assertNotNull(vector3D67);
        org.junit.Assert.assertNotNull(rotation75);
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 3.141592653589793d + "'", double76 == 3.141592653589793d);
        org.junit.Assert.assertNotNull(vector3D77);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertNotNull(rotation85);
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 0.9996303825414301d + "'", double86 == 0.9996303825414301d);
        org.junit.Assert.assertNotNull(rotation87);
    }

    @Test
    public void test1194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1194");
        org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.geometry.euclidean.threed.Rotation rotation4 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(rotationOrder0, 3.082566122054968d, 3.1390038567388605d, 3.1030128410395363d);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1195");
        org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.geometry.euclidean.threed.Rotation rotation4 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(rotationOrder0, 0.9949879346007117d, (double) 0, 0.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1196");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.9996303825414302d, 0.09900971983887621d, (-0.9649660284921133d), (-0.8156840252218559d), false);
    }

    @Test
    public void test1197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1197");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double13 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation5, rotation12);
        double double14 = rotation12.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation20.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = rotation27.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation29 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D21, vector3D28);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D36 = rotation35.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation42 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D43 = rotation42.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation44 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D36, vector3D43);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation45 = rotation29.applyTo(rotation44);
        double double46 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation12, rotation45);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation52 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D53 = rotation52.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation59 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double60 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation52, rotation59);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation66 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D67 = rotation66.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation73 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double74 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation66, rotation73);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation75 = rotation59.applyInverseTo(rotation66);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation76 = rotation12.applyInverseTo(rotation66);
        double double77 = rotation66.getQ1();
        double[][] doubleArray78 = rotation66.getMatrix();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.geometry.euclidean.threed.Rotation rotation80 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray78, (-1.0d));
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.geometry.euclidean.threed.NotARotationMatrixException; message: unable to orthogonalize matrix in 10 iterations");
        } catch (org.apache.commons.math.geometry.euclidean.threed.NotARotationMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 3.141592653589793d + "'", double14 == 3.141592653589793d);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(rotation45);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 3.141592653589793d + "'", double46 == 3.141592653589793d);
        org.junit.Assert.assertNotNull(vector3D53);
        org.junit.Assert.assertTrue(Double.isNaN(double60));
        org.junit.Assert.assertNotNull(vector3D67);
        org.junit.Assert.assertTrue(Double.isNaN(double74));
        org.junit.Assert.assertNotNull(rotation75);
        org.junit.Assert.assertNotNull(rotation76);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 0.01922366120271981d + "'", double77 == 0.01922366120271981d);
        org.junit.Assert.assertNotNull(doubleArray78);
    }

    @Test
    public void test1198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1198");
        org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.geometry.euclidean.threed.Rotation rotation4 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(rotationOrder0, (-1.0d), (double) 1L, 0.2199735373126486d);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1199");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(17.66239947251099d, 28.016837073341897d, (double) 100, Double.NaN, false);
        double double6 = rotation5.getQ0();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation19 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D20 = rotation19.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation21 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D13, vector3D20);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = rotation27.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation34 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D35 = rotation34.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation36 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D28, vector3D35);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation42 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D43 = rotation42.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation49 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D50 = rotation49.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation51 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D43, vector3D50);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation52 = rotation36.applyTo(rotation51);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation53 = rotation21.applyTo(rotation52);
        double[][] doubleArray54 = rotation53.getMatrix();
        double double55 = rotation53.getQ1();
        double[][] doubleArray56 = rotation53.getMatrix();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation58 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray56, (double) 100L);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation60 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray56, (double) 0);
        double double61 = rotation60.getQ2();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation62 = rotation5.applyInverseTo(rotation60);
        org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder63 = null;
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray64 = rotation60.getAngles(rotationOrder63);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.geometry.euclidean.threed.CardanEulerSingularityException; message: Euler angles singularity");
        } catch (org.apache.commons.math.geometry.euclidean.threed.CardanEulerSingularityException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 17.66239947251099d + "'", double6 == 17.66239947251099d);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D20);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D35);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(vector3D50);
        org.junit.Assert.assertNotNull(rotation52);
        org.junit.Assert.assertNotNull(rotation53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 0.0d + "'", double61 == 0.0d);
        org.junit.Assert.assertNotNull(rotation62);
    }

    @Test
    public void test1200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1200");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-1.0d), (double) (byte) 10, (double) (byte) 100, (double) 0L, true);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation11 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D12 = rotation11.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation5.applyInverseTo(vector3D12);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation19 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D20 = rotation19.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation26 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D27 = rotation26.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation28 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D20, vector3D27);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation30 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D20, (double) 1L);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation31 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D13, vector3D20);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation33 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D13, 0.31538323081891095d);
        double double34 = rotation33.getQ3();
        double double35 = rotation33.getQ1();
        org.junit.Assert.assertNotNull(vector3D12);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D20);
        org.junit.Assert.assertNotNull(vector3D27);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.001978792867119834d + "'", double34 == 0.001978792867119834d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + (-0.08683602698544203d) + "'", double35 == (-0.08683602698544203d));
    }

    @Test
    public void test1201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1201");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation16 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, (double) 100L);
        double double17 = rotation16.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation18 = rotation16.revert();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation24 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (byte) 100, (double) 10L, (double) (short) 100, (double) 1L, false);
        double double25 = rotation24.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation26 = rotation18.applyInverseTo(rotation24);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = rotation24.revert();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation28 = rotation24.revert();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation29 = rotation24.revert();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-0.0d) + "'", double17 == (-0.0d));
        org.junit.Assert.assertNotNull(rotation18);
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertNotNull(rotation26);
        org.junit.Assert.assertNotNull(rotation27);
        org.junit.Assert.assertNotNull(rotation28);
        org.junit.Assert.assertNotNull(rotation29);
    }

    @Test
    public void test1202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1202");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double13 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation5, rotation12);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation19 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D20 = rotation19.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation26 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D27 = rotation26.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation28 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D20, vector3D27);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation34 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = rotation28.applyInverseTo(rotation34);
        double double36 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation12, rotation28);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D37 = rotation12.getAxis();
        double[][] doubleArray38 = rotation12.getMatrix();
        double double39 = rotation12.getQ2();
        double double40 = rotation12.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation46 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) 10, 0.0d, (double) (byte) 0, 10.0d, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation52 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (byte) 100, (double) 10L, (double) (short) 100, (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation58 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D59 = rotation58.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation65 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D66 = rotation65.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation67 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D59, vector3D66);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation69 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D59, (double) 100L);
        double double70 = rotation69.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation71 = rotation52.applyInverseTo(rotation69);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation72 = rotation46.applyInverseTo(rotation69);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation78 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D79 = rotation78.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation85 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D86 = rotation85.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation87 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D79, vector3D86);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation89 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D79, (double) 1L);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D90 = rotation72.applyTo(vector3D79);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D91 = rotation12.applyInverseTo(vector3D79);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation93 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D91, (double) 1);
        double double94 = rotation93.getQ1();
        double double95 = rotation93.getQ3();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertNotNull(vector3D20);
        org.junit.Assert.assertNotNull(vector3D27);
        org.junit.Assert.assertNotNull(rotation35);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 3.141592653589793d + "'", double36 == 3.141592653589793d);
        org.junit.Assert.assertNotNull(vector3D37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + (-1.0d) + "'", double39 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 3.141592653589793d + "'", double40 == 3.141592653589793d);
        org.junit.Assert.assertNotNull(vector3D59);
        org.junit.Assert.assertNotNull(vector3D66);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + (-0.0d) + "'", double70 == (-0.0d));
        org.junit.Assert.assertNotNull(rotation71);
        org.junit.Assert.assertNotNull(rotation72);
        org.junit.Assert.assertNotNull(vector3D79);
        org.junit.Assert.assertNotNull(vector3D86);
        org.junit.Assert.assertNotNull(vector3D90);
        org.junit.Assert.assertNotNull(vector3D91);
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + 0.47438148773598054d + "'", double94 == 0.47438148773598054d);
        org.junit.Assert.assertTrue("'" + double95 + "' != '" + 0.04770316636451201d + "'", double95 == 0.04770316636451201d);
    }

    @Test
    public void test1203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1203");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-1.0d), (double) (byte) 10, (double) (byte) 100, (double) 0L, true);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation11 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D12 = rotation11.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation5.applyInverseTo(vector3D12);
        double double14 = rotation5.getQ2();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D15 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation16 = org.apache.commons.math.geometry.euclidean.threed.Rotation.IDENTITY;
        double double17 = rotation16.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation18 = rotation16.revert();
        double double19 = rotation18.getQ1();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation25 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D26 = rotation25.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation32 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double33 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation25, rotation32);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation39 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D40 = rotation39.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation46 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D47 = rotation46.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation48 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D40, vector3D47);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation54 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation55 = rotation48.applyInverseTo(rotation54);
        double double56 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation32, rotation48);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D57 = rotation32.getAxis();
        double[][] doubleArray58 = rotation32.getMatrix();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation64 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-0.0d), (double) (short) 1, 0.0d, 0.9996303825414301d, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation65 = rotation32.applyTo(rotation64);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation66 = rotation18.applyTo(rotation64);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation67 = rotation5.applyTo(rotation66);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation73 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (short) 100, (-8.717516503499631d), (-0.33900504942104487d), 0.7881701093115122d, false);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D74 = rotation73.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation75 = rotation66.applyTo(rotation73);
        double double76 = rotation75.getQ2();
        org.junit.Assert.assertNotNull(vector3D12);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.9949879346007117d + "'", double14 == 0.9949879346007117d);
        org.junit.Assert.assertNotNull(vector3D15);
        org.junit.Assert.assertNotNull(rotation16);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
        org.junit.Assert.assertNotNull(rotation18);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertNotNull(vector3D26);
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertNotNull(vector3D40);
        org.junit.Assert.assertNotNull(vector3D47);
        org.junit.Assert.assertNotNull(rotation55);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 3.141592653589793d + "'", double56 == 3.141592653589793d);
        org.junit.Assert.assertNotNull(vector3D57);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(rotation65);
        org.junit.Assert.assertNotNull(rotation66);
        org.junit.Assert.assertNotNull(rotation67);
        org.junit.Assert.assertNotNull(vector3D74);
        org.junit.Assert.assertNotNull(rotation75);
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + (-9.502464466516079d) + "'", double76 == (-9.502464466516079d));
    }

    @Test
    public void test1204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1204");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (-1L), 0.0d, (-0.0d), 17.66239947251099d, false);
        double double6 = rotation5.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D7 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation13 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D14 = rotation13.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation20.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation22 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D14, vector3D21);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation28 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D29 = rotation28.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D36 = rotation35.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation37 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D29, vector3D36);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation43 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D44 = rotation43.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation50 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D51 = rotation50.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation52 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D44, vector3D51);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation53 = rotation37.applyTo(rotation52);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation54 = rotation22.applyTo(rotation53);
        double[][] doubleArray55 = rotation54.getMatrix();
        double double56 = rotation54.getQ1();
        double[][] doubleArray57 = rotation54.getMatrix();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation59 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray57, (double) 100L);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation61 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray57, 0.7881701093115122d);
        double double62 = rotation61.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D63 = rotation61.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation64 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D7, vector3D63);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation65 = rotation64.revert();
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertNotNull(vector3D7);
        org.junit.Assert.assertNotNull(vector3D14);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D29);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D44);
        org.junit.Assert.assertNotNull(vector3D51);
        org.junit.Assert.assertNotNull(rotation53);
        org.junit.Assert.assertNotNull(rotation54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.0d + "'", double56 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 0.0d + "'", double62 == 0.0d);
        org.junit.Assert.assertNotNull(vector3D63);
        org.junit.Assert.assertNotNull(rotation65);
    }

    @Test
    public void test1205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1205");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-0.1855270382668764d), (double) 10, (double) (short) -1, (double) 100.0f, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation6 = rotation5.revert();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation19 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double20 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation12, rotation19);
        double double21 = rotation19.getAngle();
        double double22 = rotation19.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D23 = rotation19.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation24 = rotation6.applyInverseTo(rotation19);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation30 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(10.0d, 0.9950846276202212d, (double) '#', (double) 1L, true);
        double double31 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation6, rotation30);
        double double32 = rotation30.getQ1();
        org.junit.Assert.assertNotNull(rotation6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 3.141592653589793d + "'", double21 == 3.141592653589793d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 3.141592653589793d + "'", double22 == 3.141592653589793d);
        org.junit.Assert.assertNotNull(vector3D23);
        org.junit.Assert.assertNotNull(rotation24);
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.027316569631826257d + "'", double32 == 0.027316569631826257d);
    }

    @Test
    public void test1206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1206");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-0.1855270382668764d), (double) 10, (double) (short) -1, (double) 100.0f, false);
        double[][] doubleArray6 = rotation5.getMatrix();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation19 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D20 = rotation19.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation21 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D13, vector3D20);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation23 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D13, (double) 100L);
        double double24 = rotation23.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation25 = rotation23.revert();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation31 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (byte) 100, (double) 10L, (double) (short) 100, (double) 1L, false);
        double double32 = rotation31.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation33 = rotation25.applyInverseTo(rotation31);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation34 = rotation5.applyInverseTo(rotation33);
        double[][] doubleArray35 = rotation34.getMatrix();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.geometry.euclidean.threed.Rotation rotation37 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray35, 1.233771398170623d);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.geometry.euclidean.threed.NotARotationMatrixException; message: unable to orthogonalize matrix in 10 iterations");
        } catch (org.apache.commons.math.geometry.euclidean.threed.NotARotationMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D20);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + (-0.0d) + "'", double24 == (-0.0d));
        org.junit.Assert.assertNotNull(rotation25);
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertNotNull(rotation33);
        org.junit.Assert.assertNotNull(rotation34);
        org.junit.Assert.assertNotNull(doubleArray35);
    }

    @Test
    public void test1207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1207");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation16 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, (double) 100L);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation22 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-1.0d), (double) (byte) 10, (double) (byte) 100, (double) 0L, true);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation28 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D29 = rotation28.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D36 = rotation35.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation37 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D29, vector3D36);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D38 = rotation22.applyTo(vector3D29);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation44 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D45 = rotation44.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation51 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D52 = rotation51.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation58 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D59 = rotation58.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation60 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D52, vector3D59);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation62 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D52, (double) 100L);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation63 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D45, vector3D52);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation69 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D70 = rotation69.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation71 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D38, vector3D52, vector3D70);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation73 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, (double) (short) -1);
        double double74 = rotation73.getQ1();
        org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder75 = null;
        double[] doubleArray76 = rotation73.getAngles(rotationOrder75);
        double double77 = rotation73.getAngle();
        double double78 = rotation73.getQ2();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D79 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D80 = rotation73.applyTo(vector3D79);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D29);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D38);
        org.junit.Assert.assertNotNull(vector3D45);
        org.junit.Assert.assertNotNull(vector3D52);
        org.junit.Assert.assertNotNull(vector3D59);
        org.junit.Assert.assertNotNull(vector3D70);
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + (-0.33900504942104487d) + "'", double74 == (-0.33900504942104487d));
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[-0.7853981633974483, 0.9999999999999999, 0.7853981633974483]");
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 1.0d + "'", double77 == 1.0d);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + (-0.33900504942104487d) + "'", double78 == (-0.33900504942104487d));
    }

    @Test
    public void test1208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1208");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double13 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation5, rotation12);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation19 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D20 = rotation19.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation26 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D27 = rotation26.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation28 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D20, vector3D27);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation34 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = rotation28.applyInverseTo(rotation34);
        double double36 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation12, rotation28);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D37 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation43 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-1.0d), (double) (byte) 10, (double) (byte) 100, (double) 0L, true);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation49 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D50 = rotation49.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation56 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D57 = rotation56.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation58 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D50, vector3D57);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D59 = rotation43.applyTo(vector3D50);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation60 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D37, vector3D59);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation66 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D67 = rotation66.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation73 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D74 = rotation73.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation75 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D67, vector3D74);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D76 = rotation60.applyTo(vector3D67);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation77 = rotation60.revert();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertNotNull(vector3D20);
        org.junit.Assert.assertNotNull(vector3D27);
        org.junit.Assert.assertNotNull(rotation35);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 3.141592653589793d + "'", double36 == 3.141592653589793d);
        org.junit.Assert.assertNotNull(vector3D37);
        org.junit.Assert.assertNotNull(vector3D50);
        org.junit.Assert.assertNotNull(vector3D57);
        org.junit.Assert.assertNotNull(vector3D59);
        org.junit.Assert.assertNotNull(vector3D67);
        org.junit.Assert.assertNotNull(vector3D74);
        org.junit.Assert.assertNotNull(vector3D76);
        org.junit.Assert.assertNotNull(rotation77);
    }

    @Test
    public void test1209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1209");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation20.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = rotation27.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation29 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D21, vector3D28);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation30 = rotation14.applyTo(rotation29);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation36 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) 10, 0.0d, (double) (byte) 0, 10.0d, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation37 = rotation14.applyTo(rotation36);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation38 = rotation37.revert();
        double double39 = rotation38.getQ0();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation45 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D46 = rotation45.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation52 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D53 = rotation52.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation54 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D46, vector3D53);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation60 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D61 = rotation60.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation67 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D68 = rotation67.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation69 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D61, vector3D68);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation75 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D76 = rotation75.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation82 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D83 = rotation82.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation84 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D76, vector3D83);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation85 = rotation69.applyTo(rotation84);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation86 = rotation54.applyTo(rotation85);
        double[][] doubleArray87 = rotation86.getMatrix();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation89 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray87, (double) '4');
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation95 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(2.7755575615628914E-17d, (-8.717516503499631d), (-0.005755946541407356d), (double) (-1L), false);
        double double96 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation89, rotation95);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation97 = rotation38.applyInverseTo(rotation95);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D98 = rotation38.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation99 = rotation38.revert();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(rotation30);
        org.junit.Assert.assertNotNull(rotation37);
        org.junit.Assert.assertNotNull(rotation38);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + (-10.0d) + "'", double39 == (-10.0d));
        org.junit.Assert.assertNotNull(vector3D46);
        org.junit.Assert.assertNotNull(vector3D53);
        org.junit.Assert.assertNotNull(vector3D61);
        org.junit.Assert.assertNotNull(vector3D68);
        org.junit.Assert.assertNotNull(vector3D76);
        org.junit.Assert.assertNotNull(vector3D83);
        org.junit.Assert.assertNotNull(rotation85);
        org.junit.Assert.assertNotNull(rotation86);
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertTrue("'" + double96 + "' != '" + 3.141592653589793d + "'", double96 == 3.141592653589793d);
        org.junit.Assert.assertNotNull(rotation97);
        org.junit.Assert.assertNotNull(vector3D98);
        org.junit.Assert.assertNotNull(rotation99);
    }

    @Test
    public void test1210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1210");
        org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.geometry.euclidean.threed.Rotation rotation4 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(rotationOrder0, 10.015527486617021d, (-0.33900504942104487d), 0.9996303825414302d);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1211");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation16 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, (double) 100L);
        double double17 = rotation16.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation18 = rotation16.revert();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation24 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (byte) 100, (double) 10L, (double) (short) 100, (double) 1L, false);
        double double25 = rotation24.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation26 = rotation18.applyInverseTo(rotation24);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation32 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation38 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-1.0d), (double) (byte) 10, (double) (byte) 100, (double) 0L, true);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation44 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D45 = rotation44.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation51 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D52 = rotation51.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation53 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D45, vector3D52);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D54 = rotation38.applyTo(vector3D45);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D55 = rotation32.applyTo(vector3D54);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D56 = rotation24.applyInverseTo(vector3D55);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation58 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D55, 0.01922366120271981d);
        double double59 = rotation58.getQ2();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-0.0d) + "'", double17 == (-0.0d));
        org.junit.Assert.assertNotNull(rotation18);
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertNotNull(rotation26);
        org.junit.Assert.assertNotNull(vector3D45);
        org.junit.Assert.assertNotNull(vector3D52);
        org.junit.Assert.assertNotNull(vector3D54);
        org.junit.Assert.assertNotNull(vector3D55);
        org.junit.Assert.assertNotNull(vector3D56);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 8.9388072154218E-4d + "'", double59 == 8.9388072154218E-4d);
    }

    @Test
    public void test1212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1212");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation20.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = rotation27.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation29 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D21, vector3D28);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D36 = rotation35.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation42 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D43 = rotation42.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation44 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D36, vector3D43);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation45 = rotation29.applyTo(rotation44);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation46 = rotation14.applyTo(rotation45);
        double[][] doubleArray47 = rotation46.getMatrix();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation49 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray47, (double) 10);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation55 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D56 = rotation55.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation62 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double63 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation55, rotation62);
        double double64 = rotation62.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation70 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D71 = rotation70.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation77 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double78 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation70, rotation77);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation84 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D85 = rotation84.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation91 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double92 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation84, rotation91);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation93 = rotation77.applyInverseTo(rotation84);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation94 = rotation62.applyTo(rotation84);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D95 = rotation62.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation96 = rotation49.applyTo(rotation62);
        double double97 = rotation49.getQ3();
        double double98 = rotation49.getQ2();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(rotation45);
        org.junit.Assert.assertNotNull(rotation46);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(vector3D56);
        org.junit.Assert.assertTrue(Double.isNaN(double63));
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 3.141592653589793d + "'", double64 == 3.141592653589793d);
        org.junit.Assert.assertNotNull(vector3D71);
        org.junit.Assert.assertTrue(Double.isNaN(double78));
        org.junit.Assert.assertNotNull(vector3D85);
        org.junit.Assert.assertTrue(Double.isNaN(double92));
        org.junit.Assert.assertNotNull(rotation93);
        org.junit.Assert.assertNotNull(rotation94);
        org.junit.Assert.assertNotNull(vector3D95);
        org.junit.Assert.assertNotNull(rotation96);
        org.junit.Assert.assertTrue("'" + double97 + "' != '" + 0.0d + "'", double97 == 0.0d);
        org.junit.Assert.assertTrue("'" + double98 + "' != '" + 0.0d + "'", double98 == 0.0d);
    }

    @Test
    public void test1213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1213");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) 10.0f, 0.7881701093115122d, (-0.1730129508244783d), (double) (byte) 0, true);
        double double6 = rotation5.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation19 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D20 = rotation19.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation21 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D13, vector3D20);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation28 = rotation21.applyInverseTo(rotation27);
        double double29 = rotation27.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D36 = rotation35.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation42 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double43 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation35, rotation42);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation49 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D50 = rotation49.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation56 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D57 = rotation56.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation58 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D50, vector3D57);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation64 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation65 = rotation58.applyInverseTo(rotation64);
        double double66 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation42, rotation58);
        double double67 = rotation58.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation68 = rotation27.applyInverseTo(rotation58);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation74 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D75 = rotation74.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation81 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D82 = rotation81.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation83 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D75, vector3D82);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D84 = rotation58.applyInverseTo(vector3D75);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D85 = rotation5.applyInverseTo(vector3D84);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.1610382605737718d + "'", double6 == 0.1610382605737718d);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D20);
        org.junit.Assert.assertNotNull(rotation28);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 3.141592653589793d + "'", double29 == 3.141592653589793d);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertNotNull(vector3D50);
        org.junit.Assert.assertNotNull(vector3D57);
        org.junit.Assert.assertNotNull(rotation65);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 3.141592653589793d + "'", double66 == 3.141592653589793d);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.0d + "'", double67 == 0.0d);
        org.junit.Assert.assertNotNull(rotation68);
        org.junit.Assert.assertNotNull(vector3D75);
        org.junit.Assert.assertNotNull(vector3D82);
        org.junit.Assert.assertNotNull(vector3D84);
        org.junit.Assert.assertNotNull(vector3D85);
    }

    @Test
    public void test1214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1214");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-1.0d), (double) (byte) 10, (double) (byte) 100, (double) 0L, true);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation11 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D12 = rotation11.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation18 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D19 = rotation18.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D12, vector3D19);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation5.applyTo(vector3D12);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation23 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D12, (double) (byte) 0);
        double double24 = rotation23.getQ2();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation25 = rotation23.revert();
        double[][] doubleArray26 = rotation23.getMatrix();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation28 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray26, (double) (byte) 10);
        org.junit.Assert.assertNotNull(vector3D12);
        org.junit.Assert.assertNotNull(vector3D19);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
        org.junit.Assert.assertNotNull(rotation25);
        org.junit.Assert.assertNotNull(doubleArray26);
    }

    @Test
    public void test1215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1215");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation16 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, (double) 1L);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation22 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D23 = rotation22.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation29 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D30 = rotation29.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation31 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D23, vector3D30);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation37 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D38 = rotation37.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation44 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D45 = rotation44.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation51 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D52 = rotation51.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation53 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D45, vector3D52);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation59 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D60 = rotation59.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation66 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D67 = rotation66.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation68 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D60, vector3D67);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation69 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D30, vector3D38, vector3D52, vector3D67);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation70 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D52);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation72 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, (double) 1L);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation74 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, (-116.90457705856772d));
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation76 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, (double) 10);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D77 = rotation76.getAxis();
        java.lang.Class<?> wildcardClass78 = rotation76.getClass();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D23);
        org.junit.Assert.assertNotNull(vector3D30);
        org.junit.Assert.assertNotNull(vector3D38);
        org.junit.Assert.assertNotNull(vector3D45);
        org.junit.Assert.assertNotNull(vector3D52);
        org.junit.Assert.assertNotNull(vector3D60);
        org.junit.Assert.assertNotNull(vector3D67);
        org.junit.Assert.assertNotNull(vector3D77);
        org.junit.Assert.assertNotNull(wildcardClass78);
    }

    @Test
    public void test1216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1216");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-9.649660284921133d), 0.47438148773598054d, (-0.5322022524502927d), (double) '4', true);
    }

    @Test
    public void test1217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1217");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double13 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation5, rotation12);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation19 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D20 = rotation19.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation26 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double27 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation19, rotation26);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation28 = rotation12.applyInverseTo(rotation19);
        double double29 = rotation28.getQ1();
        double double30 = rotation28.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder31 = null;
        double[] doubleArray32 = rotation28.getAngles(rotationOrder31);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation38 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation44 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-1.0d), (double) (byte) 10, (double) (byte) 100, (double) 0L, true);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation50 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D51 = rotation50.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation57 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D58 = rotation57.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation59 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D51, vector3D58);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D60 = rotation44.applyTo(vector3D51);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D61 = rotation38.applyTo(vector3D60);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation63 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D60, (double) 1.0f);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D64 = rotation28.applyTo(vector3D60);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D65 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.geometry.euclidean.threed.Rotation rotation66 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D64, vector3D65);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertNotNull(vector3D20);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertNotNull(rotation28);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 10.015527486617021d + "'", double29 == 10.015527486617021d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.7881701093115122d + "'", double30 == 0.7881701093115122d);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[-0.31746367442260337, 1.2637009275001716, 3.026886383418824]");
        org.junit.Assert.assertNotNull(vector3D51);
        org.junit.Assert.assertNotNull(vector3D58);
        org.junit.Assert.assertNotNull(vector3D60);
        org.junit.Assert.assertNotNull(vector3D61);
        org.junit.Assert.assertNotNull(vector3D64);
    }

    @Test
    public void test1218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1218");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double13 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation5, rotation12);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation19 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D20 = rotation19.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation26 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double27 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation19, rotation26);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation28 = rotation12.applyInverseTo(rotation19);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation34 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D35 = rotation34.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation41 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D42 = rotation41.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation43 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D35, vector3D42);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation45 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D35, (double) 1L);
        double double46 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation19, rotation45);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation47 = rotation45.revert();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D48 = rotation47.getAxis();
        double double49 = rotation47.getAngle();
        double double50 = rotation47.getQ3();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertNotNull(vector3D20);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertNotNull(rotation28);
        org.junit.Assert.assertNotNull(vector3D35);
        org.junit.Assert.assertNotNull(vector3D42);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.9456205751905904d + "'", double46 == 0.9456205751905904d);
        org.junit.Assert.assertNotNull(rotation47);
        org.junit.Assert.assertNotNull(vector3D48);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 1.0d + "'", double49 == 1.0d);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.0d + "'", double50 == 0.0d);
    }

    @Test
    public void test1219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1219");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (short) -1, (-0.1730129508244783d), (-0.1730129508244783d), (double) 10.0f, false);
        double double6 = rotation5.getQ2();
        double double7 = rotation5.getQ0();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation13 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D14 = rotation13.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation20.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation22 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D14, vector3D21);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation28 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation29 = rotation22.applyInverseTo(rotation28);
        double double30 = rotation28.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation36 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D37 = rotation36.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation43 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double44 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation36, rotation43);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation50 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D51 = rotation50.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation57 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D58 = rotation57.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation59 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D51, vector3D58);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation65 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation66 = rotation59.applyInverseTo(rotation65);
        double double67 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation43, rotation59);
        double double68 = rotation59.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation69 = rotation28.applyInverseTo(rotation59);
        double double70 = rotation28.getQ1();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation71 = rotation28.revert();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation72 = rotation5.applyTo(rotation28);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation78 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D79 = rotation78.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation85 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double86 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation78, rotation85);
        double double87 = rotation85.getQ3();
        double double88 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation28, rotation85);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation94 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.3388903615770647d, (double) 0L, 9.649660284921133d, (double) (byte) 100, true);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation95 = rotation85.applyTo(rotation94);
        double double96 = rotation85.getQ1();
        double double97 = rotation85.getQ3();
        double double98 = rotation85.getAngle();
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + (-0.1730129508244783d) + "'", double6 == (-0.1730129508244783d));
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1.0d) + "'", double7 == (-1.0d));
        org.junit.Assert.assertNotNull(vector3D14);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(rotation29);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 3.141592653589793d + "'", double30 == 3.141592653589793d);
        org.junit.Assert.assertNotNull(vector3D37);
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertNotNull(vector3D51);
        org.junit.Assert.assertNotNull(vector3D58);
        org.junit.Assert.assertNotNull(rotation66);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 3.141592653589793d + "'", double67 == 3.141592653589793d);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 0.0d + "'", double68 == 0.0d);
        org.junit.Assert.assertNotNull(rotation69);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 10.0d + "'", double70 == 10.0d);
        org.junit.Assert.assertNotNull(rotation71);
        org.junit.Assert.assertNotNull(rotation72);
        org.junit.Assert.assertNotNull(vector3D79);
        org.junit.Assert.assertTrue(Double.isNaN(double86));
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 1.0d + "'", double87 == 1.0d);
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 0.0d + "'", double88 == 0.0d);
        org.junit.Assert.assertNotNull(rotation95);
        org.junit.Assert.assertTrue("'" + double96 + "' != '" + 10.0d + "'", double96 == 10.0d);
        org.junit.Assert.assertTrue("'" + double97 + "' != '" + 1.0d + "'", double97 == 1.0d);
        org.junit.Assert.assertTrue("'" + double98 + "' != '" + 3.141592653589793d + "'", double98 == 3.141592653589793d);
    }

    @Test
    public void test1220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1220");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.01922366120271981d, (double) 0, 0.7881701093115122d, (-0.1855270382668764d), false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation11 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (short) 10, (double) (byte) 0, 0.01922366120271981d, 0.9949879346007117d, true);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation17 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation23 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-1.0d), (double) (byte) 10, (double) (byte) 100, (double) 0L, true);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation29 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D30 = rotation29.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation36 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D37 = rotation36.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation38 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D30, vector3D37);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D39 = rotation23.applyTo(vector3D30);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D40 = rotation17.applyTo(vector3D39);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation42 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D39, (double) 1.0f);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation48 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D49 = rotation48.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation55 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D56 = rotation55.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation57 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D49, vector3D56);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation63 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D64 = rotation63.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation70 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double71 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation63, rotation70);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation77 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D78 = rotation77.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation84 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double85 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation77, rotation84);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation86 = rotation70.applyInverseTo(rotation77);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D87 = rotation86.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation88 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D49, vector3D87);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D89 = rotation42.applyTo(vector3D49);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D90 = rotation11.applyInverseTo(vector3D49);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D91 = rotation5.applyTo(vector3D49);
        org.junit.Assert.assertNotNull(vector3D30);
        org.junit.Assert.assertNotNull(vector3D37);
        org.junit.Assert.assertNotNull(vector3D39);
        org.junit.Assert.assertNotNull(vector3D40);
        org.junit.Assert.assertNotNull(vector3D49);
        org.junit.Assert.assertNotNull(vector3D56);
        org.junit.Assert.assertNotNull(vector3D64);
        org.junit.Assert.assertTrue(Double.isNaN(double71));
        org.junit.Assert.assertNotNull(vector3D78);
        org.junit.Assert.assertTrue(Double.isNaN(double85));
        org.junit.Assert.assertNotNull(rotation86);
        org.junit.Assert.assertNotNull(vector3D87);
        org.junit.Assert.assertNotNull(vector3D89);
        org.junit.Assert.assertNotNull(vector3D90);
        org.junit.Assert.assertNotNull(vector3D91);
    }

    @Test
    public void test1221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1221");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation21 = rotation14.applyInverseTo(rotation20);
        double double22 = rotation14.getQ2();
        double[][] doubleArray23 = rotation14.getMatrix();
        double double24 = rotation14.getQ2();
        double double25 = rotation14.getQ0();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation26 = rotation14.revert();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(rotation21);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 1.0d + "'", double25 == 1.0d);
        org.junit.Assert.assertNotNull(rotation26);
    }

    @Test
    public void test1222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1222");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (byte) 100, (double) 10L, (double) (short) 100, (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation11 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D12 = rotation11.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation18 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D19 = rotation18.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D12, vector3D19);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation22 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D12, (double) 100L);
        double double23 = rotation22.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation24 = rotation5.applyInverseTo(rotation22);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation30 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D31 = rotation30.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation37 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D38 = rotation37.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation39 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D31, vector3D38);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation45 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D46 = rotation45.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation52 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D53 = rotation52.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation54 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D46, vector3D53);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation60 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D61 = rotation60.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation67 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D68 = rotation67.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation69 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D61, vector3D68);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation70 = rotation54.applyTo(rotation69);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation71 = rotation39.applyTo(rotation70);
        double[][] doubleArray72 = rotation71.getMatrix();
        double double73 = rotation71.getQ1();
        double[][] doubleArray74 = rotation71.getMatrix();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation76 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray74, (double) 100L);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation78 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray74, 0.7881701093115122d);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation80 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray74, 0.9456205751905904d);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation81 = rotation24.applyInverseTo(rotation80);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation87 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(3.1216925665368036d, Double.NaN, 0.33900504942104487d, (double) (-1), true);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation88 = rotation81.applyInverseTo(rotation87);
        org.junit.Assert.assertNotNull(vector3D12);
        org.junit.Assert.assertNotNull(vector3D19);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + (-0.0d) + "'", double23 == (-0.0d));
        org.junit.Assert.assertNotNull(rotation24);
        org.junit.Assert.assertNotNull(vector3D31);
        org.junit.Assert.assertNotNull(vector3D38);
        org.junit.Assert.assertNotNull(vector3D46);
        org.junit.Assert.assertNotNull(vector3D53);
        org.junit.Assert.assertNotNull(vector3D61);
        org.junit.Assert.assertNotNull(vector3D68);
        org.junit.Assert.assertNotNull(rotation70);
        org.junit.Assert.assertNotNull(rotation71);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 0.0d + "'", double73 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertNotNull(rotation81);
        org.junit.Assert.assertNotNull(rotation88);
    }

    @Test
    public void test1223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1223");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation20.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = rotation27.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation29 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D21, vector3D28);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation30 = rotation14.applyTo(rotation29);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation36 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) 10, 0.0d, (double) (byte) 0, 10.0d, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation37 = rotation14.applyTo(rotation36);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation38 = rotation37.revert();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation44 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D45 = rotation44.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation51 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double52 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation44, rotation51);
        double double53 = rotation51.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation59 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D60 = rotation59.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation66 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double67 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation59, rotation66);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation73 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D74 = rotation73.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation80 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D81 = rotation80.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation82 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D74, vector3D81);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation88 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation89 = rotation82.applyInverseTo(rotation88);
        double double90 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation66, rotation82);
        double double91 = rotation82.getQ3();
        double double92 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation51, rotation82);
        double double93 = rotation51.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation94 = rotation38.applyInverseTo(rotation51);
        java.lang.Class<?> wildcardClass95 = rotation38.getClass();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(rotation30);
        org.junit.Assert.assertNotNull(rotation37);
        org.junit.Assert.assertNotNull(rotation38);
        org.junit.Assert.assertNotNull(vector3D45);
        org.junit.Assert.assertTrue(Double.isNaN(double52));
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 1.0d + "'", double53 == 1.0d);
        org.junit.Assert.assertNotNull(vector3D60);
        org.junit.Assert.assertTrue(Double.isNaN(double67));
        org.junit.Assert.assertNotNull(vector3D74);
        org.junit.Assert.assertNotNull(vector3D81);
        org.junit.Assert.assertNotNull(rotation89);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 3.141592653589793d + "'", double90 == 3.141592653589793d);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 0.0d + "'", double91 == 0.0d);
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 3.141592653589793d + "'", double92 == 3.141592653589793d);
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 1.0d + "'", double93 == 1.0d);
        org.junit.Assert.assertNotNull(rotation94);
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test1224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1224");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-0.5519957795875582d), (double) (byte) -1, 0.01922366120271981d, (double) (short) 1, false);
        double double6 = rotation5.getQ0();
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + (-0.5519957795875582d) + "'", double6 == (-0.5519957795875582d));
    }

    @Test
    public void test1225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1225");
        org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.geometry.euclidean.threed.Rotation rotation4 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(rotationOrder0, 0.09756195019404022d, (-0.004923674848035068d), 0.0019129169749405736d);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1226");
        org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.geometry.euclidean.threed.Rotation rotation4 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(rotationOrder0, (double) 'a', 8.62318872287684d, 0.9999958586377851d);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1227");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-0.1855270382668764d), (double) 1, Double.NaN, (double) (short) 100, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation11 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D12 = rotation11.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation18 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D19 = rotation18.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D12, vector3D19);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation26 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D27 = rotation26.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation33 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D34 = rotation33.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D27, vector3D34);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation41 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D42 = rotation41.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation48 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D49 = rotation48.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation50 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D42, vector3D49);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation51 = rotation35.applyTo(rotation50);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation52 = rotation20.applyTo(rotation51);
        double[][] doubleArray53 = rotation52.getMatrix();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation55 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray53, (double) 10);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation57 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray53, (double) (byte) 100);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation59 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray53, 0.0d);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation60 = rotation5.applyInverseTo(rotation59);
        double double61 = rotation5.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder62 = null;
        double[] doubleArray63 = rotation5.getAngles(rotationOrder62);
        org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder64 = null;
        double[] doubleArray65 = rotation5.getAngles(rotationOrder64);
        double double66 = rotation5.getQ3();
        org.junit.Assert.assertNotNull(vector3D12);
        org.junit.Assert.assertNotNull(vector3D19);
        org.junit.Assert.assertNotNull(vector3D27);
        org.junit.Assert.assertNotNull(vector3D34);
        org.junit.Assert.assertNotNull(vector3D42);
        org.junit.Assert.assertNotNull(vector3D49);
        org.junit.Assert.assertNotNull(rotation51);
        org.junit.Assert.assertNotNull(rotation52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(rotation60);
        org.junit.Assert.assertTrue(Double.isNaN(double61));
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[NaN, NaN, NaN]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[NaN, NaN, NaN]");
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 100.0d + "'", double66 == 100.0d);
    }

    @Test
    public void test1228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1228");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation20.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = rotation27.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation29 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D21, vector3D28);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D36 = rotation35.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation42 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D43 = rotation42.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation44 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D36, vector3D43);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation45 = rotation29.applyTo(rotation44);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation46 = rotation14.applyTo(rotation45);
        double[][] doubleArray47 = rotation46.getMatrix();
        double[][] doubleArray48 = rotation46.getMatrix();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation50 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray48, (double) 10.0f);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation52 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray48, (double) 100);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation54 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray48, (-0.0d));
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation56 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray48, 0.09900990099009903d);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D57 = rotation56.getAxis();
        double double58 = rotation56.getAngle();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(rotation45);
        org.junit.Assert.assertNotNull(rotation46);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(vector3D57);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.0d + "'", double58 == 0.0d);
    }

    @Test
    public void test1229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1229");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation16 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, (double) 100L);
        double double17 = rotation16.getQ3();
        double double18 = rotation16.getAngle();
        double[][] doubleArray19 = rotation16.getMatrix();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation21 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray19, 0.3388903615770647d);
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-0.0d) + "'", double17 == (-0.0d));
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.5309649148733836d + "'", double18 == 0.5309649148733836d);
        org.junit.Assert.assertNotNull(doubleArray19);
    }

    @Test
    public void test1230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1230");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) 10, 0.0d, (double) (byte) 0, 10.0d, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation11 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (byte) 100, (double) 10L, (double) (short) 100, (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation17 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D18 = rotation17.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation24 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D25 = rotation24.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation26 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D18, vector3D25);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation28 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D18, (double) 100L);
        double double29 = rotation28.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation30 = rotation11.applyInverseTo(rotation28);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation31 = rotation5.applyInverseTo(rotation28);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation32 = rotation31.revert();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation33 = org.apache.commons.math.geometry.euclidean.threed.Rotation.IDENTITY;
        double double34 = rotation33.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = rotation33.revert();
        double double36 = rotation33.getQ1();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation42 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D43 = rotation42.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation49 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D50 = rotation49.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation51 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D43, vector3D50);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation57 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D58 = rotation57.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation64 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D65 = rotation64.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation66 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D58, vector3D65);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation72 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D73 = rotation72.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation79 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D80 = rotation79.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation81 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D73, vector3D80);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation82 = rotation66.applyTo(rotation81);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation83 = rotation51.applyTo(rotation82);
        double[][] doubleArray84 = rotation83.getMatrix();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation85 = rotation33.applyInverseTo(rotation83);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation86 = rotation31.applyTo(rotation33);
        double double87 = rotation86.getQ2();
        org.junit.Assert.assertNotNull(vector3D18);
        org.junit.Assert.assertNotNull(vector3D25);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + (-0.0d) + "'", double29 == (-0.0d));
        org.junit.Assert.assertNotNull(rotation30);
        org.junit.Assert.assertNotNull(rotation31);
        org.junit.Assert.assertNotNull(rotation32);
        org.junit.Assert.assertNotNull(rotation33);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
        org.junit.Assert.assertNotNull(rotation35);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.0d + "'", double36 == 0.0d);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(vector3D50);
        org.junit.Assert.assertNotNull(vector3D58);
        org.junit.Assert.assertNotNull(vector3D65);
        org.junit.Assert.assertNotNull(vector3D73);
        org.junit.Assert.assertNotNull(vector3D80);
        org.junit.Assert.assertNotNull(rotation82);
        org.junit.Assert.assertNotNull(rotation83);
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertNotNull(rotation85);
        org.junit.Assert.assertNotNull(rotation86);
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 3.7105407653375275d + "'", double87 == 3.7105407653375275d);
    }

    @Test
    public void test1231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1231");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-0.0d), 0.09949879346007118d, (double) (-1L), 0.0d, true);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation11 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D12 = rotation11.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation18 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D19 = rotation18.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D12, vector3D19);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation22 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D12, (double) 100L);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation28 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-1.0d), (double) (byte) 10, (double) (byte) 100, (double) 0L, true);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation34 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D35 = rotation34.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation41 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D42 = rotation41.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation43 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D35, vector3D42);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D44 = rotation28.applyTo(vector3D35);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation50 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D51 = rotation50.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation57 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D58 = rotation57.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation64 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D65 = rotation64.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation66 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D58, vector3D65);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation68 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D58, (double) 100L);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation69 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D51, vector3D58);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation75 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D76 = rotation75.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation77 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D12, vector3D44, vector3D58, vector3D76);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation79 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D58, (double) 1.0f);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation81 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D58, (double) (short) 10);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D82 = rotation81.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D83 = rotation5.applyInverseTo(vector3D82);
        double double84 = rotation5.getQ0();
        double double85 = rotation5.getAngle();
        double double86 = rotation5.getAngle();
        double double87 = rotation5.getQ3();
        org.junit.Assert.assertNotNull(vector3D12);
        org.junit.Assert.assertNotNull(vector3D19);
        org.junit.Assert.assertNotNull(vector3D35);
        org.junit.Assert.assertNotNull(vector3D42);
        org.junit.Assert.assertNotNull(vector3D44);
        org.junit.Assert.assertNotNull(vector3D51);
        org.junit.Assert.assertNotNull(vector3D58);
        org.junit.Assert.assertNotNull(vector3D65);
        org.junit.Assert.assertNotNull(vector3D76);
        org.junit.Assert.assertNotNull(vector3D82);
        org.junit.Assert.assertNotNull(vector3D83);
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + (-0.0d) + "'", double84 == (-0.0d));
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 3.141592653589793d + "'", double85 == 3.141592653589793d);
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 3.141592653589793d + "'", double86 == 3.141592653589793d);
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 0.0d + "'", double87 == 0.0d);
    }

    @Test
    public void test1232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1232");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation20.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = rotation27.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation29 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D21, vector3D28);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D36 = rotation35.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation42 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D43 = rotation42.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation44 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D36, vector3D43);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation45 = rotation29.applyTo(rotation44);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation46 = rotation14.applyTo(rotation45);
        double[][] doubleArray47 = rotation46.getMatrix();
        double double48 = rotation46.getQ1();
        double[][] doubleArray49 = rotation46.getMatrix();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation51 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray49, (double) 100L);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation53 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray49, (double) 0);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation55 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray49, (double) 'a');
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation57 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray49, 28.016837073341897d);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation63 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D64 = rotation63.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation70 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D71 = rotation70.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation72 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D64, vector3D71);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation74 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D64, (double) 100L);
        double double75 = rotation74.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation76 = rotation74.revert();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation82 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (byte) 100, (double) 10L, (double) (short) 100, (double) 1L, false);
        double double83 = rotation82.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation84 = rotation76.applyInverseTo(rotation82);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D85 = rotation82.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D86 = rotation57.applyInverseTo(vector3D85);
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(rotation45);
        org.junit.Assert.assertNotNull(rotation46);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(vector3D64);
        org.junit.Assert.assertNotNull(vector3D71);
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + (-0.0d) + "'", double75 == (-0.0d));
        org.junit.Assert.assertNotNull(rotation76);
        org.junit.Assert.assertTrue(Double.isNaN(double83));
        org.junit.Assert.assertNotNull(rotation84);
        org.junit.Assert.assertNotNull(vector3D85);
        org.junit.Assert.assertNotNull(vector3D86);
    }

    @Test
    public void test1233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1233");
        org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.geometry.euclidean.threed.Rotation rotation4 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(rotationOrder0, (double) 1L, 0.9524892191720237d, 0.09900990099009903d);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1234");
        org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.geometry.euclidean.threed.Rotation rotation4 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(rotationOrder0, 0.054379424809409445d, (-0.005854811095535375d), (-0.009949438965141721d));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1235");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation16 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, (double) 1L);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation22 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D23 = rotation22.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation29 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D30 = rotation29.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation31 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D23, vector3D30);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation37 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D38 = rotation37.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation44 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D45 = rotation44.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation51 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D52 = rotation51.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation53 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D45, vector3D52);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation59 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D60 = rotation59.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation66 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D67 = rotation66.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation68 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D60, vector3D67);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation69 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D30, vector3D38, vector3D52, vector3D67);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation70 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D52);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation72 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, (double) 1L);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation74 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, (-116.90457705856772d));
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation76 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, (double) 10);
        double double77 = rotation76.getQ2();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D23);
        org.junit.Assert.assertNotNull(vector3D30);
        org.junit.Assert.assertNotNull(vector3D38);
        org.junit.Assert.assertNotNull(vector3D45);
        org.junit.Assert.assertNotNull(vector3D52);
        org.junit.Assert.assertNotNull(vector3D60);
        org.junit.Assert.assertNotNull(vector3D67);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + (-0.6780618572586967d) + "'", double77 == (-0.6780618572586967d));
    }

    @Test
    public void test1236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1236");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double13 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation5, rotation12);
        double double14 = rotation12.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation20.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double28 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation20, rotation27);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation34 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D35 = rotation34.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation41 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D42 = rotation41.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation43 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D35, vector3D42);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation49 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation50 = rotation43.applyInverseTo(rotation49);
        double double51 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation27, rotation43);
        double double52 = rotation43.getQ3();
        double double53 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation12, rotation43);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation59 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) 100, (double) (byte) -1, (double) (short) 10, 0.9456205751905904d, true);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation60 = rotation43.applyTo(rotation59);
        java.lang.Class<?> wildcardClass61 = rotation59.getClass();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1.0d + "'", double14 == 1.0d);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertNotNull(vector3D35);
        org.junit.Assert.assertNotNull(vector3D42);
        org.junit.Assert.assertNotNull(rotation50);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 3.141592653589793d + "'", double51 == 3.141592653589793d);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.0d + "'", double52 == 0.0d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 3.141592653589793d + "'", double53 == 3.141592653589793d);
        org.junit.Assert.assertNotNull(rotation60);
        org.junit.Assert.assertNotNull(wildcardClass61);
    }

    @Test
    public void test1237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1237");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation21 = rotation14.applyInverseTo(rotation20);
        double double22 = rotation20.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation28 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D29 = rotation28.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double36 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation28, rotation35);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation42 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D43 = rotation42.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation49 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D50 = rotation49.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation51 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D43, vector3D50);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation57 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation58 = rotation51.applyInverseTo(rotation57);
        double double59 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation35, rotation51);
        double double60 = rotation51.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation61 = rotation20.applyInverseTo(rotation51);
        double[][] doubleArray62 = rotation51.getMatrix();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D63 = rotation51.getAxis();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(rotation21);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 3.141592653589793d + "'", double22 == 3.141592653589793d);
        org.junit.Assert.assertNotNull(vector3D29);
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(vector3D50);
        org.junit.Assert.assertNotNull(rotation58);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 3.141592653589793d + "'", double59 == 3.141592653589793d);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.0d + "'", double60 == 0.0d);
        org.junit.Assert.assertNotNull(rotation61);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(vector3D63);
    }

    @Test
    public void test1238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1238");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation20.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = rotation27.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation29 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D21, vector3D28);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D36 = rotation35.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation42 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D43 = rotation42.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation44 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D36, vector3D43);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation45 = rotation29.applyTo(rotation44);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation46 = rotation14.applyTo(rotation45);
        double[][] doubleArray47 = rotation46.getMatrix();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation49 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray47, (double) 10);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation51 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray47, (double) (byte) 100);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation53 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray47, (double) (short) 0);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation55 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray47, 0.0d);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation57 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray47, 0.28366218546322625d);
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(rotation45);
        org.junit.Assert.assertNotNull(rotation46);
        org.junit.Assert.assertNotNull(doubleArray47);
    }

    @Test
    public void test1239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1239");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double13 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation5, rotation12);
        double double14 = rotation12.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation20.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = rotation27.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation29 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D21, vector3D28);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D36 = rotation35.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation42 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D43 = rotation42.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation44 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D36, vector3D43);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation45 = rotation29.applyTo(rotation44);
        double double46 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation12, rotation45);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation52 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D53 = rotation52.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation59 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double60 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation52, rotation59);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation66 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D67 = rotation66.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation73 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double74 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation66, rotation73);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation75 = rotation59.applyInverseTo(rotation66);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation76 = rotation12.applyInverseTo(rotation66);
        double double77 = rotation76.getQ0();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D78 = rotation76.getAxis();
        double double79 = rotation76.getAngle();
        double[][] doubleArray80 = rotation76.getMatrix();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 3.141592653589793d + "'", double14 == 3.141592653589793d);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(rotation45);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 3.141592653589793d + "'", double46 == 3.141592653589793d);
        org.junit.Assert.assertNotNull(vector3D53);
        org.junit.Assert.assertTrue(Double.isNaN(double60));
        org.junit.Assert.assertNotNull(vector3D67);
        org.junit.Assert.assertTrue(Double.isNaN(double74));
        org.junit.Assert.assertNotNull(rotation75);
        org.junit.Assert.assertNotNull(rotation76);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + (-0.1730129508244783d) + "'", double77 == (-0.1730129508244783d));
        org.junit.Assert.assertNotNull(vector3D78);
        org.junit.Assert.assertTrue(Double.isNaN(double79));
        org.junit.Assert.assertNotNull(doubleArray80);
    }

    @Test
    public void test1240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1240");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-0.1855270382668764d), (double) 1, Double.NaN, (double) (short) 100, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation11 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D12 = rotation11.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation18 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D19 = rotation18.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D12, vector3D19);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation26 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D27 = rotation26.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation33 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D34 = rotation33.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D27, vector3D34);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation41 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D42 = rotation41.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation48 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D49 = rotation48.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation50 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D42, vector3D49);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation51 = rotation35.applyTo(rotation50);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation52 = rotation20.applyTo(rotation51);
        double[][] doubleArray53 = rotation52.getMatrix();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation55 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray53, (double) 10);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation57 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray53, (double) (byte) 100);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation59 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray53, 0.0d);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation60 = rotation5.applyInverseTo(rotation59);
        double double61 = rotation5.getQ0();
        double double62 = rotation5.getQ3();
        org.junit.Assert.assertNotNull(vector3D12);
        org.junit.Assert.assertNotNull(vector3D19);
        org.junit.Assert.assertNotNull(vector3D27);
        org.junit.Assert.assertNotNull(vector3D34);
        org.junit.Assert.assertNotNull(vector3D42);
        org.junit.Assert.assertNotNull(vector3D49);
        org.junit.Assert.assertNotNull(rotation51);
        org.junit.Assert.assertNotNull(rotation52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(rotation60);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + (-0.1855270382668764d) + "'", double61 == (-0.1855270382668764d));
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 100.0d + "'", double62 == 100.0d);
    }

    @Test
    public void test1241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1241");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.06415703545444096d, 32.0d, (double) (short) -1, 3.141592653589793d, true);
    }

    @Test
    public void test1242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1242");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation16 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, (double) 100L);
        double double17 = rotation16.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation18 = rotation16.revert();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation24 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (byte) 100, (double) 10L, (double) (short) 100, (double) 1L, false);
        double double25 = rotation24.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation26 = rotation18.applyInverseTo(rotation24);
        double double27 = rotation24.getQ0();
        double double28 = rotation24.getQ0();
        double double29 = rotation24.getQ0();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-0.0d) + "'", double17 == (-0.0d));
        org.junit.Assert.assertNotNull(rotation18);
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertNotNull(rotation26);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 100.0d + "'", double27 == 100.0d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 100.0d + "'", double28 == 100.0d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 100.0d + "'", double29 == 100.0d);
    }

    @Test
    public void test1243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1243");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(97.0d, 0.9456205751905904d, (double) (byte) 10, (-0.013206542220675752d), false);
    }

    @Test
    public void test1244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1244");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-0.9649660284921133d), (double) (short) 100, 0.0d, (double) 1.0f, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation11 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D12 = rotation11.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation18 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D19 = rotation18.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D12, vector3D19);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation22 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D12, (double) 100L);
        double double23 = rotation22.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation24 = rotation22.revert();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation30 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (byte) 100, (double) 10L, (double) (short) 100, (double) 1L, false);
        double double31 = rotation30.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation32 = rotation24.applyInverseTo(rotation30);
        double double33 = rotation32.getQ0();
        double double34 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation5, rotation32);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D35 = rotation5.getAxis();
        org.junit.Assert.assertNotNull(vector3D12);
        org.junit.Assert.assertNotNull(vector3D19);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + (-0.0d) + "'", double23 == (-0.0d));
        org.junit.Assert.assertNotNull(rotation24);
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertNotNull(rotation32);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 116.90457705856772d + "'", double33 == 116.90457705856772d);
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertNotNull(vector3D35);
    }

    @Test
    public void test1245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1245");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (short) 100, 0.2199735373126486d, 17.66239947251099d, (-0.005854811095535375d), false);
    }

    @Test
    public void test1246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1246");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation11 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-1.0d), (double) (byte) 10, (double) (byte) 100, (double) 0L, true);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation17 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D18 = rotation17.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation24 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D25 = rotation24.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation26 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D18, vector3D25);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D27 = rotation11.applyTo(vector3D18);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = rotation5.applyTo(vector3D27);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation34 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-0.1855270382668764d), (double) 10, (double) (short) -1, (double) 100.0f, false);
        double[][] doubleArray35 = rotation34.getMatrix();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation41 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D42 = rotation41.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation48 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D49 = rotation48.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation50 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D42, vector3D49);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation52 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D42, (double) 100L);
        double double53 = rotation52.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation54 = rotation52.revert();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation60 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (byte) 100, (double) 10L, (double) (short) 100, (double) 1L, false);
        double double61 = rotation60.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation62 = rotation54.applyInverseTo(rotation60);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation63 = rotation34.applyInverseTo(rotation62);
        double double64 = rotation63.getQ1();
        double double65 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation5, rotation63);
        double double66 = rotation63.getQ0();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation67 = rotation63.revert();
        double double68 = rotation63.getQ1();
        org.junit.Assert.assertNotNull(vector3D18);
        org.junit.Assert.assertNotNull(vector3D25);
        org.junit.Assert.assertNotNull(vector3D27);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(vector3D42);
        org.junit.Assert.assertNotNull(vector3D49);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + (-0.0d) + "'", double53 == (-0.0d));
        org.junit.Assert.assertNotNull(rotation54);
        org.junit.Assert.assertTrue(Double.isNaN(double61));
        org.junit.Assert.assertNotNull(rotation62);
        org.junit.Assert.assertNotNull(rotation63);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 8960.928033465932d + "'", double64 == 8960.928033465932d);
        org.junit.Assert.assertTrue(Double.isNaN(double65));
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + (-1579.617450290328d) + "'", double66 == (-1579.617450290328d));
        org.junit.Assert.assertNotNull(rotation67);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 8960.928033465932d + "'", double68 == 8960.928033465932d);
    }

    @Test
    public void test1247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1247");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-1.0d), (double) (byte) 10, (double) (byte) 100, (double) 0L, true);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation11 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D12 = rotation11.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation5.applyInverseTo(vector3D12);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation19 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D20 = rotation19.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation26 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D27 = rotation26.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation28 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D20, vector3D27);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation30 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D20, (double) 1L);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation31 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D13, vector3D20);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation37 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D38 = rotation37.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation44 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D45 = rotation44.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation46 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D38, vector3D45);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation47 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D13, vector3D38);
        double double48 = rotation47.getQ0();
        org.junit.Assert.assertNotNull(vector3D12);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D20);
        org.junit.Assert.assertNotNull(vector3D27);
        org.junit.Assert.assertNotNull(vector3D38);
        org.junit.Assert.assertNotNull(vector3D45);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.7739829449345762d + "'", double48 == 0.7739829449345762d);
    }

    @Test
    public void test1248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1248");
        org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.geometry.euclidean.threed.Rotation rotation4 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(rotationOrder0, 1.0d, 9.999000062556641d, (double) 100L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1249");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-0.8156840252218559d), 0.0d, (-12.771588128375658d), (double) 10, true);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation11 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-1.0d), (double) (byte) 10, (double) (byte) 100, (double) 0L, true);
        org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder12 = null;
        double[] doubleArray13 = rotation11.getAngles(rotationOrder12);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation19 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D20 = rotation19.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation26 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double27 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation19, rotation26);
        double double28 = rotation26.getAngle();
        double double29 = rotation26.getAngle();
        double double30 = rotation26.getQ0();
        double double31 = rotation26.getQ0();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation37 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D38 = rotation37.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation44 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D45 = rotation44.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation46 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D38, vector3D45);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation48 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D38, (double) 100L);
        double double49 = rotation48.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation50 = rotation48.revert();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation56 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (byte) 100, (double) 10L, (double) (short) 100, (double) 1L, false);
        double double57 = rotation56.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation58 = rotation50.applyInverseTo(rotation56);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D59 = rotation56.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D60 = rotation26.applyInverseTo(vector3D59);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D61 = rotation11.applyInverseTo(vector3D59);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D62 = rotation5.applyInverseTo(vector3D59);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[-0.09966865249116204, 3.121692566536803, 0.09966865249116204]");
        org.junit.Assert.assertNotNull(vector3D20);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 3.141592653589793d + "'", double28 == 3.141592653589793d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 3.141592653589793d + "'", double29 == 3.141592653589793d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d);
        org.junit.Assert.assertNotNull(vector3D38);
        org.junit.Assert.assertNotNull(vector3D45);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + (-0.0d) + "'", double49 == (-0.0d));
        org.junit.Assert.assertNotNull(rotation50);
        org.junit.Assert.assertTrue(Double.isNaN(double57));
        org.junit.Assert.assertNotNull(rotation58);
        org.junit.Assert.assertNotNull(vector3D59);
        org.junit.Assert.assertNotNull(vector3D60);
        org.junit.Assert.assertNotNull(vector3D61);
        org.junit.Assert.assertNotNull(vector3D62);
    }

    @Test
    public void test1250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1250");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) 0, (double) 0, (double) (short) 1, (double) (byte) 1, false);
        double double6 = rotation5.getQ1();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation19 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D20 = rotation19.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation21 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D13, vector3D20);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation23 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D13, (double) 100L);
        double double24 = rotation23.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation25 = rotation23.revert();
        double double26 = rotation25.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D27 = rotation25.getAxis();
        double double28 = rotation25.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D29 = rotation25.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) 0, 100.0d, (double) (short) 100, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation41 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-1.0d), (double) (byte) 10, (double) (byte) 100, (double) 0L, true);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation47 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D48 = rotation47.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation54 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D55 = rotation54.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation56 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D48, vector3D55);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D57 = rotation41.applyTo(vector3D48);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation59 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D48, 0.9996303825414301d);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D60 = rotation35.applyInverseTo(vector3D48);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation62 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D60, (-0.1855270382668764d));
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation63 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D29, vector3D60);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D64 = rotation5.applyTo(vector3D60);
        java.lang.Class<?> wildcardClass65 = vector3D64.getClass();
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D20);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + (-0.0d) + "'", double24 == (-0.0d));
        org.junit.Assert.assertNotNull(rotation25);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + (-0.0d) + "'", double26 == (-0.0d));
        org.junit.Assert.assertNotNull(vector3D27);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.5309649148733836d + "'", double28 == 0.5309649148733836d);
        org.junit.Assert.assertNotNull(vector3D29);
        org.junit.Assert.assertNotNull(vector3D48);
        org.junit.Assert.assertNotNull(vector3D55);
        org.junit.Assert.assertNotNull(vector3D57);
        org.junit.Assert.assertNotNull(vector3D60);
        org.junit.Assert.assertNotNull(vector3D64);
        org.junit.Assert.assertNotNull(wildcardClass65);
    }

    @Test
    public void test1251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1251");
        org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.geometry.euclidean.threed.Rotation rotation4 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(rotationOrder0, 0.6331541195548093d, 9.999000062556641d, (-0.8156840252218559d));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1252");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) 10.0f, 0.7881701093115122d, (-0.1730129508244783d), (double) (byte) 0, true);
        double double6 = rotation5.getQ0();
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.9967600858493159d + "'", double6 == 0.9967600858493159d);
    }

    @Test
    public void test1253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1253");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation16 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, (double) 100L);
        double double17 = rotation16.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation18 = rotation16.revert();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation24 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (byte) 100, (double) 10L, (double) (short) 100, (double) 1L, false);
        double double25 = rotation24.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation26 = rotation18.applyInverseTo(rotation24);
        double double27 = rotation26.getQ3();
        double double28 = rotation26.getQ0();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation29 = rotation26.revert();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D30 = rotation29.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation31 = rotation29.revert();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-0.0d) + "'", double17 == (-0.0d));
        org.junit.Assert.assertNotNull(rotation18);
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertNotNull(rotation26);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 17.66239947251099d + "'", double27 == 17.66239947251099d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 116.90457705856772d + "'", double28 == 116.90457705856772d);
        org.junit.Assert.assertNotNull(rotation29);
        org.junit.Assert.assertNotNull(vector3D30);
        org.junit.Assert.assertNotNull(rotation31);
    }

    @Test
    public void test1254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1254");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double13 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation5, rotation12);
        double double14 = rotation12.getAngle();
        double double15 = rotation12.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D16 = rotation12.getAxis();
        java.lang.Class<?> wildcardClass17 = vector3D16.getClass();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 3.141592653589793d + "'", double14 == 3.141592653589793d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 3.141592653589793d + "'", double15 == 3.141592653589793d);
        org.junit.Assert.assertNotNull(vector3D16);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test1255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1255");
        org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.geometry.euclidean.threed.Rotation rotation4 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(rotationOrder0, (double) 'a', 0.577207977069365d, 3.1215942050670744d);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1256");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation20.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = rotation27.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation29 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D21, vector3D28);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D36 = rotation35.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation42 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D43 = rotation42.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation44 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D36, vector3D43);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation45 = rotation29.applyTo(rotation44);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation46 = rotation14.applyTo(rotation45);
        double[][] doubleArray47 = rotation46.getMatrix();
        double double48 = rotation46.getQ1();
        double[][] doubleArray49 = rotation46.getMatrix();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation51 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray49, (double) 100L);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation53 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray49, (double) 0);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation55 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray49, (double) 'a');
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation57 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray49, 28.016837073341897d);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.geometry.euclidean.threed.Rotation rotation59 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray49, (-0.1730129508244783d));
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.geometry.euclidean.threed.NotARotationMatrixException; message: unable to orthogonalize matrix in 10 iterations");
        } catch (org.apache.commons.math.geometry.euclidean.threed.NotARotationMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(rotation45);
        org.junit.Assert.assertNotNull(rotation46);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray49);
    }

    @Test
    public void test1257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1257");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-1.0d), (double) (byte) 10, (double) (byte) 100, (double) 0L, true);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation11 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D12 = rotation11.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation18 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D19 = rotation18.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D12, vector3D19);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation5.applyTo(vector3D12);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) 10, 0.0d, (double) (byte) 0, 10.0d, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation33 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (byte) 100, (double) 10L, (double) (short) 100, (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation39 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D40 = rotation39.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation46 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D47 = rotation46.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation48 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D40, vector3D47);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation50 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D40, (double) 100L);
        double double51 = rotation50.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation52 = rotation33.applyInverseTo(rotation50);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation53 = rotation27.applyInverseTo(rotation50);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation54 = rotation53.revert();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D55 = rotation54.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation56 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D12, vector3D55);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation57 = rotation56.revert();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D58 = rotation57.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D59 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.geometry.euclidean.threed.Rotation rotation60 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D58, vector3D59);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(vector3D12);
        org.junit.Assert.assertNotNull(vector3D19);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D40);
        org.junit.Assert.assertNotNull(vector3D47);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + (-0.0d) + "'", double51 == (-0.0d));
        org.junit.Assert.assertNotNull(rotation52);
        org.junit.Assert.assertNotNull(rotation53);
        org.junit.Assert.assertNotNull(rotation54);
        org.junit.Assert.assertNotNull(vector3D55);
        org.junit.Assert.assertNotNull(rotation57);
        org.junit.Assert.assertNotNull(vector3D58);
    }

    @Test
    public void test1258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1258");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation20.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = rotation27.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation29 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D21, vector3D28);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation30 = rotation14.applyTo(rotation29);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation36 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) 10, 0.0d, (double) (byte) 0, 10.0d, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation37 = rotation14.applyTo(rotation36);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation38 = rotation37.revert();
        double double39 = rotation38.getAngle();
        double[][] doubleArray40 = rotation38.getMatrix();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.geometry.euclidean.threed.Rotation rotation42 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray40, (double) (-1L));
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.geometry.euclidean.threed.NotARotationMatrixException; message: unable to orthogonalize matrix in 10 iterations");
        } catch (org.apache.commons.math.geometry.euclidean.threed.NotARotationMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(rotation30);
        org.junit.Assert.assertNotNull(rotation37);
        org.junit.Assert.assertNotNull(rotation38);
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertNotNull(doubleArray40);
    }

    @Test
    public void test1259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1259");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-1.0d), (double) (byte) 10, (double) (byte) 100, (double) 0L, true);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation11 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D12 = rotation11.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation18 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D19 = rotation18.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D12, vector3D19);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation5.applyTo(vector3D12);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation23 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D12, (double) (byte) 0);
        double double24 = rotation23.getQ2();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation25 = rotation23.revert();
        double[][] doubleArray26 = rotation23.getMatrix();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation28 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray26, 0.5914138605204349d);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation30 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray26, 0.016784652862817887d);
        org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder31 = null;
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray32 = rotation30.getAngles(rotationOrder31);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.geometry.euclidean.threed.CardanEulerSingularityException; message: Euler angles singularity");
        } catch (org.apache.commons.math.geometry.euclidean.threed.CardanEulerSingularityException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(vector3D12);
        org.junit.Assert.assertNotNull(vector3D19);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
        org.junit.Assert.assertNotNull(rotation25);
        org.junit.Assert.assertNotNull(doubleArray26);
    }

    @Test
    public void test1260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1260");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation0 = null;
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation6 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D7 = rotation6.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation13 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D14 = rotation13.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation15 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D7, vector3D14);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation21 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D22 = rotation21.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation28 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D29 = rotation28.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D36 = rotation35.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation37 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D29, vector3D36);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation43 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D44 = rotation43.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation50 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D51 = rotation50.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation52 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D44, vector3D51);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation53 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D14, vector3D22, vector3D36, vector3D51);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation55 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D14, (-0.0d));
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation57 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D14, (double) 1L);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D58 = rotation57.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation64 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-1.0d), (double) (byte) 10, (double) (byte) 100, (double) 0L, true);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation70 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D71 = rotation70.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D72 = rotation64.applyInverseTo(vector3D71);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation78 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D79 = rotation78.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation85 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D86 = rotation85.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation87 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D79, vector3D86);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation89 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D79, (double) 1L);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation90 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D72, vector3D79);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation91 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D58, vector3D72);
        // The following exception was thrown during execution in test generation
        try {
            double double92 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation0, rotation91);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(vector3D7);
        org.junit.Assert.assertNotNull(vector3D14);
        org.junit.Assert.assertNotNull(vector3D22);
        org.junit.Assert.assertNotNull(vector3D29);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D44);
        org.junit.Assert.assertNotNull(vector3D51);
        org.junit.Assert.assertNotNull(vector3D58);
        org.junit.Assert.assertNotNull(vector3D71);
        org.junit.Assert.assertNotNull(vector3D72);
        org.junit.Assert.assertNotNull(vector3D79);
        org.junit.Assert.assertNotNull(vector3D86);
    }

    @Test
    public void test1261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1261");
        org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.geometry.euclidean.threed.Rotation rotation4 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(rotationOrder0, 115.23483371416586d, (-5.7519881927834584E-5d), (double) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1262");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double13 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation5, rotation12);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation19 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D20 = rotation19.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation26 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double27 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation19, rotation26);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation28 = rotation12.applyInverseTo(rotation19);
        double double29 = rotation12.getQ3();
        double double30 = rotation12.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation36 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-1.0d), (double) (byte) 10, (double) (byte) 100, (double) 0L, true);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation42 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D43 = rotation42.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation49 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D50 = rotation49.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation51 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D43, vector3D50);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D52 = rotation36.applyTo(vector3D43);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation54 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D43, (double) (byte) 0);
        double double55 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation12, rotation54);
        double double56 = rotation54.getQ0();
        double double57 = rotation54.getQ2();
        double double58 = rotation54.getQ1();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertNotNull(vector3D20);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertNotNull(rotation28);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 1.0d + "'", double29 == 1.0d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 1.0d + "'", double30 == 1.0d);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(vector3D50);
        org.junit.Assert.assertNotNull(vector3D52);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 3.141592653589793d + "'", double55 == 3.141592653589793d);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 1.0d + "'", double56 == 1.0d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.0d + "'", double57 == 0.0d);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.0d + "'", double58 == 0.0d);
    }

    @Test
    public void test1263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1263");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-1.0d), (double) (byte) 10, (double) (byte) 100, (double) 0L, true);
        org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder6 = null;
        double[] doubleArray7 = rotation5.getAngles(rotationOrder6);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation13 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D14 = rotation13.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double21 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation13, rotation20);
        double double22 = rotation20.getAngle();
        double double23 = rotation20.getAngle();
        double double24 = rotation20.getQ0();
        double double25 = rotation20.getQ0();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation31 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D32 = rotation31.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation38 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D39 = rotation38.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation40 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D32, vector3D39);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation42 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D32, (double) 100L);
        double double43 = rotation42.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation44 = rotation42.revert();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation50 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (byte) 100, (double) 10L, (double) (short) 100, (double) 1L, false);
        double double51 = rotation50.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation52 = rotation44.applyInverseTo(rotation50);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D53 = rotation50.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D54 = rotation20.applyInverseTo(vector3D53);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D55 = rotation5.applyInverseTo(vector3D53);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation61 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-0.1855270382668764d), (double) '4', (-10.0d), (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D62 = rotation61.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation63 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D53, vector3D62);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation64 = rotation63.revert();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation65 = org.apache.commons.math.geometry.euclidean.threed.Rotation.IDENTITY;
        double double66 = rotation65.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation67 = rotation65.revert();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D68 = rotation67.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D69 = rotation64.applyInverseTo(vector3D68);
        java.lang.Class<?> wildcardClass70 = vector3D68.getClass();
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-0.09966865249116204, 3.121692566536803, 0.09966865249116204]");
        org.junit.Assert.assertNotNull(vector3D14);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 3.141592653589793d + "'", double22 == 3.141592653589793d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 3.141592653589793d + "'", double23 == 3.141592653589793d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertNotNull(vector3D32);
        org.junit.Assert.assertNotNull(vector3D39);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + (-0.0d) + "'", double43 == (-0.0d));
        org.junit.Assert.assertNotNull(rotation44);
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertNotNull(rotation52);
        org.junit.Assert.assertNotNull(vector3D53);
        org.junit.Assert.assertNotNull(vector3D54);
        org.junit.Assert.assertNotNull(vector3D55);
        org.junit.Assert.assertNotNull(vector3D62);
        org.junit.Assert.assertNotNull(rotation64);
        org.junit.Assert.assertNotNull(rotation65);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 0.0d + "'", double66 == 0.0d);
        org.junit.Assert.assertNotNull(rotation67);
        org.junit.Assert.assertNotNull(vector3D68);
        org.junit.Assert.assertNotNull(vector3D69);
        org.junit.Assert.assertNotNull(wildcardClass70);
    }

    @Test
    public void test1264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1264");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation16 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, (double) 100L);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation22 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-1.0d), (double) (byte) 10, (double) (byte) 100, (double) 0L, true);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation28 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D29 = rotation28.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D36 = rotation35.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation37 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D29, vector3D36);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D38 = rotation22.applyTo(vector3D29);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation44 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D45 = rotation44.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation51 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D52 = rotation51.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation58 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D59 = rotation58.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation60 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D52, vector3D59);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation62 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D52, (double) 100L);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation63 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D45, vector3D52);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation69 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D70 = rotation69.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation71 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D38, vector3D52, vector3D70);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation77 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D78 = rotation77.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation84 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D85 = rotation84.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation86 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D78, vector3D85);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation87 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D70, vector3D85);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D88 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.geometry.euclidean.threed.Rotation rotation89 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D70, vector3D88);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D29);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D38);
        org.junit.Assert.assertNotNull(vector3D45);
        org.junit.Assert.assertNotNull(vector3D52);
        org.junit.Assert.assertNotNull(vector3D59);
        org.junit.Assert.assertNotNull(vector3D70);
        org.junit.Assert.assertNotNull(vector3D78);
        org.junit.Assert.assertNotNull(vector3D85);
    }

    @Test
    public void test1265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1265");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(10.015527486617021d, 0.09949879346007118d, (double) 0L, 17.66239947251099d, true);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation11 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (short) 100, (-8.717516503499631d), (-0.33900504942104487d), 0.7881701093115122d, false);
        double double12 = rotation11.getQ2();
        double double13 = rotation11.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation19 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D20 = rotation19.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation26 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D27 = rotation26.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation28 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D20, vector3D27);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation34 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D35 = rotation34.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation41 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D42 = rotation41.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation48 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D49 = rotation48.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation50 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D42, vector3D49);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation56 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D57 = rotation56.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation63 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D64 = rotation63.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation65 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D57, vector3D64);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation66 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D27, vector3D35, vector3D49, vector3D64);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation68 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D27, (-0.0d));
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation70 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D27, (-0.1855270382668764d));
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation71 = rotation11.applyInverseTo(rotation70);
        double double72 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation5, rotation71);
        java.lang.Class<?> wildcardClass73 = rotation71.getClass();
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + (-0.33900504942104487d) + "'", double12 == (-0.33900504942104487d));
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.7881701093115122d + "'", double13 == 0.7881701093115122d);
        org.junit.Assert.assertNotNull(vector3D20);
        org.junit.Assert.assertNotNull(vector3D27);
        org.junit.Assert.assertNotNull(vector3D35);
        org.junit.Assert.assertNotNull(vector3D42);
        org.junit.Assert.assertNotNull(vector3D49);
        org.junit.Assert.assertNotNull(vector3D57);
        org.junit.Assert.assertNotNull(vector3D64);
        org.junit.Assert.assertNotNull(rotation71);
        org.junit.Assert.assertTrue(Double.isNaN(double72));
        org.junit.Assert.assertNotNull(wildcardClass73);
    }

    @Test
    public void test1266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1266");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-0.33900504942104487d), (double) 100.0f, (double) 10L, 3.1216925665368036d, true);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation11 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D12 = rotation11.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation18 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D19 = rotation18.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D12, vector3D19);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation26 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D27 = rotation26.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation33 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double34 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation26, rotation33);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation40 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D41 = rotation40.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation47 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double48 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation40, rotation47);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation49 = rotation33.applyInverseTo(rotation40);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D50 = rotation49.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation51 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D12, vector3D50);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation53 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D12, 3.082566122054968d);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D54 = rotation5.applyInverseTo(vector3D12);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation56 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D12, 3.1390038567388605d);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation58 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D12, 10924.868355180524d);
        org.junit.Assert.assertNotNull(vector3D12);
        org.junit.Assert.assertNotNull(vector3D19);
        org.junit.Assert.assertNotNull(vector3D27);
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertNotNull(vector3D41);
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertNotNull(rotation49);
        org.junit.Assert.assertNotNull(vector3D50);
        org.junit.Assert.assertNotNull(vector3D54);
    }

    @Test
    public void test1267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1267");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (-1L), 0.0d, (-0.0d), 17.66239947251099d, false);
        double double6 = rotation5.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D7 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation13 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D14 = rotation13.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation20.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation22 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D14, vector3D21);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation28 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D29 = rotation28.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D36 = rotation35.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation37 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D29, vector3D36);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation43 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D44 = rotation43.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation50 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D51 = rotation50.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation52 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D44, vector3D51);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation53 = rotation37.applyTo(rotation52);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation54 = rotation22.applyTo(rotation53);
        double[][] doubleArray55 = rotation54.getMatrix();
        double double56 = rotation54.getQ1();
        double[][] doubleArray57 = rotation54.getMatrix();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation59 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray57, (double) 100L);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation61 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray57, 0.7881701093115122d);
        double double62 = rotation61.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D63 = rotation61.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation64 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D7, vector3D63);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation66 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D7, (-0.1855270382668764d));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertNotNull(vector3D7);
        org.junit.Assert.assertNotNull(vector3D14);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D29);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D44);
        org.junit.Assert.assertNotNull(vector3D51);
        org.junit.Assert.assertNotNull(rotation53);
        org.junit.Assert.assertNotNull(rotation54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.0d + "'", double56 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 0.0d + "'", double62 == 0.0d);
        org.junit.Assert.assertNotNull(vector3D63);
    }

    @Test
    public void test1268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1268");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.28366218546322625d, 0.016784652862817887d, 0.9967600858493159d, Double.NaN, false);
    }

    @Test
    public void test1269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1269");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.01922366120271981d, (double) 0, 0.7881701093115122d, (-0.1855270382668764d), false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation11 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (byte) 100, (double) 10L, (double) (short) 100, (double) 1L, false);
        double double12 = rotation11.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation13 = rotation5.applyInverseTo(rotation11);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation19 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D20 = rotation19.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation26 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D27 = rotation26.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation28 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D20, vector3D27);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation34 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D35 = rotation34.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation41 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D42 = rotation41.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation48 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D49 = rotation48.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation50 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D42, vector3D49);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation56 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D57 = rotation56.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation63 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D64 = rotation63.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation65 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D57, vector3D64);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation66 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D27, vector3D35, vector3D49, vector3D64);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation68 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D27, (double) 1.0f);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation69 = rotation11.applyTo(rotation68);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertNotNull(rotation13);
        org.junit.Assert.assertNotNull(vector3D20);
        org.junit.Assert.assertNotNull(vector3D27);
        org.junit.Assert.assertNotNull(vector3D35);
        org.junit.Assert.assertNotNull(vector3D42);
        org.junit.Assert.assertNotNull(vector3D49);
        org.junit.Assert.assertNotNull(vector3D57);
        org.junit.Assert.assertNotNull(vector3D64);
        org.junit.Assert.assertNotNull(rotation69);
    }

    @Test
    public void test1270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1270");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation16 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, (double) 100L);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation22 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-1.0d), (double) (byte) 10, (double) (byte) 100, (double) 0L, true);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation28 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D29 = rotation28.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D36 = rotation35.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation37 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D29, vector3D36);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D38 = rotation22.applyTo(vector3D29);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation44 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D45 = rotation44.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation51 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D52 = rotation51.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation58 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D59 = rotation58.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation60 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D52, vector3D59);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation62 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D52, (double) 100L);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation63 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D45, vector3D52);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation69 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D70 = rotation69.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation71 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D38, vector3D52, vector3D70);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation73 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D52, (double) 1.0f);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation74 = rotation73.revert();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D75 = rotation74.getAxis();
        double double76 = rotation74.getQ3();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D29);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D38);
        org.junit.Assert.assertNotNull(vector3D45);
        org.junit.Assert.assertNotNull(vector3D52);
        org.junit.Assert.assertNotNull(vector3D59);
        org.junit.Assert.assertNotNull(vector3D70);
        org.junit.Assert.assertNotNull(rotation74);
        org.junit.Assert.assertNotNull(vector3D75);
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 0.0d + "'", double76 == 0.0d);
    }

    @Test
    public void test1271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1271");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double13 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation5, rotation12);
        double double14 = rotation12.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation20.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = rotation27.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation29 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D21, vector3D28);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D36 = rotation35.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation42 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D43 = rotation42.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation44 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D36, vector3D43);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation45 = rotation29.applyTo(rotation44);
        double double46 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation12, rotation45);
        double double47 = rotation12.getQ0();
        double double48 = rotation12.getAngle();
        double double49 = rotation12.getQ1();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 3.141592653589793d + "'", double14 == 3.141592653589793d);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(rotation45);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 3.141592653589793d + "'", double46 == 3.141592653589793d);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 3.141592653589793d + "'", double48 == 3.141592653589793d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 10.0d + "'", double49 == 10.0d);
    }

    @Test
    public void test1272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1272");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) 10, 0.0d, (double) (byte) 0, 10.0d, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation11 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (byte) 100, (double) 10L, (double) (short) 100, (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation17 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D18 = rotation17.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation24 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D25 = rotation24.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation26 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D18, vector3D25);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation28 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D18, (double) 100L);
        double double29 = rotation28.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation30 = rotation11.applyInverseTo(rotation28);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation31 = rotation5.applyInverseTo(rotation28);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation32 = rotation31.revert();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D33 = rotation32.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation39 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D40 = rotation39.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation46 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double47 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation39, rotation46);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation53 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D54 = rotation53.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation60 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D61 = rotation60.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation62 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D54, vector3D61);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation68 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation69 = rotation62.applyInverseTo(rotation68);
        double double70 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation46, rotation62);
        double double71 = rotation62.getQ3();
        double double72 = rotation62.getQ0();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation73 = rotation32.applyInverseTo(rotation62);
        java.lang.Class<?> wildcardClass74 = rotation32.getClass();
        org.junit.Assert.assertNotNull(vector3D18);
        org.junit.Assert.assertNotNull(vector3D25);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + (-0.0d) + "'", double29 == (-0.0d));
        org.junit.Assert.assertNotNull(rotation30);
        org.junit.Assert.assertNotNull(rotation31);
        org.junit.Assert.assertNotNull(rotation32);
        org.junit.Assert.assertNotNull(vector3D33);
        org.junit.Assert.assertNotNull(vector3D40);
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertNotNull(vector3D54);
        org.junit.Assert.assertNotNull(vector3D61);
        org.junit.Assert.assertNotNull(rotation69);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 3.141592653589793d + "'", double70 == 3.141592653589793d);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 0.0d + "'", double71 == 0.0d);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 1.0d + "'", double72 == 1.0d);
        org.junit.Assert.assertNotNull(rotation73);
        org.junit.Assert.assertNotNull(wildcardClass74);
    }

    @Test
    public void test1273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1273");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.9949438965141721d, (double) ' ', (-0.009949438965141721d), (-0.06415703545444096d), true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation19 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D20 = rotation19.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation21 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D13, vector3D20);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = rotation27.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation34 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D35 = rotation34.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation41 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D42 = rotation41.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation43 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D35, vector3D42);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation49 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D50 = rotation49.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation56 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D57 = rotation56.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation58 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D50, vector3D57);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation59 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D20, vector3D28, vector3D42, vector3D57);
        double double60 = rotation59.getQ1();
        double double61 = rotation59.getQ2();
        double[][] doubleArray62 = rotation59.getMatrix();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation68 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D69 = rotation68.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation75 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double76 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation68, rotation75);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation82 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D83 = rotation82.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation89 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double90 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation82, rotation89);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation91 = rotation75.applyInverseTo(rotation82);
        double double92 = rotation75.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation93 = rotation75.revert();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation94 = rotation59.applyTo(rotation93);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation95 = rotation5.applyTo(rotation94);
        double double96 = rotation94.getQ0();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D20);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D35);
        org.junit.Assert.assertNotNull(vector3D42);
        org.junit.Assert.assertNotNull(vector3D50);
        org.junit.Assert.assertNotNull(vector3D57);
        org.junit.Assert.assertTrue(Double.isNaN(double60));
        org.junit.Assert.assertTrue(Double.isNaN(double61));
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(vector3D69);
        org.junit.Assert.assertTrue(Double.isNaN(double76));
        org.junit.Assert.assertNotNull(vector3D83);
        org.junit.Assert.assertTrue(Double.isNaN(double90));
        org.junit.Assert.assertNotNull(rotation91);
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 1.0d + "'", double92 == 1.0d);
        org.junit.Assert.assertNotNull(rotation93);
        org.junit.Assert.assertNotNull(rotation94);
        org.junit.Assert.assertNotNull(rotation95);
        org.junit.Assert.assertTrue(Double.isNaN(double96));
    }

    @Test
    public void test1274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1274");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-1.0d), (double) (byte) 10, (double) (byte) 100, (double) 0L, true);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation11 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D12 = rotation11.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation5.applyInverseTo(vector3D12);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation19 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D20 = rotation19.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation26 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D27 = rotation26.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation28 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D20, vector3D27);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation30 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D20, (double) 1L);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation31 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D13, vector3D20);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation37 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D38 = rotation37.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation44 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D45 = rotation44.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation46 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D38, vector3D45);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation47 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D13, vector3D38);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation53 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation59 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-1.0d), (double) (byte) 10, (double) (byte) 100, (double) 0L, true);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation65 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D66 = rotation65.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation72 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D73 = rotation72.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation74 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D66, vector3D73);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D75 = rotation59.applyTo(vector3D66);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D76 = rotation53.applyTo(vector3D75);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation82 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-0.1855270382668764d), (double) 10, (double) (short) -1, (double) 100.0f, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation83 = rotation82.revert();
        double double84 = rotation82.getQ2();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D85 = rotation82.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation86 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D75, vector3D85);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation87 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D38, vector3D75);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D88 = rotation87.getAxis();
        java.lang.Class<?> wildcardClass89 = vector3D88.getClass();
        org.junit.Assert.assertNotNull(vector3D12);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D20);
        org.junit.Assert.assertNotNull(vector3D27);
        org.junit.Assert.assertNotNull(vector3D38);
        org.junit.Assert.assertNotNull(vector3D45);
        org.junit.Assert.assertNotNull(vector3D66);
        org.junit.Assert.assertNotNull(vector3D73);
        org.junit.Assert.assertNotNull(vector3D75);
        org.junit.Assert.assertNotNull(vector3D76);
        org.junit.Assert.assertNotNull(rotation83);
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + (-1.0d) + "'", double84 == (-1.0d));
        org.junit.Assert.assertNotNull(vector3D85);
        org.junit.Assert.assertNotNull(vector3D88);
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test1275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1275");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double13 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation5, rotation12);
        double double14 = rotation12.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation20.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = rotation27.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation29 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D21, vector3D28);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D36 = rotation35.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation42 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D43 = rotation42.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation44 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D36, vector3D43);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation45 = rotation29.applyTo(rotation44);
        double double46 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation12, rotation45);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation52 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) 10, 0.0d, (double) (byte) 0, 10.0d, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation58 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (byte) 100, (double) 10L, (double) (short) 100, (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation64 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D65 = rotation64.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation71 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D72 = rotation71.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation73 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D65, vector3D72);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation75 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D65, (double) 100L);
        double double76 = rotation75.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation77 = rotation58.applyInverseTo(rotation75);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation78 = rotation52.applyInverseTo(rotation75);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D79 = rotation75.getAxis();
        double double80 = rotation75.getAngle();
        double double81 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation45, rotation75);
        double double82 = rotation45.getAngle();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 3.141592653589793d + "'", double14 == 3.141592653589793d);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(rotation45);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 3.141592653589793d + "'", double46 == 3.141592653589793d);
        org.junit.Assert.assertNotNull(vector3D65);
        org.junit.Assert.assertNotNull(vector3D72);
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + (-0.0d) + "'", double76 == (-0.0d));
        org.junit.Assert.assertNotNull(rotation77);
        org.junit.Assert.assertNotNull(rotation78);
        org.junit.Assert.assertNotNull(vector3D79);
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 0.5309649148733836d + "'", double80 == 0.5309649148733836d);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 0.5309649148733836d + "'", double81 == 0.5309649148733836d);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 0.0d + "'", double82 == 0.0d);
    }

    @Test
    public void test1276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1276");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (short) 1, (double) 1, (double) 0.0f, 0.9996303825414301d, false);
        double double6 = rotation5.getQ1();
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
    }

    @Test
    public void test1277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1277");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-0.1855270382668764d), (double) 10, (double) (short) -1, (double) 100.0f, false);
        double[][] doubleArray6 = rotation5.getMatrix();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation19 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D20 = rotation19.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation21 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D13, vector3D20);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation23 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D13, (double) 100L);
        double double24 = rotation23.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation25 = rotation23.revert();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation31 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (byte) 100, (double) 10L, (double) (short) 100, (double) 1L, false);
        double double32 = rotation31.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation33 = rotation25.applyInverseTo(rotation31);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation34 = rotation5.applyInverseTo(rotation33);
        double double35 = rotation34.getQ1();
        double double36 = rotation34.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation42 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.9949438965141721d, (-1579.617450290328d), (double) (short) 10, Double.NaN, true);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation43 = rotation34.applyInverseTo(rotation42);
        double double44 = rotation43.getQ3();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D20);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + (-0.0d) + "'", double24 == (-0.0d));
        org.junit.Assert.assertNotNull(rotation25);
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertNotNull(rotation33);
        org.junit.Assert.assertNotNull(rotation34);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 8960.928033465932d + "'", double35 == 8960.928033465932d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 10924.868355180524d + "'", double36 == 10924.868355180524d);
        org.junit.Assert.assertNotNull(rotation43);
        org.junit.Assert.assertTrue(Double.isNaN(double44));
    }

    @Test
    public void test1278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1278");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-1.0d), (double) (byte) 10, (double) (byte) 100, (double) 0L, true);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation11 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D12 = rotation11.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation18 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D19 = rotation18.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D12, vector3D19);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation5.applyTo(vector3D12);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) 10, 0.0d, (double) (byte) 0, 10.0d, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation33 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (byte) 100, (double) 10L, (double) (short) 100, (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation39 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D40 = rotation39.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation46 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D47 = rotation46.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation48 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D40, vector3D47);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation50 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D40, (double) 100L);
        double double51 = rotation50.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation52 = rotation33.applyInverseTo(rotation50);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation53 = rotation27.applyInverseTo(rotation50);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation54 = rotation53.revert();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation55 = rotation54.revert();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D56 = rotation54.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation57 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D21, vector3D56);
        org.junit.Assert.assertNotNull(vector3D12);
        org.junit.Assert.assertNotNull(vector3D19);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D40);
        org.junit.Assert.assertNotNull(vector3D47);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + (-0.0d) + "'", double51 == (-0.0d));
        org.junit.Assert.assertNotNull(rotation52);
        org.junit.Assert.assertNotNull(rotation53);
        org.junit.Assert.assertNotNull(rotation54);
        org.junit.Assert.assertNotNull(rotation55);
        org.junit.Assert.assertNotNull(vector3D56);
    }

    @Test
    public void test1279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1279");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double13 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation5, rotation12);
        double double14 = rotation12.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation20.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double28 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation20, rotation27);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation34 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D35 = rotation34.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation41 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D42 = rotation41.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation43 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D35, vector3D42);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation49 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation50 = rotation43.applyInverseTo(rotation49);
        double double51 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation27, rotation43);
        double double52 = rotation43.getQ3();
        double double53 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation12, rotation43);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation59 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D60 = rotation59.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation66 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D67 = rotation66.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation68 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D60, vector3D67);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation74 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation75 = rotation68.applyInverseTo(rotation74);
        double double76 = rotation68.getQ2();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation77 = rotation43.applyInverseTo(rotation68);
        double double78 = rotation77.getQ3();
        double double79 = rotation77.getQ0();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1.0d + "'", double14 == 1.0d);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertNotNull(vector3D35);
        org.junit.Assert.assertNotNull(vector3D42);
        org.junit.Assert.assertNotNull(rotation50);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 3.141592653589793d + "'", double51 == 3.141592653589793d);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.0d + "'", double52 == 0.0d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 3.141592653589793d + "'", double53 == 3.141592653589793d);
        org.junit.Assert.assertNotNull(vector3D60);
        org.junit.Assert.assertNotNull(vector3D67);
        org.junit.Assert.assertNotNull(rotation75);
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 0.0d + "'", double76 == 0.0d);
        org.junit.Assert.assertNotNull(rotation77);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 0.0d + "'", double78 == 0.0d);
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + (-1.0d) + "'", double79 == (-1.0d));
    }

    @Test
    public void test1280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1280");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double13 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation5, rotation12);
        double double14 = rotation12.getQ3();
        double double15 = rotation12.getQ1();
        double double16 = rotation12.getQ1();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1.0d + "'", double14 == 1.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 10.0d + "'", double15 == 10.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 10.0d + "'", double16 == 10.0d);
    }

    @Test
    public void test1281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1281");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        double double7 = rotation5.getQ0();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D8 = rotation5.getAxis();
        java.lang.Class<?> wildcardClass9 = rotation5.getClass();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.9996303825414301d + "'", double7 == 0.9996303825414301d);
        org.junit.Assert.assertNotNull(vector3D8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test1282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1282");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation20.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = rotation27.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation29 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D21, vector3D28);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D36 = rotation35.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation42 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D43 = rotation42.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation44 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D36, vector3D43);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation45 = rotation29.applyTo(rotation44);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation46 = rotation14.applyTo(rotation45);
        double[][] doubleArray47 = rotation46.getMatrix();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation49 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray47, (double) 10);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation51 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray47, (double) (byte) 100);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation53 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray47, (double) (short) 0);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation55 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray47, (double) 1);
        double double56 = rotation55.getQ0();
        double double57 = rotation55.getQ1();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(rotation45);
        org.junit.Assert.assertNotNull(rotation46);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 1.0d + "'", double56 == 1.0d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.0d + "'", double57 == 0.0d);
    }

    @Test
    public void test1283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1283");
        org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.geometry.euclidean.threed.Rotation rotation4 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(rotationOrder0, (-9.649660284921133d), 3.141592653589793d, 2.566370614359174d);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1284");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double13 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation5, rotation12);
        double double14 = rotation12.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation20.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = rotation27.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation29 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D21, vector3D28);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D36 = rotation35.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation42 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D43 = rotation42.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation44 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D36, vector3D43);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation45 = rotation29.applyTo(rotation44);
        double double46 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation12, rotation45);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation52 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D53 = rotation52.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation59 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double60 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation52, rotation59);
        double double61 = rotation59.getQ1();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation67 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D68 = rotation67.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation74 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D75 = rotation74.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation76 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D68, vector3D75);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation78 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D68, (double) 100L);
        double double79 = rotation78.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation80 = rotation78.revert();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation86 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (byte) 100, (double) 10L, (double) (short) 100, (double) 1L, false);
        double double87 = rotation86.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation88 = rotation80.applyInverseTo(rotation86);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D89 = rotation86.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D90 = rotation59.applyInverseTo(vector3D89);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D91 = rotation12.applyTo(vector3D89);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation93 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D89, 0.33900504942104487d);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation95 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D89, 0.9949879346007117d);
        java.lang.Class<?> wildcardClass96 = rotation95.getClass();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 3.141592653589793d + "'", double14 == 3.141592653589793d);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(rotation45);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 3.141592653589793d + "'", double46 == 3.141592653589793d);
        org.junit.Assert.assertNotNull(vector3D53);
        org.junit.Assert.assertTrue(Double.isNaN(double60));
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 10.0d + "'", double61 == 10.0d);
        org.junit.Assert.assertNotNull(vector3D68);
        org.junit.Assert.assertNotNull(vector3D75);
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + (-0.0d) + "'", double79 == (-0.0d));
        org.junit.Assert.assertNotNull(rotation80);
        org.junit.Assert.assertTrue(Double.isNaN(double87));
        org.junit.Assert.assertNotNull(rotation88);
        org.junit.Assert.assertNotNull(vector3D89);
        org.junit.Assert.assertNotNull(vector3D90);
        org.junit.Assert.assertNotNull(vector3D91);
        org.junit.Assert.assertNotNull(wildcardClass96);
    }

    @Test
    public void test1285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1285");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation16 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, (double) 100L);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation22 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-1.0d), (double) (byte) 10, (double) (byte) 100, (double) 0L, true);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation28 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D29 = rotation28.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D36 = rotation35.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation37 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D29, vector3D36);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D38 = rotation22.applyTo(vector3D29);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation44 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D45 = rotation44.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation51 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D52 = rotation51.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation58 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D59 = rotation58.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation60 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D52, vector3D59);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation62 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D52, (double) 100L);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation63 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D45, vector3D52);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation69 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D70 = rotation69.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation71 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D38, vector3D52, vector3D70);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation73 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D52, (double) 1.0f);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation74 = rotation73.revert();
        double double75 = rotation74.getQ0();
        java.lang.Class<?> wildcardClass76 = rotation74.getClass();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D29);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D38);
        org.junit.Assert.assertNotNull(vector3D45);
        org.junit.Assert.assertNotNull(vector3D52);
        org.junit.Assert.assertNotNull(vector3D59);
        org.junit.Assert.assertNotNull(vector3D70);
        org.junit.Assert.assertNotNull(rotation74);
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + (-0.8775825618903728d) + "'", double75 == (-0.8775825618903728d));
        org.junit.Assert.assertNotNull(wildcardClass76);
    }

    @Test
    public void test1286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1286");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) 10, 0.0d, (double) (byte) 0, 10.0d, false);
        double double6 = rotation5.getQ1();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation19 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D20 = rotation19.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation21 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D13, vector3D20);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = rotation27.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation34 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D35 = rotation34.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation41 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D42 = rotation41.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation43 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D35, vector3D42);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation49 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D50 = rotation49.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation56 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D57 = rotation56.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation58 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D50, vector3D57);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation59 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D20, vector3D28, vector3D42, vector3D57);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D60 = rotation5.applyTo(vector3D42);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation62 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D42, 0.7881701093115122d);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation68 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D69 = rotation68.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation75 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D76 = rotation75.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation77 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D69, vector3D76);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation79 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D69, (double) 100L);
        double double80 = rotation79.getQ1();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation81 = rotation62.applyTo(rotation79);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D82 = rotation62.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation84 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D82, 0.0033900293363519126d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D20);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D35);
        org.junit.Assert.assertNotNull(vector3D42);
        org.junit.Assert.assertNotNull(vector3D50);
        org.junit.Assert.assertNotNull(vector3D57);
        org.junit.Assert.assertNotNull(vector3D60);
        org.junit.Assert.assertNotNull(vector3D69);
        org.junit.Assert.assertNotNull(vector3D76);
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + (-0.1855270382668764d) + "'", double80 == (-0.1855270382668764d));
        org.junit.Assert.assertNotNull(rotation81);
        org.junit.Assert.assertNotNull(vector3D82);
    }

    @Test
    public void test1287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1287");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation20.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = rotation27.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation34 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D35 = rotation34.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation36 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D28, vector3D35);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation42 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D43 = rotation42.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation49 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D50 = rotation49.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation51 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D43, vector3D50);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation52 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D13, vector3D21, vector3D35, vector3D50);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation54 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D50, (double) 1.0f);
        double double55 = rotation54.getAngle();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D35);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(vector3D50);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 1.0d + "'", double55 == 1.0d);
    }

    @Test
    public void test1288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1288");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double13 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation5, rotation12);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation19 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D20 = rotation19.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation26 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D27 = rotation26.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation28 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D20, vector3D27);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation34 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = rotation28.applyInverseTo(rotation34);
        double double36 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation12, rotation28);
        double double37 = rotation12.getQ3();
        double double38 = rotation12.getAngle();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertNotNull(vector3D20);
        org.junit.Assert.assertNotNull(vector3D27);
        org.junit.Assert.assertNotNull(rotation35);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 3.141592653589793d + "'", double36 == 3.141592653589793d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 1.0d + "'", double37 == 1.0d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 3.141592653589793d + "'", double38 == 3.141592653589793d);
    }

    @Test
    public void test1289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1289");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation11 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D12 = rotation11.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation18 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D19 = rotation18.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D12, vector3D19);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation26 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D27 = rotation26.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation33 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D34 = rotation33.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation40 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D41 = rotation40.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation42 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D34, vector3D41);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation48 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D49 = rotation48.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation55 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D56 = rotation55.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation57 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D49, vector3D56);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation58 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D19, vector3D27, vector3D41, vector3D56);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation60 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D27, (double) 1);
        double double61 = rotation60.getQ1();
        org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder62 = null;
        double[] doubleArray63 = rotation60.getAngles(rotationOrder62);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D64 = rotation60.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D65 = rotation5.applyInverseTo(vector3D64);
        java.lang.Class<?> wildcardClass66 = vector3D65.getClass();
        org.junit.Assert.assertNotNull(vector3D12);
        org.junit.Assert.assertNotNull(vector3D19);
        org.junit.Assert.assertNotNull(vector3D27);
        org.junit.Assert.assertNotNull(vector3D34);
        org.junit.Assert.assertNotNull(vector3D41);
        org.junit.Assert.assertNotNull(vector3D49);
        org.junit.Assert.assertNotNull(vector3D56);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 0.33900504942104487d + "'", double61 == 0.33900504942104487d);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[2.356194490192345, 0.9999999999999999, -2.356194490192345]");
        org.junit.Assert.assertNotNull(vector3D64);
        org.junit.Assert.assertNotNull(vector3D65);
        org.junit.Assert.assertNotNull(wildcardClass66);
    }

    @Test
    public void test1290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1290");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation20.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = rotation27.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation29 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D21, vector3D28);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D36 = rotation35.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation42 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D43 = rotation42.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation44 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D36, vector3D43);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation45 = rotation29.applyTo(rotation44);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation46 = rotation14.applyTo(rotation45);
        double[][] doubleArray47 = rotation46.getMatrix();
        double[][] doubleArray48 = rotation46.getMatrix();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation50 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray48, 0.9950846276202212d);
        double[][] doubleArray51 = rotation50.getMatrix();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.geometry.euclidean.threed.Rotation rotation53 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray51, (-0.03877567139094669d));
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.geometry.euclidean.threed.NotARotationMatrixException; message: unable to orthogonalize matrix in 10 iterations");
        } catch (org.apache.commons.math.geometry.euclidean.threed.NotARotationMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(rotation45);
        org.junit.Assert.assertNotNull(rotation46);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray51);
    }

    @Test
    public void test1291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1291");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation16 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, (double) 100L);
        double double17 = rotation16.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation18 = rotation16.revert();
        double double19 = rotation16.getQ0();
        org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder20 = null;
        double[] doubleArray21 = rotation16.getAngles(rotationOrder20);
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-0.0d) + "'", double17 == (-0.0d));
        org.junit.Assert.assertNotNull(rotation18);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.9649660284921133d + "'", double19 == 0.9649660284921133d);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[-0.7853981633974483, 0.530964914873383, 0.7853981633974483]");
    }

    @Test
    public void test1292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1292");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (short) -1, 0.7881701093115122d, 0.0d, (-0.0d), false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation11 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (short) 100, 0.0d, 0.33900504942104487d, 0.0d, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = rotation5.applyTo(rotation11);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation18 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (byte) 100, (double) 10L, (double) (short) 100, (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation24 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) 0, (double) ' ', (double) (byte) 100, 17.66239947251099d, true);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation30 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D31 = rotation30.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation37 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D38 = rotation37.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation39 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D31, vector3D38);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation45 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D46 = rotation45.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation52 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D53 = rotation52.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation54 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D46, vector3D53);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation60 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D61 = rotation60.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation67 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D68 = rotation67.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation69 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D61, vector3D68);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation70 = rotation54.applyTo(rotation69);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation71 = rotation39.applyTo(rotation70);
        double[][] doubleArray72 = rotation71.getMatrix();
        double double73 = rotation71.getQ1();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D74 = rotation71.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D75 = rotation24.applyInverseTo(vector3D74);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D76 = rotation18.applyTo(vector3D74);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation78 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D74, 0.30408632088084614d);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D79 = rotation12.applyInverseTo(vector3D74);
        java.lang.Class<?> wildcardClass80 = vector3D79.getClass();
        org.junit.Assert.assertNotNull(rotation12);
        org.junit.Assert.assertNotNull(vector3D31);
        org.junit.Assert.assertNotNull(vector3D38);
        org.junit.Assert.assertNotNull(vector3D46);
        org.junit.Assert.assertNotNull(vector3D53);
        org.junit.Assert.assertNotNull(vector3D61);
        org.junit.Assert.assertNotNull(vector3D68);
        org.junit.Assert.assertNotNull(rotation70);
        org.junit.Assert.assertNotNull(rotation71);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 0.0d + "'", double73 == 0.0d);
        org.junit.Assert.assertNotNull(vector3D74);
        org.junit.Assert.assertNotNull(vector3D75);
        org.junit.Assert.assertNotNull(vector3D76);
        org.junit.Assert.assertNotNull(vector3D79);
        org.junit.Assert.assertNotNull(wildcardClass80);
    }

    @Test
    public void test1293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1293");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double13 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation5, rotation12);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation19 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D20 = rotation19.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation26 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D27 = rotation26.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation28 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D20, vector3D27);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation34 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = rotation28.applyInverseTo(rotation34);
        double double36 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation12, rotation28);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D37 = rotation12.getAxis();
        double[][] doubleArray38 = rotation12.getMatrix();
        double double39 = rotation12.getQ2();
        double double40 = rotation12.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation46 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) 10, 0.0d, (double) (byte) 0, 10.0d, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation52 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (byte) 100, (double) 10L, (double) (short) 100, (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation58 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D59 = rotation58.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation65 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D66 = rotation65.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation67 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D59, vector3D66);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation69 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D59, (double) 100L);
        double double70 = rotation69.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation71 = rotation52.applyInverseTo(rotation69);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation72 = rotation46.applyInverseTo(rotation69);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation78 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D79 = rotation78.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation85 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D86 = rotation85.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation87 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D79, vector3D86);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation89 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D79, (double) 1L);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D90 = rotation72.applyTo(vector3D79);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D91 = rotation12.applyInverseTo(vector3D79);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation93 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D91, (double) 1);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation95 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D91, (-8.717516503499631d));
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertNotNull(vector3D20);
        org.junit.Assert.assertNotNull(vector3D27);
        org.junit.Assert.assertNotNull(rotation35);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 3.141592653589793d + "'", double36 == 3.141592653589793d);
        org.junit.Assert.assertNotNull(vector3D37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + (-1.0d) + "'", double39 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 3.141592653589793d + "'", double40 == 3.141592653589793d);
        org.junit.Assert.assertNotNull(vector3D59);
        org.junit.Assert.assertNotNull(vector3D66);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + (-0.0d) + "'", double70 == (-0.0d));
        org.junit.Assert.assertNotNull(rotation71);
        org.junit.Assert.assertNotNull(rotation72);
        org.junit.Assert.assertNotNull(vector3D79);
        org.junit.Assert.assertNotNull(vector3D86);
        org.junit.Assert.assertNotNull(vector3D90);
        org.junit.Assert.assertNotNull(vector3D91);
    }

    @Test
    public void test1294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1294");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (byte) 100, (double) 10L, (double) (short) 100, (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation11 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) 0, (double) ' ', (double) (byte) 100, 17.66239947251099d, true);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation17 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D18 = rotation17.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation24 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D25 = rotation24.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation26 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D18, vector3D25);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation32 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D33 = rotation32.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation39 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D40 = rotation39.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation41 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D33, vector3D40);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation47 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D48 = rotation47.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation54 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D55 = rotation54.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation56 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D48, vector3D55);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation57 = rotation41.applyTo(rotation56);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation58 = rotation26.applyTo(rotation57);
        double[][] doubleArray59 = rotation58.getMatrix();
        double double60 = rotation58.getQ1();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D61 = rotation58.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D62 = rotation11.applyInverseTo(vector3D61);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D63 = rotation5.applyTo(vector3D61);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation65 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D63, (-0.33900504942104487d));
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation66 = rotation65.revert();
        org.junit.Assert.assertNotNull(vector3D18);
        org.junit.Assert.assertNotNull(vector3D25);
        org.junit.Assert.assertNotNull(vector3D33);
        org.junit.Assert.assertNotNull(vector3D40);
        org.junit.Assert.assertNotNull(vector3D48);
        org.junit.Assert.assertNotNull(vector3D55);
        org.junit.Assert.assertNotNull(rotation57);
        org.junit.Assert.assertNotNull(rotation58);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.0d + "'", double60 == 0.0d);
        org.junit.Assert.assertNotNull(vector3D61);
        org.junit.Assert.assertNotNull(vector3D62);
        org.junit.Assert.assertNotNull(vector3D63);
        org.junit.Assert.assertNotNull(rotation66);
    }

    @Test
    public void test1295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1295");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation20.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = rotation27.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation29 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D21, vector3D28);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D36 = rotation35.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation42 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D43 = rotation42.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation44 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D36, vector3D43);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation45 = rotation29.applyTo(rotation44);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation46 = rotation14.applyTo(rotation45);
        double[][] doubleArray47 = rotation46.getMatrix();
        double[][] doubleArray48 = rotation46.getMatrix();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation50 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray48, 0.9950846276202212d);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation52 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray48, (double) 0L);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation58 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D59 = rotation58.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation65 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double66 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation58, rotation65);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation72 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D73 = rotation72.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation79 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D80 = rotation79.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation81 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D73, vector3D80);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation87 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation88 = rotation81.applyInverseTo(rotation87);
        double double89 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation65, rotation81);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D90 = rotation65.getAxis();
        double[][] doubleArray91 = rotation65.getMatrix();
        double double92 = rotation65.getQ2();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation93 = rotation52.applyTo(rotation65);
        double double94 = rotation93.getQ2();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(rotation45);
        org.junit.Assert.assertNotNull(rotation46);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(vector3D59);
        org.junit.Assert.assertTrue(Double.isNaN(double66));
        org.junit.Assert.assertNotNull(vector3D73);
        org.junit.Assert.assertNotNull(vector3D80);
        org.junit.Assert.assertNotNull(rotation88);
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 3.141592653589793d + "'", double89 == 3.141592653589793d);
        org.junit.Assert.assertNotNull(vector3D90);
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + (-1.0d) + "'", double92 == (-1.0d));
        org.junit.Assert.assertNotNull(rotation93);
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + (-1.0d) + "'", double94 == (-1.0d));
    }

    @Test
    public void test1296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1296");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) 10, 0.0d, (double) (byte) 0, 10.0d, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation11 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (byte) 100, (double) 10L, (double) (short) 100, (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation17 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D18 = rotation17.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation24 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D25 = rotation24.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation26 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D18, vector3D25);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation28 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D18, (double) 100L);
        double double29 = rotation28.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation30 = rotation11.applyInverseTo(rotation28);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation31 = rotation5.applyInverseTo(rotation28);
        double double32 = rotation5.getQ3();
        double double33 = rotation5.getQ0();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation39 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(28.016837073341897d, 1.0d, 0.3388903615770647d, (double) 10.0f, true);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation40 = rotation5.applyInverseTo(rotation39);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation46 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (short) 10, (double) (byte) 0, 0.01922366120271981d, 0.9949879346007117d, true);
        double double47 = rotation46.getQ2();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D48 = rotation46.getAxis();
        double double49 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation40, rotation46);
        double double50 = rotation40.getQ3();
        org.junit.Assert.assertNotNull(vector3D18);
        org.junit.Assert.assertNotNull(vector3D25);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + (-0.0d) + "'", double29 == (-0.0d));
        org.junit.Assert.assertNotNull(rotation30);
        org.junit.Assert.assertNotNull(rotation31);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 10.0d + "'", double32 == 10.0d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 10.0d + "'", double33 == 10.0d);
        org.junit.Assert.assertNotNull(rotation40);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0019129169749405736d + "'", double47 == 0.0019129169749405736d);
        org.junit.Assert.assertNotNull(vector3D48);
        org.junit.Assert.assertTrue(Double.isNaN(double49));
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 6.052676660945175d + "'", double50 == 6.052676660945175d);
    }

    @Test
    public void test1297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1297");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation20.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = rotation27.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation29 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D21, vector3D28);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation30 = rotation14.applyTo(rotation29);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation36 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) 10, 0.0d, (double) (byte) 0, 10.0d, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation37 = rotation14.applyTo(rotation36);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation38 = rotation37.revert();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation44 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D45 = rotation44.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation51 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double52 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation44, rotation51);
        double double53 = rotation51.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation59 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D60 = rotation59.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation66 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double67 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation59, rotation66);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation73 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D74 = rotation73.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation80 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D81 = rotation80.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation82 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D74, vector3D81);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation88 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation89 = rotation82.applyInverseTo(rotation88);
        double double90 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation66, rotation82);
        double double91 = rotation82.getQ3();
        double double92 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation51, rotation82);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation93 = rotation38.applyInverseTo(rotation82);
        double double94 = rotation93.getAngle();
        double[][] doubleArray95 = rotation93.getMatrix();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.geometry.euclidean.threed.Rotation rotation97 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray95, (double) 100.0f);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.geometry.euclidean.threed.NotARotationMatrixException; message: unable to orthogonalize matrix in 10 iterations");
        } catch (org.apache.commons.math.geometry.euclidean.threed.NotARotationMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(rotation30);
        org.junit.Assert.assertNotNull(rotation37);
        org.junit.Assert.assertNotNull(rotation38);
        org.junit.Assert.assertNotNull(vector3D45);
        org.junit.Assert.assertTrue(Double.isNaN(double52));
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 1.0d + "'", double53 == 1.0d);
        org.junit.Assert.assertNotNull(vector3D60);
        org.junit.Assert.assertTrue(Double.isNaN(double67));
        org.junit.Assert.assertNotNull(vector3D74);
        org.junit.Assert.assertNotNull(vector3D81);
        org.junit.Assert.assertNotNull(rotation89);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 3.141592653589793d + "'", double90 == 3.141592653589793d);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 0.0d + "'", double91 == 0.0d);
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 3.141592653589793d + "'", double92 == 3.141592653589793d);
        org.junit.Assert.assertNotNull(rotation93);
        org.junit.Assert.assertTrue(Double.isNaN(double94));
        org.junit.Assert.assertNotNull(doubleArray95);
    }

    @Test
    public void test1298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1298");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', 0.9856688089870894d, 0.20120377604668613d, (double) 0, true);
    }

    @Test
    public void test1299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1299");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (short) -1, (-0.1730129508244783d), (-0.1730129508244783d), (double) 10.0f, false);
        double double6 = rotation5.getQ2();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation19 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double20 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation12, rotation19);
        double double21 = rotation19.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = rotation27.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation34 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double35 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation27, rotation34);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation41 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D42 = rotation41.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation48 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double49 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation41, rotation48);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation50 = rotation34.applyInverseTo(rotation41);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation51 = rotation19.applyTo(rotation41);
        org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder52 = null;
        double[] doubleArray53 = rotation51.getAngles(rotationOrder52);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation59 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D60 = rotation59.getAxis();
        double double61 = rotation59.getQ0();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation62 = rotation51.applyInverseTo(rotation59);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation68 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D69 = rotation68.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation75 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D76 = rotation75.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation82 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D83 = rotation82.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation84 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D76, vector3D83);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation86 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D76, (double) 100L);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation87 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D69, vector3D76);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D88 = rotation62.applyTo(vector3D76);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D89 = rotation5.applyInverseTo(vector3D88);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation91 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D89, 0.9412132394660416d);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation93 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D89, (double) (-1L));
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + (-0.1730129508244783d) + "'", double6 == (-0.1730129508244783d));
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 3.141592653589793d + "'", double21 == 3.141592653589793d);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertNotNull(vector3D42);
        org.junit.Assert.assertTrue(Double.isNaN(double49));
        org.junit.Assert.assertNotNull(rotation50);
        org.junit.Assert.assertNotNull(rotation51);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[-0.31746367442260337, 1.2637009275001716, 3.026886383418824]");
        org.junit.Assert.assertNotNull(vector3D60);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 0.9996303825414301d + "'", double61 == 0.9996303825414301d);
        org.junit.Assert.assertNotNull(rotation62);
        org.junit.Assert.assertNotNull(vector3D69);
        org.junit.Assert.assertNotNull(vector3D76);
        org.junit.Assert.assertNotNull(vector3D83);
        org.junit.Assert.assertNotNull(vector3D88);
        org.junit.Assert.assertNotNull(vector3D89);
    }

    @Test
    public void test1300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1300");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (short) -1, (-0.8775825618903728d), (double) (byte) 100, 0.3388903615770647d, true);
        double double6 = rotation5.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation7 = rotation5.revert();
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 3.1215942050670744d + "'", double6 == 3.1215942050670744d);
        org.junit.Assert.assertNotNull(rotation7);
    }

    @Test
    public void test1301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1301");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation16 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, (double) 100L);
        double double17 = rotation16.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation18 = rotation16.revert();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation24 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (byte) 100, (double) 10L, (double) (short) 100, (double) 1L, false);
        double double25 = rotation24.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation26 = rotation18.applyInverseTo(rotation24);
        double double27 = rotation18.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation33 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-1.0d), (double) (byte) 10, (double) (byte) 100, (double) 0L, true);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation39 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D40 = rotation39.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation46 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D47 = rotation46.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation48 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D40, vector3D47);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D49 = rotation33.applyTo(vector3D40);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation51 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D40, (double) (byte) 0);
        double double52 = rotation51.getQ2();
        double double53 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation18, rotation51);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D54 = rotation51.getAxis();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-0.0d) + "'", double17 == (-0.0d));
        org.junit.Assert.assertNotNull(rotation18);
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertNotNull(rotation26);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.5309649148733836d + "'", double27 == 0.5309649148733836d);
        org.junit.Assert.assertNotNull(vector3D40);
        org.junit.Assert.assertNotNull(vector3D47);
        org.junit.Assert.assertNotNull(vector3D49);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.0d + "'", double52 == 0.0d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.5309649148733836d + "'", double53 == 0.5309649148733836d);
        org.junit.Assert.assertNotNull(vector3D54);
    }

    @Test
    public void test1302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1302");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation0 = org.apache.commons.math.geometry.euclidean.threed.Rotation.IDENTITY;
        double double1 = rotation0.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation2 = rotation0.revert();
        double double3 = rotation0.getQ1();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation9 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D10 = rotation9.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation16 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D17 = rotation16.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation18 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D10, vector3D17);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation24 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D25 = rotation24.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation31 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D32 = rotation31.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation33 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D25, vector3D32);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation39 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D40 = rotation39.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation46 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D47 = rotation46.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation48 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D40, vector3D47);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation49 = rotation33.applyTo(rotation48);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation50 = rotation18.applyTo(rotation49);
        double[][] doubleArray51 = rotation50.getMatrix();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation52 = rotation0.applyInverseTo(rotation50);
        double double53 = rotation0.getQ1();
        double double54 = rotation0.getAngle();
        org.junit.Assert.assertNotNull(rotation0);
        org.junit.Assert.assertTrue("'" + double1 + "' != '" + 0.0d + "'", double1 == 0.0d);
        org.junit.Assert.assertNotNull(rotation2);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertNotNull(vector3D10);
        org.junit.Assert.assertNotNull(vector3D17);
        org.junit.Assert.assertNotNull(vector3D25);
        org.junit.Assert.assertNotNull(vector3D32);
        org.junit.Assert.assertNotNull(vector3D40);
        org.junit.Assert.assertNotNull(vector3D47);
        org.junit.Assert.assertNotNull(rotation49);
        org.junit.Assert.assertNotNull(rotation50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(rotation52);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.0d + "'", double53 == 0.0d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d);
    }

    @Test
    public void test1303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1303");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double13 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation5, rotation12);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation19 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D20 = rotation19.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation26 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double27 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation19, rotation26);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation28 = rotation12.applyInverseTo(rotation19);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation34 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D35 = rotation34.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation41 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D42 = rotation41.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation43 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D35, vector3D42);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation45 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D35, (double) 1L);
        double double46 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation19, rotation45);
        double double47 = rotation45.getQ0();
        double double48 = rotation45.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D49 = rotation45.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation55 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) 10, 0.0d, (double) (byte) 0, 10.0d, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation61 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (byte) 100, (double) 10L, (double) (short) 100, (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation67 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D68 = rotation67.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation74 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D75 = rotation74.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation76 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D68, vector3D75);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation78 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D68, (double) 100L);
        double double79 = rotation78.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation80 = rotation61.applyInverseTo(rotation78);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation81 = rotation55.applyInverseTo(rotation78);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation82 = rotation81.revert();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation83 = rotation82.revert();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D84 = rotation82.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D85 = rotation45.applyTo(vector3D84);
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertNotNull(vector3D20);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertNotNull(rotation28);
        org.junit.Assert.assertNotNull(vector3D35);
        org.junit.Assert.assertNotNull(vector3D42);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.9456205751905904d + "'", double46 == 0.9456205751905904d);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.8775825618903728d + "'", double47 == 0.8775825618903728d);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 1.0d + "'", double48 == 1.0d);
        org.junit.Assert.assertNotNull(vector3D49);
        org.junit.Assert.assertNotNull(vector3D68);
        org.junit.Assert.assertNotNull(vector3D75);
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + (-0.0d) + "'", double79 == (-0.0d));
        org.junit.Assert.assertNotNull(rotation80);
        org.junit.Assert.assertNotNull(rotation81);
        org.junit.Assert.assertNotNull(rotation82);
        org.junit.Assert.assertNotNull(rotation83);
        org.junit.Assert.assertNotNull(vector3D84);
        org.junit.Assert.assertNotNull(vector3D85);
    }

    @Test
    public void test1304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1304");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-0.1855270382668764d), (double) 10, (double) (short) -1, (double) 100.0f, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation6 = rotation5.revert();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation19 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double20 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation12, rotation19);
        double double21 = rotation19.getAngle();
        double double22 = rotation19.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D23 = rotation19.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation24 = rotation6.applyInverseTo(rotation19);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation25 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.geometry.euclidean.threed.Rotation rotation26 = rotation19.applyTo(rotation25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(rotation6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 3.141592653589793d + "'", double21 == 3.141592653589793d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 3.141592653589793d + "'", double22 == 3.141592653589793d);
        org.junit.Assert.assertNotNull(vector3D23);
        org.junit.Assert.assertNotNull(rotation24);
    }

    @Test
    public void test1305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1305");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.9917420766388146d, (double) 0.0f, (-100.0d), 2.566370614359173d, false);
    }

    @Test
    public void test1306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1306");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation16 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, (double) 100L);
        double double17 = rotation16.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation18 = rotation16.revert();
        double double19 = rotation16.getQ3();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-0.0d) + "'", double17 == (-0.0d));
        org.junit.Assert.assertNotNull(rotation18);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + (-0.0d) + "'", double19 == (-0.0d));
    }

    @Test
    public void test1307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1307");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double13 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation5, rotation12);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation19 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D20 = rotation19.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation26 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double27 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation19, rotation26);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation28 = rotation12.applyInverseTo(rotation19);
        double double29 = rotation12.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation30 = rotation12.revert();
        double double31 = rotation12.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation32 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.geometry.euclidean.threed.Rotation rotation33 = rotation12.applyTo(rotation32);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertNotNull(vector3D20);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertNotNull(rotation28);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 1.0d + "'", double29 == 1.0d);
        org.junit.Assert.assertNotNull(rotation30);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 3.141592653589793d + "'", double31 == 3.141592653589793d);
    }

    @Test
    public void test1308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1308");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double13 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation5, rotation12);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation19 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D20 = rotation19.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation26 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double27 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation19, rotation26);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation28 = rotation12.applyInverseTo(rotation19);
        double double29 = rotation28.getQ1();
        double double30 = rotation28.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder31 = null;
        double[] doubleArray32 = rotation28.getAngles(rotationOrder31);
        double double33 = rotation28.getQ2();
        double double34 = rotation28.getQ2();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertNotNull(vector3D20);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertNotNull(rotation28);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 10.015527486617021d + "'", double29 == 10.015527486617021d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.7881701093115122d + "'", double30 == 0.7881701093115122d);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[-0.31746367442260337, 1.2637009275001716, 3.026886383418824]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + (-1.01885404374415d) + "'", double33 == (-1.01885404374415d));
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + (-1.01885404374415d) + "'", double34 == (-1.01885404374415d));
    }

    @Test
    public void test1309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1309");
        org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.geometry.euclidean.threed.Rotation rotation4 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(rotationOrder0, (double) (short) 10, (double) 1.0f, (double) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1310");
        org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.geometry.euclidean.threed.Rotation rotation4 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(rotationOrder0, (-0.8981984963621733d), (-1579.617450290328d), 1.047240853549319d);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1311");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double13 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation5, rotation12);
        double double14 = rotation12.getAngle();
        double double15 = rotation12.getAngle();
        double double16 = rotation12.getQ0();
        double double17 = rotation12.getQ0();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation23 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) 0, (double) ' ', (double) (byte) 100, 17.66239947251099d, true);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation24 = rotation12.applyInverseTo(rotation23);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D25 = rotation24.getAxis();
        double double26 = rotation24.getQ2();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 3.141592653589793d + "'", double14 == 3.141592653589793d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 3.141592653589793d + "'", double15 == 3.141592653589793d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
        org.junit.Assert.assertNotNull(rotation24);
        org.junit.Assert.assertNotNull(vector3D25);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 1.3583484577842444d + "'", double26 == 1.3583484577842444d);
    }

    @Test
    public void test1312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1312");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation20.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = rotation27.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation29 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D21, vector3D28);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation30 = rotation14.applyTo(rotation29);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation36 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) 10, 0.0d, (double) (byte) 0, 10.0d, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation37 = rotation14.applyTo(rotation36);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation38 = rotation37.revert();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation44 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D45 = rotation44.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation51 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double52 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation44, rotation51);
        double double53 = rotation51.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation59 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D60 = rotation59.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation66 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double67 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation59, rotation66);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation73 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D74 = rotation73.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation80 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D81 = rotation80.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation82 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D74, vector3D81);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation88 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation89 = rotation82.applyInverseTo(rotation88);
        double double90 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation66, rotation82);
        double double91 = rotation82.getQ3();
        double double92 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation51, rotation82);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation93 = rotation38.applyInverseTo(rotation82);
        double double94 = rotation93.getAngle();
        double[][] doubleArray95 = rotation93.getMatrix();
        double double96 = rotation93.getQ2();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(rotation30);
        org.junit.Assert.assertNotNull(rotation37);
        org.junit.Assert.assertNotNull(rotation38);
        org.junit.Assert.assertNotNull(vector3D45);
        org.junit.Assert.assertTrue(Double.isNaN(double52));
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 1.0d + "'", double53 == 1.0d);
        org.junit.Assert.assertNotNull(vector3D60);
        org.junit.Assert.assertTrue(Double.isNaN(double67));
        org.junit.Assert.assertNotNull(vector3D74);
        org.junit.Assert.assertNotNull(vector3D81);
        org.junit.Assert.assertNotNull(rotation89);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 3.141592653589793d + "'", double90 == 3.141592653589793d);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 0.0d + "'", double91 == 0.0d);
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 3.141592653589793d + "'", double92 == 3.141592653589793d);
        org.junit.Assert.assertNotNull(rotation93);
        org.junit.Assert.assertTrue(Double.isNaN(double94));
        org.junit.Assert.assertNotNull(doubleArray95);
        org.junit.Assert.assertTrue("'" + double96 + "' != '" + 0.0d + "'", double96 == 0.0d);
    }

    @Test
    public void test1313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1313");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-0.1855270382668764d), (double) 10, (double) (short) -1, (double) 100.0f, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation6 = rotation5.revert();
        double double7 = rotation5.getQ2();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D8 = rotation5.getAxis();
        double double9 = rotation5.getQ2();
        org.junit.Assert.assertNotNull(rotation6);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1.0d) + "'", double7 == (-1.0d));
        org.junit.Assert.assertNotNull(vector3D8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + (-1.0d) + "'", double9 == (-1.0d));
    }

    @Test
    public void test1314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1314");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation20.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = rotation27.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation29 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D21, vector3D28);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D36 = rotation35.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation42 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D43 = rotation42.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation44 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D36, vector3D43);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation45 = rotation29.applyTo(rotation44);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation46 = rotation14.applyTo(rotation45);
        double[][] doubleArray47 = rotation46.getMatrix();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation49 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray47, (double) '4');
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation50 = rotation49.revert();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(rotation45);
        org.junit.Assert.assertNotNull(rotation46);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(rotation50);
    }

    @Test
    public void test1315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1315");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation16 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, (double) 100L);
        double double17 = rotation16.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation18 = rotation16.revert();
        double double19 = rotation18.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation25 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D26 = rotation25.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation32 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D33 = rotation32.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation34 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D26, vector3D33);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation40 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation41 = rotation34.applyInverseTo(rotation40);
        double double42 = rotation34.getQ2();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation48 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D49 = rotation48.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation55 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D56 = rotation55.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation57 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D49, vector3D56);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation63 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D64 = rotation63.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation70 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D71 = rotation70.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation72 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D64, vector3D71);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation73 = rotation57.applyTo(rotation72);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation79 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) 10, 0.0d, (double) (byte) 0, 10.0d, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation80 = rotation57.applyTo(rotation79);
        double double81 = rotation79.getAngle();
        double double82 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation34, rotation79);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation83 = rotation34.revert();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation84 = rotation18.applyInverseTo(rotation34);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation85 = rotation18.revert();
        org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder86 = null;
        double[] doubleArray87 = rotation85.getAngles(rotationOrder86);
        double double88 = rotation85.getQ1();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-0.0d) + "'", double17 == (-0.0d));
        org.junit.Assert.assertNotNull(rotation18);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + (-0.0d) + "'", double19 == (-0.0d));
        org.junit.Assert.assertNotNull(vector3D26);
        org.junit.Assert.assertNotNull(vector3D33);
        org.junit.Assert.assertNotNull(rotation41);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.0d + "'", double42 == 0.0d);
        org.junit.Assert.assertNotNull(vector3D49);
        org.junit.Assert.assertNotNull(vector3D56);
        org.junit.Assert.assertNotNull(vector3D64);
        org.junit.Assert.assertNotNull(vector3D71);
        org.junit.Assert.assertNotNull(rotation73);
        org.junit.Assert.assertNotNull(rotation80);
        org.junit.Assert.assertTrue(Double.isNaN(double81));
        org.junit.Assert.assertTrue(Double.isNaN(double82));
        org.junit.Assert.assertNotNull(rotation83);
        org.junit.Assert.assertNotNull(rotation84);
        org.junit.Assert.assertNotNull(rotation85);
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[-0.7853981633974483, 0.530964914873383, 0.7853981633974483]");
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + (-0.1855270382668764d) + "'", double88 == (-0.1855270382668764d));
    }

    @Test
    public void test1316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1316");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation16 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, (double) 100L);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation22 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-1.0d), (double) (byte) 10, (double) (byte) 100, (double) 0L, true);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation28 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D29 = rotation28.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D36 = rotation35.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation37 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D29, vector3D36);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D38 = rotation22.applyTo(vector3D29);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation44 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D45 = rotation44.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation51 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D52 = rotation51.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation58 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D59 = rotation58.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation60 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D52, vector3D59);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation62 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D52, (double) 100L);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation63 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D45, vector3D52);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation69 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D70 = rotation69.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation71 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D38, vector3D52, vector3D70);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation73 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D52, (double) 1.0f);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation74 = rotation73.revert();
        double double75 = rotation74.getQ0();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D76 = rotation74.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder77 = null;
        double[] doubleArray78 = rotation74.getAngles(rotationOrder77);
        double double79 = rotation74.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation80 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.geometry.euclidean.threed.Rotation rotation81 = rotation74.applyTo(rotation80);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D29);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D38);
        org.junit.Assert.assertNotNull(vector3D45);
        org.junit.Assert.assertNotNull(vector3D52);
        org.junit.Assert.assertNotNull(vector3D59);
        org.junit.Assert.assertNotNull(vector3D70);
        org.junit.Assert.assertNotNull(rotation74);
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + (-0.8775825618903728d) + "'", double75 == (-0.8775825618903728d));
        org.junit.Assert.assertNotNull(vector3D76);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[-0.7853981633974483, 0.9999999999999999, 0.7853981633974483]");
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 1.0d + "'", double79 == 1.0d);
    }

    @Test
    public void test1317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1317");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-1.0d), (double) (byte) 10, (double) (byte) 100, (double) 0L, true);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation11 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D12 = rotation11.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation18 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D19 = rotation18.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D12, vector3D19);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation5.applyTo(vector3D12);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) 10, 0.0d, (double) (byte) 0, 10.0d, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation33 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (byte) 100, (double) 10L, (double) (short) 100, (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation39 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D40 = rotation39.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation46 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D47 = rotation46.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation48 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D40, vector3D47);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation50 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D40, (double) 100L);
        double double51 = rotation50.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation52 = rotation33.applyInverseTo(rotation50);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation53 = rotation27.applyInverseTo(rotation50);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation54 = rotation5.applyTo(rotation27);
        double double55 = rotation27.getQ2();
        org.junit.Assert.assertNotNull(vector3D12);
        org.junit.Assert.assertNotNull(vector3D19);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D40);
        org.junit.Assert.assertNotNull(vector3D47);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + (-0.0d) + "'", double51 == (-0.0d));
        org.junit.Assert.assertNotNull(rotation52);
        org.junit.Assert.assertNotNull(rotation53);
        org.junit.Assert.assertNotNull(rotation54);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d);
    }

    @Test
    public void test1318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1318");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double13 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation5, rotation12);
        double double14 = rotation12.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation20.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double28 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation20, rotation27);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation34 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D35 = rotation34.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation41 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double42 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation34, rotation41);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation43 = rotation27.applyInverseTo(rotation34);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation44 = rotation12.applyTo(rotation34);
        org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder45 = null;
        double[] doubleArray46 = rotation44.getAngles(rotationOrder45);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation52 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D53 = rotation52.getAxis();
        double double54 = rotation52.getQ0();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation55 = rotation44.applyInverseTo(rotation52);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation61 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) 100, 0.33900504942104487d, 0.09949879346007118d, true);
        double double62 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation52, rotation61);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation68 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D69 = rotation68.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation75 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double76 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation68, rotation75);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation82 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D83 = rotation82.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation89 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double90 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation82, rotation89);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation91 = rotation75.applyInverseTo(rotation82);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D92 = rotation91.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D93 = rotation52.applyTo(vector3D92);
        java.lang.Class<?> wildcardClass94 = vector3D92.getClass();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 3.141592653589793d + "'", double14 == 3.141592653589793d);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertNotNull(vector3D35);
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertNotNull(rotation43);
        org.junit.Assert.assertNotNull(rotation44);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[-0.31746367442260337, 1.2637009275001716, 3.026886383418824]");
        org.junit.Assert.assertNotNull(vector3D53);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.9996303825414301d + "'", double54 == 0.9996303825414301d);
        org.junit.Assert.assertNotNull(rotation55);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 3.1030128410395363d + "'", double62 == 3.1030128410395363d);
        org.junit.Assert.assertNotNull(vector3D69);
        org.junit.Assert.assertTrue(Double.isNaN(double76));
        org.junit.Assert.assertNotNull(vector3D83);
        org.junit.Assert.assertTrue(Double.isNaN(double90));
        org.junit.Assert.assertNotNull(rotation91);
        org.junit.Assert.assertNotNull(vector3D92);
        org.junit.Assert.assertNotNull(vector3D93);
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test1319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1319");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation16 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, (double) 100L);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation22 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-1.0d), (double) (byte) 10, (double) (byte) 100, (double) 0L, true);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation28 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D29 = rotation28.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D36 = rotation35.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation37 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D29, vector3D36);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D38 = rotation22.applyTo(vector3D29);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation44 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D45 = rotation44.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation51 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D52 = rotation51.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation58 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D59 = rotation58.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation60 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D52, vector3D59);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation62 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D52, (double) 100L);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation63 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D45, vector3D52);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation69 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D70 = rotation69.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation71 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D38, vector3D52, vector3D70);
        double double72 = rotation71.getQ0();
        org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder73 = null;
        double[] doubleArray74 = rotation71.getAngles(rotationOrder73);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation80 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (short) -1, (-0.1730129508244783d), (-0.1730129508244783d), (double) 10.0f, false);
        double double81 = rotation80.getQ2();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation82 = rotation71.applyInverseTo(rotation80);
        double double83 = rotation71.getQ2();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D29);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D38);
        org.junit.Assert.assertNotNull(vector3D45);
        org.junit.Assert.assertNotNull(vector3D52);
        org.junit.Assert.assertNotNull(vector3D59);
        org.junit.Assert.assertNotNull(vector3D70);
        org.junit.Assert.assertTrue(Double.isNaN(double72));
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[NaN, NaN, NaN]");
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + (-0.1730129508244783d) + "'", double81 == (-0.1730129508244783d));
        org.junit.Assert.assertNotNull(rotation82);
        org.junit.Assert.assertTrue(Double.isNaN(double83));
    }

    @Test
    public void test1320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1320");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double13 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation5, rotation12);
        double double14 = rotation12.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation20.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double28 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation20, rotation27);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation34 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D35 = rotation34.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation41 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double42 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation34, rotation41);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation43 = rotation27.applyInverseTo(rotation34);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation44 = rotation12.applyTo(rotation34);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation45 = rotation44.revert();
        double double46 = rotation44.getAngle();
        double double47 = rotation44.getQ3();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 3.141592653589793d + "'", double14 == 3.141592653589793d);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertNotNull(vector3D35);
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertNotNull(rotation43);
        org.junit.Assert.assertNotNull(rotation44);
        org.junit.Assert.assertNotNull(rotation45);
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.7881701093115122d + "'", double47 == 0.7881701093115122d);
    }

    @Test
    public void test1321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1321");
        org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.geometry.euclidean.threed.Rotation rotation4 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(rotationOrder0, (-0.03877567139094669d), 0.5914138605204349d, (-0.33900504942104487d));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1322");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-0.1855270382668764d), (double) 10, (double) (short) -1, (double) 100.0f, false);
        double[][] doubleArray6 = rotation5.getMatrix();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation19 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D20 = rotation19.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation21 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D13, vector3D20);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation23 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D13, (double) 100L);
        double double24 = rotation23.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation25 = rotation23.revert();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation31 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (byte) 100, (double) 10L, (double) (short) 100, (double) 1L, false);
        double double32 = rotation31.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation33 = rotation25.applyInverseTo(rotation31);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation34 = rotation5.applyInverseTo(rotation33);
        java.lang.Class<?> wildcardClass35 = rotation33.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D20);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + (-0.0d) + "'", double24 == (-0.0d));
        org.junit.Assert.assertNotNull(rotation25);
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertNotNull(rotation33);
        org.junit.Assert.assertNotNull(rotation34);
        org.junit.Assert.assertNotNull(wildcardClass35);
    }

    @Test
    public void test1323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1323");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) 10, 0.0d, (double) (byte) 0, 10.0d, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation11 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (byte) 100, (double) 10L, (double) (short) 100, (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation17 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D18 = rotation17.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation24 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D25 = rotation24.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation26 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D18, vector3D25);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation28 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D18, (double) 100L);
        double double29 = rotation28.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation30 = rotation11.applyInverseTo(rotation28);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation31 = rotation5.applyInverseTo(rotation28);
        double double32 = rotation5.getQ2();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation33 = rotation5.revert();
        double double34 = rotation5.getAngle();
        double[][] doubleArray35 = rotation5.getMatrix();
        org.junit.Assert.assertNotNull(vector3D18);
        org.junit.Assert.assertNotNull(vector3D25);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + (-0.0d) + "'", double29 == (-0.0d));
        org.junit.Assert.assertNotNull(rotation30);
        org.junit.Assert.assertNotNull(rotation31);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
        org.junit.Assert.assertNotNull(rotation33);
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertNotNull(doubleArray35);
    }

    @Test
    public void test1324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1324");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) 10, 0.0d, (double) (byte) 0, 10.0d, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation11 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (byte) 100, (double) 10L, (double) (short) 100, (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation17 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D18 = rotation17.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation24 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D25 = rotation24.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation26 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D18, vector3D25);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation28 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D18, (double) 100L);
        double double29 = rotation28.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation30 = rotation11.applyInverseTo(rotation28);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation31 = rotation5.applyInverseTo(rotation28);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation37 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D38 = rotation37.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation44 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D45 = rotation44.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation46 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D38, vector3D45);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation48 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D38, (double) 1L);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D49 = rotation31.applyTo(vector3D38);
        double double50 = rotation31.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation56 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.9996303825414301d, (double) (short) 0, 3.141592653589793d, 0.09949879346007118d, true);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation57 = rotation31.applyInverseTo(rotation56);
        java.lang.Class<?> wildcardClass58 = rotation31.getClass();
        org.junit.Assert.assertNotNull(vector3D18);
        org.junit.Assert.assertNotNull(vector3D25);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + (-0.0d) + "'", double29 == (-0.0d));
        org.junit.Assert.assertNotNull(rotation30);
        org.junit.Assert.assertNotNull(rotation31);
        org.junit.Assert.assertNotNull(vector3D38);
        org.junit.Assert.assertNotNull(vector3D45);
        org.junit.Assert.assertNotNull(vector3D49);
        org.junit.Assert.assertTrue(Double.isNaN(double50));
        org.junit.Assert.assertNotNull(rotation57);
        org.junit.Assert.assertNotNull(wildcardClass58);
    }

    @Test
    public void test1325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1325");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-1.0d), (double) (byte) 10, (double) (byte) 100, (double) 0L, true);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation11 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D12 = rotation11.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation5.applyInverseTo(vector3D12);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation15 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D12, (double) 100);
        org.junit.Assert.assertNotNull(vector3D12);
        org.junit.Assert.assertNotNull(vector3D13);
    }

    @Test
    public void test1326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1326");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (byte) 100, (double) 10L, (double) (short) 100, (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation11 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D12 = rotation11.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation18 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D19 = rotation18.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D12, vector3D19);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation22 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D12, (double) 100L);
        double double23 = rotation22.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation24 = rotation5.applyInverseTo(rotation22);
        double double25 = rotation5.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D26 = rotation5.getAxis();
        double double27 = rotation5.getAngle();
        double double28 = rotation5.getQ0();
        double double29 = rotation5.getQ1();
        double double30 = rotation5.getAngle();
        double double31 = rotation5.getQ0();
        org.junit.Assert.assertNotNull(vector3D12);
        org.junit.Assert.assertNotNull(vector3D19);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + (-0.0d) + "'", double23 == (-0.0d));
        org.junit.Assert.assertNotNull(rotation24);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 1.0d + "'", double25 == 1.0d);
        org.junit.Assert.assertNotNull(vector3D26);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 100.0d + "'", double28 == 100.0d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 10.0d + "'", double29 == 10.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 100.0d + "'", double31 == 100.0d);
    }

    @Test
    public void test1327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1327");
        org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.geometry.euclidean.threed.Rotation rotation4 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(rotationOrder0, 0.31538323081891095d, 0.027316569631826257d, (-8.717516503499631d));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1328");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation16 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, (double) 1L);
        double double17 = rotation16.getAngle();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 1.0d + "'", double17 == 1.0d);
    }

    @Test
    public void test1329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1329");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation20.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = rotation27.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation29 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D21, vector3D28);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D36 = rotation35.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation42 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D43 = rotation42.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation44 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D36, vector3D43);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation45 = rotation29.applyTo(rotation44);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation46 = rotation14.applyTo(rotation45);
        double double47 = rotation14.getQ3();
        double[][] doubleArray48 = rotation14.getMatrix();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation50 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray48, (double) 10L);
        double double51 = rotation50.getQ0();
        double double52 = rotation50.getQ3();
        double double53 = rotation50.getQ1();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(rotation45);
        org.junit.Assert.assertNotNull(rotation46);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 1.0d + "'", double51 == 1.0d);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.0d + "'", double52 == 0.0d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.0d + "'", double53 == 0.0d);
    }

    @Test
    public void test1330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1330");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation16 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, (double) 100L);
        double double17 = rotation16.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation18 = rotation16.revert();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation24 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (byte) 100, (double) 10L, (double) (short) 100, (double) 1L, false);
        double double25 = rotation24.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation26 = rotation18.applyInverseTo(rotation24);
        double double27 = rotation24.getQ0();
        double double28 = rotation24.getQ0();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D29 = rotation24.getAxis();
        java.lang.Class<?> wildcardClass30 = rotation24.getClass();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-0.0d) + "'", double17 == (-0.0d));
        org.junit.Assert.assertNotNull(rotation18);
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertNotNull(rotation26);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 100.0d + "'", double27 == 100.0d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 100.0d + "'", double28 == 100.0d);
        org.junit.Assert.assertNotNull(vector3D29);
        org.junit.Assert.assertNotNull(wildcardClass30);
    }

    @Test
    public void test1331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1331");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (byte) 100, (double) 10L, (double) (short) 100, (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation11 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D12 = rotation11.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation18 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D19 = rotation18.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D12, vector3D19);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation22 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D12, (double) 100L);
        double double23 = rotation22.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation24 = rotation5.applyInverseTo(rotation22);
        double double25 = rotation5.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D26 = rotation5.getAxis();
        double double27 = rotation5.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation28 = rotation5.revert();
        double double29 = rotation28.getQ2();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation30 = rotation28.revert();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation36 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (byte) 100, (double) 10L, (double) (short) 100, (double) 1L, false);
        double double37 = rotation36.getAngle();
        double[][] doubleArray38 = rotation36.getMatrix();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D39 = rotation36.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D40 = rotation30.applyInverseTo(vector3D39);
        org.junit.Assert.assertNotNull(vector3D12);
        org.junit.Assert.assertNotNull(vector3D19);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + (-0.0d) + "'", double23 == (-0.0d));
        org.junit.Assert.assertNotNull(rotation24);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 1.0d + "'", double25 == 1.0d);
        org.junit.Assert.assertNotNull(vector3D26);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertNotNull(rotation28);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 100.0d + "'", double29 == 100.0d);
        org.junit.Assert.assertNotNull(rotation30);
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(vector3D39);
        org.junit.Assert.assertNotNull(vector3D40);
    }

    @Test
    public void test1332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1332");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double13 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation5, rotation12);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation19 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D20 = rotation19.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation26 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double27 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation19, rotation26);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation28 = rotation12.applyInverseTo(rotation19);
        double double29 = rotation12.getQ3();
        double double30 = rotation12.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation36 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-1.0d), (double) (byte) 10, (double) (byte) 100, (double) 0L, true);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation42 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D43 = rotation42.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation49 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D50 = rotation49.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation51 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D43, vector3D50);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D52 = rotation36.applyTo(vector3D43);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation54 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D43, (double) (byte) 0);
        double double55 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation12, rotation54);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D56 = rotation54.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation58 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D56, (-0.1855270382668764d));
        java.lang.Class<?> wildcardClass59 = rotation58.getClass();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertNotNull(vector3D20);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertNotNull(rotation28);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 1.0d + "'", double29 == 1.0d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 1.0d + "'", double30 == 1.0d);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(vector3D50);
        org.junit.Assert.assertNotNull(vector3D52);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 3.141592653589793d + "'", double55 == 3.141592653589793d);
        org.junit.Assert.assertNotNull(vector3D56);
        org.junit.Assert.assertNotNull(wildcardClass59);
    }

    @Test
    public void test1333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1333");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-0.33900504942104487d), 0.8890808091523411d, (-0.20557451782484024d), 0.0d, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation11 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.09949879346007118d, (-0.0d), (double) 100, (double) 0L, true);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation17 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D18 = rotation17.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation24 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D25 = rotation24.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation26 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D18, vector3D25);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation32 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation33 = rotation26.applyInverseTo(rotation32);
        double double34 = rotation32.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = rotation11.applyInverseTo(rotation32);
        double double36 = rotation35.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation37 = rotation5.applyTo(rotation35);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation43 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D44 = rotation43.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation50 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D51 = rotation50.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation57 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D58 = rotation57.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation59 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D51, vector3D58);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation61 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D51, (double) 100L);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation62 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D44, vector3D51);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation64 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D44, 0.0d);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation66 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D44, 0.7368621407866713d);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D67 = rotation37.applyInverseTo(vector3D44);
        double double68 = rotation37.getAngle();
        org.junit.Assert.assertNotNull(vector3D18);
        org.junit.Assert.assertNotNull(vector3D25);
        org.junit.Assert.assertNotNull(rotation33);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 3.141592653589793d + "'", double34 == 3.141592653589793d);
        org.junit.Assert.assertNotNull(rotation35);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 9.999000062556641d + "'", double36 == 9.999000062556641d);
        org.junit.Assert.assertNotNull(rotation37);
        org.junit.Assert.assertNotNull(vector3D44);
        org.junit.Assert.assertNotNull(vector3D51);
        org.junit.Assert.assertNotNull(vector3D58);
        org.junit.Assert.assertNotNull(vector3D67);
        org.junit.Assert.assertTrue(Double.isNaN(double68));
    }

    @Test
    public void test1334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1334");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double13 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation5, rotation12);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation19 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D20 = rotation19.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation26 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D27 = rotation26.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation28 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D20, vector3D27);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation34 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = rotation28.applyInverseTo(rotation34);
        double double36 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation12, rotation28);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D37 = rotation12.getAxis();
        double[][] doubleArray38 = rotation12.getMatrix();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D39 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation45 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D46 = rotation45.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation52 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D53 = rotation52.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation54 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D46, vector3D53);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation60 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D61 = rotation60.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation67 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D68 = rotation67.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation69 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D61, vector3D68);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation70 = rotation54.applyTo(rotation69);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation76 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) 10, 0.0d, (double) (byte) 0, 10.0d, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation77 = rotation54.applyTo(rotation76);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation78 = rotation77.revert();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation84 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D85 = rotation84.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D86 = rotation78.applyTo(vector3D85);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation87 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D39, vector3D85);
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertNotNull(vector3D20);
        org.junit.Assert.assertNotNull(vector3D27);
        org.junit.Assert.assertNotNull(rotation35);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 3.141592653589793d + "'", double36 == 3.141592653589793d);
        org.junit.Assert.assertNotNull(vector3D37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(vector3D39);
        org.junit.Assert.assertNotNull(vector3D46);
        org.junit.Assert.assertNotNull(vector3D53);
        org.junit.Assert.assertNotNull(vector3D61);
        org.junit.Assert.assertNotNull(vector3D68);
        org.junit.Assert.assertNotNull(rotation70);
        org.junit.Assert.assertNotNull(rotation77);
        org.junit.Assert.assertNotNull(rotation78);
        org.junit.Assert.assertNotNull(vector3D85);
        org.junit.Assert.assertNotNull(vector3D86);
    }

    @Test
    public void test1335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1335");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation20.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = rotation27.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation29 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D21, vector3D28);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D36 = rotation35.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation42 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D43 = rotation42.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation44 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D36, vector3D43);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation45 = rotation29.applyTo(rotation44);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation46 = rotation14.applyTo(rotation45);
        double[][] doubleArray47 = rotation46.getMatrix();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation49 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray47, (double) 10);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation51 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray47, (double) (byte) 100);
        double double52 = rotation51.getAngle();
        java.lang.Class<?> wildcardClass53 = rotation51.getClass();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(rotation45);
        org.junit.Assert.assertNotNull(rotation46);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.0d + "'", double52 == 0.0d);
        org.junit.Assert.assertNotNull(wildcardClass53);
    }

    @Test
    public void test1336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1336");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-0.9649660284921133d), (double) (short) 100, 0.0d, (double) 1.0f, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation11 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D12 = rotation11.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation18 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D19 = rotation18.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D12, vector3D19);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation22 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D12, (double) 100L);
        double double23 = rotation22.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation24 = rotation22.revert();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation30 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (byte) 100, (double) 10L, (double) (short) 100, (double) 1L, false);
        double double31 = rotation30.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation32 = rotation24.applyInverseTo(rotation30);
        double double33 = rotation32.getQ0();
        double double34 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation5, rotation32);
        double double35 = rotation32.getAngle();
        org.junit.Assert.assertNotNull(vector3D12);
        org.junit.Assert.assertNotNull(vector3D19);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + (-0.0d) + "'", double23 == (-0.0d));
        org.junit.Assert.assertNotNull(rotation24);
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertNotNull(rotation32);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 116.90457705856772d + "'", double33 == 116.90457705856772d);
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertTrue(Double.isNaN(double35));
    }

    @Test
    public void test1337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1337");
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.geometry.euclidean.threed.Rotation rotation2 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D0, (-12.771588128375658d));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1338");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-0.1855270382668764d), (double) 1, Double.NaN, (double) (short) 100, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation11 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D12 = rotation11.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation18 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D19 = rotation18.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D12, vector3D19);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation26 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D27 = rotation26.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation33 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D34 = rotation33.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D27, vector3D34);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation36 = rotation20.applyTo(rotation35);
        double double37 = rotation35.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation38 = rotation35.revert();
        double double39 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation5, rotation35);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D40 = rotation35.getAxis();
        org.junit.Assert.assertNotNull(vector3D12);
        org.junit.Assert.assertNotNull(vector3D19);
        org.junit.Assert.assertNotNull(vector3D27);
        org.junit.Assert.assertNotNull(vector3D34);
        org.junit.Assert.assertNotNull(rotation36);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d);
        org.junit.Assert.assertNotNull(rotation38);
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertNotNull(vector3D40);
    }

    @Test
    public void test1339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1339");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) 0, (double) 0, (double) (short) 1, (double) (byte) 1, false);
        double double6 = rotation5.getQ2();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation19 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D20 = rotation19.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation21 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D13, vector3D20);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = rotation27.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation34 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D35 = rotation34.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation36 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D28, vector3D35);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation37 = rotation21.applyTo(rotation36);
        double double38 = rotation36.getAngle();
        double double39 = rotation36.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation45 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D46 = rotation45.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation52 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double53 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation45, rotation52);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation59 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D60 = rotation59.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation66 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double67 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation59, rotation66);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation68 = rotation52.applyInverseTo(rotation59);
        double double69 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation36, rotation52);
        double double70 = rotation52.getQ2();
        double double71 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation5, rotation52);
        double double72 = rotation5.getQ3();
        double double73 = rotation5.getAngle();
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D20);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D35);
        org.junit.Assert.assertNotNull(rotation37);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.0d + "'", double39 == 0.0d);
        org.junit.Assert.assertNotNull(vector3D46);
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertNotNull(vector3D60);
        org.junit.Assert.assertTrue(Double.isNaN(double67));
        org.junit.Assert.assertNotNull(rotation68);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 3.141592653589793d + "'", double69 == 3.141592653589793d);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + (-1.0d) + "'", double70 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 3.141592653589793d + "'", double71 == 3.141592653589793d);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 1.0d + "'", double72 == 1.0d);
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 3.141592653589793d + "'", double73 == 3.141592653589793d);
    }

    @Test
    public void test1340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1340");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation16 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, (double) 100L);
        double double17 = rotation16.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation18 = rotation16.revert();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation24 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D25 = rotation24.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation31 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D32 = rotation31.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation33 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D25, vector3D32);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation39 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D40 = rotation39.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation46 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D47 = rotation46.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation48 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D40, vector3D47);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation49 = rotation33.applyTo(rotation48);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation55 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) 10, 0.0d, (double) (byte) 0, 10.0d, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation56 = rotation33.applyTo(rotation55);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation57 = rotation56.revert();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation58 = rotation16.applyTo(rotation56);
        double[][] doubleArray59 = rotation58.getMatrix();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-0.0d) + "'", double17 == (-0.0d));
        org.junit.Assert.assertNotNull(rotation18);
        org.junit.Assert.assertNotNull(vector3D25);
        org.junit.Assert.assertNotNull(vector3D32);
        org.junit.Assert.assertNotNull(vector3D40);
        org.junit.Assert.assertNotNull(vector3D47);
        org.junit.Assert.assertNotNull(rotation49);
        org.junit.Assert.assertNotNull(rotation56);
        org.junit.Assert.assertNotNull(rotation57);
        org.junit.Assert.assertNotNull(rotation58);
        org.junit.Assert.assertNotNull(doubleArray59);
    }

    @Test
    public void test1341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1341");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (byte) 100, (double) 10L, (double) (short) 100, (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation11 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D12 = rotation11.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation18 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D19 = rotation18.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D12, vector3D19);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation22 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D12, (double) 100L);
        double double23 = rotation22.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation24 = rotation5.applyInverseTo(rotation22);
        double double25 = rotation24.getQ1();
        double double26 = rotation24.getAngle();
        double double27 = rotation24.getQ1();
        org.junit.Assert.assertNotNull(vector3D12);
        org.junit.Assert.assertNotNull(vector3D19);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + (-0.0d) + "'", double23 == (-0.0d));
        org.junit.Assert.assertNotNull(rotation24);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 28.016837073341897d + "'", double25 == 28.016837073341897d);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 28.016837073341897d + "'", double27 == 28.016837073341897d);
    }

    @Test
    public void test1342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1342");
        org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.geometry.euclidean.threed.Rotation rotation4 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(rotationOrder0, 1.3583484577842444d, 0.1610382605737718d, 2.566370614359173d);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1343");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation20.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = rotation27.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation34 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D35 = rotation34.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation36 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D28, vector3D35);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation42 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D43 = rotation42.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation49 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D50 = rotation49.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation51 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D43, vector3D50);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation52 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D13, vector3D21, vector3D35, vector3D50);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation54 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D21, (double) 1);
        double double55 = rotation54.getQ1();
        double double56 = rotation54.getQ1();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D57 = rotation54.getAxis();
        double double58 = rotation54.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder59 = null;
        double[] doubleArray60 = rotation54.getAngles(rotationOrder59);
        double double61 = rotation54.getQ2();
        double double62 = rotation54.getQ2();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D63 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D64 = rotation54.applyTo(vector3D63);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D35);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(vector3D50);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.33900504942104487d + "'", double55 == 0.33900504942104487d);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.33900504942104487d + "'", double56 == 0.33900504942104487d);
        org.junit.Assert.assertNotNull(vector3D57);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 1.0d + "'", double58 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[2.356194490192345, 0.9999999999999999, -2.356194490192345]");
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 0.33900504942104487d + "'", double61 == 0.33900504942104487d);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 0.33900504942104487d + "'", double62 == 0.33900504942104487d);
    }

    @Test
    public void test1344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1344");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation20.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = rotation27.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation29 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D21, vector3D28);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation30 = rotation14.applyTo(rotation29);
        double double31 = rotation29.getAngle();
        double double32 = rotation29.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation38 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) 10, 0.0d, (double) (byte) 0, 10.0d, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation44 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (byte) 100, (double) 10L, (double) (short) 100, (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation50 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D51 = rotation50.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation57 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D58 = rotation57.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation59 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D51, vector3D58);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation61 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D51, (double) 100L);
        double double62 = rotation61.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation63 = rotation44.applyInverseTo(rotation61);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation64 = rotation38.applyInverseTo(rotation61);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation65 = rotation64.revert();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D66 = rotation65.getAxis();
        double double67 = rotation65.getQ1();
        double double68 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation29, rotation65);
        double double69 = rotation29.getQ2();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation75 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D76 = rotation75.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation82 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D83 = rotation82.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation84 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D76, vector3D83);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation90 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation91 = rotation84.applyInverseTo(rotation90);
        double double92 = rotation84.getQ2();
        double[][] doubleArray93 = rotation84.getMatrix();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation95 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray93, 0.7881701093115122d);
        double double96 = rotation95.getAngle();
        double double97 = rotation95.getAngle();
        double double98 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation29, rotation95);
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(rotation30);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
        org.junit.Assert.assertNotNull(vector3D51);
        org.junit.Assert.assertNotNull(vector3D58);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + (-0.0d) + "'", double62 == (-0.0d));
        org.junit.Assert.assertNotNull(rotation63);
        org.junit.Assert.assertNotNull(rotation64);
        org.junit.Assert.assertNotNull(rotation65);
        org.junit.Assert.assertNotNull(vector3D66);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.0d + "'", double67 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double68));
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d);
        org.junit.Assert.assertNotNull(vector3D76);
        org.junit.Assert.assertNotNull(vector3D83);
        org.junit.Assert.assertNotNull(rotation91);
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 0.0d + "'", double92 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertTrue("'" + double96 + "' != '" + 0.0d + "'", double96 == 0.0d);
        org.junit.Assert.assertTrue("'" + double97 + "' != '" + 0.0d + "'", double97 == 0.0d);
        org.junit.Assert.assertTrue("'" + double98 + "' != '" + 0.0d + "'", double98 == 0.0d);
    }

    @Test
    public void test1345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1345");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-0.6780618572586967d), 0.0d, 0.33900504942104487d, 2.4682434157065027d, true);
    }

    @Test
    public void test1346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1346");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double13 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation5, rotation12);
        double double14 = rotation12.getAngle();
        double double15 = rotation12.getAngle();
        double double16 = rotation12.getQ0();
        double double17 = rotation12.getQ0();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation23 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) 0, (double) ' ', (double) (byte) 100, 17.66239947251099d, true);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation24 = rotation12.applyInverseTo(rotation23);
        double double25 = rotation12.getQ2();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 3.141592653589793d + "'", double14 == 3.141592653589793d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 3.141592653589793d + "'", double15 == 3.141592653589793d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
        org.junit.Assert.assertNotNull(rotation24);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + (-1.0d) + "'", double25 == (-1.0d));
    }

    @Test
    public void test1347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1347");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.9985901652033286d, 3.1216032962775833d, 0.7881701093115122d, 0.05506338499281072d, true);
        double double6 = rotation5.getAngle();
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 2.5401670844916904d + "'", double6 == 2.5401670844916904d);
    }

    @Test
    public void test1348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1348");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation16 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, (double) 100L);
        double double17 = rotation16.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation18 = rotation16.revert();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation24 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (byte) 100, (double) 10L, (double) (short) 100, (double) 1L, false);
        double double25 = rotation24.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation26 = rotation18.applyInverseTo(rotation24);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = rotation24.revert();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation28 = rotation24.revert();
        org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder29 = null;
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray30 = rotation28.getAngles(rotationOrder29);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.geometry.euclidean.threed.CardanEulerSingularityException; message: Euler angles singularity");
        } catch (org.apache.commons.math.geometry.euclidean.threed.CardanEulerSingularityException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-0.0d) + "'", double17 == (-0.0d));
        org.junit.Assert.assertNotNull(rotation18);
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertNotNull(rotation26);
        org.junit.Assert.assertNotNull(rotation27);
        org.junit.Assert.assertNotNull(rotation28);
    }

    @Test
    public void test1349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1349");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double13 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation5, rotation12);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation19 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D20 = rotation19.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation26 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D27 = rotation26.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation28 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D20, vector3D27);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation34 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = rotation28.applyInverseTo(rotation34);
        double double36 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation12, rotation28);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D37 = rotation12.getAxis();
        double[][] doubleArray38 = rotation12.getMatrix();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D39 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation45 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) 10, 0.0d, (double) (byte) 0, 10.0d, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation51 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (byte) 100, (double) 10L, (double) (short) 100, (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation57 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D58 = rotation57.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation64 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D65 = rotation64.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation66 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D58, vector3D65);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation68 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D58, (double) 100L);
        double double69 = rotation68.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation70 = rotation51.applyInverseTo(rotation68);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation71 = rotation45.applyInverseTo(rotation68);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation72 = rotation12.applyTo(rotation68);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D73 = rotation12.getAxis();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertNotNull(vector3D20);
        org.junit.Assert.assertNotNull(vector3D27);
        org.junit.Assert.assertNotNull(rotation35);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 3.141592653589793d + "'", double36 == 3.141592653589793d);
        org.junit.Assert.assertNotNull(vector3D37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(vector3D39);
        org.junit.Assert.assertNotNull(vector3D58);
        org.junit.Assert.assertNotNull(vector3D65);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + (-0.0d) + "'", double69 == (-0.0d));
        org.junit.Assert.assertNotNull(rotation70);
        org.junit.Assert.assertNotNull(rotation71);
        org.junit.Assert.assertNotNull(rotation72);
        org.junit.Assert.assertNotNull(vector3D73);
    }

    @Test
    public void test1350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1350");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) 10, 0.0d, (double) (byte) 0, 10.0d, false);
        double double6 = rotation5.getQ1();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation7 = rotation5.revert();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation8 = rotation5.revert();
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(rotation7);
        org.junit.Assert.assertNotNull(rotation8);
    }

    @Test
    public void test1351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1351");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) 100L, 1.0d, (double) (byte) -1, 0.9996303825414301d, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation11 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D12 = rotation11.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation18 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double19 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation11, rotation18);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation25 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D26 = rotation25.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation32 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double33 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation25, rotation32);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation34 = rotation18.applyInverseTo(rotation25);
        double double35 = rotation18.getQ3();
        double double36 = rotation18.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation42 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-1.0d), (double) (byte) 10, (double) (byte) 100, (double) 0L, true);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation48 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D49 = rotation48.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation55 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D56 = rotation55.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation57 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D49, vector3D56);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D58 = rotation42.applyTo(vector3D49);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation60 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D49, (double) (byte) 0);
        double double61 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation18, rotation60);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D62 = rotation60.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation64 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D62, (-0.1855270382668764d));
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D65 = rotation5.applyInverseTo(vector3D62);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation67 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D65, (-0.06415703545444096d));
        double double68 = rotation67.getQ1();
        org.junit.Assert.assertNotNull(vector3D12);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertNotNull(vector3D26);
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertNotNull(rotation34);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 1.0d + "'", double35 == 1.0d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 1.0d + "'", double36 == 1.0d);
        org.junit.Assert.assertNotNull(vector3D49);
        org.junit.Assert.assertNotNull(vector3D56);
        org.junit.Assert.assertNotNull(vector3D58);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 3.141592653589793d + "'", double61 == 3.141592653589793d);
        org.junit.Assert.assertNotNull(vector3D62);
        org.junit.Assert.assertNotNull(vector3D65);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 0.03206981074143584d + "'", double68 == 0.03206981074143584d);
    }

    @Test
    public void test1352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1352");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) 1, 0.09949438965141721d, (-5.7519881927834584E-5d), 0.0d, false);
    }

    @Test
    public void test1353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1353");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double13 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation5, rotation12);
        double double14 = rotation12.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation20.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double28 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation20, rotation27);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation34 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D35 = rotation34.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation41 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D42 = rotation41.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation43 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D35, vector3D42);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation49 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation50 = rotation43.applyInverseTo(rotation49);
        double double51 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation27, rotation43);
        double double52 = rotation43.getQ3();
        double double53 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation12, rotation43);
        double double54 = rotation43.getQ0();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D55 = rotation43.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation56 = rotation43.revert();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1.0d + "'", double14 == 1.0d);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertNotNull(vector3D35);
        org.junit.Assert.assertNotNull(vector3D42);
        org.junit.Assert.assertNotNull(rotation50);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 3.141592653589793d + "'", double51 == 3.141592653589793d);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.0d + "'", double52 == 0.0d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 3.141592653589793d + "'", double53 == 3.141592653589793d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 1.0d + "'", double54 == 1.0d);
        org.junit.Assert.assertNotNull(vector3D55);
        org.junit.Assert.assertNotNull(rotation56);
    }

    @Test
    public void test1354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1354");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation11 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-1.0d), (double) (byte) 10, (double) (byte) 100, (double) 0L, true);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation17 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D18 = rotation17.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation24 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D25 = rotation24.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation26 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D18, vector3D25);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D27 = rotation11.applyTo(vector3D18);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = rotation5.applyTo(vector3D27);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation30 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D27, (double) 1.0f);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation36 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D37 = rotation36.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation43 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D44 = rotation43.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation45 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D37, vector3D44);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation51 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D52 = rotation51.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation58 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double59 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation51, rotation58);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation65 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D66 = rotation65.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation72 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double73 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation65, rotation72);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation74 = rotation58.applyInverseTo(rotation65);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D75 = rotation74.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation76 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D37, vector3D75);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D77 = rotation30.applyTo(vector3D37);
        double double78 = rotation30.getQ1();
        org.junit.Assert.assertNotNull(vector3D18);
        org.junit.Assert.assertNotNull(vector3D25);
        org.junit.Assert.assertNotNull(vector3D27);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D37);
        org.junit.Assert.assertNotNull(vector3D44);
        org.junit.Assert.assertNotNull(vector3D52);
        org.junit.Assert.assertTrue(Double.isNaN(double59));
        org.junit.Assert.assertNotNull(vector3D66);
        org.junit.Assert.assertTrue(Double.isNaN(double73));
        org.junit.Assert.assertNotNull(rotation74);
        org.junit.Assert.assertNotNull(vector3D75);
        org.junit.Assert.assertNotNull(vector3D77);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + (-0.26510255275485917d) + "'", double78 == (-0.26510255275485917d));
    }

    @Test
    public void test1355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1355");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation20.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = rotation27.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation29 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D21, vector3D28);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D36 = rotation35.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation42 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D43 = rotation42.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation44 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D36, vector3D43);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation45 = rotation29.applyTo(rotation44);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation46 = rotation14.applyTo(rotation45);
        double[][] doubleArray47 = rotation46.getMatrix();
        double[][] doubleArray48 = rotation46.getMatrix();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation50 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray48, (double) 10.0f);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation52 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray48, 0.9949879346007117d);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation58 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D59 = rotation58.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation65 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D66 = rotation65.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation67 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D59, vector3D66);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation69 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D59, (double) 100L);
        double double70 = rotation69.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation71 = rotation69.revert();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation77 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (byte) 100, (double) 10L, (double) (short) 100, (double) 1L, false);
        double double78 = rotation77.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation79 = rotation71.applyInverseTo(rotation77);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation80 = rotation77.revert();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation81 = rotation52.applyTo(rotation77);
        double[][] doubleArray82 = rotation52.getMatrix();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation84 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray82, 0.27150322035250896d);
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(rotation45);
        org.junit.Assert.assertNotNull(rotation46);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(vector3D59);
        org.junit.Assert.assertNotNull(vector3D66);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + (-0.0d) + "'", double70 == (-0.0d));
        org.junit.Assert.assertNotNull(rotation71);
        org.junit.Assert.assertTrue(Double.isNaN(double78));
        org.junit.Assert.assertNotNull(rotation79);
        org.junit.Assert.assertNotNull(rotation80);
        org.junit.Assert.assertNotNull(rotation81);
        org.junit.Assert.assertNotNull(doubleArray82);
    }

    @Test
    public void test1356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1356");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-1.0d), (double) (byte) 10, (double) (byte) 100, (double) 0L, true);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation11 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D12 = rotation11.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation18 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D19 = rotation18.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D12, vector3D19);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation5.applyTo(vector3D12);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) 10, 0.0d, (double) (byte) 0, 10.0d, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation33 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (byte) 100, (double) 10L, (double) (short) 100, (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation39 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D40 = rotation39.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation46 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D47 = rotation46.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation48 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D40, vector3D47);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation50 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D40, (double) 100L);
        double double51 = rotation50.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation52 = rotation33.applyInverseTo(rotation50);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation53 = rotation27.applyInverseTo(rotation50);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation54 = rotation5.applyTo(rotation27);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation60 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-1.0d), (double) (byte) 10, (double) (byte) 100, (double) 0L, true);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation66 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D67 = rotation66.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D68 = rotation60.applyInverseTo(vector3D67);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D69 = rotation54.applyInverseTo(vector3D67);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation75 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D76 = rotation75.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation82 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double83 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation75, rotation82);
        double double84 = rotation82.getAngle();
        double double85 = rotation82.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D86 = rotation82.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation92 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D93 = rotation92.getAxis();
        double double94 = rotation92.getQ0();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D95 = rotation92.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation96 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D86, vector3D95);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation97 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D67, vector3D86);
        org.junit.Assert.assertNotNull(vector3D12);
        org.junit.Assert.assertNotNull(vector3D19);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D40);
        org.junit.Assert.assertNotNull(vector3D47);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + (-0.0d) + "'", double51 == (-0.0d));
        org.junit.Assert.assertNotNull(rotation52);
        org.junit.Assert.assertNotNull(rotation53);
        org.junit.Assert.assertNotNull(rotation54);
        org.junit.Assert.assertNotNull(vector3D67);
        org.junit.Assert.assertNotNull(vector3D68);
        org.junit.Assert.assertNotNull(vector3D69);
        org.junit.Assert.assertNotNull(vector3D76);
        org.junit.Assert.assertTrue(Double.isNaN(double83));
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 3.141592653589793d + "'", double84 == 3.141592653589793d);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 3.141592653589793d + "'", double85 == 3.141592653589793d);
        org.junit.Assert.assertNotNull(vector3D86);
        org.junit.Assert.assertNotNull(vector3D93);
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + 0.9996303825414301d + "'", double94 == 0.9996303825414301d);
        org.junit.Assert.assertNotNull(vector3D95);
    }

    @Test
    public void test1357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1357");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-0.1855270382668764d), (double) 10, (double) (short) -1, (double) 100.0f, false);
        double[][] doubleArray6 = rotation5.getMatrix();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation19 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D20 = rotation19.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation21 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D13, vector3D20);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation23 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D13, (double) 100L);
        double double24 = rotation23.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation25 = rotation23.revert();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation31 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (byte) 100, (double) 10L, (double) (short) 100, (double) 1L, false);
        double double32 = rotation31.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation33 = rotation25.applyInverseTo(rotation31);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation34 = rotation5.applyInverseTo(rotation33);
        double double35 = rotation33.getQ0();
        double double36 = rotation33.getAngle();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D20);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + (-0.0d) + "'", double24 == (-0.0d));
        org.junit.Assert.assertNotNull(rotation25);
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertNotNull(rotation33);
        org.junit.Assert.assertNotNull(rotation34);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 116.90457705856772d + "'", double35 == 116.90457705856772d);
        org.junit.Assert.assertTrue(Double.isNaN(double36));
    }

    @Test
    public void test1358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1358");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        double double7 = rotation5.getQ0();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D8 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder9 = null;
        double[] doubleArray10 = rotation5.getAngles(rotationOrder9);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation16 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (byte) 100, (double) 10L, (double) (short) 100, (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation22 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D23 = rotation22.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation29 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D30 = rotation29.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation31 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D23, vector3D30);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation33 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D23, (double) 100L);
        double double34 = rotation33.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = rotation16.applyInverseTo(rotation33);
        double double36 = rotation16.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D37 = rotation16.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D38 = rotation5.applyInverseTo(vector3D37);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation44 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D45 = rotation44.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation51 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double52 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation44, rotation51);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation58 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D59 = rotation58.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation65 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double66 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation58, rotation65);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation67 = rotation51.applyInverseTo(rotation58);
        double double68 = rotation51.getQ3();
        double double69 = rotation51.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation75 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-1.0d), (double) (byte) 10, (double) (byte) 100, (double) 0L, true);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation81 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D82 = rotation81.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation88 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D89 = rotation88.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation90 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D82, vector3D89);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D91 = rotation75.applyTo(vector3D82);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation93 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D82, (double) (byte) 0);
        double double94 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation51, rotation93);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D95 = rotation93.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation97 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D95, (-0.1855270382668764d));
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation98 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D37, vector3D95);
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.9996303825414301d + "'", double7 == 0.9996303825414301d);
        org.junit.Assert.assertNotNull(vector3D8);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[2.356194490192345, 0.0543794248094174, -2.356194490192345]");
        org.junit.Assert.assertNotNull(vector3D23);
        org.junit.Assert.assertNotNull(vector3D30);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + (-0.0d) + "'", double34 == (-0.0d));
        org.junit.Assert.assertNotNull(rotation35);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 1.0d + "'", double36 == 1.0d);
        org.junit.Assert.assertNotNull(vector3D37);
        org.junit.Assert.assertNotNull(vector3D38);
        org.junit.Assert.assertNotNull(vector3D45);
        org.junit.Assert.assertTrue(Double.isNaN(double52));
        org.junit.Assert.assertNotNull(vector3D59);
        org.junit.Assert.assertTrue(Double.isNaN(double66));
        org.junit.Assert.assertNotNull(rotation67);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 1.0d + "'", double68 == 1.0d);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 1.0d + "'", double69 == 1.0d);
        org.junit.Assert.assertNotNull(vector3D82);
        org.junit.Assert.assertNotNull(vector3D89);
        org.junit.Assert.assertNotNull(vector3D91);
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + 3.141592653589793d + "'", double94 == 3.141592653589793d);
        org.junit.Assert.assertNotNull(vector3D95);
    }

    @Test
    public void test1359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1359");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation16 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, (double) 100L);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation22 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-1.0d), (double) (byte) 10, (double) (byte) 100, (double) 0L, true);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation28 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D29 = rotation28.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D36 = rotation35.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation37 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D29, vector3D36);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D38 = rotation22.applyTo(vector3D29);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation44 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D45 = rotation44.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation51 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D52 = rotation51.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation58 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D59 = rotation58.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation60 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D52, vector3D59);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation62 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D52, (double) 100L);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation63 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D45, vector3D52);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation69 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D70 = rotation69.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation71 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D38, vector3D52, vector3D70);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D72 = rotation71.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder73 = null;
        double[] doubleArray74 = rotation71.getAngles(rotationOrder73);
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D29);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D38);
        org.junit.Assert.assertNotNull(vector3D45);
        org.junit.Assert.assertNotNull(vector3D52);
        org.junit.Assert.assertNotNull(vector3D59);
        org.junit.Assert.assertNotNull(vector3D70);
        org.junit.Assert.assertNotNull(vector3D72);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[NaN, NaN, NaN]");
    }

    @Test
    public void test1360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1360");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double13 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation5, rotation12);
        double double14 = rotation12.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation20.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double28 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation20, rotation27);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation34 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D35 = rotation34.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation41 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D42 = rotation41.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation43 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D35, vector3D42);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation49 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation50 = rotation43.applyInverseTo(rotation49);
        double double51 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation27, rotation43);
        double double52 = rotation43.getQ3();
        double double53 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation12, rotation43);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation59 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) 100, (double) (byte) -1, (double) (short) 10, 0.9456205751905904d, true);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation60 = rotation43.applyTo(rotation59);
        double double61 = rotation60.getQ3();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1.0d + "'", double14 == 1.0d);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertNotNull(vector3D35);
        org.junit.Assert.assertNotNull(vector3D42);
        org.junit.Assert.assertNotNull(rotation50);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 3.141592653589793d + "'", double51 == 3.141592653589793d);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.0d + "'", double52 == 0.0d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 3.141592653589793d + "'", double53 == 3.141592653589793d);
        org.junit.Assert.assertNotNull(rotation60);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 0.009408394197040986d + "'", double61 == 0.009408394197040986d);
    }

    @Test
    public void test1361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1361");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double13 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation5, rotation12);
        double double14 = rotation12.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation20.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double28 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation20, rotation27);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation34 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D35 = rotation34.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation41 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double42 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation34, rotation41);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation43 = rotation27.applyInverseTo(rotation34);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation44 = rotation12.applyTo(rotation34);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D45 = rotation12.getAxis();
        double double46 = rotation12.getQ2();
        org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder47 = null;
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray48 = rotation12.getAngles(rotationOrder47);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.geometry.euclidean.threed.CardanEulerSingularityException; message: Euler angles singularity");
        } catch (org.apache.commons.math.geometry.euclidean.threed.CardanEulerSingularityException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 3.141592653589793d + "'", double14 == 3.141592653589793d);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertNotNull(vector3D35);
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertNotNull(rotation43);
        org.junit.Assert.assertNotNull(rotation44);
        org.junit.Assert.assertNotNull(vector3D45);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + (-1.0d) + "'", double46 == (-1.0d));
    }

    @Test
    public void test1362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1362");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-1.0d), 8960.928033465932d, (double) 100L, (double) (short) 100, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation6 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double7 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation5, rotation6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1363");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) 10.0f, 0.7881701093115122d, (-0.1730129508244783d), (double) (byte) 0, true);
        double[][] doubleArray6 = rotation5.getMatrix();
        org.junit.Assert.assertNotNull(doubleArray6);
    }

    @Test
    public void test1364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1364");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation20.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = rotation27.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation29 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D21, vector3D28);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D36 = rotation35.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation42 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D43 = rotation42.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation44 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D36, vector3D43);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation45 = rotation29.applyTo(rotation44);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation46 = rotation14.applyTo(rotation45);
        double[][] doubleArray47 = rotation46.getMatrix();
        double double48 = rotation46.getQ1();
        double[][] doubleArray49 = rotation46.getMatrix();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation51 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray49, (double) 100L);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation53 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray49, (double) 0);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation55 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray49, 0.9949879346007117d);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D56 = rotation55.getAxis();
        java.lang.Class<?> wildcardClass57 = rotation55.getClass();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(rotation45);
        org.junit.Assert.assertNotNull(rotation46);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(vector3D56);
        org.junit.Assert.assertNotNull(wildcardClass57);
    }

    @Test
    public void test1365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1365");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation16 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, (double) 100L);
        double double17 = rotation16.getQ3();
        double double18 = rotation16.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D19 = rotation16.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation25 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D26 = rotation25.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation32 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D33 = rotation32.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation34 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D26, vector3D33);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation40 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D41 = rotation40.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation47 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D48 = rotation47.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation54 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D55 = rotation54.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation56 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D48, vector3D55);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation62 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D63 = rotation62.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation69 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D70 = rotation69.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation71 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D63, vector3D70);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation72 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D33, vector3D41, vector3D55, vector3D70);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation73 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D19, vector3D33);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D74 = rotation73.getAxis();
        double double75 = rotation73.getAngle();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-0.0d) + "'", double17 == (-0.0d));
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + (-0.0d) + "'", double18 == (-0.0d));
        org.junit.Assert.assertNotNull(vector3D19);
        org.junit.Assert.assertNotNull(vector3D26);
        org.junit.Assert.assertNotNull(vector3D33);
        org.junit.Assert.assertNotNull(vector3D41);
        org.junit.Assert.assertNotNull(vector3D48);
        org.junit.Assert.assertNotNull(vector3D55);
        org.junit.Assert.assertNotNull(vector3D63);
        org.junit.Assert.assertNotNull(vector3D70);
        org.junit.Assert.assertNotNull(vector3D74);
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 3.141592653589793d + "'", double75 == 3.141592653589793d);
    }

    @Test
    public void test1366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1366");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double13 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation5, rotation12);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation19 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D20 = rotation19.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation26 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D27 = rotation26.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation28 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D20, vector3D27);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation34 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = rotation28.applyInverseTo(rotation34);
        double double36 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation12, rotation28);
        double double37 = rotation12.getAngle();
        double double38 = rotation12.getQ1();
        double double39 = rotation12.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation40 = rotation12.revert();
        double double41 = rotation40.getAngle();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertNotNull(vector3D20);
        org.junit.Assert.assertNotNull(vector3D27);
        org.junit.Assert.assertNotNull(rotation35);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 3.141592653589793d + "'", double36 == 3.141592653589793d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 3.141592653589793d + "'", double37 == 3.141592653589793d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 10.0d + "'", double38 == 10.0d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 1.0d + "'", double39 == 1.0d);
        org.junit.Assert.assertNotNull(rotation40);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 3.141592653589793d + "'", double41 == 3.141592653589793d);
    }

    @Test
    public void test1367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1367");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (short) 1, (double) 1, (double) 0.0f, 0.9996303825414301d, false);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        double double7 = rotation5.getQ2();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
    }

    @Test
    public void test1368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1368");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) 10, 0.0d, (double) (byte) 0, 10.0d, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation11 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (byte) 100, (double) 10L, (double) (short) 100, (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation17 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D18 = rotation17.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation24 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D25 = rotation24.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation26 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D18, vector3D25);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation28 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D18, (double) 100L);
        double double29 = rotation28.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation30 = rotation11.applyInverseTo(rotation28);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation31 = rotation5.applyInverseTo(rotation28);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation37 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D38 = rotation37.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation44 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double45 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation37, rotation44);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation51 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D52 = rotation51.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation58 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double59 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation51, rotation58);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation60 = rotation44.applyInverseTo(rotation51);
        double double61 = rotation60.getQ1();
        double double62 = rotation60.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder63 = null;
        double[] doubleArray64 = rotation60.getAngles(rotationOrder63);
        double double65 = rotation60.getAngle();
        double double66 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation28, rotation60);
        double double67 = rotation60.getQ1();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D68 = rotation60.getAxis();
        org.junit.Assert.assertNotNull(vector3D18);
        org.junit.Assert.assertNotNull(vector3D25);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + (-0.0d) + "'", double29 == (-0.0d));
        org.junit.Assert.assertNotNull(rotation30);
        org.junit.Assert.assertNotNull(rotation31);
        org.junit.Assert.assertNotNull(vector3D38);
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertNotNull(vector3D52);
        org.junit.Assert.assertTrue(Double.isNaN(double59));
        org.junit.Assert.assertNotNull(rotation60);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 10.015527486617021d + "'", double61 == 10.015527486617021d);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 0.7881701093115122d + "'", double62 == 0.7881701093115122d);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[-0.31746367442260337, 1.2637009275001716, 3.026886383418824]");
        org.junit.Assert.assertTrue(Double.isNaN(double65));
        org.junit.Assert.assertTrue(Double.isNaN(double66));
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 10.015527486617021d + "'", double67 == 10.015527486617021d);
        org.junit.Assert.assertNotNull(vector3D68);
    }

    @Test
    public void test1369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1369");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(100.0d, 0.4690350851266164d, 0.33889036157706476d, 3.1390038567388605d, false);
    }

    @Test
    public void test1370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1370");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation20.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = rotation27.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation29 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D21, vector3D28);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D36 = rotation35.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation42 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D43 = rotation42.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation44 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D36, vector3D43);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation45 = rotation29.applyTo(rotation44);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation46 = rotation14.applyTo(rotation45);
        double[][] doubleArray47 = rotation46.getMatrix();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation49 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray47, (double) '4');
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation51 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray47, (double) 0L);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D52 = rotation51.getAxis();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(rotation45);
        org.junit.Assert.assertNotNull(rotation46);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(vector3D52);
    }

    @Test
    public void test1371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1371");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation20.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = rotation27.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation29 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D21, vector3D28);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation30 = rotation14.applyTo(rotation29);
        double double31 = rotation29.getAngle();
        double[][] doubleArray32 = rotation29.getMatrix();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(rotation30);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray32);
    }

    @Test
    public void test1372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1372");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-0.1855270382668764d), (double) 1, Double.NaN, (double) (short) 100, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation11 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D12 = rotation11.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation18 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D19 = rotation18.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D12, vector3D19);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation26 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D27 = rotation26.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation33 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D34 = rotation33.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D27, vector3D34);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation41 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D42 = rotation41.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation48 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D49 = rotation48.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation50 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D42, vector3D49);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation51 = rotation35.applyTo(rotation50);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation52 = rotation20.applyTo(rotation51);
        double[][] doubleArray53 = rotation52.getMatrix();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation55 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray53, (double) 10);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation57 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray53, (double) (byte) 100);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation59 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray53, 0.0d);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation60 = rotation5.applyInverseTo(rotation59);
        double double61 = rotation5.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D62 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder63 = null;
        double[] doubleArray64 = rotation5.getAngles(rotationOrder63);
        org.junit.Assert.assertNotNull(vector3D12);
        org.junit.Assert.assertNotNull(vector3D19);
        org.junit.Assert.assertNotNull(vector3D27);
        org.junit.Assert.assertNotNull(vector3D34);
        org.junit.Assert.assertNotNull(vector3D42);
        org.junit.Assert.assertNotNull(vector3D49);
        org.junit.Assert.assertNotNull(rotation51);
        org.junit.Assert.assertNotNull(rotation52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(rotation60);
        org.junit.Assert.assertTrue(Double.isNaN(double61));
        org.junit.Assert.assertNotNull(vector3D62);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[NaN, NaN, NaN]");
    }

    @Test
    public void test1373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1373");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation16 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, (double) 100L);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation22 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-1.0d), (double) (byte) 10, (double) (byte) 100, (double) 0L, true);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation28 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D29 = rotation28.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D36 = rotation35.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation37 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D29, vector3D36);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D38 = rotation22.applyTo(vector3D29);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation44 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D45 = rotation44.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation51 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D52 = rotation51.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation58 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D59 = rotation58.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation60 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D52, vector3D59);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation62 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D52, (double) 100L);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation63 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D45, vector3D52);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation69 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D70 = rotation69.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation71 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D38, vector3D52, vector3D70);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation73 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, (double) (short) -1);
        double double74 = rotation73.getQ1();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation80 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D81 = rotation80.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation87 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D88 = rotation87.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation89 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D81, vector3D88);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation91 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D81, 0.0d);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation92 = rotation73.applyTo(rotation91);
        double double93 = rotation91.getQ0();
        org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder94 = null;
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray95 = rotation91.getAngles(rotationOrder94);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.geometry.euclidean.threed.CardanEulerSingularityException; message: Euler angles singularity");
        } catch (org.apache.commons.math.geometry.euclidean.threed.CardanEulerSingularityException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D29);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D38);
        org.junit.Assert.assertNotNull(vector3D45);
        org.junit.Assert.assertNotNull(vector3D52);
        org.junit.Assert.assertNotNull(vector3D59);
        org.junit.Assert.assertNotNull(vector3D70);
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + (-0.33900504942104487d) + "'", double74 == (-0.33900504942104487d));
        org.junit.Assert.assertNotNull(vector3D81);
        org.junit.Assert.assertNotNull(vector3D88);
        org.junit.Assert.assertNotNull(rotation92);
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 1.0d + "'", double93 == 1.0d);
    }

    @Test
    public void test1374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1374");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation20.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = rotation27.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation29 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D21, vector3D28);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation30 = rotation14.applyTo(rotation29);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation36 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) 10, 0.0d, (double) (byte) 0, 10.0d, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation37 = rotation14.applyTo(rotation36);
        double double38 = rotation36.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation39 = rotation36.revert();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(rotation30);
        org.junit.Assert.assertNotNull(rotation37);
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertNotNull(rotation39);
    }

    @Test
    public void test1375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1375");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double13 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation5, rotation12);
        double double14 = rotation12.getAngle();
        double double15 = rotation12.getAngle();
        double double16 = rotation12.getQ0();
        double double17 = rotation12.getQ0();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation23 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D24 = rotation23.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation30 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D31 = rotation30.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation32 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D24, vector3D31);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation34 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D24, (double) 100L);
        double double35 = rotation34.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation36 = rotation34.revert();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation42 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (byte) 100, (double) 10L, (double) (short) 100, (double) 1L, false);
        double double43 = rotation42.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation44 = rotation36.applyInverseTo(rotation42);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D45 = rotation42.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D46 = rotation12.applyInverseTo(vector3D45);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation48 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D45, (-1.0d));
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 3.141592653589793d + "'", double14 == 3.141592653589793d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 3.141592653589793d + "'", double15 == 3.141592653589793d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
        org.junit.Assert.assertNotNull(vector3D24);
        org.junit.Assert.assertNotNull(vector3D31);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + (-0.0d) + "'", double35 == (-0.0d));
        org.junit.Assert.assertNotNull(rotation36);
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertNotNull(rotation44);
        org.junit.Assert.assertNotNull(vector3D45);
        org.junit.Assert.assertNotNull(vector3D46);
    }

    @Test
    public void test1376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1376");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-0.1855270382668764d), (double) 10, (double) (short) -1, (double) 100.0f, false);
        double[][] doubleArray6 = rotation5.getMatrix();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation19 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D20 = rotation19.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation21 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D13, vector3D20);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation23 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D13, (double) 100L);
        double double24 = rotation23.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation25 = rotation23.revert();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation31 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (byte) 100, (double) 10L, (double) (short) 100, (double) 1L, false);
        double double32 = rotation31.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation33 = rotation25.applyInverseTo(rotation31);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation34 = rotation5.applyInverseTo(rotation33);
        double double35 = rotation34.getQ1();
        double double36 = rotation34.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation37 = rotation34.revert();
        double double38 = rotation34.getQ0();
        org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder39 = null;
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray40 = rotation34.getAngles(rotationOrder39);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.geometry.euclidean.threed.CardanEulerSingularityException; message: Euler angles singularity");
        } catch (org.apache.commons.math.geometry.euclidean.threed.CardanEulerSingularityException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D20);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + (-0.0d) + "'", double24 == (-0.0d));
        org.junit.Assert.assertNotNull(rotation25);
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertNotNull(rotation33);
        org.junit.Assert.assertNotNull(rotation34);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 8960.928033465932d + "'", double35 == 8960.928033465932d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 10924.868355180524d + "'", double36 == 10924.868355180524d);
        org.junit.Assert.assertNotNull(rotation37);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + (-1579.617450290328d) + "'", double38 == (-1579.617450290328d));
    }

    @Test
    public void test1377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1377");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation20.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = rotation27.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation29 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D21, vector3D28);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D36 = rotation35.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation42 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D43 = rotation42.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation44 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D36, vector3D43);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation45 = rotation29.applyTo(rotation44);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation46 = rotation14.applyTo(rotation45);
        double[][] doubleArray47 = rotation46.getMatrix();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation49 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray47, (double) '4');
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation51 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray47, (double) '4');
        double double52 = rotation51.getQ1();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(rotation45);
        org.junit.Assert.assertNotNull(rotation46);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.0d + "'", double52 == 0.0d);
    }

    @Test
    public void test1378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1378");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-0.03877567139094669d), (-1.01885404374415d), (-0.29309039211917487d), 1.6481559849923735d, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation11 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-0.1855270382668764d), (double) 1, Double.NaN, (double) (short) 100, false);
        double double12 = rotation11.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation18 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) 10, 0.0d, (double) (byte) 0, 10.0d, false);
        double double19 = rotation18.getQ1();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation25 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D26 = rotation25.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation32 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D33 = rotation32.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation34 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D26, vector3D33);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation40 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D41 = rotation40.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation47 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D48 = rotation47.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation54 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D55 = rotation54.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation56 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D48, vector3D55);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation62 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D63 = rotation62.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation69 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D70 = rotation69.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation71 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D63, vector3D70);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation72 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D33, vector3D41, vector3D55, vector3D70);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D73 = rotation18.applyTo(vector3D55);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation75 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D55, (double) 100L);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D76 = rotation11.applyInverseTo(vector3D55);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D77 = rotation5.applyTo(vector3D55);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertNotNull(vector3D26);
        org.junit.Assert.assertNotNull(vector3D33);
        org.junit.Assert.assertNotNull(vector3D41);
        org.junit.Assert.assertNotNull(vector3D48);
        org.junit.Assert.assertNotNull(vector3D55);
        org.junit.Assert.assertNotNull(vector3D63);
        org.junit.Assert.assertNotNull(vector3D70);
        org.junit.Assert.assertNotNull(vector3D73);
        org.junit.Assert.assertNotNull(vector3D76);
        org.junit.Assert.assertNotNull(vector3D77);
    }

    @Test
    public void test1379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1379");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation20.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = rotation27.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation29 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D21, vector3D28);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D36 = rotation35.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation42 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D43 = rotation42.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation44 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D36, vector3D43);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation45 = rotation29.applyTo(rotation44);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation46 = rotation14.applyTo(rotation45);
        double[][] doubleArray47 = rotation46.getMatrix();
        double[][] doubleArray48 = rotation46.getMatrix();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation50 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray48, (double) (short) 100);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation52 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray48, (double) 100);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation58 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D59 = rotation58.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation65 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D66 = rotation65.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation67 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D59, vector3D66);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation69 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D59, 0.0d);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation70 = rotation52.applyTo(rotation69);
        double[][] doubleArray71 = rotation52.getMatrix();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(rotation45);
        org.junit.Assert.assertNotNull(rotation46);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(vector3D59);
        org.junit.Assert.assertNotNull(vector3D66);
        org.junit.Assert.assertNotNull(rotation70);
        org.junit.Assert.assertNotNull(doubleArray71);
    }

    @Test
    public void test1380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1380");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double13 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation5, rotation12);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation19 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D20 = rotation19.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation26 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D27 = rotation26.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation28 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D20, vector3D27);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation34 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = rotation28.applyInverseTo(rotation34);
        double double36 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation12, rotation28);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D37 = rotation12.getAxis();
        double double38 = rotation12.getAngle();
        double double39 = rotation12.getQ2();
        org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder40 = null;
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray41 = rotation12.getAngles(rotationOrder40);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.geometry.euclidean.threed.CardanEulerSingularityException; message: Euler angles singularity");
        } catch (org.apache.commons.math.geometry.euclidean.threed.CardanEulerSingularityException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertNotNull(vector3D20);
        org.junit.Assert.assertNotNull(vector3D27);
        org.junit.Assert.assertNotNull(rotation35);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 3.141592653589793d + "'", double36 == 3.141592653589793d);
        org.junit.Assert.assertNotNull(vector3D37);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 3.141592653589793d + "'", double38 == 3.141592653589793d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + (-1.0d) + "'", double39 == (-1.0d));
    }

    @Test
    public void test1381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1381");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation20.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = rotation27.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation34 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D35 = rotation34.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation36 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D28, vector3D35);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation42 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D43 = rotation42.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation49 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D50 = rotation49.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation51 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D43, vector3D50);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation52 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D13, vector3D21, vector3D35, vector3D50);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation54 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D13, (-0.0d));
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation56 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D13, (-0.1855270382668764d));
        double double57 = rotation56.getQ0();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D35);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(vector3D50);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.9957005491757349d + "'", double57 == 0.9957005491757349d);
    }

    @Test
    public void test1382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1382");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double13 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation5, rotation12);
        double double14 = rotation12.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation20.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double28 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation20, rotation27);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation34 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D35 = rotation34.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation41 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D42 = rotation41.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation43 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D35, vector3D42);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation49 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation50 = rotation43.applyInverseTo(rotation49);
        double double51 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation27, rotation43);
        double double52 = rotation43.getQ3();
        double double53 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation12, rotation43);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation59 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) 100, (double) (byte) -1, (double) (short) 10, 0.9456205751905904d, true);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation60 = rotation43.applyTo(rotation59);
        org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder61 = null;
        double[] doubleArray62 = rotation60.getAngles(rotationOrder61);
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1.0d + "'", double14 == 1.0d);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertNotNull(vector3D35);
        org.junit.Assert.assertNotNull(vector3D42);
        org.junit.Assert.assertNotNull(rotation50);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 3.141592653589793d + "'", double51 == 3.141592653589793d);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.0d + "'", double52 == 0.0d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 3.141592653589793d + "'", double53 == 3.141592653589793d);
        org.junit.Assert.assertNotNull(rotation60);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[-3.0513799250082303, 0.20031599606315514, 3.032468077189032]");
    }

    @Test
    public void test1383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1383");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (-1L), 0.0d, (-0.0d), 17.66239947251099d, false);
        double double6 = rotation5.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D7 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation13 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-1.0d), (double) (byte) 10, (double) (byte) 100, (double) 0L, true);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation19 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D20 = rotation19.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation26 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D27 = rotation26.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation28 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D20, vector3D27);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D29 = rotation13.applyTo(vector3D20);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) 10, 0.0d, (double) (byte) 0, 10.0d, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation41 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (byte) 100, (double) 10L, (double) (short) 100, (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation47 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D48 = rotation47.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation54 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D55 = rotation54.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation56 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D48, vector3D55);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation58 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D48, (double) 100L);
        double double59 = rotation58.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation60 = rotation41.applyInverseTo(rotation58);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation61 = rotation35.applyInverseTo(rotation58);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation62 = rotation13.applyTo(rotation35);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation68 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-1.0d), (double) (byte) 10, (double) (byte) 100, (double) 0L, true);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation74 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D75 = rotation74.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D76 = rotation68.applyInverseTo(vector3D75);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D77 = rotation62.applyInverseTo(vector3D75);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation78 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D7, vector3D75);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation80 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D7, (-12.771588128375658d));
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation82 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D7, 17.66239947251099d);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertNotNull(vector3D7);
        org.junit.Assert.assertNotNull(vector3D20);
        org.junit.Assert.assertNotNull(vector3D27);
        org.junit.Assert.assertNotNull(vector3D29);
        org.junit.Assert.assertNotNull(vector3D48);
        org.junit.Assert.assertNotNull(vector3D55);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + (-0.0d) + "'", double59 == (-0.0d));
        org.junit.Assert.assertNotNull(rotation60);
        org.junit.Assert.assertNotNull(rotation61);
        org.junit.Assert.assertNotNull(rotation62);
        org.junit.Assert.assertNotNull(vector3D75);
        org.junit.Assert.assertNotNull(vector3D76);
        org.junit.Assert.assertNotNull(vector3D77);
    }

    @Test
    public void test1384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1384");
        double[][] doubleArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.geometry.euclidean.threed.Rotation rotation2 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray0, 0.31538323081891095d);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1385");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) 10, 0.0d, (double) (byte) 0, 10.0d, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation11 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (byte) 100, (double) 10L, (double) (short) 100, (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation17 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D18 = rotation17.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation24 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D25 = rotation24.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation26 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D18, vector3D25);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation28 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D18, (double) 100L);
        double double29 = rotation28.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation30 = rotation11.applyInverseTo(rotation28);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation31 = rotation5.applyInverseTo(rotation28);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation32 = rotation31.revert();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation33 = rotation32.revert();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation39 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D40 = rotation39.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation46 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D47 = rotation46.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation48 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D40, vector3D47);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation50 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D40, (double) 100L);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation51 = rotation33.applyInverseTo(rotation50);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D52 = rotation51.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation54 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D52, (-0.06415703545444096d));
        org.junit.Assert.assertNotNull(vector3D18);
        org.junit.Assert.assertNotNull(vector3D25);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + (-0.0d) + "'", double29 == (-0.0d));
        org.junit.Assert.assertNotNull(rotation30);
        org.junit.Assert.assertNotNull(rotation31);
        org.junit.Assert.assertNotNull(rotation32);
        org.junit.Assert.assertNotNull(rotation33);
        org.junit.Assert.assertNotNull(vector3D40);
        org.junit.Assert.assertNotNull(vector3D47);
        org.junit.Assert.assertNotNull(rotation51);
        org.junit.Assert.assertNotNull(vector3D52);
    }

    @Test
    public void test1386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1386");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation0 = org.apache.commons.math.geometry.euclidean.threed.Rotation.IDENTITY;
        double double1 = rotation0.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation2 = rotation0.revert();
        double double3 = rotation0.getQ1();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation9 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D10 = rotation9.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation16 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D17 = rotation16.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation18 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D10, vector3D17);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation24 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D25 = rotation24.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation31 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D32 = rotation31.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation33 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D25, vector3D32);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation39 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D40 = rotation39.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation46 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D47 = rotation46.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation48 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D40, vector3D47);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation49 = rotation33.applyTo(rotation48);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation50 = rotation18.applyTo(rotation49);
        double[][] doubleArray51 = rotation50.getMatrix();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation52 = rotation0.applyInverseTo(rotation50);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation53 = rotation52.revert();
        double double54 = rotation53.getQ2();
        org.junit.Assert.assertNotNull(rotation0);
        org.junit.Assert.assertTrue("'" + double1 + "' != '" + 0.0d + "'", double1 == 0.0d);
        org.junit.Assert.assertNotNull(rotation2);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertNotNull(vector3D10);
        org.junit.Assert.assertNotNull(vector3D17);
        org.junit.Assert.assertNotNull(vector3D25);
        org.junit.Assert.assertNotNull(vector3D32);
        org.junit.Assert.assertNotNull(vector3D40);
        org.junit.Assert.assertNotNull(vector3D47);
        org.junit.Assert.assertNotNull(rotation49);
        org.junit.Assert.assertNotNull(rotation50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(rotation52);
        org.junit.Assert.assertNotNull(rotation53);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d);
    }

    @Test
    public void test1387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1387");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation16 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, (double) 100L);
        double double17 = rotation16.getQ3();
        double double18 = rotation16.getAngle();
        double[][] doubleArray19 = rotation16.getMatrix();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation21 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray19, 45.70506809828123d);
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-0.0d) + "'", double17 == (-0.0d));
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.5309649148733836d + "'", double18 == 0.5309649148733836d);
        org.junit.Assert.assertNotNull(doubleArray19);
    }

    @Test
    public void test1388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1388");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-1.0d), (double) (byte) 10, (double) (byte) 100, (double) 0L, true);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation11 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D12 = rotation11.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation18 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D19 = rotation18.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D12, vector3D19);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation5.applyTo(vector3D12);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation23 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D12, (double) (byte) 0);
        double double24 = rotation23.getQ2();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation25 = rotation23.revert();
        double[][] doubleArray26 = rotation23.getMatrix();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation28 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray26, 0.5914138605204349d);
        double double29 = rotation28.getQ0();
        org.junit.Assert.assertNotNull(vector3D12);
        org.junit.Assert.assertNotNull(vector3D19);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
        org.junit.Assert.assertNotNull(rotation25);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 1.0d + "'", double29 == 1.0d);
    }

    @Test
    public void test1389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1389");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double13 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation5, rotation12);
        double double14 = rotation12.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation20.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = rotation27.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation29 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D21, vector3D28);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D36 = rotation35.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation42 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D43 = rotation42.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation44 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D36, vector3D43);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation45 = rotation29.applyTo(rotation44);
        double double46 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation12, rotation45);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation52 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D53 = rotation52.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation59 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double60 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation52, rotation59);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation66 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D67 = rotation66.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation73 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double74 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation66, rotation73);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation75 = rotation59.applyInverseTo(rotation66);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation76 = rotation12.applyInverseTo(rotation66);
        double double77 = rotation66.getQ2();
        double double78 = rotation66.getQ2();
        java.lang.Class<?> wildcardClass79 = rotation66.getClass();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 3.141592653589793d + "'", double14 == 3.141592653589793d);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(rotation45);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 3.141592653589793d + "'", double46 == 3.141592653589793d);
        org.junit.Assert.assertNotNull(vector3D53);
        org.junit.Assert.assertTrue(Double.isNaN(double60));
        org.junit.Assert.assertNotNull(vector3D67);
        org.junit.Assert.assertTrue(Double.isNaN(double74));
        org.junit.Assert.assertNotNull(rotation75);
        org.junit.Assert.assertNotNull(rotation76);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 0.01922366120271981d + "'", double77 == 0.01922366120271981d);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 0.01922366120271981d + "'", double78 == 0.01922366120271981d);
        org.junit.Assert.assertNotNull(wildcardClass79);
    }

    @Test
    public void test1390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1390");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation20.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = rotation27.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation34 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D35 = rotation34.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation36 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D28, vector3D35);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation42 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D43 = rotation42.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation49 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D50 = rotation49.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation51 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D43, vector3D50);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation52 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D13, vector3D21, vector3D35, vector3D50);
        double double53 = rotation52.getQ1();
        double double54 = rotation52.getQ2();
        double[][] doubleArray55 = rotation52.getMatrix();
        org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder56 = null;
        double[] doubleArray57 = rotation52.getAngles(rotationOrder56);
        double double58 = rotation52.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation64 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) 10, 0.0d, (double) (byte) 0, 10.0d, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation70 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (byte) 100, (double) 10L, (double) (short) 100, (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation76 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D77 = rotation76.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation83 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D84 = rotation83.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation85 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D77, vector3D84);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation87 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D77, (double) 100L);
        double double88 = rotation87.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation89 = rotation70.applyInverseTo(rotation87);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation90 = rotation64.applyInverseTo(rotation87);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation91 = rotation90.revert();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation92 = rotation52.applyInverseTo(rotation91);
        double double93 = rotation92.getAngle();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D35);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(vector3D50);
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[NaN, NaN, NaN]");
        org.junit.Assert.assertTrue(Double.isNaN(double58));
        org.junit.Assert.assertNotNull(vector3D77);
        org.junit.Assert.assertNotNull(vector3D84);
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + (-0.0d) + "'", double88 == (-0.0d));
        org.junit.Assert.assertNotNull(rotation89);
        org.junit.Assert.assertNotNull(rotation90);
        org.junit.Assert.assertNotNull(rotation91);
        org.junit.Assert.assertNotNull(rotation92);
        org.junit.Assert.assertTrue(Double.isNaN(double93));
    }

    @Test
    public void test1391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1391");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) 1, (double) (byte) -1, (double) ' ', (double) (short) 100, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation11 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D12 = rotation11.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation18 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D19 = rotation18.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D12, vector3D19);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation22 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D12, (double) 100L);
        double double23 = rotation22.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation24 = rotation22.revert();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation30 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (byte) 100, (double) 10L, (double) (short) 100, (double) 1L, false);
        double double31 = rotation30.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation32 = rotation24.applyInverseTo(rotation30);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation38 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation44 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-1.0d), (double) (byte) 10, (double) (byte) 100, (double) 0L, true);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation50 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D51 = rotation50.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation57 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D58 = rotation57.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation59 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D51, vector3D58);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D60 = rotation44.applyTo(vector3D51);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D61 = rotation38.applyTo(vector3D60);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D62 = rotation30.applyInverseTo(vector3D61);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D63 = rotation5.applyTo(vector3D62);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation65 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D63, (-0.9998152766216806d));
        org.junit.Assert.assertNotNull(vector3D12);
        org.junit.Assert.assertNotNull(vector3D19);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + (-0.0d) + "'", double23 == (-0.0d));
        org.junit.Assert.assertNotNull(rotation24);
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertNotNull(rotation32);
        org.junit.Assert.assertNotNull(vector3D51);
        org.junit.Assert.assertNotNull(vector3D58);
        org.junit.Assert.assertNotNull(vector3D60);
        org.junit.Assert.assertNotNull(vector3D61);
        org.junit.Assert.assertNotNull(vector3D62);
        org.junit.Assert.assertNotNull(vector3D63);
    }

    @Test
    public void test1392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1392");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) 10, 0.0d, (double) (byte) 0, 10.0d, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation11 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (byte) 100, (double) 10L, (double) (short) 100, (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation17 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D18 = rotation17.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation24 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D25 = rotation24.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation26 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D18, vector3D25);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation28 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D18, (double) 100L);
        double double29 = rotation28.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation30 = rotation11.applyInverseTo(rotation28);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation31 = rotation5.applyInverseTo(rotation28);
        double[][] doubleArray32 = rotation28.getMatrix();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.geometry.euclidean.threed.Rotation rotation34 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray32, (-0.33900504942104487d));
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.geometry.euclidean.threed.NotARotationMatrixException; message: unable to orthogonalize matrix in 10 iterations");
        } catch (org.apache.commons.math.geometry.euclidean.threed.NotARotationMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(vector3D18);
        org.junit.Assert.assertNotNull(vector3D25);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + (-0.0d) + "'", double29 == (-0.0d));
        org.junit.Assert.assertNotNull(rotation30);
        org.junit.Assert.assertNotNull(rotation31);
        org.junit.Assert.assertNotNull(doubleArray32);
    }

    @Test
    public void test1393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1393");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation0 = org.apache.commons.math.geometry.euclidean.threed.Rotation.IDENTITY;
        double double1 = rotation0.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation2 = rotation0.revert();
        java.lang.Class<?> wildcardClass3 = rotation0.getClass();
        org.junit.Assert.assertNotNull(rotation0);
        org.junit.Assert.assertTrue("'" + double1 + "' != '" + 0.0d + "'", double1 == 0.0d);
        org.junit.Assert.assertNotNull(rotation2);
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test1394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1394");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(3.1216925665368036d, Double.NaN, 0.33900504942104487d, (double) (-1), true);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation11 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D12 = rotation11.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation18 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D19 = rotation18.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D12, vector3D19);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation26 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D27 = rotation26.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation33 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D34 = rotation33.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D27, vector3D34);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation41 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D42 = rotation41.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation48 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D49 = rotation48.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation50 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D42, vector3D49);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation51 = rotation35.applyTo(rotation50);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation52 = rotation20.applyTo(rotation51);
        double double53 = rotation52.getAngle();
        double double54 = rotation52.getQ3();
        double double55 = rotation52.getQ0();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation61 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double62 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation52, rotation61);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation63 = rotation5.applyInverseTo(rotation52);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D64 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D65 = rotation5.applyInverseTo(vector3D64);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(vector3D12);
        org.junit.Assert.assertNotNull(vector3D19);
        org.junit.Assert.assertNotNull(vector3D27);
        org.junit.Assert.assertNotNull(vector3D34);
        org.junit.Assert.assertNotNull(vector3D42);
        org.junit.Assert.assertNotNull(vector3D49);
        org.junit.Assert.assertNotNull(rotation51);
        org.junit.Assert.assertNotNull(rotation52);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.0d + "'", double53 == 0.0d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 1.0d + "'", double55 == 1.0d);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 3.141592653589793d + "'", double62 == 3.141592653589793d);
        org.junit.Assert.assertNotNull(rotation63);
    }

    @Test
    public void test1395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1395");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation16 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, (double) 100L);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation22 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-1.0d), (double) (byte) 10, (double) (byte) 100, (double) 0L, true);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation28 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D29 = rotation28.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D36 = rotation35.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation37 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D29, vector3D36);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D38 = rotation22.applyTo(vector3D29);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation44 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D45 = rotation44.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation51 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D52 = rotation51.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation58 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D59 = rotation58.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation60 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D52, vector3D59);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation62 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D52, (double) 100L);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation63 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D45, vector3D52);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation69 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D70 = rotation69.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation71 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D38, vector3D52, vector3D70);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation73 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D52, (double) 1.0f);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation74 = rotation73.revert();
        org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder75 = null;
        double[] doubleArray76 = rotation73.getAngles(rotationOrder75);
        double double77 = rotation73.getQ3();
        double double78 = rotation73.getQ3();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D29);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D38);
        org.junit.Assert.assertNotNull(vector3D45);
        org.junit.Assert.assertNotNull(vector3D52);
        org.junit.Assert.assertNotNull(vector3D59);
        org.junit.Assert.assertNotNull(vector3D70);
        org.junit.Assert.assertNotNull(rotation74);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[2.356194490192345, 0.9999999999999999, -2.356194490192345]");
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 0.0d + "'", double77 == 0.0d);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 0.0d + "'", double78 == 0.0d);
    }

    @Test
    public void test1396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1396");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double13 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation5, rotation12);
        double double14 = rotation12.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation20.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = rotation27.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation29 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D21, vector3D28);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D36 = rotation35.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation42 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D43 = rotation42.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation44 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D36, vector3D43);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation45 = rotation29.applyTo(rotation44);
        double double46 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation12, rotation45);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation52 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D53 = rotation52.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation59 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double60 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation52, rotation59);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation66 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D67 = rotation66.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation73 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double74 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation66, rotation73);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation75 = rotation59.applyInverseTo(rotation66);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation76 = rotation12.applyInverseTo(rotation66);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation77 = rotation76.revert();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation83 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-0.1855270382668764d), (double) '4', 0.33900504942104487d, (double) '#', false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation84 = rotation77.applyTo(rotation83);
        double[][] doubleArray85 = rotation84.getMatrix();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.geometry.euclidean.threed.Rotation rotation87 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray85, 10.315768314846704d);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.geometry.euclidean.threed.NotARotationMatrixException; message: unable to orthogonalize matrix in 10 iterations");
        } catch (org.apache.commons.math.geometry.euclidean.threed.NotARotationMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 3.141592653589793d + "'", double14 == 3.141592653589793d);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(rotation45);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 3.141592653589793d + "'", double46 == 3.141592653589793d);
        org.junit.Assert.assertNotNull(vector3D53);
        org.junit.Assert.assertTrue(Double.isNaN(double60));
        org.junit.Assert.assertNotNull(vector3D67);
        org.junit.Assert.assertTrue(Double.isNaN(double74));
        org.junit.Assert.assertNotNull(rotation75);
        org.junit.Assert.assertNotNull(rotation76);
        org.junit.Assert.assertNotNull(rotation77);
        org.junit.Assert.assertNotNull(rotation84);
        org.junit.Assert.assertNotNull(doubleArray85);
    }

    @Test
    public void test1397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1397");
        org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.geometry.euclidean.threed.Rotation rotation4 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(rotationOrder0, 2.7755575615628914E-17d, 17.66239947251099d, 0.1610382605737718d);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1398");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) 10, 0.0d, (double) (byte) 0, 10.0d, false);
        double double6 = rotation5.getQ1();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation19 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D20 = rotation19.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation21 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D13, vector3D20);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = rotation27.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation34 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D35 = rotation34.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation41 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D42 = rotation41.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation43 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D35, vector3D42);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation49 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D50 = rotation49.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation56 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D57 = rotation56.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation58 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D50, vector3D57);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation59 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D20, vector3D28, vector3D42, vector3D57);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D60 = rotation5.applyTo(vector3D42);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation62 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D42, 0.7881701093115122d);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation68 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D69 = rotation68.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation75 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D76 = rotation75.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation77 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D69, vector3D76);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation79 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D69, (double) 100L);
        double double80 = rotation79.getQ1();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation81 = rotation62.applyTo(rotation79);
        double double82 = rotation62.getQ2();
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D20);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D35);
        org.junit.Assert.assertNotNull(vector3D42);
        org.junit.Assert.assertNotNull(vector3D50);
        org.junit.Assert.assertNotNull(vector3D57);
        org.junit.Assert.assertNotNull(vector3D60);
        org.junit.Assert.assertNotNull(vector3D69);
        org.junit.Assert.assertNotNull(vector3D76);
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + (-0.1855270382668764d) + "'", double80 == (-0.1855270382668764d));
        org.junit.Assert.assertNotNull(rotation81);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 0.27150322035250896d + "'", double82 == 0.27150322035250896d);
    }

    @Test
    public void test1399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1399");
        org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.geometry.euclidean.threed.Rotation rotation4 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(rotationOrder0, (double) (-1), (-0.009949438965141721d), 0.1610382605737718d);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1400");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation16 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, (double) 100L);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation22 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-1.0d), (double) (byte) 10, (double) (byte) 100, (double) 0L, true);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation28 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D29 = rotation28.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D36 = rotation35.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation37 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D29, vector3D36);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D38 = rotation22.applyTo(vector3D29);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation44 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D45 = rotation44.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation51 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D52 = rotation51.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation58 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D59 = rotation58.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation60 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D52, vector3D59);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation62 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D52, (double) 100L);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation63 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D45, vector3D52);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation69 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D70 = rotation69.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation71 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D38, vector3D52, vector3D70);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation77 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D78 = rotation77.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation84 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D85 = rotation84.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation86 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D78, vector3D85);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation87 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D70, vector3D85);
        java.lang.Class<?> wildcardClass88 = vector3D70.getClass();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D29);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D38);
        org.junit.Assert.assertNotNull(vector3D45);
        org.junit.Assert.assertNotNull(vector3D52);
        org.junit.Assert.assertNotNull(vector3D59);
        org.junit.Assert.assertNotNull(vector3D70);
        org.junit.Assert.assertNotNull(vector3D78);
        org.junit.Assert.assertNotNull(vector3D85);
        org.junit.Assert.assertNotNull(wildcardClass88);
    }

    @Test
    public void test1401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1401");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        double[][] doubleArray15 = rotation14.getMatrix();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D16 = rotation14.getAxis();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(vector3D16);
    }

    @Test
    public void test1402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1402");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) 10, 0.0d, (double) (byte) 0, 10.0d, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation11 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (byte) 100, (double) 10L, (double) (short) 100, (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation17 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D18 = rotation17.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation24 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D25 = rotation24.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation26 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D18, vector3D25);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation28 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D18, (double) 100L);
        double double29 = rotation28.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation30 = rotation11.applyInverseTo(rotation28);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation31 = rotation5.applyInverseTo(rotation28);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation32 = rotation31.revert();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation33 = rotation31.revert();
        org.junit.Assert.assertNotNull(vector3D18);
        org.junit.Assert.assertNotNull(vector3D25);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + (-0.0d) + "'", double29 == (-0.0d));
        org.junit.Assert.assertNotNull(rotation30);
        org.junit.Assert.assertNotNull(rotation31);
        org.junit.Assert.assertNotNull(rotation32);
        org.junit.Assert.assertNotNull(rotation33);
    }

    @Test
    public void test1403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1403");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (byte) 0, (double) (byte) 100, (-0.005755946541407356d), 3.7105407653375275d, true);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation6 = rotation5.revert();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-1.0d), (double) (byte) 10, (double) (byte) 100, (double) 0L, true);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation18 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D19 = rotation18.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation25 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D26 = rotation25.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D19, vector3D26);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = rotation12.applyTo(vector3D19);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation34 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) 10, 0.0d, (double) (byte) 0, 10.0d, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation40 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (byte) 100, (double) 10L, (double) (short) 100, (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation46 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D47 = rotation46.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation53 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D54 = rotation53.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation55 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D47, vector3D54);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation57 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D47, (double) 100L);
        double double58 = rotation57.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation59 = rotation40.applyInverseTo(rotation57);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation60 = rotation34.applyInverseTo(rotation57);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation61 = rotation12.applyTo(rotation34);
        double double62 = rotation12.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation63 = rotation5.applyTo(rotation12);
        double double64 = rotation12.getAngle();
        org.junit.Assert.assertNotNull(rotation6);
        org.junit.Assert.assertNotNull(vector3D19);
        org.junit.Assert.assertNotNull(vector3D26);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D47);
        org.junit.Assert.assertNotNull(vector3D54);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + (-0.0d) + "'", double58 == (-0.0d));
        org.junit.Assert.assertNotNull(rotation59);
        org.junit.Assert.assertNotNull(rotation60);
        org.junit.Assert.assertNotNull(rotation61);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 3.1216925665368036d + "'", double62 == 3.1216925665368036d);
        org.junit.Assert.assertNotNull(rotation63);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 3.1216925665368036d + "'", double64 == 3.1216925665368036d);
    }

    @Test
    public void test1404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1404");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, 10924.868355180524d, 0.7071067811865476d, (double) (-1), true);
    }

    @Test
    public void test1405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1405");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) 10, 0.0d, (double) (byte) 0, 10.0d, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation11 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (byte) 100, (double) 10L, (double) (short) 100, (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation17 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D18 = rotation17.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation24 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D25 = rotation24.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation26 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D18, vector3D25);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation28 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D18, (double) 100L);
        double double29 = rotation28.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation30 = rotation11.applyInverseTo(rotation28);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation31 = rotation5.applyInverseTo(rotation28);
        double double32 = rotation5.getQ2();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation33 = rotation5.revert();
        double double34 = rotation5.getQ0();
        org.junit.Assert.assertNotNull(vector3D18);
        org.junit.Assert.assertNotNull(vector3D25);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + (-0.0d) + "'", double29 == (-0.0d));
        org.junit.Assert.assertNotNull(rotation30);
        org.junit.Assert.assertNotNull(rotation31);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
        org.junit.Assert.assertNotNull(rotation33);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 10.0d + "'", double34 == 10.0d);
    }

    @Test
    public void test1406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1406");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double13 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation5, rotation12);
        double double14 = rotation12.getAngle();
        double double15 = rotation12.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D16 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation22 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D23 = rotation22.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation29 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D30 = rotation29.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation31 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D23, vector3D30);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation33 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D23, (double) 100L);
        double double34 = rotation33.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = rotation33.revert();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation41 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (byte) 100, (double) 10L, (double) (short) 100, (double) 1L, false);
        double double42 = rotation41.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation43 = rotation35.applyInverseTo(rotation41);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation49 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation55 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-1.0d), (double) (byte) 10, (double) (byte) 100, (double) 0L, true);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation61 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D62 = rotation61.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation68 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D69 = rotation68.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation70 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D62, vector3D69);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D71 = rotation55.applyTo(vector3D62);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D72 = rotation49.applyTo(vector3D71);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D73 = rotation41.applyInverseTo(vector3D72);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D74 = rotation12.applyInverseTo(vector3D72);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation76 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D72, 0.09949438965141721d);
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 3.141592653589793d + "'", double14 == 3.141592653589793d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 3.141592653589793d + "'", double15 == 3.141592653589793d);
        org.junit.Assert.assertNotNull(vector3D16);
        org.junit.Assert.assertNotNull(vector3D23);
        org.junit.Assert.assertNotNull(vector3D30);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + (-0.0d) + "'", double34 == (-0.0d));
        org.junit.Assert.assertNotNull(rotation35);
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertNotNull(rotation43);
        org.junit.Assert.assertNotNull(vector3D62);
        org.junit.Assert.assertNotNull(vector3D69);
        org.junit.Assert.assertNotNull(vector3D71);
        org.junit.Assert.assertNotNull(vector3D72);
        org.junit.Assert.assertNotNull(vector3D73);
        org.junit.Assert.assertNotNull(vector3D74);
    }

    @Test
    public void test1407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1407");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double13 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation5, rotation12);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation19 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D20 = rotation19.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation26 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D27 = rotation26.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation28 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D20, vector3D27);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation34 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = rotation28.applyInverseTo(rotation34);
        double double36 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation12, rotation28);
        double double37 = rotation28.getAngle();
        double[][] doubleArray38 = rotation28.getMatrix();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.geometry.euclidean.threed.Rotation rotation40 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray38, (-0.08683602698544203d));
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.geometry.euclidean.threed.NotARotationMatrixException; message: unable to orthogonalize matrix in 10 iterations");
        } catch (org.apache.commons.math.geometry.euclidean.threed.NotARotationMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertNotNull(vector3D20);
        org.junit.Assert.assertNotNull(vector3D27);
        org.junit.Assert.assertNotNull(rotation35);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 3.141592653589793d + "'", double36 == 3.141592653589793d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray38);
    }

    @Test
    public void test1408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1408");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation16 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, (double) 100L);
        double double17 = rotation16.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation18 = rotation16.revert();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation24 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (byte) 100, (double) 10L, (double) (short) 100, (double) 1L, false);
        double double25 = rotation24.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation26 = rotation18.applyInverseTo(rotation24);
        double double27 = rotation18.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation33 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D34 = rotation33.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation40 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double41 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation33, rotation40);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation47 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D48 = rotation47.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation54 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double55 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation47, rotation54);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation56 = rotation40.applyInverseTo(rotation47);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation62 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D63 = rotation62.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation69 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D70 = rotation69.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation71 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D63, vector3D70);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation73 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D63, (double) 1L);
        double double74 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation47, rotation73);
        double double75 = rotation73.getQ0();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation76 = rotation18.applyInverseTo(rotation73);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation77 = org.apache.commons.math.geometry.euclidean.threed.Rotation.IDENTITY;
        double double78 = rotation77.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation79 = rotation77.revert();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D80 = rotation79.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation82 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D80, 3.1216032962775833d);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D83 = rotation76.applyInverseTo(vector3D80);
        double[][] doubleArray84 = rotation76.getMatrix();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-0.0d) + "'", double17 == (-0.0d));
        org.junit.Assert.assertNotNull(rotation18);
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertNotNull(rotation26);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.5309649148733836d + "'", double27 == 0.5309649148733836d);
        org.junit.Assert.assertNotNull(vector3D34);
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertNotNull(vector3D48);
        org.junit.Assert.assertTrue(Double.isNaN(double55));
        org.junit.Assert.assertNotNull(rotation56);
        org.junit.Assert.assertNotNull(vector3D63);
        org.junit.Assert.assertNotNull(vector3D70);
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 0.9456205751905904d + "'", double74 == 0.9456205751905904d);
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 0.8775825618903728d + "'", double75 == 0.8775825618903728d);
        org.junit.Assert.assertNotNull(rotation76);
        org.junit.Assert.assertNotNull(rotation77);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 0.0d + "'", double78 == 0.0d);
        org.junit.Assert.assertNotNull(rotation79);
        org.junit.Assert.assertNotNull(vector3D80);
        org.junit.Assert.assertNotNull(vector3D83);
        org.junit.Assert.assertNotNull(doubleArray84);
    }

    @Test
    public void test1409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1409");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation16 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, (double) 100L);
        double double17 = rotation16.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation18 = rotation16.revert();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation24 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (byte) 100, (double) 10L, (double) (short) 100, (double) 1L, false);
        double double25 = rotation24.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation26 = rotation18.applyInverseTo(rotation24);
        double double27 = rotation26.getQ0();
        double double28 = rotation26.getQ2();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-0.0d) + "'", double17 == (-0.0d));
        org.junit.Assert.assertNotNull(rotation18);
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertNotNull(rotation26);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 116.90457705856772d + "'", double27 == 116.90457705856772d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 77.7583719842568d + "'", double28 == 77.7583719842568d);
    }

    @Test
    public void test1410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1410");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation16 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, (double) 100L);
        double double17 = rotation16.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation18 = rotation16.revert();
        org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder19 = null;
        double[] doubleArray20 = rotation16.getAngles(rotationOrder19);
        double double21 = rotation16.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) 10, 0.0d, (double) (byte) 0, 10.0d, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation33 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (byte) 100, (double) 10L, (double) (short) 100, (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation39 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D40 = rotation39.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation46 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D47 = rotation46.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation48 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D40, vector3D47);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation50 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D40, (double) 100L);
        double double51 = rotation50.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation52 = rotation33.applyInverseTo(rotation50);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation53 = rotation27.applyInverseTo(rotation50);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation54 = rotation53.revert();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation55 = rotation54.revert();
        double double56 = rotation54.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D57 = rotation54.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation58 = rotation16.applyTo(rotation54);
        java.lang.Class<?> wildcardClass59 = rotation54.getClass();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-0.0d) + "'", double17 == (-0.0d));
        org.junit.Assert.assertNotNull(rotation18);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-0.7853981633974483, 0.530964914873383, 0.7853981633974483]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.5309649148733836d + "'", double21 == 0.5309649148733836d);
        org.junit.Assert.assertNotNull(vector3D40);
        org.junit.Assert.assertNotNull(vector3D47);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + (-0.0d) + "'", double51 == (-0.0d));
        org.junit.Assert.assertNotNull(rotation52);
        org.junit.Assert.assertNotNull(rotation53);
        org.junit.Assert.assertNotNull(rotation54);
        org.junit.Assert.assertNotNull(rotation55);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 9.649660284921133d + "'", double56 == 9.649660284921133d);
        org.junit.Assert.assertNotNull(vector3D57);
        org.junit.Assert.assertNotNull(rotation58);
        org.junit.Assert.assertNotNull(wildcardClass59);
    }

    @Test
    public void test1411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1411");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation20.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = rotation27.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation29 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D21, vector3D28);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D36 = rotation35.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation42 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D43 = rotation42.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation44 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D36, vector3D43);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation45 = rotation29.applyTo(rotation44);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation46 = rotation14.applyTo(rotation45);
        double[][] doubleArray47 = rotation46.getMatrix();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation49 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray47, (double) 100.0f);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation55 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-1.0d), (double) (byte) 10, (double) (byte) 100, (double) 0L, true);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation61 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D62 = rotation61.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D63 = rotation55.applyInverseTo(vector3D62);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D64 = rotation49.applyTo(vector3D63);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation66 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D63, 0.0d);
        double[][] doubleArray67 = rotation66.getMatrix();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation69 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray67, 3.1216925665368036d);
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(rotation45);
        org.junit.Assert.assertNotNull(rotation46);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(vector3D62);
        org.junit.Assert.assertNotNull(vector3D63);
        org.junit.Assert.assertNotNull(vector3D64);
        org.junit.Assert.assertNotNull(doubleArray67);
    }

    @Test
    public void test1412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1412");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation16 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, (double) 100L);
        double double17 = rotation16.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation18 = rotation16.revert();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation24 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (byte) 100, (double) 10L, (double) (short) 100, (double) 1L, false);
        double double25 = rotation24.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation26 = rotation18.applyInverseTo(rotation24);
        double double27 = rotation24.getQ0();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation33 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-0.1855270382668764d), (double) 10, (double) (short) -1, (double) 100.0f, false);
        double[][] doubleArray34 = rotation33.getMatrix();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation40 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D41 = rotation40.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation47 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D48 = rotation47.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation49 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D41, vector3D48);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation51 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D41, (double) 100L);
        double double52 = rotation51.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation53 = rotation51.revert();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation59 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (byte) 100, (double) 10L, (double) (short) 100, (double) 1L, false);
        double double60 = rotation59.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation61 = rotation53.applyInverseTo(rotation59);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation62 = rotation33.applyInverseTo(rotation61);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation63 = rotation24.applyTo(rotation62);
        double double64 = rotation24.getQ0();
        double double65 = rotation24.getQ1();
        double double66 = rotation24.getAngle();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-0.0d) + "'", double17 == (-0.0d));
        org.junit.Assert.assertNotNull(rotation18);
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertNotNull(rotation26);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 100.0d + "'", double27 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(vector3D41);
        org.junit.Assert.assertNotNull(vector3D48);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + (-0.0d) + "'", double52 == (-0.0d));
        org.junit.Assert.assertNotNull(rotation53);
        org.junit.Assert.assertTrue(Double.isNaN(double60));
        org.junit.Assert.assertNotNull(rotation61);
        org.junit.Assert.assertNotNull(rotation62);
        org.junit.Assert.assertNotNull(rotation63);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 100.0d + "'", double64 == 100.0d);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 10.0d + "'", double65 == 10.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double66));
    }

    @Test
    public void test1413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1413");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation20.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = rotation27.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation29 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D21, vector3D28);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation30 = rotation14.applyTo(rotation29);
        double double31 = rotation30.getQ0();
        org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder32 = null;
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray33 = rotation30.getAngles(rotationOrder32);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.geometry.euclidean.threed.CardanEulerSingularityException; message: Euler angles singularity");
        } catch (org.apache.commons.math.geometry.euclidean.threed.CardanEulerSingularityException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(rotation30);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 1.0d + "'", double31 == 1.0d);
    }

    @Test
    public void test1414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1414");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.9949438965141721d, (double) ' ', (-0.009949438965141721d), (-0.06415703545444096d), true);
        double double6 = rotation5.getQ3();
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + (-0.0020039348553047127d) + "'", double6 == (-0.0020039348553047127d));
    }

    @Test
    public void test1415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1415");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double13 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation5, rotation12);
        double double14 = rotation12.getAngle();
        double double15 = rotation12.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D16 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation22 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D23 = rotation22.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation29 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D30 = rotation29.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation31 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D23, vector3D30);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation33 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D23, (double) 100L);
        double double34 = rotation33.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = rotation33.revert();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation41 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (byte) 100, (double) 10L, (double) (short) 100, (double) 1L, false);
        double double42 = rotation41.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation43 = rotation35.applyInverseTo(rotation41);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation49 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation55 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-1.0d), (double) (byte) 10, (double) (byte) 100, (double) 0L, true);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation61 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D62 = rotation61.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation68 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D69 = rotation68.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation70 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D62, vector3D69);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D71 = rotation55.applyTo(vector3D62);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D72 = rotation49.applyTo(vector3D71);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D73 = rotation41.applyInverseTo(vector3D72);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D74 = rotation12.applyInverseTo(vector3D72);
        double double75 = rotation12.getQ3();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 3.141592653589793d + "'", double14 == 3.141592653589793d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 3.141592653589793d + "'", double15 == 3.141592653589793d);
        org.junit.Assert.assertNotNull(vector3D16);
        org.junit.Assert.assertNotNull(vector3D23);
        org.junit.Assert.assertNotNull(vector3D30);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + (-0.0d) + "'", double34 == (-0.0d));
        org.junit.Assert.assertNotNull(rotation35);
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertNotNull(rotation43);
        org.junit.Assert.assertNotNull(vector3D62);
        org.junit.Assert.assertNotNull(vector3D69);
        org.junit.Assert.assertNotNull(vector3D71);
        org.junit.Assert.assertNotNull(vector3D72);
        org.junit.Assert.assertNotNull(vector3D73);
        org.junit.Assert.assertNotNull(vector3D74);
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 1.0d + "'", double75 == 1.0d);
    }

    @Test
    public void test1416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1416");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation19 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D20 = rotation19.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation21 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D13, vector3D20);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation23 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D13, (double) 100L);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation24 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        double double25 = rotation24.getQ3();
        double double26 = rotation24.getQ0();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D20);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 1.0d + "'", double26 == 1.0d);
    }

    @Test
    public void test1417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1417");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-0.1855270382668764d), (double) 1, Double.NaN, (double) (short) 100, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation11 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D12 = rotation11.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation18 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D19 = rotation18.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D12, vector3D19);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation26 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D27 = rotation26.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation33 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D34 = rotation33.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D27, vector3D34);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation41 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D42 = rotation41.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation48 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D49 = rotation48.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation50 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D42, vector3D49);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation51 = rotation35.applyTo(rotation50);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation52 = rotation20.applyTo(rotation51);
        double[][] doubleArray53 = rotation52.getMatrix();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation55 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray53, (double) 10);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation57 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray53, (double) (byte) 100);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation59 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray53, 0.0d);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation60 = rotation5.applyInverseTo(rotation59);
        double double61 = rotation5.getAngle();
        double double62 = rotation5.getQ2();
        org.junit.Assert.assertNotNull(vector3D12);
        org.junit.Assert.assertNotNull(vector3D19);
        org.junit.Assert.assertNotNull(vector3D27);
        org.junit.Assert.assertNotNull(vector3D34);
        org.junit.Assert.assertNotNull(vector3D42);
        org.junit.Assert.assertNotNull(vector3D49);
        org.junit.Assert.assertNotNull(rotation51);
        org.junit.Assert.assertNotNull(rotation52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(rotation60);
        org.junit.Assert.assertTrue(Double.isNaN(double61));
        org.junit.Assert.assertTrue(Double.isNaN(double62));
    }

    @Test
    public void test1418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1418");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation20.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = rotation27.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation29 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D21, vector3D28);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation30 = rotation14.applyTo(rotation29);
        double double31 = rotation29.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation32 = rotation29.revert();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation38 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '#', 0.09949879346007118d, (double) (byte) 100, 0.054379424809409445d, true);
        double double39 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation32, rotation38);
        double double40 = rotation32.getQ1();
        double double41 = rotation32.getAngle();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(rotation30);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d);
        org.junit.Assert.assertNotNull(rotation32);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 2.4682434157065027d + "'", double39 == 2.4682434157065027d);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.0d + "'", double40 == 0.0d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.0d + "'", double41 == 0.0d);
    }

    @Test
    public void test1419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1419");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (short) -1, (-0.1730129508244783d), (-0.1730129508244783d), (double) 10.0f, false);
        double double6 = rotation5.getQ2();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation19 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double20 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation12, rotation19);
        double double21 = rotation19.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = rotation27.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation34 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double35 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation27, rotation34);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation41 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D42 = rotation41.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation48 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double49 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation41, rotation48);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation50 = rotation34.applyInverseTo(rotation41);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation51 = rotation19.applyTo(rotation41);
        org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder52 = null;
        double[] doubleArray53 = rotation51.getAngles(rotationOrder52);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation59 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D60 = rotation59.getAxis();
        double double61 = rotation59.getQ0();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation62 = rotation51.applyInverseTo(rotation59);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation68 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D69 = rotation68.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation75 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D76 = rotation75.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation82 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D83 = rotation82.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation84 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D76, vector3D83);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation86 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D76, (double) 100L);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation87 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D69, vector3D76);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D88 = rotation62.applyTo(vector3D76);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D89 = rotation5.applyInverseTo(vector3D88);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation91 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D89, 0.455548342479277d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + (-0.1730129508244783d) + "'", double6 == (-0.1730129508244783d));
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 3.141592653589793d + "'", double21 == 3.141592653589793d);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertNotNull(vector3D42);
        org.junit.Assert.assertTrue(Double.isNaN(double49));
        org.junit.Assert.assertNotNull(rotation50);
        org.junit.Assert.assertNotNull(rotation51);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[-0.31746367442260337, 1.2637009275001716, 3.026886383418824]");
        org.junit.Assert.assertNotNull(vector3D60);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 0.9996303825414301d + "'", double61 == 0.9996303825414301d);
        org.junit.Assert.assertNotNull(rotation62);
        org.junit.Assert.assertNotNull(vector3D69);
        org.junit.Assert.assertNotNull(vector3D76);
        org.junit.Assert.assertNotNull(vector3D83);
        org.junit.Assert.assertNotNull(vector3D88);
        org.junit.Assert.assertNotNull(vector3D89);
    }

    @Test
    public void test1420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1420");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double13 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation5, rotation12);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation19 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D20 = rotation19.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation26 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double27 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation19, rotation26);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation28 = rotation12.applyInverseTo(rotation19);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation34 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D35 = rotation34.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation41 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D42 = rotation41.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation43 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D35, vector3D42);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation45 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D35, (double) 1L);
        double double46 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation19, rotation45);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation47 = rotation19.revert();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation53 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-0.1855270382668764d), (double) 10, (double) (short) -1, (double) 100.0f, false);
        double[][] doubleArray54 = rotation53.getMatrix();
        double[][] doubleArray55 = rotation53.getMatrix();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D56 = rotation53.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation57 = rotation47.applyTo(rotation53);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D58 = rotation53.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation60 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D58, 3.1216925665694406d);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation61 = rotation60.revert();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertNotNull(vector3D20);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertNotNull(rotation28);
        org.junit.Assert.assertNotNull(vector3D35);
        org.junit.Assert.assertNotNull(vector3D42);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.9456205751905904d + "'", double46 == 0.9456205751905904d);
        org.junit.Assert.assertNotNull(rotation47);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(vector3D56);
        org.junit.Assert.assertNotNull(rotation57);
        org.junit.Assert.assertNotNull(vector3D58);
        org.junit.Assert.assertNotNull(rotation61);
    }

    @Test
    public void test1421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1421");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation20.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double28 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation20, rotation27);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation34 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D35 = rotation34.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation41 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double42 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation34, rotation41);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation43 = rotation27.applyInverseTo(rotation34);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D44 = rotation43.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation45 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D44);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation46 = rotation45.revert();
        double double47 = rotation45.getQ2();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D48 = rotation45.getAxis();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertNotNull(vector3D35);
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertNotNull(rotation43);
        org.junit.Assert.assertNotNull(vector3D44);
        org.junit.Assert.assertNotNull(rotation46);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + (-0.06415703545444096d) + "'", double47 == (-0.06415703545444096d));
        org.junit.Assert.assertNotNull(vector3D48);
    }

    @Test
    public void test1422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1422");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (-1L), 0.0d, (-0.0d), 17.66239947251099d, false);
        double double6 = rotation5.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D7 = rotation5.getAxis();
        double double8 = rotation5.getQ0();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D15 = rotation14.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation21 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double22 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation14, rotation21);
        double double23 = rotation21.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation29 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D30 = rotation29.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation36 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double37 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation29, rotation36);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation43 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D44 = rotation43.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation50 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double51 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation43, rotation50);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation52 = rotation36.applyInverseTo(rotation43);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation53 = rotation21.applyTo(rotation43);
        org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder54 = null;
        double[] doubleArray55 = rotation53.getAngles(rotationOrder54);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation61 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D62 = rotation61.getAxis();
        double double63 = rotation61.getQ0();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation64 = rotation53.applyInverseTo(rotation61);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation70 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) 100, 0.33900504942104487d, 0.09949879346007118d, true);
        double double71 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation61, rotation70);
        double[][] doubleArray72 = rotation70.getMatrix();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation74 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray72, (double) 0);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation76 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray72, (double) (short) 10);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation77 = rotation5.applyInverseTo(rotation76);
        double double78 = rotation76.getAngle();
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertNotNull(vector3D7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + (-1.0d) + "'", double8 == (-1.0d));
        org.junit.Assert.assertNotNull(vector3D15);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 3.141592653589793d + "'", double23 == 3.141592653589793d);
        org.junit.Assert.assertNotNull(vector3D30);
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertNotNull(vector3D44);
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertNotNull(rotation52);
        org.junit.Assert.assertNotNull(rotation53);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[-0.31746367442260337, 1.2637009275001716, 3.026886383418824]");
        org.junit.Assert.assertNotNull(vector3D62);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 0.9996303825414301d + "'", double63 == 0.9996303825414301d);
        org.junit.Assert.assertNotNull(rotation64);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 3.1030128410395363d + "'", double71 == 3.1030128410395363d);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(rotation77);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 3.141592653589793d + "'", double78 == 3.141592653589793d);
    }

    @Test
    public void test1423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1423");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (byte) 100, (double) 10L, (double) (short) 100, (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation11 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D12 = rotation11.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation18 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D19 = rotation18.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D12, vector3D19);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation22 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D12, (double) 100L);
        double double23 = rotation22.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation24 = rotation5.applyInverseTo(rotation22);
        double double25 = rotation5.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D26 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation28 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D26, (double) 10.0f);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation30 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D26, (double) '#');
        double double31 = rotation30.getQ2();
        double double32 = rotation30.getQ2();
        org.junit.Assert.assertNotNull(vector3D12);
        org.junit.Assert.assertNotNull(vector3D19);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + (-0.0d) + "'", double23 == (-0.0d));
        org.junit.Assert.assertNotNull(rotation24);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 1.0d + "'", double25 == 1.0d);
        org.junit.Assert.assertNotNull(vector3D26);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + (-0.9707361041235048d) + "'", double31 == (-0.9707361041235048d));
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + (-0.9707361041235048d) + "'", double32 == (-0.9707361041235048d));
    }

    @Test
    public void test1424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1424");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation19 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D20 = rotation19.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation21 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D13, vector3D20);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation23 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D13, (double) 100L);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation24 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation26 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, 9.079262566818354d);
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D20);
    }

    @Test
    public void test1425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1425");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0019129169749405736d, (-0.009949438965141721d), 0.7881701093115122d, 97.0d, false);
        double double6 = rotation5.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D7 = rotation5.getAxis();
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 97.0d + "'", double6 == 97.0d);
        org.junit.Assert.assertNotNull(vector3D7);
    }

    @Test
    public void test1426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1426");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double13 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation5, rotation12);
        double double14 = rotation12.getAngle();
        double double15 = rotation12.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D16 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation22 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D23 = rotation22.getAxis();
        double double24 = rotation22.getQ0();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D25 = rotation22.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation26 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D16, vector3D25);
        org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder27 = null;
        double[] doubleArray28 = rotation26.getAngles(rotationOrder27);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation29 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double30 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation26, rotation29);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 3.141592653589793d + "'", double14 == 3.141592653589793d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 3.141592653589793d + "'", double15 == 3.141592653589793d);
        org.junit.Assert.assertNotNull(vector3D16);
        org.junit.Assert.assertNotNull(vector3D23);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.9996303825414301d + "'", double24 == 0.9996303825414301d);
        org.junit.Assert.assertNotNull(vector3D25);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.2267643748213466, 0.1097292022168269, -0.34403195197355013]");
    }

    @Test
    public void test1427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1427");
        org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.geometry.euclidean.threed.Rotation rotation4 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(rotationOrder0, 0.047917108096983706d, (-0.06415703545444096d), 0.30408632088084614d);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1428");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation16 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, (double) 100L);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation22 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-1.0d), (double) (byte) 10, (double) (byte) 100, (double) 0L, true);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation28 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D29 = rotation28.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D36 = rotation35.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation37 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D29, vector3D36);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D38 = rotation22.applyTo(vector3D29);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation44 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D45 = rotation44.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation51 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D52 = rotation51.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation58 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D59 = rotation58.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation60 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D52, vector3D59);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation62 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D52, (double) 100L);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation63 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D45, vector3D52);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation69 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D70 = rotation69.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation71 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D38, vector3D52, vector3D70);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation73 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D38, (-0.0d));
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation79 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D80 = rotation79.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation86 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double87 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation79, rotation86);
        double double88 = rotation86.getQ1();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation89 = rotation73.applyTo(rotation86);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D90 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D91 = rotation73.applyInverseTo(vector3D90);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D29);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D38);
        org.junit.Assert.assertNotNull(vector3D45);
        org.junit.Assert.assertNotNull(vector3D52);
        org.junit.Assert.assertNotNull(vector3D59);
        org.junit.Assert.assertNotNull(vector3D70);
        org.junit.Assert.assertNotNull(vector3D80);
        org.junit.Assert.assertTrue(Double.isNaN(double87));
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 10.0d + "'", double88 == 10.0d);
        org.junit.Assert.assertNotNull(rotation89);
    }

    @Test
    public void test1429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1429");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation16 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, (double) 100L);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation22 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-1.0d), (double) (byte) 10, (double) (byte) 100, (double) 0L, true);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation28 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D29 = rotation28.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D36 = rotation35.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation37 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D29, vector3D36);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D38 = rotation22.applyTo(vector3D29);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation44 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D45 = rotation44.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation51 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D52 = rotation51.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation58 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D59 = rotation58.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation60 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D52, vector3D59);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation62 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D52, (double) 100L);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation63 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D45, vector3D52);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation69 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D70 = rotation69.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation71 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D38, vector3D52, vector3D70);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation73 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D52, (double) 1.0f);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation74 = rotation73.revert();
        org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder75 = null;
        double[] doubleArray76 = rotation73.getAngles(rotationOrder75);
        double double77 = rotation73.getQ2();
        double double78 = rotation73.getQ3();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D29);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D38);
        org.junit.Assert.assertNotNull(vector3D45);
        org.junit.Assert.assertNotNull(vector3D52);
        org.junit.Assert.assertNotNull(vector3D59);
        org.junit.Assert.assertNotNull(vector3D70);
        org.junit.Assert.assertNotNull(rotation74);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[2.356194490192345, 0.9999999999999999, -2.356194490192345]");
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 0.33900504942104487d + "'", double77 == 0.33900504942104487d);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 0.0d + "'", double78 == 0.0d);
    }

    @Test
    public void test1430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1430");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation20.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = rotation27.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation29 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D21, vector3D28);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation30 = rotation14.applyTo(rotation29);
        double double31 = rotation29.getAngle();
        double double32 = rotation29.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation38 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D39 = rotation38.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation45 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double46 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation38, rotation45);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation52 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D53 = rotation52.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation59 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double60 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation52, rotation59);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation61 = rotation45.applyInverseTo(rotation52);
        double double62 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation29, rotation45);
        double double63 = rotation29.getQ2();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(rotation30);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
        org.junit.Assert.assertNotNull(vector3D39);
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertNotNull(vector3D53);
        org.junit.Assert.assertTrue(Double.isNaN(double60));
        org.junit.Assert.assertNotNull(rotation61);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 3.141592653589793d + "'", double62 == 3.141592653589793d);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 0.0d + "'", double63 == 0.0d);
    }

    @Test
    public void test1431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1431");
        org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.geometry.euclidean.threed.Rotation rotation4 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(rotationOrder0, (-1.01885404374415d), (-0.5322022524502927d), 0.05506338499281072d);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1432");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation20.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = rotation27.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation34 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D35 = rotation34.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation36 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D28, vector3D35);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation42 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D43 = rotation42.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation49 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D50 = rotation49.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation51 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D43, vector3D50);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation52 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D13, vector3D21, vector3D35, vector3D50);
        double double53 = rotation52.getQ1();
        double double54 = rotation52.getQ2();
        double[][] doubleArray55 = rotation52.getMatrix();
        double[][] doubleArray56 = rotation52.getMatrix();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D35);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(vector3D50);
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
    }

    @Test
    public void test1433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1433");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation0 = org.apache.commons.math.geometry.euclidean.threed.Rotation.IDENTITY;
        double double1 = rotation0.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation2 = rotation0.revert();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D3 = rotation2.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation9 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D10 = rotation9.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation16 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D17 = rotation16.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation18 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D10, vector3D17);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation24 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D25 = rotation24.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation31 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D32 = rotation31.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation33 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D25, vector3D32);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation39 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D40 = rotation39.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation46 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D47 = rotation46.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation48 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D40, vector3D47);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation49 = rotation33.applyTo(rotation48);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation50 = rotation18.applyTo(rotation49);
        double double51 = rotation50.getAngle();
        double double52 = rotation50.getAngle();
        double double53 = rotation50.getQ1();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation59 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-0.1855270382668764d), (double) 1, Double.NaN, (double) (short) 100, false);
        double double60 = rotation59.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation61 = rotation59.revert();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation67 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D68 = rotation67.getAxis();
        double double69 = rotation67.getQ0();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D70 = rotation67.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D71 = rotation61.applyInverseTo(vector3D70);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D72 = rotation50.applyInverseTo(vector3D71);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation73 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D3, vector3D71);
        java.lang.Class<?> wildcardClass74 = rotation73.getClass();
        org.junit.Assert.assertNotNull(rotation0);
        org.junit.Assert.assertTrue("'" + double1 + "' != '" + 0.0d + "'", double1 == 0.0d);
        org.junit.Assert.assertNotNull(rotation2);
        org.junit.Assert.assertNotNull(vector3D3);
        org.junit.Assert.assertNotNull(vector3D10);
        org.junit.Assert.assertNotNull(vector3D17);
        org.junit.Assert.assertNotNull(vector3D25);
        org.junit.Assert.assertNotNull(vector3D32);
        org.junit.Assert.assertNotNull(vector3D40);
        org.junit.Assert.assertNotNull(vector3D47);
        org.junit.Assert.assertNotNull(rotation49);
        org.junit.Assert.assertNotNull(rotation50);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.0d + "'", double51 == 0.0d);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.0d + "'", double52 == 0.0d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.0d + "'", double53 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double60));
        org.junit.Assert.assertNotNull(rotation61);
        org.junit.Assert.assertNotNull(vector3D68);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.9996303825414301d + "'", double69 == 0.9996303825414301d);
        org.junit.Assert.assertNotNull(vector3D70);
        org.junit.Assert.assertNotNull(vector3D71);
        org.junit.Assert.assertNotNull(vector3D72);
        org.junit.Assert.assertNotNull(wildcardClass74);
    }

    @Test
    public void test1434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1434");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) 10, 0.0d, (double) (byte) 0, 10.0d, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation11 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (byte) 100, (double) 10L, (double) (short) 100, (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation17 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D18 = rotation17.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation24 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D25 = rotation24.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation26 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D18, vector3D25);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation28 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D18, (double) 100L);
        double double29 = rotation28.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation30 = rotation11.applyInverseTo(rotation28);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation31 = rotation5.applyInverseTo(rotation28);
        double double32 = rotation5.getQ3();
        double double33 = rotation5.getQ0();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation34 = rotation5.revert();
        double double35 = rotation34.getQ2();
        org.junit.Assert.assertNotNull(vector3D18);
        org.junit.Assert.assertNotNull(vector3D25);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + (-0.0d) + "'", double29 == (-0.0d));
        org.junit.Assert.assertNotNull(rotation30);
        org.junit.Assert.assertNotNull(rotation31);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 10.0d + "'", double32 == 10.0d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 10.0d + "'", double33 == 10.0d);
        org.junit.Assert.assertNotNull(rotation34);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
    }

    @Test
    public void test1435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1435");
        org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.geometry.euclidean.threed.Rotation rotation4 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(rotationOrder0, 0.2199735373126486d, (-0.0d), (double) 10L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1436");
        org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.geometry.euclidean.threed.Rotation rotation4 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(rotationOrder0, 0.7881701093115124d, 0.8902920284863246d, 945.8973484711985d);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1437");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double13 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation5, rotation12);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation19 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D20 = rotation19.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation26 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double27 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation19, rotation26);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation28 = rotation12.applyInverseTo(rotation19);
        double double29 = rotation28.getQ1();
        double double30 = rotation28.getQ3();
        double double31 = rotation28.getQ1();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation37 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D38 = rotation37.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation44 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D45 = rotation44.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation46 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D38, vector3D45);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation52 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D53 = rotation52.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation59 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D60 = rotation59.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation61 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D53, vector3D60);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation62 = rotation46.applyTo(rotation61);
        double double63 = rotation61.getAngle();
        double double64 = rotation61.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation70 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D71 = rotation70.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation77 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double78 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation70, rotation77);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation84 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D85 = rotation84.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation91 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double92 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation84, rotation91);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation93 = rotation77.applyInverseTo(rotation84);
        double double94 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation61, rotation77);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation95 = rotation28.applyInverseTo(rotation61);
        double double96 = rotation61.getQ0();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertNotNull(vector3D20);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertNotNull(rotation28);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 10.015527486617021d + "'", double29 == 10.015527486617021d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.7881701093115122d + "'", double30 == 0.7881701093115122d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 10.015527486617021d + "'", double31 == 10.015527486617021d);
        org.junit.Assert.assertNotNull(vector3D38);
        org.junit.Assert.assertNotNull(vector3D45);
        org.junit.Assert.assertNotNull(vector3D53);
        org.junit.Assert.assertNotNull(vector3D60);
        org.junit.Assert.assertNotNull(rotation62);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 0.0d + "'", double63 == 0.0d);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 0.0d + "'", double64 == 0.0d);
        org.junit.Assert.assertNotNull(vector3D71);
        org.junit.Assert.assertTrue(Double.isNaN(double78));
        org.junit.Assert.assertNotNull(vector3D85);
        org.junit.Assert.assertTrue(Double.isNaN(double92));
        org.junit.Assert.assertNotNull(rotation93);
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + 3.141592653589793d + "'", double94 == 3.141592653589793d);
        org.junit.Assert.assertNotNull(rotation95);
        org.junit.Assert.assertTrue("'" + double96 + "' != '" + 1.0d + "'", double96 == 1.0d);
    }

    @Test
    public void test1438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1438");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation20.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = rotation27.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation29 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D21, vector3D28);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D36 = rotation35.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation42 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D43 = rotation42.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation44 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D36, vector3D43);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation45 = rotation29.applyTo(rotation44);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation46 = rotation14.applyTo(rotation45);
        double[][] doubleArray47 = rotation46.getMatrix();
        double double48 = rotation46.getQ1();
        double[][] doubleArray49 = rotation46.getMatrix();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation51 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray49, (double) 100L);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D52 = rotation51.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation53 = rotation51.revert();
        double[][] doubleArray54 = rotation51.getMatrix();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation55 = rotation51.revert();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(rotation45);
        org.junit.Assert.assertNotNull(rotation46);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(vector3D52);
        org.junit.Assert.assertNotNull(rotation53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(rotation55);
    }

    @Test
    public void test1439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1439");
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.geometry.euclidean.threed.Rotation rotation2 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D0, 0.09900990099009903d);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1440");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation16 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, (double) 1L);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation22 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D23 = rotation22.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation29 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D30 = rotation29.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation31 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D23, vector3D30);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation37 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D38 = rotation37.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation44 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D45 = rotation44.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation51 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D52 = rotation51.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation53 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D45, vector3D52);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation59 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D60 = rotation59.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation66 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D67 = rotation66.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation68 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D60, vector3D67);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation69 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D30, vector3D38, vector3D52, vector3D67);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation70 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D52);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation72 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, (double) 1L);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation74 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, 0.9950846276202212d);
        double double75 = rotation74.getQ3();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D23);
        org.junit.Assert.assertNotNull(vector3D30);
        org.junit.Assert.assertNotNull(vector3D38);
        org.junit.Assert.assertNotNull(vector3D45);
        org.junit.Assert.assertNotNull(vector3D52);
        org.junit.Assert.assertNotNull(vector3D60);
        org.junit.Assert.assertNotNull(vector3D67);
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 0.0d + "'", double75 == 0.0d);
    }

    @Test
    public void test1441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1441");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation20.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = rotation27.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation29 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D21, vector3D28);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation30 = rotation14.applyTo(rotation29);
        double double31 = rotation30.getQ0();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation37 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D38 = rotation37.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation44 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D45 = rotation44.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation46 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D38, vector3D45);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation52 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation53 = rotation46.applyInverseTo(rotation52);
        double double54 = rotation52.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation60 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D61 = rotation60.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation67 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double68 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation60, rotation67);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation74 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D75 = rotation74.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation81 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D82 = rotation81.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation83 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D75, vector3D82);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation89 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation90 = rotation83.applyInverseTo(rotation89);
        double double91 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation67, rotation83);
        double double92 = rotation83.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation93 = rotation52.applyInverseTo(rotation83);
        double double94 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation30, rotation83);
        double double95 = rotation30.getAngle();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(rotation30);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 1.0d + "'", double31 == 1.0d);
        org.junit.Assert.assertNotNull(vector3D38);
        org.junit.Assert.assertNotNull(vector3D45);
        org.junit.Assert.assertNotNull(rotation53);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 3.141592653589793d + "'", double54 == 3.141592653589793d);
        org.junit.Assert.assertNotNull(vector3D61);
        org.junit.Assert.assertTrue(Double.isNaN(double68));
        org.junit.Assert.assertNotNull(vector3D75);
        org.junit.Assert.assertNotNull(vector3D82);
        org.junit.Assert.assertNotNull(rotation90);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 3.141592653589793d + "'", double91 == 3.141592653589793d);
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 0.0d + "'", double92 == 0.0d);
        org.junit.Assert.assertNotNull(rotation93);
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + 0.0d + "'", double94 == 0.0d);
        org.junit.Assert.assertTrue("'" + double95 + "' != '" + 0.0d + "'", double95 == 0.0d);
    }

    @Test
    public void test1442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1442");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) 10, 0.0d, (double) (byte) 0, 10.0d, false);
        double double6 = rotation5.getQ1();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation19 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D20 = rotation19.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation21 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D13, vector3D20);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = rotation27.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation34 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D35 = rotation34.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation41 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D42 = rotation41.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation43 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D35, vector3D42);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation49 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D50 = rotation49.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation56 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D57 = rotation56.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation58 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D50, vector3D57);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation59 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D20, vector3D28, vector3D42, vector3D57);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D60 = rotation5.applyTo(vector3D42);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation62 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D42, 0.7881701093115122d);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation68 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D69 = rotation68.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation75 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D76 = rotation75.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation77 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D69, vector3D76);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation79 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D69, (double) 100L);
        double double80 = rotation79.getQ1();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation81 = rotation62.applyTo(rotation79);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation87 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(28.016837073341897d, 1.0d, 0.3388903615770647d, (double) 10.0f, true);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation88 = rotation81.applyTo(rotation87);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D89 = rotation81.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder90 = null;
        double[] doubleArray91 = rotation81.getAngles(rotationOrder90);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D20);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D35);
        org.junit.Assert.assertNotNull(vector3D42);
        org.junit.Assert.assertNotNull(vector3D50);
        org.junit.Assert.assertNotNull(vector3D57);
        org.junit.Assert.assertNotNull(vector3D60);
        org.junit.Assert.assertNotNull(vector3D69);
        org.junit.Assert.assertNotNull(vector3D76);
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + (-0.1855270382668764d) + "'", double80 == (-0.1855270382668764d));
        org.junit.Assert.assertNotNull(rotation81);
        org.junit.Assert.assertNotNull(rotation88);
        org.junit.Assert.assertNotNull(vector3D89);
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray91), "[2.356194490192345, 0.2572051944381254, -2.356194490192345]");
    }

    @Test
    public void test1443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1443");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-1.0d), (double) (byte) 10, (double) (byte) 100, (double) 0L, true);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation11 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D12 = rotation11.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation5.applyInverseTo(vector3D12);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation19 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D20 = rotation19.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation26 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D27 = rotation26.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation28 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D20, vector3D27);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation30 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D20, (double) 1L);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation31 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D13, vector3D20);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation33 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D13, 0.31538323081891095d);
        double double34 = rotation33.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D35 = rotation33.getAxis();
        org.junit.Assert.assertNotNull(vector3D12);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D20);
        org.junit.Assert.assertNotNull(vector3D27);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.001978792867119834d + "'", double34 == 0.001978792867119834d);
        org.junit.Assert.assertNotNull(vector3D35);
    }

    @Test
    public void test1444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1444");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.33889036157706476d, 10.315768314846704d, 2.5401670844916904d, 0.3388903615770647d, false);
    }

    @Test
    public void test1445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1445");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double13 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation5, rotation12);
        double double14 = rotation12.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation20.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double28 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation20, rotation27);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation34 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D35 = rotation34.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation41 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double42 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation34, rotation41);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation43 = rotation27.applyInverseTo(rotation34);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation44 = rotation12.applyTo(rotation34);
        org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder45 = null;
        double[] doubleArray46 = rotation44.getAngles(rotationOrder45);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation52 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D53 = rotation52.getAxis();
        double double54 = rotation52.getQ0();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation55 = rotation44.applyInverseTo(rotation52);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation61 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D62 = rotation61.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation68 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D69 = rotation68.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation75 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D76 = rotation75.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation77 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D69, vector3D76);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation79 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D69, (double) 100L);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation80 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D62, vector3D69);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D81 = rotation55.applyTo(vector3D69);
        double double82 = rotation55.getAngle();
        double double83 = rotation55.getQ0();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 3.141592653589793d + "'", double14 == 3.141592653589793d);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertNotNull(vector3D35);
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertNotNull(rotation43);
        org.junit.Assert.assertNotNull(rotation44);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[-0.31746367442260337, 1.2637009275001716, 3.026886383418824]");
        org.junit.Assert.assertNotNull(vector3D53);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.9996303825414301d + "'", double54 == 0.9996303825414301d);
        org.junit.Assert.assertNotNull(rotation55);
        org.junit.Assert.assertNotNull(vector3D62);
        org.junit.Assert.assertNotNull(vector3D69);
        org.junit.Assert.assertNotNull(vector3D76);
        org.junit.Assert.assertNotNull(vector3D81);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 3.141592653589793d + "'", double82 == 3.141592653589793d);
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 2.7755575615628914E-17d + "'", double83 == 2.7755575615628914E-17d);
    }

    @Test
    public void test1446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1446");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(3.1216925665368036d, (-8.717516503499631d), (-0.0d), 0.9949879346007117d, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation11 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D12 = rotation11.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation18 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double19 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation11, rotation18);
        double double20 = rotation18.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation26 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D27 = rotation26.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation33 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D34 = rotation33.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D27, vector3D34);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation41 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D42 = rotation41.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation48 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D49 = rotation48.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation50 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D42, vector3D49);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation51 = rotation35.applyTo(rotation50);
        double double52 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation18, rotation51);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation58 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D59 = rotation58.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation65 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double66 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation58, rotation65);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation72 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D73 = rotation72.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation79 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double80 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation72, rotation79);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation81 = rotation65.applyInverseTo(rotation72);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation82 = rotation18.applyInverseTo(rotation72);
        double double83 = rotation72.getQ1();
        double double84 = rotation72.getQ1();
        double double85 = rotation72.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation86 = rotation5.applyInverseTo(rotation72);
        double double87 = rotation5.getQ1();
        double double88 = rotation5.getQ1();
        org.junit.Assert.assertNotNull(vector3D12);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 3.141592653589793d + "'", double20 == 3.141592653589793d);
        org.junit.Assert.assertNotNull(vector3D27);
        org.junit.Assert.assertNotNull(vector3D34);
        org.junit.Assert.assertNotNull(vector3D42);
        org.junit.Assert.assertNotNull(vector3D49);
        org.junit.Assert.assertNotNull(rotation51);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 3.141592653589793d + "'", double52 == 3.141592653589793d);
        org.junit.Assert.assertNotNull(vector3D59);
        org.junit.Assert.assertTrue(Double.isNaN(double66));
        org.junit.Assert.assertNotNull(vector3D73);
        org.junit.Assert.assertTrue(Double.isNaN(double80));
        org.junit.Assert.assertNotNull(rotation81);
        org.junit.Assert.assertNotNull(rotation82);
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 0.01922366120271981d + "'", double83 == 0.01922366120271981d);
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 0.01922366120271981d + "'", double84 == 0.01922366120271981d);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 0.054379424809409445d + "'", double85 == 0.054379424809409445d);
        org.junit.Assert.assertNotNull(rotation86);
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + (-8.717516503499631d) + "'", double87 == (-8.717516503499631d));
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + (-8.717516503499631d) + "'", double88 == (-8.717516503499631d));
    }

    @Test
    public void test1447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1447");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(2.7755575615628914E-17d, (-8.717516503499631d), (-0.005755946541407356d), (double) (-1L), false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation6 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double7 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation5, rotation6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1448");
        org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.geometry.euclidean.threed.Rotation rotation4 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(rotationOrder0, (double) '#', 0.031046851316360462d, (-0.11924330679564402d));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1449");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-1.0d), (double) (byte) 10, (double) (byte) 100, (double) 0L, true);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation11 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D12 = rotation11.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation18 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D19 = rotation18.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D12, vector3D19);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation5.applyTo(vector3D12);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation23 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D12, (double) (byte) 0);
        double double24 = rotation23.getQ2();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation25 = rotation23.revert();
        double[][] doubleArray26 = rotation23.getMatrix();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = rotation23.revert();
        double double28 = rotation27.getQ1();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation34 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D35 = rotation34.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation41 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D42 = rotation41.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation43 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D35, vector3D42);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation49 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D50 = rotation49.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation56 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D57 = rotation56.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation58 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D50, vector3D57);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation64 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D65 = rotation64.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation71 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D72 = rotation71.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation73 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D65, vector3D72);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation74 = rotation58.applyTo(rotation73);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation75 = rotation43.applyTo(rotation74);
        double[][] doubleArray76 = rotation75.getMatrix();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation78 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray76, (double) '4');
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation80 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray76, 0.0d);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation82 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray76, 0.20120377604668613d);
        double double83 = rotation82.getQ2();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation84 = rotation82.revert();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation85 = rotation27.applyTo(rotation84);
        double[][] doubleArray86 = rotation27.getMatrix();
        org.junit.Assert.assertNotNull(vector3D12);
        org.junit.Assert.assertNotNull(vector3D19);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
        org.junit.Assert.assertNotNull(rotation25);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertNotNull(rotation27);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
        org.junit.Assert.assertNotNull(vector3D35);
        org.junit.Assert.assertNotNull(vector3D42);
        org.junit.Assert.assertNotNull(vector3D50);
        org.junit.Assert.assertNotNull(vector3D57);
        org.junit.Assert.assertNotNull(vector3D65);
        org.junit.Assert.assertNotNull(vector3D72);
        org.junit.Assert.assertNotNull(rotation74);
        org.junit.Assert.assertNotNull(rotation75);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 0.0d + "'", double83 == 0.0d);
        org.junit.Assert.assertNotNull(rotation84);
        org.junit.Assert.assertNotNull(rotation85);
        org.junit.Assert.assertNotNull(doubleArray86);
    }

    @Test
    public void test1450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1450");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-0.1855270382668764d), (double) 10, (double) (short) -1, (double) 100.0f, false);
        double[][] doubleArray6 = rotation5.getMatrix();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation19 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D20 = rotation19.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation21 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D13, vector3D20);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation23 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D13, (double) 100L);
        double double24 = rotation23.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation25 = rotation23.revert();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation31 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (byte) 100, (double) 10L, (double) (short) 100, (double) 1L, false);
        double double32 = rotation31.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation33 = rotation25.applyInverseTo(rotation31);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation34 = rotation5.applyInverseTo(rotation33);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation40 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D41 = rotation40.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation47 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D48 = rotation47.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation49 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D41, vector3D48);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation55 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D56 = rotation55.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation62 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D63 = rotation62.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation64 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D56, vector3D63);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation65 = rotation49.applyTo(rotation64);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation71 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) 10, 0.0d, (double) (byte) 0, 10.0d, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation72 = rotation49.applyTo(rotation71);
        double double73 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation34, rotation49);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation79 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D80 = rotation79.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation86 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D87 = rotation86.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation88 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D80, vector3D87);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation94 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation95 = rotation88.applyInverseTo(rotation94);
        double double96 = rotation95.getAngle();
        double double97 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation49, rotation95);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D98 = rotation49.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation99 = rotation49.revert();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D20);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + (-0.0d) + "'", double24 == (-0.0d));
        org.junit.Assert.assertNotNull(rotation25);
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertNotNull(rotation33);
        org.junit.Assert.assertNotNull(rotation34);
        org.junit.Assert.assertNotNull(vector3D41);
        org.junit.Assert.assertNotNull(vector3D48);
        org.junit.Assert.assertNotNull(vector3D56);
        org.junit.Assert.assertNotNull(vector3D63);
        org.junit.Assert.assertNotNull(rotation65);
        org.junit.Assert.assertNotNull(rotation72);
        org.junit.Assert.assertTrue(Double.isNaN(double73));
        org.junit.Assert.assertNotNull(vector3D80);
        org.junit.Assert.assertNotNull(vector3D87);
        org.junit.Assert.assertNotNull(rotation95);
        org.junit.Assert.assertTrue("'" + double96 + "' != '" + 3.141592653589793d + "'", double96 == 3.141592653589793d);
        org.junit.Assert.assertTrue("'" + double97 + "' != '" + 3.141592653589793d + "'", double97 == 3.141592653589793d);
        org.junit.Assert.assertNotNull(vector3D98);
        org.junit.Assert.assertNotNull(rotation99);
    }

    @Test
    public void test1451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1451");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation16 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, 0.0d);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation22 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D23 = rotation22.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation29 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D30 = rotation29.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation31 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D23, vector3D30);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation37 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D38 = rotation37.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation44 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D45 = rotation44.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation51 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D52 = rotation51.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation53 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D45, vector3D52);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation59 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D60 = rotation59.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation66 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D67 = rotation66.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation68 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D60, vector3D67);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation69 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D30, vector3D38, vector3D52, vector3D67);
        double double70 = rotation69.getQ1();
        double double71 = rotation69.getQ2();
        double[][] doubleArray72 = rotation69.getMatrix();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation78 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D79 = rotation78.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation80 = rotation69.applyTo(rotation78);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation81 = rotation16.applyInverseTo(rotation80);
        java.lang.Class<?> wildcardClass82 = rotation16.getClass();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D23);
        org.junit.Assert.assertNotNull(vector3D30);
        org.junit.Assert.assertNotNull(vector3D38);
        org.junit.Assert.assertNotNull(vector3D45);
        org.junit.Assert.assertNotNull(vector3D52);
        org.junit.Assert.assertNotNull(vector3D60);
        org.junit.Assert.assertNotNull(vector3D67);
        org.junit.Assert.assertTrue(Double.isNaN(double70));
        org.junit.Assert.assertTrue(Double.isNaN(double71));
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(vector3D79);
        org.junit.Assert.assertNotNull(rotation80);
        org.junit.Assert.assertNotNull(rotation81);
        org.junit.Assert.assertNotNull(wildcardClass82);
    }

    @Test
    public void test1452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1452");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation20.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = rotation27.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation34 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D35 = rotation34.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation36 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D28, vector3D35);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation42 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D43 = rotation42.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation49 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D50 = rotation49.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation51 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D43, vector3D50);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation52 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D13, vector3D21, vector3D35, vector3D50);
        double double53 = rotation52.getQ1();
        double double54 = rotation52.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation60 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-0.1855270382668764d), (double) 10, (double) (short) -1, (double) 100.0f, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation61 = rotation60.revert();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation62 = rotation52.applyInverseTo(rotation60);
        double double63 = rotation62.getAngle();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D35);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(vector3D50);
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertNotNull(rotation61);
        org.junit.Assert.assertNotNull(rotation62);
        org.junit.Assert.assertTrue(Double.isNaN(double63));
    }

    @Test
    public void test1453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1453");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation20.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = rotation27.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation29 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D21, vector3D28);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D36 = rotation35.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation42 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D43 = rotation42.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation44 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D36, vector3D43);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation45 = rotation29.applyTo(rotation44);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation46 = rotation14.applyTo(rotation45);
        double[][] doubleArray47 = rotation46.getMatrix();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation49 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray47, (double) 10);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation51 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray47, (double) (byte) 100);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation53 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray47, 0.0d);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation59 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D60 = rotation59.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation66 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D67 = rotation66.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation68 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D60, vector3D67);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation74 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation75 = rotation68.applyInverseTo(rotation74);
        double double76 = rotation68.getQ2();
        double[][] doubleArray77 = rotation68.getMatrix();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation79 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray77, 0.7881701093115122d);
        double double80 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation53, rotation79);
        double[][] doubleArray81 = rotation53.getMatrix();
        double double82 = rotation53.getQ3();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(rotation45);
        org.junit.Assert.assertNotNull(rotation46);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(vector3D60);
        org.junit.Assert.assertNotNull(vector3D67);
        org.junit.Assert.assertNotNull(rotation75);
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 0.0d + "'", double76 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 0.0d + "'", double80 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 0.0d + "'", double82 == 0.0d);
    }

    @Test
    public void test1454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1454");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double13 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation5, rotation12);
        double double14 = rotation12.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation20.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double28 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation20, rotation27);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation34 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D35 = rotation34.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation41 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D42 = rotation41.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation43 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D35, vector3D42);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation49 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation50 = rotation43.applyInverseTo(rotation49);
        double double51 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation27, rotation43);
        double double52 = rotation43.getQ3();
        double double53 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation12, rotation43);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation59 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) 100, (double) (byte) -1, (double) (short) 10, 0.9456205751905904d, true);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation60 = rotation43.applyTo(rotation59);
        double double61 = rotation43.getQ0();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1.0d + "'", double14 == 1.0d);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertNotNull(vector3D35);
        org.junit.Assert.assertNotNull(vector3D42);
        org.junit.Assert.assertNotNull(rotation50);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 3.141592653589793d + "'", double51 == 3.141592653589793d);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.0d + "'", double52 == 0.0d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 3.141592653589793d + "'", double53 == 3.141592653589793d);
        org.junit.Assert.assertNotNull(rotation60);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 1.0d + "'", double61 == 1.0d);
    }

    @Test
    public void test1455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1455");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (short) 100, (-8.717516503499631d), (-0.33900504942104487d), 0.7881701093115122d, false);
        double double6 = rotation5.getQ2();
        double double7 = rotation5.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation13 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D14 = rotation13.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation20.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation22 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D14, vector3D21);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation28 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D29 = rotation28.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D36 = rotation35.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation42 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D43 = rotation42.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation44 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D36, vector3D43);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation50 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D51 = rotation50.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation57 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D58 = rotation57.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation59 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D51, vector3D58);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation60 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D21, vector3D29, vector3D43, vector3D58);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation62 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D21, (-0.0d));
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation64 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D21, (-0.1855270382668764d));
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation65 = rotation5.applyInverseTo(rotation64);
        double double66 = rotation64.getQ3();
        double double67 = rotation64.getQ1();
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + (-0.33900504942104487d) + "'", double6 == (-0.33900504942104487d));
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.7881701093115122d + "'", double7 == 0.7881701093115122d);
        org.junit.Assert.assertNotNull(vector3D14);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D29);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(vector3D51);
        org.junit.Assert.assertNotNull(vector3D58);
        org.junit.Assert.assertNotNull(rotation65);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + (-0.0d) + "'", double66 == (-0.0d));
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + (-0.06549968080510009d) + "'", double67 == (-0.06549968080510009d));
    }

    @Test
    public void test1456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1456");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double13 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation5, rotation12);
        double double14 = rotation12.getAngle();
        double double15 = rotation12.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D16 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D17 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation18 = rotation12.revert();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D19 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D20 = rotation12.applyTo(vector3D19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 3.141592653589793d + "'", double14 == 3.141592653589793d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 3.141592653589793d + "'", double15 == 3.141592653589793d);
        org.junit.Assert.assertNotNull(vector3D16);
        org.junit.Assert.assertNotNull(vector3D17);
        org.junit.Assert.assertNotNull(rotation18);
    }

    @Test
    public void test1457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1457");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (short) -1, (double) 10.0f, (double) (byte) 100, (-0.005755946541407356d), true);
        double[][] doubleArray6 = rotation5.getMatrix();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) 10, 0.0d, (double) (byte) 0, 10.0d, false);
        double double13 = rotation12.getQ1();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation19 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D20 = rotation19.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation26 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D27 = rotation26.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation28 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D20, vector3D27);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation34 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D35 = rotation34.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation41 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D42 = rotation41.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation48 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D49 = rotation48.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation50 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D42, vector3D49);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation56 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D57 = rotation56.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation63 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D64 = rotation63.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation65 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D57, vector3D64);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation66 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D27, vector3D35, vector3D49, vector3D64);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D67 = rotation12.applyTo(vector3D49);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation69 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D49, 0.7881701093115122d);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation75 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D76 = rotation75.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation82 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D83 = rotation82.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation84 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D76, vector3D83);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation86 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D76, (double) 100L);
        double double87 = rotation86.getQ1();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation88 = rotation69.applyTo(rotation86);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation94 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(28.016837073341897d, 1.0d, 0.3388903615770647d, (double) 10.0f, true);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation95 = rotation88.applyTo(rotation94);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D96 = rotation88.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D97 = rotation88.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D98 = rotation5.applyInverseTo(vector3D97);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertNotNull(vector3D20);
        org.junit.Assert.assertNotNull(vector3D27);
        org.junit.Assert.assertNotNull(vector3D35);
        org.junit.Assert.assertNotNull(vector3D42);
        org.junit.Assert.assertNotNull(vector3D49);
        org.junit.Assert.assertNotNull(vector3D57);
        org.junit.Assert.assertNotNull(vector3D64);
        org.junit.Assert.assertNotNull(vector3D67);
        org.junit.Assert.assertNotNull(vector3D76);
        org.junit.Assert.assertNotNull(vector3D83);
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + (-0.1855270382668764d) + "'", double87 == (-0.1855270382668764d));
        org.junit.Assert.assertNotNull(rotation88);
        org.junit.Assert.assertNotNull(rotation95);
        org.junit.Assert.assertNotNull(vector3D96);
        org.junit.Assert.assertNotNull(vector3D97);
        org.junit.Assert.assertNotNull(vector3D98);
    }

    @Test
    public void test1458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1458");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-0.0d), 0.09949879346007118d, (double) (-1L), 0.0d, true);
        double double6 = rotation5.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.09949879346007118d, 0.9996303825414301d, (double) 0L, 10.0d, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation18 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D19 = rotation18.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation25 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double26 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation18, rotation25);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation32 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D33 = rotation32.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation39 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D40 = rotation39.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation41 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D33, vector3D40);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation47 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation48 = rotation41.applyInverseTo(rotation47);
        double double49 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation25, rotation41);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D50 = rotation25.getAxis();
        double[][] doubleArray51 = rotation25.getMatrix();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D52 = rotation25.getAxis();
        double double53 = rotation25.getQ1();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation59 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (short) 1, (double) 100L, (double) ' ', 0.0d, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation60 = rotation25.applyInverseTo(rotation59);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation61 = rotation12.applyInverseTo(rotation59);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation62 = rotation5.applyInverseTo(rotation61);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 3.141592653589793d + "'", double6 == 3.141592653589793d);
        org.junit.Assert.assertNotNull(vector3D19);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertNotNull(vector3D33);
        org.junit.Assert.assertNotNull(vector3D40);
        org.junit.Assert.assertNotNull(rotation48);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 3.141592653589793d + "'", double49 == 3.141592653589793d);
        org.junit.Assert.assertNotNull(vector3D50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(vector3D52);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 10.0d + "'", double53 == 10.0d);
        org.junit.Assert.assertNotNull(rotation60);
        org.junit.Assert.assertNotNull(rotation61);
        org.junit.Assert.assertNotNull(rotation62);
    }

    @Test
    public void test1459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1459");
        org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.geometry.euclidean.threed.Rotation rotation4 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(rotationOrder0, 1.3713780210687443d, 2.566370614359173d, (double) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1460");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double13 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation5, rotation12);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation19 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D20 = rotation19.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation26 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double27 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation19, rotation26);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation28 = rotation12.applyInverseTo(rotation19);
        double double29 = rotation28.getQ1();
        double double30 = rotation28.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder31 = null;
        double[] doubleArray32 = rotation28.getAngles(rotationOrder31);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation38 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D39 = rotation38.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation45 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D46 = rotation45.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation47 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D39, vector3D46);
        double[][] doubleArray48 = rotation47.getMatrix();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation50 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray48, 3.7105407653375275d);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation51 = rotation28.applyTo(rotation50);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation57 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) 0, 100.0d, (double) (short) 100, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation63 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-1.0d), (double) (byte) 10, (double) (byte) 100, (double) 0L, true);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation69 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D70 = rotation69.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation76 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D77 = rotation76.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation78 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D70, vector3D77);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D79 = rotation63.applyTo(vector3D70);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation81 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D70, 0.9996303825414301d);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D82 = rotation57.applyInverseTo(vector3D70);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D83 = rotation51.applyInverseTo(vector3D70);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation85 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D83, (-0.009949438965141721d));
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertNotNull(vector3D20);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertNotNull(rotation28);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 10.015527486617021d + "'", double29 == 10.015527486617021d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.7881701093115122d + "'", double30 == 0.7881701093115122d);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[-0.31746367442260337, 1.2637009275001716, 3.026886383418824]");
        org.junit.Assert.assertNotNull(vector3D39);
        org.junit.Assert.assertNotNull(vector3D46);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(rotation51);
        org.junit.Assert.assertNotNull(vector3D70);
        org.junit.Assert.assertNotNull(vector3D77);
        org.junit.Assert.assertNotNull(vector3D79);
        org.junit.Assert.assertNotNull(vector3D82);
        org.junit.Assert.assertNotNull(vector3D83);
    }

    @Test
    public void test1461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1461");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double13 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation5, rotation12);
        double double14 = rotation12.getAngle();
        double double15 = rotation12.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation21 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (-1L), 0.0d, (-0.0d), 17.66239947251099d, false);
        double double22 = rotation21.getAngle();
        double double23 = rotation21.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation29 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-1.0d), (double) (byte) 10, (double) (byte) 100, (double) 0L, true);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D36 = rotation35.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation42 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D43 = rotation42.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation44 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D36, vector3D43);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D45 = rotation29.applyTo(vector3D36);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation51 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) 10, 0.0d, (double) (byte) 0, 10.0d, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation57 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (byte) 100, (double) 10L, (double) (short) 100, (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation63 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D64 = rotation63.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation70 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D71 = rotation70.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation72 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D64, vector3D71);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation74 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D64, (double) 100L);
        double double75 = rotation74.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation76 = rotation57.applyInverseTo(rotation74);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation77 = rotation51.applyInverseTo(rotation74);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation78 = rotation77.revert();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D79 = rotation78.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation80 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D36, vector3D79);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation81 = rotation80.revert();
        double[][] doubleArray82 = rotation81.getMatrix();
        double double83 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation21, rotation81);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation84 = rotation12.applyInverseTo(rotation81);
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 3.141592653589793d + "'", double14 == 3.141592653589793d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 1.0d + "'", double15 == 1.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(vector3D45);
        org.junit.Assert.assertNotNull(vector3D64);
        org.junit.Assert.assertNotNull(vector3D71);
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + (-0.0d) + "'", double75 == (-0.0d));
        org.junit.Assert.assertNotNull(rotation76);
        org.junit.Assert.assertNotNull(rotation77);
        org.junit.Assert.assertNotNull(rotation78);
        org.junit.Assert.assertNotNull(vector3D79);
        org.junit.Assert.assertNotNull(rotation81);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertTrue(Double.isNaN(double83));
        org.junit.Assert.assertNotNull(rotation84);
    }

    @Test
    public void test1462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1462");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation16 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, (double) 100L);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation22 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-1.0d), (double) (byte) 10, (double) (byte) 100, (double) 0L, true);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation28 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D29 = rotation28.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D36 = rotation35.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation37 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D29, vector3D36);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D38 = rotation22.applyTo(vector3D29);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation44 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D45 = rotation44.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation51 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D52 = rotation51.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation58 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D59 = rotation58.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation60 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D52, vector3D59);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation62 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D52, (double) 100L);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation63 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D45, vector3D52);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation69 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D70 = rotation69.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation71 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D38, vector3D52, vector3D70);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation77 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D78 = rotation77.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation84 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D85 = rotation84.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation86 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D78, vector3D85);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation87 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D70, vector3D85);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation88 = rotation87.revert();
        double[][] doubleArray89 = rotation87.getMatrix();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation91 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray89, 0.27150322035250896d);
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D29);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D38);
        org.junit.Assert.assertNotNull(vector3D45);
        org.junit.Assert.assertNotNull(vector3D52);
        org.junit.Assert.assertNotNull(vector3D59);
        org.junit.Assert.assertNotNull(vector3D70);
        org.junit.Assert.assertNotNull(vector3D78);
        org.junit.Assert.assertNotNull(vector3D85);
        org.junit.Assert.assertNotNull(rotation88);
        org.junit.Assert.assertNotNull(doubleArray89);
    }

    @Test
    public void test1463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1463");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-0.1855270382668764d), (double) 10, (double) (short) -1, (double) 100.0f, false);
        double[][] doubleArray6 = rotation5.getMatrix();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation19 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D20 = rotation19.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation21 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D13, vector3D20);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation23 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D13, (double) 100L);
        double double24 = rotation23.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation25 = rotation23.revert();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation31 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (byte) 100, (double) 10L, (double) (short) 100, (double) 1L, false);
        double double32 = rotation31.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation33 = rotation25.applyInverseTo(rotation31);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation34 = rotation5.applyInverseTo(rotation33);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation40 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D41 = rotation40.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation47 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D48 = rotation47.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation49 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D41, vector3D48);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation55 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D56 = rotation55.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation62 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D63 = rotation62.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation64 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D56, vector3D63);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation65 = rotation49.applyTo(rotation64);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation71 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) 10, 0.0d, (double) (byte) 0, 10.0d, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation72 = rotation49.applyTo(rotation71);
        double double73 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation34, rotation49);
        double double74 = rotation49.getQ1();
        double[][] doubleArray75 = rotation49.getMatrix();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation77 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray75, 3.141592653589793d);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.geometry.euclidean.threed.Rotation rotation79 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray75, (-108.9963038254143d));
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.geometry.euclidean.threed.NotARotationMatrixException; message: unable to orthogonalize matrix in 10 iterations");
        } catch (org.apache.commons.math.geometry.euclidean.threed.NotARotationMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D20);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + (-0.0d) + "'", double24 == (-0.0d));
        org.junit.Assert.assertNotNull(rotation25);
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertNotNull(rotation33);
        org.junit.Assert.assertNotNull(rotation34);
        org.junit.Assert.assertNotNull(vector3D41);
        org.junit.Assert.assertNotNull(vector3D48);
        org.junit.Assert.assertNotNull(vector3D56);
        org.junit.Assert.assertNotNull(vector3D63);
        org.junit.Assert.assertNotNull(rotation65);
        org.junit.Assert.assertNotNull(rotation72);
        org.junit.Assert.assertTrue(Double.isNaN(double73));
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 0.0d + "'", double74 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray75);
    }

    @Test
    public void test1464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1464");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double13 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation5, rotation12);
        double double14 = rotation12.getAngle();
        double double15 = rotation12.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D16 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation22 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D23 = rotation22.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation29 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D30 = rotation29.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation31 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D23, vector3D30);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation33 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D23, (double) 100L);
        double double34 = rotation33.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = rotation33.revert();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation41 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (byte) 100, (double) 10L, (double) (short) 100, (double) 1L, false);
        double double42 = rotation41.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation43 = rotation35.applyInverseTo(rotation41);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation49 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation55 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-1.0d), (double) (byte) 10, (double) (byte) 100, (double) 0L, true);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation61 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D62 = rotation61.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation68 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D69 = rotation68.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation70 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D62, vector3D69);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D71 = rotation55.applyTo(vector3D62);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D72 = rotation49.applyTo(vector3D71);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D73 = rotation41.applyInverseTo(vector3D72);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D74 = rotation12.applyInverseTo(vector3D72);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation75 = org.apache.commons.math.geometry.euclidean.threed.Rotation.IDENTITY;
        double double76 = rotation75.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation77 = rotation75.revert();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D78 = rotation77.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation79 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D72, vector3D78);
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 3.141592653589793d + "'", double14 == 3.141592653589793d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 3.141592653589793d + "'", double15 == 3.141592653589793d);
        org.junit.Assert.assertNotNull(vector3D16);
        org.junit.Assert.assertNotNull(vector3D23);
        org.junit.Assert.assertNotNull(vector3D30);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + (-0.0d) + "'", double34 == (-0.0d));
        org.junit.Assert.assertNotNull(rotation35);
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertNotNull(rotation43);
        org.junit.Assert.assertNotNull(vector3D62);
        org.junit.Assert.assertNotNull(vector3D69);
        org.junit.Assert.assertNotNull(vector3D71);
        org.junit.Assert.assertNotNull(vector3D72);
        org.junit.Assert.assertNotNull(vector3D73);
        org.junit.Assert.assertNotNull(vector3D74);
        org.junit.Assert.assertNotNull(rotation75);
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 0.0d + "'", double76 == 0.0d);
        org.junit.Assert.assertNotNull(rotation77);
        org.junit.Assert.assertNotNull(vector3D78);
    }

    @Test
    public void test1465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1465");
        org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.geometry.euclidean.threed.Rotation rotation4 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(rotationOrder0, (-0.009949438965141721d), 14.405497554001874d, (-0.00604107602175904d));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1466");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(14.405497554001874d, 0.0d, 0.0d, 28.016837073341897d, true);
        double double6 = rotation5.getQ2();
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
    }

    @Test
    public void test1467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1467");
        org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.geometry.euclidean.threed.Rotation rotation4 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(rotationOrder0, 100.0d, 1.233771398170623d, 0.20120377604668616d);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1468");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double13 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation5, rotation12);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation19 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D20 = rotation19.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation26 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double27 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation19, rotation26);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation28 = rotation12.applyInverseTo(rotation19);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation34 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D35 = rotation34.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation41 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double42 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation34, rotation41);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation48 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D49 = rotation48.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation55 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D56 = rotation55.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation57 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D49, vector3D56);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation63 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation64 = rotation57.applyInverseTo(rotation63);
        double double65 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation41, rotation57);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D66 = rotation41.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D67 = rotation12.applyInverseTo(vector3D66);
        double[][] doubleArray68 = rotation12.getMatrix();
        double double69 = rotation12.getQ0();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertNotNull(vector3D20);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertNotNull(rotation28);
        org.junit.Assert.assertNotNull(vector3D35);
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertNotNull(vector3D49);
        org.junit.Assert.assertNotNull(vector3D56);
        org.junit.Assert.assertNotNull(rotation64);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 3.141592653589793d + "'", double65 == 3.141592653589793d);
        org.junit.Assert.assertNotNull(vector3D66);
        org.junit.Assert.assertNotNull(vector3D67);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d);
    }

    @Test
    public void test1469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1469");
        org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.geometry.euclidean.threed.Rotation rotation4 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(rotationOrder0, 0.455548342479277d, (-0.8981984963621733d), (-0.005854811095535375d));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1470");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation16 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, (double) 100L);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation22 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-1.0d), (double) (byte) 10, (double) (byte) 100, (double) 0L, true);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation28 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D29 = rotation28.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D36 = rotation35.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation37 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D29, vector3D36);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D38 = rotation22.applyTo(vector3D29);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation44 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D45 = rotation44.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation51 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D52 = rotation51.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation58 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D59 = rotation58.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation60 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D52, vector3D59);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation62 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D52, (double) 100L);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation63 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D45, vector3D52);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation69 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D70 = rotation69.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation71 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D38, vector3D52, vector3D70);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation73 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D38, (-0.0d));
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation79 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D80 = rotation79.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation86 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double87 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation79, rotation86);
        double double88 = rotation86.getQ1();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation89 = rotation73.applyTo(rotation86);
        double double90 = rotation89.getQ2();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D29);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D38);
        org.junit.Assert.assertNotNull(vector3D45);
        org.junit.Assert.assertNotNull(vector3D52);
        org.junit.Assert.assertNotNull(vector3D59);
        org.junit.Assert.assertNotNull(vector3D70);
        org.junit.Assert.assertNotNull(vector3D80);
        org.junit.Assert.assertTrue(Double.isNaN(double87));
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 10.0d + "'", double88 == 10.0d);
        org.junit.Assert.assertNotNull(rotation89);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + (-1.0d) + "'", double90 == (-1.0d));
    }

    @Test
    public void test1471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1471");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double13 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation5, rotation12);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation19 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D20 = rotation19.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation26 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D27 = rotation26.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation28 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D20, vector3D27);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation34 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = rotation28.applyInverseTo(rotation34);
        double double36 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation12, rotation28);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D37 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation43 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D44 = rotation43.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation50 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double51 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation43, rotation50);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation57 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D58 = rotation57.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation64 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double65 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation57, rotation64);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation66 = rotation50.applyInverseTo(rotation57);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation72 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D73 = rotation72.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation79 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D80 = rotation79.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation81 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D73, vector3D80);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation83 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D73, (double) 1L);
        double double84 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation57, rotation83);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation85 = rotation12.applyTo(rotation57);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation86 = rotation12.revert();
        double double87 = rotation12.getAngle();
        double double88 = rotation12.getQ1();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertNotNull(vector3D20);
        org.junit.Assert.assertNotNull(vector3D27);
        org.junit.Assert.assertNotNull(rotation35);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 3.141592653589793d + "'", double36 == 3.141592653589793d);
        org.junit.Assert.assertNotNull(vector3D37);
        org.junit.Assert.assertNotNull(vector3D44);
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertNotNull(vector3D58);
        org.junit.Assert.assertTrue(Double.isNaN(double65));
        org.junit.Assert.assertNotNull(rotation66);
        org.junit.Assert.assertNotNull(vector3D73);
        org.junit.Assert.assertNotNull(vector3D80);
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 0.9456205751905904d + "'", double84 == 0.9456205751905904d);
        org.junit.Assert.assertNotNull(rotation85);
        org.junit.Assert.assertNotNull(rotation86);
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 3.141592653589793d + "'", double87 == 3.141592653589793d);
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 10.0d + "'", double88 == 10.0d);
    }

    @Test
    public void test1472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1472");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation20.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = rotation27.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation34 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D35 = rotation34.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation36 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D28, vector3D35);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation42 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D43 = rotation42.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation49 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D50 = rotation49.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation51 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D43, vector3D50);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation52 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D13, vector3D21, vector3D35, vector3D50);
        double double53 = rotation52.getQ3();
        double double54 = rotation52.getQ0();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation55 = org.apache.commons.math.geometry.euclidean.threed.Rotation.IDENTITY;
        double double56 = rotation55.getQ3();
        double double57 = rotation55.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation58 = rotation52.applyInverseTo(rotation55);
        double double59 = rotation58.getAngle();
        double double60 = rotation58.getQ2();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D35);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(vector3D50);
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertNotNull(rotation55);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.0d + "'", double56 == 0.0d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.0d + "'", double57 == 0.0d);
        org.junit.Assert.assertNotNull(rotation58);
        org.junit.Assert.assertTrue(Double.isNaN(double59));
        org.junit.Assert.assertTrue(Double.isNaN(double60));
    }

    @Test
    public void test1473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1473");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(14.405497554001874d, (double) (-1), (-0.004923674848035068d), 0.3388903615770647d, false);
        java.lang.Class<?> wildcardClass6 = rotation5.getClass();
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test1474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1474");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation20.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = rotation27.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation29 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D21, vector3D28);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D36 = rotation35.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation42 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D43 = rotation42.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation44 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D36, vector3D43);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation45 = rotation29.applyTo(rotation44);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation46 = rotation14.applyTo(rotation45);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation52 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D53 = rotation52.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D54 = rotation46.applyTo(vector3D53);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation56 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D54, (double) 0.0f);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation58 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D54, 3.1390038567388605d);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation60 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D54, (-5.7519881927834584E-5d));
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(rotation45);
        org.junit.Assert.assertNotNull(rotation46);
        org.junit.Assert.assertNotNull(vector3D53);
        org.junit.Assert.assertNotNull(vector3D54);
    }

    @Test
    public void test1475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1475");
        org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.geometry.euclidean.threed.Rotation rotation4 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(rotationOrder0, 0.28366218546322625d, 0.30408632088084614d, 0.05506338499281072d);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1476");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation16 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, (double) 100L);
        double double17 = rotation16.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation18 = rotation16.revert();
        double double19 = rotation18.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D20 = rotation18.getAxis();
        double double21 = rotation18.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = rotation27.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation34 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D35 = rotation34.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation36 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D28, vector3D35);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation42 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D43 = rotation42.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation49 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D50 = rotation49.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation51 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D43, vector3D50);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation57 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D58 = rotation57.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation64 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D65 = rotation64.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation66 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D58, vector3D65);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation67 = rotation51.applyTo(rotation66);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation68 = rotation36.applyTo(rotation67);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation74 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D75 = rotation74.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D76 = rotation68.applyTo(vector3D75);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation78 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D76, (double) 0.0f);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D79 = rotation18.applyTo(vector3D76);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation81 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D76, (double) '4');
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-0.0d) + "'", double17 == (-0.0d));
        org.junit.Assert.assertNotNull(rotation18);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + (-0.0d) + "'", double19 == (-0.0d));
        org.junit.Assert.assertNotNull(vector3D20);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.5309649148733836d + "'", double21 == 0.5309649148733836d);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D35);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(vector3D50);
        org.junit.Assert.assertNotNull(vector3D58);
        org.junit.Assert.assertNotNull(vector3D65);
        org.junit.Assert.assertNotNull(rotation67);
        org.junit.Assert.assertNotNull(rotation68);
        org.junit.Assert.assertNotNull(vector3D75);
        org.junit.Assert.assertNotNull(vector3D76);
        org.junit.Assert.assertNotNull(vector3D79);
    }

    @Test
    public void test1477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1477");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double13 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation5, rotation12);
        double double14 = rotation12.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation20.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double28 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation20, rotation27);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation34 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D35 = rotation34.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation41 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double42 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation34, rotation41);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation43 = rotation27.applyInverseTo(rotation34);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation44 = rotation12.applyTo(rotation34);
        org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder45 = null;
        double[] doubleArray46 = rotation44.getAngles(rotationOrder45);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation52 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D53 = rotation52.getAxis();
        double double54 = rotation52.getQ0();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation55 = rotation44.applyInverseTo(rotation52);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation61 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) 100, 0.33900504942104487d, 0.09949879346007118d, true);
        double double62 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation52, rotation61);
        double[][] doubleArray63 = rotation61.getMatrix();
        double double64 = rotation61.getQ0();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 3.141592653589793d + "'", double14 == 3.141592653589793d);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertNotNull(vector3D35);
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertNotNull(rotation43);
        org.junit.Assert.assertNotNull(rotation44);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[-0.31746367442260337, 1.2637009275001716, 3.026886383418824]");
        org.junit.Assert.assertNotNull(vector3D53);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.9996303825414301d + "'", double54 == 0.9996303825414301d);
        org.junit.Assert.assertNotNull(rotation55);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 3.1030128410395363d + "'", double62 == 3.1030128410395363d);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 0.0d + "'", double64 == 0.0d);
    }

    @Test
    public void test1478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1478");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation20.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = rotation27.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation29 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D21, vector3D28);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D36 = rotation35.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation42 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D43 = rotation42.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation44 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D36, vector3D43);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation45 = rotation29.applyTo(rotation44);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation46 = rotation14.applyTo(rotation45);
        double[][] doubleArray47 = rotation46.getMatrix();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation49 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray47, (double) 10);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation51 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray47, (double) (byte) 100);
        double double52 = rotation51.getAngle();
        double double53 = rotation51.getQ3();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(rotation45);
        org.junit.Assert.assertNotNull(rotation46);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.0d + "'", double52 == 0.0d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.0d + "'", double53 == 0.0d);
    }

    @Test
    public void test1479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1479");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double13 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation5, rotation12);
        double double14 = rotation12.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation20.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = rotation27.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation29 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D21, vector3D28);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D36 = rotation35.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation42 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D43 = rotation42.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation44 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D36, vector3D43);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation45 = rotation29.applyTo(rotation44);
        double double46 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation12, rotation45);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation52 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D53 = rotation52.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation59 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double60 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation52, rotation59);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation66 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D67 = rotation66.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation73 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double74 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation66, rotation73);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation75 = rotation59.applyInverseTo(rotation66);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation76 = rotation12.applyInverseTo(rotation66);
        double[][] doubleArray77 = rotation66.getMatrix();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation79 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray77, 0.577207977069365d);
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 3.141592653589793d + "'", double14 == 3.141592653589793d);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(rotation45);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 3.141592653589793d + "'", double46 == 3.141592653589793d);
        org.junit.Assert.assertNotNull(vector3D53);
        org.junit.Assert.assertTrue(Double.isNaN(double60));
        org.junit.Assert.assertNotNull(vector3D67);
        org.junit.Assert.assertTrue(Double.isNaN(double74));
        org.junit.Assert.assertNotNull(rotation75);
        org.junit.Assert.assertNotNull(rotation76);
        org.junit.Assert.assertNotNull(doubleArray77);
    }

    @Test
    public void test1480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1480");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-1.0d), (double) (byte) 10, (double) (byte) 100, (double) 0L, true);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation11 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D12 = rotation11.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation18 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D19 = rotation18.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D12, vector3D19);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation5.applyTo(vector3D12);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) 10, 0.0d, (double) (byte) 0, 10.0d, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation33 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (byte) 100, (double) 10L, (double) (short) 100, (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation39 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D40 = rotation39.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation46 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D47 = rotation46.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation48 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D40, vector3D47);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation50 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D40, (double) 100L);
        double double51 = rotation50.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation52 = rotation33.applyInverseTo(rotation50);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation53 = rotation27.applyInverseTo(rotation50);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation54 = rotation5.applyTo(rotation27);
        double double55 = rotation5.getAngle();
        double double56 = rotation5.getQ0();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation57 = rotation5.revert();
        org.junit.Assert.assertNotNull(vector3D12);
        org.junit.Assert.assertNotNull(vector3D19);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D40);
        org.junit.Assert.assertNotNull(vector3D47);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + (-0.0d) + "'", double51 == (-0.0d));
        org.junit.Assert.assertNotNull(rotation52);
        org.junit.Assert.assertNotNull(rotation53);
        org.junit.Assert.assertNotNull(rotation54);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 3.1216925665368036d + "'", double55 == 3.1216925665368036d);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + (-0.009949879346007117d) + "'", double56 == (-0.009949879346007117d));
        org.junit.Assert.assertNotNull(rotation57);
    }

    @Test
    public void test1481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1481");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double13 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation5, rotation12);
        double double14 = rotation12.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation20.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double28 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation20, rotation27);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation34 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D35 = rotation34.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation41 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double42 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation34, rotation41);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation43 = rotation27.applyInverseTo(rotation34);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation44 = rotation12.applyTo(rotation34);
        org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder45 = null;
        double[] doubleArray46 = rotation44.getAngles(rotationOrder45);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation52 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D53 = rotation52.getAxis();
        double double54 = rotation52.getQ0();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation55 = rotation44.applyInverseTo(rotation52);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation61 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) 100, 0.33900504942104487d, 0.09949879346007118d, true);
        double double62 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation52, rotation61);
        double[][] doubleArray63 = rotation61.getMatrix();
        org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder64 = null;
        double[] doubleArray65 = rotation61.getAngles(rotationOrder64);
        double double66 = rotation61.getQ0();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation72 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-0.06415703545444096d), (-108.9963038254143d), (double) 0L, (double) ' ', false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation73 = rotation72.revert();
        double double74 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation61, rotation72);
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 3.141592653589793d + "'", double14 == 3.141592653589793d);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertNotNull(vector3D35);
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertNotNull(rotation43);
        org.junit.Assert.assertNotNull(rotation44);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[-0.31746367442260337, 1.2637009275001716, 3.026886383418824]");
        org.junit.Assert.assertNotNull(vector3D53);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.9996303825414301d + "'", double54 == 0.9996303825414301d);
        org.junit.Assert.assertNotNull(rotation55);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 3.1030128410395363d + "'", double62 == 3.1030128410395363d);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[0.0033900375076467044, 3.139602689812024, 3.1382026160821463]");
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 0.0d + "'", double66 == 0.0d);
        org.junit.Assert.assertNotNull(rotation73);
        org.junit.Assert.assertTrue(Double.isNaN(double74));
    }

    @Test
    public void test1482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1482");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation21 = rotation14.applyInverseTo(rotation20);
        double double22 = rotation20.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation28 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D29 = rotation28.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double36 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation28, rotation35);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation42 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D43 = rotation42.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation49 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D50 = rotation49.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation51 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D43, vector3D50);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation57 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation58 = rotation51.applyInverseTo(rotation57);
        double double59 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation35, rotation51);
        double double60 = rotation51.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation61 = rotation20.applyInverseTo(rotation51);
        double double62 = rotation20.getQ1();
        double[][] doubleArray63 = rotation20.getMatrix();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(rotation21);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 3.141592653589793d + "'", double22 == 3.141592653589793d);
        org.junit.Assert.assertNotNull(vector3D29);
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(vector3D50);
        org.junit.Assert.assertNotNull(rotation58);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 3.141592653589793d + "'", double59 == 3.141592653589793d);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.0d + "'", double60 == 0.0d);
        org.junit.Assert.assertNotNull(rotation61);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 10.0d + "'", double62 == 10.0d);
        org.junit.Assert.assertNotNull(doubleArray63);
    }

    @Test
    public void test1483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1483");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation20.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = rotation27.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation29 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D21, vector3D28);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D36 = rotation35.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation42 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D43 = rotation42.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation44 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D36, vector3D43);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation45 = rotation29.applyTo(rotation44);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation46 = rotation14.applyTo(rotation45);
        double[][] doubleArray47 = rotation46.getMatrix();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation49 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray47, (double) 10);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation51 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray47, (double) (byte) 100);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation57 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) 10, 0.0d, (double) (byte) 0, 10.0d, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation63 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (byte) 100, (double) 10L, (double) (short) 100, (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation69 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D70 = rotation69.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation76 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D77 = rotation76.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation78 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D70, vector3D77);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation80 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D70, (double) 100L);
        double double81 = rotation80.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation82 = rotation63.applyInverseTo(rotation80);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation83 = rotation57.applyInverseTo(rotation80);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation84 = rotation51.applyInverseTo(rotation57);
        double double85 = rotation84.getQ2();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(rotation45);
        org.junit.Assert.assertNotNull(rotation46);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(vector3D70);
        org.junit.Assert.assertNotNull(vector3D77);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + (-0.0d) + "'", double81 == (-0.0d));
        org.junit.Assert.assertNotNull(rotation82);
        org.junit.Assert.assertNotNull(rotation83);
        org.junit.Assert.assertNotNull(rotation84);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 0.0d + "'", double85 == 0.0d);
    }

    @Test
    public void test1484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1484");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double13 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation5, rotation12);
        double double14 = rotation12.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation20.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double28 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation20, rotation27);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation34 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D35 = rotation34.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation41 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double42 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation34, rotation41);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation43 = rotation27.applyInverseTo(rotation34);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation44 = rotation12.applyTo(rotation34);
        org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder45 = null;
        double[] doubleArray46 = rotation44.getAngles(rotationOrder45);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation52 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D53 = rotation52.getAxis();
        double double54 = rotation52.getQ0();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation55 = rotation44.applyInverseTo(rotation52);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation61 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D62 = rotation61.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation68 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D69 = rotation68.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation75 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D76 = rotation75.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation77 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D69, vector3D76);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation79 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D69, (double) 100L);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation80 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D62, vector3D69);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D81 = rotation55.applyTo(vector3D69);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation82 = org.apache.commons.math.geometry.euclidean.threed.Rotation.IDENTITY;
        double double83 = rotation82.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation84 = rotation82.revert();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D85 = rotation84.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation86 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D69, vector3D85);
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 3.141592653589793d + "'", double14 == 3.141592653589793d);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertNotNull(vector3D35);
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertNotNull(rotation43);
        org.junit.Assert.assertNotNull(rotation44);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[-0.31746367442260337, 1.2637009275001716, 3.026886383418824]");
        org.junit.Assert.assertNotNull(vector3D53);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.9996303825414301d + "'", double54 == 0.9996303825414301d);
        org.junit.Assert.assertNotNull(rotation55);
        org.junit.Assert.assertNotNull(vector3D62);
        org.junit.Assert.assertNotNull(vector3D69);
        org.junit.Assert.assertNotNull(vector3D76);
        org.junit.Assert.assertNotNull(vector3D81);
        org.junit.Assert.assertNotNull(rotation82);
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 0.0d + "'", double83 == 0.0d);
        org.junit.Assert.assertNotNull(rotation84);
        org.junit.Assert.assertNotNull(vector3D85);
    }

    @Test
    public void test1485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1485");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) 100L, 1.0d, (double) (byte) -1, 0.9996303825414301d, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation11 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D12 = rotation11.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation18 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double19 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation11, rotation18);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation25 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D26 = rotation25.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation32 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double33 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation25, rotation32);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation34 = rotation18.applyInverseTo(rotation25);
        double double35 = rotation18.getQ3();
        double double36 = rotation18.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation42 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-1.0d), (double) (byte) 10, (double) (byte) 100, (double) 0L, true);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation48 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D49 = rotation48.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation55 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D56 = rotation55.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation57 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D49, vector3D56);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D58 = rotation42.applyTo(vector3D49);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation60 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D49, (double) (byte) 0);
        double double61 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation18, rotation60);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D62 = rotation60.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation64 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D62, (-0.1855270382668764d));
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D65 = rotation5.applyInverseTo(vector3D62);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation67 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D65, (-0.06415703545444096d));
        double double68 = rotation67.getQ0();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation74 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (byte) 100, (double) 10L, (double) (short) 100, (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation80 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D81 = rotation80.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation87 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D88 = rotation87.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation89 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D81, vector3D88);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation91 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D81, (double) 100L);
        double double92 = rotation91.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation93 = rotation74.applyInverseTo(rotation91);
        double double94 = rotation74.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D95 = rotation74.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation97 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D95, (double) 10.0f);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D98 = rotation97.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D99 = rotation67.applyInverseTo(vector3D98);
        org.junit.Assert.assertNotNull(vector3D12);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertNotNull(vector3D26);
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertNotNull(rotation34);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 1.0d + "'", double35 == 1.0d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 1.0d + "'", double36 == 1.0d);
        org.junit.Assert.assertNotNull(vector3D49);
        org.junit.Assert.assertNotNull(vector3D56);
        org.junit.Assert.assertNotNull(vector3D58);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 3.141592653589793d + "'", double61 == 3.141592653589793d);
        org.junit.Assert.assertNotNull(vector3D62);
        org.junit.Assert.assertNotNull(vector3D65);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 0.9994855284697578d + "'", double68 == 0.9994855284697578d);
        org.junit.Assert.assertNotNull(vector3D81);
        org.junit.Assert.assertNotNull(vector3D88);
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + (-0.0d) + "'", double92 == (-0.0d));
        org.junit.Assert.assertNotNull(rotation93);
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + 1.0d + "'", double94 == 1.0d);
        org.junit.Assert.assertNotNull(vector3D95);
        org.junit.Assert.assertNotNull(vector3D98);
        org.junit.Assert.assertNotNull(vector3D99);
    }

    @Test
    public void test1486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1486");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation0 = org.apache.commons.math.geometry.euclidean.threed.Rotation.IDENTITY;
        double double1 = rotation0.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation2 = rotation0.revert();
        double double3 = rotation2.getQ1();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation9 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D10 = rotation9.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation16 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double17 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation9, rotation16);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation23 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D24 = rotation23.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation30 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D31 = rotation30.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation32 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D24, vector3D31);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation38 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation39 = rotation32.applyInverseTo(rotation38);
        double double40 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation16, rotation32);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D41 = rotation16.getAxis();
        double[][] doubleArray42 = rotation16.getMatrix();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation48 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-0.0d), (double) (short) 1, 0.0d, 0.9996303825414301d, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation49 = rotation16.applyTo(rotation48);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation50 = rotation2.applyTo(rotation48);
        double double51 = rotation48.getQ0();
        org.junit.Assert.assertNotNull(rotation0);
        org.junit.Assert.assertTrue("'" + double1 + "' != '" + 0.0d + "'", double1 == 0.0d);
        org.junit.Assert.assertNotNull(rotation2);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertNotNull(vector3D10);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertNotNull(vector3D24);
        org.junit.Assert.assertNotNull(vector3D31);
        org.junit.Assert.assertNotNull(rotation39);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 3.141592653589793d + "'", double40 == 3.141592653589793d);
        org.junit.Assert.assertNotNull(vector3D41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(rotation49);
        org.junit.Assert.assertNotNull(rotation50);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + (-0.0d) + "'", double51 == (-0.0d));
    }

    @Test
    public void test1487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1487");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation16 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, (double) 100L);
        double double17 = rotation16.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation18 = rotation16.revert();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation24 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (byte) 100, (double) 10L, (double) (short) 100, (double) 1L, false);
        double double25 = rotation24.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation26 = rotation18.applyInverseTo(rotation24);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = rotation24.revert();
        double double28 = rotation24.getQ0();
        java.lang.Class<?> wildcardClass29 = rotation24.getClass();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-0.0d) + "'", double17 == (-0.0d));
        org.junit.Assert.assertNotNull(rotation18);
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertNotNull(rotation26);
        org.junit.Assert.assertNotNull(rotation27);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 100.0d + "'", double28 == 100.0d);
        org.junit.Assert.assertNotNull(wildcardClass29);
    }

    @Test
    public void test1488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1488");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) 1L, 0.7368621407866713d, (-0.8981984963621733d), 0.1610382605737718d, false);
        org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder6 = null;
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray7 = rotation5.getAngles(rotationOrder6);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.geometry.euclidean.threed.CardanEulerSingularityException; message: Euler angles singularity");
        } catch (org.apache.commons.math.geometry.euclidean.threed.CardanEulerSingularityException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1489");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation11 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-1.0d), (double) (byte) 10, (double) (byte) 100, (double) 0L, true);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation17 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D18 = rotation17.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation24 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D25 = rotation24.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation26 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D18, vector3D25);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D27 = rotation11.applyTo(vector3D18);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = rotation5.applyTo(vector3D27);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation34 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-0.1855270382668764d), (double) 10, (double) (short) -1, (double) 100.0f, false);
        double[][] doubleArray35 = rotation34.getMatrix();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation41 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D42 = rotation41.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation48 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D49 = rotation48.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation50 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D42, vector3D49);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation52 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D42, (double) 100L);
        double double53 = rotation52.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation54 = rotation52.revert();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation60 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (byte) 100, (double) 10L, (double) (short) 100, (double) 1L, false);
        double double61 = rotation60.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation62 = rotation54.applyInverseTo(rotation60);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation63 = rotation34.applyInverseTo(rotation62);
        double double64 = rotation63.getQ1();
        double double65 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation5, rotation63);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D66 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D67 = rotation5.applyInverseTo(vector3D66);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(vector3D18);
        org.junit.Assert.assertNotNull(vector3D25);
        org.junit.Assert.assertNotNull(vector3D27);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(vector3D42);
        org.junit.Assert.assertNotNull(vector3D49);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + (-0.0d) + "'", double53 == (-0.0d));
        org.junit.Assert.assertNotNull(rotation54);
        org.junit.Assert.assertTrue(Double.isNaN(double61));
        org.junit.Assert.assertNotNull(rotation62);
        org.junit.Assert.assertNotNull(rotation63);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 8960.928033465932d + "'", double64 == 8960.928033465932d);
        org.junit.Assert.assertTrue(Double.isNaN(double65));
    }

    @Test
    public void test1490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1490");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double13 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation5, rotation12);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation19 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D20 = rotation19.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation26 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double27 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation19, rotation26);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation28 = rotation12.applyInverseTo(rotation19);
        double double29 = rotation19.getQ0();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D30 = rotation19.getAxis();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertNotNull(vector3D20);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertNotNull(rotation28);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.9996303825414301d + "'", double29 == 0.9996303825414301d);
        org.junit.Assert.assertNotNull(vector3D30);
    }

    @Test
    public void test1491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1491");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation20.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = rotation27.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation29 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D21, vector3D28);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D36 = rotation35.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation42 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D43 = rotation42.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation44 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D36, vector3D43);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation45 = rotation29.applyTo(rotation44);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation46 = rotation14.applyTo(rotation45);
        double[][] doubleArray47 = rotation46.getMatrix();
        double double48 = rotation46.getQ1();
        double[][] doubleArray49 = rotation46.getMatrix();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation51 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray49, (double) 100L);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation53 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray49, (double) 0);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation59 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation60 = rotation53.applyTo(rotation59);
        double double61 = rotation59.getQ3();
        double double62 = rotation59.getQ2();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(rotation45);
        org.junit.Assert.assertNotNull(rotation46);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(rotation60);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 1.0d + "'", double61 == 1.0d);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + (-1.0d) + "'", double62 == (-1.0d));
    }

    @Test
    public void test1492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1492");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (byte) 100, (double) 10L, (double) (short) 100, (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation11 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D12 = rotation11.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation18 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D19 = rotation18.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D12, vector3D19);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation22 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D12, (double) 100L);
        double double23 = rotation22.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation24 = rotation5.applyInverseTo(rotation22);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation30 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D31 = rotation30.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation37 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D38 = rotation37.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation39 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D31, vector3D38);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation45 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D46 = rotation45.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation52 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D53 = rotation52.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation54 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D46, vector3D53);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation60 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D61 = rotation60.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation67 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D68 = rotation67.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation69 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D61, vector3D68);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation70 = rotation54.applyTo(rotation69);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation71 = rotation39.applyTo(rotation70);
        double[][] doubleArray72 = rotation71.getMatrix();
        double double73 = rotation71.getQ1();
        double[][] doubleArray74 = rotation71.getMatrix();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation76 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray74, (double) 100L);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation78 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray74, 0.7881701093115122d);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation80 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray74, 0.9456205751905904d);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation81 = rotation24.applyInverseTo(rotation80);
        org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder82 = null;
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray83 = rotation80.getAngles(rotationOrder82);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.geometry.euclidean.threed.CardanEulerSingularityException; message: Euler angles singularity");
        } catch (org.apache.commons.math.geometry.euclidean.threed.CardanEulerSingularityException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(vector3D12);
        org.junit.Assert.assertNotNull(vector3D19);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + (-0.0d) + "'", double23 == (-0.0d));
        org.junit.Assert.assertNotNull(rotation24);
        org.junit.Assert.assertNotNull(vector3D31);
        org.junit.Assert.assertNotNull(vector3D38);
        org.junit.Assert.assertNotNull(vector3D46);
        org.junit.Assert.assertNotNull(vector3D53);
        org.junit.Assert.assertNotNull(vector3D61);
        org.junit.Assert.assertNotNull(vector3D68);
        org.junit.Assert.assertNotNull(rotation70);
        org.junit.Assert.assertNotNull(rotation71);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 0.0d + "'", double73 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertNotNull(rotation81);
    }

    @Test
    public void test1493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1493");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation20.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = rotation27.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation29 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D21, vector3D28);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation30 = rotation14.applyTo(rotation29);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation36 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) 10, 0.0d, (double) (byte) 0, 10.0d, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation37 = rotation14.applyTo(rotation36);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation38 = rotation37.revert();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation44 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D45 = rotation44.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D46 = rotation38.applyTo(vector3D45);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation48 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D46, 0.47438148773598054d);
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(rotation30);
        org.junit.Assert.assertNotNull(rotation37);
        org.junit.Assert.assertNotNull(rotation38);
        org.junit.Assert.assertNotNull(vector3D45);
        org.junit.Assert.assertNotNull(vector3D46);
    }

    @Test
    public void test1494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1494");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation20.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = rotation27.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation34 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D35 = rotation34.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation36 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D28, vector3D35);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation42 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D43 = rotation42.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation49 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D50 = rotation49.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation51 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D43, vector3D50);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation52 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D13, vector3D21, vector3D35, vector3D50);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation54 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D13, (-0.0d));
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation56 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D13, (double) 1L);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D57 = rotation56.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation58 = rotation56.revert();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation59 = rotation58.revert();
        double double60 = rotation58.getQ0();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D35);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(vector3D50);
        org.junit.Assert.assertNotNull(vector3D57);
        org.junit.Assert.assertNotNull(rotation58);
        org.junit.Assert.assertNotNull(rotation59);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + (-0.8775825618903728d) + "'", double60 == (-0.8775825618903728d));
    }

    @Test
    public void test1495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1495");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation11 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D12 = rotation11.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation18 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D19 = rotation18.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D12, vector3D19);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation26 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D27 = rotation26.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation33 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D34 = rotation33.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation40 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D41 = rotation40.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation42 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D34, vector3D41);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation48 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D49 = rotation48.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation55 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D56 = rotation55.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation57 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D49, vector3D56);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation58 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D19, vector3D27, vector3D41, vector3D56);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation60 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D27, (double) 1);
        double double61 = rotation60.getQ1();
        org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder62 = null;
        double[] doubleArray63 = rotation60.getAngles(rotationOrder62);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D64 = rotation60.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D65 = rotation5.applyInverseTo(vector3D64);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation67 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D65, 0.0d);
        java.lang.Class<?> wildcardClass68 = rotation67.getClass();
        org.junit.Assert.assertNotNull(vector3D12);
        org.junit.Assert.assertNotNull(vector3D19);
        org.junit.Assert.assertNotNull(vector3D27);
        org.junit.Assert.assertNotNull(vector3D34);
        org.junit.Assert.assertNotNull(vector3D41);
        org.junit.Assert.assertNotNull(vector3D49);
        org.junit.Assert.assertNotNull(vector3D56);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 0.33900504942104487d + "'", double61 == 0.33900504942104487d);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[2.356194490192345, 0.9999999999999999, -2.356194490192345]");
        org.junit.Assert.assertNotNull(vector3D64);
        org.junit.Assert.assertNotNull(vector3D65);
        org.junit.Assert.assertNotNull(wildcardClass68);
    }

    @Test
    public void test1496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1496");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation20.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = rotation27.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation29 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D21, vector3D28);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation30 = rotation14.applyTo(rotation29);
        double double31 = rotation30.getQ0();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation37 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D38 = rotation37.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation44 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D45 = rotation44.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation46 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D38, vector3D45);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation52 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation53 = rotation46.applyInverseTo(rotation52);
        double double54 = rotation52.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation60 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D61 = rotation60.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation67 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double68 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation60, rotation67);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation74 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D75 = rotation74.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation81 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D82 = rotation81.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation83 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D75, vector3D82);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation89 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation90 = rotation83.applyInverseTo(rotation89);
        double double91 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation67, rotation83);
        double double92 = rotation83.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation93 = rotation52.applyInverseTo(rotation83);
        double double94 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation30, rotation83);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation95 = rotation83.revert();
        double[][] doubleArray96 = rotation83.getMatrix();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D97 = rotation83.getAxis();
        double double98 = rotation83.getQ0();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(rotation30);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 1.0d + "'", double31 == 1.0d);
        org.junit.Assert.assertNotNull(vector3D38);
        org.junit.Assert.assertNotNull(vector3D45);
        org.junit.Assert.assertNotNull(rotation53);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 3.141592653589793d + "'", double54 == 3.141592653589793d);
        org.junit.Assert.assertNotNull(vector3D61);
        org.junit.Assert.assertTrue(Double.isNaN(double68));
        org.junit.Assert.assertNotNull(vector3D75);
        org.junit.Assert.assertNotNull(vector3D82);
        org.junit.Assert.assertNotNull(rotation90);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 3.141592653589793d + "'", double91 == 3.141592653589793d);
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 0.0d + "'", double92 == 0.0d);
        org.junit.Assert.assertNotNull(rotation93);
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + 0.0d + "'", double94 == 0.0d);
        org.junit.Assert.assertNotNull(rotation95);
        org.junit.Assert.assertNotNull(doubleArray96);
        org.junit.Assert.assertNotNull(vector3D97);
        org.junit.Assert.assertTrue("'" + double98 + "' != '" + 1.0d + "'", double98 == 1.0d);
    }

    @Test
    public void test1497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1497");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.003388584257121107d, 0.06415703545444096d, (-0.8156840252218559d), 0.6331541195548093d, false);
    }

    @Test
    public void test1498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1498");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-1.0d), (double) (byte) 10, (double) (byte) 100, (double) 0L, true);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation11 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D12 = rotation11.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation18 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D19 = rotation18.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D12, vector3D19);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation5.applyTo(vector3D12);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D22 = rotation5.getAxis();
        double double23 = rotation5.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation24 = rotation5.revert();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D25 = rotation5.getAxis();
        org.junit.Assert.assertNotNull(vector3D12);
        org.junit.Assert.assertNotNull(vector3D19);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D22);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 3.1216925665368036d + "'", double23 == 3.1216925665368036d);
        org.junit.Assert.assertNotNull(rotation24);
        org.junit.Assert.assertNotNull(vector3D25);
    }

    @Test
    public void test1499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1499");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation11 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-1.0d), (double) (byte) 10, (double) (byte) 100, (double) 0L, true);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation17 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D18 = rotation17.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation24 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D25 = rotation24.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation26 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D18, vector3D25);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D27 = rotation11.applyTo(vector3D18);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = rotation5.applyTo(vector3D27);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation34 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) 10, 0.0d, (double) (byte) 0, 10.0d, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation40 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (byte) 100, (double) 10L, (double) (short) 100, (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation46 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D47 = rotation46.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation53 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D54 = rotation53.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation55 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D47, vector3D54);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation57 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D47, (double) 100L);
        double double58 = rotation57.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation59 = rotation40.applyInverseTo(rotation57);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation60 = rotation34.applyInverseTo(rotation57);
        double double61 = rotation34.getQ3();
        double double62 = rotation34.getQ0();
        double double63 = rotation34.getQ2();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation64 = rotation5.applyInverseTo(rotation34);
        double double65 = rotation5.getAngle();
        org.junit.Assert.assertNotNull(vector3D18);
        org.junit.Assert.assertNotNull(vector3D25);
        org.junit.Assert.assertNotNull(vector3D27);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D47);
        org.junit.Assert.assertNotNull(vector3D54);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + (-0.0d) + "'", double58 == (-0.0d));
        org.junit.Assert.assertNotNull(rotation59);
        org.junit.Assert.assertNotNull(rotation60);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 10.0d + "'", double61 == 10.0d);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 10.0d + "'", double62 == 10.0d);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 0.0d + "'", double63 == 0.0d);
        org.junit.Assert.assertNotNull(rotation64);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 3.141592653589793d + "'", double65 == 3.141592653589793d);
    }

    @Test
    public void test1500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1500");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (short) -1, (-0.1730129508244783d), (-0.1730129508244783d), (double) 10.0f, false);
        double double6 = rotation5.getQ2();
        double double7 = rotation5.getQ0();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation13 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D14 = rotation13.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation20.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation22 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D14, vector3D21);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation28 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation29 = rotation22.applyInverseTo(rotation28);
        double double30 = rotation28.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation36 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D37 = rotation36.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation43 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double44 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation36, rotation43);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation50 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D51 = rotation50.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation57 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D58 = rotation57.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation59 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D51, vector3D58);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation65 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation66 = rotation59.applyInverseTo(rotation65);
        double double67 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation43, rotation59);
        double double68 = rotation59.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation69 = rotation28.applyInverseTo(rotation59);
        double double70 = rotation28.getQ1();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation71 = rotation28.revert();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation72 = rotation5.applyTo(rotation28);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation78 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D79 = rotation78.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation85 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double86 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation78, rotation85);
        double double87 = rotation85.getQ3();
        double double88 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation28, rotation85);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation94 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.3388903615770647d, (double) 0L, 9.649660284921133d, (double) (byte) 100, true);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation95 = rotation85.applyTo(rotation94);
        double double96 = rotation85.getQ2();
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + (-0.1730129508244783d) + "'", double6 == (-0.1730129508244783d));
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1.0d) + "'", double7 == (-1.0d));
        org.junit.Assert.assertNotNull(vector3D14);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(rotation29);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 3.141592653589793d + "'", double30 == 3.141592653589793d);
        org.junit.Assert.assertNotNull(vector3D37);
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertNotNull(vector3D51);
        org.junit.Assert.assertNotNull(vector3D58);
        org.junit.Assert.assertNotNull(rotation66);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 3.141592653589793d + "'", double67 == 3.141592653589793d);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 0.0d + "'", double68 == 0.0d);
        org.junit.Assert.assertNotNull(rotation69);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 10.0d + "'", double70 == 10.0d);
        org.junit.Assert.assertNotNull(rotation71);
        org.junit.Assert.assertNotNull(rotation72);
        org.junit.Assert.assertNotNull(vector3D79);
        org.junit.Assert.assertTrue(Double.isNaN(double86));
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 1.0d + "'", double87 == 1.0d);
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 0.0d + "'", double88 == 0.0d);
        org.junit.Assert.assertNotNull(rotation95);
        org.junit.Assert.assertTrue("'" + double96 + "' != '" + (-1.0d) + "'", double96 == (-1.0d));
    }
}


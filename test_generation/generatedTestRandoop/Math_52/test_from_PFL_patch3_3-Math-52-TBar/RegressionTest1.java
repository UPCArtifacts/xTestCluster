import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest1 {

    public static boolean debug = false;

    @Test
    public void test0501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0501");
        double[][] doubleArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.geometry.euclidean.threed.Rotation rotation2 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray0, 3.1216032962775833d);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0502");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation21 = rotation14.applyInverseTo(rotation20);
        double double22 = rotation20.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation28 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D29 = rotation28.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double36 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation28, rotation35);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation42 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D43 = rotation42.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation49 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D50 = rotation49.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation51 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D43, vector3D50);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation57 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation58 = rotation51.applyInverseTo(rotation57);
        double double59 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation35, rotation51);
        double double60 = rotation51.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation61 = rotation20.applyInverseTo(rotation51);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D62 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D63 = rotation51.applyInverseTo(vector3D62);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(rotation21);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 3.141592653589793d + "'", double22 == 3.141592653589793d);
        org.junit.Assert.assertNotNull(vector3D29);
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(vector3D50);
        org.junit.Assert.assertNotNull(rotation58);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 3.141592653589793d + "'", double59 == 3.141592653589793d);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.0d + "'", double60 == 0.0d);
        org.junit.Assert.assertNotNull(rotation61);
    }

    @Test
    public void test0503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0503");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (short) 10, (double) (byte) 0, 0.01922366120271981d, 0.9949879346007117d, true);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation11 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation17 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-1.0d), (double) (byte) 10, (double) (byte) 100, (double) 0L, true);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation23 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D24 = rotation23.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation30 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D31 = rotation30.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation32 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D24, vector3D31);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D33 = rotation17.applyTo(vector3D24);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D34 = rotation11.applyTo(vector3D33);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation36 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D33, (double) 1.0f);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation42 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D43 = rotation42.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation49 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D50 = rotation49.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation51 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D43, vector3D50);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation57 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D58 = rotation57.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation64 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double65 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation57, rotation64);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation71 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D72 = rotation71.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation78 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double79 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation71, rotation78);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation80 = rotation64.applyInverseTo(rotation71);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D81 = rotation80.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation82 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D43, vector3D81);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D83 = rotation36.applyTo(vector3D43);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D84 = rotation5.applyInverseTo(vector3D43);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation86 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D43, (-1.01885404374415d));
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D87 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.geometry.euclidean.threed.Rotation rotation88 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D43, vector3D87);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(vector3D24);
        org.junit.Assert.assertNotNull(vector3D31);
        org.junit.Assert.assertNotNull(vector3D33);
        org.junit.Assert.assertNotNull(vector3D34);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(vector3D50);
        org.junit.Assert.assertNotNull(vector3D58);
        org.junit.Assert.assertTrue(Double.isNaN(double65));
        org.junit.Assert.assertNotNull(vector3D72);
        org.junit.Assert.assertTrue(Double.isNaN(double79));
        org.junit.Assert.assertNotNull(rotation80);
        org.junit.Assert.assertNotNull(vector3D81);
        org.junit.Assert.assertNotNull(vector3D83);
        org.junit.Assert.assertNotNull(vector3D84);
    }

    @Test
    public void test0504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0504");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double13 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation5, rotation12);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation19 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D20 = rotation19.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation26 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double27 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation19, rotation26);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation28 = rotation12.applyInverseTo(rotation19);
        double double29 = rotation19.getQ0();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation30 = rotation19.revert();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation36 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D37 = rotation36.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation43 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D44 = rotation43.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation45 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D37, vector3D44);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation51 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D52 = rotation51.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation58 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double59 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation51, rotation58);
        double double60 = rotation58.getAngle();
        double double61 = rotation58.getAngle();
        double double62 = rotation58.getQ0();
        double double63 = rotation58.getQ0();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation69 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D70 = rotation69.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation76 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D77 = rotation76.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation78 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D70, vector3D77);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation80 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D70, (double) 100L);
        double double81 = rotation80.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation82 = rotation80.revert();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation88 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (byte) 100, (double) 10L, (double) (short) 100, (double) 1L, false);
        double double89 = rotation88.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation90 = rotation82.applyInverseTo(rotation88);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D91 = rotation88.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D92 = rotation58.applyInverseTo(vector3D91);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation94 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D92, 3.1216925665368036d);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D95 = rotation45.applyInverseTo(vector3D92);
        double double96 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation19, rotation45);
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertNotNull(vector3D20);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertNotNull(rotation28);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.9996303825414301d + "'", double29 == 0.9996303825414301d);
        org.junit.Assert.assertNotNull(rotation30);
        org.junit.Assert.assertNotNull(vector3D37);
        org.junit.Assert.assertNotNull(vector3D44);
        org.junit.Assert.assertNotNull(vector3D52);
        org.junit.Assert.assertTrue(Double.isNaN(double59));
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 3.141592653589793d + "'", double60 == 3.141592653589793d);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 3.141592653589793d + "'", double61 == 3.141592653589793d);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 0.0d + "'", double62 == 0.0d);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 0.0d + "'", double63 == 0.0d);
        org.junit.Assert.assertNotNull(vector3D70);
        org.junit.Assert.assertNotNull(vector3D77);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + (-0.0d) + "'", double81 == (-0.0d));
        org.junit.Assert.assertNotNull(rotation82);
        org.junit.Assert.assertTrue(Double.isNaN(double89));
        org.junit.Assert.assertNotNull(rotation90);
        org.junit.Assert.assertNotNull(vector3D91);
        org.junit.Assert.assertNotNull(vector3D92);
        org.junit.Assert.assertNotNull(vector3D95);
        org.junit.Assert.assertTrue("'" + double96 + "' != '" + 0.054379424809409445d + "'", double96 == 0.054379424809409445d);
    }

    @Test
    public void test0505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0505");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (short) 1, (double) 1, (double) 0.0f, 0.9996303825414301d, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation11 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D12 = rotation11.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation18 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D19 = rotation18.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D12, vector3D19);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation26 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D27 = rotation26.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation33 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D34 = rotation33.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation40 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D41 = rotation40.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation42 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D34, vector3D41);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation48 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D49 = rotation48.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation55 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D56 = rotation55.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation57 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D49, vector3D56);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation58 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D19, vector3D27, vector3D41, vector3D56);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation60 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D27, (double) 1);
        double double61 = rotation60.getQ1();
        double double62 = rotation60.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation63 = rotation5.applyTo(rotation60);
        double double64 = rotation5.getQ1();
        java.lang.Class<?> wildcardClass65 = rotation5.getClass();
        org.junit.Assert.assertNotNull(vector3D12);
        org.junit.Assert.assertNotNull(vector3D19);
        org.junit.Assert.assertNotNull(vector3D27);
        org.junit.Assert.assertNotNull(vector3D34);
        org.junit.Assert.assertNotNull(vector3D41);
        org.junit.Assert.assertNotNull(vector3D49);
        org.junit.Assert.assertNotNull(vector3D56);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 0.33900504942104487d + "'", double61 == 0.33900504942104487d);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 0.0d + "'", double62 == 0.0d);
        org.junit.Assert.assertNotNull(rotation63);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 1.0d + "'", double64 == 1.0d);
        org.junit.Assert.assertNotNull(wildcardClass65);
    }

    @Test
    public void test0506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0506");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation20.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = rotation27.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation29 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D21, vector3D28);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D36 = rotation35.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation42 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D43 = rotation42.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation44 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D36, vector3D43);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation45 = rotation29.applyTo(rotation44);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation46 = rotation14.applyTo(rotation45);
        double[][] doubleArray47 = rotation46.getMatrix();
        double double48 = rotation46.getQ1();
        double[][] doubleArray49 = rotation46.getMatrix();
        double[][] doubleArray50 = rotation46.getMatrix();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation52 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray50, 10924.868355180524d);
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(rotation45);
        org.junit.Assert.assertNotNull(rotation46);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
    }

    @Test
    public void test0507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0507");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.31538323081891095d, 0.054379424809409445d, 0.7881701093115124d, (double) 0, false);
    }

    @Test
    public void test0508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0508");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation20.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = rotation27.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation29 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D21, vector3D28);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D36 = rotation35.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation42 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D43 = rotation42.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation44 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D36, vector3D43);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation45 = rotation29.applyTo(rotation44);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation46 = rotation14.applyTo(rotation45);
        double[][] doubleArray47 = rotation46.getMatrix();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation49 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray47, (double) '4');
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation51 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray47, (double) '4');
        double double52 = rotation51.getQ3();
        double double53 = rotation51.getAngle();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(rotation45);
        org.junit.Assert.assertNotNull(rotation46);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.0d + "'", double52 == 0.0d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.0d + "'", double53 == 0.0d);
    }

    @Test
    public void test0509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0509");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-0.1855270382668764d), (double) 1, Double.NaN, (double) (short) 100, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation11 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D12 = rotation11.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation18 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D19 = rotation18.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D12, vector3D19);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation26 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D27 = rotation26.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation33 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D34 = rotation33.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D27, vector3D34);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation36 = rotation20.applyTo(rotation35);
        double double37 = rotation35.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation38 = rotation35.revert();
        double double39 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation5, rotation35);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation45 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D46 = rotation45.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation52 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D53 = rotation52.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation54 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D46, vector3D53);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation60 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D61 = rotation60.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation67 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D68 = rotation67.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation69 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D61, vector3D68);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation70 = rotation54.applyTo(rotation69);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation76 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) 10, 0.0d, (double) (byte) 0, 10.0d, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation77 = rotation54.applyTo(rotation76);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation78 = rotation77.revert();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation84 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D85 = rotation84.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D86 = rotation78.applyTo(vector3D85);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D87 = rotation35.applyInverseTo(vector3D85);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation89 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D87, (-8.717516503499631d));
        org.junit.Assert.assertNotNull(vector3D12);
        org.junit.Assert.assertNotNull(vector3D19);
        org.junit.Assert.assertNotNull(vector3D27);
        org.junit.Assert.assertNotNull(vector3D34);
        org.junit.Assert.assertNotNull(rotation36);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d);
        org.junit.Assert.assertNotNull(rotation38);
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertNotNull(vector3D46);
        org.junit.Assert.assertNotNull(vector3D53);
        org.junit.Assert.assertNotNull(vector3D61);
        org.junit.Assert.assertNotNull(vector3D68);
        org.junit.Assert.assertNotNull(rotation70);
        org.junit.Assert.assertNotNull(rotation77);
        org.junit.Assert.assertNotNull(rotation78);
        org.junit.Assert.assertNotNull(vector3D85);
        org.junit.Assert.assertNotNull(vector3D86);
        org.junit.Assert.assertNotNull(vector3D87);
    }

    @Test
    public void test0510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0510");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) 1.0f, 3.141592653589793d, 0.33900504942104487d, 100.0d, true);
        double[][] doubleArray6 = rotation5.getMatrix();
        org.junit.Assert.assertNotNull(doubleArray6);
    }

    @Test
    public void test0511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0511");
        org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.geometry.euclidean.threed.Rotation rotation4 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(rotationOrder0, 3.1216032962775833d, 3.141592653589793d, 0.7881701093115122d);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0512");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation16 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, (double) 100L);
        double double17 = rotation16.getQ3();
        double double18 = rotation16.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation24 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (-1L), 0.0d, (-0.0d), 17.66239947251099d, false);
        double double25 = rotation24.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D26 = rotation24.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation32 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-1.0d), (double) (byte) 10, (double) (byte) 100, (double) 0L, true);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation38 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D39 = rotation38.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation45 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D46 = rotation45.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation47 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D39, vector3D46);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D48 = rotation32.applyTo(vector3D39);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation54 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) 10, 0.0d, (double) (byte) 0, 10.0d, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation60 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (byte) 100, (double) 10L, (double) (short) 100, (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation66 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D67 = rotation66.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation73 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D74 = rotation73.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation75 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D67, vector3D74);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation77 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D67, (double) 100L);
        double double78 = rotation77.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation79 = rotation60.applyInverseTo(rotation77);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation80 = rotation54.applyInverseTo(rotation77);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation81 = rotation32.applyTo(rotation54);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation87 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-1.0d), (double) (byte) 10, (double) (byte) 100, (double) 0L, true);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation93 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D94 = rotation93.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D95 = rotation87.applyInverseTo(vector3D94);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D96 = rotation81.applyInverseTo(vector3D94);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation97 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D26, vector3D94);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D98 = rotation16.applyInverseTo(vector3D26);
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-0.0d) + "'", double17 == (-0.0d));
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + (-0.0d) + "'", double18 == (-0.0d));
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertNotNull(vector3D26);
        org.junit.Assert.assertNotNull(vector3D39);
        org.junit.Assert.assertNotNull(vector3D46);
        org.junit.Assert.assertNotNull(vector3D48);
        org.junit.Assert.assertNotNull(vector3D67);
        org.junit.Assert.assertNotNull(vector3D74);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + (-0.0d) + "'", double78 == (-0.0d));
        org.junit.Assert.assertNotNull(rotation79);
        org.junit.Assert.assertNotNull(rotation80);
        org.junit.Assert.assertNotNull(rotation81);
        org.junit.Assert.assertNotNull(vector3D94);
        org.junit.Assert.assertNotNull(vector3D95);
        org.junit.Assert.assertNotNull(vector3D96);
        org.junit.Assert.assertNotNull(vector3D98);
    }

    @Test
    public void test0513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0513");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation16 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, (double) 100L);
        double double17 = rotation16.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation18 = rotation16.revert();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation24 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (byte) 100, (double) 10L, (double) (short) 100, (double) 1L, false);
        double double25 = rotation24.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation26 = rotation18.applyInverseTo(rotation24);
        double double27 = rotation24.getQ0();
        double double28 = rotation24.getQ0();
        double[][] doubleArray29 = rotation24.getMatrix();
        double[][] doubleArray30 = rotation24.getMatrix();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-0.0d) + "'", double17 == (-0.0d));
        org.junit.Assert.assertNotNull(rotation18);
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertNotNull(rotation26);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 100.0d + "'", double27 == 100.0d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 100.0d + "'", double28 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
    }

    @Test
    public void test0514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0514");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation20.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = rotation27.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation29 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D21, vector3D28);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D36 = rotation35.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation42 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D43 = rotation42.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation44 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D36, vector3D43);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation45 = rotation29.applyTo(rotation44);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation46 = rotation14.applyTo(rotation45);
        double[][] doubleArray47 = rotation46.getMatrix();
        double double48 = rotation46.getQ1();
        double[][] doubleArray49 = rotation46.getMatrix();
        double[][] doubleArray50 = rotation46.getMatrix();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.geometry.euclidean.threed.Rotation rotation52 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray50, (double) (-1));
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.geometry.euclidean.threed.NotARotationMatrixException; message: unable to orthogonalize matrix in 10 iterations");
        } catch (org.apache.commons.math.geometry.euclidean.threed.NotARotationMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(rotation45);
        org.junit.Assert.assertNotNull(rotation46);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
    }

    @Test
    public void test0515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0515");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation20.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = rotation27.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation29 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D21, vector3D28);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D36 = rotation35.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation42 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D43 = rotation42.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation44 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D36, vector3D43);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation45 = rotation29.applyTo(rotation44);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation46 = rotation14.applyTo(rotation45);
        double[][] doubleArray47 = rotation46.getMatrix();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation53 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D54 = rotation53.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation60 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D61 = rotation60.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation62 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D54, vector3D61);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation68 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D69 = rotation68.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation75 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D76 = rotation75.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation77 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D69, vector3D76);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation83 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D84 = rotation83.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation90 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D91 = rotation90.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation92 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D84, vector3D91);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation93 = rotation77.applyTo(rotation92);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation94 = rotation62.applyTo(rotation93);
        double double95 = rotation94.getAngle();
        double double96 = rotation94.getQ3();
        double double97 = rotation94.getAngle();
        double double98 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation46, rotation94);
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(rotation45);
        org.junit.Assert.assertNotNull(rotation46);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(vector3D54);
        org.junit.Assert.assertNotNull(vector3D61);
        org.junit.Assert.assertNotNull(vector3D69);
        org.junit.Assert.assertNotNull(vector3D76);
        org.junit.Assert.assertNotNull(vector3D84);
        org.junit.Assert.assertNotNull(vector3D91);
        org.junit.Assert.assertNotNull(rotation93);
        org.junit.Assert.assertNotNull(rotation94);
        org.junit.Assert.assertTrue("'" + double95 + "' != '" + 0.0d + "'", double95 == 0.0d);
        org.junit.Assert.assertTrue("'" + double96 + "' != '" + 0.0d + "'", double96 == 0.0d);
        org.junit.Assert.assertTrue("'" + double97 + "' != '" + 0.0d + "'", double97 == 0.0d);
        org.junit.Assert.assertTrue("'" + double98 + "' != '" + 0.0d + "'", double98 == 0.0d);
    }

    @Test
    public void test0516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0516");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double13 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation5, rotation12);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation19 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D20 = rotation19.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation26 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double27 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation19, rotation26);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation28 = rotation12.applyInverseTo(rotation19);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D29 = rotation28.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        double double36 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation28, rotation35);
        double[][] doubleArray37 = rotation35.getMatrix();
        double double38 = rotation35.getQ1();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertNotNull(vector3D20);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertNotNull(rotation28);
        org.junit.Assert.assertNotNull(vector3D29);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 3.141592653589793d + "'", double36 == 3.141592653589793d);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.01922366120271981d + "'", double38 == 0.01922366120271981d);
    }

    @Test
    public void test0517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0517");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation20.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = rotation27.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation29 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D21, vector3D28);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D36 = rotation35.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation42 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D43 = rotation42.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation44 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D36, vector3D43);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation45 = rotation29.applyTo(rotation44);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation46 = rotation14.applyTo(rotation45);
        double[][] doubleArray47 = rotation46.getMatrix();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation49 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray47, (double) 10);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation51 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray47, (double) (byte) 100);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation57 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) 10, 0.0d, (double) (byte) 0, 10.0d, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation63 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (byte) 100, (double) 10L, (double) (short) 100, (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation69 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D70 = rotation69.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation76 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D77 = rotation76.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation78 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D70, vector3D77);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation80 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D70, (double) 100L);
        double double81 = rotation80.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation82 = rotation63.applyInverseTo(rotation80);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation83 = rotation57.applyInverseTo(rotation80);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation84 = rotation51.applyInverseTo(rotation57);
        double[][] doubleArray85 = rotation84.getMatrix();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.geometry.euclidean.threed.Rotation rotation87 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray85, 0.9949879346007117d);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.geometry.euclidean.threed.NotARotationMatrixException; message: unable to orthogonalize matrix in 10 iterations");
        } catch (org.apache.commons.math.geometry.euclidean.threed.NotARotationMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(rotation45);
        org.junit.Assert.assertNotNull(rotation46);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(vector3D70);
        org.junit.Assert.assertNotNull(vector3D77);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + (-0.0d) + "'", double81 == (-0.0d));
        org.junit.Assert.assertNotNull(rotation82);
        org.junit.Assert.assertNotNull(rotation83);
        org.junit.Assert.assertNotNull(rotation84);
        org.junit.Assert.assertNotNull(doubleArray85);
    }

    @Test
    public void test0518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0518");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) 100L, 1.0d, (double) (byte) -1, 0.9996303825414301d, false);
        org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder6 = null;
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray7 = rotation5.getAngles(rotationOrder6);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.geometry.euclidean.threed.CardanEulerSingularityException; message: Euler angles singularity");
        } catch (org.apache.commons.math.geometry.euclidean.threed.CardanEulerSingularityException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0519");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation21 = rotation14.applyInverseTo(rotation20);
        double double22 = rotation14.getQ2();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation28 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D29 = rotation28.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D36 = rotation35.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation37 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D29, vector3D36);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation43 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D44 = rotation43.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation50 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D51 = rotation50.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation52 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D44, vector3D51);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation53 = rotation37.applyTo(rotation52);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation59 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) 10, 0.0d, (double) (byte) 0, 10.0d, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation60 = rotation37.applyTo(rotation59);
        double double61 = rotation59.getAngle();
        double double62 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation14, rotation59);
        double[][] doubleArray63 = rotation14.getMatrix();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation65 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray63, 0.9949438965141721d);
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(rotation21);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertNotNull(vector3D29);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D44);
        org.junit.Assert.assertNotNull(vector3D51);
        org.junit.Assert.assertNotNull(rotation53);
        org.junit.Assert.assertNotNull(rotation60);
        org.junit.Assert.assertTrue(Double.isNaN(double61));
        org.junit.Assert.assertTrue(Double.isNaN(double62));
        org.junit.Assert.assertNotNull(doubleArray63);
    }

    @Test
    public void test0520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0520");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation20.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = rotation27.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation34 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D35 = rotation34.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation36 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D28, vector3D35);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation42 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D43 = rotation42.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation49 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D50 = rotation49.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation51 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D43, vector3D50);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation52 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D13, vector3D21, vector3D35, vector3D50);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation54 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D21, (double) 1);
        double double55 = rotation54.getQ1();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D56 = rotation54.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation62 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D63 = rotation62.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D64 = rotation54.applyTo(vector3D63);
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D35);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(vector3D50);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.33900504942104487d + "'", double55 == 0.33900504942104487d);
        org.junit.Assert.assertNotNull(vector3D56);
        org.junit.Assert.assertNotNull(vector3D63);
        org.junit.Assert.assertNotNull(vector3D64);
    }

    @Test
    public void test0521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0521");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(1.0d, 2.7755575615628914E-17d, (double) (-1), 0.9996303825414301d, true);
        java.lang.Class<?> wildcardClass6 = rotation5.getClass();
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test0522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0522");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) 1, (double) (byte) -1, (double) ' ', (double) (short) 100, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation11 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D12 = rotation11.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation18 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D19 = rotation18.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D12, vector3D19);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation22 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D12, (double) 100L);
        double double23 = rotation22.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation24 = rotation22.revert();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation30 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (byte) 100, (double) 10L, (double) (short) 100, (double) 1L, false);
        double double31 = rotation30.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation32 = rotation24.applyInverseTo(rotation30);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation38 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation44 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-1.0d), (double) (byte) 10, (double) (byte) 100, (double) 0L, true);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation50 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D51 = rotation50.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation57 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D58 = rotation57.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation59 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D51, vector3D58);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D60 = rotation44.applyTo(vector3D51);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D61 = rotation38.applyTo(vector3D60);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D62 = rotation30.applyInverseTo(vector3D61);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D63 = rotation5.applyTo(vector3D62);
        double double64 = rotation5.getQ2();
        org.junit.Assert.assertNotNull(vector3D12);
        org.junit.Assert.assertNotNull(vector3D19);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + (-0.0d) + "'", double23 == (-0.0d));
        org.junit.Assert.assertNotNull(rotation24);
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertNotNull(rotation32);
        org.junit.Assert.assertNotNull(vector3D51);
        org.junit.Assert.assertNotNull(vector3D58);
        org.junit.Assert.assertNotNull(vector3D60);
        org.junit.Assert.assertNotNull(vector3D61);
        org.junit.Assert.assertNotNull(vector3D62);
        org.junit.Assert.assertNotNull(vector3D63);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 32.0d + "'", double64 == 32.0d);
    }

    @Test
    public void test0523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0523");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-0.1855270382668764d), (double) 10, (double) (short) -1, (double) 100.0f, false);
        double[][] doubleArray6 = rotation5.getMatrix();
        org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder7 = null;
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray8 = rotation5.getAngles(rotationOrder7);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.geometry.euclidean.threed.CardanEulerSingularityException; message: Euler angles singularity");
        } catch (org.apache.commons.math.geometry.euclidean.threed.CardanEulerSingularityException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
    }

    @Test
    public void test0524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0524");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double13 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation5, rotation12);
        double double14 = rotation12.getAngle();
        double double15 = rotation12.getAngle();
        double double16 = rotation12.getQ0();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation22 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D23 = rotation22.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation29 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D30 = rotation29.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation31 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D23, vector3D30);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation37 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation38 = rotation31.applyInverseTo(rotation37);
        double double39 = rotation31.getQ2();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation45 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D46 = rotation45.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation52 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D53 = rotation52.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation54 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D46, vector3D53);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation60 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D61 = rotation60.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation67 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D68 = rotation67.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation69 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D61, vector3D68);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation70 = rotation54.applyTo(rotation69);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation76 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) 10, 0.0d, (double) (byte) 0, 10.0d, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation77 = rotation54.applyTo(rotation76);
        double double78 = rotation76.getAngle();
        double double79 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation31, rotation76);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation80 = rotation12.applyInverseTo(rotation31);
        double[][] doubleArray81 = rotation80.getMatrix();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.geometry.euclidean.threed.Rotation rotation83 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray81, (double) (short) 1);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.geometry.euclidean.threed.NotARotationMatrixException; message: unable to orthogonalize matrix in 10 iterations");
        } catch (org.apache.commons.math.geometry.euclidean.threed.NotARotationMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 3.141592653589793d + "'", double14 == 3.141592653589793d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 3.141592653589793d + "'", double15 == 3.141592653589793d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertNotNull(vector3D23);
        org.junit.Assert.assertNotNull(vector3D30);
        org.junit.Assert.assertNotNull(rotation38);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.0d + "'", double39 == 0.0d);
        org.junit.Assert.assertNotNull(vector3D46);
        org.junit.Assert.assertNotNull(vector3D53);
        org.junit.Assert.assertNotNull(vector3D61);
        org.junit.Assert.assertNotNull(vector3D68);
        org.junit.Assert.assertNotNull(rotation70);
        org.junit.Assert.assertNotNull(rotation77);
        org.junit.Assert.assertTrue(Double.isNaN(double78));
        org.junit.Assert.assertTrue(Double.isNaN(double79));
        org.junit.Assert.assertNotNull(rotation80);
        org.junit.Assert.assertNotNull(doubleArray81);
    }

    @Test
    public void test0525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0525");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (byte) 100, (double) 10L, (double) (short) 100, (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation11 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D12 = rotation11.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation18 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D19 = rotation18.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D12, vector3D19);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation22 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D12, (double) 100L);
        double double23 = rotation22.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation24 = rotation5.applyInverseTo(rotation22);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation30 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D31 = rotation30.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation37 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D38 = rotation37.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation39 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D31, vector3D38);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation45 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation46 = rotation39.applyInverseTo(rotation45);
        double double47 = rotation39.getQ2();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation53 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D54 = rotation53.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation60 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D61 = rotation60.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation62 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D54, vector3D61);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation68 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D69 = rotation68.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation75 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D76 = rotation75.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation77 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D69, vector3D76);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation78 = rotation62.applyTo(rotation77);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation84 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) 10, 0.0d, (double) (byte) 0, 10.0d, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation85 = rotation62.applyTo(rotation84);
        double double86 = rotation84.getAngle();
        double double87 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation39, rotation84);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation88 = rotation24.applyInverseTo(rotation39);
        double double89 = rotation24.getQ0();
        org.junit.Assert.assertNotNull(vector3D12);
        org.junit.Assert.assertNotNull(vector3D19);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + (-0.0d) + "'", double23 == (-0.0d));
        org.junit.Assert.assertNotNull(rotation24);
        org.junit.Assert.assertNotNull(vector3D31);
        org.junit.Assert.assertNotNull(vector3D38);
        org.junit.Assert.assertNotNull(rotation46);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d);
        org.junit.Assert.assertNotNull(vector3D54);
        org.junit.Assert.assertNotNull(vector3D61);
        org.junit.Assert.assertNotNull(vector3D69);
        org.junit.Assert.assertNotNull(vector3D76);
        org.junit.Assert.assertNotNull(rotation78);
        org.junit.Assert.assertNotNull(rotation85);
        org.junit.Assert.assertTrue(Double.isNaN(double86));
        org.junit.Assert.assertTrue(Double.isNaN(double87));
        org.junit.Assert.assertNotNull(rotation88);
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + (-76.08862863985493d) + "'", double89 == (-76.08862863985493d));
    }

    @Test
    public void test0526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0526");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation20.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = rotation27.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation34 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D35 = rotation34.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation36 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D28, vector3D35);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation42 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D43 = rotation42.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation49 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D50 = rotation49.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation51 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D43, vector3D50);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation52 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D13, vector3D21, vector3D35, vector3D50);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation54 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D21, (double) 1);
        double double55 = rotation54.getQ1();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D56 = rotation54.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation62 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D63 = rotation62.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation69 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D70 = rotation69.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation71 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D63, vector3D70);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation77 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D78 = rotation77.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation84 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D85 = rotation84.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation86 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D78, vector3D85);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation87 = rotation71.applyTo(rotation86);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation93 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) 10, 0.0d, (double) (byte) 0, 10.0d, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation94 = rotation71.applyTo(rotation93);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation95 = rotation94.revert();
        double double96 = rotation95.getQ0();
        double double97 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation54, rotation95);
        double double98 = rotation95.getQ3();
        java.lang.Class<?> wildcardClass99 = rotation95.getClass();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D35);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(vector3D50);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.33900504942104487d + "'", double55 == 0.33900504942104487d);
        org.junit.Assert.assertNotNull(vector3D56);
        org.junit.Assert.assertNotNull(vector3D63);
        org.junit.Assert.assertNotNull(vector3D70);
        org.junit.Assert.assertNotNull(vector3D78);
        org.junit.Assert.assertNotNull(vector3D85);
        org.junit.Assert.assertNotNull(rotation87);
        org.junit.Assert.assertNotNull(rotation94);
        org.junit.Assert.assertNotNull(rotation95);
        org.junit.Assert.assertTrue("'" + double96 + "' != '" + (-10.0d) + "'", double96 == (-10.0d));
        org.junit.Assert.assertTrue(Double.isNaN(double97));
        org.junit.Assert.assertTrue("'" + double98 + "' != '" + 10.0d + "'", double98 == 10.0d);
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test0527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0527");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation16 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, (double) 100L);
        double double17 = rotation16.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation18 = rotation16.revert();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation24 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (byte) 100, (double) 10L, (double) (short) 100, (double) 1L, false);
        double double25 = rotation24.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation26 = rotation18.applyInverseTo(rotation24);
        double double27 = rotation18.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation33 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D34 = rotation33.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation40 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double41 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation33, rotation40);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation47 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D48 = rotation47.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation54 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double55 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation47, rotation54);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation56 = rotation40.applyInverseTo(rotation47);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation62 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D63 = rotation62.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation69 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D70 = rotation69.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation71 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D63, vector3D70);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation73 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D63, (double) 1L);
        double double74 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation47, rotation73);
        double double75 = rotation73.getQ0();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation76 = rotation18.applyInverseTo(rotation73);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D77 = rotation73.getAxis();
        double[][] doubleArray78 = rotation73.getMatrix();
        java.lang.Class<?> wildcardClass79 = doubleArray78.getClass();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-0.0d) + "'", double17 == (-0.0d));
        org.junit.Assert.assertNotNull(rotation18);
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertNotNull(rotation26);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.5309649148733836d + "'", double27 == 0.5309649148733836d);
        org.junit.Assert.assertNotNull(vector3D34);
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertNotNull(vector3D48);
        org.junit.Assert.assertTrue(Double.isNaN(double55));
        org.junit.Assert.assertNotNull(rotation56);
        org.junit.Assert.assertNotNull(vector3D63);
        org.junit.Assert.assertNotNull(vector3D70);
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 0.9456205751905904d + "'", double74 == 0.9456205751905904d);
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 0.8775825618903728d + "'", double75 == 0.8775825618903728d);
        org.junit.Assert.assertNotNull(rotation76);
        org.junit.Assert.assertNotNull(vector3D77);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertNotNull(wildcardClass79);
    }

    @Test
    public void test0528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0528");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-0.0d), 3.141592653589793d, 97.0d, 0.0d, true);
    }

    @Test
    public void test0529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0529");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (-1), 0.01922366120271981d, (double) 0.0f, 1.0d, true);
        double double6 = rotation5.getQ2();
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
    }

    @Test
    public void test0530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0530");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation20.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = rotation27.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation34 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D35 = rotation34.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation36 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D28, vector3D35);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation42 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D43 = rotation42.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation49 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D50 = rotation49.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation51 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D43, vector3D50);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation52 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D13, vector3D21, vector3D35, vector3D50);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation54 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D21, (double) 1);
        double[][] doubleArray55 = rotation54.getMatrix();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation57 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray55, 0.9996303825414301d);
        java.lang.Class<?> wildcardClass58 = rotation57.getClass();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D35);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(vector3D50);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(wildcardClass58);
    }

    @Test
    public void test0531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0531");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation20.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = rotation27.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation29 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D21, vector3D28);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D36 = rotation35.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation42 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D43 = rotation42.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation44 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D36, vector3D43);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation45 = rotation29.applyTo(rotation44);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation46 = rotation14.applyTo(rotation45);
        double[][] doubleArray47 = rotation46.getMatrix();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation49 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray47, (double) 10);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation51 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray47, (double) (byte) 100);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation53 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray47, 0.0d);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation55 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray47, (double) '#');
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.geometry.euclidean.threed.Rotation rotation57 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray47, (-0.005755946541407356d));
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.geometry.euclidean.threed.NotARotationMatrixException; message: unable to orthogonalize matrix in 10 iterations");
        } catch (org.apache.commons.math.geometry.euclidean.threed.NotARotationMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(rotation45);
        org.junit.Assert.assertNotNull(rotation46);
        org.junit.Assert.assertNotNull(doubleArray47);
    }

    @Test
    public void test0532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0532");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (byte) 100, (double) 10L, (double) (short) 100, (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation11 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D12 = rotation11.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation18 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D19 = rotation18.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D12, vector3D19);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation22 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D12, (double) 100L);
        double double23 = rotation22.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation24 = rotation5.applyInverseTo(rotation22);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation30 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D31 = rotation30.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation37 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D38 = rotation37.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation39 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D31, vector3D38);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation45 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation46 = rotation39.applyInverseTo(rotation45);
        double double47 = rotation39.getQ2();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation53 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D54 = rotation53.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation60 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D61 = rotation60.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation62 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D54, vector3D61);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation68 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D69 = rotation68.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation75 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D76 = rotation75.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation77 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D69, vector3D76);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation78 = rotation62.applyTo(rotation77);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation84 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) 10, 0.0d, (double) (byte) 0, 10.0d, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation85 = rotation62.applyTo(rotation84);
        double double86 = rotation84.getAngle();
        double double87 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation39, rotation84);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation88 = rotation24.applyInverseTo(rotation39);
        double double89 = rotation88.getQ1();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation95 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (byte) 100, (double) 10L, (double) (short) 100, (double) 1L, false);
        double double96 = rotation95.getQ2();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation97 = rotation88.applyTo(rotation95);
        double double98 = rotation88.getQ1();
        double double99 = rotation88.getQ2();
        org.junit.Assert.assertNotNull(vector3D12);
        org.junit.Assert.assertNotNull(vector3D19);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + (-0.0d) + "'", double23 == (-0.0d));
        org.junit.Assert.assertNotNull(rotation24);
        org.junit.Assert.assertNotNull(vector3D31);
        org.junit.Assert.assertNotNull(vector3D38);
        org.junit.Assert.assertNotNull(rotation46);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d);
        org.junit.Assert.assertNotNull(vector3D54);
        org.junit.Assert.assertNotNull(vector3D61);
        org.junit.Assert.assertNotNull(vector3D69);
        org.junit.Assert.assertNotNull(vector3D76);
        org.junit.Assert.assertNotNull(rotation78);
        org.junit.Assert.assertNotNull(rotation85);
        org.junit.Assert.assertTrue(Double.isNaN(double86));
        org.junit.Assert.assertTrue(Double.isNaN(double87));
        org.junit.Assert.assertNotNull(rotation88);
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 28.016837073341897d + "'", double89 == 28.016837073341897d);
        org.junit.Assert.assertTrue("'" + double96 + "' != '" + 100.0d + "'", double96 == 100.0d);
        org.junit.Assert.assertNotNull(rotation97);
        org.junit.Assert.assertTrue("'" + double98 + "' != '" + 28.016837073341897d + "'", double98 == 28.016837073341897d);
        org.junit.Assert.assertTrue("'" + double99 + "' != '" + 115.23483371416586d + "'", double99 == 115.23483371416586d);
    }

    @Test
    public void test0533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0533");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double13 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation5, rotation12);
        double double14 = rotation12.getQ1();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation20.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = rotation27.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation29 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D21, vector3D28);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation31 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D21, (double) 100L);
        double double32 = rotation31.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation33 = rotation31.revert();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation39 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (byte) 100, (double) 10L, (double) (short) 100, (double) 1L, false);
        double double40 = rotation39.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation41 = rotation33.applyInverseTo(rotation39);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D42 = rotation39.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D43 = rotation12.applyInverseTo(vector3D42);
        double double44 = rotation12.getQ2();
        double double45 = rotation12.getQ1();
        double double46 = rotation12.getQ3();
        java.lang.Class<?> wildcardClass47 = rotation12.getClass();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 10.0d + "'", double14 == 10.0d);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + (-0.0d) + "'", double32 == (-0.0d));
        org.junit.Assert.assertNotNull(rotation33);
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertNotNull(rotation41);
        org.junit.Assert.assertNotNull(vector3D42);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + (-1.0d) + "'", double44 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 10.0d + "'", double45 == 10.0d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 1.0d + "'", double46 == 1.0d);
        org.junit.Assert.assertNotNull(wildcardClass47);
    }

    @Test
    public void test0534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0534");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double13 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation5, rotation12);
        double double14 = rotation12.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation20.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double28 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation20, rotation27);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation34 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D35 = rotation34.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation41 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double42 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation34, rotation41);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation43 = rotation27.applyInverseTo(rotation34);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation44 = rotation12.applyTo(rotation34);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation45 = rotation44.revert();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D46 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D47 = rotation45.applyInverseTo(vector3D46);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 3.141592653589793d + "'", double14 == 3.141592653589793d);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertNotNull(vector3D35);
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertNotNull(rotation43);
        org.junit.Assert.assertNotNull(rotation44);
        org.junit.Assert.assertNotNull(rotation45);
    }

    @Test
    public void test0535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0535");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) 0, (double) 1.0f, (double) 0.0f, 0.01922366120271981d, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.junit.Assert.assertNotNull(vector3D6);
    }

    @Test
    public void test0536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0536");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation11 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-1.0d), (double) (byte) 10, (double) (byte) 100, (double) 0L, true);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation17 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D18 = rotation17.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation24 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D25 = rotation24.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation26 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D18, vector3D25);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D27 = rotation11.applyTo(vector3D18);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = rotation5.applyTo(vector3D27);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation30 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D27, (double) 1.0f);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation32 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D27, 0.0d);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D33 = rotation32.getAxis();
        double double34 = rotation32.getQ3();
        double double35 = rotation32.getQ2();
        org.junit.Assert.assertNotNull(vector3D18);
        org.junit.Assert.assertNotNull(vector3D25);
        org.junit.Assert.assertNotNull(vector3D27);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D33);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + (-0.0d) + "'", double34 == (-0.0d));
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
    }

    @Test
    public void test0537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0537");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) 0, (double) ' ', (double) (byte) 100, 17.66239947251099d, true);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation11 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D12 = rotation11.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation18 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D19 = rotation18.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D12, vector3D19);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation26 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D27 = rotation26.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation33 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D34 = rotation33.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D27, vector3D34);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation41 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D42 = rotation41.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation48 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D49 = rotation48.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation50 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D42, vector3D49);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation51 = rotation35.applyTo(rotation50);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation52 = rotation20.applyTo(rotation51);
        double[][] doubleArray53 = rotation52.getMatrix();
        double double54 = rotation52.getQ1();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D55 = rotation52.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D56 = rotation5.applyInverseTo(vector3D55);
        double double57 = rotation5.getQ3();
        org.junit.Assert.assertNotNull(vector3D12);
        org.junit.Assert.assertNotNull(vector3D19);
        org.junit.Assert.assertNotNull(vector3D27);
        org.junit.Assert.assertNotNull(vector3D34);
        org.junit.Assert.assertNotNull(vector3D42);
        org.junit.Assert.assertNotNull(vector3D49);
        org.junit.Assert.assertNotNull(rotation51);
        org.junit.Assert.assertNotNull(rotation52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d);
        org.junit.Assert.assertNotNull(vector3D55);
        org.junit.Assert.assertNotNull(vector3D56);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.165890128604566d + "'", double57 == 0.165890128604566d);
    }

    @Test
    public void test0538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0538");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double13 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation5, rotation12);
        double double14 = rotation12.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation20.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = rotation27.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation29 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D21, vector3D28);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D36 = rotation35.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation42 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D43 = rotation42.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation44 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D36, vector3D43);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation45 = rotation29.applyTo(rotation44);
        double double46 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation12, rotation45);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation52 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D53 = rotation52.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation59 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double60 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation52, rotation59);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation66 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D67 = rotation66.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation73 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double74 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation66, rotation73);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation75 = rotation59.applyInverseTo(rotation66);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation76 = rotation12.applyInverseTo(rotation66);
        double[][] doubleArray77 = rotation12.getMatrix();
        double double78 = rotation12.getQ3();
        double double79 = rotation12.getQ0();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation80 = rotation12.revert();
        double double81 = rotation80.getQ0();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D82 = rotation80.getAxis();
        double double83 = rotation80.getAngle();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 3.141592653589793d + "'", double14 == 3.141592653589793d);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(rotation45);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 3.141592653589793d + "'", double46 == 3.141592653589793d);
        org.junit.Assert.assertNotNull(vector3D53);
        org.junit.Assert.assertTrue(Double.isNaN(double60));
        org.junit.Assert.assertNotNull(vector3D67);
        org.junit.Assert.assertTrue(Double.isNaN(double74));
        org.junit.Assert.assertNotNull(rotation75);
        org.junit.Assert.assertNotNull(rotation76);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 1.0d + "'", double78 == 1.0d);
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 0.0d + "'", double79 == 0.0d);
        org.junit.Assert.assertNotNull(rotation80);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + (-0.0d) + "'", double81 == (-0.0d));
        org.junit.Assert.assertNotNull(vector3D82);
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 3.141592653589793d + "'", double83 == 3.141592653589793d);
    }

    @Test
    public void test0539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0539");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation20.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = rotation27.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation29 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D21, vector3D28);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D36 = rotation35.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation42 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D43 = rotation42.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation44 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D36, vector3D43);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation45 = rotation29.applyTo(rotation44);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation46 = rotation14.applyTo(rotation45);
        double[][] doubleArray47 = rotation46.getMatrix();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation49 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray47, (double) 10);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation51 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray47, (double) (byte) 100);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation57 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) 10, 0.0d, (double) (byte) 0, 10.0d, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation63 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (byte) 100, (double) 10L, (double) (short) 100, (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation69 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D70 = rotation69.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation76 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D77 = rotation76.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation78 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D70, vector3D77);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation80 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D70, (double) 100L);
        double double81 = rotation80.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation82 = rotation63.applyInverseTo(rotation80);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation83 = rotation57.applyInverseTo(rotation80);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation84 = rotation51.applyInverseTo(rotation57);
        double double85 = rotation57.getQ3();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(rotation45);
        org.junit.Assert.assertNotNull(rotation46);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(vector3D70);
        org.junit.Assert.assertNotNull(vector3D77);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + (-0.0d) + "'", double81 == (-0.0d));
        org.junit.Assert.assertNotNull(rotation82);
        org.junit.Assert.assertNotNull(rotation83);
        org.junit.Assert.assertNotNull(rotation84);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 10.0d + "'", double85 == 10.0d);
    }

    @Test
    public void test0540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0540");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation20.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = rotation27.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation34 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D35 = rotation34.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation36 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D28, vector3D35);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation42 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D43 = rotation42.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation49 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D50 = rotation49.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation51 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D43, vector3D50);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation52 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D13, vector3D21, vector3D35, vector3D50);
        double double53 = rotation52.getQ1();
        double double54 = rotation52.getQ2();
        double[][] doubleArray55 = rotation52.getMatrix();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation61 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D62 = rotation61.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation63 = rotation52.applyTo(rotation61);
        double double64 = rotation63.getQ3();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D35);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(vector3D50);
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(vector3D62);
        org.junit.Assert.assertNotNull(rotation63);
        org.junit.Assert.assertTrue(Double.isNaN(double64));
    }

    @Test
    public void test0541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0541");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(3.1216925665368036d, Double.NaN, 0.33900504942104487d, (double) (-1), true);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation11 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D12 = rotation11.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation18 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D19 = rotation18.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D12, vector3D19);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation26 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D27 = rotation26.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation33 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D34 = rotation33.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D27, vector3D34);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation41 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D42 = rotation41.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation48 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D49 = rotation48.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation50 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D42, vector3D49);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation51 = rotation35.applyTo(rotation50);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation52 = rotation20.applyTo(rotation51);
        double double53 = rotation52.getAngle();
        double double54 = rotation52.getQ3();
        double double55 = rotation52.getQ0();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation61 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double62 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation52, rotation61);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation63 = rotation5.applyInverseTo(rotation52);
        double double64 = rotation5.getQ2();
        org.junit.Assert.assertNotNull(vector3D12);
        org.junit.Assert.assertNotNull(vector3D19);
        org.junit.Assert.assertNotNull(vector3D27);
        org.junit.Assert.assertNotNull(vector3D34);
        org.junit.Assert.assertNotNull(vector3D42);
        org.junit.Assert.assertNotNull(vector3D49);
        org.junit.Assert.assertNotNull(rotation51);
        org.junit.Assert.assertNotNull(rotation52);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.0d + "'", double53 == 0.0d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 1.0d + "'", double55 == 1.0d);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 3.141592653589793d + "'", double62 == 3.141592653589793d);
        org.junit.Assert.assertNotNull(rotation63);
        org.junit.Assert.assertTrue(Double.isNaN(double64));
    }

    @Test
    public void test0542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0542");
        org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.geometry.euclidean.threed.Rotation rotation4 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(rotationOrder0, 100.0d, 0.3388903615770647d, (double) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0543");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-1.0d), (double) (byte) 10, (double) (byte) 100, (double) 0L, true);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation11 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D12 = rotation11.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation18 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D19 = rotation18.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D12, vector3D19);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation5.applyTo(vector3D12);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) 10, 0.0d, (double) (byte) 0, 10.0d, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation33 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (byte) 100, (double) 10L, (double) (short) 100, (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation39 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D40 = rotation39.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation46 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D47 = rotation46.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation48 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D40, vector3D47);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation50 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D40, (double) 100L);
        double double51 = rotation50.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation52 = rotation33.applyInverseTo(rotation50);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation53 = rotation27.applyInverseTo(rotation50);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation54 = rotation5.applyTo(rotation27);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation60 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-1.0d), (double) (byte) 10, (double) (byte) 100, (double) 0L, true);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation66 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D67 = rotation66.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D68 = rotation60.applyInverseTo(vector3D67);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D69 = rotation54.applyInverseTo(vector3D67);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D70 = rotation54.getAxis();
        java.lang.Class<?> wildcardClass71 = vector3D70.getClass();
        org.junit.Assert.assertNotNull(vector3D12);
        org.junit.Assert.assertNotNull(vector3D19);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D40);
        org.junit.Assert.assertNotNull(vector3D47);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + (-0.0d) + "'", double51 == (-0.0d));
        org.junit.Assert.assertNotNull(rotation52);
        org.junit.Assert.assertNotNull(rotation53);
        org.junit.Assert.assertNotNull(rotation54);
        org.junit.Assert.assertNotNull(vector3D67);
        org.junit.Assert.assertNotNull(vector3D68);
        org.junit.Assert.assertNotNull(vector3D69);
        org.junit.Assert.assertNotNull(vector3D70);
        org.junit.Assert.assertNotNull(wildcardClass71);
    }

    @Test
    public void test0544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0544");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) 'a', (-5.7519881927834584E-5d), (double) (short) 0, (-0.1730129508244783d), true);
        org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder6 = null;
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray7 = rotation5.getAngles(rotationOrder6);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.geometry.euclidean.threed.CardanEulerSingularityException; message: Euler angles singularity");
        } catch (org.apache.commons.math.geometry.euclidean.threed.CardanEulerSingularityException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0545");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation20.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = rotation27.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation34 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D35 = rotation34.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation36 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D28, vector3D35);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation42 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D43 = rotation42.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation49 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D50 = rotation49.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation51 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D43, vector3D50);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation52 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D13, vector3D21, vector3D35, vector3D50);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation54 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D21, (double) 1);
        double double55 = rotation54.getQ1();
        double double56 = rotation54.getQ1();
        java.lang.Class<?> wildcardClass57 = rotation54.getClass();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D35);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(vector3D50);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.33900504942104487d + "'", double55 == 0.33900504942104487d);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.33900504942104487d + "'", double56 == 0.33900504942104487d);
        org.junit.Assert.assertNotNull(wildcardClass57);
    }

    @Test
    public void test0546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0546");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation20.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = rotation27.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation29 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D21, vector3D28);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation30 = rotation14.applyTo(rotation29);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation36 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D37 = rotation36.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation43 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D44 = rotation43.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation45 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D37, vector3D44);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation51 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D52 = rotation51.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation58 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D59 = rotation58.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation65 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D66 = rotation65.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation67 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D59, vector3D66);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation73 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D74 = rotation73.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation80 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D81 = rotation80.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation82 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D74, vector3D81);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation83 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D44, vector3D52, vector3D66, vector3D81);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D84 = rotation29.applyInverseTo(vector3D52);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation86 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D84, (double) (-1));
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(rotation30);
        org.junit.Assert.assertNotNull(vector3D37);
        org.junit.Assert.assertNotNull(vector3D44);
        org.junit.Assert.assertNotNull(vector3D52);
        org.junit.Assert.assertNotNull(vector3D59);
        org.junit.Assert.assertNotNull(vector3D66);
        org.junit.Assert.assertNotNull(vector3D74);
        org.junit.Assert.assertNotNull(vector3D81);
        org.junit.Assert.assertNotNull(vector3D84);
    }

    @Test
    public void test0547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0547");
        org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.geometry.euclidean.threed.Rotation rotation4 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(rotationOrder0, 9.999000062556641d, (double) (-1L), 0.01922366120271981d);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0548");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double13 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation5, rotation12);
        double double14 = rotation12.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation20.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = rotation27.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation29 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D21, vector3D28);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D36 = rotation35.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation42 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D43 = rotation42.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation44 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D36, vector3D43);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation45 = rotation29.applyTo(rotation44);
        double double46 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation12, rotation45);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation52 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D53 = rotation52.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation59 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double60 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation52, rotation59);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation66 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D67 = rotation66.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation73 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double74 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation66, rotation73);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation75 = rotation59.applyInverseTo(rotation66);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation76 = rotation12.applyInverseTo(rotation66);
        double double77 = rotation66.getQ1();
        org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder78 = null;
        double[] doubleArray79 = rotation66.getAngles(rotationOrder78);
        java.lang.Class<?> wildcardClass80 = doubleArray79.getClass();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 3.141592653589793d + "'", double14 == 3.141592653589793d);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(rotation45);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 3.141592653589793d + "'", double46 == 3.141592653589793d);
        org.junit.Assert.assertNotNull(vector3D53);
        org.junit.Assert.assertTrue(Double.isNaN(double60));
        org.junit.Assert.assertNotNull(vector3D67);
        org.junit.Assert.assertTrue(Double.isNaN(double74));
        org.junit.Assert.assertNotNull(rotation75);
        org.junit.Assert.assertNotNull(rotation76);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 0.01922366120271981d + "'", double77 == 0.01922366120271981d);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[2.356194490192345, 0.0543794248094174, -2.356194490192345]");
        org.junit.Assert.assertNotNull(wildcardClass80);
    }

    @Test
    public void test0549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0549");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double13 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation5, rotation12);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation19 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D20 = rotation19.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation26 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double27 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation19, rotation26);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation28 = rotation12.applyInverseTo(rotation19);
        double double29 = rotation12.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation30 = rotation12.revert();
        org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder31 = null;
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray32 = rotation12.getAngles(rotationOrder31);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.geometry.euclidean.threed.CardanEulerSingularityException; message: Euler angles singularity");
        } catch (org.apache.commons.math.geometry.euclidean.threed.CardanEulerSingularityException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertNotNull(vector3D20);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertNotNull(rotation28);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 1.0d + "'", double29 == 1.0d);
        org.junit.Assert.assertNotNull(rotation30);
    }

    @Test
    public void test0550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0550");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double13 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation5, rotation12);
        double double14 = rotation12.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation20.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double28 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation20, rotation27);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation34 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D35 = rotation34.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation41 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double42 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation34, rotation41);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation43 = rotation27.applyInverseTo(rotation34);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation44 = rotation12.applyTo(rotation34);
        org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder45 = null;
        double[] doubleArray46 = rotation44.getAngles(rotationOrder45);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation52 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D53 = rotation52.getAxis();
        double double54 = rotation52.getQ0();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation55 = rotation44.applyInverseTo(rotation52);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation61 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D62 = rotation61.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation68 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D69 = rotation68.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation75 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D76 = rotation75.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation77 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D69, vector3D76);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation79 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D69, (double) 100L);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation80 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D62, vector3D69);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D81 = rotation55.applyTo(vector3D69);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation83 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D69, (double) 0.0f);
        org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder84 = null;
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray85 = rotation83.getAngles(rotationOrder84);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.geometry.euclidean.threed.CardanEulerSingularityException; message: Euler angles singularity");
        } catch (org.apache.commons.math.geometry.euclidean.threed.CardanEulerSingularityException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 3.141592653589793d + "'", double14 == 3.141592653589793d);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertNotNull(vector3D35);
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertNotNull(rotation43);
        org.junit.Assert.assertNotNull(rotation44);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[-0.31746367442260337, 1.2637009275001716, 3.026886383418824]");
        org.junit.Assert.assertNotNull(vector3D53);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.9996303825414301d + "'", double54 == 0.9996303825414301d);
        org.junit.Assert.assertNotNull(rotation55);
        org.junit.Assert.assertNotNull(vector3D62);
        org.junit.Assert.assertNotNull(vector3D69);
        org.junit.Assert.assertNotNull(vector3D76);
        org.junit.Assert.assertNotNull(vector3D81);
    }

    @Test
    public void test0551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0551");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation16 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, (double) 100L);
        double double17 = rotation16.getQ3();
        double double18 = rotation16.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D19 = rotation16.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation25 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D26 = rotation25.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation32 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D33 = rotation32.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation34 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D26, vector3D33);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation40 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D41 = rotation40.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation47 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D48 = rotation47.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation54 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D55 = rotation54.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation56 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D48, vector3D55);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation62 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D63 = rotation62.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation69 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D70 = rotation69.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation71 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D63, vector3D70);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation72 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D33, vector3D41, vector3D55, vector3D70);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation73 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D19, vector3D33);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation74 = rotation73.revert();
        double double75 = rotation73.getQ2();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-0.0d) + "'", double17 == (-0.0d));
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + (-0.0d) + "'", double18 == (-0.0d));
        org.junit.Assert.assertNotNull(vector3D19);
        org.junit.Assert.assertNotNull(vector3D26);
        org.junit.Assert.assertNotNull(vector3D33);
        org.junit.Assert.assertNotNull(vector3D41);
        org.junit.Assert.assertNotNull(vector3D48);
        org.junit.Assert.assertNotNull(vector3D55);
        org.junit.Assert.assertNotNull(vector3D63);
        org.junit.Assert.assertNotNull(vector3D70);
        org.junit.Assert.assertNotNull(rotation74);
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 0.7071067811865476d + "'", double75 == 0.7071067811865476d);
    }

    @Test
    public void test0552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0552");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation20.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = rotation27.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation34 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D35 = rotation34.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation36 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D28, vector3D35);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation42 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D43 = rotation42.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation49 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D50 = rotation49.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation51 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D43, vector3D50);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation52 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D13, vector3D21, vector3D35, vector3D50);
        double double53 = rotation52.getQ1();
        double double54 = rotation52.getQ2();
        double[][] doubleArray55 = rotation52.getMatrix();
        org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder56 = null;
        double[] doubleArray57 = rotation52.getAngles(rotationOrder56);
        double double58 = rotation52.getQ3();
        java.lang.Class<?> wildcardClass59 = rotation52.getClass();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D35);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(vector3D50);
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[NaN, NaN, NaN]");
        org.junit.Assert.assertTrue(Double.isNaN(double58));
        org.junit.Assert.assertNotNull(wildcardClass59);
    }

    @Test
    public void test0553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0553");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double13 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation5, rotation12);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation19 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D20 = rotation19.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation26 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D27 = rotation26.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation28 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D20, vector3D27);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation34 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = rotation28.applyInverseTo(rotation34);
        double double36 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation12, rotation28);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D37 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation43 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-1.0d), (double) (byte) 10, (double) (byte) 100, (double) 0L, true);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation49 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D50 = rotation49.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation56 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D57 = rotation56.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation58 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D50, vector3D57);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D59 = rotation43.applyTo(vector3D50);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation60 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D37, vector3D59);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation62 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D37, 3.7105407653375275d);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation64 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D37, 0.33900504942104487d);
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertNotNull(vector3D20);
        org.junit.Assert.assertNotNull(vector3D27);
        org.junit.Assert.assertNotNull(rotation35);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 3.141592653589793d + "'", double36 == 3.141592653589793d);
        org.junit.Assert.assertNotNull(vector3D37);
        org.junit.Assert.assertNotNull(vector3D50);
        org.junit.Assert.assertNotNull(vector3D57);
        org.junit.Assert.assertNotNull(vector3D59);
    }

    @Test
    public void test0554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0554");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-1.0d), (double) (byte) 10, (double) (byte) 100, (double) 0L, true);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation11 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D12 = rotation11.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation5.applyInverseTo(vector3D12);
        double double14 = rotation5.getQ2();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D15 = rotation5.getAxis();
        double double16 = rotation5.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation17 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.geometry.euclidean.threed.Rotation rotation18 = rotation5.applyInverseTo(rotation17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(vector3D12);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.9949879346007117d + "'", double14 == 0.9949879346007117d);
        org.junit.Assert.assertNotNull(vector3D15);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
    }

    @Test
    public void test0555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0555");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.5309649148733836d, (-108.9963038254143d), (double) ' ', 0.09949438965141721d, false);
    }

    @Test
    public void test0556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0556");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-1.0d), (double) (byte) 10, (double) (byte) 100, (double) 0L, true);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation11 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D12 = rotation11.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation18 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D19 = rotation18.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D12, vector3D19);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation5.applyTo(vector3D12);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) 10, 0.0d, (double) (byte) 0, 10.0d, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation33 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (byte) 100, (double) 10L, (double) (short) 100, (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation39 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D40 = rotation39.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation46 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D47 = rotation46.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation48 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D40, vector3D47);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation50 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D40, (double) 100L);
        double double51 = rotation50.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation52 = rotation33.applyInverseTo(rotation50);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation53 = rotation27.applyInverseTo(rotation50);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation54 = rotation53.revert();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D55 = rotation54.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation56 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D12, vector3D55);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation57 = rotation56.revert();
        double double58 = rotation56.getQ3();
        org.junit.Assert.assertNotNull(vector3D12);
        org.junit.Assert.assertNotNull(vector3D19);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D40);
        org.junit.Assert.assertNotNull(vector3D47);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + (-0.0d) + "'", double51 == (-0.0d));
        org.junit.Assert.assertNotNull(rotation52);
        org.junit.Assert.assertNotNull(rotation53);
        org.junit.Assert.assertNotNull(rotation54);
        org.junit.Assert.assertNotNull(vector3D55);
        org.junit.Assert.assertNotNull(rotation57);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + (-0.16026520139361466d) + "'", double58 == (-0.16026520139361466d));
    }

    @Test
    public void test0557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0557");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (short) -1, (-0.1730129508244783d), (-0.1730129508244783d), (double) 10.0f, false);
        double double6 = rotation5.getQ2();
        double double7 = rotation5.getQ0();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation13 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D14 = rotation13.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation20.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation22 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D14, vector3D21);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation28 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation29 = rotation22.applyInverseTo(rotation28);
        double double30 = rotation28.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation36 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D37 = rotation36.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation43 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double44 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation36, rotation43);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation50 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D51 = rotation50.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation57 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D58 = rotation57.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation59 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D51, vector3D58);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation65 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation66 = rotation59.applyInverseTo(rotation65);
        double double67 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation43, rotation59);
        double double68 = rotation59.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation69 = rotation28.applyInverseTo(rotation59);
        double double70 = rotation28.getQ1();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation71 = rotation28.revert();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation72 = rotation5.applyTo(rotation28);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation78 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D79 = rotation78.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation85 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double86 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation78, rotation85);
        double double87 = rotation85.getQ3();
        double double88 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation28, rotation85);
        double double89 = rotation85.getQ0();
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + (-0.1730129508244783d) + "'", double6 == (-0.1730129508244783d));
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1.0d) + "'", double7 == (-1.0d));
        org.junit.Assert.assertNotNull(vector3D14);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(rotation29);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 3.141592653589793d + "'", double30 == 3.141592653589793d);
        org.junit.Assert.assertNotNull(vector3D37);
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertNotNull(vector3D51);
        org.junit.Assert.assertNotNull(vector3D58);
        org.junit.Assert.assertNotNull(rotation66);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 3.141592653589793d + "'", double67 == 3.141592653589793d);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 0.0d + "'", double68 == 0.0d);
        org.junit.Assert.assertNotNull(rotation69);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 10.0d + "'", double70 == 10.0d);
        org.junit.Assert.assertNotNull(rotation71);
        org.junit.Assert.assertNotNull(rotation72);
        org.junit.Assert.assertNotNull(vector3D79);
        org.junit.Assert.assertTrue(Double.isNaN(double86));
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 1.0d + "'", double87 == 1.0d);
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 0.0d + "'", double88 == 0.0d);
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 0.0d + "'", double89 == 0.0d);
    }

    @Test
    public void test0558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0558");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation19 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D20 = rotation19.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation21 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D13, vector3D20);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation23 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D13, (double) 100L);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation24 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation30 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D31 = rotation30.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation37 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D38 = rotation37.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation39 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D31, vector3D38);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation41 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D31, (double) 100L);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation47 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-1.0d), (double) (byte) 10, (double) (byte) 100, (double) 0L, true);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation53 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D54 = rotation53.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation60 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D61 = rotation60.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation62 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D54, vector3D61);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D63 = rotation47.applyTo(vector3D54);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation69 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D70 = rotation69.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation76 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D77 = rotation76.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation83 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D84 = rotation83.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation85 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D77, vector3D84);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation87 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D77, (double) 100L);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation88 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D70, vector3D77);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation94 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D95 = rotation94.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation96 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D31, vector3D63, vector3D77, vector3D95);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D97 = rotation24.applyTo(vector3D63);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation98 = rotation24.revert();
        double double99 = rotation24.getQ3();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D20);
        org.junit.Assert.assertNotNull(vector3D31);
        org.junit.Assert.assertNotNull(vector3D38);
        org.junit.Assert.assertNotNull(vector3D54);
        org.junit.Assert.assertNotNull(vector3D61);
        org.junit.Assert.assertNotNull(vector3D63);
        org.junit.Assert.assertNotNull(vector3D70);
        org.junit.Assert.assertNotNull(vector3D77);
        org.junit.Assert.assertNotNull(vector3D84);
        org.junit.Assert.assertNotNull(vector3D95);
        org.junit.Assert.assertNotNull(vector3D97);
        org.junit.Assert.assertNotNull(rotation98);
        org.junit.Assert.assertTrue("'" + double99 + "' != '" + 0.0d + "'", double99 == 0.0d);
    }

    @Test
    public void test0559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0559");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double13 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation5, rotation12);
        double double14 = rotation12.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation20.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double28 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation20, rotation27);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation34 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D35 = rotation34.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation41 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D42 = rotation41.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation43 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D35, vector3D42);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation49 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation50 = rotation43.applyInverseTo(rotation49);
        double double51 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation27, rotation43);
        double double52 = rotation43.getQ3();
        double double53 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation12, rotation43);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation59 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) 100, (double) (byte) -1, (double) (short) 10, 0.9456205751905904d, true);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation60 = rotation43.applyTo(rotation59);
        double double61 = rotation60.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D62 = rotation60.getAxis();
        double double63 = rotation60.getQ0();
        double double64 = rotation60.getQ2();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1.0d + "'", double14 == 1.0d);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertNotNull(vector3D35);
        org.junit.Assert.assertNotNull(vector3D42);
        org.junit.Assert.assertNotNull(rotation50);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 3.141592653589793d + "'", double51 == 3.141592653589793d);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.0d + "'", double52 == 0.0d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 3.141592653589793d + "'", double53 == 3.141592653589793d);
        org.junit.Assert.assertNotNull(rotation60);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 0.20120377604668613d + "'", double61 == 0.20120377604668613d);
        org.junit.Assert.assertNotNull(vector3D62);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 0.9949438965141721d + "'", double63 == 0.9949438965141721d);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 0.09949438965141721d + "'", double64 == 0.09949438965141721d);
    }

    @Test
    public void test0560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0560");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation20.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = rotation27.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation34 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D35 = rotation34.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation36 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D28, vector3D35);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation42 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D43 = rotation42.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation49 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D50 = rotation49.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation51 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D43, vector3D50);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation52 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D13, vector3D21, vector3D35, vector3D50);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation53 = rotation52.revert();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D54 = rotation52.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation55 = rotation52.revert();
        double[][] doubleArray56 = rotation55.getMatrix();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D35);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(vector3D50);
        org.junit.Assert.assertNotNull(rotation53);
        org.junit.Assert.assertNotNull(vector3D54);
        org.junit.Assert.assertNotNull(rotation55);
        org.junit.Assert.assertNotNull(doubleArray56);
    }

    @Test
    public void test0561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0561");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation16 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, (double) 100L);
        double double17 = rotation16.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation18 = rotation16.revert();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation24 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (byte) 100, (double) 10L, (double) (short) 100, (double) 1L, false);
        double double25 = rotation24.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation26 = rotation18.applyInverseTo(rotation24);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation32 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D33 = rotation32.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation39 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D40 = rotation39.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation41 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D33, vector3D40);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation47 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D48 = rotation47.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation54 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D55 = rotation54.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation56 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D48, vector3D55);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation62 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D63 = rotation62.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation69 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D70 = rotation69.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation71 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D63, vector3D70);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation72 = rotation56.applyTo(rotation71);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation73 = rotation41.applyTo(rotation72);
        double[][] doubleArray74 = rotation73.getMatrix();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation76 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray74, (double) '4');
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation82 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(2.7755575615628914E-17d, (-8.717516503499631d), (-0.005755946541407356d), (double) (-1L), false);
        double double83 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation76, rotation82);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation84 = rotation26.applyInverseTo(rotation76);
        double double85 = rotation76.getQ1();
        org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder86 = null;
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray87 = rotation76.getAngles(rotationOrder86);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.geometry.euclidean.threed.CardanEulerSingularityException; message: Euler angles singularity");
        } catch (org.apache.commons.math.geometry.euclidean.threed.CardanEulerSingularityException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-0.0d) + "'", double17 == (-0.0d));
        org.junit.Assert.assertNotNull(rotation18);
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertNotNull(rotation26);
        org.junit.Assert.assertNotNull(vector3D33);
        org.junit.Assert.assertNotNull(vector3D40);
        org.junit.Assert.assertNotNull(vector3D48);
        org.junit.Assert.assertNotNull(vector3D55);
        org.junit.Assert.assertNotNull(vector3D63);
        org.junit.Assert.assertNotNull(vector3D70);
        org.junit.Assert.assertNotNull(rotation72);
        org.junit.Assert.assertNotNull(rotation73);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 3.141592653589793d + "'", double83 == 3.141592653589793d);
        org.junit.Assert.assertNotNull(rotation84);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 0.0d + "'", double85 == 0.0d);
    }

    @Test
    public void test0562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0562");
        org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.geometry.euclidean.threed.Rotation rotation4 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(rotationOrder0, (-108.9963038254143d), (double) (byte) 1, (double) (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0563");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation20.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = rotation27.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation34 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D35 = rotation34.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation36 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D28, vector3D35);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation42 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D43 = rotation42.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation49 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D50 = rotation49.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation51 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D43, vector3D50);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation52 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D13, vector3D21, vector3D35, vector3D50);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation54 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D50, 1.0d);
        org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder55 = null;
        double[] doubleArray56 = rotation54.getAngles(rotationOrder55);
        double double57 = rotation54.getQ1();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D58 = rotation54.getAxis();
        double double59 = rotation54.getQ0();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D35);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(vector3D50);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[2.356194490192345, 0.9999999999999999, -2.356194490192345]");
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.33900504942104487d + "'", double57 == 0.33900504942104487d);
        org.junit.Assert.assertNotNull(vector3D58);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 0.8775825618903728d + "'", double59 == 0.8775825618903728d);
    }

    @Test
    public void test0564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0564");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation16 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, (double) 100L);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation22 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-1.0d), (double) (byte) 10, (double) (byte) 100, (double) 0L, true);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation28 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D29 = rotation28.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D36 = rotation35.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation37 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D29, vector3D36);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D38 = rotation22.applyTo(vector3D29);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation44 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D45 = rotation44.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation51 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D52 = rotation51.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation58 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D59 = rotation58.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation60 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D52, vector3D59);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation62 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D52, (double) 100L);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation63 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D45, vector3D52);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation69 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D70 = rotation69.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation71 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D38, vector3D52, vector3D70);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation73 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D52, (double) 1.0f);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation74 = rotation73.revert();
        double double75 = rotation74.getQ0();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D76 = rotation74.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation78 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D76, (double) (short) 1);
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D29);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D38);
        org.junit.Assert.assertNotNull(vector3D45);
        org.junit.Assert.assertNotNull(vector3D52);
        org.junit.Assert.assertNotNull(vector3D59);
        org.junit.Assert.assertNotNull(vector3D70);
        org.junit.Assert.assertNotNull(rotation74);
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + (-0.8775825618903728d) + "'", double75 == (-0.8775825618903728d));
        org.junit.Assert.assertNotNull(vector3D76);
    }

    @Test
    public void test0565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0565");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-0.33900504942104487d), (-0.1855270382668764d), 3.7105407653375275d, (-0.8156840252218559d), true);
        org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder6 = null;
        double[] doubleArray7 = rotation5.getAngles(rotationOrder6);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation8 = rotation5.revert();
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.126948955373088, 2.6747379111016363, -1.2268657468169737]");
        org.junit.Assert.assertNotNull(rotation8);
    }

    @Test
    public void test0566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0566");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double13 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation5, rotation12);
        double double14 = rotation12.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation20.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double28 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation20, rotation27);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation34 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D35 = rotation34.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation41 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D42 = rotation41.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation43 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D35, vector3D42);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation49 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation50 = rotation43.applyInverseTo(rotation49);
        double double51 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation27, rotation43);
        double double52 = rotation43.getQ3();
        double double53 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation12, rotation43);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation59 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) 100, (double) (byte) -1, (double) (short) 10, 0.9456205751905904d, true);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation60 = rotation43.applyTo(rotation59);
        double double61 = rotation60.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation62 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.geometry.euclidean.threed.Rotation rotation63 = rotation60.applyTo(rotation62);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1.0d + "'", double14 == 1.0d);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertNotNull(vector3D35);
        org.junit.Assert.assertNotNull(vector3D42);
        org.junit.Assert.assertNotNull(rotation50);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 3.141592653589793d + "'", double51 == 3.141592653589793d);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.0d + "'", double52 == 0.0d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 3.141592653589793d + "'", double53 == 3.141592653589793d);
        org.junit.Assert.assertNotNull(rotation60);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 0.20120377604668613d + "'", double61 == 0.20120377604668613d);
    }

    @Test
    public void test0567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0567");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-0.33900504942104487d), (-0.1855270382668764d), 3.7105407653375275d, (-0.8156840252218559d), true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.junit.Assert.assertNotNull(vector3D6);
    }

    @Test
    public void test0568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0568");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-0.1855270382668764d), (double) 10, (double) (short) -1, (double) 100.0f, false);
        double[][] doubleArray6 = rotation5.getMatrix();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.geometry.euclidean.threed.Rotation rotation8 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray6, (-0.5d));
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.geometry.euclidean.threed.NotARotationMatrixException; message: unable to orthogonalize matrix in 10 iterations");
        } catch (org.apache.commons.math.geometry.euclidean.threed.NotARotationMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
    }

    @Test
    public void test0569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0569");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation20.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = rotation27.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation29 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D21, vector3D28);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D36 = rotation35.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation42 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D43 = rotation42.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation44 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D36, vector3D43);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation45 = rotation29.applyTo(rotation44);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation46 = rotation14.applyTo(rotation45);
        double[][] doubleArray47 = rotation46.getMatrix();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation49 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray47, (double) 10);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation55 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D56 = rotation55.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation62 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double63 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation55, rotation62);
        double double64 = rotation62.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation70 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D71 = rotation70.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation77 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double78 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation70, rotation77);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation84 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D85 = rotation84.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation91 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double92 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation84, rotation91);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation93 = rotation77.applyInverseTo(rotation84);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation94 = rotation62.applyTo(rotation84);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D95 = rotation62.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation96 = rotation49.applyTo(rotation62);
        double double97 = rotation96.getQ1();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(rotation45);
        org.junit.Assert.assertNotNull(rotation46);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(vector3D56);
        org.junit.Assert.assertTrue(Double.isNaN(double63));
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 3.141592653589793d + "'", double64 == 3.141592653589793d);
        org.junit.Assert.assertNotNull(vector3D71);
        org.junit.Assert.assertTrue(Double.isNaN(double78));
        org.junit.Assert.assertNotNull(vector3D85);
        org.junit.Assert.assertTrue(Double.isNaN(double92));
        org.junit.Assert.assertNotNull(rotation93);
        org.junit.Assert.assertNotNull(rotation94);
        org.junit.Assert.assertNotNull(vector3D95);
        org.junit.Assert.assertNotNull(rotation96);
        org.junit.Assert.assertTrue("'" + double97 + "' != '" + 10.0d + "'", double97 == 10.0d);
    }

    @Test
    public void test0570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0570");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation16 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, (double) 1L);
        double double17 = rotation16.getQ2();
        org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder18 = null;
        double[] doubleArray19 = rotation16.getAngles(rotationOrder18);
        double double20 = rotation16.getQ3();
        double double21 = rotation16.getQ2();
        org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder22 = null;
        double[] doubleArray23 = rotation16.getAngles(rotationOrder22);
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.33900504942104487d + "'", double17 == 0.33900504942104487d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[2.356194490192345, 0.9999999999999999, -2.356194490192345]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.33900504942104487d + "'", double21 == 0.33900504942104487d);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[2.356194490192345, 0.9999999999999999, -2.356194490192345]");
    }

    @Test
    public void test0571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0571");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation20.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = rotation27.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation29 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D21, vector3D28);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D36 = rotation35.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation42 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D43 = rotation42.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation44 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D36, vector3D43);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation45 = rotation29.applyTo(rotation44);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation46 = rotation14.applyTo(rotation45);
        double double47 = rotation14.getQ3();
        java.lang.Class<?> wildcardClass48 = rotation14.getClass();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(rotation45);
        org.junit.Assert.assertNotNull(rotation46);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d);
        org.junit.Assert.assertNotNull(wildcardClass48);
    }

    @Test
    public void test0572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0572");
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.geometry.euclidean.threed.Rotation rotation2 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D0, (-10.0d));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0573");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation20.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = rotation27.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation34 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D35 = rotation34.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation36 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D28, vector3D35);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation42 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D43 = rotation42.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation49 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D50 = rotation49.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation51 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D43, vector3D50);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation52 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D13, vector3D21, vector3D35, vector3D50);
        double double53 = rotation52.getQ1();
        double double54 = rotation52.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation60 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-0.1855270382668764d), (double) 10, (double) (short) -1, (double) 100.0f, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation61 = rotation60.revert();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation62 = rotation52.applyInverseTo(rotation60);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D63 = rotation62.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation69 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D70 = rotation69.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation76 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D77 = rotation76.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation78 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D70, vector3D77);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation80 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D70, (double) 100L);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D81 = rotation62.applyTo(vector3D70);
        java.lang.Class<?> wildcardClass82 = vector3D81.getClass();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D35);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(vector3D50);
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertNotNull(rotation61);
        org.junit.Assert.assertNotNull(rotation62);
        org.junit.Assert.assertNotNull(vector3D63);
        org.junit.Assert.assertNotNull(vector3D70);
        org.junit.Assert.assertNotNull(vector3D77);
        org.junit.Assert.assertNotNull(vector3D81);
        org.junit.Assert.assertNotNull(wildcardClass82);
    }

    @Test
    public void test0574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0574");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double13 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation5, rotation12);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation19 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D20 = rotation19.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation26 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double27 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation19, rotation26);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation28 = rotation12.applyInverseTo(rotation19);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation34 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation40 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-1.0d), (double) (byte) 10, (double) (byte) 100, (double) 0L, true);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation46 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D47 = rotation46.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation53 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D54 = rotation53.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation55 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D47, vector3D54);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D56 = rotation40.applyTo(vector3D47);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D57 = rotation34.applyTo(vector3D56);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation58 = rotation28.applyTo(rotation34);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation59 = rotation28.revert();
        org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder60 = null;
        double[] doubleArray61 = rotation59.getAngles(rotationOrder60);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D62 = rotation59.getAxis();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertNotNull(vector3D20);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertNotNull(rotation28);
        org.junit.Assert.assertNotNull(vector3D47);
        org.junit.Assert.assertNotNull(vector3D54);
        org.junit.Assert.assertNotNull(vector3D56);
        org.junit.Assert.assertNotNull(vector3D57);
        org.junit.Assert.assertNotNull(rotation58);
        org.junit.Assert.assertNotNull(rotation59);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[0.11470627017096943, 1.2637009275001716, -2.82412897916719]");
        org.junit.Assert.assertNotNull(vector3D62);
    }

    @Test
    public void test0575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0575");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation20.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = rotation27.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation34 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D35 = rotation34.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation36 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D28, vector3D35);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation42 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D43 = rotation42.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation49 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D50 = rotation49.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation51 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D43, vector3D50);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation52 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D13, vector3D21, vector3D35, vector3D50);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation54 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D21, (double) 1);
        double double55 = rotation54.getQ1();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D56 = rotation54.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation62 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D63 = rotation62.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation69 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D70 = rotation69.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation71 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D63, vector3D70);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation77 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D78 = rotation77.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation84 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D85 = rotation84.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation86 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D78, vector3D85);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation87 = rotation71.applyTo(rotation86);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation93 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) 10, 0.0d, (double) (byte) 0, 10.0d, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation94 = rotation71.applyTo(rotation93);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation95 = rotation94.revert();
        double double96 = rotation95.getQ0();
        double double97 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation54, rotation95);
        double[][] doubleArray98 = rotation95.getMatrix();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D35);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(vector3D50);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.33900504942104487d + "'", double55 == 0.33900504942104487d);
        org.junit.Assert.assertNotNull(vector3D56);
        org.junit.Assert.assertNotNull(vector3D63);
        org.junit.Assert.assertNotNull(vector3D70);
        org.junit.Assert.assertNotNull(vector3D78);
        org.junit.Assert.assertNotNull(vector3D85);
        org.junit.Assert.assertNotNull(rotation87);
        org.junit.Assert.assertNotNull(rotation94);
        org.junit.Assert.assertNotNull(rotation95);
        org.junit.Assert.assertTrue("'" + double96 + "' != '" + (-10.0d) + "'", double96 == (-10.0d));
        org.junit.Assert.assertTrue(Double.isNaN(double97));
        org.junit.Assert.assertNotNull(doubleArray98);
    }

    @Test
    public void test0576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0576");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation20.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = rotation27.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation29 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D21, vector3D28);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D36 = rotation35.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation42 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D43 = rotation42.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation44 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D36, vector3D43);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation45 = rotation29.applyTo(rotation44);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation46 = rotation14.applyTo(rotation45);
        double[][] doubleArray47 = rotation46.getMatrix();
        double[][] doubleArray48 = rotation46.getMatrix();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation50 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray48, (double) 10.0f);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation52 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray48, (double) 100);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.geometry.euclidean.threed.Rotation rotation54 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray48, (-0.005755946541407356d));
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.geometry.euclidean.threed.NotARotationMatrixException; message: unable to orthogonalize matrix in 10 iterations");
        } catch (org.apache.commons.math.geometry.euclidean.threed.NotARotationMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(rotation45);
        org.junit.Assert.assertNotNull(rotation46);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(doubleArray48);
    }

    @Test
    public void test0577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0577");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double13 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation5, rotation12);
        double double14 = rotation12.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation20.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double28 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation20, rotation27);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation34 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D35 = rotation34.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation41 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D42 = rotation41.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation43 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D35, vector3D42);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation49 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation50 = rotation43.applyInverseTo(rotation49);
        double double51 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation27, rotation43);
        double double52 = rotation43.getQ3();
        double double53 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation12, rotation43);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation59 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) 100, (double) (byte) -1, (double) (short) 10, 0.9456205751905904d, true);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation60 = rotation43.applyTo(rotation59);
        double double61 = rotation60.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D62 = rotation60.getAxis();
        java.lang.Class<?> wildcardClass63 = rotation60.getClass();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1.0d + "'", double14 == 1.0d);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertNotNull(vector3D35);
        org.junit.Assert.assertNotNull(vector3D42);
        org.junit.Assert.assertNotNull(rotation50);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 3.141592653589793d + "'", double51 == 3.141592653589793d);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.0d + "'", double52 == 0.0d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 3.141592653589793d + "'", double53 == 3.141592653589793d);
        org.junit.Assert.assertNotNull(rotation60);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 0.20120377604668613d + "'", double61 == 0.20120377604668613d);
        org.junit.Assert.assertNotNull(vector3D62);
        org.junit.Assert.assertNotNull(wildcardClass63);
    }

    @Test
    public void test0578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0578");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation20.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = rotation27.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation29 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D21, vector3D28);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D36 = rotation35.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation42 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D43 = rotation42.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation44 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D36, vector3D43);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation45 = rotation29.applyTo(rotation44);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation46 = rotation14.applyTo(rotation45);
        double[][] doubleArray47 = rotation46.getMatrix();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation49 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray47, (double) '4');
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation51 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray47, (double) '4');
        double double52 = rotation51.getQ3();
        double[][] doubleArray53 = rotation51.getMatrix();
        double double54 = rotation51.getQ3();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(rotation45);
        org.junit.Assert.assertNotNull(rotation46);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.0d + "'", double52 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d);
    }

    @Test
    public void test0579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0579");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation20.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = rotation27.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation29 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D21, vector3D28);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation30 = rotation14.applyTo(rotation29);
        double double31 = rotation29.getAngle();
        double double32 = rotation29.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation38 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D39 = rotation38.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation45 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double46 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation38, rotation45);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation52 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D53 = rotation52.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation59 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double60 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation52, rotation59);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation61 = rotation45.applyInverseTo(rotation52);
        double double62 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation29, rotation45);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation63 = rotation29.revert();
        double double64 = rotation63.getQ3();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(rotation30);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
        org.junit.Assert.assertNotNull(vector3D39);
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertNotNull(vector3D53);
        org.junit.Assert.assertTrue(Double.isNaN(double60));
        org.junit.Assert.assertNotNull(rotation61);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 3.141592653589793d + "'", double62 == 3.141592653589793d);
        org.junit.Assert.assertNotNull(rotation63);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 0.0d + "'", double64 == 0.0d);
    }

    @Test
    public void test0580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0580");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) 10, 0.0d, (double) (byte) 0, 10.0d, false);
        double double6 = rotation5.getQ1();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation19 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D20 = rotation19.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation21 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D13, vector3D20);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = rotation27.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation34 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D35 = rotation34.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation41 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D42 = rotation41.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation43 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D35, vector3D42);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation49 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D50 = rotation49.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation56 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D57 = rotation56.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation58 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D50, vector3D57);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation59 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D20, vector3D28, vector3D42, vector3D57);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D60 = rotation5.applyTo(vector3D42);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation62 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D42, 0.7881701093115122d);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation68 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D69 = rotation68.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation75 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D76 = rotation75.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation77 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D69, vector3D76);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation79 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D69, (double) 100L);
        double double80 = rotation79.getQ1();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation81 = rotation62.applyTo(rotation79);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D82 = rotation62.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation84 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D82, Double.NaN);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation85 = rotation84.revert();
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D20);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D35);
        org.junit.Assert.assertNotNull(vector3D42);
        org.junit.Assert.assertNotNull(vector3D50);
        org.junit.Assert.assertNotNull(vector3D57);
        org.junit.Assert.assertNotNull(vector3D60);
        org.junit.Assert.assertNotNull(vector3D69);
        org.junit.Assert.assertNotNull(vector3D76);
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + (-0.1855270382668764d) + "'", double80 == (-0.1855270382668764d));
        org.junit.Assert.assertNotNull(rotation81);
        org.junit.Assert.assertNotNull(vector3D82);
        org.junit.Assert.assertNotNull(rotation85);
    }

    @Test
    public void test0581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0581");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-0.33900504942104487d), (double) 100.0f, (double) 10L, 3.1216925665368036d, true);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation11 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D12 = rotation11.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation18 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D19 = rotation18.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D12, vector3D19);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation26 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D27 = rotation26.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation33 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double34 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation26, rotation33);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation40 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D41 = rotation40.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation47 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double48 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation40, rotation47);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation49 = rotation33.applyInverseTo(rotation40);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D50 = rotation49.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation51 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D12, vector3D50);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation53 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D12, 3.082566122054968d);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D54 = rotation5.applyInverseTo(vector3D12);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation56 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D12, 3.1390038567388605d);
        double double57 = rotation56.getQ2();
        org.junit.Assert.assertNotNull(vector3D12);
        org.junit.Assert.assertNotNull(vector3D19);
        org.junit.Assert.assertNotNull(vector3D27);
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertNotNull(vector3D41);
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertNotNull(rotation49);
        org.junit.Assert.assertNotNull(vector3D50);
        org.junit.Assert.assertNotNull(vector3D54);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.7071061888194913d + "'", double57 == 0.7071061888194913d);
    }

    @Test
    public void test0582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0582");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) 0, (double) ' ', (double) (byte) 100, 17.66239947251099d, true);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation11 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D12 = rotation11.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation18 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D19 = rotation18.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D12, vector3D19);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation26 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D27 = rotation26.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation33 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D34 = rotation33.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D27, vector3D34);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation41 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D42 = rotation41.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation48 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D49 = rotation48.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation50 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D42, vector3D49);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation51 = rotation35.applyTo(rotation50);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation52 = rotation20.applyTo(rotation51);
        double[][] doubleArray53 = rotation52.getMatrix();
        double double54 = rotation52.getQ1();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D55 = rotation52.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D56 = rotation5.applyInverseTo(vector3D55);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation62 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (byte) 100, (double) 10L, (double) (short) 100, (double) 1L, false);
        double double63 = rotation62.getQ2();
        double double64 = rotation62.getQ2();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation65 = rotation5.applyInverseTo(rotation62);
        double double66 = rotation65.getQ1();
        org.junit.Assert.assertNotNull(vector3D12);
        org.junit.Assert.assertNotNull(vector3D19);
        org.junit.Assert.assertNotNull(vector3D27);
        org.junit.Assert.assertNotNull(vector3D34);
        org.junit.Assert.assertNotNull(vector3D42);
        org.junit.Assert.assertNotNull(vector3D49);
        org.junit.Assert.assertNotNull(rotation51);
        org.junit.Assert.assertNotNull(rotation52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d);
        org.junit.Assert.assertNotNull(vector3D55);
        org.junit.Assert.assertNotNull(vector3D56);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 100.0d + "'", double63 == 100.0d);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 100.0d + "'", double64 == 100.0d);
        org.junit.Assert.assertNotNull(rotation65);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 45.70506809828123d + "'", double66 == 45.70506809828123d);
    }

    @Test
    public void test0583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0583");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', 3.141592653589793d, (double) 0L, 0.047917108096983706d, false);
    }

    @Test
    public void test0584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0584");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double13 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation5, rotation12);
        double double14 = rotation12.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation20.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = rotation27.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation29 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D21, vector3D28);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D36 = rotation35.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation42 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D43 = rotation42.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation44 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D36, vector3D43);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation45 = rotation29.applyTo(rotation44);
        double double46 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation12, rotation45);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation52 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D53 = rotation52.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation59 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double60 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation52, rotation59);
        double double61 = rotation59.getQ1();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation67 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D68 = rotation67.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation74 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D75 = rotation74.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation76 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D68, vector3D75);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation78 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D68, (double) 100L);
        double double79 = rotation78.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation80 = rotation78.revert();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation86 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (byte) 100, (double) 10L, (double) (short) 100, (double) 1L, false);
        double double87 = rotation86.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation88 = rotation80.applyInverseTo(rotation86);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D89 = rotation86.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D90 = rotation59.applyInverseTo(vector3D89);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D91 = rotation12.applyTo(vector3D89);
        java.lang.Class<?> wildcardClass92 = vector3D91.getClass();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 3.141592653589793d + "'", double14 == 3.141592653589793d);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(rotation45);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 3.141592653589793d + "'", double46 == 3.141592653589793d);
        org.junit.Assert.assertNotNull(vector3D53);
        org.junit.Assert.assertTrue(Double.isNaN(double60));
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 10.0d + "'", double61 == 10.0d);
        org.junit.Assert.assertNotNull(vector3D68);
        org.junit.Assert.assertNotNull(vector3D75);
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + (-0.0d) + "'", double79 == (-0.0d));
        org.junit.Assert.assertNotNull(rotation80);
        org.junit.Assert.assertTrue(Double.isNaN(double87));
        org.junit.Assert.assertNotNull(rotation88);
        org.junit.Assert.assertNotNull(vector3D89);
        org.junit.Assert.assertNotNull(vector3D90);
        org.junit.Assert.assertNotNull(vector3D91);
        org.junit.Assert.assertNotNull(wildcardClass92);
    }

    @Test
    public void test0585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0585");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (-1L), 0.0d, (-0.0d), 17.66239947251099d, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation6 = rotation5.revert();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation19 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double20 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation12, rotation19);
        double double21 = rotation19.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = rotation27.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation34 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double35 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation27, rotation34);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation41 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D42 = rotation41.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation48 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double49 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation41, rotation48);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation50 = rotation34.applyInverseTo(rotation41);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation51 = rotation19.applyTo(rotation41);
        org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder52 = null;
        double[] doubleArray53 = rotation51.getAngles(rotationOrder52);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation59 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D60 = rotation59.getAxis();
        double double61 = rotation59.getQ0();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation62 = rotation51.applyInverseTo(rotation59);
        double double63 = rotation62.getQ0();
        double double64 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation5, rotation62);
        org.junit.Assert.assertNotNull(rotation6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 3.141592653589793d + "'", double21 == 3.141592653589793d);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertNotNull(vector3D42);
        org.junit.Assert.assertTrue(Double.isNaN(double49));
        org.junit.Assert.assertNotNull(rotation50);
        org.junit.Assert.assertNotNull(rotation51);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[-0.31746367442260337, 1.2637009275001716, 3.026886383418824]");
        org.junit.Assert.assertNotNull(vector3D60);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 0.9996303825414301d + "'", double61 == 0.9996303825414301d);
        org.junit.Assert.assertNotNull(rotation62);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 2.7755575615628914E-17d + "'", double63 == 2.7755575615628914E-17d);
        org.junit.Assert.assertTrue(Double.isNaN(double64));
    }

    @Test
    public void test0586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0586");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation19 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D20 = rotation19.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation21 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D13, vector3D20);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation23 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D13, (double) 100L);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation24 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation30 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D31 = rotation30.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation37 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D38 = rotation37.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation39 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D31, vector3D38);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation41 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D31, (double) 100L);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation47 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-1.0d), (double) (byte) 10, (double) (byte) 100, (double) 0L, true);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation53 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D54 = rotation53.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation60 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D61 = rotation60.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation62 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D54, vector3D61);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D63 = rotation47.applyTo(vector3D54);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation69 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D70 = rotation69.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation76 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D77 = rotation76.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation83 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D84 = rotation83.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation85 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D77, vector3D84);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation87 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D77, (double) 100L);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation88 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D70, vector3D77);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation94 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D95 = rotation94.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation96 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D31, vector3D63, vector3D77, vector3D95);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D97 = rotation24.applyTo(vector3D63);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation99 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D97, 0.9950846276202212d);
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D20);
        org.junit.Assert.assertNotNull(vector3D31);
        org.junit.Assert.assertNotNull(vector3D38);
        org.junit.Assert.assertNotNull(vector3D54);
        org.junit.Assert.assertNotNull(vector3D61);
        org.junit.Assert.assertNotNull(vector3D63);
        org.junit.Assert.assertNotNull(vector3D70);
        org.junit.Assert.assertNotNull(vector3D77);
        org.junit.Assert.assertNotNull(vector3D84);
        org.junit.Assert.assertNotNull(vector3D95);
        org.junit.Assert.assertNotNull(vector3D97);
    }

    @Test
    public void test0587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0587");
        org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.geometry.euclidean.threed.Rotation rotation4 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(rotationOrder0, (-0.06415703545444096d), 1.7391742109522712d, 0.05506338499281072d);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0588");
        org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.geometry.euclidean.threed.Rotation rotation4 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(rotationOrder0, 0.7071061888194913d, (double) 1L, 0.31538323081891095d);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0589");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) 10, 0.0d, (double) (byte) 0, 10.0d, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation11 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (byte) 100, (double) 10L, (double) (short) 100, (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation17 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D18 = rotation17.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation24 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D25 = rotation24.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation26 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D18, vector3D25);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation28 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D18, (double) 100L);
        double double29 = rotation28.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation30 = rotation11.applyInverseTo(rotation28);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation31 = rotation5.applyInverseTo(rotation28);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation32 = rotation31.revert();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D33 = rotation32.getAxis();
        double double34 = rotation32.getQ1();
        double[][] doubleArray35 = rotation32.getMatrix();
        double double36 = rotation32.getAngle();
        org.junit.Assert.assertNotNull(vector3D18);
        org.junit.Assert.assertNotNull(vector3D25);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + (-0.0d) + "'", double29 == (-0.0d));
        org.junit.Assert.assertNotNull(rotation30);
        org.junit.Assert.assertNotNull(rotation31);
        org.junit.Assert.assertNotNull(rotation32);
        org.junit.Assert.assertNotNull(vector3D33);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertTrue(Double.isNaN(double36));
    }

    @Test
    public void test0590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0590");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation16 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, (double) 100L);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation22 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-1.0d), (double) (byte) 10, (double) (byte) 100, (double) 0L, true);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation28 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D29 = rotation28.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D36 = rotation35.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation37 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D29, vector3D36);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D38 = rotation22.applyTo(vector3D29);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation44 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D45 = rotation44.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation51 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D52 = rotation51.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation58 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D59 = rotation58.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation60 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D52, vector3D59);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation62 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D52, (double) 100L);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation63 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D45, vector3D52);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation69 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D70 = rotation69.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation71 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D38, vector3D52, vector3D70);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation73 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, (double) (short) -1);
        double double74 = rotation73.getQ1();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D75 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D76 = rotation73.applyTo(vector3D75);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D29);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D38);
        org.junit.Assert.assertNotNull(vector3D45);
        org.junit.Assert.assertNotNull(vector3D52);
        org.junit.Assert.assertNotNull(vector3D59);
        org.junit.Assert.assertNotNull(vector3D70);
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + (-0.33900504942104487d) + "'", double74 == (-0.33900504942104487d));
    }

    @Test
    public void test0591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0591");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double13 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation5, rotation12);
        double double14 = rotation12.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation20.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double28 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation20, rotation27);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation34 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D35 = rotation34.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation41 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D42 = rotation41.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation43 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D35, vector3D42);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation49 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation50 = rotation43.applyInverseTo(rotation49);
        double double51 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation27, rotation43);
        double double52 = rotation43.getQ3();
        double double53 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation12, rotation43);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation59 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) 100, (double) (byte) -1, (double) (short) 10, 0.9456205751905904d, true);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation60 = rotation43.applyTo(rotation59);
        double double61 = rotation60.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D62 = rotation60.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D63 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D64 = rotation60.applyTo(vector3D63);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1.0d + "'", double14 == 1.0d);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertNotNull(vector3D35);
        org.junit.Assert.assertNotNull(vector3D42);
        org.junit.Assert.assertNotNull(rotation50);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 3.141592653589793d + "'", double51 == 3.141592653589793d);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.0d + "'", double52 == 0.0d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 3.141592653589793d + "'", double53 == 3.141592653589793d);
        org.junit.Assert.assertNotNull(rotation60);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 0.20120377604668613d + "'", double61 == 0.20120377604668613d);
        org.junit.Assert.assertNotNull(vector3D62);
    }

    @Test
    public void test0592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0592");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation19 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D20 = rotation19.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation21 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D13, vector3D20);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation23 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D13, (double) 100L);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation29 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-1.0d), (double) (byte) 10, (double) (byte) 100, (double) 0L, true);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D36 = rotation35.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation42 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D43 = rotation42.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation44 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D36, vector3D43);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D45 = rotation29.applyTo(vector3D36);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation51 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D52 = rotation51.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation58 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D59 = rotation58.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation65 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D66 = rotation65.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation67 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D59, vector3D66);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation69 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D59, (double) 100L);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation70 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D52, vector3D59);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation76 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D77 = rotation76.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation78 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D13, vector3D45, vector3D59, vector3D77);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation80 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D59, (double) 1.0f);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D81 = rotation5.applyInverseTo(vector3D59);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation83 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D81, 10.0d);
        double[][] doubleArray84 = rotation83.getMatrix();
        double double85 = rotation83.getAngle();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D20);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(vector3D45);
        org.junit.Assert.assertNotNull(vector3D52);
        org.junit.Assert.assertNotNull(vector3D59);
        org.junit.Assert.assertNotNull(vector3D66);
        org.junit.Assert.assertNotNull(vector3D77);
        org.junit.Assert.assertNotNull(vector3D81);
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 2.566370614359173d + "'", double85 == 2.566370614359173d);
    }

    @Test
    public void test0593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0593");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.3388903615770647d, 100.0d, 1.0d, (double) (-1.0f), false);
    }

    @Test
    public void test0594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0594");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (short) 10, (double) 'a', 0.9949438965141721d, 0.4690350851266164d, true);
    }

    @Test
    public void test0595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0595");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) 10, 0.0d, (double) (byte) 0, 10.0d, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation11 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (byte) 100, (double) 10L, (double) (short) 100, (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation17 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D18 = rotation17.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation24 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D25 = rotation24.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation26 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D18, vector3D25);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation28 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D18, (double) 100L);
        double double29 = rotation28.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation30 = rotation11.applyInverseTo(rotation28);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation31 = rotation5.applyInverseTo(rotation28);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation32 = rotation31.revert();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D33 = rotation32.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation39 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D40 = rotation39.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation46 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double47 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation39, rotation46);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation53 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D54 = rotation53.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation60 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D61 = rotation60.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation62 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D54, vector3D61);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation68 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation69 = rotation62.applyInverseTo(rotation68);
        double double70 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation46, rotation62);
        double double71 = rotation62.getQ3();
        double double72 = rotation62.getQ0();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation73 = rotation32.applyInverseTo(rotation62);
        java.lang.Class<?> wildcardClass74 = rotation73.getClass();
        org.junit.Assert.assertNotNull(vector3D18);
        org.junit.Assert.assertNotNull(vector3D25);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + (-0.0d) + "'", double29 == (-0.0d));
        org.junit.Assert.assertNotNull(rotation30);
        org.junit.Assert.assertNotNull(rotation31);
        org.junit.Assert.assertNotNull(rotation32);
        org.junit.Assert.assertNotNull(vector3D33);
        org.junit.Assert.assertNotNull(vector3D40);
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertNotNull(vector3D54);
        org.junit.Assert.assertNotNull(vector3D61);
        org.junit.Assert.assertNotNull(rotation69);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 3.141592653589793d + "'", double70 == 3.141592653589793d);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 0.0d + "'", double71 == 0.0d);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 1.0d + "'", double72 == 1.0d);
        org.junit.Assert.assertNotNull(rotation73);
        org.junit.Assert.assertNotNull(wildcardClass74);
    }

    @Test
    public void test0596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0596");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double13 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation5, rotation12);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation19 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D20 = rotation19.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation26 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D27 = rotation26.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation28 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D20, vector3D27);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation34 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = rotation28.applyInverseTo(rotation34);
        double double36 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation12, rotation28);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D37 = rotation12.getAxis();
        double[][] doubleArray38 = rotation12.getMatrix();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation44 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-0.0d), (double) (short) 1, 0.0d, 0.9996303825414301d, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation45 = rotation12.applyTo(rotation44);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation46 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.geometry.euclidean.threed.Rotation rotation47 = rotation45.applyTo(rotation46);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertNotNull(vector3D20);
        org.junit.Assert.assertNotNull(vector3D27);
        org.junit.Assert.assertNotNull(rotation35);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 3.141592653589793d + "'", double36 == 3.141592653589793d);
        org.junit.Assert.assertNotNull(vector3D37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(rotation45);
    }

    @Test
    public void test0597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0597");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-1.0d), (double) (byte) 10, (double) (byte) 100, (double) 0L, true);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation11 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D12 = rotation11.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation18 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D19 = rotation18.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D12, vector3D19);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation5.applyTo(vector3D12);
        double double22 = rotation5.getQ1();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation28 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D29 = rotation28.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D36 = rotation35.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation37 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D29, vector3D36);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation43 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D44 = rotation43.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation50 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D51 = rotation50.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation57 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D58 = rotation57.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation59 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D51, vector3D58);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation65 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D66 = rotation65.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation72 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D73 = rotation72.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation74 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D66, vector3D73);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation75 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D36, vector3D44, vector3D58, vector3D73);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation77 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D73, 1.0d);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D78 = rotation5.applyInverseTo(vector3D73);
        org.junit.Assert.assertNotNull(vector3D12);
        org.junit.Assert.assertNotNull(vector3D19);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.09949879346007118d + "'", double22 == 0.09949879346007118d);
        org.junit.Assert.assertNotNull(vector3D29);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D44);
        org.junit.Assert.assertNotNull(vector3D51);
        org.junit.Assert.assertNotNull(vector3D58);
        org.junit.Assert.assertNotNull(vector3D66);
        org.junit.Assert.assertNotNull(vector3D73);
        org.junit.Assert.assertNotNull(vector3D78);
    }

    @Test
    public void test0598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0598");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation20.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = rotation27.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation29 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D21, vector3D28);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation30 = rotation14.applyTo(rotation29);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation36 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) 10, 0.0d, (double) (byte) 0, 10.0d, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation37 = rotation14.applyTo(rotation36);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation38 = rotation37.revert();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation44 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D45 = rotation44.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D46 = rotation38.applyTo(vector3D45);
        double double47 = rotation38.getQ0();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(rotation30);
        org.junit.Assert.assertNotNull(rotation37);
        org.junit.Assert.assertNotNull(rotation38);
        org.junit.Assert.assertNotNull(vector3D45);
        org.junit.Assert.assertNotNull(vector3D46);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + (-10.0d) + "'", double47 == (-10.0d));
    }

    @Test
    public void test0599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0599");
        org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.geometry.euclidean.threed.Rotation rotation4 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(rotationOrder0, 3.141592653589793d, (double) (short) 10, 0.047917108096983706d);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0600");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) 10, 0.0d, (double) (byte) 0, 10.0d, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation11 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (byte) 100, (double) 10L, (double) (short) 100, (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation17 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D18 = rotation17.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation24 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D25 = rotation24.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation26 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D18, vector3D25);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation28 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D18, (double) 100L);
        double double29 = rotation28.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation30 = rotation11.applyInverseTo(rotation28);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation31 = rotation5.applyInverseTo(rotation28);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation32 = rotation31.revert();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D33 = rotation32.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation39 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D40 = rotation39.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation46 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double47 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation39, rotation46);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation53 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D54 = rotation53.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation60 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D61 = rotation60.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation62 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D54, vector3D61);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation68 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation69 = rotation62.applyInverseTo(rotation68);
        double double70 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation46, rotation62);
        double double71 = rotation62.getQ3();
        double double72 = rotation62.getQ0();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation73 = rotation32.applyInverseTo(rotation62);
        double double74 = rotation62.getQ0();
        double double75 = rotation62.getQ1();
        double double76 = rotation62.getAngle();
        org.junit.Assert.assertNotNull(vector3D18);
        org.junit.Assert.assertNotNull(vector3D25);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + (-0.0d) + "'", double29 == (-0.0d));
        org.junit.Assert.assertNotNull(rotation30);
        org.junit.Assert.assertNotNull(rotation31);
        org.junit.Assert.assertNotNull(rotation32);
        org.junit.Assert.assertNotNull(vector3D33);
        org.junit.Assert.assertNotNull(vector3D40);
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertNotNull(vector3D54);
        org.junit.Assert.assertNotNull(vector3D61);
        org.junit.Assert.assertNotNull(rotation69);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 3.141592653589793d + "'", double70 == 3.141592653589793d);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 0.0d + "'", double71 == 0.0d);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 1.0d + "'", double72 == 1.0d);
        org.junit.Assert.assertNotNull(rotation73);
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 1.0d + "'", double74 == 1.0d);
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 0.0d + "'", double75 == 0.0d);
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 0.0d + "'", double76 == 0.0d);
    }

    @Test
    public void test0601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0601");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation20.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = rotation27.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation34 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D35 = rotation34.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation36 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D28, vector3D35);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation42 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D43 = rotation42.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation49 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D50 = rotation49.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation51 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D43, vector3D50);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation52 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D13, vector3D21, vector3D35, vector3D50);
        double double53 = rotation52.getQ1();
        double double54 = rotation52.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation60 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-0.1855270382668764d), (double) 10, (double) (short) -1, (double) 100.0f, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation61 = rotation60.revert();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation62 = rotation52.applyInverseTo(rotation60);
        double double63 = rotation52.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation69 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-1.0d), (double) (byte) 10, (double) (byte) 100, (double) 0L, true);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation75 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D76 = rotation75.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation82 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D83 = rotation82.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation84 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D76, vector3D83);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D85 = rotation69.applyTo(vector3D76);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D86 = rotation69.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D87 = rotation52.applyInverseTo(vector3D86);
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D35);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(vector3D50);
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertNotNull(rotation61);
        org.junit.Assert.assertNotNull(rotation62);
        org.junit.Assert.assertTrue(Double.isNaN(double63));
        org.junit.Assert.assertNotNull(vector3D76);
        org.junit.Assert.assertNotNull(vector3D83);
        org.junit.Assert.assertNotNull(vector3D85);
        org.junit.Assert.assertNotNull(vector3D86);
        org.junit.Assert.assertNotNull(vector3D87);
    }

    @Test
    public void test0602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0602");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double13 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation5, rotation12);
        double double14 = rotation12.getAngle();
        double double15 = rotation12.getAngle();
        double double16 = rotation12.getQ0();
        double double17 = rotation12.getQ0();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation23 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) 0, (double) ' ', (double) (byte) 100, 17.66239947251099d, true);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation24 = rotation12.applyInverseTo(rotation23);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D25 = rotation24.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D25, 3.141592653589793d);
        java.lang.Class<?> wildcardClass28 = vector3D25.getClass();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 3.141592653589793d + "'", double14 == 3.141592653589793d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 3.141592653589793d + "'", double15 == 3.141592653589793d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
        org.junit.Assert.assertNotNull(rotation24);
        org.junit.Assert.assertNotNull(vector3D25);
        org.junit.Assert.assertNotNull(wildcardClass28);
    }

    @Test
    public void test0603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0603");
        org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.geometry.euclidean.threed.Rotation rotation4 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(rotationOrder0, 0.0d, 0.8890808091523411d, 0.9949438965141721d);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0604");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation20.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = rotation27.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation29 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D21, vector3D28);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D36 = rotation35.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation42 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D43 = rotation42.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation44 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D36, vector3D43);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation45 = rotation29.applyTo(rotation44);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation46 = rotation14.applyTo(rotation45);
        double[][] doubleArray47 = rotation46.getMatrix();
        double double48 = rotation46.getQ1();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D49 = rotation46.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation51 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D49, 10.0d);
        java.lang.Class<?> wildcardClass52 = rotation51.getClass();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(rotation45);
        org.junit.Assert.assertNotNull(rotation46);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d);
        org.junit.Assert.assertNotNull(vector3D49);
        org.junit.Assert.assertNotNull(wildcardClass52);
    }

    @Test
    public void test0605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0605");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(28.016837073341897d, (double) '4', (double) 10L, 0.0d, true);
        double[][] doubleArray6 = rotation5.getMatrix();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.geometry.euclidean.threed.Rotation rotation8 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray6, (-0.00604107602175904d));
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.geometry.euclidean.threed.NotARotationMatrixException; message: unable to orthogonalize matrix in 10 iterations");
        } catch (org.apache.commons.math.geometry.euclidean.threed.NotARotationMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
    }

    @Test
    public void test0606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0606");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-0.1855270382668764d), (double) 10, (double) (short) -1, (double) 100.0f, false);
        double[][] doubleArray6 = rotation5.getMatrix();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation19 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D20 = rotation19.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation21 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D13, vector3D20);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation23 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D13, (double) 100L);
        double double24 = rotation23.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation25 = rotation23.revert();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation31 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (byte) 100, (double) 10L, (double) (short) 100, (double) 1L, false);
        double double32 = rotation31.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation33 = rotation25.applyInverseTo(rotation31);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation34 = rotation5.applyInverseTo(rotation33);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation40 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D41 = rotation40.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation47 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D48 = rotation47.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation49 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D41, vector3D48);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation55 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D56 = rotation55.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation62 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D63 = rotation62.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation64 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D56, vector3D63);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation65 = rotation49.applyTo(rotation64);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation71 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) 10, 0.0d, (double) (byte) 0, 10.0d, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation72 = rotation49.applyTo(rotation71);
        double double73 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation34, rotation49);
        double[][] doubleArray74 = rotation34.getMatrix();
        double double75 = rotation34.getQ0();
        double double76 = rotation34.getAngle();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D20);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + (-0.0d) + "'", double24 == (-0.0d));
        org.junit.Assert.assertNotNull(rotation25);
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertNotNull(rotation33);
        org.junit.Assert.assertNotNull(rotation34);
        org.junit.Assert.assertNotNull(vector3D41);
        org.junit.Assert.assertNotNull(vector3D48);
        org.junit.Assert.assertNotNull(vector3D56);
        org.junit.Assert.assertNotNull(vector3D63);
        org.junit.Assert.assertNotNull(rotation65);
        org.junit.Assert.assertNotNull(rotation72);
        org.junit.Assert.assertTrue(Double.isNaN(double73));
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + (-1579.617450290328d) + "'", double75 == (-1579.617450290328d));
        org.junit.Assert.assertTrue(Double.isNaN(double76));
    }

    @Test
    public void test0607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0607");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) 10, 0.0d, (double) (byte) 0, 10.0d, false);
        double double6 = rotation5.getQ1();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation19 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D20 = rotation19.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation21 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D13, vector3D20);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = rotation27.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation34 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D35 = rotation34.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation41 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D42 = rotation41.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation43 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D35, vector3D42);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation49 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D50 = rotation49.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation56 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D57 = rotation56.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation58 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D50, vector3D57);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation59 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D20, vector3D28, vector3D42, vector3D57);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D60 = rotation5.applyTo(vector3D42);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation61 = rotation5.revert();
        double double62 = rotation5.getQ2();
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D20);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D35);
        org.junit.Assert.assertNotNull(vector3D42);
        org.junit.Assert.assertNotNull(vector3D50);
        org.junit.Assert.assertNotNull(vector3D57);
        org.junit.Assert.assertNotNull(vector3D60);
        org.junit.Assert.assertNotNull(rotation61);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 0.0d + "'", double62 == 0.0d);
    }

    @Test
    public void test0608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0608");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double13 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation5, rotation12);
        double double14 = rotation12.getAngle();
        double double15 = rotation12.getAngle();
        double double16 = rotation12.getQ0();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation22 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D23 = rotation22.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation29 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D30 = rotation29.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation31 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D23, vector3D30);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation37 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation38 = rotation31.applyInverseTo(rotation37);
        double double39 = rotation31.getQ2();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation45 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D46 = rotation45.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation52 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D53 = rotation52.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation54 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D46, vector3D53);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation60 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D61 = rotation60.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation67 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D68 = rotation67.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation69 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D61, vector3D68);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation70 = rotation54.applyTo(rotation69);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation76 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) 10, 0.0d, (double) (byte) 0, 10.0d, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation77 = rotation54.applyTo(rotation76);
        double double78 = rotation76.getAngle();
        double double79 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation31, rotation76);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation80 = rotation12.applyInverseTo(rotation31);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation86 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(3.1216925665368036d, (-8.717516503499631d), (-0.0d), 0.9949879346007117d, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation87 = rotation80.applyInverseTo(rotation86);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation88 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.geometry.euclidean.threed.Rotation rotation89 = rotation86.applyTo(rotation88);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 3.141592653589793d + "'", double14 == 3.141592653589793d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 3.141592653589793d + "'", double15 == 3.141592653589793d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertNotNull(vector3D23);
        org.junit.Assert.assertNotNull(vector3D30);
        org.junit.Assert.assertNotNull(rotation38);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.0d + "'", double39 == 0.0d);
        org.junit.Assert.assertNotNull(vector3D46);
        org.junit.Assert.assertNotNull(vector3D53);
        org.junit.Assert.assertNotNull(vector3D61);
        org.junit.Assert.assertNotNull(vector3D68);
        org.junit.Assert.assertNotNull(rotation70);
        org.junit.Assert.assertNotNull(rotation77);
        org.junit.Assert.assertTrue(Double.isNaN(double78));
        org.junit.Assert.assertTrue(Double.isNaN(double79));
        org.junit.Assert.assertNotNull(rotation80);
        org.junit.Assert.assertNotNull(rotation87);
    }

    @Test
    public void test0609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0609");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation20.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = rotation27.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation34 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D35 = rotation34.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation36 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D28, vector3D35);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation42 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D43 = rotation42.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation49 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D50 = rotation49.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation51 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D43, vector3D50);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation52 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D13, vector3D21, vector3D35, vector3D50);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation54 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D21, (double) 1);
        double[][] doubleArray55 = rotation54.getMatrix();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation57 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray55, 0.9996303825414301d);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation59 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray55, 0.9456205751905904d);
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D35);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(vector3D50);
        org.junit.Assert.assertNotNull(doubleArray55);
    }

    @Test
    public void test0610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0610");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation20.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = rotation27.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation29 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D21, vector3D28);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D36 = rotation35.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation42 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D43 = rotation42.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation44 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D36, vector3D43);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation45 = rotation29.applyTo(rotation44);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation46 = rotation14.applyTo(rotation45);
        double double47 = rotation46.getAngle();
        double double48 = rotation46.getQ3();
        java.lang.Class<?> wildcardClass49 = rotation46.getClass();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(rotation45);
        org.junit.Assert.assertNotNull(rotation46);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d);
        org.junit.Assert.assertNotNull(wildcardClass49);
    }

    @Test
    public void test0611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0611");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation20.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = rotation27.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation29 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D21, vector3D28);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D36 = rotation35.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation42 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D43 = rotation42.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation44 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D36, vector3D43);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation45 = rotation29.applyTo(rotation44);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation46 = rotation14.applyTo(rotation45);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation52 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D53 = rotation52.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D54 = rotation46.applyTo(vector3D53);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation60 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-1.0d), (double) (byte) 10, (double) (byte) 100, (double) 0L, true);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation66 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D67 = rotation66.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D68 = rotation60.applyInverseTo(vector3D67);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation74 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D75 = rotation74.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation81 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D82 = rotation81.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation83 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D75, vector3D82);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation85 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D75, (double) 1L);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation86 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D68, vector3D75);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation87 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D54, vector3D75);
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(rotation45);
        org.junit.Assert.assertNotNull(rotation46);
        org.junit.Assert.assertNotNull(vector3D53);
        org.junit.Assert.assertNotNull(vector3D54);
        org.junit.Assert.assertNotNull(vector3D67);
        org.junit.Assert.assertNotNull(vector3D68);
        org.junit.Assert.assertNotNull(vector3D75);
        org.junit.Assert.assertNotNull(vector3D82);
    }

    @Test
    public void test0612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0612");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation16 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, (double) 100L);
        double double17 = rotation16.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation18 = rotation16.revert();
        org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder19 = null;
        double[] doubleArray20 = rotation16.getAngles(rotationOrder19);
        double double21 = rotation16.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) 10, 0.0d, (double) (byte) 0, 10.0d, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation33 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (byte) 100, (double) 10L, (double) (short) 100, (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation39 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D40 = rotation39.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation46 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D47 = rotation46.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation48 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D40, vector3D47);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation50 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D40, (double) 100L);
        double double51 = rotation50.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation52 = rotation33.applyInverseTo(rotation50);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation53 = rotation27.applyInverseTo(rotation50);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation54 = rotation53.revert();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation55 = rotation54.revert();
        double double56 = rotation54.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D57 = rotation54.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation58 = rotation16.applyTo(rotation54);
        double double59 = rotation54.getQ3();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-0.0d) + "'", double17 == (-0.0d));
        org.junit.Assert.assertNotNull(rotation18);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-0.7853981633974483, 0.530964914873383, 0.7853981633974483]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.5309649148733836d + "'", double21 == 0.5309649148733836d);
        org.junit.Assert.assertNotNull(vector3D40);
        org.junit.Assert.assertNotNull(vector3D47);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + (-0.0d) + "'", double51 == (-0.0d));
        org.junit.Assert.assertNotNull(rotation52);
        org.junit.Assert.assertNotNull(rotation53);
        org.junit.Assert.assertNotNull(rotation54);
        org.junit.Assert.assertNotNull(rotation55);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 9.649660284921133d + "'", double56 == 9.649660284921133d);
        org.junit.Assert.assertNotNull(vector3D57);
        org.junit.Assert.assertNotNull(rotation58);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 9.649660284921133d + "'", double59 == 9.649660284921133d);
    }

    @Test
    public void test0613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0613");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation16 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, (double) 100L);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation22 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-1.0d), (double) (byte) 10, (double) (byte) 100, (double) 0L, true);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation28 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D29 = rotation28.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D36 = rotation35.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation37 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D29, vector3D36);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D38 = rotation22.applyTo(vector3D29);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation44 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D45 = rotation44.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation51 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D52 = rotation51.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation58 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D59 = rotation58.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation60 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D52, vector3D59);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation62 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D52, (double) 100L);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation63 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D45, vector3D52);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation69 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D70 = rotation69.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation71 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D38, vector3D52, vector3D70);
        java.lang.Class<?> wildcardClass72 = vector3D70.getClass();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D29);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D38);
        org.junit.Assert.assertNotNull(vector3D45);
        org.junit.Assert.assertNotNull(vector3D52);
        org.junit.Assert.assertNotNull(vector3D59);
        org.junit.Assert.assertNotNull(vector3D70);
        org.junit.Assert.assertNotNull(wildcardClass72);
    }

    @Test
    public void test0614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0614");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) 10, 0.0d, (double) (byte) 0, 10.0d, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation11 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (byte) 100, (double) 10L, (double) (short) 100, (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation17 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D18 = rotation17.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation24 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D25 = rotation24.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation26 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D18, vector3D25);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation28 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D18, (double) 100L);
        double double29 = rotation28.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation30 = rotation11.applyInverseTo(rotation28);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation31 = rotation5.applyInverseTo(rotation28);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation32 = rotation31.revert();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D33 = rotation32.getAxis();
        double double34 = rotation32.getAngle();
        double double35 = rotation32.getQ3();
        org.junit.Assert.assertNotNull(vector3D18);
        org.junit.Assert.assertNotNull(vector3D25);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + (-0.0d) + "'", double29 == (-0.0d));
        org.junit.Assert.assertNotNull(rotation30);
        org.junit.Assert.assertNotNull(rotation31);
        org.junit.Assert.assertNotNull(rotation32);
        org.junit.Assert.assertNotNull(vector3D33);
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 9.649660284921133d + "'", double35 == 9.649660284921133d);
    }

    @Test
    public void test0615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0615");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation20.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = rotation27.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation29 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D21, vector3D28);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D36 = rotation35.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation42 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D43 = rotation42.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation44 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D36, vector3D43);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation45 = rotation29.applyTo(rotation44);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation46 = rotation14.applyTo(rotation45);
        double[][] doubleArray47 = rotation46.getMatrix();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation49 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray47, (double) 10);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation51 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray47, (double) (byte) 100);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation53 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray47, 0.0d);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation55 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray47, 0.9949438965141721d);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.geometry.euclidean.threed.Rotation rotation57 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray47, (-108.9963038254143d));
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.geometry.euclidean.threed.NotARotationMatrixException; message: unable to orthogonalize matrix in 10 iterations");
        } catch (org.apache.commons.math.geometry.euclidean.threed.NotARotationMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(rotation45);
        org.junit.Assert.assertNotNull(rotation46);
        org.junit.Assert.assertNotNull(doubleArray47);
    }

    @Test
    public void test0616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0616");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) 0, 100.0d, (double) (short) 100, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation11 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-1.0d), (double) (byte) 10, (double) (byte) 100, (double) 0L, true);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation17 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D18 = rotation17.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation24 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D25 = rotation24.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation26 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D18, vector3D25);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D27 = rotation11.applyTo(vector3D18);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation29 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D18, 0.9996303825414301d);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D30 = rotation5.applyInverseTo(vector3D18);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation36 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-1.0d), (double) (byte) 10, (double) (byte) 100, (double) 0L, true);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation42 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D43 = rotation42.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D44 = rotation36.applyInverseTo(vector3D43);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation50 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D51 = rotation50.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation57 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D58 = rotation57.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation59 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D51, vector3D58);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation61 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D51, (double) 1L);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation62 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D44, vector3D51);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D63 = rotation5.applyTo(vector3D51);
        org.junit.Assert.assertNotNull(vector3D18);
        org.junit.Assert.assertNotNull(vector3D25);
        org.junit.Assert.assertNotNull(vector3D27);
        org.junit.Assert.assertNotNull(vector3D30);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(vector3D44);
        org.junit.Assert.assertNotNull(vector3D51);
        org.junit.Assert.assertNotNull(vector3D58);
        org.junit.Assert.assertNotNull(vector3D63);
    }

    @Test
    public void test0617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0617");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation20.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = rotation27.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation34 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D35 = rotation34.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation36 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D28, vector3D35);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation42 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D43 = rotation42.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation49 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D50 = rotation49.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation51 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D43, vector3D50);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation52 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D13, vector3D21, vector3D35, vector3D50);
        double double53 = rotation52.getQ1();
        double[][] doubleArray54 = rotation52.getMatrix();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.geometry.euclidean.threed.Rotation rotation56 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray54, (double) (byte) 10);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.geometry.euclidean.threed.NotARotationMatrixException; message: unable to orthogonalize matrix in 10 iterations");
        } catch (org.apache.commons.math.geometry.euclidean.threed.NotARotationMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D35);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(vector3D50);
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertNotNull(doubleArray54);
    }

    @Test
    public void test0618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0618");
        org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.geometry.euclidean.threed.Rotation rotation4 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(rotationOrder0, (-0.0d), 116.90457705856772d, 0.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0619");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (short) -1, (-0.1730129508244783d), (-0.1730129508244783d), (double) 10.0f, false);
        double double6 = rotation5.getQ2();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation19 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double20 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation12, rotation19);
        double double21 = rotation19.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = rotation27.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation34 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double35 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation27, rotation34);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation41 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D42 = rotation41.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation48 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double49 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation41, rotation48);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation50 = rotation34.applyInverseTo(rotation41);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation51 = rotation19.applyTo(rotation41);
        org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder52 = null;
        double[] doubleArray53 = rotation51.getAngles(rotationOrder52);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation59 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D60 = rotation59.getAxis();
        double double61 = rotation59.getQ0();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation62 = rotation51.applyInverseTo(rotation59);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation68 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D69 = rotation68.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation75 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D76 = rotation75.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation82 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D83 = rotation82.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation84 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D76, vector3D83);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation86 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D76, (double) 100L);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation87 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D69, vector3D76);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D88 = rotation62.applyTo(vector3D76);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D89 = rotation5.applyInverseTo(vector3D88);
        org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder90 = null;
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray91 = rotation5.getAngles(rotationOrder90);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.geometry.euclidean.threed.CardanEulerSingularityException; message: Euler angles singularity");
        } catch (org.apache.commons.math.geometry.euclidean.threed.CardanEulerSingularityException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + (-0.1730129508244783d) + "'", double6 == (-0.1730129508244783d));
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 3.141592653589793d + "'", double21 == 3.141592653589793d);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertNotNull(vector3D42);
        org.junit.Assert.assertTrue(Double.isNaN(double49));
        org.junit.Assert.assertNotNull(rotation50);
        org.junit.Assert.assertNotNull(rotation51);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[-0.31746367442260337, 1.2637009275001716, 3.026886383418824]");
        org.junit.Assert.assertNotNull(vector3D60);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 0.9996303825414301d + "'", double61 == 0.9996303825414301d);
        org.junit.Assert.assertNotNull(rotation62);
        org.junit.Assert.assertNotNull(vector3D69);
        org.junit.Assert.assertNotNull(vector3D76);
        org.junit.Assert.assertNotNull(vector3D83);
        org.junit.Assert.assertNotNull(vector3D88);
        org.junit.Assert.assertNotNull(vector3D89);
    }

    @Test
    public void test0620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0620");
        org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.geometry.euclidean.threed.Rotation rotation4 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(rotationOrder0, (-0.1730129508244783d), (double) '#', 0.8775825618903728d);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0621");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation20.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = rotation27.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation29 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D21, vector3D28);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D36 = rotation35.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation42 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D43 = rotation42.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation44 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D36, vector3D43);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation45 = rotation29.applyTo(rotation44);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation46 = rotation14.applyTo(rotation45);
        double[][] doubleArray47 = rotation46.getMatrix();
        double double48 = rotation46.getQ1();
        double[][] doubleArray49 = rotation46.getMatrix();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation51 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray49, (double) 100L);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation53 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray49, 0.7881701093115122d);
        double double54 = rotation53.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D55 = rotation53.getAxis();
        double double56 = rotation53.getQ1();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(rotation45);
        org.junit.Assert.assertNotNull(rotation46);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d);
        org.junit.Assert.assertNotNull(vector3D55);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.0d + "'", double56 == 0.0d);
    }

    @Test
    public void test0622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0622");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (short) -1, (-0.8775825618903728d), (double) (byte) 100, 0.3388903615770647d, true);
        double double6 = rotation5.getQ3();
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.003388584257121107d + "'", double6 == 0.003388584257121107d);
    }

    @Test
    public void test0623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0623");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation20.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = rotation27.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation34 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D35 = rotation34.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation36 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D28, vector3D35);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation42 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D43 = rotation42.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation49 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D50 = rotation49.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation51 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D43, vector3D50);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation52 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D13, vector3D21, vector3D35, vector3D50);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation54 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D21, (double) 1);
        double double55 = rotation54.getQ1();
        org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder56 = null;
        double[] doubleArray57 = rotation54.getAngles(rotationOrder56);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation63 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) 0, 100.0d, (double) (short) 100, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation69 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-1.0d), (double) (byte) 10, (double) (byte) 100, (double) 0L, true);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation75 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D76 = rotation75.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation82 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D83 = rotation82.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation84 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D76, vector3D83);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D85 = rotation69.applyTo(vector3D76);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation87 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D76, 0.9996303825414301d);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D88 = rotation63.applyInverseTo(vector3D76);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D89 = rotation54.applyTo(vector3D88);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation90 = rotation54.revert();
        double double91 = rotation54.getQ3();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D35);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(vector3D50);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.33900504942104487d + "'", double55 == 0.33900504942104487d);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[2.356194490192345, 0.9999999999999999, -2.356194490192345]");
        org.junit.Assert.assertNotNull(vector3D76);
        org.junit.Assert.assertNotNull(vector3D83);
        org.junit.Assert.assertNotNull(vector3D85);
        org.junit.Assert.assertNotNull(vector3D88);
        org.junit.Assert.assertNotNull(vector3D89);
        org.junit.Assert.assertNotNull(rotation90);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 0.0d + "'", double91 == 0.0d);
    }

    @Test
    public void test0624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0624");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation0 = null;
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation6 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) 10, 0.0d, (double) (byte) 0, 10.0d, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (byte) 100, (double) 10L, (double) (short) 100, (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation18 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D19 = rotation18.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation25 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D26 = rotation25.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D19, vector3D26);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation29 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D19, (double) 100L);
        double double30 = rotation29.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation31 = rotation12.applyInverseTo(rotation29);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation32 = rotation6.applyInverseTo(rotation29);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation33 = rotation32.revert();
        // The following exception was thrown during execution in test generation
        try {
            double double34 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation0, rotation32);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(vector3D19);
        org.junit.Assert.assertNotNull(vector3D26);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + (-0.0d) + "'", double30 == (-0.0d));
        org.junit.Assert.assertNotNull(rotation31);
        org.junit.Assert.assertNotNull(rotation32);
        org.junit.Assert.assertNotNull(rotation33);
    }

    @Test
    public void test0625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0625");
        org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.geometry.euclidean.threed.Rotation rotation4 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(rotationOrder0, 3.141592653589793d, 3.1382608577831084d, (double) (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0626");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.8775825618903728d, (double) 10.0f, (double) (byte) 10, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation19 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double20 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation12, rotation19);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation26 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D27 = rotation26.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation33 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D34 = rotation33.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D27, vector3D34);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation41 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation42 = rotation35.applyInverseTo(rotation41);
        double double43 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation19, rotation35);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D44 = rotation19.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation50 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-1.0d), (double) (byte) 10, (double) (byte) 100, (double) 0L, true);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation56 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D57 = rotation56.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation63 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D64 = rotation63.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation65 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D57, vector3D64);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D66 = rotation50.applyTo(vector3D57);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation67 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D44, vector3D66);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation69 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D44, 3.7105407653375275d);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation70 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D44);
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertNotNull(vector3D27);
        org.junit.Assert.assertNotNull(vector3D34);
        org.junit.Assert.assertNotNull(rotation42);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 3.141592653589793d + "'", double43 == 3.141592653589793d);
        org.junit.Assert.assertNotNull(vector3D44);
        org.junit.Assert.assertNotNull(vector3D57);
        org.junit.Assert.assertNotNull(vector3D64);
        org.junit.Assert.assertNotNull(vector3D66);
    }

    @Test
    public void test0627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0627");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation16 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, 0.0019129169749405736d);
        double[][] doubleArray17 = rotation16.getMatrix();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(doubleArray17);
    }

    @Test
    public void test0628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0628");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (byte) 100, (double) 10L, (double) (short) 100, (double) 1L, false);
        double double6 = rotation5.getAngle();
        double[][] doubleArray7 = rotation5.getMatrix();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D8 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) 0, (double) ' ', (double) (byte) 100, 17.66239947251099d, true);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation20.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = rotation27.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation29 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D21, vector3D28);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D36 = rotation35.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation42 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D43 = rotation42.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation44 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D36, vector3D43);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation50 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D51 = rotation50.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation57 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D58 = rotation57.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation59 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D51, vector3D58);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation60 = rotation44.applyTo(rotation59);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation61 = rotation29.applyTo(rotation60);
        double[][] doubleArray62 = rotation61.getMatrix();
        double double63 = rotation61.getQ1();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D64 = rotation61.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D65 = rotation14.applyInverseTo(vector3D64);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation71 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (byte) 100, (double) 10L, (double) (short) 100, (double) 1L, false);
        double double72 = rotation71.getQ2();
        double double73 = rotation71.getQ2();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation74 = rotation14.applyInverseTo(rotation71);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation75 = rotation5.applyTo(rotation14);
        org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder76 = null;
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray77 = rotation75.getAngles(rotationOrder76);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.geometry.euclidean.threed.CardanEulerSingularityException; message: Euler angles singularity");
        } catch (org.apache.commons.math.geometry.euclidean.threed.CardanEulerSingularityException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(vector3D8);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(vector3D51);
        org.junit.Assert.assertNotNull(vector3D58);
        org.junit.Assert.assertNotNull(rotation60);
        org.junit.Assert.assertNotNull(rotation61);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 0.0d + "'", double63 == 0.0d);
        org.junit.Assert.assertNotNull(vector3D64);
        org.junit.Assert.assertNotNull(vector3D65);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 100.0d + "'", double72 == 100.0d);
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 100.0d + "'", double73 == 100.0d);
        org.junit.Assert.assertNotNull(rotation74);
        org.junit.Assert.assertNotNull(rotation75);
    }

    @Test
    public void test0629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0629");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double13 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation5, rotation12);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation19 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D20 = rotation19.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation26 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double27 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation19, rotation26);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation28 = rotation12.applyInverseTo(rotation19);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation34 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D35 = rotation34.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation41 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D42 = rotation41.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation43 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D35, vector3D42);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation45 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D35, (double) 1L);
        double double46 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation19, rotation45);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation47 = rotation19.revert();
        org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder48 = null;
        double[] doubleArray49 = rotation19.getAngles(rotationOrder48);
        double double50 = rotation19.getQ3();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertNotNull(vector3D20);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertNotNull(rotation28);
        org.junit.Assert.assertNotNull(vector3D35);
        org.junit.Assert.assertNotNull(vector3D42);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.9456205751905904d + "'", double46 == 0.9456205751905904d);
        org.junit.Assert.assertNotNull(rotation47);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[2.356194490192345, 0.0543794248094174, -2.356194490192345]");
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.0d + "'", double50 == 0.0d);
    }

    @Test
    public void test0630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0630");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) 10, 0.0d, (double) (byte) 0, 10.0d, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation11 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (byte) 100, (double) 10L, (double) (short) 100, (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation17 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D18 = rotation17.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation24 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D25 = rotation24.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation26 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D18, vector3D25);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation28 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D18, (double) 100L);
        double double29 = rotation28.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation30 = rotation11.applyInverseTo(rotation28);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation31 = rotation5.applyInverseTo(rotation28);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation37 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D38 = rotation37.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation44 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D45 = rotation44.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation46 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D38, vector3D45);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation48 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D38, (double) 1L);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D49 = rotation31.applyTo(vector3D38);
        double double50 = rotation31.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation56 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.9996303825414301d, (double) (short) 0, 3.141592653589793d, 0.09949879346007118d, true);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation57 = rotation31.applyInverseTo(rotation56);
        double double58 = rotation56.getQ2();
        org.junit.Assert.assertNotNull(vector3D18);
        org.junit.Assert.assertNotNull(vector3D25);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + (-0.0d) + "'", double29 == (-0.0d));
        org.junit.Assert.assertNotNull(rotation30);
        org.junit.Assert.assertNotNull(rotation31);
        org.junit.Assert.assertNotNull(vector3D38);
        org.junit.Assert.assertNotNull(vector3D45);
        org.junit.Assert.assertNotNull(vector3D49);
        org.junit.Assert.assertTrue(Double.isNaN(double50));
        org.junit.Assert.assertNotNull(rotation57);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.9524892191720237d + "'", double58 == 0.9524892191720237d);
    }

    @Test
    public void test0631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0631");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (-0.009949438965141721d), (double) 0L, (-0.009949438965141721d), false);
        org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder6 = null;
        double[] doubleArray7 = rotation5.getAngles(rotationOrder6);
        java.lang.Class<?> wildcardClass8 = doubleArray7.getClass();
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-0.0, 3.121693447342136, 3.141592653589793]");
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0632");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(2.566370614359173d, (-1579.617450290328d), 0.047917108096983706d, (-0.9649660284921133d), true);
    }

    @Test
    public void test0633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0633");
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.geometry.euclidean.threed.Rotation rotation2 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D0, 0.7881701093115124d);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0634");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation16 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, (double) 100L);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation22 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-1.0d), (double) (byte) 10, (double) (byte) 100, (double) 0L, true);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation28 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D29 = rotation28.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D36 = rotation35.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation37 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D29, vector3D36);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D38 = rotation22.applyTo(vector3D29);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation44 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D45 = rotation44.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation51 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D52 = rotation51.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation58 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D59 = rotation58.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation60 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D52, vector3D59);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation62 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D52, (double) 100L);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation63 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D45, vector3D52);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation69 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D70 = rotation69.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation71 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D38, vector3D52, vector3D70);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation73 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D52, (double) 1.0f);
        double double74 = rotation73.getQ1();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D29);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D38);
        org.junit.Assert.assertNotNull(vector3D45);
        org.junit.Assert.assertNotNull(vector3D52);
        org.junit.Assert.assertNotNull(vector3D59);
        org.junit.Assert.assertNotNull(vector3D70);
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 0.33900504942104487d + "'", double74 == 0.33900504942104487d);
    }

    @Test
    public void test0635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0635");
        org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.geometry.euclidean.threed.Rotation rotation4 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(rotationOrder0, 0.09949438965141721d, 0.06415703545444096d, 3.1216925665694406d);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0636");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(2.7755575615628914E-17d, (-8.717516503499631d), (-0.005755946541407356d), (double) (-1L), false);
        org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder6 = null;
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray7 = rotation5.getAngles(rotationOrder6);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.geometry.euclidean.threed.CardanEulerSingularityException; message: Euler angles singularity");
        } catch (org.apache.commons.math.geometry.euclidean.threed.CardanEulerSingularityException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0637");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) 100L, 1.0d, (double) (byte) -1, 0.9996303825414301d, false);
        double double6 = rotation5.getAngle();
        org.junit.Assert.assertTrue(Double.isNaN(double6));
    }

    @Test
    public void test0638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0638");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-1.0d), (double) (byte) 10, (double) (byte) 100, (double) 0L, true);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation11 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D12 = rotation11.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation18 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D19 = rotation18.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D12, vector3D19);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation5.applyTo(vector3D12);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) 10, 0.0d, (double) (byte) 0, 10.0d, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation33 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (byte) 100, (double) 10L, (double) (short) 100, (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation39 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D40 = rotation39.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation46 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D47 = rotation46.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation48 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D40, vector3D47);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation50 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D40, (double) 100L);
        double double51 = rotation50.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation52 = rotation33.applyInverseTo(rotation50);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation53 = rotation27.applyInverseTo(rotation50);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation54 = rotation53.revert();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D55 = rotation54.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation61 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D62 = rotation61.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation68 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double69 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation61, rotation68);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation75 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D76 = rotation75.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation82 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D83 = rotation82.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation84 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D76, vector3D83);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation90 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation91 = rotation84.applyInverseTo(rotation90);
        double double92 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation68, rotation84);
        double double93 = rotation84.getQ3();
        double double94 = rotation84.getQ0();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation95 = rotation54.applyInverseTo(rotation84);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation96 = rotation5.applyInverseTo(rotation84);
        java.lang.Class<?> wildcardClass97 = rotation5.getClass();
        org.junit.Assert.assertNotNull(vector3D12);
        org.junit.Assert.assertNotNull(vector3D19);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D40);
        org.junit.Assert.assertNotNull(vector3D47);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + (-0.0d) + "'", double51 == (-0.0d));
        org.junit.Assert.assertNotNull(rotation52);
        org.junit.Assert.assertNotNull(rotation53);
        org.junit.Assert.assertNotNull(rotation54);
        org.junit.Assert.assertNotNull(vector3D55);
        org.junit.Assert.assertNotNull(vector3D62);
        org.junit.Assert.assertTrue(Double.isNaN(double69));
        org.junit.Assert.assertNotNull(vector3D76);
        org.junit.Assert.assertNotNull(vector3D83);
        org.junit.Assert.assertNotNull(rotation91);
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 3.141592653589793d + "'", double92 == 3.141592653589793d);
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 0.0d + "'", double93 == 0.0d);
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + 1.0d + "'", double94 == 1.0d);
        org.junit.Assert.assertNotNull(rotation95);
        org.junit.Assert.assertNotNull(rotation96);
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test0639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0639");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation20.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = rotation27.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation34 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D35 = rotation34.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation36 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D28, vector3D35);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation42 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D43 = rotation42.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation49 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D50 = rotation49.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation51 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D43, vector3D50);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation52 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D13, vector3D21, vector3D35, vector3D50);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation54 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D21, (double) 1);
        double double55 = rotation54.getQ1();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D56 = rotation54.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation62 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D63 = rotation62.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation69 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D70 = rotation69.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation71 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D63, vector3D70);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation77 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D78 = rotation77.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation84 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D85 = rotation84.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation86 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D78, vector3D85);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation87 = rotation71.applyTo(rotation86);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation93 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) 10, 0.0d, (double) (byte) 0, 10.0d, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation94 = rotation71.applyTo(rotation93);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation95 = rotation94.revert();
        double double96 = rotation95.getQ0();
        double double97 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation54, rotation95);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation98 = rotation54.revert();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D35);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(vector3D50);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.33900504942104487d + "'", double55 == 0.33900504942104487d);
        org.junit.Assert.assertNotNull(vector3D56);
        org.junit.Assert.assertNotNull(vector3D63);
        org.junit.Assert.assertNotNull(vector3D70);
        org.junit.Assert.assertNotNull(vector3D78);
        org.junit.Assert.assertNotNull(vector3D85);
        org.junit.Assert.assertNotNull(rotation87);
        org.junit.Assert.assertNotNull(rotation94);
        org.junit.Assert.assertNotNull(rotation95);
        org.junit.Assert.assertTrue("'" + double96 + "' != '" + (-10.0d) + "'", double96 == (-10.0d));
        org.junit.Assert.assertTrue(Double.isNaN(double97));
        org.junit.Assert.assertNotNull(rotation98);
    }

    @Test
    public void test0640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0640");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) 10, 0.0d, (double) (byte) 0, 10.0d, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation11 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (byte) 100, (double) 10L, (double) (short) 100, (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation17 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D18 = rotation17.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation24 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D25 = rotation24.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation26 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D18, vector3D25);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation28 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D18, (double) 100L);
        double double29 = rotation28.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation30 = rotation11.applyInverseTo(rotation28);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation31 = rotation5.applyInverseTo(rotation28);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation32 = rotation31.revert();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation33 = rotation32.revert();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D34 = rotation32.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = rotation32.revert();
        double double36 = rotation32.getQ3();
        org.junit.Assert.assertNotNull(vector3D18);
        org.junit.Assert.assertNotNull(vector3D25);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + (-0.0d) + "'", double29 == (-0.0d));
        org.junit.Assert.assertNotNull(rotation30);
        org.junit.Assert.assertNotNull(rotation31);
        org.junit.Assert.assertNotNull(rotation32);
        org.junit.Assert.assertNotNull(rotation33);
        org.junit.Assert.assertNotNull(vector3D34);
        org.junit.Assert.assertNotNull(rotation35);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 9.649660284921133d + "'", double36 == 9.649660284921133d);
    }

    @Test
    public void test0641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0641");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double13 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation5, rotation12);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation19 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D20 = rotation19.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation26 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double27 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation19, rotation26);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation28 = rotation12.applyInverseTo(rotation19);
        double double29 = rotation12.getQ3();
        double double30 = rotation12.getQ1();
        double[][] doubleArray31 = rotation12.getMatrix();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.geometry.euclidean.threed.Rotation rotation33 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray31, 0.0d);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.geometry.euclidean.threed.NotARotationMatrixException; message: unable to orthogonalize matrix in 10 iterations");
        } catch (org.apache.commons.math.geometry.euclidean.threed.NotARotationMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertNotNull(vector3D20);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertNotNull(rotation28);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 1.0d + "'", double29 == 1.0d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 10.0d + "'", double30 == 10.0d);
        org.junit.Assert.assertNotNull(doubleArray31);
    }

    @Test
    public void test0642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0642");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation21 = rotation14.applyInverseTo(rotation20);
        double double22 = rotation14.getQ2();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation28 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D29 = rotation28.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double36 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation28, rotation35);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation42 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D43 = rotation42.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation49 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D50 = rotation49.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation51 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D43, vector3D50);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation57 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation58 = rotation51.applyInverseTo(rotation57);
        double double59 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation35, rotation51);
        double double60 = rotation51.getQ3();
        double double61 = rotation51.getQ0();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation62 = rotation14.applyTo(rotation51);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation63 = rotation14.revert();
        java.lang.Class<?> wildcardClass64 = rotation63.getClass();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(rotation21);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertNotNull(vector3D29);
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(vector3D50);
        org.junit.Assert.assertNotNull(rotation58);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 3.141592653589793d + "'", double59 == 3.141592653589793d);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.0d + "'", double60 == 0.0d);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 1.0d + "'", double61 == 1.0d);
        org.junit.Assert.assertNotNull(rotation62);
        org.junit.Assert.assertNotNull(rotation63);
        org.junit.Assert.assertNotNull(wildcardClass64);
    }

    @Test
    public void test0643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0643");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-0.0d), 0.09949879346007118d, (double) (-1L), 0.0d, true);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation11 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D12 = rotation11.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation18 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D19 = rotation18.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D12, vector3D19);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation22 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D12, (double) 100L);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation28 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-1.0d), (double) (byte) 10, (double) (byte) 100, (double) 0L, true);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation34 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D35 = rotation34.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation41 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D42 = rotation41.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation43 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D35, vector3D42);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D44 = rotation28.applyTo(vector3D35);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation50 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D51 = rotation50.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation57 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D58 = rotation57.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation64 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D65 = rotation64.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation66 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D58, vector3D65);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation68 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D58, (double) 100L);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation69 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D51, vector3D58);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation75 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D76 = rotation75.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation77 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D12, vector3D44, vector3D58, vector3D76);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation79 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D58, (double) 1.0f);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation81 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D58, (double) (short) 10);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D82 = rotation81.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D83 = rotation5.applyInverseTo(vector3D82);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation85 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D82, (double) (short) 10);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation87 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D82, 0.06415703545444096d);
        org.junit.Assert.assertNotNull(vector3D12);
        org.junit.Assert.assertNotNull(vector3D19);
        org.junit.Assert.assertNotNull(vector3D35);
        org.junit.Assert.assertNotNull(vector3D42);
        org.junit.Assert.assertNotNull(vector3D44);
        org.junit.Assert.assertNotNull(vector3D51);
        org.junit.Assert.assertNotNull(vector3D58);
        org.junit.Assert.assertNotNull(vector3D65);
        org.junit.Assert.assertNotNull(vector3D76);
        org.junit.Assert.assertNotNull(vector3D82);
        org.junit.Assert.assertNotNull(vector3D83);
    }

    @Test
    public void test0644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0644");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double13 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation5, rotation12);
        double double14 = rotation12.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation20.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = rotation27.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation29 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D21, vector3D28);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D36 = rotation35.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation42 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D43 = rotation42.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation44 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D36, vector3D43);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation45 = rotation29.applyTo(rotation44);
        double double46 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation12, rotation45);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation52 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D53 = rotation52.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation59 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double60 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation52, rotation59);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation66 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D67 = rotation66.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation73 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double74 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation66, rotation73);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation75 = rotation59.applyInverseTo(rotation66);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation76 = rotation12.applyInverseTo(rotation66);
        org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder77 = null;
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray78 = rotation12.getAngles(rotationOrder77);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.geometry.euclidean.threed.CardanEulerSingularityException; message: Euler angles singularity");
        } catch (org.apache.commons.math.geometry.euclidean.threed.CardanEulerSingularityException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 3.141592653589793d + "'", double14 == 3.141592653589793d);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(rotation45);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 3.141592653589793d + "'", double46 == 3.141592653589793d);
        org.junit.Assert.assertNotNull(vector3D53);
        org.junit.Assert.assertTrue(Double.isNaN(double60));
        org.junit.Assert.assertNotNull(vector3D67);
        org.junit.Assert.assertTrue(Double.isNaN(double74));
        org.junit.Assert.assertNotNull(rotation75);
        org.junit.Assert.assertNotNull(rotation76);
    }

    @Test
    public void test0645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0645");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation20.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = rotation27.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation29 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D21, vector3D28);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D36 = rotation35.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation42 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D43 = rotation42.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation44 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D36, vector3D43);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation45 = rotation29.applyTo(rotation44);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation46 = rotation14.applyTo(rotation45);
        double[][] doubleArray47 = rotation46.getMatrix();
        double double48 = rotation46.getQ1();
        double[][] doubleArray49 = rotation46.getMatrix();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation51 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray49, (double) 100L);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation53 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray49, 2.7755575615628914E-17d);
        java.lang.Class<?> wildcardClass54 = doubleArray49.getClass();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(rotation45);
        org.junit.Assert.assertNotNull(rotation46);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(wildcardClass54);
    }

    @Test
    public void test0646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0646");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (short) -1, 0.7881701093115122d, 0.0d, (-0.0d), false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation11 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (short) 100, 0.0d, 0.33900504942104487d, 0.0d, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = rotation5.applyTo(rotation11);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation18 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-0.1855270382668764d), (double) 1, Double.NaN, (double) (short) 100, false);
        double double19 = rotation18.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = rotation18.revert();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation26 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D27 = rotation26.getAxis();
        double double28 = rotation26.getQ0();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D29 = rotation26.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D30 = rotation20.applyInverseTo(vector3D29);
        double double31 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation5, rotation20);
        double double32 = rotation5.getQ2();
        org.junit.Assert.assertNotNull(rotation12);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertNotNull(rotation20);
        org.junit.Assert.assertNotNull(vector3D27);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.9996303825414301d + "'", double28 == 0.9996303825414301d);
        org.junit.Assert.assertNotNull(vector3D29);
        org.junit.Assert.assertNotNull(vector3D30);
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
    }

    @Test
    public void test0647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0647");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation0 = null;
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation6 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-1.0d), (double) (byte) 10, (double) (byte) 100, (double) 0L, true);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation18 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D19 = rotation18.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation25 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D26 = rotation25.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D19, vector3D26);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = rotation12.applyTo(vector3D19);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D29 = rotation6.applyTo(vector3D28);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-0.1855270382668764d), (double) 10, (double) (short) -1, (double) 100.0f, false);
        double[][] doubleArray36 = rotation35.getMatrix();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation42 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D43 = rotation42.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation49 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D50 = rotation49.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation51 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D43, vector3D50);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation53 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D43, (double) 100L);
        double double54 = rotation53.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation55 = rotation53.revert();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation61 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (byte) 100, (double) 10L, (double) (short) 100, (double) 1L, false);
        double double62 = rotation61.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation63 = rotation55.applyInverseTo(rotation61);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation64 = rotation35.applyInverseTo(rotation63);
        double double65 = rotation64.getQ1();
        double double66 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation6, rotation64);
        // The following exception was thrown during execution in test generation
        try {
            double double67 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation0, rotation64);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(vector3D19);
        org.junit.Assert.assertNotNull(vector3D26);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D29);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(vector3D50);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + (-0.0d) + "'", double54 == (-0.0d));
        org.junit.Assert.assertNotNull(rotation55);
        org.junit.Assert.assertTrue(Double.isNaN(double62));
        org.junit.Assert.assertNotNull(rotation63);
        org.junit.Assert.assertNotNull(rotation64);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 8960.928033465932d + "'", double65 == 8960.928033465932d);
        org.junit.Assert.assertTrue(Double.isNaN(double66));
    }

    @Test
    public void test0648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0648");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation16 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, (double) 100L);
        double double17 = rotation16.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation18 = rotation16.revert();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation24 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (byte) 100, (double) 10L, (double) (short) 100, (double) 1L, false);
        double double25 = rotation24.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation26 = rotation18.applyInverseTo(rotation24);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation32 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D33 = rotation32.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation39 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D40 = rotation39.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation41 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D33, vector3D40);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation47 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D48 = rotation47.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation54 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D55 = rotation54.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation56 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D48, vector3D55);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation62 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D63 = rotation62.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation69 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D70 = rotation69.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation71 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D63, vector3D70);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation72 = rotation56.applyTo(rotation71);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation73 = rotation41.applyTo(rotation72);
        double[][] doubleArray74 = rotation73.getMatrix();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation76 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray74, (double) '4');
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation82 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(2.7755575615628914E-17d, (-8.717516503499631d), (-0.005755946541407356d), (double) (-1L), false);
        double double83 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation76, rotation82);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation84 = rotation26.applyInverseTo(rotation76);
        double[][] doubleArray85 = rotation84.getMatrix();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.geometry.euclidean.threed.Rotation rotation87 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray85, 0.7881701093115122d);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.geometry.euclidean.threed.NotARotationMatrixException; message: unable to orthogonalize matrix in 10 iterations");
        } catch (org.apache.commons.math.geometry.euclidean.threed.NotARotationMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-0.0d) + "'", double17 == (-0.0d));
        org.junit.Assert.assertNotNull(rotation18);
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertNotNull(rotation26);
        org.junit.Assert.assertNotNull(vector3D33);
        org.junit.Assert.assertNotNull(vector3D40);
        org.junit.Assert.assertNotNull(vector3D48);
        org.junit.Assert.assertNotNull(vector3D55);
        org.junit.Assert.assertNotNull(vector3D63);
        org.junit.Assert.assertNotNull(vector3D70);
        org.junit.Assert.assertNotNull(rotation72);
        org.junit.Assert.assertNotNull(rotation73);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 3.141592653589793d + "'", double83 == 3.141592653589793d);
        org.junit.Assert.assertNotNull(rotation84);
        org.junit.Assert.assertNotNull(doubleArray85);
    }

    @Test
    public void test0649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0649");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (short) -1, (double) 10.0f, (double) (byte) 100, (-0.005755946541407356d), true);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation11 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D12 = rotation11.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation18 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D19 = rotation18.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D12, vector3D19);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation26 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D27 = rotation26.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation33 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D34 = rotation33.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D27, vector3D34);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation41 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D42 = rotation41.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation48 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D49 = rotation48.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation50 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D42, vector3D49);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation51 = rotation35.applyTo(rotation50);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation52 = rotation20.applyTo(rotation51);
        double[][] doubleArray53 = rotation52.getMatrix();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation55 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray53, (double) 10);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation57 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray53, (double) (byte) 100);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation59 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray53, (double) (short) 0);
        double double60 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation5, rotation59);
        double double61 = rotation59.getAngle();
        double double62 = rotation59.getQ1();
        org.junit.Assert.assertNotNull(vector3D12);
        org.junit.Assert.assertNotNull(vector3D19);
        org.junit.Assert.assertNotNull(vector3D27);
        org.junit.Assert.assertNotNull(vector3D34);
        org.junit.Assert.assertNotNull(vector3D42);
        org.junit.Assert.assertNotNull(vector3D49);
        org.junit.Assert.assertNotNull(rotation51);
        org.junit.Assert.assertNotNull(rotation52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 3.1216925665694406d + "'", double60 == 3.1216925665694406d);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 0.0d + "'", double61 == 0.0d);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 0.0d + "'", double62 == 0.0d);
    }

    @Test
    public void test0650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0650");
        org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.geometry.euclidean.threed.Rotation rotation4 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(rotationOrder0, 0.09949438965141721d, 0.19838154108920086d, (double) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0651");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation20.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = rotation27.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation34 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D35 = rotation34.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation36 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D28, vector3D35);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation42 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D43 = rotation42.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation49 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D50 = rotation49.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation51 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D43, vector3D50);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation52 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D13, vector3D21, vector3D35, vector3D50);
        double double53 = rotation52.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation59 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D60 = rotation59.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation66 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double67 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation59, rotation66);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation73 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D74 = rotation73.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation80 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D81 = rotation80.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation82 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D74, vector3D81);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation88 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation89 = rotation82.applyInverseTo(rotation88);
        double double90 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation66, rotation82);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D91 = rotation66.getAxis();
        double[][] doubleArray92 = rotation66.getMatrix();
        double double93 = rotation66.getQ2();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation94 = rotation52.applyInverseTo(rotation66);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation95 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.geometry.euclidean.threed.Rotation rotation96 = rotation52.applyInverseTo(rotation95);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D35);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(vector3D50);
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertNotNull(vector3D60);
        org.junit.Assert.assertTrue(Double.isNaN(double67));
        org.junit.Assert.assertNotNull(vector3D74);
        org.junit.Assert.assertNotNull(vector3D81);
        org.junit.Assert.assertNotNull(rotation89);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 3.141592653589793d + "'", double90 == 3.141592653589793d);
        org.junit.Assert.assertNotNull(vector3D91);
        org.junit.Assert.assertNotNull(doubleArray92);
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + (-1.0d) + "'", double93 == (-1.0d));
        org.junit.Assert.assertNotNull(rotation94);
    }

    @Test
    public void test0652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0652");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation16 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, (double) 100L);
        double double17 = rotation16.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation18 = rotation16.revert();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation24 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (byte) 100, (double) 10L, (double) (short) 100, (double) 1L, false);
        double double25 = rotation24.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation26 = rotation18.applyInverseTo(rotation24);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = rotation26.revert();
        double double28 = rotation26.getQ0();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-0.0d) + "'", double17 == (-0.0d));
        org.junit.Assert.assertNotNull(rotation18);
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertNotNull(rotation26);
        org.junit.Assert.assertNotNull(rotation27);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 116.90457705856772d + "'", double28 == 116.90457705856772d);
    }

    @Test
    public void test0653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0653");
        org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.geometry.euclidean.threed.Rotation rotation4 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(rotationOrder0, 0.0d, 0.0d, 2.7755575615628914E-17d);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0654");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) 10, 0.0d, (double) (byte) 0, 10.0d, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation11 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (byte) 100, (double) 10L, (double) (short) 100, (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation17 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D18 = rotation17.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation24 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D25 = rotation24.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation26 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D18, vector3D25);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation28 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D18, (double) 100L);
        double double29 = rotation28.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation30 = rotation11.applyInverseTo(rotation28);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation31 = rotation5.applyInverseTo(rotation28);
        double double32 = rotation5.getQ2();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation33 = rotation5.revert();
        double[][] doubleArray34 = rotation33.getMatrix();
        org.junit.Assert.assertNotNull(vector3D18);
        org.junit.Assert.assertNotNull(vector3D25);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + (-0.0d) + "'", double29 == (-0.0d));
        org.junit.Assert.assertNotNull(rotation30);
        org.junit.Assert.assertNotNull(rotation31);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
        org.junit.Assert.assertNotNull(rotation33);
        org.junit.Assert.assertNotNull(doubleArray34);
    }

    @Test
    public void test0655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0655");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) 100, (double) (byte) -1, (double) (short) 10, 0.9456205751905904d, true);
        double double6 = rotation5.getQ0();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) 10, 0.0d, (double) (byte) 0, 10.0d, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation18 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (byte) 100, (double) 10L, (double) (short) 100, (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation24 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D25 = rotation24.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation31 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D32 = rotation31.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation33 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D25, vector3D32);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D25, (double) 100L);
        double double36 = rotation35.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation37 = rotation18.applyInverseTo(rotation35);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation38 = rotation12.applyInverseTo(rotation35);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation39 = rotation38.revert();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D40 = rotation39.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D41 = rotation5.applyInverseTo(vector3D40);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation43 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D40, 0.27150322035250896d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.9949438965141721d + "'", double6 == 0.9949438965141721d);
        org.junit.Assert.assertNotNull(vector3D25);
        org.junit.Assert.assertNotNull(vector3D32);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + (-0.0d) + "'", double36 == (-0.0d));
        org.junit.Assert.assertNotNull(rotation37);
        org.junit.Assert.assertNotNull(rotation38);
        org.junit.Assert.assertNotNull(rotation39);
        org.junit.Assert.assertNotNull(vector3D40);
        org.junit.Assert.assertNotNull(vector3D41);
    }

    @Test
    public void test0656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0656");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double13 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation5, rotation12);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation19 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D20 = rotation19.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation26 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D27 = rotation26.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation28 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D20, vector3D27);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation34 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = rotation28.applyInverseTo(rotation34);
        double double36 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation12, rotation28);
        double double37 = rotation12.getAngle();
        double double38 = rotation12.getQ1();
        double double39 = rotation12.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation40 = rotation12.revert();
        double double41 = rotation12.getQ0();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertNotNull(vector3D20);
        org.junit.Assert.assertNotNull(vector3D27);
        org.junit.Assert.assertNotNull(rotation35);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 3.141592653589793d + "'", double36 == 3.141592653589793d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 3.141592653589793d + "'", double37 == 3.141592653589793d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 10.0d + "'", double38 == 10.0d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 1.0d + "'", double39 == 1.0d);
        org.junit.Assert.assertNotNull(rotation40);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.0d + "'", double41 == 0.0d);
    }

    @Test
    public void test0657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0657");
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D0 = null;
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation6 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) 100, (double) (byte) -1, (double) (short) 10, 0.9456205751905904d, true);
        double double7 = rotation6.getQ0();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation13 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) 10, 0.0d, (double) (byte) 0, 10.0d, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation19 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (byte) 100, (double) 10L, (double) (short) 100, (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation25 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D26 = rotation25.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation32 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D33 = rotation32.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation34 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D26, vector3D33);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation36 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D26, (double) 100L);
        double double37 = rotation36.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation38 = rotation19.applyInverseTo(rotation36);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation39 = rotation13.applyInverseTo(rotation36);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation40 = rotation39.revert();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D41 = rotation40.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D42 = rotation6.applyInverseTo(vector3D41);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.geometry.euclidean.threed.Rotation rotation43 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D0, vector3D41);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.9949438965141721d + "'", double7 == 0.9949438965141721d);
        org.junit.Assert.assertNotNull(vector3D26);
        org.junit.Assert.assertNotNull(vector3D33);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + (-0.0d) + "'", double37 == (-0.0d));
        org.junit.Assert.assertNotNull(rotation38);
        org.junit.Assert.assertNotNull(rotation39);
        org.junit.Assert.assertNotNull(rotation40);
        org.junit.Assert.assertNotNull(vector3D41);
        org.junit.Assert.assertNotNull(vector3D42);
    }

    @Test
    public void test0658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0658");
        org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.geometry.euclidean.threed.Rotation rotation4 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(rotationOrder0, 0.0d, (double) (-1.0f), 0.20120377604668616d);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0659");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-1579.617450290328d), 0.7071061888194913d, 0.0d, 0.20120377604668613d, true);
    }

    @Test
    public void test0660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0660");
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D0 = null;
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation6 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) 10, 0.0d, (double) (byte) 0, 10.0d, false);
        double double7 = rotation6.getQ1();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation13 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D14 = rotation13.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation20.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation22 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D14, vector3D21);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation28 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D29 = rotation28.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D36 = rotation35.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation42 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D43 = rotation42.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation44 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D36, vector3D43);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation50 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D51 = rotation50.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation57 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D58 = rotation57.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation59 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D51, vector3D58);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation60 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D21, vector3D29, vector3D43, vector3D58);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D61 = rotation6.applyTo(vector3D43);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation63 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D43, 0.7881701093115122d);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation69 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D70 = rotation69.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation76 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D77 = rotation76.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation78 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D70, vector3D77);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation80 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D70, (double) 100L);
        double double81 = rotation80.getQ1();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation82 = rotation63.applyTo(rotation80);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D83 = rotation63.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation85 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D83, Double.NaN);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.geometry.euclidean.threed.Rotation rotation86 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D0, vector3D83);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertNotNull(vector3D14);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D29);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(vector3D51);
        org.junit.Assert.assertNotNull(vector3D58);
        org.junit.Assert.assertNotNull(vector3D61);
        org.junit.Assert.assertNotNull(vector3D70);
        org.junit.Assert.assertNotNull(vector3D77);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + (-0.1855270382668764d) + "'", double81 == (-0.1855270382668764d));
        org.junit.Assert.assertNotNull(rotation82);
        org.junit.Assert.assertNotNull(vector3D83);
    }

    @Test
    public void test0661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0661");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-0.1855270382668764d), (double) 1, Double.NaN, (double) (short) 100, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation11 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D12 = rotation11.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation18 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D19 = rotation18.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D12, vector3D19);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation26 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D27 = rotation26.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation33 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D34 = rotation33.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D27, vector3D34);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation41 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D42 = rotation41.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation48 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D49 = rotation48.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation50 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D42, vector3D49);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation51 = rotation35.applyTo(rotation50);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation52 = rotation20.applyTo(rotation51);
        double[][] doubleArray53 = rotation52.getMatrix();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation55 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray53, (double) 10);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation57 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray53, (double) (byte) 100);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation59 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray53, 0.0d);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation60 = rotation5.applyInverseTo(rotation59);
        double double61 = rotation5.getAngle();
        double double62 = rotation5.getAngle();
        double double63 = rotation5.getAngle();
        org.junit.Assert.assertNotNull(vector3D12);
        org.junit.Assert.assertNotNull(vector3D19);
        org.junit.Assert.assertNotNull(vector3D27);
        org.junit.Assert.assertNotNull(vector3D34);
        org.junit.Assert.assertNotNull(vector3D42);
        org.junit.Assert.assertNotNull(vector3D49);
        org.junit.Assert.assertNotNull(rotation51);
        org.junit.Assert.assertNotNull(rotation52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(rotation60);
        org.junit.Assert.assertTrue(Double.isNaN(double61));
        org.junit.Assert.assertTrue(Double.isNaN(double62));
        org.junit.Assert.assertTrue(Double.isNaN(double63));
    }

    @Test
    public void test0662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0662");
        org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.geometry.euclidean.threed.Rotation rotation4 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(rotationOrder0, 0.28366218546322625d, (-10.0d), (-0.8156840252218559d));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0663");
        org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.geometry.euclidean.threed.Rotation rotation4 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(rotationOrder0, (-0.11924330679564402d), (-0.1855270382668764d), (-8.954891411406406d));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0664");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) 10, 0.0d, (double) (byte) 0, 10.0d, false);
        double double6 = rotation5.getQ1();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation19 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D20 = rotation19.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation21 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D13, vector3D20);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = rotation27.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation34 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D35 = rotation34.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation41 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D42 = rotation41.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation43 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D35, vector3D42);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation49 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D50 = rotation49.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation56 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D57 = rotation56.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation58 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D50, vector3D57);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation59 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D20, vector3D28, vector3D42, vector3D57);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D60 = rotation5.applyTo(vector3D42);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation62 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D42, 0.7881701093115122d);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation68 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D69 = rotation68.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation75 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D76 = rotation75.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation77 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D69, vector3D76);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation79 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D69, (double) 100L);
        double double80 = rotation79.getQ1();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation81 = rotation62.applyTo(rotation79);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation87 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(28.016837073341897d, 1.0d, 0.3388903615770647d, (double) 10.0f, true);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation88 = rotation81.applyTo(rotation87);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D89 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D90 = rotation87.applyTo(vector3D89);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D20);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D35);
        org.junit.Assert.assertNotNull(vector3D42);
        org.junit.Assert.assertNotNull(vector3D50);
        org.junit.Assert.assertNotNull(vector3D57);
        org.junit.Assert.assertNotNull(vector3D60);
        org.junit.Assert.assertNotNull(vector3D69);
        org.junit.Assert.assertNotNull(vector3D76);
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + (-0.1855270382668764d) + "'", double80 == (-0.1855270382668764d));
        org.junit.Assert.assertNotNull(rotation81);
        org.junit.Assert.assertNotNull(rotation88);
    }

    @Test
    public void test0665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0665");
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.geometry.euclidean.threed.Rotation rotation2 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D0, 0.28366218546322625d);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0666");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (short) -1, (double) 10.0f, (double) (byte) 100, (-0.005755946541407356d), true);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation11 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D12 = rotation11.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation18 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D19 = rotation18.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D12, vector3D19);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation26 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D27 = rotation26.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation33 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D34 = rotation33.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D27, vector3D34);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation41 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D42 = rotation41.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation48 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D49 = rotation48.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation50 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D42, vector3D49);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation51 = rotation35.applyTo(rotation50);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation52 = rotation20.applyTo(rotation51);
        double[][] doubleArray53 = rotation52.getMatrix();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation55 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray53, (double) 10);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation57 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray53, (double) (byte) 100);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation59 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray53, (double) (short) 0);
        double double60 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation5, rotation59);
        double double61 = rotation59.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder62 = null;
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray63 = rotation59.getAngles(rotationOrder62);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.geometry.euclidean.threed.CardanEulerSingularityException; message: Euler angles singularity");
        } catch (org.apache.commons.math.geometry.euclidean.threed.CardanEulerSingularityException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(vector3D12);
        org.junit.Assert.assertNotNull(vector3D19);
        org.junit.Assert.assertNotNull(vector3D27);
        org.junit.Assert.assertNotNull(vector3D34);
        org.junit.Assert.assertNotNull(vector3D42);
        org.junit.Assert.assertNotNull(vector3D49);
        org.junit.Assert.assertNotNull(rotation51);
        org.junit.Assert.assertNotNull(rotation52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 3.1216925665694406d + "'", double60 == 3.1216925665694406d);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 0.0d + "'", double61 == 0.0d);
    }

    @Test
    public void test0667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0667");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-0.33900504942104487d), (-0.1855270382668764d), 3.7105407653375275d, (-0.8156840252218559d), true);
        org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder6 = null;
        double[] doubleArray7 = rotation5.getAngles(rotationOrder6);
        java.lang.Class<?> wildcardClass8 = doubleArray7.getClass();
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.126948955373088, 2.6747379111016363, -1.2268657468169737]");
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0668");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation0 = null;
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation6 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-0.1855270382668764d), (double) '4', (-10.0d), (double) 1L, false);
        // The following exception was thrown during execution in test generation
        try {
            double double7 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation0, rotation6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0669");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (byte) 0, 0.19838154108920086d, (-116.90457705856772d), (double) (-1L), true);
    }

    @Test
    public void test0670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0670");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double13 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation5, rotation12);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation19 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D20 = rotation19.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation26 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D27 = rotation26.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation28 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D20, vector3D27);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation34 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = rotation28.applyInverseTo(rotation34);
        double double36 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation12, rotation28);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D37 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation43 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D44 = rotation43.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation50 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double51 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation43, rotation50);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation57 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D58 = rotation57.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation64 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double65 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation57, rotation64);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation66 = rotation50.applyInverseTo(rotation57);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation72 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D73 = rotation72.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation79 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D80 = rotation79.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation81 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D73, vector3D80);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation83 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D73, (double) 1L);
        double double84 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation57, rotation83);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation85 = rotation12.applyTo(rotation57);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation86 = rotation12.revert();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation92 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-0.1855270382668764d), (double) 10, (double) (short) -1, (double) 100.0f, false);
        double double93 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation12, rotation92);
        double[][] doubleArray94 = rotation92.getMatrix();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertNotNull(vector3D20);
        org.junit.Assert.assertNotNull(vector3D27);
        org.junit.Assert.assertNotNull(rotation35);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 3.141592653589793d + "'", double36 == 3.141592653589793d);
        org.junit.Assert.assertNotNull(vector3D37);
        org.junit.Assert.assertNotNull(vector3D44);
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertNotNull(vector3D58);
        org.junit.Assert.assertTrue(Double.isNaN(double65));
        org.junit.Assert.assertNotNull(rotation66);
        org.junit.Assert.assertNotNull(vector3D73);
        org.junit.Assert.assertNotNull(vector3D80);
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 0.9456205751905904d + "'", double84 == 0.9456205751905904d);
        org.junit.Assert.assertNotNull(rotation85);
        org.junit.Assert.assertNotNull(rotation86);
        org.junit.Assert.assertTrue(Double.isNaN(double93));
        org.junit.Assert.assertNotNull(doubleArray94);
    }

    @Test
    public void test0671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0671");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation16 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, (double) 1L);
        double double17 = rotation16.getQ2();
        org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder18 = null;
        double[] doubleArray19 = rotation16.getAngles(rotationOrder18);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation25 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D26 = rotation25.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation32 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D33 = rotation32.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation34 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D26, vector3D33);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation40 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D41 = rotation40.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation47 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D48 = rotation47.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation54 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D55 = rotation54.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation56 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D48, vector3D55);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation62 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D63 = rotation62.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation69 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D70 = rotation69.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation71 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D63, vector3D70);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation72 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D33, vector3D41, vector3D55, vector3D70);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation74 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D70, 1.0d);
        org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder75 = null;
        double[] doubleArray76 = rotation74.getAngles(rotationOrder75);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation77 = rotation16.applyInverseTo(rotation74);
        org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder78 = null;
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray79 = rotation77.getAngles(rotationOrder78);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.geometry.euclidean.threed.CardanEulerSingularityException; message: Euler angles singularity");
        } catch (org.apache.commons.math.geometry.euclidean.threed.CardanEulerSingularityException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.33900504942104487d + "'", double17 == 0.33900504942104487d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[2.356194490192345, 0.9999999999999999, -2.356194490192345]");
        org.junit.Assert.assertNotNull(vector3D26);
        org.junit.Assert.assertNotNull(vector3D33);
        org.junit.Assert.assertNotNull(vector3D41);
        org.junit.Assert.assertNotNull(vector3D48);
        org.junit.Assert.assertNotNull(vector3D55);
        org.junit.Assert.assertNotNull(vector3D63);
        org.junit.Assert.assertNotNull(vector3D70);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[2.356194490192345, 0.9999999999999999, -2.356194490192345]");
        org.junit.Assert.assertNotNull(rotation77);
    }

    @Test
    public void test0672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0672");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) 10, 0.0d, (double) (byte) 0, 10.0d, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation11 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (byte) 100, (double) 10L, (double) (short) 100, (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation17 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D18 = rotation17.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation24 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D25 = rotation24.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation26 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D18, vector3D25);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation28 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D18, (double) 100L);
        double double29 = rotation28.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation30 = rotation11.applyInverseTo(rotation28);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation31 = rotation5.applyInverseTo(rotation28);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation32 = rotation31.revert();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation33 = rotation32.revert();
        double double34 = rotation32.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D35 = rotation32.getAxis();
        double double36 = rotation32.getQ2();
        org.junit.Assert.assertNotNull(vector3D18);
        org.junit.Assert.assertNotNull(vector3D25);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + (-0.0d) + "'", double29 == (-0.0d));
        org.junit.Assert.assertNotNull(rotation30);
        org.junit.Assert.assertNotNull(rotation31);
        org.junit.Assert.assertNotNull(rotation32);
        org.junit.Assert.assertNotNull(rotation33);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 9.649660284921133d + "'", double34 == 9.649660284921133d);
        org.junit.Assert.assertNotNull(vector3D35);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 3.7105407653375275d + "'", double36 == 3.7105407653375275d);
    }

    @Test
    public void test0673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0673");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) 100, (double) (byte) -1, (double) (short) 10, 0.9456205751905904d, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation8 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, (-1579.617450290328d));
        org.junit.Assert.assertNotNull(vector3D6);
    }

    @Test
    public void test0674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0674");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-0.1855270382668764d), (double) 10, (double) (short) -1, (double) 100.0f, false);
        double[][] doubleArray6 = rotation5.getMatrix();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation19 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D20 = rotation19.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation21 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D13, vector3D20);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation23 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D13, (double) 100L);
        double double24 = rotation23.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation25 = rotation23.revert();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation31 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (byte) 100, (double) 10L, (double) (short) 100, (double) 1L, false);
        double double32 = rotation31.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation33 = rotation25.applyInverseTo(rotation31);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation34 = rotation5.applyInverseTo(rotation33);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation40 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D41 = rotation40.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation47 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D48 = rotation47.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation49 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D41, vector3D48);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation55 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D56 = rotation55.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation62 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D63 = rotation62.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation64 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D56, vector3D63);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation65 = rotation49.applyTo(rotation64);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation71 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) 10, 0.0d, (double) (byte) 0, 10.0d, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation72 = rotation49.applyTo(rotation71);
        double double73 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation34, rotation49);
        double[][] doubleArray74 = rotation34.getMatrix();
        double double75 = rotation34.getQ0();
        double double76 = rotation34.getQ1();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D20);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + (-0.0d) + "'", double24 == (-0.0d));
        org.junit.Assert.assertNotNull(rotation25);
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertNotNull(rotation33);
        org.junit.Assert.assertNotNull(rotation34);
        org.junit.Assert.assertNotNull(vector3D41);
        org.junit.Assert.assertNotNull(vector3D48);
        org.junit.Assert.assertNotNull(vector3D56);
        org.junit.Assert.assertNotNull(vector3D63);
        org.junit.Assert.assertNotNull(rotation65);
        org.junit.Assert.assertNotNull(rotation72);
        org.junit.Assert.assertTrue(Double.isNaN(double73));
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + (-1579.617450290328d) + "'", double75 == (-1579.617450290328d));
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 8960.928033465932d + "'", double76 == 8960.928033465932d);
    }

    @Test
    public void test0675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0675");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation20.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = rotation27.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation34 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D35 = rotation34.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation36 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D28, vector3D35);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation42 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D43 = rotation42.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation49 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D50 = rotation49.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation51 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D43, vector3D50);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation52 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D13, vector3D21, vector3D35, vector3D50);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation54 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D21, (double) 1);
        double double55 = rotation54.getQ1();
        double double56 = rotation54.getQ1();
        double double57 = rotation54.getQ1();
        double double58 = rotation54.getQ0();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D35);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(vector3D50);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.33900504942104487d + "'", double55 == 0.33900504942104487d);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.33900504942104487d + "'", double56 == 0.33900504942104487d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.33900504942104487d + "'", double57 == 0.33900504942104487d);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.8775825618903728d + "'", double58 == 0.8775825618903728d);
    }

    @Test
    public void test0676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0676");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation20.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = rotation27.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation34 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D35 = rotation34.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation36 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D28, vector3D35);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation42 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D43 = rotation42.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation49 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D50 = rotation49.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation51 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D43, vector3D50);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation52 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D13, vector3D21, vector3D35, vector3D50);
        double double53 = rotation52.getQ3();
        double double54 = rotation52.getQ0();
        double double55 = rotation52.getQ2();
        double[][] doubleArray56 = rotation52.getMatrix();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.geometry.euclidean.threed.Rotation rotation58 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray56, (-76.08862863985493d));
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.geometry.euclidean.threed.NotARotationMatrixException; message: unable to orthogonalize matrix in 10 iterations");
        } catch (org.apache.commons.math.geometry.euclidean.threed.NotARotationMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D35);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(vector3D50);
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertTrue(Double.isNaN(double55));
        org.junit.Assert.assertNotNull(doubleArray56);
    }

    @Test
    public void test0677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0677");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation20.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = rotation27.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation34 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D35 = rotation34.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation36 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D28, vector3D35);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation42 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D43 = rotation42.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation49 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D50 = rotation49.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation51 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D43, vector3D50);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation52 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D13, vector3D21, vector3D35, vector3D50);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation54 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D13, (-0.0d));
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation56 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D13, (double) 1L);
        java.lang.Class<?> wildcardClass57 = vector3D13.getClass();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D35);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(vector3D50);
        org.junit.Assert.assertNotNull(wildcardClass57);
    }

    @Test
    public void test0678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0678");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double13 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation5, rotation12);
        double double14 = rotation12.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation20.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double28 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation20, rotation27);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation34 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D35 = rotation34.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation41 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D42 = rotation41.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation43 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D35, vector3D42);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation49 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation50 = rotation43.applyInverseTo(rotation49);
        double double51 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation27, rotation43);
        double double52 = rotation43.getQ3();
        double double53 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation12, rotation43);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D54 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D55 = rotation12.applyTo(vector3D54);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1.0d + "'", double14 == 1.0d);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertNotNull(vector3D35);
        org.junit.Assert.assertNotNull(vector3D42);
        org.junit.Assert.assertNotNull(rotation50);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 3.141592653589793d + "'", double51 == 3.141592653589793d);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.0d + "'", double52 == 0.0d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 3.141592653589793d + "'", double53 == 3.141592653589793d);
    }

    @Test
    public void test0679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0679");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation20.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = rotation27.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation29 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D21, vector3D28);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D36 = rotation35.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation42 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D43 = rotation42.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation44 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D36, vector3D43);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation45 = rotation29.applyTo(rotation44);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation46 = rotation14.applyTo(rotation45);
        double[][] doubleArray47 = rotation46.getMatrix();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation49 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray47, (double) '4');
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation51 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray47, (double) '4');
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation53 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray47, 0.0d);
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(rotation45);
        org.junit.Assert.assertNotNull(rotation46);
        org.junit.Assert.assertNotNull(doubleArray47);
    }

    @Test
    public void test0680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0680");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) 10.0f, (double) (byte) 10, 0.7881701093115122d, (double) (short) 10, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation11 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0019129169749405736d, (-0.009949438965141721d), 0.7881701093115122d, 97.0d, false);
        double double12 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation5, rotation11);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
    }

    @Test
    public void test0681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0681");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation20.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = rotation27.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation29 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D21, vector3D28);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D36 = rotation35.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation42 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D43 = rotation42.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation44 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D36, vector3D43);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation45 = rotation29.applyTo(rotation44);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation46 = rotation14.applyTo(rotation45);
        double[][] doubleArray47 = rotation46.getMatrix();
        double double48 = rotation46.getQ1();
        double[][] doubleArray49 = rotation46.getMatrix();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation55 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D56 = rotation55.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation62 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D63 = rotation62.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation64 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D56, vector3D63);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation66 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D56, (double) 100L);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation67 = rotation46.applyInverseTo(rotation66);
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(rotation45);
        org.junit.Assert.assertNotNull(rotation46);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(vector3D56);
        org.junit.Assert.assertNotNull(vector3D63);
        org.junit.Assert.assertNotNull(rotation67);
    }

    @Test
    public void test0682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0682");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) 10, 0.0d, (double) (byte) 0, 10.0d, false);
        double double6 = rotation5.getQ1();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation19 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D20 = rotation19.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation21 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D13, vector3D20);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = rotation27.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation34 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D35 = rotation34.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation41 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D42 = rotation41.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation43 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D35, vector3D42);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation49 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D50 = rotation49.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation56 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D57 = rotation56.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation58 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D50, vector3D57);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation59 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D20, vector3D28, vector3D42, vector3D57);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D60 = rotation5.applyTo(vector3D42);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation62 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D42, 0.7881701093115122d);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation68 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D69 = rotation68.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation75 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D76 = rotation75.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation77 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D69, vector3D76);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation79 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D69, (double) 100L);
        double double80 = rotation79.getQ1();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation81 = rotation62.applyTo(rotation79);
        double double82 = rotation79.getQ3();
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D20);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D35);
        org.junit.Assert.assertNotNull(vector3D42);
        org.junit.Assert.assertNotNull(vector3D50);
        org.junit.Assert.assertNotNull(vector3D57);
        org.junit.Assert.assertNotNull(vector3D60);
        org.junit.Assert.assertNotNull(vector3D69);
        org.junit.Assert.assertNotNull(vector3D76);
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + (-0.1855270382668764d) + "'", double80 == (-0.1855270382668764d));
        org.junit.Assert.assertNotNull(rotation81);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + (-0.0d) + "'", double82 == (-0.0d));
    }

    @Test
    public void test0683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0683");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) 100, 0.33900504942104487d, 0.09949879346007118d, true);
        double double6 = rotation5.getQ0();
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
    }

    @Test
    public void test0684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0684");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation20.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = rotation27.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation29 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D21, vector3D28);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation30 = rotation14.applyTo(rotation29);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation36 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) 10, 0.0d, (double) (byte) 0, 10.0d, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation37 = rotation14.applyTo(rotation36);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation38 = rotation37.revert();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation44 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D45 = rotation44.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation51 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double52 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation44, rotation51);
        double double53 = rotation51.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation59 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D60 = rotation59.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation66 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double67 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation59, rotation66);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation73 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D74 = rotation73.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation80 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D81 = rotation80.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation82 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D74, vector3D81);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation88 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation89 = rotation82.applyInverseTo(rotation88);
        double double90 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation66, rotation82);
        double double91 = rotation82.getQ3();
        double double92 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation51, rotation82);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation93 = rotation38.applyInverseTo(rotation82);
        double double94 = rotation93.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation95 = rotation93.revert();
        java.lang.Class<?> wildcardClass96 = rotation95.getClass();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(rotation30);
        org.junit.Assert.assertNotNull(rotation37);
        org.junit.Assert.assertNotNull(rotation38);
        org.junit.Assert.assertNotNull(vector3D45);
        org.junit.Assert.assertTrue(Double.isNaN(double52));
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 1.0d + "'", double53 == 1.0d);
        org.junit.Assert.assertNotNull(vector3D60);
        org.junit.Assert.assertTrue(Double.isNaN(double67));
        org.junit.Assert.assertNotNull(vector3D74);
        org.junit.Assert.assertNotNull(vector3D81);
        org.junit.Assert.assertNotNull(rotation89);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 3.141592653589793d + "'", double90 == 3.141592653589793d);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 0.0d + "'", double91 == 0.0d);
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 3.141592653589793d + "'", double92 == 3.141592653589793d);
        org.junit.Assert.assertNotNull(rotation93);
        org.junit.Assert.assertTrue(Double.isNaN(double94));
        org.junit.Assert.assertNotNull(rotation95);
        org.junit.Assert.assertNotNull(wildcardClass96);
    }

    @Test
    public void test0685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0685");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double13 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation5, rotation12);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation19 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D20 = rotation19.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation26 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double27 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation19, rotation26);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation28 = rotation12.applyInverseTo(rotation19);
        double double29 = rotation28.getQ1();
        double double30 = rotation28.getQ1();
        org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder31 = null;
        double[] doubleArray32 = rotation28.getAngles(rotationOrder31);
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertNotNull(vector3D20);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertNotNull(rotation28);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 10.015527486617021d + "'", double29 == 10.015527486617021d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 10.015527486617021d + "'", double30 == 10.015527486617021d);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[-0.31746367442260337, 1.2637009275001716, 3.026886383418824]");
    }

    @Test
    public void test0686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0686");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation20.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = rotation27.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation29 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D21, vector3D28);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D36 = rotation35.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation42 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D43 = rotation42.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation44 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D36, vector3D43);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation45 = rotation29.applyTo(rotation44);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation46 = rotation14.applyTo(rotation45);
        double[][] doubleArray47 = rotation46.getMatrix();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation49 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray47, (double) 10);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation51 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray47, (double) (byte) 100);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation57 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) 10, 0.0d, (double) (byte) 0, 10.0d, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation63 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (byte) 100, (double) 10L, (double) (short) 100, (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation69 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D70 = rotation69.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation76 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D77 = rotation76.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation78 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D70, vector3D77);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation80 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D70, (double) 100L);
        double double81 = rotation80.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation82 = rotation63.applyInverseTo(rotation80);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation83 = rotation57.applyInverseTo(rotation80);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation84 = rotation51.applyInverseTo(rotation57);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation85 = rotation57.revert();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation86 = rotation57.revert();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(rotation45);
        org.junit.Assert.assertNotNull(rotation46);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(vector3D70);
        org.junit.Assert.assertNotNull(vector3D77);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + (-0.0d) + "'", double81 == (-0.0d));
        org.junit.Assert.assertNotNull(rotation82);
        org.junit.Assert.assertNotNull(rotation83);
        org.junit.Assert.assertNotNull(rotation84);
        org.junit.Assert.assertNotNull(rotation85);
        org.junit.Assert.assertNotNull(rotation86);
    }

    @Test
    public void test0687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0687");
        org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.geometry.euclidean.threed.Rotation rotation4 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(rotationOrder0, 0.3388903615770647d, (double) '4', 0.20120377604668613d);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0688");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation20.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = rotation27.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation29 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D21, vector3D28);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D36 = rotation35.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation42 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D43 = rotation42.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation44 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D36, vector3D43);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation45 = rotation29.applyTo(rotation44);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation46 = rotation14.applyTo(rotation45);
        double[][] doubleArray47 = rotation46.getMatrix();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation49 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray47, (double) '4');
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation51 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray47, 0.0d);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation53 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray47, 0.20120377604668613d);
        double double54 = rotation53.getQ2();
        double double55 = rotation53.getAngle();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(rotation45);
        org.junit.Assert.assertNotNull(rotation46);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d);
    }

    @Test
    public void test0689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0689");
        org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.geometry.euclidean.threed.Rotation rotation4 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(rotationOrder0, (-0.20557451782484024d), (-0.08683602698544203d), (-0.005755946541407356d));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0690");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double13 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation5, rotation12);
        double double14 = rotation12.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation20.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = rotation27.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation29 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D21, vector3D28);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D36 = rotation35.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation42 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D43 = rotation42.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation44 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D36, vector3D43);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation50 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D51 = rotation50.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation57 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D58 = rotation57.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation59 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D51, vector3D58);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation60 = rotation44.applyTo(rotation59);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation61 = rotation29.applyTo(rotation60);
        double[][] doubleArray62 = rotation61.getMatrix();
        double double63 = rotation61.getQ1();
        double[][] doubleArray64 = rotation61.getMatrix();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation66 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray64, (double) 100L);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation68 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray64, (double) 0);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation70 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray64, (double) 'a');
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D71 = rotation70.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D72 = rotation12.applyInverseTo(vector3D71);
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 3.141592653589793d + "'", double14 == 3.141592653589793d);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(vector3D51);
        org.junit.Assert.assertNotNull(vector3D58);
        org.junit.Assert.assertNotNull(rotation60);
        org.junit.Assert.assertNotNull(rotation61);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 0.0d + "'", double63 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertNotNull(vector3D71);
        org.junit.Assert.assertNotNull(vector3D72);
    }

    @Test
    public void test0691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0691");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.09949879346007118d, (-0.0d), (double) 100, (double) 0L, true);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation11 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D12 = rotation11.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation18 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D19 = rotation18.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D12, vector3D19);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation26 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = rotation20.applyInverseTo(rotation26);
        double double28 = rotation26.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation29 = rotation5.applyInverseTo(rotation26);
        double double30 = rotation29.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation36 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D37 = rotation36.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation43 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D44 = rotation43.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation45 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D37, vector3D44);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation51 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D52 = rotation51.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation58 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D59 = rotation58.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation65 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D66 = rotation65.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation67 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D59, vector3D66);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation73 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D74 = rotation73.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation80 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D81 = rotation80.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation82 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D74, vector3D81);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation83 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D44, vector3D52, vector3D66, vector3D81);
        double double84 = rotation83.getQ1();
        double double85 = rotation83.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation91 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-0.1855270382668764d), (double) 10, (double) (short) -1, (double) 100.0f, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation92 = rotation91.revert();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation93 = rotation83.applyInverseTo(rotation91);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D94 = rotation93.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D95 = rotation29.applyInverseTo(vector3D94);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D96 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.geometry.euclidean.threed.Rotation rotation97 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D95, vector3D96);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(vector3D12);
        org.junit.Assert.assertNotNull(vector3D19);
        org.junit.Assert.assertNotNull(rotation27);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 3.141592653589793d + "'", double28 == 3.141592653589793d);
        org.junit.Assert.assertNotNull(rotation29);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 9.999000062556641d + "'", double30 == 9.999000062556641d);
        org.junit.Assert.assertNotNull(vector3D37);
        org.junit.Assert.assertNotNull(vector3D44);
        org.junit.Assert.assertNotNull(vector3D52);
        org.junit.Assert.assertNotNull(vector3D59);
        org.junit.Assert.assertNotNull(vector3D66);
        org.junit.Assert.assertNotNull(vector3D74);
        org.junit.Assert.assertNotNull(vector3D81);
        org.junit.Assert.assertTrue(Double.isNaN(double84));
        org.junit.Assert.assertTrue(Double.isNaN(double85));
        org.junit.Assert.assertNotNull(rotation92);
        org.junit.Assert.assertNotNull(rotation93);
        org.junit.Assert.assertNotNull(vector3D94);
        org.junit.Assert.assertNotNull(vector3D95);
    }

    @Test
    public void test0692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0692");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation20.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = rotation27.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation34 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D35 = rotation34.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation36 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D28, vector3D35);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation42 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D43 = rotation42.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation49 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D50 = rotation49.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation51 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D43, vector3D50);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation52 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D13, vector3D21, vector3D35, vector3D50);
        double double53 = rotation52.getQ1();
        double[][] doubleArray54 = rotation52.getMatrix();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation55 = rotation52.revert();
        double double56 = rotation52.getQ0();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation57 = rotation52.revert();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D35);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(vector3D50);
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(rotation55);
        org.junit.Assert.assertTrue(Double.isNaN(double56));
        org.junit.Assert.assertNotNull(rotation57);
    }

    @Test
    public void test0693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0693");
        org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.geometry.euclidean.threed.Rotation rotation4 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(rotationOrder0, (double) ' ', (double) (short) 0, (-1.01885404374415d));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0694");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation16 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, (double) 100L);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation22 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-1.0d), (double) (byte) 10, (double) (byte) 100, (double) 0L, true);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation28 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D29 = rotation28.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D36 = rotation35.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation37 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D29, vector3D36);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D38 = rotation22.applyTo(vector3D29);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation44 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D45 = rotation44.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation51 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D52 = rotation51.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation58 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D59 = rotation58.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation60 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D52, vector3D59);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation62 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D52, (double) 100L);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation63 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D45, vector3D52);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation69 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D70 = rotation69.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation71 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D38, vector3D52, vector3D70);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation77 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D78 = rotation77.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation84 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D85 = rotation84.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation86 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D78, vector3D85);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation87 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D70, vector3D85);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation88 = rotation87.revert();
        double double89 = rotation88.getQ0();
        double double90 = rotation88.getAngle();
        double[][] doubleArray91 = rotation88.getMatrix();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation93 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray91, 28.016837073341897d);
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D29);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D38);
        org.junit.Assert.assertNotNull(vector3D45);
        org.junit.Assert.assertNotNull(vector3D52);
        org.junit.Assert.assertNotNull(vector3D59);
        org.junit.Assert.assertNotNull(vector3D70);
        org.junit.Assert.assertNotNull(vector3D78);
        org.junit.Assert.assertNotNull(vector3D85);
        org.junit.Assert.assertNotNull(rotation88);
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + (-1.0d) + "'", double89 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 0.0d + "'", double90 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray91);
    }

    @Test
    public void test0695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0695");
        org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.geometry.euclidean.threed.Rotation rotation4 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(rotationOrder0, (double) 100, 0.047917108096983706d, (double) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0696");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double13 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation5, rotation12);
        double double14 = rotation12.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation20.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double28 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation20, rotation27);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation34 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D35 = rotation34.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation41 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double42 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation34, rotation41);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation43 = rotation27.applyInverseTo(rotation34);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation44 = rotation12.applyTo(rotation34);
        double double45 = rotation12.getAngle();
        double double46 = rotation12.getQ3();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 3.141592653589793d + "'", double14 == 3.141592653589793d);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertNotNull(vector3D35);
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertNotNull(rotation43);
        org.junit.Assert.assertNotNull(rotation44);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 3.141592653589793d + "'", double45 == 3.141592653589793d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 1.0d + "'", double46 == 1.0d);
    }

    @Test
    public void test0697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0697");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (short) -1, (double) 10.0f, (double) (byte) 100, (-0.005755946541407356d), true);
        double[][] doubleArray6 = rotation5.getMatrix();
        java.lang.Class<?> wildcardClass7 = doubleArray6.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0698");
        org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.geometry.euclidean.threed.Rotation rotation4 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(rotationOrder0, (-76.08862863985493d), 0.9856688089870894d, 0.7881701093115122d);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0699");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation19 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D20 = rotation19.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation21 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D13, vector3D20);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation23 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D13, (double) 100L);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation29 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-1.0d), (double) (byte) 10, (double) (byte) 100, (double) 0L, true);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D36 = rotation35.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation42 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D43 = rotation42.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation44 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D36, vector3D43);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D45 = rotation29.applyTo(vector3D36);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation51 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D52 = rotation51.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation58 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D59 = rotation58.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation65 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D66 = rotation65.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation67 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D59, vector3D66);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation69 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D59, (double) 100L);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation70 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D52, vector3D59);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation76 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D77 = rotation76.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation78 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D13, vector3D45, vector3D59, vector3D77);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation80 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D59, (double) 1.0f);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D81 = rotation5.applyInverseTo(vector3D59);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation83 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D81, (-0.11924330679564402d));
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation84 = rotation83.revert();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D20);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(vector3D45);
        org.junit.Assert.assertNotNull(vector3D52);
        org.junit.Assert.assertNotNull(vector3D59);
        org.junit.Assert.assertNotNull(vector3D66);
        org.junit.Assert.assertNotNull(vector3D77);
        org.junit.Assert.assertNotNull(vector3D81);
        org.junit.Assert.assertNotNull(rotation84);
    }

    @Test
    public void test0700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0700");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double13 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation5, rotation12);
        double double14 = rotation12.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation20.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double28 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation20, rotation27);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation34 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D35 = rotation34.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation41 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double42 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation34, rotation41);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation43 = rotation27.applyInverseTo(rotation34);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation44 = rotation12.applyTo(rotation34);
        org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder45 = null;
        double[] doubleArray46 = rotation44.getAngles(rotationOrder45);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation52 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D53 = rotation52.getAxis();
        double double54 = rotation52.getQ0();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation55 = rotation44.applyInverseTo(rotation52);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation61 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) 100, 0.33900504942104487d, 0.09949879346007118d, true);
        double double62 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation52, rotation61);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation68 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (short) -1, (double) 10.0f, (double) (byte) 100, (-0.005755946541407356d), true);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation69 = rotation52.applyTo(rotation68);
        java.lang.Class<?> wildcardClass70 = rotation52.getClass();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 3.141592653589793d + "'", double14 == 3.141592653589793d);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertNotNull(vector3D35);
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertNotNull(rotation43);
        org.junit.Assert.assertNotNull(rotation44);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[-0.31746367442260337, 1.2637009275001716, 3.026886383418824]");
        org.junit.Assert.assertNotNull(vector3D53);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.9996303825414301d + "'", double54 == 0.9996303825414301d);
        org.junit.Assert.assertNotNull(rotation55);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 3.1030128410395363d + "'", double62 == 3.1030128410395363d);
        org.junit.Assert.assertNotNull(rotation69);
        org.junit.Assert.assertNotNull(wildcardClass70);
    }

    @Test
    public void test0701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0701");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation20.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double28 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation20, rotation27);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation34 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D35 = rotation34.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation41 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double42 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation34, rotation41);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation43 = rotation27.applyInverseTo(rotation34);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D44 = rotation43.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation45 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D44);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation46 = rotation45.revert();
        double double47 = rotation45.getQ2();
        double double48 = rotation45.getQ1();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertNotNull(vector3D35);
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertNotNull(rotation43);
        org.junit.Assert.assertNotNull(vector3D44);
        org.junit.Assert.assertNotNull(rotation46);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + (-0.06415703545444096d) + "'", double47 == (-0.06415703545444096d));
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.06415703545444096d + "'", double48 == 0.06415703545444096d);
    }

    @Test
    public void test0702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0702");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation11 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-1.0d), (double) (byte) 10, (double) (byte) 100, (double) 0L, true);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation17 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D18 = rotation17.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation24 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D25 = rotation24.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation26 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D18, vector3D25);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D27 = rotation11.applyTo(vector3D18);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = rotation5.applyTo(vector3D27);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation34 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-0.1855270382668764d), (double) 10, (double) (short) -1, (double) 100.0f, false);
        double[][] doubleArray35 = rotation34.getMatrix();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation41 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D42 = rotation41.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation48 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D49 = rotation48.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation50 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D42, vector3D49);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation52 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D42, (double) 100L);
        double double53 = rotation52.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation54 = rotation52.revert();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation60 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (byte) 100, (double) 10L, (double) (short) 100, (double) 1L, false);
        double double61 = rotation60.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation62 = rotation54.applyInverseTo(rotation60);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation63 = rotation34.applyInverseTo(rotation62);
        double double64 = rotation63.getQ1();
        double double65 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation5, rotation63);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation66 = rotation5.revert();
        double double67 = rotation66.getQ1();
        java.lang.Class<?> wildcardClass68 = rotation66.getClass();
        org.junit.Assert.assertNotNull(vector3D18);
        org.junit.Assert.assertNotNull(vector3D25);
        org.junit.Assert.assertNotNull(vector3D27);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(vector3D42);
        org.junit.Assert.assertNotNull(vector3D49);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + (-0.0d) + "'", double53 == (-0.0d));
        org.junit.Assert.assertNotNull(rotation54);
        org.junit.Assert.assertTrue(Double.isNaN(double61));
        org.junit.Assert.assertNotNull(rotation62);
        org.junit.Assert.assertNotNull(rotation63);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 8960.928033465932d + "'", double64 == 8960.928033465932d);
        org.junit.Assert.assertTrue(Double.isNaN(double65));
        org.junit.Assert.assertNotNull(rotation66);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 10.0d + "'", double67 == 10.0d);
        org.junit.Assert.assertNotNull(wildcardClass68);
    }

    @Test
    public void test0703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0703");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation20.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = rotation27.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation29 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D21, vector3D28);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D36 = rotation35.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation42 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D43 = rotation42.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation44 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D36, vector3D43);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation45 = rotation29.applyTo(rotation44);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation46 = rotation14.applyTo(rotation45);
        double[][] doubleArray47 = rotation46.getMatrix();
        double[][] doubleArray48 = rotation46.getMatrix();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation50 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray48, (double) (short) 100);
        double double51 = rotation50.getQ3();
        double[][] doubleArray52 = rotation50.getMatrix();
        double double53 = rotation50.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder54 = null;
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray55 = rotation50.getAngles(rotationOrder54);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.geometry.euclidean.threed.CardanEulerSingularityException; message: Euler angles singularity");
        } catch (org.apache.commons.math.geometry.euclidean.threed.CardanEulerSingularityException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(rotation45);
        org.junit.Assert.assertNotNull(rotation46);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.0d + "'", double51 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.0d + "'", double53 == 0.0d);
    }

    @Test
    public void test0704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0704");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation20.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = rotation27.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation34 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D35 = rotation34.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation36 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D28, vector3D35);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation42 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D43 = rotation42.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation49 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D50 = rotation49.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation51 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D43, vector3D50);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation52 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D13, vector3D21, vector3D35, vector3D50);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation54 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D21, (double) 1);
        double double55 = rotation54.getQ1();
        double double56 = rotation54.getQ1();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D57 = rotation54.getAxis();
        double double58 = rotation54.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder59 = null;
        double[] doubleArray60 = rotation54.getAngles(rotationOrder59);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation66 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D67 = rotation66.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation73 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D74 = rotation73.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation75 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D67, vector3D74);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation81 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D82 = rotation81.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation88 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D89 = rotation88.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation90 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D82, vector3D89);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation91 = rotation75.applyTo(rotation90);
        double double92 = rotation90.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation93 = rotation90.revert();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation94 = rotation54.applyTo(rotation93);
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D35);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(vector3D50);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.33900504942104487d + "'", double55 == 0.33900504942104487d);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.33900504942104487d + "'", double56 == 0.33900504942104487d);
        org.junit.Assert.assertNotNull(vector3D57);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 1.0d + "'", double58 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[2.356194490192345, 0.9999999999999999, -2.356194490192345]");
        org.junit.Assert.assertNotNull(vector3D67);
        org.junit.Assert.assertNotNull(vector3D74);
        org.junit.Assert.assertNotNull(vector3D82);
        org.junit.Assert.assertNotNull(vector3D89);
        org.junit.Assert.assertNotNull(rotation91);
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 0.0d + "'", double92 == 0.0d);
        org.junit.Assert.assertNotNull(rotation93);
        org.junit.Assert.assertNotNull(rotation94);
    }

    @Test
    public void test0705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0705");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation20.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = rotation27.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation34 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D35 = rotation34.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation36 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D28, vector3D35);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation42 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D43 = rotation42.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation49 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D50 = rotation49.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation51 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D43, vector3D50);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation52 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D13, vector3D21, vector3D35, vector3D50);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation54 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D50, 1.0d);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation56 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D50, (double) 10);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation57 = rotation56.revert();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D58 = rotation56.getAxis();
        double[][] doubleArray59 = rotation56.getMatrix();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D35);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(vector3D50);
        org.junit.Assert.assertNotNull(rotation57);
        org.junit.Assert.assertNotNull(vector3D58);
        org.junit.Assert.assertNotNull(doubleArray59);
    }

    @Test
    public void test0706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0706");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) 10, 0.0d, (double) (byte) 0, 10.0d, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation11 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (byte) 100, (double) 10L, (double) (short) 100, (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation17 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D18 = rotation17.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation24 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D25 = rotation24.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation26 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D18, vector3D25);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation28 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D18, (double) 100L);
        double double29 = rotation28.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation30 = rotation11.applyInverseTo(rotation28);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation31 = rotation5.applyInverseTo(rotation28);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation32 = rotation31.revert();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D33 = rotation32.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation39 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D40 = rotation39.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation46 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double47 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation39, rotation46);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation53 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D54 = rotation53.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation60 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D61 = rotation60.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation62 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D54, vector3D61);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation68 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation69 = rotation62.applyInverseTo(rotation68);
        double double70 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation46, rotation62);
        double double71 = rotation62.getQ3();
        double double72 = rotation62.getQ0();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation73 = rotation32.applyInverseTo(rotation62);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D74 = rotation73.getAxis();
        org.junit.Assert.assertNotNull(vector3D18);
        org.junit.Assert.assertNotNull(vector3D25);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + (-0.0d) + "'", double29 == (-0.0d));
        org.junit.Assert.assertNotNull(rotation30);
        org.junit.Assert.assertNotNull(rotation31);
        org.junit.Assert.assertNotNull(rotation32);
        org.junit.Assert.assertNotNull(vector3D33);
        org.junit.Assert.assertNotNull(vector3D40);
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertNotNull(vector3D54);
        org.junit.Assert.assertNotNull(vector3D61);
        org.junit.Assert.assertNotNull(rotation69);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 3.141592653589793d + "'", double70 == 3.141592653589793d);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 0.0d + "'", double71 == 0.0d);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 1.0d + "'", double72 == 1.0d);
        org.junit.Assert.assertNotNull(rotation73);
        org.junit.Assert.assertNotNull(vector3D74);
    }

    @Test
    public void test0707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0707");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation11 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-1.0d), (double) (byte) 10, (double) (byte) 100, (double) 0L, true);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation17 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D18 = rotation17.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation24 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D25 = rotation24.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation26 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D18, vector3D25);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D27 = rotation11.applyTo(vector3D18);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = rotation5.applyTo(vector3D27);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation30 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D27, (double) 1.0f);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation36 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D37 = rotation36.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation43 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D44 = rotation43.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation45 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D37, vector3D44);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation51 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D52 = rotation51.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation58 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D59 = rotation58.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation65 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D66 = rotation65.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation67 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D59, vector3D66);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation73 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D74 = rotation73.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation80 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D81 = rotation80.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation82 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D74, vector3D81);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation83 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D44, vector3D52, vector3D66, vector3D81);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation85 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D44, (-0.0d));
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation87 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D44, (double) 1L);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation88 = rotation30.applyInverseTo(rotation87);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation89 = rotation88.revert();
        double[][] doubleArray90 = rotation88.getMatrix();
        double double91 = rotation88.getQ0();
        double double92 = rotation88.getQ0();
        org.junit.Assert.assertNotNull(vector3D18);
        org.junit.Assert.assertNotNull(vector3D25);
        org.junit.Assert.assertNotNull(vector3D27);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D37);
        org.junit.Assert.assertNotNull(vector3D44);
        org.junit.Assert.assertNotNull(vector3D52);
        org.junit.Assert.assertNotNull(vector3D59);
        org.junit.Assert.assertNotNull(vector3D66);
        org.junit.Assert.assertNotNull(vector3D74);
        org.junit.Assert.assertNotNull(vector3D81);
        org.junit.Assert.assertNotNull(rotation88);
        org.junit.Assert.assertNotNull(rotation89);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + (-0.8156840252218559d) + "'", double91 == (-0.8156840252218559d));
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + (-0.8156840252218559d) + "'", double92 == (-0.8156840252218559d));
    }

    @Test
    public void test0708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0708");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.8890808091523411d, (double) (byte) -1, (double) 100L, 3.1390038567388605d, false);
    }

    @Test
    public void test0709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0709");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation16 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, (double) 100L);
        double double17 = rotation16.getQ3();
        double double18 = rotation16.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D19 = rotation16.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation25 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D26 = rotation25.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation32 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D33 = rotation32.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation34 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D26, vector3D33);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation40 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D41 = rotation40.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation47 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D48 = rotation47.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation54 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D55 = rotation54.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation56 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D48, vector3D55);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation62 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D63 = rotation62.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation69 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D70 = rotation69.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation71 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D63, vector3D70);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation72 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D33, vector3D41, vector3D55, vector3D70);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation73 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D19, vector3D33);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation74 = rotation73.revert();
        double[][] doubleArray75 = rotation74.getMatrix();
        java.lang.Class<?> wildcardClass76 = rotation74.getClass();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-0.0d) + "'", double17 == (-0.0d));
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + (-0.0d) + "'", double18 == (-0.0d));
        org.junit.Assert.assertNotNull(vector3D19);
        org.junit.Assert.assertNotNull(vector3D26);
        org.junit.Assert.assertNotNull(vector3D33);
        org.junit.Assert.assertNotNull(vector3D41);
        org.junit.Assert.assertNotNull(vector3D48);
        org.junit.Assert.assertNotNull(vector3D55);
        org.junit.Assert.assertNotNull(vector3D63);
        org.junit.Assert.assertNotNull(vector3D70);
        org.junit.Assert.assertNotNull(rotation74);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertNotNull(wildcardClass76);
    }

    @Test
    public void test0710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0710");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.09949879346007118d, (-0.0d), (double) 100, (double) 0L, true);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation11 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D12 = rotation11.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation18 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D19 = rotation18.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D12, vector3D19);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation26 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = rotation20.applyInverseTo(rotation26);
        double double28 = rotation26.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation29 = rotation5.applyInverseTo(rotation26);
        double double30 = rotation5.getQ1();
        org.junit.Assert.assertNotNull(vector3D12);
        org.junit.Assert.assertNotNull(vector3D19);
        org.junit.Assert.assertNotNull(rotation27);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 3.141592653589793d + "'", double28 == 3.141592653589793d);
        org.junit.Assert.assertNotNull(rotation29);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + (-0.0d) + "'", double30 == (-0.0d));
    }

    @Test
    public void test0711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0711");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double13 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation5, rotation12);
        double double14 = rotation12.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation20.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = rotation27.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation29 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D21, vector3D28);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D36 = rotation35.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation42 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D43 = rotation42.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation44 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D36, vector3D43);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation45 = rotation29.applyTo(rotation44);
        double double46 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation12, rotation45);
        double double47 = rotation12.getQ0();
        double double48 = rotation12.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder49 = null;
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray50 = rotation12.getAngles(rotationOrder49);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.geometry.euclidean.threed.CardanEulerSingularityException; message: Euler angles singularity");
        } catch (org.apache.commons.math.geometry.euclidean.threed.CardanEulerSingularityException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 3.141592653589793d + "'", double14 == 3.141592653589793d);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(rotation45);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 3.141592653589793d + "'", double46 == 3.141592653589793d);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 3.141592653589793d + "'", double48 == 3.141592653589793d);
    }

    @Test
    public void test0712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0712");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double13 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation5, rotation12);
        double double14 = rotation12.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation20.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = rotation27.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation29 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D21, vector3D28);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D36 = rotation35.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation42 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D43 = rotation42.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation44 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D36, vector3D43);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation45 = rotation29.applyTo(rotation44);
        double double46 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation12, rotation45);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation52 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D53 = rotation52.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation59 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double60 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation52, rotation59);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation66 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D67 = rotation66.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation73 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double74 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation66, rotation73);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation75 = rotation59.applyInverseTo(rotation66);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation76 = rotation12.applyInverseTo(rotation66);
        double[][] doubleArray77 = rotation12.getMatrix();
        double double78 = rotation12.getQ3();
        double double79 = rotation12.getQ0();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation80 = rotation12.revert();
        double double81 = rotation12.getQ3();
        double double82 = rotation12.getQ2();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 3.141592653589793d + "'", double14 == 3.141592653589793d);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(rotation45);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 3.141592653589793d + "'", double46 == 3.141592653589793d);
        org.junit.Assert.assertNotNull(vector3D53);
        org.junit.Assert.assertTrue(Double.isNaN(double60));
        org.junit.Assert.assertNotNull(vector3D67);
        org.junit.Assert.assertTrue(Double.isNaN(double74));
        org.junit.Assert.assertNotNull(rotation75);
        org.junit.Assert.assertNotNull(rotation76);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 1.0d + "'", double78 == 1.0d);
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 0.0d + "'", double79 == 0.0d);
        org.junit.Assert.assertNotNull(rotation80);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 1.0d + "'", double81 == 1.0d);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + (-1.0d) + "'", double82 == (-1.0d));
    }

    @Test
    public void test0713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0713");
        org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.geometry.euclidean.threed.Rotation rotation4 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(rotationOrder0, (-1.01885404374415d), 2.4682434157065027d, (-0.5d));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0714");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation20.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = rotation27.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation29 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D21, vector3D28);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D36 = rotation35.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation42 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D43 = rotation42.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation44 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D36, vector3D43);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation45 = rotation29.applyTo(rotation44);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation46 = rotation14.applyTo(rotation45);
        double[][] doubleArray47 = rotation46.getMatrix();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation49 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray47, (double) 10);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation51 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray47, (double) (byte) 100);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation53 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray47, (double) (short) 0);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation55 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray47, (double) 1);
        java.lang.Class<?> wildcardClass56 = rotation55.getClass();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(rotation45);
        org.junit.Assert.assertNotNull(rotation46);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(wildcardClass56);
    }

    @Test
    public void test0715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0715");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double13 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation5, rotation12);
        double double14 = rotation12.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation20.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = rotation27.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation29 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D21, vector3D28);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D36 = rotation35.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation42 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D43 = rotation42.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation44 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D36, vector3D43);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation45 = rotation29.applyTo(rotation44);
        double double46 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation12, rotation45);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation52 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D53 = rotation52.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation59 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double60 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation52, rotation59);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation66 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D67 = rotation66.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation73 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double74 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation66, rotation73);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation75 = rotation59.applyInverseTo(rotation66);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation76 = rotation12.applyInverseTo(rotation66);
        double double77 = rotation66.getQ1();
        double double78 = rotation66.getQ0();
        double double79 = rotation66.getQ3();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 3.141592653589793d + "'", double14 == 3.141592653589793d);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(rotation45);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 3.141592653589793d + "'", double46 == 3.141592653589793d);
        org.junit.Assert.assertNotNull(vector3D53);
        org.junit.Assert.assertTrue(Double.isNaN(double60));
        org.junit.Assert.assertNotNull(vector3D67);
        org.junit.Assert.assertTrue(Double.isNaN(double74));
        org.junit.Assert.assertNotNull(rotation75);
        org.junit.Assert.assertNotNull(rotation76);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 0.01922366120271981d + "'", double77 == 0.01922366120271981d);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 0.9996303825414301d + "'", double78 == 0.9996303825414301d);
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 0.0d + "'", double79 == 0.0d);
    }

    @Test
    public void test0716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0716");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-1.0d), (double) (byte) 10, (double) (byte) 100, (double) 0L, true);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation11 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D12 = rotation11.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation5.applyInverseTo(vector3D12);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation19 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D20 = rotation19.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation26 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D27 = rotation26.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation28 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D20, vector3D27);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation30 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D20, (double) 1L);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation31 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D13, vector3D20);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation37 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D38 = rotation37.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation44 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D45 = rotation44.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation46 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D38, vector3D45);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation48 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D38, (double) 1L);
        double double49 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation31, rotation48);
        double double50 = rotation31.getAngle();
        org.junit.Assert.assertNotNull(vector3D12);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D20);
        org.junit.Assert.assertNotNull(vector3D27);
        org.junit.Assert.assertNotNull(vector3D38);
        org.junit.Assert.assertNotNull(vector3D45);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 1.6481559849923735d + "'", double49 == 1.6481559849923735d);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 1.3713780210687443d + "'", double50 == 1.3713780210687443d);
    }

    @Test
    public void test0717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0717");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (short) 0, (-8.717516503499631d), 0.7177793011139257d, 9.649660284921133d, false);
    }

    @Test
    public void test0718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0718");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double13 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation5, rotation12);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation19 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D20 = rotation19.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation26 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double27 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation19, rotation26);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation28 = rotation12.applyInverseTo(rotation19);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation34 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D35 = rotation34.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation41 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D42 = rotation41.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation43 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D35, vector3D42);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation45 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D35, (double) 1L);
        double double46 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation19, rotation45);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation47 = rotation19.revert();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation53 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-0.1855270382668764d), (double) 10, (double) (short) -1, (double) 100.0f, false);
        double[][] doubleArray54 = rotation53.getMatrix();
        double[][] doubleArray55 = rotation53.getMatrix();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D56 = rotation53.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation57 = rotation47.applyTo(rotation53);
        java.lang.Class<?> wildcardClass58 = rotation47.getClass();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertNotNull(vector3D20);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertNotNull(rotation28);
        org.junit.Assert.assertNotNull(vector3D35);
        org.junit.Assert.assertNotNull(vector3D42);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.9456205751905904d + "'", double46 == 0.9456205751905904d);
        org.junit.Assert.assertNotNull(rotation47);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(vector3D56);
        org.junit.Assert.assertNotNull(rotation57);
        org.junit.Assert.assertNotNull(wildcardClass58);
    }

    @Test
    public void test0719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0719");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double13 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation5, rotation12);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation19 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D20 = rotation19.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation26 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double27 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation19, rotation26);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation28 = rotation12.applyInverseTo(rotation19);
        double double29 = rotation12.getQ3();
        double double30 = rotation12.getQ1();
        double double31 = rotation12.getQ0();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertNotNull(vector3D20);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertNotNull(rotation28);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 1.0d + "'", double29 == 1.0d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 10.0d + "'", double30 == 10.0d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d);
    }

    @Test
    public void test0720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0720");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation0 = org.apache.commons.math.geometry.euclidean.threed.Rotation.IDENTITY;
        double double1 = rotation0.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation2 = rotation0.revert();
        double double3 = rotation2.getQ1();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation9 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D10 = rotation9.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation16 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double17 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation9, rotation16);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation23 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D24 = rotation23.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation30 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D31 = rotation30.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation32 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D24, vector3D31);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation38 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation39 = rotation32.applyInverseTo(rotation38);
        double double40 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation16, rotation32);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D41 = rotation16.getAxis();
        double[][] doubleArray42 = rotation16.getMatrix();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation48 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-0.0d), (double) (short) 1, 0.0d, 0.9996303825414301d, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation49 = rotation16.applyTo(rotation48);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation50 = rotation2.applyTo(rotation48);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation56 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D57 = rotation56.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation63 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D64 = rotation63.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation65 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D57, vector3D64);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D66 = rotation50.applyInverseTo(vector3D57);
        org.junit.Assert.assertNotNull(rotation0);
        org.junit.Assert.assertTrue("'" + double1 + "' != '" + 0.0d + "'", double1 == 0.0d);
        org.junit.Assert.assertNotNull(rotation2);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertNotNull(vector3D10);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertNotNull(vector3D24);
        org.junit.Assert.assertNotNull(vector3D31);
        org.junit.Assert.assertNotNull(rotation39);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 3.141592653589793d + "'", double40 == 3.141592653589793d);
        org.junit.Assert.assertNotNull(vector3D41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(rotation49);
        org.junit.Assert.assertNotNull(rotation50);
        org.junit.Assert.assertNotNull(vector3D57);
        org.junit.Assert.assertNotNull(vector3D64);
        org.junit.Assert.assertNotNull(vector3D66);
    }

    @Test
    public void test0721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0721");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation20.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = rotation27.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation29 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D21, vector3D28);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D36 = rotation35.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation42 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D43 = rotation42.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation44 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D36, vector3D43);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation45 = rotation29.applyTo(rotation44);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation46 = rotation14.applyTo(rotation45);
        double[][] doubleArray47 = rotation46.getMatrix();
        double double48 = rotation46.getQ1();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D49 = rotation46.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder50 = null;
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray51 = rotation46.getAngles(rotationOrder50);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.geometry.euclidean.threed.CardanEulerSingularityException; message: Euler angles singularity");
        } catch (org.apache.commons.math.geometry.euclidean.threed.CardanEulerSingularityException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(rotation45);
        org.junit.Assert.assertNotNull(rotation46);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d);
        org.junit.Assert.assertNotNull(vector3D49);
    }

    @Test
    public void test0722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0722");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-0.9649660284921133d), (double) (short) 100, 3.1390038567388605d, (-0.280459243752156d), true);
    }

    @Test
    public void test0723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0723");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation20.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = rotation27.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation29 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D21, vector3D28);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D36 = rotation35.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation42 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D43 = rotation42.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation44 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D36, vector3D43);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation45 = rotation29.applyTo(rotation44);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation46 = rotation14.applyTo(rotation45);
        double[][] doubleArray47 = rotation46.getMatrix();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation53 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-1.0d), (double) (byte) 10, (double) (byte) 100, (double) 0L, true);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation59 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D60 = rotation59.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation66 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D67 = rotation66.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation68 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D60, vector3D67);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D69 = rotation53.applyTo(vector3D60);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D70 = rotation46.applyInverseTo(vector3D60);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation72 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D70, (double) 1L);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation74 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D70, (double) (-1.0f));
        java.lang.Class<?> wildcardClass75 = vector3D70.getClass();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(rotation45);
        org.junit.Assert.assertNotNull(rotation46);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(vector3D60);
        org.junit.Assert.assertNotNull(vector3D67);
        org.junit.Assert.assertNotNull(vector3D69);
        org.junit.Assert.assertNotNull(vector3D70);
        org.junit.Assert.assertNotNull(wildcardClass75);
    }

    @Test
    public void test0724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0724");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation20.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = rotation27.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation29 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D21, vector3D28);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D36 = rotation35.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation42 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D43 = rotation42.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation44 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D36, vector3D43);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation45 = rotation29.applyTo(rotation44);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation46 = rotation14.applyTo(rotation45);
        double[][] doubleArray47 = rotation46.getMatrix();
        double double48 = rotation46.getQ1();
        double[][] doubleArray49 = rotation46.getMatrix();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation51 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray49, (double) 100L);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation53 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray49, 0.7881701093115122d);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation55 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray49, 0.9456205751905904d);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.geometry.euclidean.threed.Rotation rotation57 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray49, (-0.1855270382668764d));
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.geometry.euclidean.threed.NotARotationMatrixException; message: unable to orthogonalize matrix in 10 iterations");
        } catch (org.apache.commons.math.geometry.euclidean.threed.NotARotationMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(rotation45);
        org.junit.Assert.assertNotNull(rotation46);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray49);
    }

    @Test
    public void test0725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0725");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation20.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = rotation27.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation34 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D35 = rotation34.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation36 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D28, vector3D35);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation42 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D43 = rotation42.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation49 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D50 = rotation49.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation51 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D43, vector3D50);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation52 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D13, vector3D21, vector3D35, vector3D50);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation54 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D50, 1.0d);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation56 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D50, (double) 10);
        double double57 = rotation56.getQ1();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D35);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(vector3D50);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + (-0.6780618572586967d) + "'", double57 == (-0.6780618572586967d));
    }

    @Test
    public void test0726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0726");
        org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.geometry.euclidean.threed.Rotation rotation4 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(rotationOrder0, (double) (-1.0f), (-10.0d), 0.05506338499281072d);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0727");
        double[][] doubleArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.geometry.euclidean.threed.Rotation rotation2 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray0, (double) 0L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0728");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (short) -1, (-0.1730129508244783d), (-0.1730129508244783d), (double) 10.0f, false);
        double double6 = rotation5.getQ2();
        double double7 = rotation5.getQ0();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation13 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D14 = rotation13.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation20.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation22 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D14, vector3D21);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation28 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation29 = rotation22.applyInverseTo(rotation28);
        double double30 = rotation28.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation36 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D37 = rotation36.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation43 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double44 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation36, rotation43);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation50 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D51 = rotation50.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation57 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D58 = rotation57.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation59 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D51, vector3D58);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation65 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation66 = rotation59.applyInverseTo(rotation65);
        double double67 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation43, rotation59);
        double double68 = rotation59.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation69 = rotation28.applyInverseTo(rotation59);
        double double70 = rotation28.getQ1();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation71 = rotation28.revert();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation72 = rotation5.applyTo(rotation28);
        double double73 = rotation28.getQ0();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation79 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-0.1855270382668764d), (double) 1, Double.NaN, (double) (short) 100, false);
        double double80 = rotation79.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation81 = rotation79.revert();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation87 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D88 = rotation87.getAxis();
        double double89 = rotation87.getQ0();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D90 = rotation87.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D91 = rotation81.applyInverseTo(vector3D90);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation93 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D90, (double) 10L);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation94 = rotation28.applyInverseTo(rotation93);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + (-0.1730129508244783d) + "'", double6 == (-0.1730129508244783d));
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1.0d) + "'", double7 == (-1.0d));
        org.junit.Assert.assertNotNull(vector3D14);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(rotation29);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 3.141592653589793d + "'", double30 == 3.141592653589793d);
        org.junit.Assert.assertNotNull(vector3D37);
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertNotNull(vector3D51);
        org.junit.Assert.assertNotNull(vector3D58);
        org.junit.Assert.assertNotNull(rotation66);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 3.141592653589793d + "'", double67 == 3.141592653589793d);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 0.0d + "'", double68 == 0.0d);
        org.junit.Assert.assertNotNull(rotation69);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 10.0d + "'", double70 == 10.0d);
        org.junit.Assert.assertNotNull(rotation71);
        org.junit.Assert.assertNotNull(rotation72);
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 0.0d + "'", double73 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double80));
        org.junit.Assert.assertNotNull(rotation81);
        org.junit.Assert.assertNotNull(vector3D88);
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 0.9996303825414301d + "'", double89 == 0.9996303825414301d);
        org.junit.Assert.assertNotNull(vector3D90);
        org.junit.Assert.assertNotNull(vector3D91);
        org.junit.Assert.assertNotNull(rotation94);
    }

    @Test
    public void test0729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0729");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation20.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = rotation27.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation34 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D35 = rotation34.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation36 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D28, vector3D35);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation42 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D43 = rotation42.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation49 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D50 = rotation49.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation51 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D43, vector3D50);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation52 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D13, vector3D21, vector3D35, vector3D50);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation54 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D13, (-0.0d));
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation56 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D13, (-0.1855270382668764d));
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation62 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) 10, 0.0d, (double) (byte) 0, 10.0d, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation68 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (byte) 100, (double) 10L, (double) (short) 100, (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation74 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D75 = rotation74.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation81 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D82 = rotation81.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation83 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D75, vector3D82);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation85 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D75, (double) 100L);
        double double86 = rotation85.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation87 = rotation68.applyInverseTo(rotation85);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation88 = rotation62.applyInverseTo(rotation85);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation89 = rotation88.revert();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D90 = rotation89.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation91 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D13, vector3D90);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation93 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D90, 2.566370614359174d);
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D35);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(vector3D50);
        org.junit.Assert.assertNotNull(vector3D75);
        org.junit.Assert.assertNotNull(vector3D82);
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + (-0.0d) + "'", double86 == (-0.0d));
        org.junit.Assert.assertNotNull(rotation87);
        org.junit.Assert.assertNotNull(rotation88);
        org.junit.Assert.assertNotNull(rotation89);
        org.junit.Assert.assertNotNull(vector3D90);
    }

    @Test
    public void test0730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0730");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double13 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation5, rotation12);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation19 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D20 = rotation19.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation26 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D27 = rotation26.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation28 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D20, vector3D27);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation34 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = rotation28.applyInverseTo(rotation34);
        double double36 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation12, rotation28);
        double double37 = rotation12.getAngle();
        double double38 = rotation12.getQ3();
        double double39 = rotation12.getQ0();
        double double40 = rotation12.getQ0();
        double double41 = rotation12.getQ3();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertNotNull(vector3D20);
        org.junit.Assert.assertNotNull(vector3D27);
        org.junit.Assert.assertNotNull(rotation35);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 3.141592653589793d + "'", double36 == 3.141592653589793d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 3.141592653589793d + "'", double37 == 3.141592653589793d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 1.0d + "'", double38 == 1.0d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.0d + "'", double39 == 0.0d);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.0d + "'", double40 == 0.0d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 1.0d + "'", double41 == 1.0d);
    }

    @Test
    public void test0731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0731");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (byte) 1, 8960.928033465932d, (-0.5322022524502927d), 0.20120377604668616d, true);
    }

    @Test
    public void test0732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0732");
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D0 = null;
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.geometry.euclidean.threed.Rotation rotation2 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D0, vector3D1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0733");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-0.33900504942104487d), 0.8890808091523411d, (-0.20557451782484024d), 0.0d, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation11 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.09949879346007118d, (-0.0d), (double) 100, (double) 0L, true);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation17 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D18 = rotation17.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation24 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D25 = rotation24.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation26 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D18, vector3D25);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation32 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation33 = rotation26.applyInverseTo(rotation32);
        double double34 = rotation32.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = rotation11.applyInverseTo(rotation32);
        double double36 = rotation35.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation37 = rotation5.applyTo(rotation35);
        double double38 = rotation5.getQ0();
        org.junit.Assert.assertNotNull(vector3D18);
        org.junit.Assert.assertNotNull(vector3D25);
        org.junit.Assert.assertNotNull(rotation33);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 3.141592653589793d + "'", double34 == 3.141592653589793d);
        org.junit.Assert.assertNotNull(rotation35);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 9.999000062556641d + "'", double36 == 9.999000062556641d);
        org.junit.Assert.assertNotNull(rotation37);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + (-0.33900504942104487d) + "'", double38 == (-0.33900504942104487d));
    }

    @Test
    public void test0734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0734");
        org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.geometry.euclidean.threed.Rotation rotation4 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(rotationOrder0, (-0.8775825618903728d), (double) 10L, (-0.8156840252218559d));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0735");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (short) 1, (double) 1, (double) 0.0f, 0.9996303825414301d, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation11 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D12 = rotation11.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation18 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D19 = rotation18.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D12, vector3D19);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation26 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D27 = rotation26.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation33 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D34 = rotation33.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation40 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D41 = rotation40.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation42 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D34, vector3D41);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation48 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D49 = rotation48.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation55 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D56 = rotation55.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation57 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D49, vector3D56);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation58 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D19, vector3D27, vector3D41, vector3D56);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation60 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D27, (double) 1);
        double double61 = rotation60.getQ1();
        double double62 = rotation60.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation63 = rotation5.applyTo(rotation60);
        org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder64 = null;
        double[] doubleArray65 = rotation60.getAngles(rotationOrder64);
        org.junit.Assert.assertNotNull(vector3D12);
        org.junit.Assert.assertNotNull(vector3D19);
        org.junit.Assert.assertNotNull(vector3D27);
        org.junit.Assert.assertNotNull(vector3D34);
        org.junit.Assert.assertNotNull(vector3D41);
        org.junit.Assert.assertNotNull(vector3D49);
        org.junit.Assert.assertNotNull(vector3D56);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 0.33900504942104487d + "'", double61 == 0.33900504942104487d);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 0.0d + "'", double62 == 0.0d);
        org.junit.Assert.assertNotNull(rotation63);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[2.356194490192345, 0.9999999999999999, -2.356194490192345]");
    }

    @Test
    public void test0736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0736");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation20.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = rotation27.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation29 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D21, vector3D28);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D36 = rotation35.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation42 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D43 = rotation42.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation44 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D36, vector3D43);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation45 = rotation29.applyTo(rotation44);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation46 = rotation14.applyTo(rotation45);
        double[][] doubleArray47 = rotation46.getMatrix();
        double double48 = rotation46.getQ1();
        double[][] doubleArray49 = rotation46.getMatrix();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation51 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray49, (double) 100L);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation53 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray49, (double) 0);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation59 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation60 = rotation53.applyTo(rotation59);
        double double61 = rotation59.getQ2();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(rotation45);
        org.junit.Assert.assertNotNull(rotation46);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(rotation60);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + (-1.0d) + "'", double61 == (-1.0d));
    }

    @Test
    public void test0737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0737");
        org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.geometry.euclidean.threed.Rotation rotation4 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(rotationOrder0, 3.1030128410395363d, 0.001978792867119834d, 0.31538323081891095d);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0738");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation16 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, (double) 100L);
        double double17 = rotation16.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation18 = rotation16.revert();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation24 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (byte) 100, (double) 10L, (double) (short) 100, (double) 1L, false);
        double double25 = rotation24.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation26 = rotation18.applyInverseTo(rotation24);
        double double27 = rotation26.getQ3();
        double double28 = rotation26.getQ0();
        double double29 = rotation26.getQ1();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-0.0d) + "'", double17 == (-0.0d));
        org.junit.Assert.assertNotNull(rotation18);
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertNotNull(rotation26);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 17.66239947251099d + "'", double27 == 17.66239947251099d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 116.90457705856772d + "'", double28 == 116.90457705856772d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + (-8.717516503499631d) + "'", double29 == (-8.717516503499631d));
    }

    @Test
    public void test0739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0739");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double13 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation5, rotation12);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation19 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D20 = rotation19.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation26 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double27 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation19, rotation26);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation28 = rotation12.applyInverseTo(rotation19);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D29 = rotation28.getAxis();
        java.lang.Class<?> wildcardClass30 = rotation28.getClass();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertNotNull(vector3D20);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertNotNull(rotation28);
        org.junit.Assert.assertNotNull(vector3D29);
        org.junit.Assert.assertNotNull(wildcardClass30);
    }

    @Test
    public void test0740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0740");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation16 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, (double) 100L);
        double double17 = rotation16.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation18 = rotation16.revert();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation24 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (byte) 100, (double) 10L, (double) (short) 100, (double) 1L, false);
        double double25 = rotation24.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation26 = rotation18.applyInverseTo(rotation24);
        double double27 = rotation24.getQ0();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation33 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-0.1855270382668764d), (double) 10, (double) (short) -1, (double) 100.0f, false);
        double[][] doubleArray34 = rotation33.getMatrix();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation40 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D41 = rotation40.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation47 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D48 = rotation47.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation49 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D41, vector3D48);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation51 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D41, (double) 100L);
        double double52 = rotation51.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation53 = rotation51.revert();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation59 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (byte) 100, (double) 10L, (double) (short) 100, (double) 1L, false);
        double double60 = rotation59.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation61 = rotation53.applyInverseTo(rotation59);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation62 = rotation33.applyInverseTo(rotation61);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation63 = rotation24.applyTo(rotation62);
        double double64 = rotation24.getQ0();
        double double65 = rotation24.getQ3();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-0.0d) + "'", double17 == (-0.0d));
        org.junit.Assert.assertNotNull(rotation18);
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertNotNull(rotation26);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 100.0d + "'", double27 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(vector3D41);
        org.junit.Assert.assertNotNull(vector3D48);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + (-0.0d) + "'", double52 == (-0.0d));
        org.junit.Assert.assertNotNull(rotation53);
        org.junit.Assert.assertTrue(Double.isNaN(double60));
        org.junit.Assert.assertNotNull(rotation61);
        org.junit.Assert.assertNotNull(rotation62);
        org.junit.Assert.assertNotNull(rotation63);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 100.0d + "'", double64 == 100.0d);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 1.0d + "'", double65 == 1.0d);
    }

    @Test
    public void test0741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0741");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(8960.928033465932d, 3.1030128410395363d, (-0.280459243752156d), (double) (-1), false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation11 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D12 = rotation11.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation18 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D19 = rotation18.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D12, vector3D19);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation26 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D27 = rotation26.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation33 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D34 = rotation33.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D27, vector3D34);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation41 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D42 = rotation41.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation48 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D49 = rotation48.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation50 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D42, vector3D49);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation51 = rotation35.applyTo(rotation50);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation52 = rotation20.applyTo(rotation51);
        double[][] doubleArray53 = rotation52.getMatrix();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation55 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray53, (double) 100.0f);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation61 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-1.0d), (double) (byte) 10, (double) (byte) 100, (double) 0L, true);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation67 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D68 = rotation67.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D69 = rotation61.applyInverseTo(vector3D68);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D70 = rotation55.applyTo(vector3D69);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D71 = rotation5.applyInverseTo(vector3D69);
        java.lang.Class<?> wildcardClass72 = rotation5.getClass();
        org.junit.Assert.assertNotNull(vector3D12);
        org.junit.Assert.assertNotNull(vector3D19);
        org.junit.Assert.assertNotNull(vector3D27);
        org.junit.Assert.assertNotNull(vector3D34);
        org.junit.Assert.assertNotNull(vector3D42);
        org.junit.Assert.assertNotNull(vector3D49);
        org.junit.Assert.assertNotNull(rotation51);
        org.junit.Assert.assertNotNull(rotation52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(vector3D68);
        org.junit.Assert.assertNotNull(vector3D69);
        org.junit.Assert.assertNotNull(vector3D70);
        org.junit.Assert.assertNotNull(vector3D71);
        org.junit.Assert.assertNotNull(wildcardClass72);
    }

    @Test
    public void test0742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0742");
        org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.geometry.euclidean.threed.Rotation rotation4 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(rotationOrder0, (-0.005755946541407356d), 8960.928033465932d, (-0.4265323853004136d));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0743");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation16 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, (double) 100L);
        double double17 = rotation16.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation18 = rotation16.revert();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation24 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (byte) 100, (double) 10L, (double) (short) 100, (double) 1L, false);
        double double25 = rotation24.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation26 = rotation18.applyInverseTo(rotation24);
        double double27 = rotation18.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation33 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-1.0d), (double) (byte) 10, (double) (byte) 100, (double) 0L, true);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation39 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D40 = rotation39.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation46 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D47 = rotation46.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation48 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D40, vector3D47);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D49 = rotation33.applyTo(vector3D40);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation51 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D40, (double) (byte) 0);
        double double52 = rotation51.getQ2();
        double double53 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation18, rotation51);
        double double54 = rotation18.getAngle();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-0.0d) + "'", double17 == (-0.0d));
        org.junit.Assert.assertNotNull(rotation18);
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertNotNull(rotation26);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.5309649148733836d + "'", double27 == 0.5309649148733836d);
        org.junit.Assert.assertNotNull(vector3D40);
        org.junit.Assert.assertNotNull(vector3D47);
        org.junit.Assert.assertNotNull(vector3D49);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.0d + "'", double52 == 0.0d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.5309649148733836d + "'", double53 == 0.5309649148733836d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.5309649148733836d + "'", double54 == 0.5309649148733836d);
    }

    @Test
    public void test0744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0744");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation16 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, (double) 100L);
        double double17 = rotation16.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation18 = rotation16.revert();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation24 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (byte) 100, (double) 10L, (double) (short) 100, (double) 1L, false);
        double double25 = rotation24.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation26 = rotation18.applyInverseTo(rotation24);
        double double27 = rotation18.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation33 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-1.0d), (double) (byte) 10, (double) (byte) 100, (double) 0L, true);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation39 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D40 = rotation39.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation46 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D47 = rotation46.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation48 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D40, vector3D47);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D49 = rotation33.applyTo(vector3D40);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation51 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D40, (double) (byte) 0);
        double double52 = rotation51.getQ2();
        double double53 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation18, rotation51);
        double double54 = rotation51.getQ1();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-0.0d) + "'", double17 == (-0.0d));
        org.junit.Assert.assertNotNull(rotation18);
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertNotNull(rotation26);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.5309649148733836d + "'", double27 == 0.5309649148733836d);
        org.junit.Assert.assertNotNull(vector3D40);
        org.junit.Assert.assertNotNull(vector3D47);
        org.junit.Assert.assertNotNull(vector3D49);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.0d + "'", double52 == 0.0d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.5309649148733836d + "'", double53 == 0.5309649148733836d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d);
    }

    @Test
    public void test0745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0745");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (-1L), 0.0d, (-0.0d), 17.66239947251099d, false);
        double double6 = rotation5.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation19 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D20 = rotation19.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation21 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D13, vector3D20);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = rotation27.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation34 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D35 = rotation34.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation36 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D28, vector3D35);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation42 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D43 = rotation42.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation49 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D50 = rotation49.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation51 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D43, vector3D50);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation52 = rotation36.applyTo(rotation51);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation53 = rotation21.applyTo(rotation52);
        double[][] doubleArray54 = rotation53.getMatrix();
        double double55 = rotation53.getQ1();
        double[][] doubleArray56 = rotation53.getMatrix();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation58 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray56, (double) 100L);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D59 = rotation58.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D60 = rotation5.applyTo(vector3D59);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation62 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D59, (double) (short) 0);
        double double63 = rotation62.getQ2();
        org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder64 = null;
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray65 = rotation62.getAngles(rotationOrder64);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.geometry.euclidean.threed.CardanEulerSingularityException; message: Euler angles singularity");
        } catch (org.apache.commons.math.geometry.euclidean.threed.CardanEulerSingularityException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D20);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D35);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(vector3D50);
        org.junit.Assert.assertNotNull(rotation52);
        org.junit.Assert.assertNotNull(rotation53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(vector3D59);
        org.junit.Assert.assertNotNull(vector3D60);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + (-0.0d) + "'", double63 == (-0.0d));
    }

    @Test
    public void test0746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0746");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) 10, 0.0d, (double) (byte) 0, 10.0d, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation11 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (byte) 100, (double) 10L, (double) (short) 100, (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation17 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D18 = rotation17.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation24 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D25 = rotation24.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation26 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D18, vector3D25);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation28 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D18, (double) 100L);
        double double29 = rotation28.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation30 = rotation11.applyInverseTo(rotation28);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation31 = rotation5.applyInverseTo(rotation28);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation32 = rotation31.revert();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D33 = rotation32.getAxis();
        double double34 = rotation32.getQ2();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D35 = rotation32.getAxis();
        org.junit.Assert.assertNotNull(vector3D18);
        org.junit.Assert.assertNotNull(vector3D25);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + (-0.0d) + "'", double29 == (-0.0d));
        org.junit.Assert.assertNotNull(rotation30);
        org.junit.Assert.assertNotNull(rotation31);
        org.junit.Assert.assertNotNull(rotation32);
        org.junit.Assert.assertNotNull(vector3D33);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 3.7105407653375275d + "'", double34 == 3.7105407653375275d);
        org.junit.Assert.assertNotNull(vector3D35);
    }

    @Test
    public void test0747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0747");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation16 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, (double) 1L);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation22 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D23 = rotation22.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation29 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D30 = rotation29.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation31 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D23, vector3D30);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation37 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D38 = rotation37.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation44 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D45 = rotation44.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation51 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D52 = rotation51.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation53 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D45, vector3D52);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation59 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D60 = rotation59.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation66 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D67 = rotation66.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation68 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D60, vector3D67);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation69 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D30, vector3D38, vector3D52, vector3D67);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation70 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D52);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation72 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, 10924.868355180524d);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation73 = rotation72.revert();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D23);
        org.junit.Assert.assertNotNull(vector3D30);
        org.junit.Assert.assertNotNull(vector3D38);
        org.junit.Assert.assertNotNull(vector3D45);
        org.junit.Assert.assertNotNull(vector3D52);
        org.junit.Assert.assertNotNull(vector3D60);
        org.junit.Assert.assertNotNull(vector3D67);
        org.junit.Assert.assertNotNull(rotation73);
    }

    @Test
    public void test0748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0748");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation16 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, (double) 100L);
        double double17 = rotation16.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation18 = rotation16.revert();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation24 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (byte) 100, (double) 10L, (double) (short) 100, (double) 1L, false);
        double double25 = rotation24.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation26 = rotation18.applyInverseTo(rotation24);
        double double27 = rotation24.getQ0();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation33 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-0.1855270382668764d), (double) 10, (double) (short) -1, (double) 100.0f, false);
        double[][] doubleArray34 = rotation33.getMatrix();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation40 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D41 = rotation40.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation47 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D48 = rotation47.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation49 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D41, vector3D48);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation51 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D41, (double) 100L);
        double double52 = rotation51.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation53 = rotation51.revert();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation59 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (byte) 100, (double) 10L, (double) (short) 100, (double) 1L, false);
        double double60 = rotation59.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation61 = rotation53.applyInverseTo(rotation59);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation62 = rotation33.applyInverseTo(rotation61);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation63 = rotation24.applyTo(rotation62);
        double double64 = rotation24.getQ0();
        double[][] doubleArray65 = rotation24.getMatrix();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.geometry.euclidean.threed.Rotation rotation67 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray65, (-0.16026520139361466d));
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.geometry.euclidean.threed.NotARotationMatrixException; message: unable to orthogonalize matrix in 10 iterations");
        } catch (org.apache.commons.math.geometry.euclidean.threed.NotARotationMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-0.0d) + "'", double17 == (-0.0d));
        org.junit.Assert.assertNotNull(rotation18);
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertNotNull(rotation26);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 100.0d + "'", double27 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(vector3D41);
        org.junit.Assert.assertNotNull(vector3D48);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + (-0.0d) + "'", double52 == (-0.0d));
        org.junit.Assert.assertNotNull(rotation53);
        org.junit.Assert.assertTrue(Double.isNaN(double60));
        org.junit.Assert.assertNotNull(rotation61);
        org.junit.Assert.assertNotNull(rotation62);
        org.junit.Assert.assertNotNull(rotation63);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 100.0d + "'", double64 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray65);
    }

    @Test
    public void test0749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0749");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-0.33900504942104487d), 0.8890808091523411d, (-0.20557451782484024d), 0.0d, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation11 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.09949879346007118d, (-0.0d), (double) 100, (double) 0L, true);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation17 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D18 = rotation17.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation24 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D25 = rotation24.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation26 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D18, vector3D25);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation32 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation33 = rotation26.applyInverseTo(rotation32);
        double double34 = rotation32.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = rotation11.applyInverseTo(rotation32);
        double double36 = rotation35.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation37 = rotation5.applyTo(rotation35);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation43 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D44 = rotation43.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation50 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D51 = rotation50.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation52 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D44, vector3D51);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation58 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D59 = rotation58.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation65 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D66 = rotation65.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation72 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D73 = rotation72.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation74 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D66, vector3D73);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation80 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D81 = rotation80.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation87 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D88 = rotation87.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation89 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D81, vector3D88);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation90 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D51, vector3D59, vector3D73, vector3D88);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation92 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D88, 1.0d);
        org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder93 = null;
        double[] doubleArray94 = rotation92.getAngles(rotationOrder93);
        double double95 = rotation92.getQ1();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation96 = rotation37.applyInverseTo(rotation92);
        org.junit.Assert.assertNotNull(vector3D18);
        org.junit.Assert.assertNotNull(vector3D25);
        org.junit.Assert.assertNotNull(rotation33);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 3.141592653589793d + "'", double34 == 3.141592653589793d);
        org.junit.Assert.assertNotNull(rotation35);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 9.999000062556641d + "'", double36 == 9.999000062556641d);
        org.junit.Assert.assertNotNull(rotation37);
        org.junit.Assert.assertNotNull(vector3D44);
        org.junit.Assert.assertNotNull(vector3D51);
        org.junit.Assert.assertNotNull(vector3D59);
        org.junit.Assert.assertNotNull(vector3D66);
        org.junit.Assert.assertNotNull(vector3D73);
        org.junit.Assert.assertNotNull(vector3D81);
        org.junit.Assert.assertNotNull(vector3D88);
        org.junit.Assert.assertNotNull(doubleArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray94), "[2.356194490192345, 0.9999999999999999, -2.356194490192345]");
        org.junit.Assert.assertTrue("'" + double95 + "' != '" + 0.33900504942104487d + "'", double95 == 0.33900504942104487d);
        org.junit.Assert.assertNotNull(rotation96);
    }

    @Test
    public void test0750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0750");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation20.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = rotation27.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation29 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D21, vector3D28);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D36 = rotation35.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation42 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D43 = rotation42.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation44 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D36, vector3D43);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation45 = rotation29.applyTo(rotation44);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation46 = rotation14.applyTo(rotation45);
        double[][] doubleArray47 = rotation46.getMatrix();
        double double48 = rotation46.getQ1();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation49 = rotation46.revert();
        double double50 = rotation49.getQ2();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation51 = rotation49.revert();
        double double52 = rotation49.getAngle();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(rotation45);
        org.junit.Assert.assertNotNull(rotation46);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d);
        org.junit.Assert.assertNotNull(rotation49);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.0d + "'", double50 == 0.0d);
        org.junit.Assert.assertNotNull(rotation51);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.0d + "'", double52 == 0.0d);
    }

    @Test
    public void test0751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0751");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double13 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation5, rotation12);
        double double14 = rotation12.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation20.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double28 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation20, rotation27);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation34 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D35 = rotation34.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation41 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double42 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation34, rotation41);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation43 = rotation27.applyInverseTo(rotation34);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation44 = rotation12.applyTo(rotation34);
        double double45 = rotation34.getQ0();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 3.141592653589793d + "'", double14 == 3.141592653589793d);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertNotNull(vector3D35);
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertNotNull(rotation43);
        org.junit.Assert.assertNotNull(rotation44);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.9996303825414301d + "'", double45 == 0.9996303825414301d);
    }

    @Test
    public void test0752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0752");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) 10.0f, 0.7881701093115122d, (-0.1730129508244783d), (double) (byte) 0, true);
        double double6 = rotation5.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation19 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D20 = rotation19.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation21 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D13, vector3D20);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = rotation27.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation34 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D35 = rotation34.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation36 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D28, vector3D35);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation42 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D43 = rotation42.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation49 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D50 = rotation49.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation51 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D43, vector3D50);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation52 = rotation36.applyTo(rotation51);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation53 = rotation21.applyTo(rotation52);
        double[][] doubleArray54 = rotation53.getMatrix();
        double double55 = rotation53.getQ1();
        double[][] doubleArray56 = rotation53.getMatrix();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation58 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray56, (double) 100L);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation60 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray56, (double) 0);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation62 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray56, (double) 'a');
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation68 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D69 = rotation68.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation75 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D76 = rotation75.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation77 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D69, vector3D76);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation79 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D69, (double) 100L);
        double double80 = rotation79.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation81 = rotation79.revert();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation87 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (byte) 100, (double) 10L, (double) (short) 100, (double) 1L, false);
        double double88 = rotation87.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation89 = rotation81.applyInverseTo(rotation87);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation90 = rotation89.revert();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation91 = rotation62.applyInverseTo(rotation89);
        double double92 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation5, rotation89);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.1610382605737718d + "'", double6 == 0.1610382605737718d);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D20);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D35);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(vector3D50);
        org.junit.Assert.assertNotNull(rotation52);
        org.junit.Assert.assertNotNull(rotation53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(vector3D69);
        org.junit.Assert.assertNotNull(vector3D76);
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + (-0.0d) + "'", double80 == (-0.0d));
        org.junit.Assert.assertNotNull(rotation81);
        org.junit.Assert.assertTrue(Double.isNaN(double88));
        org.junit.Assert.assertNotNull(rotation89);
        org.junit.Assert.assertNotNull(rotation90);
        org.junit.Assert.assertNotNull(rotation91);
        org.junit.Assert.assertTrue(Double.isNaN(double92));
    }

    @Test
    public void test0753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0753");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation19 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D20 = rotation19.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation21 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D13, vector3D20);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation23 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D13, (double) 100L);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation24 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation30 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D31 = rotation30.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation37 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D38 = rotation37.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation39 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D31, vector3D38);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation41 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D31, (double) 100L);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation47 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-1.0d), (double) (byte) 10, (double) (byte) 100, (double) 0L, true);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation53 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D54 = rotation53.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation60 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D61 = rotation60.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation62 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D54, vector3D61);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D63 = rotation47.applyTo(vector3D54);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation69 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D70 = rotation69.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation76 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D77 = rotation76.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation83 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D84 = rotation83.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation85 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D77, vector3D84);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation87 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D77, (double) 100L);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation88 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D70, vector3D77);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation94 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D95 = rotation94.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation96 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D31, vector3D63, vector3D77, vector3D95);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D97 = rotation24.applyTo(vector3D63);
        java.lang.Class<?> wildcardClass98 = vector3D63.getClass();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D20);
        org.junit.Assert.assertNotNull(vector3D31);
        org.junit.Assert.assertNotNull(vector3D38);
        org.junit.Assert.assertNotNull(vector3D54);
        org.junit.Assert.assertNotNull(vector3D61);
        org.junit.Assert.assertNotNull(vector3D63);
        org.junit.Assert.assertNotNull(vector3D70);
        org.junit.Assert.assertNotNull(vector3D77);
        org.junit.Assert.assertNotNull(vector3D84);
        org.junit.Assert.assertNotNull(vector3D95);
        org.junit.Assert.assertNotNull(vector3D97);
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test0754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0754");
        org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.geometry.euclidean.threed.Rotation rotation4 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(rotationOrder0, 0.047917108096983706d, (-0.8981984963621733d), 0.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0755");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-0.0d), 0.09949879346007118d, (double) (-1L), 0.0d, true);
        double double6 = rotation5.getQ1();
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.09900990099009903d + "'", double6 == 0.09900990099009903d);
    }

    @Test
    public void test0756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0756");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation20.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = rotation27.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation29 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D21, vector3D28);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D36 = rotation35.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation42 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D43 = rotation42.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation44 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D36, vector3D43);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation45 = rotation29.applyTo(rotation44);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation46 = rotation14.applyTo(rotation45);
        double[][] doubleArray47 = rotation46.getMatrix();
        double double48 = rotation46.getQ1();
        double[][] doubleArray49 = rotation46.getMatrix();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation51 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray49, (double) 100L);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D52 = rotation51.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation53 = rotation51.revert();
        java.lang.Class<?> wildcardClass54 = rotation51.getClass();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(rotation45);
        org.junit.Assert.assertNotNull(rotation46);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(vector3D52);
        org.junit.Assert.assertNotNull(rotation53);
        org.junit.Assert.assertNotNull(wildcardClass54);
    }

    @Test
    public void test0757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0757");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        double[][] doubleArray15 = rotation14.getMatrix();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation17 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray15, 0.0d);
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(doubleArray15);
    }

    @Test
    public void test0758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0758");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation11 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D12 = rotation11.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation18 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double19 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation11, rotation18);
        double double20 = rotation18.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation26 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D27 = rotation26.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation33 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D34 = rotation33.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D27, vector3D34);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation41 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D42 = rotation41.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation48 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D49 = rotation48.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation50 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D42, vector3D49);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation51 = rotation35.applyTo(rotation50);
        double double52 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation18, rotation51);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation58 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D59 = rotation58.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation65 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double66 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation58, rotation65);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation72 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D73 = rotation72.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation79 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double80 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation72, rotation79);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation81 = rotation65.applyInverseTo(rotation72);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation82 = rotation18.applyInverseTo(rotation72);
        double double83 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation5, rotation82);
        org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder84 = null;
        double[] doubleArray85 = rotation82.getAngles(rotationOrder84);
        java.lang.Class<?> wildcardClass86 = rotation82.getClass();
        org.junit.Assert.assertNotNull(vector3D12);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 3.141592653589793d + "'", double20 == 3.141592653589793d);
        org.junit.Assert.assertNotNull(vector3D27);
        org.junit.Assert.assertNotNull(vector3D34);
        org.junit.Assert.assertNotNull(vector3D42);
        org.junit.Assert.assertNotNull(vector3D49);
        org.junit.Assert.assertNotNull(rotation51);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 3.141592653589793d + "'", double52 == 3.141592653589793d);
        org.junit.Assert.assertNotNull(vector3D59);
        org.junit.Assert.assertTrue(Double.isNaN(double66));
        org.junit.Assert.assertNotNull(vector3D73);
        org.junit.Assert.assertTrue(Double.isNaN(double80));
        org.junit.Assert.assertNotNull(rotation81);
        org.junit.Assert.assertNotNull(rotation82);
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 3.141592653589793d + "'", double83 == 3.141592653589793d);
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[-0.31746367442260337, 1.2637009275001716, 3.026886383418824]");
        org.junit.Assert.assertNotNull(wildcardClass86);
    }

    @Test
    public void test0759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0759");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-0.5519957795875582d), (double) (byte) -1, 0.01922366120271981d, (double) (short) 1, false);
        double double6 = rotation5.getQ1();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation7 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.geometry.euclidean.threed.Rotation rotation8 = rotation5.applyTo(rotation7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + (-1.0d) + "'", double6 == (-1.0d));
    }

    @Test
    public void test0760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0760");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation20.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = rotation27.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation29 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D21, vector3D28);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation30 = rotation14.applyTo(rotation29);
        double double31 = rotation29.getAngle();
        double double32 = rotation29.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation38 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D39 = rotation38.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation45 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double46 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation38, rotation45);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation52 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D53 = rotation52.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation59 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double60 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation52, rotation59);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation61 = rotation45.applyInverseTo(rotation52);
        double double62 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation29, rotation45);
        double double63 = rotation45.getQ1();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(rotation30);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
        org.junit.Assert.assertNotNull(vector3D39);
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertNotNull(vector3D53);
        org.junit.Assert.assertTrue(Double.isNaN(double60));
        org.junit.Assert.assertNotNull(rotation61);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 3.141592653589793d + "'", double62 == 3.141592653589793d);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 10.0d + "'", double63 == 10.0d);
    }

    @Test
    public void test0761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0761");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) 10, 0.0d, (double) (byte) 0, 10.0d, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation11 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (byte) 100, (double) 10L, (double) (short) 100, (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation17 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D18 = rotation17.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation24 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D25 = rotation24.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation26 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D18, vector3D25);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation28 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D18, (double) 100L);
        double double29 = rotation28.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation30 = rotation11.applyInverseTo(rotation28);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation31 = rotation5.applyInverseTo(rotation28);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation37 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D38 = rotation37.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation44 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D45 = rotation44.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation46 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D38, vector3D45);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation52 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D53 = rotation52.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation59 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D60 = rotation59.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation61 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D53, vector3D60);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation67 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D68 = rotation67.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation74 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D75 = rotation74.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation76 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D68, vector3D75);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation77 = rotation61.applyTo(rotation76);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation78 = rotation46.applyTo(rotation77);
        double[][] doubleArray79 = rotation78.getMatrix();
        double double80 = rotation78.getQ1();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation81 = rotation5.applyInverseTo(rotation78);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation87 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (short) 10, (double) (-1L), 8960.928033465932d, (double) 'a', false);
        double double88 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation81, rotation87);
        org.junit.Assert.assertNotNull(vector3D18);
        org.junit.Assert.assertNotNull(vector3D25);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + (-0.0d) + "'", double29 == (-0.0d));
        org.junit.Assert.assertNotNull(rotation30);
        org.junit.Assert.assertNotNull(rotation31);
        org.junit.Assert.assertNotNull(vector3D38);
        org.junit.Assert.assertNotNull(vector3D45);
        org.junit.Assert.assertNotNull(vector3D53);
        org.junit.Assert.assertNotNull(vector3D60);
        org.junit.Assert.assertNotNull(vector3D68);
        org.junit.Assert.assertNotNull(vector3D75);
        org.junit.Assert.assertNotNull(rotation77);
        org.junit.Assert.assertNotNull(rotation78);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 0.0d + "'", double80 == 0.0d);
        org.junit.Assert.assertNotNull(rotation81);
        org.junit.Assert.assertTrue(Double.isNaN(double88));
    }

    @Test
    public void test0762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0762");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-0.03877567139094669d), (-0.5519957795875582d), (double) 10L, 0.7881701093115122d, false);
    }

    @Test
    public void test0763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0763");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation20.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = rotation27.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation34 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D35 = rotation34.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation36 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D28, vector3D35);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation42 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D43 = rotation42.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation49 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D50 = rotation49.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation51 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D43, vector3D50);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation52 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D13, vector3D21, vector3D35, vector3D50);
        double double53 = rotation52.getQ1();
        double double54 = rotation52.getQ2();
        double[][] doubleArray55 = rotation52.getMatrix();
        double double56 = rotation52.getQ2();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D35);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(vector3D50);
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertTrue(Double.isNaN(double56));
    }

    @Test
    public void test0764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0764");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-0.1855270382668764d), (double) 1, Double.NaN, (double) (short) 100, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation11 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D12 = rotation11.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation18 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D19 = rotation18.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D12, vector3D19);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation26 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D27 = rotation26.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation33 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D34 = rotation33.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D27, vector3D34);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation41 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D42 = rotation41.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation48 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D49 = rotation48.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation50 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D42, vector3D49);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation51 = rotation35.applyTo(rotation50);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation52 = rotation20.applyTo(rotation51);
        double[][] doubleArray53 = rotation52.getMatrix();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation55 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray53, (double) 10);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation57 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray53, (double) (byte) 100);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation59 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray53, 0.0d);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation60 = rotation5.applyInverseTo(rotation59);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation61 = rotation5.revert();
        double[][] doubleArray62 = rotation61.getMatrix();
        org.junit.Assert.assertNotNull(vector3D12);
        org.junit.Assert.assertNotNull(vector3D19);
        org.junit.Assert.assertNotNull(vector3D27);
        org.junit.Assert.assertNotNull(vector3D34);
        org.junit.Assert.assertNotNull(vector3D42);
        org.junit.Assert.assertNotNull(vector3D49);
        org.junit.Assert.assertNotNull(rotation51);
        org.junit.Assert.assertNotNull(rotation52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(rotation60);
        org.junit.Assert.assertNotNull(rotation61);
        org.junit.Assert.assertNotNull(doubleArray62);
    }

    @Test
    public void test0765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0765");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation20.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = rotation27.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation29 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D21, vector3D28);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D36 = rotation35.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation42 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D43 = rotation42.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation44 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D36, vector3D43);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation45 = rotation29.applyTo(rotation44);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation46 = rotation14.applyTo(rotation45);
        java.lang.Class<?> wildcardClass47 = rotation14.getClass();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(rotation45);
        org.junit.Assert.assertNotNull(rotation46);
        org.junit.Assert.assertNotNull(wildcardClass47);
    }

    @Test
    public void test0766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0766");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation16 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, (double) 100L);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation22 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-1.0d), (double) (byte) 10, (double) (byte) 100, (double) 0L, true);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation28 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D29 = rotation28.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D36 = rotation35.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation37 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D29, vector3D36);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D38 = rotation22.applyTo(vector3D29);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation44 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D45 = rotation44.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation51 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D52 = rotation51.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation58 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D59 = rotation58.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation60 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D52, vector3D59);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation62 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D52, (double) 100L);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation63 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D45, vector3D52);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation69 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D70 = rotation69.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation71 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D38, vector3D52, vector3D70);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation73 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D52, (double) 1.0f);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation74 = rotation73.revert();
        double double75 = rotation74.getQ0();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D76 = rotation74.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder77 = null;
        double[] doubleArray78 = rotation74.getAngles(rotationOrder77);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D79 = rotation74.getAxis();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D29);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D38);
        org.junit.Assert.assertNotNull(vector3D45);
        org.junit.Assert.assertNotNull(vector3D52);
        org.junit.Assert.assertNotNull(vector3D59);
        org.junit.Assert.assertNotNull(vector3D70);
        org.junit.Assert.assertNotNull(rotation74);
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + (-0.8775825618903728d) + "'", double75 == (-0.8775825618903728d));
        org.junit.Assert.assertNotNull(vector3D76);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[-0.7853981633974483, 0.9999999999999999, 0.7853981633974483]");
        org.junit.Assert.assertNotNull(vector3D79);
    }

    @Test
    public void test0767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0767");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (short) -1, (double) 10.0f, (double) (byte) 100, (-0.005755946541407356d), true);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation11 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D12 = rotation11.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation18 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D19 = rotation18.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D12, vector3D19);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation26 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D27 = rotation26.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation33 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D34 = rotation33.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D27, vector3D34);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation41 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D42 = rotation41.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation48 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D49 = rotation48.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation50 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D42, vector3D49);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation51 = rotation35.applyTo(rotation50);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation52 = rotation20.applyTo(rotation51);
        double[][] doubleArray53 = rotation52.getMatrix();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation55 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray53, (double) 10);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation57 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray53, (double) (byte) 100);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation59 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray53, (double) (short) 0);
        double double60 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation5, rotation59);
        double double61 = rotation5.getAngle();
        org.junit.Assert.assertNotNull(vector3D12);
        org.junit.Assert.assertNotNull(vector3D19);
        org.junit.Assert.assertNotNull(vector3D27);
        org.junit.Assert.assertNotNull(vector3D34);
        org.junit.Assert.assertNotNull(vector3D42);
        org.junit.Assert.assertNotNull(vector3D49);
        org.junit.Assert.assertNotNull(rotation51);
        org.junit.Assert.assertNotNull(rotation52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 3.1216925665694406d + "'", double60 == 3.1216925665694406d);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 3.1216925665694406d + "'", double61 == 3.1216925665694406d);
    }

    @Test
    public void test0768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0768");
        org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.geometry.euclidean.threed.Rotation rotation4 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(rotationOrder0, 0.0d, 0.0d, (double) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0769");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (short) 10, (double) (-1L), 8960.928033465932d, (double) 'a', false);
        double double6 = rotation5.getAngle();
        org.junit.Assert.assertTrue(Double.isNaN(double6));
    }

    @Test
    public void test0770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0770");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation16 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, (double) 100L);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation22 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-1.0d), (double) (byte) 10, (double) (byte) 100, (double) 0L, true);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation28 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D29 = rotation28.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D36 = rotation35.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation37 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D29, vector3D36);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D38 = rotation22.applyTo(vector3D29);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation44 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D45 = rotation44.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation51 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D52 = rotation51.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation58 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D59 = rotation58.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation60 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D52, vector3D59);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation62 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D52, (double) 100L);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation63 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D45, vector3D52);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation69 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D70 = rotation69.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation71 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D38, vector3D52, vector3D70);
        double double72 = rotation71.getQ0();
        org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder73 = null;
        double[] doubleArray74 = rotation71.getAngles(rotationOrder73);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation80 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-0.1855270382668764d), (double) 10, (double) (short) -1, (double) 100.0f, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation81 = rotation80.revert();
        double double82 = rotation80.getQ2();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D83 = rotation80.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation89 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D90 = rotation89.getAxis();
        double double91 = rotation89.getQ0();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D92 = rotation89.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation93 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D83, vector3D92);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D94 = rotation71.applyInverseTo(vector3D92);
        double double95 = rotation71.getQ2();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D96 = rotation71.getAxis();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D29);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D38);
        org.junit.Assert.assertNotNull(vector3D45);
        org.junit.Assert.assertNotNull(vector3D52);
        org.junit.Assert.assertNotNull(vector3D59);
        org.junit.Assert.assertNotNull(vector3D70);
        org.junit.Assert.assertTrue(Double.isNaN(double72));
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[NaN, NaN, NaN]");
        org.junit.Assert.assertNotNull(rotation81);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + (-1.0d) + "'", double82 == (-1.0d));
        org.junit.Assert.assertNotNull(vector3D83);
        org.junit.Assert.assertNotNull(vector3D90);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 0.9996303825414301d + "'", double91 == 0.9996303825414301d);
        org.junit.Assert.assertNotNull(vector3D92);
        org.junit.Assert.assertNotNull(vector3D94);
        org.junit.Assert.assertTrue(Double.isNaN(double95));
        org.junit.Assert.assertNotNull(vector3D96);
    }

    @Test
    public void test0771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0771");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation20.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = rotation27.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation29 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D21, vector3D28);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D36 = rotation35.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation42 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D43 = rotation42.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation44 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D36, vector3D43);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation45 = rotation29.applyTo(rotation44);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation46 = rotation14.applyTo(rotation45);
        double double47 = rotation46.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation53 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D54 = rotation53.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation60 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double61 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation53, rotation60);
        double double62 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation46, rotation60);
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(rotation45);
        org.junit.Assert.assertNotNull(rotation46);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d);
        org.junit.Assert.assertNotNull(vector3D54);
        org.junit.Assert.assertTrue(Double.isNaN(double61));
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 3.141592653589793d + "'", double62 == 3.141592653589793d);
    }

    @Test
    public void test0772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0772");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) 10, 0.0d, (double) (byte) 0, 10.0d, false);
        double double6 = rotation5.getQ1();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation19 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D20 = rotation19.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation21 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D13, vector3D20);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = rotation27.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation34 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D35 = rotation34.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation41 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D42 = rotation41.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation43 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D35, vector3D42);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation49 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D50 = rotation49.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation56 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D57 = rotation56.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation58 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D50, vector3D57);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation59 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D20, vector3D28, vector3D42, vector3D57);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D60 = rotation5.applyTo(vector3D42);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation62 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D42, 0.7881701093115122d);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation68 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D69 = rotation68.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation75 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D76 = rotation75.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation77 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D69, vector3D76);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation79 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D69, (double) 100L);
        double double80 = rotation79.getQ1();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation81 = rotation62.applyTo(rotation79);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation87 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(28.016837073341897d, 1.0d, 0.3388903615770647d, (double) 10.0f, true);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation88 = rotation81.applyTo(rotation87);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D89 = rotation81.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation95 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-1.0d), (double) (byte) 10, (double) (byte) 100, (double) 0L, true);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation96 = rotation81.applyTo(rotation95);
        java.lang.Class<?> wildcardClass97 = rotation81.getClass();
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D20);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D35);
        org.junit.Assert.assertNotNull(vector3D42);
        org.junit.Assert.assertNotNull(vector3D50);
        org.junit.Assert.assertNotNull(vector3D57);
        org.junit.Assert.assertNotNull(vector3D60);
        org.junit.Assert.assertNotNull(vector3D69);
        org.junit.Assert.assertNotNull(vector3D76);
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + (-0.1855270382668764d) + "'", double80 == (-0.1855270382668764d));
        org.junit.Assert.assertNotNull(rotation81);
        org.junit.Assert.assertNotNull(rotation88);
        org.junit.Assert.assertNotNull(vector3D89);
        org.junit.Assert.assertNotNull(rotation96);
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test0773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0773");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation20.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = rotation27.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation34 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D35 = rotation34.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation36 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D28, vector3D35);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation42 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D43 = rotation42.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation49 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D50 = rotation49.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation51 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D43, vector3D50);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation52 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D13, vector3D21, vector3D35, vector3D50);
        double double53 = rotation52.getQ1();
        double double54 = rotation52.getQ2();
        double[][] doubleArray55 = rotation52.getMatrix();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation61 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D62 = rotation61.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation63 = rotation52.applyTo(rotation61);
        double double64 = rotation61.getQ3();
        double double65 = rotation61.getQ2();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation71 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D72 = rotation71.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation78 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D79 = rotation78.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation80 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D72, vector3D79);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation86 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation87 = rotation80.applyInverseTo(rotation86);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation88 = rotation61.applyTo(rotation80);
        double double89 = rotation80.getQ1();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D35);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(vector3D50);
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(vector3D62);
        org.junit.Assert.assertNotNull(rotation63);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 0.0d + "'", double64 == 0.0d);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.01922366120271981d + "'", double65 == 0.01922366120271981d);
        org.junit.Assert.assertNotNull(vector3D72);
        org.junit.Assert.assertNotNull(vector3D79);
        org.junit.Assert.assertNotNull(rotation87);
        org.junit.Assert.assertNotNull(rotation88);
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 0.0d + "'", double89 == 0.0d);
    }

    @Test
    public void test0774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0774");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation16 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, (double) 100L);
        double double17 = rotation16.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation18 = rotation16.revert();
        double double19 = rotation18.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D20 = rotation18.getAxis();
        double double21 = rotation18.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D22 = rotation18.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation28 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) 0, 100.0d, (double) (short) 100, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation34 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-1.0d), (double) (byte) 10, (double) (byte) 100, (double) 0L, true);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation40 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D41 = rotation40.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation47 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D48 = rotation47.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation49 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D41, vector3D48);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D50 = rotation34.applyTo(vector3D41);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation52 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D41, 0.9996303825414301d);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D53 = rotation28.applyInverseTo(vector3D41);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation55 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D53, (-0.1855270382668764d));
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation56 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D22, vector3D53);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation57 = org.apache.commons.math.geometry.euclidean.threed.Rotation.IDENTITY;
        double double58 = rotation57.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation59 = rotation57.revert();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D60 = rotation59.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation62 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D60, 3.1216032962775833d);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation63 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D22, vector3D60);
        double double64 = rotation63.getQ2();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-0.0d) + "'", double17 == (-0.0d));
        org.junit.Assert.assertNotNull(rotation18);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + (-0.0d) + "'", double19 == (-0.0d));
        org.junit.Assert.assertNotNull(vector3D20);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.5309649148733836d + "'", double21 == 0.5309649148733836d);
        org.junit.Assert.assertNotNull(vector3D22);
        org.junit.Assert.assertNotNull(vector3D41);
        org.junit.Assert.assertNotNull(vector3D48);
        org.junit.Assert.assertNotNull(vector3D50);
        org.junit.Assert.assertNotNull(vector3D53);
        org.junit.Assert.assertNotNull(rotation57);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.0d + "'", double58 == 0.0d);
        org.junit.Assert.assertNotNull(rotation59);
        org.junit.Assert.assertNotNull(vector3D60);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 0.0d + "'", double64 == 0.0d);
    }

    @Test
    public void test0775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0775");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double13 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation5, rotation12);
        double double14 = rotation12.getAngle();
        double double15 = rotation12.getAngle();
        double double16 = rotation12.getQ0();
        double double17 = rotation12.getQ0();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation23 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) 0, (double) ' ', (double) (byte) 100, 17.66239947251099d, true);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation24 = rotation12.applyInverseTo(rotation23);
        double[][] doubleArray25 = rotation23.getMatrix();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray25, 0.028549226295758377d);
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 3.141592653589793d + "'", double14 == 3.141592653589793d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 3.141592653589793d + "'", double15 == 3.141592653589793d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
        org.junit.Assert.assertNotNull(rotation24);
        org.junit.Assert.assertNotNull(doubleArray25);
    }

    @Test
    public void test0776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0776");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(3.1216925665368036d, 0.054379424809409445d, (double) (short) 1, (double) (-1), false);
        org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder6 = null;
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray7 = rotation5.getAngles(rotationOrder6);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.geometry.euclidean.threed.CardanEulerSingularityException; message: Euler angles singularity");
        } catch (org.apache.commons.math.geometry.euclidean.threed.CardanEulerSingularityException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0777");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation20.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = rotation27.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation29 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D21, vector3D28);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D36 = rotation35.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation42 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D43 = rotation42.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation44 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D36, vector3D43);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation45 = rotation29.applyTo(rotation44);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation46 = rotation14.applyTo(rotation45);
        double[][] doubleArray47 = rotation46.getMatrix();
        double[][] doubleArray48 = rotation46.getMatrix();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation50 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray48, (double) 10.0f);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation52 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray48, (double) 100);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation54 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray48, (-0.0d));
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation56 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray48, 3.7105407653375275d);
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(rotation45);
        org.junit.Assert.assertNotNull(rotation46);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(doubleArray48);
    }

    @Test
    public void test0778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0778");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-0.8775825618903728d), 0.0d, 0.0019129169749405736d, 0.05506338499281072d, false);
    }

    @Test
    public void test0779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0779");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-1.0d), (double) (byte) 10, (double) (byte) 100, (double) 0L, true);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation11 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D12 = rotation11.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation18 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D19 = rotation18.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D12, vector3D19);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation5.applyTo(vector3D12);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = rotation27.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation34 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D35 = rotation34.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation36 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D28, vector3D35);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation38 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D28, (double) 100L);
        double double39 = rotation38.getQ3();
        double double40 = rotation38.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D41 = rotation38.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation47 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D48 = rotation47.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation54 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D55 = rotation54.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation56 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D48, vector3D55);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation62 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D63 = rotation62.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation69 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D70 = rotation69.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation76 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D77 = rotation76.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation78 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D70, vector3D77);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation84 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D85 = rotation84.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation91 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D92 = rotation91.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation93 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D85, vector3D92);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation94 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D55, vector3D63, vector3D77, vector3D92);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation95 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D41, vector3D55);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation96 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D21, vector3D41);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation98 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D41, (-0.33900504942104487d));
        org.junit.Assert.assertNotNull(vector3D12);
        org.junit.Assert.assertNotNull(vector3D19);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D35);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + (-0.0d) + "'", double39 == (-0.0d));
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + (-0.0d) + "'", double40 == (-0.0d));
        org.junit.Assert.assertNotNull(vector3D41);
        org.junit.Assert.assertNotNull(vector3D48);
        org.junit.Assert.assertNotNull(vector3D55);
        org.junit.Assert.assertNotNull(vector3D63);
        org.junit.Assert.assertNotNull(vector3D70);
        org.junit.Assert.assertNotNull(vector3D77);
        org.junit.Assert.assertNotNull(vector3D85);
        org.junit.Assert.assertNotNull(vector3D92);
    }

    @Test
    public void test0780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0780");
        org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.geometry.euclidean.threed.Rotation rotation4 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(rotationOrder0, 0.7177793011139257d, (-0.1730129508244783d), (double) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0781");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation20.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = rotation27.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation29 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D21, vector3D28);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D36 = rotation35.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation42 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D43 = rotation42.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation44 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D36, vector3D43);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation45 = rotation29.applyTo(rotation44);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation46 = rotation14.applyTo(rotation45);
        double[][] doubleArray47 = rotation46.getMatrix();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation49 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray47, (double) 100.0f);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation55 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-1.0d), (double) (byte) 10, (double) (byte) 100, (double) 0L, true);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation61 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D62 = rotation61.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D63 = rotation55.applyInverseTo(vector3D62);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D64 = rotation49.applyTo(vector3D63);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation66 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D63, 0.0d);
        double double67 = rotation66.getQ3();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(rotation45);
        org.junit.Assert.assertNotNull(rotation46);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(vector3D62);
        org.junit.Assert.assertNotNull(vector3D63);
        org.junit.Assert.assertNotNull(vector3D64);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.0d + "'", double67 == 0.0d);
    }

    @Test
    public void test0782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0782");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation20.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = rotation27.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation34 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D35 = rotation34.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation36 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D28, vector3D35);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation42 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D43 = rotation42.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation49 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D50 = rotation49.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation51 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D43, vector3D50);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation52 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D13, vector3D21, vector3D35, vector3D50);
        double double53 = rotation52.getQ1();
        double double54 = rotation52.getQ2();
        double[][] doubleArray55 = rotation52.getMatrix();
        org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder56 = null;
        double[] doubleArray57 = rotation52.getAngles(rotationOrder56);
        double double58 = rotation52.getQ3();
        double double59 = rotation52.getQ3();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D35);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(vector3D50);
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[NaN, NaN, NaN]");
        org.junit.Assert.assertTrue(Double.isNaN(double58));
        org.junit.Assert.assertTrue(Double.isNaN(double59));
    }

    @Test
    public void test0783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0783");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation21 = rotation14.applyInverseTo(rotation20);
        double double22 = rotation14.getQ2();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation28 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D29 = rotation28.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D36 = rotation35.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation37 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D29, vector3D36);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation43 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D44 = rotation43.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation50 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D51 = rotation50.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation52 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D44, vector3D51);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation53 = rotation37.applyTo(rotation52);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation59 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) 10, 0.0d, (double) (byte) 0, 10.0d, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation60 = rotation37.applyTo(rotation59);
        double double61 = rotation59.getAngle();
        double double62 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation14, rotation59);
        java.lang.Class<?> wildcardClass63 = rotation59.getClass();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(rotation21);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertNotNull(vector3D29);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D44);
        org.junit.Assert.assertNotNull(vector3D51);
        org.junit.Assert.assertNotNull(rotation53);
        org.junit.Assert.assertNotNull(rotation60);
        org.junit.Assert.assertTrue(Double.isNaN(double61));
        org.junit.Assert.assertTrue(Double.isNaN(double62));
        org.junit.Assert.assertNotNull(wildcardClass63);
    }

    @Test
    public void test0784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0784");
        org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.geometry.euclidean.threed.Rotation rotation4 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(rotationOrder0, 0.0d, (-10.0d), 32.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0785");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (byte) 100, (double) 10L, (double) (short) 100, (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation11 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D12 = rotation11.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation18 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D19 = rotation18.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D12, vector3D19);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation22 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D12, (double) 100L);
        double double23 = rotation22.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation24 = rotation5.applyInverseTo(rotation22);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation30 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D31 = rotation30.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation37 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D38 = rotation37.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation39 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D31, vector3D38);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation45 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation46 = rotation39.applyInverseTo(rotation45);
        double double47 = rotation39.getQ2();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation53 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D54 = rotation53.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation60 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D61 = rotation60.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation62 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D54, vector3D61);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation68 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D69 = rotation68.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation75 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D76 = rotation75.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation77 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D69, vector3D76);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation78 = rotation62.applyTo(rotation77);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation84 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) 10, 0.0d, (double) (byte) 0, 10.0d, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation85 = rotation62.applyTo(rotation84);
        double double86 = rotation84.getAngle();
        double double87 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation39, rotation84);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation88 = rotation24.applyInverseTo(rotation39);
        double double89 = rotation88.getQ1();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation95 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (byte) 100, (double) 10L, (double) (short) 100, (double) 1L, false);
        double double96 = rotation95.getQ2();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation97 = rotation88.applyTo(rotation95);
        double double98 = rotation88.getQ1();
        double double99 = rotation88.getQ3();
        org.junit.Assert.assertNotNull(vector3D12);
        org.junit.Assert.assertNotNull(vector3D19);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + (-0.0d) + "'", double23 == (-0.0d));
        org.junit.Assert.assertNotNull(rotation24);
        org.junit.Assert.assertNotNull(vector3D31);
        org.junit.Assert.assertNotNull(vector3D38);
        org.junit.Assert.assertNotNull(rotation46);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d);
        org.junit.Assert.assertNotNull(vector3D54);
        org.junit.Assert.assertNotNull(vector3D61);
        org.junit.Assert.assertNotNull(vector3D69);
        org.junit.Assert.assertNotNull(vector3D76);
        org.junit.Assert.assertNotNull(rotation78);
        org.junit.Assert.assertNotNull(rotation85);
        org.junit.Assert.assertTrue(Double.isNaN(double86));
        org.junit.Assert.assertTrue(Double.isNaN(double87));
        org.junit.Assert.assertNotNull(rotation88);
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 28.016837073341897d + "'", double89 == 28.016837073341897d);
        org.junit.Assert.assertTrue("'" + double96 + "' != '" + 100.0d + "'", double96 == 100.0d);
        org.junit.Assert.assertNotNull(rotation97);
        org.junit.Assert.assertTrue("'" + double98 + "' != '" + 28.016837073341897d + "'", double98 == 28.016837073341897d);
        org.junit.Assert.assertTrue("'" + double99 + "' != '" + (-15.732467415526763d) + "'", double99 == (-15.732467415526763d));
    }

    @Test
    public void test0786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0786");
        org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.geometry.euclidean.threed.Rotation rotation4 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(rotationOrder0, (-8.717516503499631d), 3.141592653589793d, 1.6481559849923735d);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0787");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-8.954891411406406d), 0.4690350851266164d, 14.405497554001874d, 0.7881701093115124d, false);
    }

    @Test
    public void test0788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0788");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation20.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = rotation27.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation34 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D35 = rotation34.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation36 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D28, vector3D35);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation42 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D43 = rotation42.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation49 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D50 = rotation49.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation51 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D43, vector3D50);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation52 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D13, vector3D21, vector3D35, vector3D50);
        double double53 = rotation52.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation59 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D60 = rotation59.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation66 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double67 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation59, rotation66);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation73 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D74 = rotation73.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation80 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D81 = rotation80.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation82 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D74, vector3D81);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation88 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation89 = rotation82.applyInverseTo(rotation88);
        double double90 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation66, rotation82);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D91 = rotation66.getAxis();
        double[][] doubleArray92 = rotation66.getMatrix();
        double double93 = rotation66.getQ2();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation94 = rotation52.applyInverseTo(rotation66);
        double double95 = rotation52.getQ0();
        double double96 = rotation52.getAngle();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D35);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(vector3D50);
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertNotNull(vector3D60);
        org.junit.Assert.assertTrue(Double.isNaN(double67));
        org.junit.Assert.assertNotNull(vector3D74);
        org.junit.Assert.assertNotNull(vector3D81);
        org.junit.Assert.assertNotNull(rotation89);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 3.141592653589793d + "'", double90 == 3.141592653589793d);
        org.junit.Assert.assertNotNull(vector3D91);
        org.junit.Assert.assertNotNull(doubleArray92);
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + (-1.0d) + "'", double93 == (-1.0d));
        org.junit.Assert.assertNotNull(rotation94);
        org.junit.Assert.assertTrue(Double.isNaN(double95));
        org.junit.Assert.assertTrue(Double.isNaN(double96));
    }

    @Test
    public void test0789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0789");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation16 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, (double) 100L);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation22 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-1.0d), (double) (byte) 10, (double) (byte) 100, (double) 0L, true);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation28 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D29 = rotation28.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D36 = rotation35.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation37 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D29, vector3D36);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D38 = rotation22.applyTo(vector3D29);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation44 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D45 = rotation44.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation51 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D52 = rotation51.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation58 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D59 = rotation58.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation60 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D52, vector3D59);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation62 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D52, (double) 100L);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation63 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D45, vector3D52);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation69 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D70 = rotation69.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation71 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D38, vector3D52, vector3D70);
        double double72 = rotation71.getQ0();
        org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder73 = null;
        double[] doubleArray74 = rotation71.getAngles(rotationOrder73);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation80 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (short) -1, (-0.1730129508244783d), (-0.1730129508244783d), (double) 10.0f, false);
        double double81 = rotation80.getQ2();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation82 = rotation71.applyInverseTo(rotation80);
        double double83 = rotation82.getQ0();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D29);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D38);
        org.junit.Assert.assertNotNull(vector3D45);
        org.junit.Assert.assertNotNull(vector3D52);
        org.junit.Assert.assertNotNull(vector3D59);
        org.junit.Assert.assertNotNull(vector3D70);
        org.junit.Assert.assertTrue(Double.isNaN(double72));
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[NaN, NaN, NaN]");
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + (-0.1730129508244783d) + "'", double81 == (-0.1730129508244783d));
        org.junit.Assert.assertNotNull(rotation82);
        org.junit.Assert.assertTrue(Double.isNaN(double83));
    }

    @Test
    public void test0790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0790");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation16 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, (double) 100L);
        double double17 = rotation16.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation18 = rotation16.revert();
        double double19 = rotation18.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation25 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D26 = rotation25.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation32 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D33 = rotation32.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation34 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D26, vector3D33);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation40 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation41 = rotation34.applyInverseTo(rotation40);
        double double42 = rotation34.getQ2();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation48 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D49 = rotation48.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation55 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D56 = rotation55.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation57 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D49, vector3D56);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation63 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D64 = rotation63.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation70 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D71 = rotation70.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation72 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D64, vector3D71);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation73 = rotation57.applyTo(rotation72);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation79 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) 10, 0.0d, (double) (byte) 0, 10.0d, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation80 = rotation57.applyTo(rotation79);
        double double81 = rotation79.getAngle();
        double double82 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation34, rotation79);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation83 = rotation34.revert();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation84 = rotation18.applyInverseTo(rotation34);
        double[][] doubleArray85 = rotation34.getMatrix();
        double double86 = rotation34.getQ0();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-0.0d) + "'", double17 == (-0.0d));
        org.junit.Assert.assertNotNull(rotation18);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + (-0.0d) + "'", double19 == (-0.0d));
        org.junit.Assert.assertNotNull(vector3D26);
        org.junit.Assert.assertNotNull(vector3D33);
        org.junit.Assert.assertNotNull(rotation41);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.0d + "'", double42 == 0.0d);
        org.junit.Assert.assertNotNull(vector3D49);
        org.junit.Assert.assertNotNull(vector3D56);
        org.junit.Assert.assertNotNull(vector3D64);
        org.junit.Assert.assertNotNull(vector3D71);
        org.junit.Assert.assertNotNull(rotation73);
        org.junit.Assert.assertNotNull(rotation80);
        org.junit.Assert.assertTrue(Double.isNaN(double81));
        org.junit.Assert.assertTrue(Double.isNaN(double82));
        org.junit.Assert.assertNotNull(rotation83);
        org.junit.Assert.assertNotNull(rotation84);
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 1.0d + "'", double86 == 1.0d);
    }

    @Test
    public void test0791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0791");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation16 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, (double) 100L);
        double double17 = rotation16.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation18 = rotation16.revert();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation24 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (byte) 100, (double) 10L, (double) (short) 100, (double) 1L, false);
        double double25 = rotation24.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation26 = rotation18.applyInverseTo(rotation24);
        double double27 = rotation24.getQ0();
        double double28 = rotation24.getQ0();
        double[][] doubleArray29 = rotation24.getMatrix();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.geometry.euclidean.threed.Rotation rotation31 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray29, (double) 0.0f);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.geometry.euclidean.threed.NotARotationMatrixException; message: unable to orthogonalize matrix in 10 iterations");
        } catch (org.apache.commons.math.geometry.euclidean.threed.NotARotationMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-0.0d) + "'", double17 == (-0.0d));
        org.junit.Assert.assertNotNull(rotation18);
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertNotNull(rotation26);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 100.0d + "'", double27 == 100.0d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 100.0d + "'", double28 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray29);
    }

    @Test
    public void test0792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0792");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation16 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, (double) 100L);
        double double17 = rotation16.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation18 = rotation16.revert();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation24 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (byte) 100, (double) 10L, (double) (short) 100, (double) 1L, false);
        double double25 = rotation24.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation26 = rotation18.applyInverseTo(rotation24);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation32 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation38 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-1.0d), (double) (byte) 10, (double) (byte) 100, (double) 0L, true);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation44 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D45 = rotation44.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation51 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D52 = rotation51.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation53 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D45, vector3D52);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D54 = rotation38.applyTo(vector3D45);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D55 = rotation32.applyTo(vector3D54);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D56 = rotation24.applyInverseTo(vector3D55);
        double double57 = rotation24.getQ3();
        double[][] doubleArray58 = rotation24.getMatrix();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-0.0d) + "'", double17 == (-0.0d));
        org.junit.Assert.assertNotNull(rotation18);
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertNotNull(rotation26);
        org.junit.Assert.assertNotNull(vector3D45);
        org.junit.Assert.assertNotNull(vector3D52);
        org.junit.Assert.assertNotNull(vector3D54);
        org.junit.Assert.assertNotNull(vector3D55);
        org.junit.Assert.assertNotNull(vector3D56);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 1.0d + "'", double57 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray58);
    }

    @Test
    public void test0793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0793");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-1.0d), (double) (byte) 10, (double) (byte) 100, (double) 0L, true);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation11 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D12 = rotation11.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation18 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D19 = rotation18.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D12, vector3D19);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation5.applyTo(vector3D12);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) 10, 0.0d, (double) (byte) 0, 10.0d, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation33 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (byte) 100, (double) 10L, (double) (short) 100, (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation39 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D40 = rotation39.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation46 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D47 = rotation46.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation48 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D40, vector3D47);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation50 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D40, (double) 100L);
        double double51 = rotation50.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation52 = rotation33.applyInverseTo(rotation50);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation53 = rotation27.applyInverseTo(rotation50);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation54 = rotation5.applyTo(rotation27);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation60 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-1.0d), (double) (byte) 10, (double) (byte) 100, (double) 0L, true);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation66 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D67 = rotation66.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D68 = rotation60.applyInverseTo(vector3D67);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D69 = rotation54.applyInverseTo(vector3D67);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation71 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D67, (-0.005854811095535375d));
        org.junit.Assert.assertNotNull(vector3D12);
        org.junit.Assert.assertNotNull(vector3D19);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D40);
        org.junit.Assert.assertNotNull(vector3D47);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + (-0.0d) + "'", double51 == (-0.0d));
        org.junit.Assert.assertNotNull(rotation52);
        org.junit.Assert.assertNotNull(rotation53);
        org.junit.Assert.assertNotNull(rotation54);
        org.junit.Assert.assertNotNull(vector3D67);
        org.junit.Assert.assertNotNull(vector3D68);
        org.junit.Assert.assertNotNull(vector3D69);
    }

    @Test
    public void test0794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0794");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) 0, (double) 0, (double) (short) 1, (double) (byte) 1, false);
        double double6 = rotation5.getQ1();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation19 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D20 = rotation19.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation21 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D13, vector3D20);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation23 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D13, (double) 100L);
        double double24 = rotation23.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation25 = rotation23.revert();
        double double26 = rotation25.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D27 = rotation25.getAxis();
        double double28 = rotation25.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D29 = rotation25.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) 0, 100.0d, (double) (short) 100, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation41 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-1.0d), (double) (byte) 10, (double) (byte) 100, (double) 0L, true);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation47 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D48 = rotation47.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation54 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D55 = rotation54.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation56 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D48, vector3D55);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D57 = rotation41.applyTo(vector3D48);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation59 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D48, 0.9996303825414301d);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D60 = rotation35.applyInverseTo(vector3D48);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation62 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D60, (-0.1855270382668764d));
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation63 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D29, vector3D60);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D64 = rotation5.applyTo(vector3D60);
        org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder65 = null;
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray66 = rotation5.getAngles(rotationOrder65);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.geometry.euclidean.threed.CardanEulerSingularityException; message: Euler angles singularity");
        } catch (org.apache.commons.math.geometry.euclidean.threed.CardanEulerSingularityException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D20);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + (-0.0d) + "'", double24 == (-0.0d));
        org.junit.Assert.assertNotNull(rotation25);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + (-0.0d) + "'", double26 == (-0.0d));
        org.junit.Assert.assertNotNull(vector3D27);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.5309649148733836d + "'", double28 == 0.5309649148733836d);
        org.junit.Assert.assertNotNull(vector3D29);
        org.junit.Assert.assertNotNull(vector3D48);
        org.junit.Assert.assertNotNull(vector3D55);
        org.junit.Assert.assertNotNull(vector3D57);
        org.junit.Assert.assertNotNull(vector3D60);
        org.junit.Assert.assertNotNull(vector3D64);
    }

    @Test
    public void test0795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0795");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation20.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = rotation27.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation29 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D21, vector3D28);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D36 = rotation35.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation42 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D43 = rotation42.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation44 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D36, vector3D43);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation45 = rotation29.applyTo(rotation44);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation46 = rotation14.applyTo(rotation45);
        double[][] doubleArray47 = rotation46.getMatrix();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation49 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray47, (double) 10);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation51 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray47, (double) (byte) 100);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation53 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray47, 0.0d);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation55 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray47, (double) 10L);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation61 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.33900504942104487d, 0.01922366120271981d, Double.NaN, (double) 10L, false);
        double double62 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation55, rotation61);
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(rotation45);
        org.junit.Assert.assertNotNull(rotation46);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertTrue(Double.isNaN(double62));
    }

    @Test
    public void test0796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0796");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) 10, 0.0d, (double) (byte) 0, 10.0d, false);
        double double6 = rotation5.getQ1();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation19 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D20 = rotation19.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation21 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D13, vector3D20);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = rotation27.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation34 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D35 = rotation34.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation41 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D42 = rotation41.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation43 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D35, vector3D42);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation49 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D50 = rotation49.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation56 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D57 = rotation56.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation58 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D50, vector3D57);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation59 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D20, vector3D28, vector3D42, vector3D57);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D60 = rotation5.applyTo(vector3D42);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation62 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D42, 0.7881701093115122d);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation68 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D69 = rotation68.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation75 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D76 = rotation75.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation77 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D69, vector3D76);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation79 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D69, (double) 100L);
        double double80 = rotation79.getQ1();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation81 = rotation62.applyTo(rotation79);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D82 = rotation62.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation84 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D82, Double.NaN);
        double double85 = rotation84.getQ0();
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D20);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D35);
        org.junit.Assert.assertNotNull(vector3D42);
        org.junit.Assert.assertNotNull(vector3D50);
        org.junit.Assert.assertNotNull(vector3D57);
        org.junit.Assert.assertNotNull(vector3D60);
        org.junit.Assert.assertNotNull(vector3D69);
        org.junit.Assert.assertNotNull(vector3D76);
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + (-0.1855270382668764d) + "'", double80 == (-0.1855270382668764d));
        org.junit.Assert.assertNotNull(rotation81);
        org.junit.Assert.assertNotNull(vector3D82);
        org.junit.Assert.assertTrue(Double.isNaN(double85));
    }

    @Test
    public void test0797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0797");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation16 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, (double) 100L);
        double double17 = rotation16.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation18 = rotation16.revert();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation24 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (byte) 100, (double) 10L, (double) (short) 100, (double) 1L, false);
        double double25 = rotation24.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation26 = rotation18.applyInverseTo(rotation24);
        double double27 = rotation18.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation33 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D34 = rotation33.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation40 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double41 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation33, rotation40);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation47 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D48 = rotation47.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation54 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double55 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation47, rotation54);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation56 = rotation40.applyInverseTo(rotation47);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation62 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D63 = rotation62.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation69 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D70 = rotation69.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation71 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D63, vector3D70);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation73 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D63, (double) 1L);
        double double74 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation47, rotation73);
        double double75 = rotation73.getQ0();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation76 = rotation18.applyInverseTo(rotation73);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D77 = rotation73.getAxis();
        double double78 = rotation73.getQ1();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-0.0d) + "'", double17 == (-0.0d));
        org.junit.Assert.assertNotNull(rotation18);
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertNotNull(rotation26);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.5309649148733836d + "'", double27 == 0.5309649148733836d);
        org.junit.Assert.assertNotNull(vector3D34);
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertNotNull(vector3D48);
        org.junit.Assert.assertTrue(Double.isNaN(double55));
        org.junit.Assert.assertNotNull(rotation56);
        org.junit.Assert.assertNotNull(vector3D63);
        org.junit.Assert.assertNotNull(vector3D70);
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 0.9456205751905904d + "'", double74 == 0.9456205751905904d);
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 0.8775825618903728d + "'", double75 == 0.8775825618903728d);
        org.junit.Assert.assertNotNull(rotation76);
        org.junit.Assert.assertNotNull(vector3D77);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 0.33900504942104487d + "'", double78 == 0.33900504942104487d);
    }

    @Test
    public void test0798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0798");
        double[][] doubleArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.geometry.euclidean.threed.Rotation rotation2 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray0, 3.1390038567388605d);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0799");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation20.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = rotation27.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation29 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D21, vector3D28);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D36 = rotation35.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation42 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D43 = rotation42.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation44 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D36, vector3D43);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation45 = rotation29.applyTo(rotation44);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation46 = rotation14.applyTo(rotation45);
        double[][] doubleArray47 = rotation46.getMatrix();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation49 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray47, (double) '4');
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation55 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(2.7755575615628914E-17d, (-8.717516503499631d), (-0.005755946541407356d), (double) (-1L), false);
        double double56 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation49, rotation55);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation57 = rotation49.revert();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(rotation45);
        org.junit.Assert.assertNotNull(rotation46);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 3.141592653589793d + "'", double56 == 3.141592653589793d);
        org.junit.Assert.assertNotNull(rotation57);
    }

    @Test
    public void test0800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0800");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double13 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation5, rotation12);
        double double14 = rotation12.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation20.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double28 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation20, rotation27);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation34 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D35 = rotation34.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation41 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double42 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation34, rotation41);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation43 = rotation27.applyInverseTo(rotation34);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation44 = rotation12.applyTo(rotation34);
        org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder45 = null;
        double[] doubleArray46 = rotation44.getAngles(rotationOrder45);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation52 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D53 = rotation52.getAxis();
        double double54 = rotation52.getQ0();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation55 = rotation44.applyInverseTo(rotation52);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation61 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) 100, 0.33900504942104487d, 0.09949879346007118d, true);
        double double62 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation52, rotation61);
        double[][] doubleArray63 = rotation61.getMatrix();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation65 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray63, (double) 0);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation67 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray63, (double) (short) 10);
        double[][] doubleArray68 = rotation67.getMatrix();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 3.141592653589793d + "'", double14 == 3.141592653589793d);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertNotNull(vector3D35);
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertNotNull(rotation43);
        org.junit.Assert.assertNotNull(rotation44);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[-0.31746367442260337, 1.2637009275001716, 3.026886383418824]");
        org.junit.Assert.assertNotNull(vector3D53);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.9996303825414301d + "'", double54 == 0.9996303825414301d);
        org.junit.Assert.assertNotNull(rotation55);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 3.1030128410395363d + "'", double62 == 3.1030128410395363d);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertNotNull(doubleArray68);
    }

    @Test
    public void test0801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0801");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-1.0d), (double) (byte) 10, (double) (byte) 100, (double) 0L, true);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation11 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D12 = rotation11.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation18 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D19 = rotation18.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D12, vector3D19);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation5.applyTo(vector3D12);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) 10, 0.0d, (double) (byte) 0, 10.0d, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation33 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (byte) 100, (double) 10L, (double) (short) 100, (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation39 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D40 = rotation39.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation46 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D47 = rotation46.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation48 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D40, vector3D47);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation50 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D40, (double) 100L);
        double double51 = rotation50.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation52 = rotation33.applyInverseTo(rotation50);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation53 = rotation27.applyInverseTo(rotation50);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation54 = rotation53.revert();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D55 = rotation54.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation56 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D12, vector3D55);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation57 = rotation56.revert();
        double[][] doubleArray58 = rotation57.getMatrix();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.geometry.euclidean.threed.Rotation rotation60 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray58, (-0.009949438965141721d));
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.geometry.euclidean.threed.NotARotationMatrixException; message: unable to orthogonalize matrix in 10 iterations");
        } catch (org.apache.commons.math.geometry.euclidean.threed.NotARotationMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(vector3D12);
        org.junit.Assert.assertNotNull(vector3D19);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D40);
        org.junit.Assert.assertNotNull(vector3D47);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + (-0.0d) + "'", double51 == (-0.0d));
        org.junit.Assert.assertNotNull(rotation52);
        org.junit.Assert.assertNotNull(rotation53);
        org.junit.Assert.assertNotNull(rotation54);
        org.junit.Assert.assertNotNull(vector3D55);
        org.junit.Assert.assertNotNull(rotation57);
        org.junit.Assert.assertNotNull(doubleArray58);
    }

    @Test
    public void test0802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0802");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation16 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, (double) 100L);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation22 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-1.0d), (double) (byte) 10, (double) (byte) 100, (double) 0L, true);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation28 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D29 = rotation28.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D36 = rotation35.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation37 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D29, vector3D36);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D38 = rotation22.applyTo(vector3D29);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation44 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D45 = rotation44.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation51 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D52 = rotation51.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation58 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D59 = rotation58.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation60 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D52, vector3D59);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation62 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D52, (double) 100L);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation63 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D45, vector3D52);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation69 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D70 = rotation69.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation71 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D38, vector3D52, vector3D70);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation73 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D38, (-0.0d));
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation75 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D38, 2.566370614359173d);
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D29);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D38);
        org.junit.Assert.assertNotNull(vector3D45);
        org.junit.Assert.assertNotNull(vector3D52);
        org.junit.Assert.assertNotNull(vector3D59);
        org.junit.Assert.assertNotNull(vector3D70);
    }

    @Test
    public void test0803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0803");
        org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.geometry.euclidean.threed.Rotation rotation4 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(rotationOrder0, 0.9456205751905904d, (-10.0d), 0.20120377604668616d);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0804");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double13 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation5, rotation12);
        double double14 = rotation12.getAngle();
        double double15 = rotation12.getAngle();
        double double16 = rotation12.getQ0();
        double double17 = rotation12.getQ0();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation23 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D24 = rotation23.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation30 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D31 = rotation30.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation32 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D24, vector3D31);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation34 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D24, (double) 100L);
        double double35 = rotation34.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation36 = rotation34.revert();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation42 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (byte) 100, (double) 10L, (double) (short) 100, (double) 1L, false);
        double double43 = rotation42.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation44 = rotation36.applyInverseTo(rotation42);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D45 = rotation42.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D46 = rotation12.applyInverseTo(vector3D45);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation48 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D46, 0.9456205751905904d);
        java.lang.Class<?> wildcardClass49 = vector3D46.getClass();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 3.141592653589793d + "'", double14 == 3.141592653589793d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 3.141592653589793d + "'", double15 == 3.141592653589793d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
        org.junit.Assert.assertNotNull(vector3D24);
        org.junit.Assert.assertNotNull(vector3D31);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + (-0.0d) + "'", double35 == (-0.0d));
        org.junit.Assert.assertNotNull(rotation36);
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertNotNull(rotation44);
        org.junit.Assert.assertNotNull(vector3D45);
        org.junit.Assert.assertNotNull(vector3D46);
        org.junit.Assert.assertNotNull(wildcardClass49);
    }

    @Test
    public void test0805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0805");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-0.1855270382668764d), (double) 10, (double) (short) -1, (double) 100.0f, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation6 = rotation5.revert();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation19 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D20 = rotation19.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation21 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D13, vector3D20);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = rotation27.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation34 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D35 = rotation34.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation36 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D28, vector3D35);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation42 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D43 = rotation42.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation49 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D50 = rotation49.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation51 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D43, vector3D50);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation52 = rotation36.applyTo(rotation51);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation53 = rotation21.applyTo(rotation52);
        double[][] doubleArray54 = rotation53.getMatrix();
        double double55 = rotation53.getQ1();
        double[][] doubleArray56 = rotation53.getMatrix();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation58 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray56, (double) 100L);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation60 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray56, 0.7881701093115122d);
        double double61 = rotation60.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation62 = rotation6.applyInverseTo(rotation60);
        java.lang.Class<?> wildcardClass63 = rotation60.getClass();
        org.junit.Assert.assertNotNull(rotation6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D20);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D35);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(vector3D50);
        org.junit.Assert.assertNotNull(rotation52);
        org.junit.Assert.assertNotNull(rotation53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 0.0d + "'", double61 == 0.0d);
        org.junit.Assert.assertNotNull(rotation62);
        org.junit.Assert.assertNotNull(wildcardClass63);
    }

    @Test
    public void test0806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0806");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.9456205751905904d, (double) 1, (double) ' ', 0.9996303825414301d, true);
        double double6 = rotation5.getAngle();
        java.lang.Class<?> wildcardClass7 = rotation5.getClass();
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 3.082566122054968d + "'", double6 == 3.082566122054968d);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0807");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation20.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = rotation27.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation29 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D21, vector3D28);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation30 = rotation14.applyTo(rotation29);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation36 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) 10, 0.0d, (double) (byte) 0, 10.0d, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation37 = rotation14.applyTo(rotation36);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation38 = rotation37.revert();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation44 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D45 = rotation44.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation51 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D52 = rotation51.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation53 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D45, vector3D52);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation59 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D60 = rotation59.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation66 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D67 = rotation66.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation73 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D74 = rotation73.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation75 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D67, vector3D74);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation81 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D82 = rotation81.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation88 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D89 = rotation88.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation90 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D82, vector3D89);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation91 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D52, vector3D60, vector3D74, vector3D89);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation93 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D52, (double) 1.0f);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation94 = rotation38.applyTo(rotation93);
        double double95 = rotation93.getQ2();
        double double96 = rotation93.getAngle();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(rotation30);
        org.junit.Assert.assertNotNull(rotation37);
        org.junit.Assert.assertNotNull(rotation38);
        org.junit.Assert.assertNotNull(vector3D45);
        org.junit.Assert.assertNotNull(vector3D52);
        org.junit.Assert.assertNotNull(vector3D60);
        org.junit.Assert.assertNotNull(vector3D67);
        org.junit.Assert.assertNotNull(vector3D74);
        org.junit.Assert.assertNotNull(vector3D82);
        org.junit.Assert.assertNotNull(vector3D89);
        org.junit.Assert.assertNotNull(rotation94);
        org.junit.Assert.assertTrue("'" + double95 + "' != '" + 0.33900504942104487d + "'", double95 == 0.33900504942104487d);
        org.junit.Assert.assertTrue("'" + double96 + "' != '" + 1.0d + "'", double96 == 1.0d);
    }

    @Test
    public void test0808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0808");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double13 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation5, rotation12);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation19 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D20 = rotation19.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation26 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double27 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation19, rotation26);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation28 = rotation12.applyInverseTo(rotation19);
        double double29 = rotation19.getQ0();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D36 = rotation35.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation42 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D43 = rotation42.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation44 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D36, vector3D43);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation50 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D51 = rotation50.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation57 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D58 = rotation57.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation64 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D65 = rotation64.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation66 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D58, vector3D65);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation72 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D73 = rotation72.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation79 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D80 = rotation79.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation81 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D73, vector3D80);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation82 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D43, vector3D51, vector3D65, vector3D80);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation84 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D51, (double) 1);
        double double85 = rotation84.getQ1();
        double double86 = rotation84.getQ1();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D87 = rotation84.getAxis();
        double double88 = rotation84.getAngle();
        double double89 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation19, rotation84);
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertNotNull(vector3D20);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertNotNull(rotation28);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.9996303825414301d + "'", double29 == 0.9996303825414301d);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(vector3D51);
        org.junit.Assert.assertNotNull(vector3D58);
        org.junit.Assert.assertNotNull(vector3D65);
        org.junit.Assert.assertNotNull(vector3D73);
        org.junit.Assert.assertNotNull(vector3D80);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 0.33900504942104487d + "'", double85 == 0.33900504942104487d);
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 0.33900504942104487d + "'", double86 == 0.33900504942104487d);
        org.junit.Assert.assertNotNull(vector3D87);
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 1.0d + "'", double88 == 1.0d);
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 0.9456205751905904d + "'", double89 == 0.9456205751905904d);
    }

    @Test
    public void test0809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0809");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double13 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation5, rotation12);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation19 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D20 = rotation19.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation26 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D27 = rotation26.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation28 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D20, vector3D27);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation34 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = rotation28.applyInverseTo(rotation34);
        double double36 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation12, rotation28);
        double double37 = rotation12.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation43 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D44 = rotation43.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation50 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double51 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation43, rotation50);
        double double52 = rotation50.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation58 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D59 = rotation58.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation65 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double66 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation58, rotation65);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation72 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D73 = rotation72.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation79 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double80 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation72, rotation79);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation81 = rotation65.applyInverseTo(rotation72);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation82 = rotation50.applyTo(rotation72);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D83 = rotation50.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D84 = rotation12.applyInverseTo(vector3D83);
        double double85 = rotation12.getQ1();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation91 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) 0, (double) 1.0f, (double) 0.0f, 0.01922366120271981d, true);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation92 = rotation12.applyTo(rotation91);
        double[][] doubleArray93 = rotation92.getMatrix();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.geometry.euclidean.threed.Rotation rotation95 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray93, 3.141592653589793d);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.geometry.euclidean.threed.NotARotationMatrixException; message: unable to orthogonalize matrix in 10 iterations");
        } catch (org.apache.commons.math.geometry.euclidean.threed.NotARotationMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertNotNull(vector3D20);
        org.junit.Assert.assertNotNull(vector3D27);
        org.junit.Assert.assertNotNull(rotation35);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 3.141592653589793d + "'", double36 == 3.141592653589793d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 3.141592653589793d + "'", double37 == 3.141592653589793d);
        org.junit.Assert.assertNotNull(vector3D44);
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 3.141592653589793d + "'", double52 == 3.141592653589793d);
        org.junit.Assert.assertNotNull(vector3D59);
        org.junit.Assert.assertTrue(Double.isNaN(double66));
        org.junit.Assert.assertNotNull(vector3D73);
        org.junit.Assert.assertTrue(Double.isNaN(double80));
        org.junit.Assert.assertNotNull(rotation81);
        org.junit.Assert.assertNotNull(rotation82);
        org.junit.Assert.assertNotNull(vector3D83);
        org.junit.Assert.assertNotNull(vector3D84);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 10.0d + "'", double85 == 10.0d);
        org.junit.Assert.assertNotNull(rotation92);
        org.junit.Assert.assertNotNull(doubleArray93);
    }

    @Test
    public void test0810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0810");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double13 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation5, rotation12);
        double double14 = rotation12.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation20.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = rotation27.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation29 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D21, vector3D28);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D36 = rotation35.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation42 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D43 = rotation42.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation44 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D36, vector3D43);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation45 = rotation29.applyTo(rotation44);
        double double46 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation12, rotation45);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation52 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D53 = rotation52.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation59 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double60 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation52, rotation59);
        double double61 = rotation59.getQ1();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation67 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D68 = rotation67.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation74 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D75 = rotation74.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation76 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D68, vector3D75);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation78 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D68, (double) 100L);
        double double79 = rotation78.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation80 = rotation78.revert();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation86 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (byte) 100, (double) 10L, (double) (short) 100, (double) 1L, false);
        double double87 = rotation86.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation88 = rotation80.applyInverseTo(rotation86);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D89 = rotation86.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D90 = rotation59.applyInverseTo(vector3D89);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D91 = rotation12.applyTo(vector3D89);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation93 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D89, 0.33900504942104487d);
        double double94 = rotation93.getQ1();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 3.141592653589793d + "'", double14 == 3.141592653589793d);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(rotation45);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 3.141592653589793d + "'", double46 == 3.141592653589793d);
        org.junit.Assert.assertNotNull(vector3D53);
        org.junit.Assert.assertTrue(Double.isNaN(double60));
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 10.0d + "'", double61 == 10.0d);
        org.junit.Assert.assertNotNull(vector3D68);
        org.junit.Assert.assertNotNull(vector3D75);
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + (-0.0d) + "'", double79 == (-0.0d));
        org.junit.Assert.assertNotNull(rotation80);
        org.junit.Assert.assertTrue(Double.isNaN(double87));
        org.junit.Assert.assertNotNull(rotation88);
        org.junit.Assert.assertNotNull(vector3D89);
        org.junit.Assert.assertNotNull(vector3D90);
        org.junit.Assert.assertNotNull(vector3D91);
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + 0.016784652862817887d + "'", double94 == 0.016784652862817887d);
    }

    @Test
    public void test0811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0811");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-1.0d), (double) (byte) 10, (double) (byte) 100, (double) 0L, true);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation11 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D12 = rotation11.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation5.applyInverseTo(vector3D12);
        double double14 = rotation5.getQ2();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D15 = rotation5.getAxis();
        double double16 = rotation5.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D17 = rotation5.getAxis();
        double double18 = rotation5.getQ1();
        org.junit.Assert.assertNotNull(vector3D12);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.9949879346007117d + "'", double14 == 0.9949879346007117d);
        org.junit.Assert.assertNotNull(vector3D15);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertNotNull(vector3D17);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.09949879346007118d + "'", double18 == 0.09949879346007118d);
    }

    @Test
    public void test0812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0812");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double13 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation5, rotation12);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation19 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D20 = rotation19.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation26 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double27 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation19, rotation26);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation28 = rotation12.applyInverseTo(rotation19);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation34 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D35 = rotation34.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation41 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D42 = rotation41.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation43 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D35, vector3D42);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation45 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D35, (double) 1L);
        double double46 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation19, rotation45);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation47 = rotation19.revert();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation53 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-0.1855270382668764d), (double) 10, (double) (short) -1, (double) 100.0f, false);
        double[][] doubleArray54 = rotation53.getMatrix();
        double[][] doubleArray55 = rotation53.getMatrix();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D56 = rotation53.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation57 = rotation47.applyTo(rotation53);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D58 = rotation53.getAxis();
        double double59 = rotation53.getAngle();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertNotNull(vector3D20);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertNotNull(rotation28);
        org.junit.Assert.assertNotNull(vector3D35);
        org.junit.Assert.assertNotNull(vector3D42);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.9456205751905904d + "'", double46 == 0.9456205751905904d);
        org.junit.Assert.assertNotNull(rotation47);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(vector3D56);
        org.junit.Assert.assertNotNull(rotation57);
        org.junit.Assert.assertNotNull(vector3D58);
        org.junit.Assert.assertTrue(Double.isNaN(double59));
    }

    @Test
    public void test0813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0813");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double13 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation5, rotation12);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation19 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D20 = rotation19.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation26 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double27 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation19, rotation26);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation28 = rotation12.applyInverseTo(rotation19);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation34 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D35 = rotation34.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation41 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D42 = rotation41.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation43 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D35, vector3D42);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation45 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D35, (double) 1L);
        double double46 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation19, rotation45);
        double double47 = rotation19.getQ0();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertNotNull(vector3D20);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertNotNull(rotation28);
        org.junit.Assert.assertNotNull(vector3D35);
        org.junit.Assert.assertNotNull(vector3D42);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.9456205751905904d + "'", double46 == 0.9456205751905904d);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.9996303825414301d + "'", double47 == 0.9996303825414301d);
    }

    @Test
    public void test0814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0814");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) 0, 100.0d, (double) (short) 100, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation11 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.9456205751905904d, (double) 1, (double) ' ', 0.9996303825414301d, true);
        double double12 = rotation11.getAngle();
        double double13 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation5, rotation11);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 3.082566122054968d + "'", double12 == 3.082566122054968d);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
    }

    @Test
    public void test0815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0815");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (-1), 0.5309649148733836d, (double) (-1), (double) 1, true);
        double[][] doubleArray6 = rotation5.getMatrix();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.geometry.euclidean.threed.Rotation rotation8 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray6, (-9.649660284921133d));
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.geometry.euclidean.threed.NotARotationMatrixException; message: unable to orthogonalize matrix in 10 iterations");
        } catch (org.apache.commons.math.geometry.euclidean.threed.NotARotationMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
    }

    @Test
    public void test0816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0816");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double13 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation5, rotation12);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation19 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D20 = rotation19.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation26 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double27 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation19, rotation26);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation28 = rotation12.applyInverseTo(rotation19);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation34 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D35 = rotation34.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation41 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D42 = rotation41.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation43 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D35, vector3D42);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation45 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D35, (double) 1L);
        double double46 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation19, rotation45);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation47 = rotation45.revert();
        double double48 = rotation45.getQ0();
        double double49 = rotation45.getAngle();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertNotNull(vector3D20);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertNotNull(rotation28);
        org.junit.Assert.assertNotNull(vector3D35);
        org.junit.Assert.assertNotNull(vector3D42);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.9456205751905904d + "'", double46 == 0.9456205751905904d);
        org.junit.Assert.assertNotNull(rotation47);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.8775825618903728d + "'", double48 == 0.8775825618903728d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 1.0d + "'", double49 == 1.0d);
    }

    @Test
    public void test0817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0817");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        double[][] doubleArray15 = rotation14.getMatrix();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation17 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray15, 3.7105407653375275d);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation19 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray15, (double) (short) 1);
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(doubleArray15);
    }

    @Test
    public void test0818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0818");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation11 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-1.0d), (double) (byte) 10, (double) (byte) 100, (double) 0L, true);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation17 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D18 = rotation17.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation24 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D25 = rotation24.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation26 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D18, vector3D25);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D27 = rotation11.applyTo(vector3D18);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = rotation5.applyTo(vector3D27);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation30 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D27, (double) 1.0f);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation32 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D27, 0.0d);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation38 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-0.33900504942104487d), (double) 100.0f, (double) 10L, 3.1216925665368036d, true);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation44 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D45 = rotation44.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation51 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D52 = rotation51.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation53 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D45, vector3D52);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation59 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D60 = rotation59.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation66 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double67 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation59, rotation66);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation73 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D74 = rotation73.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation80 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double81 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation73, rotation80);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation82 = rotation66.applyInverseTo(rotation73);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D83 = rotation82.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation84 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D45, vector3D83);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation86 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D45, 3.082566122054968d);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D87 = rotation38.applyInverseTo(vector3D45);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation88 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D27, vector3D87);
        org.junit.Assert.assertNotNull(vector3D18);
        org.junit.Assert.assertNotNull(vector3D25);
        org.junit.Assert.assertNotNull(vector3D27);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D45);
        org.junit.Assert.assertNotNull(vector3D52);
        org.junit.Assert.assertNotNull(vector3D60);
        org.junit.Assert.assertTrue(Double.isNaN(double67));
        org.junit.Assert.assertNotNull(vector3D74);
        org.junit.Assert.assertTrue(Double.isNaN(double81));
        org.junit.Assert.assertNotNull(rotation82);
        org.junit.Assert.assertNotNull(vector3D83);
        org.junit.Assert.assertNotNull(vector3D87);
    }

    @Test
    public void test0819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0819");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (short) 10, (double) (-1L), 8960.928033465932d, (double) 'a', false);
        double double6 = rotation5.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation19 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D20 = rotation19.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation21 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D13, vector3D20);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation23 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D13, (double) 100L);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation29 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-1.0d), (double) (byte) 10, (double) (byte) 100, (double) 0L, true);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D36 = rotation35.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation42 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D43 = rotation42.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation44 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D36, vector3D43);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D45 = rotation29.applyTo(vector3D36);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation51 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D52 = rotation51.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation58 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D59 = rotation58.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation65 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D66 = rotation65.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation67 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D59, vector3D66);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation69 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D59, (double) 100L);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation70 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D52, vector3D59);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation76 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D77 = rotation76.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation78 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D13, vector3D45, vector3D59, vector3D77);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation80 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D59, (double) 1.0f);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation82 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D59, (double) (short) 10);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D83 = rotation82.getAxis();
        double double84 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation5, rotation82);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D85 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder86 = null;
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray87 = rotation5.getAngles(rotationOrder86);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.geometry.euclidean.threed.CardanEulerSingularityException; message: Euler angles singularity");
        } catch (org.apache.commons.math.geometry.euclidean.threed.CardanEulerSingularityException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 97.0d + "'", double6 == 97.0d);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D20);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(vector3D45);
        org.junit.Assert.assertNotNull(vector3D52);
        org.junit.Assert.assertNotNull(vector3D59);
        org.junit.Assert.assertNotNull(vector3D66);
        org.junit.Assert.assertNotNull(vector3D77);
        org.junit.Assert.assertNotNull(vector3D83);
        org.junit.Assert.assertTrue(Double.isNaN(double84));
        org.junit.Assert.assertNotNull(vector3D85);
    }

    @Test
    public void test0820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0820");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation16 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, (double) 100L);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation22 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-1.0d), (double) (byte) 10, (double) (byte) 100, (double) 0L, true);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation28 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D29 = rotation28.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D36 = rotation35.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation37 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D29, vector3D36);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D38 = rotation22.applyTo(vector3D29);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation44 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D45 = rotation44.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation51 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D52 = rotation51.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation58 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D59 = rotation58.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation60 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D52, vector3D59);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation62 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D52, (double) 100L);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation63 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D45, vector3D52);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation69 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D70 = rotation69.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation71 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D38, vector3D52, vector3D70);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation73 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D52, (double) 1.0f);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation75 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D52, (double) (short) 10);
        double double76 = rotation75.getQ1();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D77 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D78 = rotation75.applyInverseTo(vector3D77);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D29);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D38);
        org.junit.Assert.assertNotNull(vector3D45);
        org.junit.Assert.assertNotNull(vector3D52);
        org.junit.Assert.assertNotNull(vector3D59);
        org.junit.Assert.assertNotNull(vector3D70);
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + (-0.6780618572586967d) + "'", double76 == (-0.6780618572586967d));
    }

    @Test
    public void test0821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0821");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation20.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = rotation27.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation29 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D21, vector3D28);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D36 = rotation35.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation42 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D43 = rotation42.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation44 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D36, vector3D43);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation45 = rotation29.applyTo(rotation44);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation46 = rotation14.applyTo(rotation45);
        double[][] doubleArray47 = rotation46.getMatrix();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation49 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray47, (double) '4');
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation51 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray47, (double) 0L);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation57 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-0.1855270382668764d), (double) 1, Double.NaN, (double) (short) 100, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation58 = rotation51.applyInverseTo(rotation57);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D59 = rotation57.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation61 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D59, (double) (short) 1);
        java.lang.Class<?> wildcardClass62 = vector3D59.getClass();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(rotation45);
        org.junit.Assert.assertNotNull(rotation46);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(rotation58);
        org.junit.Assert.assertNotNull(vector3D59);
        org.junit.Assert.assertNotNull(wildcardClass62);
    }

    @Test
    public void test0822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0822");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation20.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = rotation27.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation29 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D21, vector3D28);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D36 = rotation35.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation42 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D43 = rotation42.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation44 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D36, vector3D43);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation45 = rotation29.applyTo(rotation44);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation46 = rotation14.applyTo(rotation45);
        double[][] doubleArray47 = rotation46.getMatrix();
        double[][] doubleArray48 = rotation46.getMatrix();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation50 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray48, (double) (short) 100);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation52 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray48, (double) 100);
        double double53 = rotation52.getAngle();
        double double54 = rotation52.getQ2();
        double double55 = rotation52.getQ1();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(rotation45);
        org.junit.Assert.assertNotNull(rotation46);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.0d + "'", double53 == 0.0d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d);
    }

    @Test
    public void test0823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0823");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double13 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation5, rotation12);
        double double14 = rotation12.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation20.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = rotation27.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation29 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D21, vector3D28);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D36 = rotation35.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation42 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D43 = rotation42.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation44 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D36, vector3D43);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation45 = rotation29.applyTo(rotation44);
        double double46 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation12, rotation45);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation52 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D53 = rotation52.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation59 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double60 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation52, rotation59);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation66 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D67 = rotation66.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation73 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double74 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation66, rotation73);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation75 = rotation59.applyInverseTo(rotation66);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation76 = rotation12.applyInverseTo(rotation66);
        double double77 = rotation76.getQ2();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation78 = rotation76.revert();
        double double79 = rotation78.getQ1();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 3.141592653589793d + "'", double14 == 3.141592653589793d);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(rotation45);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 3.141592653589793d + "'", double46 == 3.141592653589793d);
        org.junit.Assert.assertNotNull(vector3D53);
        org.junit.Assert.assertTrue(Double.isNaN(double60));
        org.junit.Assert.assertNotNull(vector3D67);
        org.junit.Assert.assertTrue(Double.isNaN(double74));
        org.junit.Assert.assertNotNull(rotation75);
        org.junit.Assert.assertNotNull(rotation76);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + (-1.01885404374415d) + "'", double77 == (-1.01885404374415d));
        org.junit.Assert.assertNotNull(rotation78);
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 10.015527486617021d + "'", double79 == 10.015527486617021d);
    }

    @Test
    public void test0824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0824");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation20.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = rotation27.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation34 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D35 = rotation34.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation36 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D28, vector3D35);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation42 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D43 = rotation42.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation49 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D50 = rotation49.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation51 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D43, vector3D50);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation52 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D13, vector3D21, vector3D35, vector3D50);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation54 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D21, (double) 1);
        double double55 = rotation54.getQ1();
        org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder56 = null;
        double[] doubleArray57 = rotation54.getAngles(rotationOrder56);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation63 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) 0, 100.0d, (double) (short) 100, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation69 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-1.0d), (double) (byte) 10, (double) (byte) 100, (double) 0L, true);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation75 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D76 = rotation75.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation82 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D83 = rotation82.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation84 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D76, vector3D83);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D85 = rotation69.applyTo(vector3D76);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation87 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D76, 0.9996303825414301d);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D88 = rotation63.applyInverseTo(vector3D76);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D89 = rotation54.applyTo(vector3D88);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation91 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D88, 0.20120377604668616d);
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D35);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(vector3D50);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.33900504942104487d + "'", double55 == 0.33900504942104487d);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[2.356194490192345, 0.9999999999999999, -2.356194490192345]");
        org.junit.Assert.assertNotNull(vector3D76);
        org.junit.Assert.assertNotNull(vector3D83);
        org.junit.Assert.assertNotNull(vector3D85);
        org.junit.Assert.assertNotNull(vector3D88);
        org.junit.Assert.assertNotNull(vector3D89);
    }

    @Test
    public void test0825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0825");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-1.0d), (double) (byte) 10, (double) (byte) 100, (double) 0L, true);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation11 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D12 = rotation11.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation18 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D19 = rotation18.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D12, vector3D19);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation5.applyTo(vector3D12);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) 10, 0.0d, (double) (byte) 0, 10.0d, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation33 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (byte) 100, (double) 10L, (double) (short) 100, (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation39 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D40 = rotation39.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation46 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D47 = rotation46.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation48 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D40, vector3D47);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation50 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D40, (double) 100L);
        double double51 = rotation50.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation52 = rotation33.applyInverseTo(rotation50);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation53 = rotation27.applyInverseTo(rotation50);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation54 = rotation5.applyTo(rotation27);
        double double55 = rotation27.getAngle();
        double double56 = rotation27.getQ1();
        org.junit.Assert.assertNotNull(vector3D12);
        org.junit.Assert.assertNotNull(vector3D19);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D40);
        org.junit.Assert.assertNotNull(vector3D47);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + (-0.0d) + "'", double51 == (-0.0d));
        org.junit.Assert.assertNotNull(rotation52);
        org.junit.Assert.assertNotNull(rotation53);
        org.junit.Assert.assertNotNull(rotation54);
        org.junit.Assert.assertTrue(Double.isNaN(double55));
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.0d + "'", double56 == 0.0d);
    }

    @Test
    public void test0826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0826");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) 100L, 1.0d, (double) (byte) -1, 0.9996303825414301d, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation11 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D12 = rotation11.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation18 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double19 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation11, rotation18);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation25 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D26 = rotation25.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation32 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double33 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation25, rotation32);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation34 = rotation18.applyInverseTo(rotation25);
        double double35 = rotation18.getQ3();
        double double36 = rotation18.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation42 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-1.0d), (double) (byte) 10, (double) (byte) 100, (double) 0L, true);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation48 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D49 = rotation48.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation55 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D56 = rotation55.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation57 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D49, vector3D56);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D58 = rotation42.applyTo(vector3D49);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation60 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D49, (double) (byte) 0);
        double double61 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation18, rotation60);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D62 = rotation60.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation64 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D62, (-0.1855270382668764d));
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D65 = rotation5.applyInverseTo(vector3D62);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation66 = rotation5.revert();
        org.junit.Assert.assertNotNull(vector3D12);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertNotNull(vector3D26);
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertNotNull(rotation34);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 1.0d + "'", double35 == 1.0d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 1.0d + "'", double36 == 1.0d);
        org.junit.Assert.assertNotNull(vector3D49);
        org.junit.Assert.assertNotNull(vector3D56);
        org.junit.Assert.assertNotNull(vector3D58);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 3.141592653589793d + "'", double61 == 3.141592653589793d);
        org.junit.Assert.assertNotNull(vector3D62);
        org.junit.Assert.assertNotNull(vector3D65);
        org.junit.Assert.assertNotNull(rotation66);
    }

    @Test
    public void test0827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0827");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double13 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation5, rotation12);
        double double14 = rotation12.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation20.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double28 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation20, rotation27);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation34 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D35 = rotation34.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation41 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D42 = rotation41.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation43 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D35, vector3D42);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation49 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation50 = rotation43.applyInverseTo(rotation49);
        double double51 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation27, rotation43);
        double double52 = rotation43.getQ3();
        double double53 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation12, rotation43);
        double[][] doubleArray54 = rotation43.getMatrix();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.geometry.euclidean.threed.Rotation rotation56 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray54, (-1.01885404374415d));
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.geometry.euclidean.threed.NotARotationMatrixException; message: unable to orthogonalize matrix in 10 iterations");
        } catch (org.apache.commons.math.geometry.euclidean.threed.NotARotationMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1.0d + "'", double14 == 1.0d);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertNotNull(vector3D35);
        org.junit.Assert.assertNotNull(vector3D42);
        org.junit.Assert.assertNotNull(rotation50);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 3.141592653589793d + "'", double51 == 3.141592653589793d);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.0d + "'", double52 == 0.0d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 3.141592653589793d + "'", double53 == 3.141592653589793d);
        org.junit.Assert.assertNotNull(doubleArray54);
    }

    @Test
    public void test0828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0828");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation16 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, (double) 100L);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation22 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-1.0d), (double) (byte) 10, (double) (byte) 100, (double) 0L, true);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation28 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D29 = rotation28.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D36 = rotation35.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation37 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D29, vector3D36);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D38 = rotation22.applyTo(vector3D29);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation44 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D45 = rotation44.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation51 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D52 = rotation51.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation58 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D59 = rotation58.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation60 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D52, vector3D59);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation62 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D52, (double) 100L);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation63 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D45, vector3D52);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation69 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D70 = rotation69.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation71 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D38, vector3D52, vector3D70);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation73 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, (double) (short) -1);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation79 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D80 = rotation79.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation86 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D87 = rotation86.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation93 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D94 = rotation93.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation95 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D87, vector3D94);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation97 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D87, (double) 100L);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation98 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D80, vector3D87);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D99 = rotation73.applyTo(vector3D80);
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D29);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D38);
        org.junit.Assert.assertNotNull(vector3D45);
        org.junit.Assert.assertNotNull(vector3D52);
        org.junit.Assert.assertNotNull(vector3D59);
        org.junit.Assert.assertNotNull(vector3D70);
        org.junit.Assert.assertNotNull(vector3D80);
        org.junit.Assert.assertNotNull(vector3D87);
        org.junit.Assert.assertNotNull(vector3D94);
        org.junit.Assert.assertNotNull(vector3D99);
    }

    @Test
    public void test0829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0829");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation20.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = rotation27.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation34 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D35 = rotation34.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation36 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D28, vector3D35);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation42 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D43 = rotation42.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation49 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D50 = rotation49.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation51 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D43, vector3D50);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation52 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D13, vector3D21, vector3D35, vector3D50);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation54 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D50, 1.0d);
        org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder55 = null;
        double[] doubleArray56 = rotation54.getAngles(rotationOrder55);
        double double57 = rotation54.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D58 = rotation54.getAxis();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D35);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(vector3D50);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[2.356194490192345, 0.9999999999999999, -2.356194490192345]");
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.0d + "'", double57 == 0.0d);
        org.junit.Assert.assertNotNull(vector3D58);
    }

    @Test
    public void test0830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0830");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) 0, (double) ' ', (double) (byte) 100, 17.66239947251099d, true);
        double double6 = rotation5.getQ0();
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
    }

    @Test
    public void test0831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0831");
        org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.geometry.euclidean.threed.Rotation rotation4 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(rotationOrder0, 115.23483371416586d, 0.20120377604668613d, 3.082566122054968d);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0832");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation20.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = rotation27.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation34 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D35 = rotation34.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation36 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D28, vector3D35);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation42 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D43 = rotation42.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation49 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D50 = rotation49.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation51 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D43, vector3D50);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation52 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D13, vector3D21, vector3D35, vector3D50);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation54 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D13, (-0.0d));
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation56 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D13, (-0.1855270382668764d));
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation62 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) 10, 0.0d, (double) (byte) 0, 10.0d, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation68 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (byte) 100, (double) 10L, (double) (short) 100, (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation74 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D75 = rotation74.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation81 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D82 = rotation81.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation83 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D75, vector3D82);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation85 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D75, (double) 100L);
        double double86 = rotation85.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation87 = rotation68.applyInverseTo(rotation85);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation88 = rotation62.applyInverseTo(rotation85);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation89 = rotation88.revert();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D90 = rotation89.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation91 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D13, vector3D90);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation92 = rotation91.revert();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D35);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(vector3D50);
        org.junit.Assert.assertNotNull(vector3D75);
        org.junit.Assert.assertNotNull(vector3D82);
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + (-0.0d) + "'", double86 == (-0.0d));
        org.junit.Assert.assertNotNull(rotation87);
        org.junit.Assert.assertNotNull(rotation88);
        org.junit.Assert.assertNotNull(rotation89);
        org.junit.Assert.assertNotNull(vector3D90);
        org.junit.Assert.assertNotNull(rotation92);
    }

    @Test
    public void test0833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0833");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation16 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, (double) 100L);
        double double17 = rotation16.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation18 = rotation16.revert();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation19 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double20 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation16, rotation19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-0.0d) + "'", double17 == (-0.0d));
        org.junit.Assert.assertNotNull(rotation18);
    }

    @Test
    public void test0834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0834");
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.geometry.euclidean.threed.Rotation rotation2 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D0, 45.70506809828123d);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0835");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation16 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, (double) 100L);
        double double17 = rotation16.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation18 = rotation16.revert();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation24 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (byte) 100, (double) 10L, (double) (short) 100, (double) 1L, false);
        double double25 = rotation24.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation26 = rotation18.applyInverseTo(rotation24);
        double double27 = rotation26.getQ3();
        double double28 = rotation26.getQ0();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation29 = rotation26.revert();
        double double30 = rotation29.getQ1();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-0.0d) + "'", double17 == (-0.0d));
        org.junit.Assert.assertNotNull(rotation18);
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertNotNull(rotation26);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 17.66239947251099d + "'", double27 == 17.66239947251099d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 116.90457705856772d + "'", double28 == 116.90457705856772d);
        org.junit.Assert.assertNotNull(rotation29);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + (-8.717516503499631d) + "'", double30 == (-8.717516503499631d));
    }

    @Test
    public void test0836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0836");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-0.1855270382668764d), (double) 10, (double) (short) -1, (double) 100.0f, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation6 = rotation5.revert();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation19 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D20 = rotation19.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation21 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D13, vector3D20);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = rotation27.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation34 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D35 = rotation34.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation36 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D28, vector3D35);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation42 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D43 = rotation42.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation49 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D50 = rotation49.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation51 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D43, vector3D50);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation52 = rotation36.applyTo(rotation51);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation53 = rotation21.applyTo(rotation52);
        double[][] doubleArray54 = rotation53.getMatrix();
        double double55 = rotation53.getQ1();
        double[][] doubleArray56 = rotation53.getMatrix();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation58 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray56, (double) 100L);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation60 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray56, 0.7881701093115122d);
        double double61 = rotation60.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation62 = rotation6.applyInverseTo(rotation60);
        double double63 = rotation6.getQ3();
        org.junit.Assert.assertNotNull(rotation6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D20);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D35);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(vector3D50);
        org.junit.Assert.assertNotNull(rotation52);
        org.junit.Assert.assertNotNull(rotation53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 0.0d + "'", double61 == 0.0d);
        org.junit.Assert.assertNotNull(rotation62);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 100.0d + "'", double63 == 100.0d);
    }

    @Test
    public void test0837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0837");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double13 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation5, rotation12);
        double double14 = rotation12.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation20.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double28 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation20, rotation27);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation34 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D35 = rotation34.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation41 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double42 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation34, rotation41);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation43 = rotation27.applyInverseTo(rotation34);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation44 = rotation12.applyTo(rotation34);
        org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder45 = null;
        double[] doubleArray46 = rotation44.getAngles(rotationOrder45);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation52 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D53 = rotation52.getAxis();
        double double54 = rotation52.getQ0();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation55 = rotation44.applyInverseTo(rotation52);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation61 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) 100, 0.33900504942104487d, 0.09949879346007118d, true);
        double double62 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation52, rotation61);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation68 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (short) -1, (double) 10.0f, (double) (byte) 100, (-0.005755946541407356d), true);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation69 = rotation52.applyTo(rotation68);
        double double70 = rotation52.getQ2();
        double double71 = rotation52.getQ2();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 3.141592653589793d + "'", double14 == 3.141592653589793d);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertNotNull(vector3D35);
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertNotNull(rotation43);
        org.junit.Assert.assertNotNull(rotation44);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[-0.31746367442260337, 1.2637009275001716, 3.026886383418824]");
        org.junit.Assert.assertNotNull(vector3D53);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.9996303825414301d + "'", double54 == 0.9996303825414301d);
        org.junit.Assert.assertNotNull(rotation55);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 3.1030128410395363d + "'", double62 == 3.1030128410395363d);
        org.junit.Assert.assertNotNull(rotation69);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 0.01922366120271981d + "'", double70 == 0.01922366120271981d);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 0.01922366120271981d + "'", double71 == 0.01922366120271981d);
    }

    @Test
    public void test0838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0838");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double13 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation5, rotation12);
        double double14 = rotation12.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation20.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = rotation27.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation29 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D21, vector3D28);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D36 = rotation35.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation42 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D43 = rotation42.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation44 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D36, vector3D43);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation45 = rotation29.applyTo(rotation44);
        double double46 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation12, rotation45);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation52 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D53 = rotation52.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation59 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double60 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation52, rotation59);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation66 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D67 = rotation66.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation73 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double74 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation66, rotation73);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation75 = rotation59.applyInverseTo(rotation66);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation76 = rotation12.applyInverseTo(rotation66);
        double double77 = rotation66.getQ2();
        double double78 = rotation66.getQ2();
        double double79 = rotation66.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D80 = rotation66.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation82 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D80, 0.8890808091523411d);
        double double83 = rotation82.getQ2();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 3.141592653589793d + "'", double14 == 3.141592653589793d);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(rotation45);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 3.141592653589793d + "'", double46 == 3.141592653589793d);
        org.junit.Assert.assertNotNull(vector3D53);
        org.junit.Assert.assertTrue(Double.isNaN(double60));
        org.junit.Assert.assertNotNull(vector3D67);
        org.junit.Assert.assertTrue(Double.isNaN(double74));
        org.junit.Assert.assertNotNull(rotation75);
        org.junit.Assert.assertNotNull(rotation76);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 0.01922366120271981d + "'", double77 == 0.01922366120271981d);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 0.01922366120271981d + "'", double78 == 0.01922366120271981d);
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 0.0d + "'", double79 == 0.0d);
        org.junit.Assert.assertNotNull(vector3D80);
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 0.30408632088084614d + "'", double83 == 0.30408632088084614d);
    }

    @Test
    public void test0839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0839");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        double double7 = rotation5.getQ0();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D8 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D9 = null;
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation15 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) 0, (double) ' ', (double) (byte) 100, 17.66239947251099d, true);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation21 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D22 = rotation21.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation28 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D29 = rotation28.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation30 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D22, vector3D29);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation32 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D22, (double) 1L);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation38 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D39 = rotation38.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation45 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D46 = rotation45.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation47 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D39, vector3D46);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation53 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D54 = rotation53.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation60 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D61 = rotation60.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation67 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D68 = rotation67.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation69 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D61, vector3D68);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation75 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D76 = rotation75.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation82 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D83 = rotation82.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation84 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D76, vector3D83);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation85 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D46, vector3D54, vector3D68, vector3D83);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation86 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D22, vector3D68);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D87 = rotation15.applyTo(vector3D68);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D88 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.geometry.euclidean.threed.Rotation rotation89 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D8, vector3D9, vector3D87, vector3D88);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.9996303825414301d + "'", double7 == 0.9996303825414301d);
        org.junit.Assert.assertNotNull(vector3D8);
        org.junit.Assert.assertNotNull(vector3D22);
        org.junit.Assert.assertNotNull(vector3D29);
        org.junit.Assert.assertNotNull(vector3D39);
        org.junit.Assert.assertNotNull(vector3D46);
        org.junit.Assert.assertNotNull(vector3D54);
        org.junit.Assert.assertNotNull(vector3D61);
        org.junit.Assert.assertNotNull(vector3D68);
        org.junit.Assert.assertNotNull(vector3D76);
        org.junit.Assert.assertNotNull(vector3D83);
        org.junit.Assert.assertNotNull(vector3D87);
    }

    @Test
    public void test0840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0840");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-1.0d), (double) (byte) 10, (double) (byte) 100, (double) 0L, true);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation11 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D12 = rotation11.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation18 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D19 = rotation18.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D12, vector3D19);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation5.applyTo(vector3D12);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) 10, 0.0d, (double) (byte) 0, 10.0d, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation33 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (byte) 100, (double) 10L, (double) (short) 100, (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation39 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D40 = rotation39.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation46 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D47 = rotation46.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation48 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D40, vector3D47);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation50 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D40, (double) 100L);
        double double51 = rotation50.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation52 = rotation33.applyInverseTo(rotation50);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation53 = rotation27.applyInverseTo(rotation50);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation54 = rotation5.applyTo(rotation27);
        double double55 = rotation54.getQ1();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation56 = rotation54.revert();
        org.junit.Assert.assertNotNull(vector3D12);
        org.junit.Assert.assertNotNull(vector3D19);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D40);
        org.junit.Assert.assertNotNull(vector3D47);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + (-0.0d) + "'", double51 == (-0.0d));
        org.junit.Assert.assertNotNull(rotation52);
        org.junit.Assert.assertNotNull(rotation53);
        org.junit.Assert.assertNotNull(rotation54);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + (-8.954891411406406d) + "'", double55 == (-8.954891411406406d));
        org.junit.Assert.assertNotNull(rotation56);
    }

    @Test
    public void test0841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0841");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double13 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation5, rotation12);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation19 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D20 = rotation19.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation26 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double27 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation19, rotation26);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation28 = rotation12.applyInverseTo(rotation19);
        double double29 = rotation12.getQ3();
        double double30 = rotation12.getQ1();
        double double31 = rotation12.getQ3();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertNotNull(vector3D20);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertNotNull(rotation28);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 1.0d + "'", double29 == 1.0d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 10.0d + "'", double30 == 10.0d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 1.0d + "'", double31 == 1.0d);
    }

    @Test
    public void test0842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0842");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (byte) 100, (double) 10L, (double) (short) 100, (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation11 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D12 = rotation11.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation18 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D19 = rotation18.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D12, vector3D19);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation22 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D12, (double) 100L);
        double double23 = rotation22.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation24 = rotation5.applyInverseTo(rotation22);
        double double25 = rotation5.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D26 = rotation5.getAxis();
        double double27 = rotation5.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation28 = rotation5.revert();
        double double29 = rotation28.getQ1();
        double double30 = rotation28.getQ0();
        org.junit.Assert.assertNotNull(vector3D12);
        org.junit.Assert.assertNotNull(vector3D19);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + (-0.0d) + "'", double23 == (-0.0d));
        org.junit.Assert.assertNotNull(rotation24);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 1.0d + "'", double25 == 1.0d);
        org.junit.Assert.assertNotNull(vector3D26);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertNotNull(rotation28);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 10.0d + "'", double29 == 10.0d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + (-100.0d) + "'", double30 == (-100.0d));
    }

    @Test
    public void test0843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0843");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-1.0d), (double) (byte) 10, (double) (byte) 100, (double) 0L, true);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation26 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D27 = rotation26.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = rotation20.applyInverseTo(vector3D27);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation34 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D35 = rotation34.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation41 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D42 = rotation41.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation43 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D35, vector3D42);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation45 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D35, (double) 1L);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation46 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D28, vector3D35);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D47 = rotation14.applyInverseTo(vector3D28);
        double[][] doubleArray48 = rotation14.getMatrix();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D27);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D35);
        org.junit.Assert.assertNotNull(vector3D42);
        org.junit.Assert.assertNotNull(vector3D47);
        org.junit.Assert.assertNotNull(doubleArray48);
    }

    @Test
    public void test0844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0844");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation20.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = rotation27.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation29 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D21, vector3D28);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation30 = rotation14.applyTo(rotation29);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation36 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) 10, 0.0d, (double) (byte) 0, 10.0d, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation37 = rotation14.applyTo(rotation36);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation38 = rotation37.revert();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation44 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D45 = rotation44.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation51 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double52 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation44, rotation51);
        double double53 = rotation51.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation59 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D60 = rotation59.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation66 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double67 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation59, rotation66);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation73 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D74 = rotation73.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation80 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D81 = rotation80.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation82 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D74, vector3D81);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation88 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation89 = rotation82.applyInverseTo(rotation88);
        double double90 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation66, rotation82);
        double double91 = rotation82.getQ3();
        double double92 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation51, rotation82);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation93 = rotation38.applyInverseTo(rotation82);
        double double94 = rotation82.getQ1();
        double double95 = rotation82.getQ2();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(rotation30);
        org.junit.Assert.assertNotNull(rotation37);
        org.junit.Assert.assertNotNull(rotation38);
        org.junit.Assert.assertNotNull(vector3D45);
        org.junit.Assert.assertTrue(Double.isNaN(double52));
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 1.0d + "'", double53 == 1.0d);
        org.junit.Assert.assertNotNull(vector3D60);
        org.junit.Assert.assertTrue(Double.isNaN(double67));
        org.junit.Assert.assertNotNull(vector3D74);
        org.junit.Assert.assertNotNull(vector3D81);
        org.junit.Assert.assertNotNull(rotation89);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 3.141592653589793d + "'", double90 == 3.141592653589793d);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 0.0d + "'", double91 == 0.0d);
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 3.141592653589793d + "'", double92 == 3.141592653589793d);
        org.junit.Assert.assertNotNull(rotation93);
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + 0.0d + "'", double94 == 0.0d);
        org.junit.Assert.assertTrue("'" + double95 + "' != '" + 0.0d + "'", double95 == 0.0d);
    }

    @Test
    public void test0845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0845");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-0.9649660284921133d), (double) (short) 100, 0.0d, (double) 1.0f, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation11 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D12 = rotation11.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation18 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double19 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation11, rotation18);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation25 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D26 = rotation25.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation32 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double33 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation25, rotation32);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation34 = rotation18.applyInverseTo(rotation25);
        double double35 = rotation18.getQ3();
        double double36 = rotation18.getQ1();
        double[][] doubleArray37 = rotation18.getMatrix();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation38 = rotation5.applyTo(rotation18);
        org.junit.Assert.assertNotNull(vector3D12);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertNotNull(vector3D26);
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertNotNull(rotation34);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 1.0d + "'", double35 == 1.0d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 10.0d + "'", double36 == 10.0d);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(rotation38);
    }

    @Test
    public void test0846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0846");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation20.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = rotation27.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation29 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D21, vector3D28);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D36 = rotation35.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation42 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D43 = rotation42.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation44 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D36, vector3D43);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation45 = rotation29.applyTo(rotation44);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation46 = rotation14.applyTo(rotation45);
        double[][] doubleArray47 = rotation46.getMatrix();
        double[][] doubleArray48 = rotation46.getMatrix();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation50 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray48, (double) 10.0f);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation52 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray48, (double) 100);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation54 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray48, (-0.0d));
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation56 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray48, 14.405497554001874d);
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(rotation45);
        org.junit.Assert.assertNotNull(rotation46);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(doubleArray48);
    }

    @Test
    public void test0847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0847");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double13 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation5, rotation12);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation19 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D20 = rotation19.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation26 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D27 = rotation26.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation28 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D20, vector3D27);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation34 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = rotation28.applyInverseTo(rotation34);
        double double36 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation12, rotation28);
        double double37 = rotation28.getAngle();
        double double38 = rotation28.getQ2();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertNotNull(vector3D20);
        org.junit.Assert.assertNotNull(vector3D27);
        org.junit.Assert.assertNotNull(rotation35);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 3.141592653589793d + "'", double36 == 3.141592653589793d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
    }

    @Test
    public void test0848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0848");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation16 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, (double) 100L);
        double double17 = rotation16.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation18 = rotation16.revert();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation24 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (byte) 100, (double) 10L, (double) (short) 100, (double) 1L, false);
        double double25 = rotation24.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation26 = rotation18.applyInverseTo(rotation24);
        double[][] doubleArray27 = rotation24.getMatrix();
        double[][] doubleArray28 = rotation24.getMatrix();
        double double29 = rotation24.getQ0();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-0.0d) + "'", double17 == (-0.0d));
        org.junit.Assert.assertNotNull(rotation18);
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertNotNull(rotation26);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 100.0d + "'", double29 == 100.0d);
    }

    @Test
    public void test0849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0849");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation16 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, (double) 100L);
        double double17 = rotation16.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation23 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D24 = rotation23.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation30 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D31 = rotation30.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation32 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D24, vector3D31);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation34 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D24, (double) 1L);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation40 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D41 = rotation40.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation47 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D48 = rotation47.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation49 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D41, vector3D48);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation55 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D56 = rotation55.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation62 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D63 = rotation62.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation69 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D70 = rotation69.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation71 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D63, vector3D70);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation77 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D78 = rotation77.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation84 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D85 = rotation84.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation86 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D78, vector3D85);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation87 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D48, vector3D56, vector3D70, vector3D85);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation88 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D24, vector3D70);
        double double89 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation16, rotation88);
        double double90 = rotation16.getQ1();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D91 = rotation16.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation92 = rotation16.revert();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-0.0d) + "'", double17 == (-0.0d));
        org.junit.Assert.assertNotNull(vector3D24);
        org.junit.Assert.assertNotNull(vector3D31);
        org.junit.Assert.assertNotNull(vector3D41);
        org.junit.Assert.assertNotNull(vector3D48);
        org.junit.Assert.assertNotNull(vector3D56);
        org.junit.Assert.assertNotNull(vector3D63);
        org.junit.Assert.assertNotNull(vector3D70);
        org.junit.Assert.assertNotNull(vector3D78);
        org.junit.Assert.assertNotNull(vector3D85);
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 0.5309649148733836d + "'", double89 == 0.5309649148733836d);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + (-0.1855270382668764d) + "'", double90 == (-0.1855270382668764d));
        org.junit.Assert.assertNotNull(vector3D91);
        org.junit.Assert.assertNotNull(rotation92);
    }

    @Test
    public void test0850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0850");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation20.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = rotation27.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation34 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D35 = rotation34.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation36 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D28, vector3D35);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation42 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D43 = rotation42.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation49 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D50 = rotation49.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation51 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D43, vector3D50);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation52 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D13, vector3D21, vector3D35, vector3D50);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation54 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D13, (-0.0d));
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation56 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D13, (double) 1L);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D57 = rotation56.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation58 = rotation56.revert();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation59 = rotation58.revert();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D60 = rotation59.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation62 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D60, 0.0d);
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D35);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(vector3D50);
        org.junit.Assert.assertNotNull(vector3D57);
        org.junit.Assert.assertNotNull(rotation58);
        org.junit.Assert.assertNotNull(rotation59);
        org.junit.Assert.assertNotNull(vector3D60);
    }

    @Test
    public void test0851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0851");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.7881701093115124d, (double) (short) 100, 0.9856688089870894d, (-0.6780618572586967d), false);
    }

    @Test
    public void test0852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0852");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-1.0d), (double) (byte) 10, (double) (byte) 100, (double) 0L, true);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation11 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D12 = rotation11.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation18 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D19 = rotation18.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D12, vector3D19);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation5.applyTo(vector3D12);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation23 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D12, (double) (byte) 0);
        double double24 = rotation23.getQ2();
        double double25 = rotation23.getQ2();
        double double26 = rotation23.getAngle();
        org.junit.Assert.assertNotNull(vector3D12);
        org.junit.Assert.assertNotNull(vector3D19);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.0d + "'", double26 == 0.0d);
    }

    @Test
    public void test0853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0853");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation21 = rotation14.applyInverseTo(rotation20);
        double double22 = rotation20.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation28 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D29 = rotation28.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double36 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation28, rotation35);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation42 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D43 = rotation42.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation49 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D50 = rotation49.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation51 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D43, vector3D50);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation57 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation58 = rotation51.applyInverseTo(rotation57);
        double double59 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation35, rotation51);
        double double60 = rotation51.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation61 = rotation20.applyInverseTo(rotation51);
        double double62 = rotation20.getQ1();
        double double63 = rotation20.getQ1();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(rotation21);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 3.141592653589793d + "'", double22 == 3.141592653589793d);
        org.junit.Assert.assertNotNull(vector3D29);
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(vector3D50);
        org.junit.Assert.assertNotNull(rotation58);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 3.141592653589793d + "'", double59 == 3.141592653589793d);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.0d + "'", double60 == 0.0d);
        org.junit.Assert.assertNotNull(rotation61);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 10.0d + "'", double62 == 10.0d);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 10.0d + "'", double63 == 10.0d);
    }

    @Test
    public void test0854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0854");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation16 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, (double) 100L);
        double double17 = rotation16.getQ3();
        double double18 = rotation16.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D19 = rotation16.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation25 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D26 = rotation25.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation32 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D33 = rotation32.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation34 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D26, vector3D33);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation40 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D41 = rotation40.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation47 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D48 = rotation47.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation54 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D55 = rotation54.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation56 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D48, vector3D55);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation62 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D63 = rotation62.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation69 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D70 = rotation69.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation71 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D63, vector3D70);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation72 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D33, vector3D41, vector3D55, vector3D70);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation73 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D19, vector3D33);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation74 = rotation73.revert();
        double[][] doubleArray75 = rotation74.getMatrix();
        double double76 = rotation74.getAngle();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-0.0d) + "'", double17 == (-0.0d));
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + (-0.0d) + "'", double18 == (-0.0d));
        org.junit.Assert.assertNotNull(vector3D19);
        org.junit.Assert.assertNotNull(vector3D26);
        org.junit.Assert.assertNotNull(vector3D33);
        org.junit.Assert.assertNotNull(vector3D41);
        org.junit.Assert.assertNotNull(vector3D48);
        org.junit.Assert.assertNotNull(vector3D55);
        org.junit.Assert.assertNotNull(vector3D63);
        org.junit.Assert.assertNotNull(vector3D70);
        org.junit.Assert.assertNotNull(rotation74);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 3.141592653589793d + "'", double76 == 3.141592653589793d);
    }

    @Test
    public void test0855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0855");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation21 = rotation14.applyInverseTo(rotation20);
        double double22 = rotation20.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation28 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D29 = rotation28.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double36 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation28, rotation35);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation42 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D43 = rotation42.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation49 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D50 = rotation49.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation51 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D43, vector3D50);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation57 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation58 = rotation51.applyInverseTo(rotation57);
        double double59 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation35, rotation51);
        double double60 = rotation51.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation61 = rotation20.applyInverseTo(rotation51);
        double double62 = rotation20.getQ1();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation63 = rotation20.revert();
        double double64 = rotation63.getQ2();
        double double65 = rotation63.getQ0();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(rotation21);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 3.141592653589793d + "'", double22 == 3.141592653589793d);
        org.junit.Assert.assertNotNull(vector3D29);
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(vector3D50);
        org.junit.Assert.assertNotNull(rotation58);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 3.141592653589793d + "'", double59 == 3.141592653589793d);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.0d + "'", double60 == 0.0d);
        org.junit.Assert.assertNotNull(rotation61);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 10.0d + "'", double62 == 10.0d);
        org.junit.Assert.assertNotNull(rotation63);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + (-1.0d) + "'", double64 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + (-0.0d) + "'", double65 == (-0.0d));
    }

    @Test
    public void test0856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0856");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation11 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-1.0d), (double) (byte) 10, (double) (byte) 100, (double) 0L, true);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation17 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D18 = rotation17.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation24 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D25 = rotation24.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation26 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D18, vector3D25);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D27 = rotation11.applyTo(vector3D18);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = rotation5.applyTo(vector3D27);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation30 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D27, (double) 1.0f);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation36 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D37 = rotation36.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation43 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D44 = rotation43.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation45 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D37, vector3D44);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation51 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D52 = rotation51.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation58 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D59 = rotation58.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation65 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D66 = rotation65.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation67 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D59, vector3D66);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation73 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D74 = rotation73.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation80 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D81 = rotation80.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation82 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D74, vector3D81);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation83 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D44, vector3D52, vector3D66, vector3D81);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation85 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D44, (-0.0d));
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation87 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D44, (double) 1L);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation88 = rotation30.applyInverseTo(rotation87);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation89 = rotation88.revert();
        double[][] doubleArray90 = rotation88.getMatrix();
        org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder91 = null;
        double[] doubleArray92 = rotation88.getAngles(rotationOrder91);
        org.junit.Assert.assertNotNull(vector3D18);
        org.junit.Assert.assertNotNull(vector3D25);
        org.junit.Assert.assertNotNull(vector3D27);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D37);
        org.junit.Assert.assertNotNull(vector3D44);
        org.junit.Assert.assertNotNull(vector3D52);
        org.junit.Assert.assertNotNull(vector3D59);
        org.junit.Assert.assertNotNull(vector3D66);
        org.junit.Assert.assertNotNull(vector3D74);
        org.junit.Assert.assertNotNull(vector3D81);
        org.junit.Assert.assertNotNull(rotation88);
        org.junit.Assert.assertNotNull(rotation89);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertNotNull(doubleArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray92), "[1.7311132876875932, 1.1291177358326951, -1.2042864794398311]");
    }

    @Test
    public void test0857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0857");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation16 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, (double) 100L);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation22 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-1.0d), (double) (byte) 10, (double) (byte) 100, (double) 0L, true);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation28 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D29 = rotation28.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D36 = rotation35.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation37 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D29, vector3D36);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D38 = rotation22.applyTo(vector3D29);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation44 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D45 = rotation44.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation51 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D52 = rotation51.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation58 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D59 = rotation58.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation60 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D52, vector3D59);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation62 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D52, (double) 100L);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation63 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D45, vector3D52);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation69 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D70 = rotation69.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation71 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D38, vector3D52, vector3D70);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation77 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D78 = rotation77.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation84 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D85 = rotation84.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation86 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D78, vector3D85);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation87 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D70, vector3D85);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation88 = rotation87.revert();
        double[][] doubleArray89 = rotation87.getMatrix();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation90 = rotation87.revert();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation91 = rotation90.revert();
        double double92 = rotation90.getQ0();
        org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder93 = null;
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray94 = rotation90.getAngles(rotationOrder93);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.geometry.euclidean.threed.CardanEulerSingularityException; message: Euler angles singularity");
        } catch (org.apache.commons.math.geometry.euclidean.threed.CardanEulerSingularityException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D29);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D38);
        org.junit.Assert.assertNotNull(vector3D45);
        org.junit.Assert.assertNotNull(vector3D52);
        org.junit.Assert.assertNotNull(vector3D59);
        org.junit.Assert.assertNotNull(vector3D70);
        org.junit.Assert.assertNotNull(vector3D78);
        org.junit.Assert.assertNotNull(vector3D85);
        org.junit.Assert.assertNotNull(rotation88);
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertNotNull(rotation90);
        org.junit.Assert.assertNotNull(rotation91);
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + (-1.0d) + "'", double92 == (-1.0d));
    }

    @Test
    public void test0858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0858");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation20.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = rotation27.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation29 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D21, vector3D28);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D36 = rotation35.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation42 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D43 = rotation42.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation44 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D36, vector3D43);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation45 = rotation29.applyTo(rotation44);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation46 = rotation14.applyTo(rotation45);
        double double47 = rotation14.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation53 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation59 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-1.0d), (double) (byte) 10, (double) (byte) 100, (double) 0L, true);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation65 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D66 = rotation65.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation72 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D73 = rotation72.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation74 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D66, vector3D73);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D75 = rotation59.applyTo(vector3D66);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D76 = rotation53.applyTo(vector3D75);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation78 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D75, (double) 1.0f);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation80 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D75, 0.0d);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D81 = rotation80.getAxis();
        double double82 = rotation80.getQ3();
        double double83 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation14, rotation80);
        double double84 = rotation80.getQ3();
        double double85 = rotation80.getQ2();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(rotation45);
        org.junit.Assert.assertNotNull(rotation46);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d);
        org.junit.Assert.assertNotNull(vector3D66);
        org.junit.Assert.assertNotNull(vector3D73);
        org.junit.Assert.assertNotNull(vector3D75);
        org.junit.Assert.assertNotNull(vector3D76);
        org.junit.Assert.assertNotNull(vector3D81);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + (-0.0d) + "'", double82 == (-0.0d));
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 0.0d + "'", double83 == 0.0d);
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + (-0.0d) + "'", double84 == (-0.0d));
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 0.0d + "'", double85 == 0.0d);
    }

    @Test
    public void test0859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0859");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation16 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, (double) 1L);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation22 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D23 = rotation22.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation29 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D30 = rotation29.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation31 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D23, vector3D30);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation37 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D38 = rotation37.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation44 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D45 = rotation44.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation51 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D52 = rotation51.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation53 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D45, vector3D52);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation59 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D60 = rotation59.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation66 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D67 = rotation66.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation68 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D60, vector3D67);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation69 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D30, vector3D38, vector3D52, vector3D67);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation70 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D52);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation72 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, (double) 1L);
        org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder73 = null;
        double[] doubleArray74 = rotation72.getAngles(rotationOrder73);
        double double75 = rotation72.getQ2();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D23);
        org.junit.Assert.assertNotNull(vector3D30);
        org.junit.Assert.assertNotNull(vector3D38);
        org.junit.Assert.assertNotNull(vector3D45);
        org.junit.Assert.assertNotNull(vector3D52);
        org.junit.Assert.assertNotNull(vector3D60);
        org.junit.Assert.assertNotNull(vector3D67);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[2.356194490192345, 0.9999999999999999, -2.356194490192345]");
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 0.33900504942104487d + "'", double75 == 0.33900504942104487d);
    }

    @Test
    public void test0860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0860");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation20.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = rotation27.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation29 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D21, vector3D28);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D36 = rotation35.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation42 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D43 = rotation42.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation44 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D36, vector3D43);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation45 = rotation29.applyTo(rotation44);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation46 = rotation14.applyTo(rotation45);
        double[][] doubleArray47 = rotation46.getMatrix();
        double[][] doubleArray48 = rotation46.getMatrix();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation50 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray48, (double) (short) 100);
        double double51 = rotation50.getQ3();
        double[][] doubleArray52 = rotation50.getMatrix();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.geometry.euclidean.threed.Rotation rotation54 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray52, (-1579.617450290328d));
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.geometry.euclidean.threed.NotARotationMatrixException; message: unable to orthogonalize matrix in 10 iterations");
        } catch (org.apache.commons.math.geometry.euclidean.threed.NotARotationMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(rotation45);
        org.junit.Assert.assertNotNull(rotation46);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.0d + "'", double51 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray52);
    }

    @Test
    public void test0861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0861");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double13 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation5, rotation12);
        double double14 = rotation12.getAngle();
        double double15 = rotation12.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D16 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D17 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation18 = rotation12.revert();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation24 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D25 = rotation24.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation31 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double32 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation24, rotation31);
        double double33 = rotation31.getAngle();
        double double34 = rotation31.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D35 = rotation31.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation41 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D42 = rotation41.getAxis();
        double double43 = rotation41.getQ0();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D44 = rotation41.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation45 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D35, vector3D44);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation46 = rotation18.applyTo(rotation45);
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 3.141592653589793d + "'", double14 == 3.141592653589793d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 3.141592653589793d + "'", double15 == 3.141592653589793d);
        org.junit.Assert.assertNotNull(vector3D16);
        org.junit.Assert.assertNotNull(vector3D17);
        org.junit.Assert.assertNotNull(rotation18);
        org.junit.Assert.assertNotNull(vector3D25);
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 3.141592653589793d + "'", double33 == 3.141592653589793d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 3.141592653589793d + "'", double34 == 3.141592653589793d);
        org.junit.Assert.assertNotNull(vector3D35);
        org.junit.Assert.assertNotNull(vector3D42);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.9996303825414301d + "'", double43 == 0.9996303825414301d);
        org.junit.Assert.assertNotNull(vector3D44);
        org.junit.Assert.assertNotNull(rotation46);
    }

    @Test
    public void test0862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0862");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double13 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation5, rotation12);
        double double14 = rotation12.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation20.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double28 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation20, rotation27);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation34 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D35 = rotation34.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation41 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D42 = rotation41.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation43 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D35, vector3D42);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation49 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation50 = rotation43.applyInverseTo(rotation49);
        double double51 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation27, rotation43);
        double double52 = rotation43.getQ3();
        double double53 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation12, rotation43);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation59 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D60 = rotation59.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation66 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D67 = rotation66.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation68 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D60, vector3D67);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation74 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation75 = rotation68.applyInverseTo(rotation74);
        double double76 = rotation68.getQ2();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation77 = rotation43.applyInverseTo(rotation68);
        double double78 = rotation68.getQ0();
        double double79 = rotation68.getQ1();
        double double80 = rotation68.getQ1();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1.0d + "'", double14 == 1.0d);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertNotNull(vector3D35);
        org.junit.Assert.assertNotNull(vector3D42);
        org.junit.Assert.assertNotNull(rotation50);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 3.141592653589793d + "'", double51 == 3.141592653589793d);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.0d + "'", double52 == 0.0d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 3.141592653589793d + "'", double53 == 3.141592653589793d);
        org.junit.Assert.assertNotNull(vector3D60);
        org.junit.Assert.assertNotNull(vector3D67);
        org.junit.Assert.assertNotNull(rotation75);
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 0.0d + "'", double76 == 0.0d);
        org.junit.Assert.assertNotNull(rotation77);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 1.0d + "'", double78 == 1.0d);
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 0.0d + "'", double79 == 0.0d);
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 0.0d + "'", double80 == 0.0d);
    }

    @Test
    public void test0863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0863");
        org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.geometry.euclidean.threed.Rotation rotation4 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(rotationOrder0, (-0.8156840252218559d), 3.1382608577831084d, (-10.0d));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0864");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation11 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-1.0d), (double) (byte) 10, (double) (byte) 100, (double) 0L, true);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation17 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D18 = rotation17.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation24 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D25 = rotation24.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation26 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D18, vector3D25);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D27 = rotation11.applyTo(vector3D18);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = rotation5.applyTo(vector3D27);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation30 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D27, (double) 1.0f);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation36 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D37 = rotation36.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation43 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D44 = rotation43.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation45 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D37, vector3D44);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation51 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D52 = rotation51.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation58 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D59 = rotation58.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation65 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D66 = rotation65.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation67 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D59, vector3D66);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation73 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D74 = rotation73.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation80 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D81 = rotation80.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation82 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D74, vector3D81);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation83 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D44, vector3D52, vector3D66, vector3D81);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation85 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D44, (-0.0d));
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation87 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D44, (double) 1L);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation88 = rotation30.applyInverseTo(rotation87);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation89 = rotation88.revert();
        org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder90 = null;
        double[] doubleArray91 = rotation88.getAngles(rotationOrder90);
        org.junit.Assert.assertNotNull(vector3D18);
        org.junit.Assert.assertNotNull(vector3D25);
        org.junit.Assert.assertNotNull(vector3D27);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D37);
        org.junit.Assert.assertNotNull(vector3D44);
        org.junit.Assert.assertNotNull(vector3D52);
        org.junit.Assert.assertNotNull(vector3D59);
        org.junit.Assert.assertNotNull(vector3D66);
        org.junit.Assert.assertNotNull(vector3D74);
        org.junit.Assert.assertNotNull(vector3D81);
        org.junit.Assert.assertNotNull(rotation88);
        org.junit.Assert.assertNotNull(rotation89);
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray91), "[1.7311132876875932, 1.1291177358326951, -1.2042864794398311]");
    }

    @Test
    public void test0865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0865");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-0.1855270382668764d), (double) '4', (-10.0d), (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        double double7 = rotation5.getAngle();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
    }

    @Test
    public void test0866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0866");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-0.1855270382668764d), (double) '4', (-10.0d), (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D7 = rotation5.getAxis();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D7);
    }

    @Test
    public void test0867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0867");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) 1, (double) (byte) -1, (double) ' ', (double) (short) 100, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation11 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D12 = rotation11.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation18 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D19 = rotation18.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D12, vector3D19);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation22 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D12, (double) 100L);
        double double23 = rotation22.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation24 = rotation22.revert();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation30 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (byte) 100, (double) 10L, (double) (short) 100, (double) 1L, false);
        double double31 = rotation30.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation32 = rotation24.applyInverseTo(rotation30);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation38 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation44 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-1.0d), (double) (byte) 10, (double) (byte) 100, (double) 0L, true);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation50 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D51 = rotation50.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation57 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D58 = rotation57.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation59 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D51, vector3D58);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D60 = rotation44.applyTo(vector3D51);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D61 = rotation38.applyTo(vector3D60);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D62 = rotation30.applyInverseTo(vector3D61);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D63 = rotation5.applyTo(vector3D62);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D64 = rotation5.getAxis();
        org.junit.Assert.assertNotNull(vector3D12);
        org.junit.Assert.assertNotNull(vector3D19);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + (-0.0d) + "'", double23 == (-0.0d));
        org.junit.Assert.assertNotNull(rotation24);
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertNotNull(rotation32);
        org.junit.Assert.assertNotNull(vector3D51);
        org.junit.Assert.assertNotNull(vector3D58);
        org.junit.Assert.assertNotNull(vector3D60);
        org.junit.Assert.assertNotNull(vector3D61);
        org.junit.Assert.assertNotNull(vector3D62);
        org.junit.Assert.assertNotNull(vector3D63);
        org.junit.Assert.assertNotNull(vector3D64);
    }

    @Test
    public void test0868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0868");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation20.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = rotation27.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation29 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D21, vector3D28);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D36 = rotation35.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation42 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D43 = rotation42.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation44 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D36, vector3D43);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation45 = rotation29.applyTo(rotation44);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation46 = rotation14.applyTo(rotation45);
        double[][] doubleArray47 = rotation46.getMatrix();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation49 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray47, (double) '4');
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation51 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray47, (double) 0L);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation57 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-0.1855270382668764d), (double) 1, Double.NaN, (double) (short) 100, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation58 = rotation51.applyInverseTo(rotation57);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D59 = rotation57.getAxis();
        double double60 = rotation57.getAngle();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(rotation45);
        org.junit.Assert.assertNotNull(rotation46);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(rotation58);
        org.junit.Assert.assertNotNull(vector3D59);
        org.junit.Assert.assertTrue(Double.isNaN(double60));
    }

    @Test
    public void test0869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0869");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-1.0d), (double) (byte) 10, (double) (byte) 100, (double) 0L, true);
        org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder6 = null;
        double[] doubleArray7 = rotation5.getAngles(rotationOrder6);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation13 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (byte) 100, (double) 10L, (double) (short) 100, (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation19 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) 0, (double) ' ', (double) (byte) 100, 17.66239947251099d, true);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation25 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D26 = rotation25.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation32 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D33 = rotation32.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation34 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D26, vector3D33);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation40 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D41 = rotation40.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation47 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D48 = rotation47.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation49 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D41, vector3D48);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation55 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D56 = rotation55.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation62 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D63 = rotation62.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation64 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D56, vector3D63);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation65 = rotation49.applyTo(rotation64);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation66 = rotation34.applyTo(rotation65);
        double[][] doubleArray67 = rotation66.getMatrix();
        double double68 = rotation66.getQ1();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D69 = rotation66.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D70 = rotation19.applyInverseTo(vector3D69);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D71 = rotation13.applyTo(vector3D69);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation73 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D71, (-0.33900504942104487d));
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D74 = rotation5.applyTo(vector3D71);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-0.09966865249116204, 3.121692566536803, 0.09966865249116204]");
        org.junit.Assert.assertNotNull(vector3D26);
        org.junit.Assert.assertNotNull(vector3D33);
        org.junit.Assert.assertNotNull(vector3D41);
        org.junit.Assert.assertNotNull(vector3D48);
        org.junit.Assert.assertNotNull(vector3D56);
        org.junit.Assert.assertNotNull(vector3D63);
        org.junit.Assert.assertNotNull(rotation65);
        org.junit.Assert.assertNotNull(rotation66);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 0.0d + "'", double68 == 0.0d);
        org.junit.Assert.assertNotNull(vector3D69);
        org.junit.Assert.assertNotNull(vector3D70);
        org.junit.Assert.assertNotNull(vector3D71);
        org.junit.Assert.assertNotNull(vector3D74);
    }

    @Test
    public void test0870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0870");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double13 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation5, rotation12);
        double double14 = rotation12.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation20.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double28 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation20, rotation27);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation34 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D35 = rotation34.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation41 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double42 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation34, rotation41);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation43 = rotation27.applyInverseTo(rotation34);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation44 = rotation12.applyTo(rotation34);
        org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder45 = null;
        double[] doubleArray46 = rotation44.getAngles(rotationOrder45);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation52 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D53 = rotation52.getAxis();
        double double54 = rotation52.getQ0();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation55 = rotation44.applyInverseTo(rotation52);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation61 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) 100, 0.33900504942104487d, 0.09949879346007118d, true);
        double double62 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation52, rotation61);
        org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder63 = null;
        double[] doubleArray64 = rotation52.getAngles(rotationOrder63);
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 3.141592653589793d + "'", double14 == 3.141592653589793d);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertNotNull(vector3D35);
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertNotNull(rotation43);
        org.junit.Assert.assertNotNull(rotation44);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[-0.31746367442260337, 1.2637009275001716, 3.026886383418824]");
        org.junit.Assert.assertNotNull(vector3D53);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.9996303825414301d + "'", double54 == 0.9996303825414301d);
        org.junit.Assert.assertNotNull(rotation55);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 3.1030128410395363d + "'", double62 == 3.1030128410395363d);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[2.356194490192345, 0.0543794248094174, -2.356194490192345]");
    }

    @Test
    public void test0871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0871");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation16 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, (double) 100L);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation22 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-1.0d), (double) (byte) 10, (double) (byte) 100, (double) 0L, true);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation28 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D29 = rotation28.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D36 = rotation35.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation37 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D29, vector3D36);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D38 = rotation22.applyTo(vector3D29);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation44 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D45 = rotation44.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation51 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D52 = rotation51.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation58 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D59 = rotation58.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation60 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D52, vector3D59);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation62 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D52, (double) 100L);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation63 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D45, vector3D52);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation69 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D70 = rotation69.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation71 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D38, vector3D52, vector3D70);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation77 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D78 = rotation77.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation84 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D85 = rotation84.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation86 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D78, vector3D85);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation87 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D70, vector3D85);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation88 = rotation87.revert();
        java.lang.Class<?> wildcardClass89 = rotation88.getClass();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D29);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D38);
        org.junit.Assert.assertNotNull(vector3D45);
        org.junit.Assert.assertNotNull(vector3D52);
        org.junit.Assert.assertNotNull(vector3D59);
        org.junit.Assert.assertNotNull(vector3D70);
        org.junit.Assert.assertNotNull(vector3D78);
        org.junit.Assert.assertNotNull(vector3D85);
        org.junit.Assert.assertNotNull(rotation88);
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test0872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0872");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-5.7519881927834584E-5d), (-0.005755946541407356d), (-0.33900504942104487d), (double) 100, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation6 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.geometry.euclidean.threed.Rotation rotation7 = rotation5.applyTo(rotation6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0873");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (byte) 100, (double) 10L, (double) (short) 100, (double) 1L, false);
        double double6 = rotation5.getQ2();
        double double7 = rotation5.getQ2();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D8 = rotation5.getAxis();
        double double9 = rotation5.getQ1();
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 100.0d + "'", double6 == 100.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 100.0d + "'", double7 == 100.0d);
        org.junit.Assert.assertNotNull(vector3D8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 10.0d + "'", double9 == 10.0d);
    }

    @Test
    public void test0874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0874");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation20.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = rotation27.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation29 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D21, vector3D28);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation30 = rotation14.applyTo(rotation29);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation36 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D37 = rotation36.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation43 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D44 = rotation43.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation45 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D37, vector3D44);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation51 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation52 = rotation45.applyInverseTo(rotation51);
        double double53 = rotation45.getQ2();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation59 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D60 = rotation59.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation66 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double67 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation59, rotation66);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation73 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D74 = rotation73.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation80 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D81 = rotation80.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation82 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D74, vector3D81);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation88 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation89 = rotation82.applyInverseTo(rotation88);
        double double90 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation66, rotation82);
        double double91 = rotation82.getQ3();
        double double92 = rotation82.getQ0();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation93 = rotation45.applyTo(rotation82);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation94 = rotation29.applyTo(rotation45);
        double double95 = rotation29.getQ0();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(rotation30);
        org.junit.Assert.assertNotNull(vector3D37);
        org.junit.Assert.assertNotNull(vector3D44);
        org.junit.Assert.assertNotNull(rotation52);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.0d + "'", double53 == 0.0d);
        org.junit.Assert.assertNotNull(vector3D60);
        org.junit.Assert.assertTrue(Double.isNaN(double67));
        org.junit.Assert.assertNotNull(vector3D74);
        org.junit.Assert.assertNotNull(vector3D81);
        org.junit.Assert.assertNotNull(rotation89);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 3.141592653589793d + "'", double90 == 3.141592653589793d);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 0.0d + "'", double91 == 0.0d);
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 1.0d + "'", double92 == 1.0d);
        org.junit.Assert.assertNotNull(rotation93);
        org.junit.Assert.assertNotNull(rotation94);
        org.junit.Assert.assertTrue("'" + double95 + "' != '" + 1.0d + "'", double95 == 1.0d);
    }

    @Test
    public void test0875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0875");
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D0 = null;
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation6 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (-1L), 0.0d, (-0.0d), 17.66239947251099d, false);
        double double7 = rotation6.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation13 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D14 = rotation13.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation20.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation22 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D14, vector3D21);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation28 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D29 = rotation28.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D36 = rotation35.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation37 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D29, vector3D36);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation43 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D44 = rotation43.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation50 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D51 = rotation50.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation52 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D44, vector3D51);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation53 = rotation37.applyTo(rotation52);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation54 = rotation22.applyTo(rotation53);
        double[][] doubleArray55 = rotation54.getMatrix();
        double double56 = rotation54.getQ1();
        double[][] doubleArray57 = rotation54.getMatrix();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation59 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray57, (double) 100L);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D60 = rotation59.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D61 = rotation6.applyTo(vector3D60);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation63 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D60, (double) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.geometry.euclidean.threed.Rotation rotation64 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D0, vector3D60);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(vector3D14);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D29);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D44);
        org.junit.Assert.assertNotNull(vector3D51);
        org.junit.Assert.assertNotNull(rotation53);
        org.junit.Assert.assertNotNull(rotation54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.0d + "'", double56 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(vector3D60);
        org.junit.Assert.assertNotNull(vector3D61);
    }

    @Test
    public void test0876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0876");
        org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.geometry.euclidean.threed.Rotation rotation4 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(rotationOrder0, 10.315768314846704d, (double) (-1.0f), 0.9985901652033286d);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0877");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation11 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D12 = rotation11.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation18 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double19 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation11, rotation18);
        double double20 = rotation18.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation26 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D27 = rotation26.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation33 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D34 = rotation33.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D27, vector3D34);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation41 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D42 = rotation41.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation48 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D49 = rotation48.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation50 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D42, vector3D49);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation51 = rotation35.applyTo(rotation50);
        double double52 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation18, rotation51);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation58 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D59 = rotation58.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation65 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double66 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation58, rotation65);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation72 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D73 = rotation72.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation79 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double80 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation72, rotation79);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation81 = rotation65.applyInverseTo(rotation72);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation82 = rotation18.applyInverseTo(rotation72);
        double double83 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation5, rotation82);
        double double84 = rotation5.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation85 = rotation5.revert();
        java.lang.Class<?> wildcardClass86 = rotation5.getClass();
        org.junit.Assert.assertNotNull(vector3D12);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 3.141592653589793d + "'", double20 == 3.141592653589793d);
        org.junit.Assert.assertNotNull(vector3D27);
        org.junit.Assert.assertNotNull(vector3D34);
        org.junit.Assert.assertNotNull(vector3D42);
        org.junit.Assert.assertNotNull(vector3D49);
        org.junit.Assert.assertNotNull(rotation51);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 3.141592653589793d + "'", double52 == 3.141592653589793d);
        org.junit.Assert.assertNotNull(vector3D59);
        org.junit.Assert.assertTrue(Double.isNaN(double66));
        org.junit.Assert.assertNotNull(vector3D73);
        org.junit.Assert.assertTrue(Double.isNaN(double80));
        org.junit.Assert.assertNotNull(rotation81);
        org.junit.Assert.assertNotNull(rotation82);
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 3.141592653589793d + "'", double83 == 3.141592653589793d);
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 0.054379424809409445d + "'", double84 == 0.054379424809409445d);
        org.junit.Assert.assertNotNull(rotation85);
        org.junit.Assert.assertNotNull(wildcardClass86);
    }

    @Test
    public void test0878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0878");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-1.0d), (double) (byte) 10, (double) (byte) 100, (double) 0L, true);
        org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder6 = null;
        double[] doubleArray7 = rotation5.getAngles(rotationOrder6);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation13 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D14 = rotation13.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double21 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation13, rotation20);
        double double22 = rotation20.getAngle();
        double double23 = rotation20.getAngle();
        double double24 = rotation20.getQ0();
        double double25 = rotation20.getQ0();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation31 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D32 = rotation31.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation38 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D39 = rotation38.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation40 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D32, vector3D39);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation42 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D32, (double) 100L);
        double double43 = rotation42.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation44 = rotation42.revert();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation50 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (byte) 100, (double) 10L, (double) (short) 100, (double) 1L, false);
        double double51 = rotation50.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation52 = rotation44.applyInverseTo(rotation50);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D53 = rotation50.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D54 = rotation20.applyInverseTo(vector3D53);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D55 = rotation5.applyInverseTo(vector3D53);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation61 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-0.1855270382668764d), (double) '4', (-10.0d), (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D62 = rotation61.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation63 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D53, vector3D62);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation64 = rotation63.revert();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation65 = org.apache.commons.math.geometry.euclidean.threed.Rotation.IDENTITY;
        double double66 = rotation65.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation67 = rotation65.revert();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D68 = rotation67.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D69 = rotation64.applyInverseTo(vector3D68);
        double double70 = rotation64.getQ3();
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-0.09966865249116204, 3.121692566536803, 0.09966865249116204]");
        org.junit.Assert.assertNotNull(vector3D14);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 3.141592653589793d + "'", double22 == 3.141592653589793d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 3.141592653589793d + "'", double23 == 3.141592653589793d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertNotNull(vector3D32);
        org.junit.Assert.assertNotNull(vector3D39);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + (-0.0d) + "'", double43 == (-0.0d));
        org.junit.Assert.assertNotNull(rotation44);
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertNotNull(rotation52);
        org.junit.Assert.assertNotNull(vector3D53);
        org.junit.Assert.assertNotNull(vector3D54);
        org.junit.Assert.assertNotNull(vector3D55);
        org.junit.Assert.assertNotNull(vector3D62);
        org.junit.Assert.assertNotNull(rotation64);
        org.junit.Assert.assertNotNull(rotation65);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 0.0d + "'", double66 == 0.0d);
        org.junit.Assert.assertNotNull(rotation67);
        org.junit.Assert.assertNotNull(vector3D68);
        org.junit.Assert.assertNotNull(vector3D69);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + (-0.674374748900421d) + "'", double70 == (-0.674374748900421d));
    }

    @Test
    public void test0879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0879");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (short) 100, 0.0d, 0.33900504942104487d, 0.0d, false);
        double double6 = rotation5.getQ2();
        double double7 = rotation5.getQ2();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D8 = rotation5.getAxis();
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.33900504942104487d + "'", double6 == 0.33900504942104487d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.33900504942104487d + "'", double7 == 0.33900504942104487d);
        org.junit.Assert.assertNotNull(vector3D8);
    }

    @Test
    public void test0880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0880");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (short) 1, (double) 100L, (double) ' ', 0.0d, false);
        double double6 = rotation5.getQ1();
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 100.0d + "'", double6 == 100.0d);
    }

    @Test
    public void test0881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0881");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double13 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation5, rotation12);
        double double14 = rotation12.getAngle();
        double double15 = rotation12.getAngle();
        double double16 = rotation12.getQ0();
        double double17 = rotation12.getQ0();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation23 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D24 = rotation23.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation30 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D31 = rotation30.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation32 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D24, vector3D31);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation34 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D24, (double) 100L);
        double double35 = rotation34.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation36 = rotation34.revert();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation42 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (byte) 100, (double) 10L, (double) (short) 100, (double) 1L, false);
        double double43 = rotation42.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation44 = rotation36.applyInverseTo(rotation42);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D45 = rotation42.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D46 = rotation12.applyInverseTo(vector3D45);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation48 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D46, 3.1216925665368036d);
        java.lang.Class<?> wildcardClass49 = rotation48.getClass();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 3.141592653589793d + "'", double14 == 3.141592653589793d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 3.141592653589793d + "'", double15 == 3.141592653589793d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
        org.junit.Assert.assertNotNull(vector3D24);
        org.junit.Assert.assertNotNull(vector3D31);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + (-0.0d) + "'", double35 == (-0.0d));
        org.junit.Assert.assertNotNull(rotation36);
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertNotNull(rotation44);
        org.junit.Assert.assertNotNull(vector3D45);
        org.junit.Assert.assertNotNull(vector3D46);
        org.junit.Assert.assertNotNull(wildcardClass49);
    }

    @Test
    public void test0882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0882");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation20.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = rotation27.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation29 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D21, vector3D28);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D36 = rotation35.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation42 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D43 = rotation42.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation44 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D36, vector3D43);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation45 = rotation29.applyTo(rotation44);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation46 = rotation14.applyTo(rotation45);
        double[][] doubleArray47 = rotation46.getMatrix();
        double[][] doubleArray48 = rotation46.getMatrix();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation50 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray48, (double) 10.0f);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation52 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray48, 0.9949879346007117d);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation58 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D59 = rotation58.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation65 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D66 = rotation65.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation67 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D59, vector3D66);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation69 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D59, (double) 100L);
        double double70 = rotation69.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation71 = rotation69.revert();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation77 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (byte) 100, (double) 10L, (double) (short) 100, (double) 1L, false);
        double double78 = rotation77.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation79 = rotation71.applyInverseTo(rotation77);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation80 = rotation77.revert();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation81 = rotation52.applyTo(rotation77);
        double double82 = rotation77.getQ0();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(rotation45);
        org.junit.Assert.assertNotNull(rotation46);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(vector3D59);
        org.junit.Assert.assertNotNull(vector3D66);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + (-0.0d) + "'", double70 == (-0.0d));
        org.junit.Assert.assertNotNull(rotation71);
        org.junit.Assert.assertTrue(Double.isNaN(double78));
        org.junit.Assert.assertNotNull(rotation79);
        org.junit.Assert.assertNotNull(rotation80);
        org.junit.Assert.assertNotNull(rotation81);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 100.0d + "'", double82 == 100.0d);
    }

    @Test
    public void test0883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0883");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation20.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = rotation27.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation34 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D35 = rotation34.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation36 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D28, vector3D35);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation42 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D43 = rotation42.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation49 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D50 = rotation49.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation51 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D43, vector3D50);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation52 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D13, vector3D21, vector3D35, vector3D50);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation54 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D13, (-0.0d));
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation56 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D13, (double) 1L);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D57 = rotation56.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation63 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (byte) 100, (double) 10L, (double) (short) 100, (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation69 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D70 = rotation69.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation76 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D77 = rotation76.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation78 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D70, vector3D77);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation80 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D70, (double) 100L);
        double double81 = rotation80.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation82 = rotation63.applyInverseTo(rotation80);
        double double83 = rotation63.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D84 = rotation63.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation86 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D84, 0.33900504942104487d);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation87 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D57, vector3D84);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation89 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D84, 0.0d);
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D35);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(vector3D50);
        org.junit.Assert.assertNotNull(vector3D57);
        org.junit.Assert.assertNotNull(vector3D70);
        org.junit.Assert.assertNotNull(vector3D77);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + (-0.0d) + "'", double81 == (-0.0d));
        org.junit.Assert.assertNotNull(rotation82);
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 1.0d + "'", double83 == 1.0d);
        org.junit.Assert.assertNotNull(vector3D84);
    }

    @Test
    public void test0884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0884");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-0.1855270382668764d), (double) 1, Double.NaN, (double) (short) 100, false);
        double double6 = rotation5.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation7 = rotation5.revert();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation13 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D14 = rotation13.getAxis();
        double double15 = rotation13.getQ0();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D16 = rotation13.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D17 = rotation7.applyInverseTo(vector3D16);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation19 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D16, (double) 10L);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation25 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D26 = rotation25.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation32 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D33 = rotation32.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation34 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D26, vector3D33);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation40 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D41 = rotation40.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation47 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D48 = rotation47.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation49 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D41, vector3D48);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation50 = rotation34.applyTo(rotation49);
        double double51 = rotation49.getAngle();
        double double52 = rotation49.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation58 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D59 = rotation58.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation65 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double66 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation58, rotation65);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation72 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D73 = rotation72.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation79 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double80 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation72, rotation79);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation81 = rotation65.applyInverseTo(rotation72);
        double double82 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation49, rotation65);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation83 = rotation19.applyTo(rotation49);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D84 = rotation19.getAxis();
        java.lang.Class<?> wildcardClass85 = rotation19.getClass();
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertNotNull(rotation7);
        org.junit.Assert.assertNotNull(vector3D14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.9996303825414301d + "'", double15 == 0.9996303825414301d);
        org.junit.Assert.assertNotNull(vector3D16);
        org.junit.Assert.assertNotNull(vector3D17);
        org.junit.Assert.assertNotNull(vector3D26);
        org.junit.Assert.assertNotNull(vector3D33);
        org.junit.Assert.assertNotNull(vector3D41);
        org.junit.Assert.assertNotNull(vector3D48);
        org.junit.Assert.assertNotNull(rotation50);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.0d + "'", double51 == 0.0d);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.0d + "'", double52 == 0.0d);
        org.junit.Assert.assertNotNull(vector3D59);
        org.junit.Assert.assertTrue(Double.isNaN(double66));
        org.junit.Assert.assertNotNull(vector3D73);
        org.junit.Assert.assertTrue(Double.isNaN(double80));
        org.junit.Assert.assertNotNull(rotation81);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 3.141592653589793d + "'", double82 == 3.141592653589793d);
        org.junit.Assert.assertNotNull(rotation83);
        org.junit.Assert.assertNotNull(vector3D84);
        org.junit.Assert.assertNotNull(wildcardClass85);
    }

    @Test
    public void test0885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0885");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation21 = rotation14.applyInverseTo(rotation20);
        double double22 = rotation14.getQ2();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation28 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D29 = rotation28.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double36 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation28, rotation35);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation42 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D43 = rotation42.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation49 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D50 = rotation49.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation51 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D43, vector3D50);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation57 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation58 = rotation51.applyInverseTo(rotation57);
        double double59 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation35, rotation51);
        double double60 = rotation51.getQ3();
        double double61 = rotation51.getQ0();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation62 = rotation14.applyTo(rotation51);
        double double63 = rotation62.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder64 = null;
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray65 = rotation62.getAngles(rotationOrder64);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.geometry.euclidean.threed.CardanEulerSingularityException; message: Euler angles singularity");
        } catch (org.apache.commons.math.geometry.euclidean.threed.CardanEulerSingularityException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(rotation21);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertNotNull(vector3D29);
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(vector3D50);
        org.junit.Assert.assertNotNull(rotation58);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 3.141592653589793d + "'", double59 == 3.141592653589793d);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.0d + "'", double60 == 0.0d);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 1.0d + "'", double61 == 1.0d);
        org.junit.Assert.assertNotNull(rotation62);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 0.0d + "'", double63 == 0.0d);
    }

    @Test
    public void test0886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0886");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation19 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D20 = rotation19.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation21 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D13, vector3D20);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation23 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D13, (double) 100L);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation24 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation26 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, 0.0d);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation32 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D33 = rotation32.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation39 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double40 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation32, rotation39);
        double double41 = rotation39.getQ1();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation47 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D48 = rotation47.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation54 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D55 = rotation54.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation56 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D48, vector3D55);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation58 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D48, (double) 100L);
        double double59 = rotation58.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation60 = rotation58.revert();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation66 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (byte) 100, (double) 10L, (double) (short) 100, (double) 1L, false);
        double double67 = rotation66.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation68 = rotation60.applyInverseTo(rotation66);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D69 = rotation66.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D70 = rotation39.applyInverseTo(vector3D69);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation71 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D69);
        java.lang.Class<?> wildcardClass72 = vector3D6.getClass();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D20);
        org.junit.Assert.assertNotNull(vector3D33);
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 10.0d + "'", double41 == 10.0d);
        org.junit.Assert.assertNotNull(vector3D48);
        org.junit.Assert.assertNotNull(vector3D55);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + (-0.0d) + "'", double59 == (-0.0d));
        org.junit.Assert.assertNotNull(rotation60);
        org.junit.Assert.assertTrue(Double.isNaN(double67));
        org.junit.Assert.assertNotNull(rotation68);
        org.junit.Assert.assertNotNull(vector3D69);
        org.junit.Assert.assertNotNull(vector3D70);
        org.junit.Assert.assertNotNull(wildcardClass72);
    }

    @Test
    public void test0887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0887");
        org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.geometry.euclidean.threed.Rotation rotation4 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(rotationOrder0, (double) (short) 1, (double) 100L, 0.09900990099009903d);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0888");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation21 = rotation14.applyInverseTo(rotation20);
        double double22 = rotation20.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation28 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D29 = rotation28.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D36 = rotation35.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation37 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D29, vector3D36);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation43 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D44 = rotation43.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation50 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D51 = rotation50.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation52 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D44, vector3D51);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation58 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D59 = rotation58.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation65 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D66 = rotation65.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation67 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D59, vector3D66);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation68 = rotation52.applyTo(rotation67);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation69 = rotation37.applyTo(rotation68);
        double[][] doubleArray70 = rotation69.getMatrix();
        double double71 = rotation69.getQ1();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D72 = rotation69.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation74 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D72, 10.0d);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D75 = rotation20.applyInverseTo(vector3D72);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D76 = rotation20.getAxis();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(rotation21);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 3.141592653589793d + "'", double22 == 3.141592653589793d);
        org.junit.Assert.assertNotNull(vector3D29);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D44);
        org.junit.Assert.assertNotNull(vector3D51);
        org.junit.Assert.assertNotNull(vector3D59);
        org.junit.Assert.assertNotNull(vector3D66);
        org.junit.Assert.assertNotNull(rotation68);
        org.junit.Assert.assertNotNull(rotation69);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 0.0d + "'", double71 == 0.0d);
        org.junit.Assert.assertNotNull(vector3D72);
        org.junit.Assert.assertNotNull(vector3D75);
        org.junit.Assert.assertNotNull(vector3D76);
    }

    @Test
    public void test0889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0889");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) 10.0f, (double) 100L, 9.649660284921133d, Double.NaN, true);
        double double6 = rotation5.getAngle();
        org.junit.Assert.assertTrue(Double.isNaN(double6));
    }

    @Test
    public void test0890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0890");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double13 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation5, rotation12);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation19 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D20 = rotation19.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation26 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double27 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation19, rotation26);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation28 = rotation12.applyInverseTo(rotation19);
        double double29 = rotation12.getQ3();
        double double30 = rotation12.getQ1();
        double[][] doubleArray31 = rotation12.getMatrix();
        org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder32 = null;
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray33 = rotation12.getAngles(rotationOrder32);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.geometry.euclidean.threed.CardanEulerSingularityException; message: Euler angles singularity");
        } catch (org.apache.commons.math.geometry.euclidean.threed.CardanEulerSingularityException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertNotNull(vector3D20);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertNotNull(rotation28);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 1.0d + "'", double29 == 1.0d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 10.0d + "'", double30 == 10.0d);
        org.junit.Assert.assertNotNull(doubleArray31);
    }

    @Test
    public void test0891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0891");
        org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.geometry.euclidean.threed.Rotation rotation4 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(rotationOrder0, 0.0d, 115.23483371416586d, (double) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0892");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(28.016837073341897d, (double) (-1), (-8.717516503499631d), (double) ' ', true);
        double double6 = rotation5.getQ3();
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.7368621407866713d + "'", double6 == 0.7368621407866713d);
    }

    @Test
    public void test0893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0893");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation21 = rotation14.applyInverseTo(rotation20);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = rotation27.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation34 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D35 = rotation34.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation36 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D28, vector3D35);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation42 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D43 = rotation42.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation49 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D50 = rotation49.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation51 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D43, vector3D50);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation57 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D58 = rotation57.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation64 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D65 = rotation64.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation66 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D58, vector3D65);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation67 = rotation51.applyTo(rotation66);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation68 = rotation36.applyTo(rotation67);
        double[][] doubleArray69 = rotation68.getMatrix();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation75 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-1.0d), (double) (byte) 10, (double) (byte) 100, (double) 0L, true);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation81 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D82 = rotation81.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation88 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D89 = rotation88.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation90 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D82, vector3D89);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D91 = rotation75.applyTo(vector3D82);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D92 = rotation68.applyInverseTo(vector3D82);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation94 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D92, (double) 1L);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D95 = rotation20.applyTo(vector3D92);
        java.lang.Class<?> wildcardClass96 = vector3D92.getClass();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(rotation21);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D35);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(vector3D50);
        org.junit.Assert.assertNotNull(vector3D58);
        org.junit.Assert.assertNotNull(vector3D65);
        org.junit.Assert.assertNotNull(rotation67);
        org.junit.Assert.assertNotNull(rotation68);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertNotNull(vector3D82);
        org.junit.Assert.assertNotNull(vector3D89);
        org.junit.Assert.assertNotNull(vector3D91);
        org.junit.Assert.assertNotNull(vector3D92);
        org.junit.Assert.assertNotNull(vector3D95);
        org.junit.Assert.assertNotNull(wildcardClass96);
    }

    @Test
    public void test0894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0894");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-1.0d), (double) (byte) 10, (double) (byte) 100, (double) 0L, true);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation11 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D12 = rotation11.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation18 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D19 = rotation18.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D12, vector3D19);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation5.applyTo(vector3D12);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D22 = rotation5.getAxis();
        double double23 = rotation5.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation24 = rotation5.revert();
        org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder25 = null;
        double[] doubleArray26 = rotation24.getAngles(rotationOrder25);
        java.lang.Class<?> wildcardClass27 = doubleArray26.getClass();
        org.junit.Assert.assertNotNull(vector3D12);
        org.junit.Assert.assertNotNull(vector3D19);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D22);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 3.1216925665368036d + "'", double23 == 3.1216925665368036d);
        org.junit.Assert.assertNotNull(rotation24);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[3.0419240010986313, 3.121692566536803, -3.0419240010986313]");
        org.junit.Assert.assertNotNull(wildcardClass27);
    }

    @Test
    public void test0895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0895");
        org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.geometry.euclidean.threed.Rotation rotation4 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(rotationOrder0, 10.315768314846704d, (double) (byte) 1, 0.28366218546322625d);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0896");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation16 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, (double) 100L);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation22 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-1.0d), (double) (byte) 10, (double) (byte) 100, (double) 0L, true);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation28 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D29 = rotation28.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D36 = rotation35.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation37 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D29, vector3D36);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D38 = rotation22.applyTo(vector3D29);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation44 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D45 = rotation44.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation51 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D52 = rotation51.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation58 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D59 = rotation58.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation60 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D52, vector3D59);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation62 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D52, (double) 100L);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation63 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D45, vector3D52);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation69 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D70 = rotation69.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation71 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D38, vector3D52, vector3D70);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation73 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D52, (double) 1.0f);
        java.lang.Class<?> wildcardClass74 = vector3D52.getClass();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D29);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D38);
        org.junit.Assert.assertNotNull(vector3D45);
        org.junit.Assert.assertNotNull(vector3D52);
        org.junit.Assert.assertNotNull(vector3D59);
        org.junit.Assert.assertNotNull(vector3D70);
        org.junit.Assert.assertNotNull(wildcardClass74);
    }

    @Test
    public void test0897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0897");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double13 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation5, rotation12);
        double double14 = rotation12.getAngle();
        double double15 = rotation12.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D16 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D17 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation18 = rotation12.revert();
        org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder19 = null;
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray20 = rotation12.getAngles(rotationOrder19);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.geometry.euclidean.threed.CardanEulerSingularityException; message: Euler angles singularity");
        } catch (org.apache.commons.math.geometry.euclidean.threed.CardanEulerSingularityException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 3.141592653589793d + "'", double14 == 3.141592653589793d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 3.141592653589793d + "'", double15 == 3.141592653589793d);
        org.junit.Assert.assertNotNull(vector3D16);
        org.junit.Assert.assertNotNull(vector3D17);
        org.junit.Assert.assertNotNull(rotation18);
    }

    @Test
    public void test0898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0898");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation16 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, (double) 100L);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation22 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-1.0d), (double) (byte) 10, (double) (byte) 100, (double) 0L, true);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation28 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D29 = rotation28.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D36 = rotation35.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation37 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D29, vector3D36);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D38 = rotation22.applyTo(vector3D29);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation44 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D45 = rotation44.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation51 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D52 = rotation51.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation58 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D59 = rotation58.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation60 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D52, vector3D59);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation62 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D52, (double) 100L);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation63 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D45, vector3D52);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation69 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D70 = rotation69.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation71 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D38, vector3D52, vector3D70);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation73 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D52, (double) 1.0f);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation74 = rotation73.revert();
        double double75 = rotation74.getQ0();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D76 = rotation74.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D77 = rotation74.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation83 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (-1), 0.5309649148733836d, (double) (-1), (double) 1, true);
        double[][] doubleArray84 = rotation83.getMatrix();
        double[][] doubleArray85 = rotation83.getMatrix();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation86 = rotation74.applyTo(rotation83);
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D29);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D38);
        org.junit.Assert.assertNotNull(vector3D45);
        org.junit.Assert.assertNotNull(vector3D52);
        org.junit.Assert.assertNotNull(vector3D59);
        org.junit.Assert.assertNotNull(vector3D70);
        org.junit.Assert.assertNotNull(rotation74);
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + (-0.8775825618903728d) + "'", double75 == (-0.8775825618903728d));
        org.junit.Assert.assertNotNull(vector3D76);
        org.junit.Assert.assertNotNull(vector3D77);
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertNotNull(rotation86);
    }

    @Test
    public void test0899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0899");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) 10, 0.0d, (double) (byte) 0, 10.0d, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation11 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (byte) 100, (double) 10L, (double) (short) 100, (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation17 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D18 = rotation17.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation24 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D25 = rotation24.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation26 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D18, vector3D25);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation28 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D18, (double) 100L);
        double double29 = rotation28.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation30 = rotation11.applyInverseTo(rotation28);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation31 = rotation5.applyInverseTo(rotation28);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation32 = rotation31.revert();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation33 = rotation32.revert();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation39 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D40 = rotation39.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation46 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D47 = rotation46.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation48 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D40, vector3D47);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation50 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D40, (double) 100L);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation51 = rotation33.applyInverseTo(rotation50);
        double double52 = rotation51.getQ3();
        org.junit.Assert.assertNotNull(vector3D18);
        org.junit.Assert.assertNotNull(vector3D25);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + (-0.0d) + "'", double29 == (-0.0d));
        org.junit.Assert.assertNotNull(rotation30);
        org.junit.Assert.assertNotNull(rotation31);
        org.junit.Assert.assertNotNull(rotation32);
        org.junit.Assert.assertNotNull(rotation33);
        org.junit.Assert.assertNotNull(vector3D40);
        org.junit.Assert.assertNotNull(vector3D47);
        org.junit.Assert.assertNotNull(rotation51);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 8.62318872287684d + "'", double52 == 8.62318872287684d);
    }

    @Test
    public void test0900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0900");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation21 = rotation14.applyInverseTo(rotation20);
        double double22 = rotation14.getQ2();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation28 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D29 = rotation28.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D36 = rotation35.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation37 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D29, vector3D36);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation43 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D44 = rotation43.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation50 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D51 = rotation50.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation52 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D44, vector3D51);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation53 = rotation37.applyTo(rotation52);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation59 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) 10, 0.0d, (double) (byte) 0, 10.0d, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation60 = rotation37.applyTo(rotation59);
        double double61 = rotation59.getAngle();
        double double62 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation14, rotation59);
        double[][] doubleArray63 = rotation14.getMatrix();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.geometry.euclidean.threed.Rotation rotation65 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray63, (-8.717516503499631d));
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.geometry.euclidean.threed.NotARotationMatrixException; message: unable to orthogonalize matrix in 10 iterations");
        } catch (org.apache.commons.math.geometry.euclidean.threed.NotARotationMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(rotation21);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertNotNull(vector3D29);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D44);
        org.junit.Assert.assertNotNull(vector3D51);
        org.junit.Assert.assertNotNull(rotation53);
        org.junit.Assert.assertNotNull(rotation60);
        org.junit.Assert.assertTrue(Double.isNaN(double61));
        org.junit.Assert.assertTrue(Double.isNaN(double62));
        org.junit.Assert.assertNotNull(doubleArray63);
    }

    @Test
    public void test0901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0901");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double13 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation5, rotation12);
        double double14 = rotation12.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation20.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = rotation27.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation29 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D21, vector3D28);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D36 = rotation35.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation42 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D43 = rotation42.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation44 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D36, vector3D43);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation45 = rotation29.applyTo(rotation44);
        double double46 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation12, rotation45);
        double double47 = rotation12.getQ0();
        double double48 = rotation12.getQ0();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 3.141592653589793d + "'", double14 == 3.141592653589793d);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(rotation45);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 3.141592653589793d + "'", double46 == 3.141592653589793d);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d);
    }

    @Test
    public void test0902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0902");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-0.1855270382668764d), (double) 1, Double.NaN, (double) (short) 100, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation11 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D12 = rotation11.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation18 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D19 = rotation18.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D12, vector3D19);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation26 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D27 = rotation26.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation33 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D34 = rotation33.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D27, vector3D34);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation36 = rotation20.applyTo(rotation35);
        double double37 = rotation35.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation38 = rotation35.revert();
        double double39 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation5, rotation35);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D40 = rotation5.getAxis();
        org.junit.Assert.assertNotNull(vector3D12);
        org.junit.Assert.assertNotNull(vector3D19);
        org.junit.Assert.assertNotNull(vector3D27);
        org.junit.Assert.assertNotNull(vector3D34);
        org.junit.Assert.assertNotNull(rotation36);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d);
        org.junit.Assert.assertNotNull(rotation38);
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertNotNull(vector3D40);
    }

    @Test
    public void test0903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0903");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation20.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = rotation27.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation29 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D21, vector3D28);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D36 = rotation35.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation42 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D43 = rotation42.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation44 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D36, vector3D43);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation45 = rotation29.applyTo(rotation44);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation46 = rotation14.applyTo(rotation45);
        double[][] doubleArray47 = rotation46.getMatrix();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation49 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray47, (double) 10);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation55 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D56 = rotation55.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation62 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double63 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation55, rotation62);
        double double64 = rotation62.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation70 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D71 = rotation70.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation77 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double78 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation70, rotation77);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation84 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D85 = rotation84.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation91 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double92 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation84, rotation91);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation93 = rotation77.applyInverseTo(rotation84);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation94 = rotation62.applyTo(rotation84);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D95 = rotation62.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation96 = rotation49.applyTo(rotation62);
        double double97 = rotation96.getQ0();
        double double98 = rotation96.getQ0();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(rotation45);
        org.junit.Assert.assertNotNull(rotation46);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(vector3D56);
        org.junit.Assert.assertTrue(Double.isNaN(double63));
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 3.141592653589793d + "'", double64 == 3.141592653589793d);
        org.junit.Assert.assertNotNull(vector3D71);
        org.junit.Assert.assertTrue(Double.isNaN(double78));
        org.junit.Assert.assertNotNull(vector3D85);
        org.junit.Assert.assertTrue(Double.isNaN(double92));
        org.junit.Assert.assertNotNull(rotation93);
        org.junit.Assert.assertNotNull(rotation94);
        org.junit.Assert.assertNotNull(vector3D95);
        org.junit.Assert.assertNotNull(rotation96);
        org.junit.Assert.assertTrue("'" + double97 + "' != '" + 0.0d + "'", double97 == 0.0d);
        org.junit.Assert.assertTrue("'" + double98 + "' != '" + 0.0d + "'", double98 == 0.0d);
    }

    @Test
    public void test0904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0904");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation20.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = rotation27.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation29 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D21, vector3D28);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation30 = rotation14.applyTo(rotation29);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation36 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D37 = rotation36.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation43 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D44 = rotation43.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation45 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D37, vector3D44);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation51 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation52 = rotation45.applyInverseTo(rotation51);
        double double53 = rotation45.getQ2();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation59 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D60 = rotation59.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation66 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double67 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation59, rotation66);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation73 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D74 = rotation73.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation80 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D81 = rotation80.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation82 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D74, vector3D81);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation88 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation89 = rotation82.applyInverseTo(rotation88);
        double double90 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation66, rotation82);
        double double91 = rotation82.getQ3();
        double double92 = rotation82.getQ0();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation93 = rotation45.applyTo(rotation82);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation94 = rotation29.applyTo(rotation45);
        org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder95 = null;
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray96 = rotation94.getAngles(rotationOrder95);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.geometry.euclidean.threed.CardanEulerSingularityException; message: Euler angles singularity");
        } catch (org.apache.commons.math.geometry.euclidean.threed.CardanEulerSingularityException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(rotation30);
        org.junit.Assert.assertNotNull(vector3D37);
        org.junit.Assert.assertNotNull(vector3D44);
        org.junit.Assert.assertNotNull(rotation52);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.0d + "'", double53 == 0.0d);
        org.junit.Assert.assertNotNull(vector3D60);
        org.junit.Assert.assertTrue(Double.isNaN(double67));
        org.junit.Assert.assertNotNull(vector3D74);
        org.junit.Assert.assertNotNull(vector3D81);
        org.junit.Assert.assertNotNull(rotation89);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 3.141592653589793d + "'", double90 == 3.141592653589793d);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 0.0d + "'", double91 == 0.0d);
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 1.0d + "'", double92 == 1.0d);
        org.junit.Assert.assertNotNull(rotation93);
        org.junit.Assert.assertNotNull(rotation94);
    }

    @Test
    public void test0905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0905");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation11 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-1.0d), (double) (byte) 10, (double) (byte) 100, (double) 0L, true);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation17 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D18 = rotation17.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation24 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D25 = rotation24.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation26 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D18, vector3D25);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D27 = rotation11.applyTo(vector3D18);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = rotation5.applyTo(vector3D27);
        java.lang.Class<?> wildcardClass29 = vector3D27.getClass();
        org.junit.Assert.assertNotNull(vector3D18);
        org.junit.Assert.assertNotNull(vector3D25);
        org.junit.Assert.assertNotNull(vector3D27);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(wildcardClass29);
    }

    @Test
    public void test0906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0906");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-1.0d), 8960.928033465932d, (double) 100L, (double) (short) 100, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation11 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D12 = rotation11.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation18 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double19 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation11, rotation18);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation25 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D26 = rotation25.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation32 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D33 = rotation32.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation34 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D26, vector3D33);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation40 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation41 = rotation34.applyInverseTo(rotation40);
        double double42 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation18, rotation34);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D43 = rotation18.getAxis();
        double[][] doubleArray44 = rotation18.getMatrix();
        double double45 = rotation18.getQ2();
        double double46 = rotation18.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation52 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) 10, 0.0d, (double) (byte) 0, 10.0d, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation58 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (byte) 100, (double) 10L, (double) (short) 100, (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation64 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D65 = rotation64.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation71 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D72 = rotation71.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation73 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D65, vector3D72);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation75 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D65, (double) 100L);
        double double76 = rotation75.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation77 = rotation58.applyInverseTo(rotation75);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation78 = rotation52.applyInverseTo(rotation75);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation84 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D85 = rotation84.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation91 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D92 = rotation91.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation93 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D85, vector3D92);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation95 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D85, (double) 1L);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D96 = rotation78.applyTo(vector3D85);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D97 = rotation18.applyInverseTo(vector3D85);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation98 = rotation5.applyInverseTo(rotation18);
        java.lang.Class<?> wildcardClass99 = rotation5.getClass();
        org.junit.Assert.assertNotNull(vector3D12);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertNotNull(vector3D26);
        org.junit.Assert.assertNotNull(vector3D33);
        org.junit.Assert.assertNotNull(rotation41);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 3.141592653589793d + "'", double42 == 3.141592653589793d);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + (-1.0d) + "'", double45 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 3.141592653589793d + "'", double46 == 3.141592653589793d);
        org.junit.Assert.assertNotNull(vector3D65);
        org.junit.Assert.assertNotNull(vector3D72);
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + (-0.0d) + "'", double76 == (-0.0d));
        org.junit.Assert.assertNotNull(rotation77);
        org.junit.Assert.assertNotNull(rotation78);
        org.junit.Assert.assertNotNull(vector3D85);
        org.junit.Assert.assertNotNull(vector3D92);
        org.junit.Assert.assertNotNull(vector3D96);
        org.junit.Assert.assertNotNull(vector3D97);
        org.junit.Assert.assertNotNull(rotation98);
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test0907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0907");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation20.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = rotation27.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation34 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D35 = rotation34.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation36 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D28, vector3D35);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation42 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D43 = rotation42.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation49 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D50 = rotation49.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation51 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D43, vector3D50);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation52 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D13, vector3D21, vector3D35, vector3D50);
        double double53 = rotation52.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation59 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D60 = rotation59.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation66 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double67 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation59, rotation66);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation73 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D74 = rotation73.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation80 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D81 = rotation80.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation82 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D74, vector3D81);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation88 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation89 = rotation82.applyInverseTo(rotation88);
        double double90 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation66, rotation82);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D91 = rotation66.getAxis();
        double[][] doubleArray92 = rotation66.getMatrix();
        double double93 = rotation66.getQ2();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation94 = rotation52.applyInverseTo(rotation66);
        org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder95 = null;
        double[] doubleArray96 = rotation94.getAngles(rotationOrder95);
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D35);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(vector3D50);
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertNotNull(vector3D60);
        org.junit.Assert.assertTrue(Double.isNaN(double67));
        org.junit.Assert.assertNotNull(vector3D74);
        org.junit.Assert.assertNotNull(vector3D81);
        org.junit.Assert.assertNotNull(rotation89);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 3.141592653589793d + "'", double90 == 3.141592653589793d);
        org.junit.Assert.assertNotNull(vector3D91);
        org.junit.Assert.assertNotNull(doubleArray92);
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + (-1.0d) + "'", double93 == (-1.0d));
        org.junit.Assert.assertNotNull(rotation94);
        org.junit.Assert.assertNotNull(doubleArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray96), "[NaN, NaN, NaN]");
    }

    @Test
    public void test0908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0908");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation20.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = rotation27.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation34 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D35 = rotation34.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation36 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D28, vector3D35);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation42 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D43 = rotation42.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation49 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D50 = rotation49.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation51 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D43, vector3D50);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation52 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D13, vector3D21, vector3D35, vector3D50);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation53 = rotation52.revert();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D54 = rotation52.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation55 = rotation52.revert();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation61 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '#', (double) 1.0f, (-0.8156840252218559d), 0.33900504942104487d, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation62 = rotation55.applyInverseTo(rotation61);
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D35);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(vector3D50);
        org.junit.Assert.assertNotNull(rotation53);
        org.junit.Assert.assertNotNull(vector3D54);
        org.junit.Assert.assertNotNull(rotation55);
        org.junit.Assert.assertNotNull(rotation62);
    }

    @Test
    public void test0909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0909");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) 10, 0.0d, (double) (byte) 0, 10.0d, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation11 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (byte) 100, (double) 10L, (double) (short) 100, (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation17 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D18 = rotation17.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation24 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D25 = rotation24.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation26 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D18, vector3D25);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation28 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D18, (double) 100L);
        double double29 = rotation28.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation30 = rotation11.applyInverseTo(rotation28);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation31 = rotation5.applyInverseTo(rotation28);
        double double32 = rotation31.getQ1();
        org.junit.Assert.assertNotNull(vector3D18);
        org.junit.Assert.assertNotNull(vector3D25);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + (-0.0d) + "'", double29 == (-0.0d));
        org.junit.Assert.assertNotNull(rotation30);
        org.junit.Assert.assertNotNull(rotation31);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
    }

    @Test
    public void test0910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0910");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double13 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation5, rotation12);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation19 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D20 = rotation19.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation26 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D27 = rotation26.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation28 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D20, vector3D27);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation34 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = rotation28.applyInverseTo(rotation34);
        double double36 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation12, rotation28);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D37 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation43 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-1.0d), (double) (byte) 10, (double) (byte) 100, (double) 0L, true);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation49 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D50 = rotation49.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation56 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D57 = rotation56.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation58 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D50, vector3D57);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D59 = rotation43.applyTo(vector3D50);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation60 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D37, vector3D59);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation62 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D37, 3.7105407653375275d);
        java.lang.Class<?> wildcardClass63 = vector3D37.getClass();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertNotNull(vector3D20);
        org.junit.Assert.assertNotNull(vector3D27);
        org.junit.Assert.assertNotNull(rotation35);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 3.141592653589793d + "'", double36 == 3.141592653589793d);
        org.junit.Assert.assertNotNull(vector3D37);
        org.junit.Assert.assertNotNull(vector3D50);
        org.junit.Assert.assertNotNull(vector3D57);
        org.junit.Assert.assertNotNull(vector3D59);
        org.junit.Assert.assertNotNull(wildcardClass63);
    }

    @Test
    public void test0911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0911");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-1.0d), (double) (byte) 10, (double) (byte) 100, (double) 0L, true);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation11 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D12 = rotation11.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation5.applyInverseTo(vector3D12);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation19 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D20 = rotation19.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation26 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D27 = rotation26.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation28 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D20, vector3D27);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation30 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D20, (double) 1L);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation31 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D13, vector3D20);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation33 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D13, 0.31538323081891095d);
        double double34 = rotation33.getQ1();
        double double35 = rotation33.getQ1();
        org.junit.Assert.assertNotNull(vector3D12);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D20);
        org.junit.Assert.assertNotNull(vector3D27);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + (-0.08683602698544203d) + "'", double34 == (-0.08683602698544203d));
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + (-0.08683602698544203d) + "'", double35 == (-0.08683602698544203d));
    }

    @Test
    public void test0912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0912");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) 10, 0.0d, (double) (byte) 0, 10.0d, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation11 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (byte) 100, (double) 10L, (double) (short) 100, (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation17 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D18 = rotation17.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation24 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D25 = rotation24.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation26 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D18, vector3D25);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation28 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D18, (double) 100L);
        double double29 = rotation28.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation30 = rotation11.applyInverseTo(rotation28);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation31 = rotation5.applyInverseTo(rotation28);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation32 = rotation31.revert();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D33 = rotation32.getAxis();
        double double34 = rotation32.getQ2();
        org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder35 = null;
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray36 = rotation32.getAngles(rotationOrder35);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.geometry.euclidean.threed.CardanEulerSingularityException; message: Euler angles singularity");
        } catch (org.apache.commons.math.geometry.euclidean.threed.CardanEulerSingularityException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(vector3D18);
        org.junit.Assert.assertNotNull(vector3D25);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + (-0.0d) + "'", double29 == (-0.0d));
        org.junit.Assert.assertNotNull(rotation30);
        org.junit.Assert.assertNotNull(rotation31);
        org.junit.Assert.assertNotNull(rotation32);
        org.junit.Assert.assertNotNull(vector3D33);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 3.7105407653375275d + "'", double34 == 3.7105407653375275d);
    }

    @Test
    public void test0913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0913");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation16 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, (double) 100L);
        double double17 = rotation16.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation18 = rotation16.revert();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation24 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (byte) 100, (double) 10L, (double) (short) 100, (double) 1L, false);
        double double25 = rotation24.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation26 = rotation18.applyInverseTo(rotation24);
        double double27 = rotation26.getQ3();
        double double28 = rotation26.getQ0();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation29 = rotation26.revert();
        double double30 = rotation29.getAngle();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-0.0d) + "'", double17 == (-0.0d));
        org.junit.Assert.assertNotNull(rotation18);
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertNotNull(rotation26);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 17.66239947251099d + "'", double27 == 17.66239947251099d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 116.90457705856772d + "'", double28 == 116.90457705856772d);
        org.junit.Assert.assertNotNull(rotation29);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
    }

    @Test
    public void test0914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0914");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (byte) 100, (double) 10L, (double) (short) 100, (double) 1L, false);
        double double6 = rotation5.getAngle();
        double[][] doubleArray7 = rotation5.getMatrix();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation13 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-1.0d), (double) (byte) 10, (double) (byte) 100, (double) 0L, true);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation19 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D20 = rotation19.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation26 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D27 = rotation26.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation28 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D20, vector3D27);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D29 = rotation13.applyTo(vector3D20);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) 10, 0.0d, (double) (byte) 0, 10.0d, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation41 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (byte) 100, (double) 10L, (double) (short) 100, (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation47 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D48 = rotation47.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation54 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D55 = rotation54.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation56 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D48, vector3D55);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation58 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D48, (double) 100L);
        double double59 = rotation58.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation60 = rotation41.applyInverseTo(rotation58);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation61 = rotation35.applyInverseTo(rotation58);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation62 = rotation13.applyTo(rotation35);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation68 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation74 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-1.0d), (double) (byte) 10, (double) (byte) 100, (double) 0L, true);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation80 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D81 = rotation80.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation87 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D88 = rotation87.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation89 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D81, vector3D88);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D90 = rotation74.applyTo(vector3D81);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D91 = rotation68.applyTo(vector3D90);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D92 = rotation13.applyTo(vector3D91);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation94 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D92, 0.7881701093115124d);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation95 = rotation5.applyTo(rotation94);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(vector3D20);
        org.junit.Assert.assertNotNull(vector3D27);
        org.junit.Assert.assertNotNull(vector3D29);
        org.junit.Assert.assertNotNull(vector3D48);
        org.junit.Assert.assertNotNull(vector3D55);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + (-0.0d) + "'", double59 == (-0.0d));
        org.junit.Assert.assertNotNull(rotation60);
        org.junit.Assert.assertNotNull(rotation61);
        org.junit.Assert.assertNotNull(rotation62);
        org.junit.Assert.assertNotNull(vector3D81);
        org.junit.Assert.assertNotNull(vector3D88);
        org.junit.Assert.assertNotNull(vector3D90);
        org.junit.Assert.assertNotNull(vector3D91);
        org.junit.Assert.assertNotNull(vector3D92);
        org.junit.Assert.assertNotNull(rotation95);
    }

    @Test
    public void test0915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0915");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(1.6481559849923735d, (double) (byte) 10, 0.0d, 0.0033900293363519126d, false);
    }

    @Test
    public void test0916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0916");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double13 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation5, rotation12);
        double double14 = rotation12.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation20.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = rotation27.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation29 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D21, vector3D28);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D36 = rotation35.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation42 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D43 = rotation42.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation44 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D36, vector3D43);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation45 = rotation29.applyTo(rotation44);
        double double46 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation12, rotation45);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation52 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D53 = rotation52.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation59 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double60 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation52, rotation59);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation66 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D67 = rotation66.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation73 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double74 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation66, rotation73);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation75 = rotation59.applyInverseTo(rotation66);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation76 = rotation12.applyInverseTo(rotation66);
        double double77 = rotation66.getQ2();
        double double78 = rotation66.getQ2();
        double double79 = rotation66.getQ0();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 3.141592653589793d + "'", double14 == 3.141592653589793d);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(rotation45);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 3.141592653589793d + "'", double46 == 3.141592653589793d);
        org.junit.Assert.assertNotNull(vector3D53);
        org.junit.Assert.assertTrue(Double.isNaN(double60));
        org.junit.Assert.assertNotNull(vector3D67);
        org.junit.Assert.assertTrue(Double.isNaN(double74));
        org.junit.Assert.assertNotNull(rotation75);
        org.junit.Assert.assertNotNull(rotation76);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 0.01922366120271981d + "'", double77 == 0.01922366120271981d);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 0.01922366120271981d + "'", double78 == 0.01922366120271981d);
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 0.9996303825414301d + "'", double79 == 0.9996303825414301d);
    }

    @Test
    public void test0917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0917");
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.geometry.euclidean.threed.Rotation rotation2 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D0, (double) (-1L));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0918");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (short) 100, (-8.717516503499631d), (-0.33900504942104487d), 0.7881701093115122d, false);
        double double6 = rotation5.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-0.1855270382668764d), (double) 10, (double) (short) -1, (double) 100.0f, false);
        double[][] doubleArray13 = rotation12.getMatrix();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation19 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D20 = rotation19.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation26 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D27 = rotation26.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation28 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D20, vector3D27);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation30 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D20, (double) 100L);
        double double31 = rotation30.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation32 = rotation30.revert();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation38 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (byte) 100, (double) 10L, (double) (short) 100, (double) 1L, false);
        double double39 = rotation38.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation40 = rotation32.applyInverseTo(rotation38);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation41 = rotation12.applyInverseTo(rotation40);
        double double42 = rotation41.getQ1();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation43 = rotation5.applyInverseTo(rotation41);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(vector3D20);
        org.junit.Assert.assertNotNull(vector3D27);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + (-0.0d) + "'", double31 == (-0.0d));
        org.junit.Assert.assertNotNull(rotation32);
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertNotNull(rotation40);
        org.junit.Assert.assertNotNull(rotation41);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 8960.928033465932d + "'", double42 == 8960.928033465932d);
        org.junit.Assert.assertNotNull(rotation43);
    }

    @Test
    public void test0919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0919");
        org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.geometry.euclidean.threed.Rotation rotation4 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(rotationOrder0, (double) (short) 1, 1.047240853549319d, 0.031046851316360462d);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0920");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double13 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation5, rotation12);
        double double14 = rotation12.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation20.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double28 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation20, rotation27);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation34 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D35 = rotation34.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation41 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D42 = rotation41.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation43 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D35, vector3D42);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation49 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation50 = rotation43.applyInverseTo(rotation49);
        double double51 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation27, rotation43);
        double double52 = rotation43.getQ3();
        double double53 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation12, rotation43);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation59 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) 100, (double) (byte) -1, (double) (short) 10, 0.9456205751905904d, true);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation60 = rotation43.applyTo(rotation59);
        double double61 = rotation60.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D62 = rotation60.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder63 = null;
        double[] doubleArray64 = rotation60.getAngles(rotationOrder63);
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1.0d + "'", double14 == 1.0d);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertNotNull(vector3D35);
        org.junit.Assert.assertNotNull(vector3D42);
        org.junit.Assert.assertNotNull(rotation50);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 3.141592653589793d + "'", double51 == 3.141592653589793d);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.0d + "'", double52 == 0.0d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 3.141592653589793d + "'", double53 == 3.141592653589793d);
        org.junit.Assert.assertNotNull(rotation60);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 0.20120377604668613d + "'", double61 == 0.20120377604668613d);
        org.junit.Assert.assertNotNull(vector3D62);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[-3.0513799250082303, 0.20031599606315514, 3.032468077189032]");
    }

    @Test
    public void test0921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0921");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double13 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation5, rotation12);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation19 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D20 = rotation19.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation26 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D27 = rotation26.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation28 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D20, vector3D27);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation34 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = rotation28.applyInverseTo(rotation34);
        double double36 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation12, rotation28);
        double double37 = rotation12.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation43 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D44 = rotation43.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation50 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double51 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation43, rotation50);
        double double52 = rotation50.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation58 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D59 = rotation58.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation65 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double66 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation58, rotation65);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation72 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D73 = rotation72.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation79 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double80 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation72, rotation79);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation81 = rotation65.applyInverseTo(rotation72);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation82 = rotation50.applyTo(rotation72);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D83 = rotation50.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D84 = rotation12.applyInverseTo(vector3D83);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation86 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D83, 0.09949438965141721d);
        double double87 = rotation86.getQ2();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertNotNull(vector3D20);
        org.junit.Assert.assertNotNull(vector3D27);
        org.junit.Assert.assertNotNull(rotation35);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 3.141592653589793d + "'", double36 == 3.141592653589793d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 3.141592653589793d + "'", double37 == 3.141592653589793d);
        org.junit.Assert.assertNotNull(vector3D44);
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 3.141592653589793d + "'", double52 == 3.141592653589793d);
        org.junit.Assert.assertNotNull(vector3D59);
        org.junit.Assert.assertTrue(Double.isNaN(double66));
        org.junit.Assert.assertNotNull(vector3D73);
        org.junit.Assert.assertTrue(Double.isNaN(double80));
        org.junit.Assert.assertNotNull(rotation81);
        org.junit.Assert.assertNotNull(rotation82);
        org.junit.Assert.assertNotNull(vector3D83);
        org.junit.Assert.assertNotNull(vector3D84);
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + (-0.004923674848035068d) + "'", double87 == (-0.004923674848035068d));
    }

    @Test
    public void test0922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0922");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) 10, 0.0d, (double) (byte) 0, 10.0d, false);
        double double6 = rotation5.getQ1();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation19 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D20 = rotation19.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation21 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D13, vector3D20);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = rotation27.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation34 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D35 = rotation34.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation41 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D42 = rotation41.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation43 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D35, vector3D42);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation49 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D50 = rotation49.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation56 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D57 = rotation56.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation58 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D50, vector3D57);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation59 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D20, vector3D28, vector3D42, vector3D57);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D60 = rotation5.applyTo(vector3D42);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation62 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D42, 0.7881701093115122d);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation68 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D69 = rotation68.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation75 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D76 = rotation75.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation77 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D69, vector3D76);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation79 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D69, (double) 100L);
        double double80 = rotation79.getQ1();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation81 = rotation62.applyTo(rotation79);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D82 = rotation62.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation84 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D82, Double.NaN);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation86 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D82, (-9.649660284921133d));
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D20);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D35);
        org.junit.Assert.assertNotNull(vector3D42);
        org.junit.Assert.assertNotNull(vector3D50);
        org.junit.Assert.assertNotNull(vector3D57);
        org.junit.Assert.assertNotNull(vector3D60);
        org.junit.Assert.assertNotNull(vector3D69);
        org.junit.Assert.assertNotNull(vector3D76);
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + (-0.1855270382668764d) + "'", double80 == (-0.1855270382668764d));
        org.junit.Assert.assertNotNull(rotation81);
        org.junit.Assert.assertNotNull(vector3D82);
    }

    @Test
    public void test0923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0923");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation20.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = rotation27.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation29 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D21, vector3D28);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D36 = rotation35.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation42 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D43 = rotation42.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation44 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D36, vector3D43);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation45 = rotation29.applyTo(rotation44);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation46 = rotation14.applyTo(rotation45);
        double[][] doubleArray47 = rotation46.getMatrix();
        double[][] doubleArray48 = rotation46.getMatrix();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation50 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray48, (double) (short) 100);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation52 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray48, (double) 100);
        double double53 = rotation52.getAngle();
        double double54 = rotation52.getQ3();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(rotation45);
        org.junit.Assert.assertNotNull(rotation46);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.0d + "'", double53 == 0.0d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d);
    }

    @Test
    public void test0924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0924");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (byte) 100, (double) 10L, (double) (short) 100, (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation11 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D12 = rotation11.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation18 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D19 = rotation18.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D12, vector3D19);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation22 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D12, (double) 100L);
        double double23 = rotation22.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation24 = rotation5.applyInverseTo(rotation22);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation30 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D31 = rotation30.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation37 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D38 = rotation37.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation39 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D31, vector3D38);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation45 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation46 = rotation39.applyInverseTo(rotation45);
        double double47 = rotation39.getQ2();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation53 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D54 = rotation53.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation60 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D61 = rotation60.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation62 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D54, vector3D61);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation68 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D69 = rotation68.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation75 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D76 = rotation75.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation77 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D69, vector3D76);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation78 = rotation62.applyTo(rotation77);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation84 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) 10, 0.0d, (double) (byte) 0, 10.0d, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation85 = rotation62.applyTo(rotation84);
        double double86 = rotation84.getAngle();
        double double87 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation39, rotation84);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation88 = rotation24.applyInverseTo(rotation39);
        double double89 = rotation88.getQ1();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D90 = rotation88.getAxis();
        double[][] doubleArray91 = rotation88.getMatrix();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.geometry.euclidean.threed.Rotation rotation93 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray91, 9.649660284921133d);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.geometry.euclidean.threed.NotARotationMatrixException; message: unable to orthogonalize matrix in 10 iterations");
        } catch (org.apache.commons.math.geometry.euclidean.threed.NotARotationMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(vector3D12);
        org.junit.Assert.assertNotNull(vector3D19);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + (-0.0d) + "'", double23 == (-0.0d));
        org.junit.Assert.assertNotNull(rotation24);
        org.junit.Assert.assertNotNull(vector3D31);
        org.junit.Assert.assertNotNull(vector3D38);
        org.junit.Assert.assertNotNull(rotation46);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d);
        org.junit.Assert.assertNotNull(vector3D54);
        org.junit.Assert.assertNotNull(vector3D61);
        org.junit.Assert.assertNotNull(vector3D69);
        org.junit.Assert.assertNotNull(vector3D76);
        org.junit.Assert.assertNotNull(rotation78);
        org.junit.Assert.assertNotNull(rotation85);
        org.junit.Assert.assertTrue(Double.isNaN(double86));
        org.junit.Assert.assertTrue(Double.isNaN(double87));
        org.junit.Assert.assertNotNull(rotation88);
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 28.016837073341897d + "'", double89 == 28.016837073341897d);
        org.junit.Assert.assertNotNull(vector3D90);
        org.junit.Assert.assertNotNull(doubleArray91);
    }

    @Test
    public void test0925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0925");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation20.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = rotation27.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation34 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D35 = rotation34.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation36 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D28, vector3D35);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation42 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D43 = rotation42.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation49 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D50 = rotation49.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation51 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D43, vector3D50);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation52 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D13, vector3D21, vector3D35, vector3D50);
        double double53 = rotation52.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation59 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D60 = rotation59.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation66 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D67 = rotation66.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation68 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D60, vector3D67);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation70 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D60, (double) 100L);
        double double71 = rotation70.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation72 = rotation70.revert();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation78 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (byte) 100, (double) 10L, (double) (short) 100, (double) 1L, false);
        double double79 = rotation78.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation80 = rotation72.applyInverseTo(rotation78);
        double double81 = rotation78.getQ0();
        double double82 = rotation78.getQ0();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D83 = rotation78.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation85 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D83, (-1.01885404374415d));
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D86 = rotation52.applyInverseTo(vector3D83);
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D35);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(vector3D50);
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertNotNull(vector3D60);
        org.junit.Assert.assertNotNull(vector3D67);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + (-0.0d) + "'", double71 == (-0.0d));
        org.junit.Assert.assertNotNull(rotation72);
        org.junit.Assert.assertTrue(Double.isNaN(double79));
        org.junit.Assert.assertNotNull(rotation80);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 100.0d + "'", double81 == 100.0d);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 100.0d + "'", double82 == 100.0d);
        org.junit.Assert.assertNotNull(vector3D83);
        org.junit.Assert.assertNotNull(vector3D86);
    }

    @Test
    public void test0926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0926");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation16 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, (double) 100L);
        double double17 = rotation16.getQ3();
        double double18 = rotation16.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D19 = rotation16.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation25 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D26 = rotation25.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation32 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D33 = rotation32.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation34 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D26, vector3D33);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation40 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D41 = rotation40.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation47 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D48 = rotation47.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation54 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D55 = rotation54.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation56 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D48, vector3D55);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation62 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D63 = rotation62.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation69 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D70 = rotation69.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation71 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D63, vector3D70);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation72 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D33, vector3D41, vector3D55, vector3D70);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation73 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D19, vector3D33);
        double double74 = rotation73.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation75 = rotation73.revert();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-0.0d) + "'", double17 == (-0.0d));
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + (-0.0d) + "'", double18 == (-0.0d));
        org.junit.Assert.assertNotNull(vector3D19);
        org.junit.Assert.assertNotNull(vector3D26);
        org.junit.Assert.assertNotNull(vector3D33);
        org.junit.Assert.assertNotNull(vector3D41);
        org.junit.Assert.assertNotNull(vector3D48);
        org.junit.Assert.assertNotNull(vector3D55);
        org.junit.Assert.assertNotNull(vector3D63);
        org.junit.Assert.assertNotNull(vector3D70);
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 3.141592653589793d + "'", double74 == 3.141592653589793d);
        org.junit.Assert.assertNotNull(rotation75);
    }

    @Test
    public void test0927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0927");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(28.016837073341897d, 1.0d, 0.3388903615770647d, (double) 10.0f, true);
        double double6 = rotation5.getQ2();
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.011384871683009012d + "'", double6 == 0.011384871683009012d);
    }

    @Test
    public void test0928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0928");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-0.8156840252218559d), (double) 100.0f, 0.06415703545444096d, (double) 'a', true);
        double double6 = rotation5.getQ1();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation19 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D20 = rotation19.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation21 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D13, vector3D20);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = rotation27.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation34 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D35 = rotation34.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation36 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D28, vector3D35);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation42 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D43 = rotation42.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation49 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D50 = rotation49.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation51 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D43, vector3D50);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation52 = rotation36.applyTo(rotation51);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation53 = rotation21.applyTo(rotation52);
        double[][] doubleArray54 = rotation53.getMatrix();
        double double55 = rotation53.getQ1();
        double[][] doubleArray56 = rotation53.getMatrix();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation58 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray56, (double) 100L);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation60 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray56, (double) 0);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation66 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation67 = rotation60.applyTo(rotation66);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D68 = rotation66.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation69 = rotation5.applyInverseTo(rotation66);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.7177793011139257d + "'", double6 == 0.7177793011139257d);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D20);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D35);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(vector3D50);
        org.junit.Assert.assertNotNull(rotation52);
        org.junit.Assert.assertNotNull(rotation53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(rotation67);
        org.junit.Assert.assertNotNull(vector3D68);
        org.junit.Assert.assertNotNull(rotation69);
    }

    @Test
    public void test0929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0929");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) 10, 0.0d, (double) (byte) 0, 10.0d, false);
        double[][] doubleArray6 = rotation5.getMatrix();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.geometry.euclidean.threed.Rotation rotation8 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray6, (-0.280459243752156d));
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.geometry.euclidean.threed.NotARotationMatrixException; message: unable to orthogonalize matrix in 10 iterations");
        } catch (org.apache.commons.math.geometry.euclidean.threed.NotARotationMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
    }

    @Test
    public void test0930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0930");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double13 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation5, rotation12);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation19 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D20 = rotation19.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation26 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D27 = rotation26.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation28 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D20, vector3D27);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation34 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = rotation28.applyInverseTo(rotation34);
        double double36 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation12, rotation28);
        double double37 = rotation12.getAngle();
        double double38 = rotation12.getQ1();
        double double39 = rotation12.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation40 = rotation12.revert();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D41 = rotation12.getAxis();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertNotNull(vector3D20);
        org.junit.Assert.assertNotNull(vector3D27);
        org.junit.Assert.assertNotNull(rotation35);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 3.141592653589793d + "'", double36 == 3.141592653589793d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 3.141592653589793d + "'", double37 == 3.141592653589793d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 10.0d + "'", double38 == 10.0d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 1.0d + "'", double39 == 1.0d);
        org.junit.Assert.assertNotNull(rotation40);
        org.junit.Assert.assertNotNull(vector3D41);
    }

    @Test
    public void test0931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0931");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation21 = rotation14.applyInverseTo(rotation20);
        double double22 = rotation14.getQ2();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation28 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D29 = rotation28.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D36 = rotation35.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation37 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D29, vector3D36);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation43 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D44 = rotation43.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation50 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D51 = rotation50.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation52 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D44, vector3D51);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation53 = rotation37.applyTo(rotation52);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation59 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) 10, 0.0d, (double) (byte) 0, 10.0d, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation60 = rotation37.applyTo(rotation59);
        double double61 = rotation59.getAngle();
        double double62 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation14, rotation59);
        org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder63 = null;
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray64 = rotation59.getAngles(rotationOrder63);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.geometry.euclidean.threed.CardanEulerSingularityException; message: Euler angles singularity");
        } catch (org.apache.commons.math.geometry.euclidean.threed.CardanEulerSingularityException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(rotation21);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertNotNull(vector3D29);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D44);
        org.junit.Assert.assertNotNull(vector3D51);
        org.junit.Assert.assertNotNull(rotation53);
        org.junit.Assert.assertNotNull(rotation60);
        org.junit.Assert.assertTrue(Double.isNaN(double61));
        org.junit.Assert.assertTrue(Double.isNaN(double62));
    }

    @Test
    public void test0932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0932");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (-1L), 0.0d, (-0.0d), 17.66239947251099d, false);
        double double6 = rotation5.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D7 = rotation5.getAxis();
        double double8 = rotation5.getQ0();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D15 = rotation14.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation21 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double22 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation14, rotation21);
        double double23 = rotation21.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation29 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D30 = rotation29.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation36 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double37 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation29, rotation36);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation43 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D44 = rotation43.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation50 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double51 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation43, rotation50);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation52 = rotation36.applyInverseTo(rotation43);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation53 = rotation21.applyTo(rotation43);
        org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder54 = null;
        double[] doubleArray55 = rotation53.getAngles(rotationOrder54);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation61 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D62 = rotation61.getAxis();
        double double63 = rotation61.getQ0();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation64 = rotation53.applyInverseTo(rotation61);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation70 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) 100, 0.33900504942104487d, 0.09949879346007118d, true);
        double double71 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation61, rotation70);
        double[][] doubleArray72 = rotation70.getMatrix();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation74 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray72, (double) 0);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation76 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray72, (double) (short) 10);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation77 = rotation5.applyInverseTo(rotation76);
        java.lang.Class<?> wildcardClass78 = rotation76.getClass();
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertNotNull(vector3D7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + (-1.0d) + "'", double8 == (-1.0d));
        org.junit.Assert.assertNotNull(vector3D15);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 3.141592653589793d + "'", double23 == 3.141592653589793d);
        org.junit.Assert.assertNotNull(vector3D30);
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertNotNull(vector3D44);
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertNotNull(rotation52);
        org.junit.Assert.assertNotNull(rotation53);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[-0.31746367442260337, 1.2637009275001716, 3.026886383418824]");
        org.junit.Assert.assertNotNull(vector3D62);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 0.9996303825414301d + "'", double63 == 0.9996303825414301d);
        org.junit.Assert.assertNotNull(rotation64);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 3.1030128410395363d + "'", double71 == 3.1030128410395363d);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(rotation77);
        org.junit.Assert.assertNotNull(wildcardClass78);
    }

    @Test
    public void test0933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0933");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(1.0d, (-0.001227201364295339d), 0.33900504942104487d, 3.7105407653375275d, true);
        double double6 = rotation5.getAngle();
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 2.617181322786352d + "'", double6 == 2.617181322786352d);
    }

    @Test
    public void test0934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0934");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation11 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-1.0d), (double) (byte) 10, (double) (byte) 100, (double) 0L, true);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation17 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D18 = rotation17.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation24 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D25 = rotation24.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation26 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D18, vector3D25);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D27 = rotation11.applyTo(vector3D18);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = rotation5.applyTo(vector3D27);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation30 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D27, (double) 1.0f);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation36 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D37 = rotation36.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation43 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D44 = rotation43.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation45 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D37, vector3D44);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation51 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D52 = rotation51.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation58 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D59 = rotation58.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation65 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D66 = rotation65.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation67 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D59, vector3D66);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation73 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D74 = rotation73.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation80 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D81 = rotation80.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation82 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D74, vector3D81);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation83 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D44, vector3D52, vector3D66, vector3D81);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation85 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D44, (-0.0d));
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation87 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D44, (double) 1L);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation88 = rotation30.applyInverseTo(rotation87);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation89 = rotation88.revert();
        double[][] doubleArray90 = rotation88.getMatrix();
        double double91 = rotation88.getQ1();
        java.lang.Class<?> wildcardClass92 = rotation88.getClass();
        org.junit.Assert.assertNotNull(vector3D18);
        org.junit.Assert.assertNotNull(vector3D25);
        org.junit.Assert.assertNotNull(vector3D27);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D37);
        org.junit.Assert.assertNotNull(vector3D44);
        org.junit.Assert.assertNotNull(vector3D52);
        org.junit.Assert.assertNotNull(vector3D59);
        org.junit.Assert.assertNotNull(vector3D66);
        org.junit.Assert.assertNotNull(vector3D74);
        org.junit.Assert.assertNotNull(vector3D81);
        org.junit.Assert.assertNotNull(rotation88);
        org.junit.Assert.assertNotNull(rotation89);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + (-0.5322022524502927d) + "'", double91 == (-0.5322022524502927d));
        org.junit.Assert.assertNotNull(wildcardClass92);
    }

    @Test
    public void test0935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0935");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double13 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation5, rotation12);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation19 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D20 = rotation19.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation26 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double27 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation19, rotation26);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation28 = rotation12.applyInverseTo(rotation19);
        double double29 = rotation12.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation30 = rotation12.revert();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation31 = rotation30.revert();
        double double32 = rotation30.getQ2();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertNotNull(vector3D20);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertNotNull(rotation28);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 1.0d + "'", double29 == 1.0d);
        org.junit.Assert.assertNotNull(rotation30);
        org.junit.Assert.assertNotNull(rotation31);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + (-1.0d) + "'", double32 == (-1.0d));
    }

    @Test
    public void test0936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0936");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double13 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation5, rotation12);
        double double14 = rotation12.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation20.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double28 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation20, rotation27);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation34 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D35 = rotation34.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation41 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double42 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation34, rotation41);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation43 = rotation27.applyInverseTo(rotation34);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation44 = rotation12.applyTo(rotation34);
        double[][] doubleArray45 = rotation12.getMatrix();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.geometry.euclidean.threed.Rotation rotation47 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray45, 0.0d);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.geometry.euclidean.threed.NotARotationMatrixException; message: unable to orthogonalize matrix in 10 iterations");
        } catch (org.apache.commons.math.geometry.euclidean.threed.NotARotationMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 3.141592653589793d + "'", double14 == 3.141592653589793d);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertNotNull(vector3D35);
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertNotNull(rotation43);
        org.junit.Assert.assertNotNull(rotation44);
        org.junit.Assert.assertNotNull(doubleArray45);
    }

    @Test
    public void test0937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0937");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation16 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, (double) 100L);
        double double17 = rotation16.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation18 = rotation16.revert();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation24 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (byte) 100, (double) 10L, (double) (short) 100, (double) 1L, false);
        double double25 = rotation24.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation26 = rotation18.applyInverseTo(rotation24);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D27 = rotation24.getAxis();
        double double28 = rotation24.getQ2();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation29 = rotation24.revert();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-0.0d) + "'", double17 == (-0.0d));
        org.junit.Assert.assertNotNull(rotation18);
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertNotNull(rotation26);
        org.junit.Assert.assertNotNull(vector3D27);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 100.0d + "'", double28 == 100.0d);
        org.junit.Assert.assertNotNull(rotation29);
    }

    @Test
    public void test0938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0938");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation20.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = rotation27.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation29 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D21, vector3D28);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D36 = rotation35.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation42 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D43 = rotation42.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation44 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D36, vector3D43);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation45 = rotation29.applyTo(rotation44);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation46 = rotation14.applyTo(rotation45);
        double[][] doubleArray47 = rotation46.getMatrix();
        double double48 = rotation46.getQ1();
        double[][] doubleArray49 = rotation46.getMatrix();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation51 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray49, (double) 100L);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation53 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray49, 0.7881701093115122d);
        double double54 = rotation53.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation60 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-1.0d), (double) (byte) 10, (double) (byte) 100, (double) 0L, true);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation66 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D67 = rotation66.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D68 = rotation60.applyInverseTo(vector3D67);
        double double69 = rotation60.getQ2();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation70 = rotation53.applyInverseTo(rotation60);
        java.lang.Class<?> wildcardClass71 = rotation70.getClass();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(rotation45);
        org.junit.Assert.assertNotNull(rotation46);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d);
        org.junit.Assert.assertNotNull(vector3D67);
        org.junit.Assert.assertNotNull(vector3D68);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.9949879346007117d + "'", double69 == 0.9949879346007117d);
        org.junit.Assert.assertNotNull(rotation70);
        org.junit.Assert.assertNotNull(wildcardClass71);
    }

    @Test
    public void test0939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0939");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation0 = org.apache.commons.math.geometry.euclidean.threed.Rotation.IDENTITY;
        double double1 = rotation0.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation2 = rotation0.revert();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation8 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D9 = rotation8.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation15 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D16 = rotation15.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation17 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D9, vector3D16);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation19 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D9, (double) 1L);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation25 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D26 = rotation25.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation32 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D33 = rotation32.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation34 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D26, vector3D33);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation40 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D41 = rotation40.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation47 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D48 = rotation47.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation54 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D55 = rotation54.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation56 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D48, vector3D55);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation62 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D63 = rotation62.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation69 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D70 = rotation69.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation71 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D63, vector3D70);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation72 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D33, vector3D41, vector3D55, vector3D70);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation73 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D9, vector3D55);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D74 = rotation0.applyInverseTo(vector3D55);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D75 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.geometry.euclidean.threed.Rotation rotation76 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D74, vector3D75);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(rotation0);
        org.junit.Assert.assertTrue("'" + double1 + "' != '" + 0.0d + "'", double1 == 0.0d);
        org.junit.Assert.assertNotNull(rotation2);
        org.junit.Assert.assertNotNull(vector3D9);
        org.junit.Assert.assertNotNull(vector3D16);
        org.junit.Assert.assertNotNull(vector3D26);
        org.junit.Assert.assertNotNull(vector3D33);
        org.junit.Assert.assertNotNull(vector3D41);
        org.junit.Assert.assertNotNull(vector3D48);
        org.junit.Assert.assertNotNull(vector3D55);
        org.junit.Assert.assertNotNull(vector3D63);
        org.junit.Assert.assertNotNull(vector3D70);
        org.junit.Assert.assertNotNull(vector3D74);
    }

    @Test
    public void test0940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0940");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation20.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = rotation27.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation34 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D35 = rotation34.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation36 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D28, vector3D35);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation42 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D43 = rotation42.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation49 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D50 = rotation49.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation51 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D43, vector3D50);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation52 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D13, vector3D21, vector3D35, vector3D50);
        double double53 = rotation52.getQ1();
        double double54 = rotation52.getAngle();
        double[][] doubleArray55 = rotation52.getMatrix();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D35);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(vector3D50);
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertNotNull(doubleArray55);
    }

    @Test
    public void test0941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0941");
        org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.geometry.euclidean.threed.Rotation rotation4 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(rotationOrder0, 10.015527486617021d, 0.1610382605737718d, (-0.06415703545444096d));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0942");
        org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.geometry.euclidean.threed.Rotation rotation4 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(rotationOrder0, 0.09949438965141721d, 0.1610382605737718d, 0.054379424809409445d);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0943");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation20.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = rotation27.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation29 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D21, vector3D28);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation30 = rotation14.applyTo(rotation29);
        double double31 = rotation29.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation32 = rotation29.revert();
        double double33 = rotation29.getAngle();
        double double34 = rotation29.getQ3();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(rotation30);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d);
        org.junit.Assert.assertNotNull(rotation32);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.0d + "'", double33 == 0.0d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
    }

    @Test
    public void test0944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0944");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-0.001227201364295339d), 3.1216032962775833d, (-0.8156840252218559d), (-8.954891411406406d), false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation11 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D12 = rotation11.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation18 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D19 = rotation18.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation25 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D26 = rotation25.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D19, vector3D26);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation29 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D19, (double) 100L);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-1.0d), (double) (byte) 10, (double) (byte) 100, (double) 0L, true);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation41 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D42 = rotation41.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation48 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D49 = rotation48.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation50 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D42, vector3D49);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D51 = rotation35.applyTo(vector3D42);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation57 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D58 = rotation57.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation64 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D65 = rotation64.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation71 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D72 = rotation71.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation73 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D65, vector3D72);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation75 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D65, (double) 100L);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation76 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D58, vector3D65);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation82 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D83 = rotation82.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation84 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D19, vector3D51, vector3D65, vector3D83);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation86 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D65, (double) 1.0f);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D87 = rotation11.applyInverseTo(vector3D65);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation89 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D87, 10.0d);
        double[][] doubleArray90 = rotation89.getMatrix();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D91 = rotation89.getAxis();
        double double92 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation5, rotation89);
        java.lang.Class<?> wildcardClass93 = rotation5.getClass();
        org.junit.Assert.assertNotNull(vector3D12);
        org.junit.Assert.assertNotNull(vector3D19);
        org.junit.Assert.assertNotNull(vector3D26);
        org.junit.Assert.assertNotNull(vector3D42);
        org.junit.Assert.assertNotNull(vector3D49);
        org.junit.Assert.assertNotNull(vector3D51);
        org.junit.Assert.assertNotNull(vector3D58);
        org.junit.Assert.assertNotNull(vector3D65);
        org.junit.Assert.assertNotNull(vector3D72);
        org.junit.Assert.assertNotNull(vector3D83);
        org.junit.Assert.assertNotNull(vector3D87);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertNotNull(vector3D91);
        org.junit.Assert.assertTrue(Double.isNaN(double92));
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test0945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0945");
        org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.geometry.euclidean.threed.Rotation rotation4 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(rotationOrder0, 0.7071061888194913d, 10.015527486617021d, 3.1382608577831084d);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0946");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation21 = rotation14.applyInverseTo(rotation20);
        double double22 = rotation20.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation28 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D29 = rotation28.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double36 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation28, rotation35);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation42 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D43 = rotation42.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation49 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D50 = rotation49.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation51 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D43, vector3D50);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation57 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation58 = rotation51.applyInverseTo(rotation57);
        double double59 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation35, rotation51);
        double double60 = rotation51.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation61 = rotation20.applyInverseTo(rotation51);
        double double62 = rotation61.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation68 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-0.1855270382668764d), (double) 10, (double) (short) -1, (double) 100.0f, false);
        double[][] doubleArray69 = rotation68.getMatrix();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation70 = rotation61.applyInverseTo(rotation68);
        double double71 = rotation61.getQ0();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(rotation21);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 3.141592653589793d + "'", double22 == 3.141592653589793d);
        org.junit.Assert.assertNotNull(vector3D29);
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(vector3D50);
        org.junit.Assert.assertNotNull(rotation58);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 3.141592653589793d + "'", double59 == 3.141592653589793d);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.0d + "'", double60 == 0.0d);
        org.junit.Assert.assertNotNull(rotation61);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 1.0d + "'", double62 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertNotNull(rotation70);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + (-0.0d) + "'", double71 == (-0.0d));
    }

    @Test
    public void test0947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0947");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) 10, 0.0d, (double) (byte) 0, 10.0d, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation11 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (byte) 100, (double) 10L, (double) (short) 100, (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation17 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D18 = rotation17.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation24 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D25 = rotation24.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation26 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D18, vector3D25);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation28 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D18, (double) 100L);
        double double29 = rotation28.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation30 = rotation11.applyInverseTo(rotation28);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation31 = rotation5.applyInverseTo(rotation28);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation37 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D38 = rotation37.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation44 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D45 = rotation44.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation46 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D38, vector3D45);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation48 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D38, (double) 1L);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D49 = rotation31.applyTo(vector3D38);
        double double50 = rotation31.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation56 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.9996303825414301d, (double) (short) 0, 3.141592653589793d, 0.09949879346007118d, true);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation57 = rotation31.applyInverseTo(rotation56);
        double double58 = rotation57.getQ2();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation59 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.geometry.euclidean.threed.Rotation rotation60 = rotation57.applyInverseTo(rotation59);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(vector3D18);
        org.junit.Assert.assertNotNull(vector3D25);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + (-0.0d) + "'", double29 == (-0.0d));
        org.junit.Assert.assertNotNull(rotation30);
        org.junit.Assert.assertNotNull(rotation31);
        org.junit.Assert.assertNotNull(vector3D38);
        org.junit.Assert.assertNotNull(vector3D45);
        org.junit.Assert.assertNotNull(vector3D49);
        org.junit.Assert.assertTrue(Double.isNaN(double50));
        org.junit.Assert.assertNotNull(rotation57);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 10.315768314846704d + "'", double58 == 10.315768314846704d);
    }

    @Test
    public void test0948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0948");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation20.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = rotation27.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation34 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D35 = rotation34.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation36 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D28, vector3D35);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation42 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D43 = rotation42.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation49 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D50 = rotation49.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation51 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D43, vector3D50);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation52 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D13, vector3D21, vector3D35, vector3D50);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation54 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D21, (double) 1);
        double double55 = rotation54.getQ1();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D56 = rotation54.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation62 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D63 = rotation62.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation69 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D70 = rotation69.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation71 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D63, vector3D70);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation77 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D78 = rotation77.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation84 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D85 = rotation84.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation86 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D78, vector3D85);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation87 = rotation71.applyTo(rotation86);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation93 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) 10, 0.0d, (double) (byte) 0, 10.0d, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation94 = rotation71.applyTo(rotation93);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation95 = rotation94.revert();
        double double96 = rotation95.getQ0();
        double double97 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation54, rotation95);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D98 = rotation95.getAxis();
        double double99 = rotation95.getQ3();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D35);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(vector3D50);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.33900504942104487d + "'", double55 == 0.33900504942104487d);
        org.junit.Assert.assertNotNull(vector3D56);
        org.junit.Assert.assertNotNull(vector3D63);
        org.junit.Assert.assertNotNull(vector3D70);
        org.junit.Assert.assertNotNull(vector3D78);
        org.junit.Assert.assertNotNull(vector3D85);
        org.junit.Assert.assertNotNull(rotation87);
        org.junit.Assert.assertNotNull(rotation94);
        org.junit.Assert.assertNotNull(rotation95);
        org.junit.Assert.assertTrue("'" + double96 + "' != '" + (-10.0d) + "'", double96 == (-10.0d));
        org.junit.Assert.assertTrue(Double.isNaN(double97));
        org.junit.Assert.assertNotNull(vector3D98);
        org.junit.Assert.assertTrue("'" + double99 + "' != '" + 10.0d + "'", double99 == 10.0d);
    }

    @Test
    public void test0949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0949");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation16 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, (double) 100L);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation22 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-1.0d), (double) (byte) 10, (double) (byte) 100, (double) 0L, true);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation28 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D29 = rotation28.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D36 = rotation35.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation37 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D29, vector3D36);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D38 = rotation22.applyTo(vector3D29);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation44 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D45 = rotation44.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation51 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D52 = rotation51.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation58 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D59 = rotation58.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation60 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D52, vector3D59);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation62 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D52, (double) 100L);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation63 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D45, vector3D52);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation69 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D70 = rotation69.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation71 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D38, vector3D52, vector3D70);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation73 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D52, (double) 1.0f);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation75 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D52, (double) (short) 10);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D76 = rotation75.getAxis();
        java.lang.Class<?> wildcardClass77 = vector3D76.getClass();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D29);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D38);
        org.junit.Assert.assertNotNull(vector3D45);
        org.junit.Assert.assertNotNull(vector3D52);
        org.junit.Assert.assertNotNull(vector3D59);
        org.junit.Assert.assertNotNull(vector3D70);
        org.junit.Assert.assertNotNull(vector3D76);
        org.junit.Assert.assertNotNull(wildcardClass77);
    }

    @Test
    public void test0950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0950");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation20.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = rotation27.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation34 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D35 = rotation34.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation36 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D28, vector3D35);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation42 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D43 = rotation42.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation49 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D50 = rotation49.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation51 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D43, vector3D50);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation52 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D13, vector3D21, vector3D35, vector3D50);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation58 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D59 = rotation58.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation65 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D66 = rotation65.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation67 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D59, vector3D66);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation73 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D74 = rotation73.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation80 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D81 = rotation80.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation82 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D74, vector3D81);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation83 = rotation67.applyTo(rotation82);
        double double84 = rotation83.getQ0();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation85 = rotation52.applyInverseTo(rotation83);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D86 = rotation52.getAxis();
        double double87 = rotation52.getQ1();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D35);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(vector3D50);
        org.junit.Assert.assertNotNull(vector3D59);
        org.junit.Assert.assertNotNull(vector3D66);
        org.junit.Assert.assertNotNull(vector3D74);
        org.junit.Assert.assertNotNull(vector3D81);
        org.junit.Assert.assertNotNull(rotation83);
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 1.0d + "'", double84 == 1.0d);
        org.junit.Assert.assertNotNull(rotation85);
        org.junit.Assert.assertNotNull(vector3D86);
        org.junit.Assert.assertTrue(Double.isNaN(double87));
    }

    @Test
    public void test0951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0951");
        org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.geometry.euclidean.threed.Rotation rotation4 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(rotationOrder0, 9.649660284921133d, 3.082566122054968d, 0.577207977069365d);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0952");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation20.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = rotation27.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation29 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D21, vector3D28);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D36 = rotation35.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation42 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D43 = rotation42.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation44 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D36, vector3D43);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation45 = rotation29.applyTo(rotation44);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation46 = rotation14.applyTo(rotation45);
        double[][] doubleArray47 = rotation46.getMatrix();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation49 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray47, (double) 10);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation51 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray47, (double) (byte) 100);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation53 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray47, (double) (short) 0);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation55 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray47, (double) 1);
        double double56 = rotation55.getQ0();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation57 = rotation55.revert();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(rotation45);
        org.junit.Assert.assertNotNull(rotation46);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 1.0d + "'", double56 == 1.0d);
        org.junit.Assert.assertNotNull(rotation57);
    }

    @Test
    public void test0953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0953");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.7881701093115122d, (-0.674374748900421d), 0.09949879346007118d, (double) 1.0f, false);
    }

    @Test
    public void test0954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0954");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.4690350851266164d, (-0.009949879346007117d), (double) (byte) 0, 1.047240853549319d, true);
        double double6 = rotation5.getQ1();
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + (-0.008670753979228429d) + "'", double6 == (-0.008670753979228429d));
    }

    @Test
    public void test0955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0955");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation19 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D20 = rotation19.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation21 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D13, vector3D20);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation23 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D13, (double) 100L);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation24 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation26 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, 0.0d);
        java.lang.Class<?> wildcardClass27 = vector3D6.getClass();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D20);
        org.junit.Assert.assertNotNull(wildcardClass27);
    }

    @Test
    public void test0956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0956");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (byte) 100, (double) 10L, (double) (short) 100, (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation11 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D12 = rotation11.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation18 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D19 = rotation18.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D12, vector3D19);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation22 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D12, (double) 100L);
        double double23 = rotation22.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation24 = rotation5.applyInverseTo(rotation22);
        double double25 = rotation5.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D26 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation28 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D26, 0.33900504942104487d);
        double double29 = rotation28.getQ0();
        double double30 = rotation28.getAngle();
        org.junit.Assert.assertNotNull(vector3D12);
        org.junit.Assert.assertNotNull(vector3D19);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + (-0.0d) + "'", double23 == (-0.0d));
        org.junit.Assert.assertNotNull(rotation24);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 1.0d + "'", double25 == 1.0d);
        org.junit.Assert.assertNotNull(vector3D26);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.9856688089870894d + "'", double29 == 0.9856688089870894d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.33900504942104487d + "'", double30 == 0.33900504942104487d);
    }

    @Test
    public void test0957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0957");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-0.1855270382668764d), (double) 1, Double.NaN, (double) (short) 100, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation11 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D12 = rotation11.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation18 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D19 = rotation18.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D12, vector3D19);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation26 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D27 = rotation26.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation33 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D34 = rotation33.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D27, vector3D34);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation36 = rotation20.applyTo(rotation35);
        double double37 = rotation35.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation38 = rotation35.revert();
        double double39 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation5, rotation35);
        double[][] doubleArray40 = rotation5.getMatrix();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation46 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-0.1855270382668764d), (double) 10, (double) (short) -1, (double) 100.0f, false);
        double[][] doubleArray47 = rotation46.getMatrix();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation53 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D54 = rotation53.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation60 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D61 = rotation60.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation62 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D54, vector3D61);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation64 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D54, (double) 100L);
        double double65 = rotation64.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation66 = rotation64.revert();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation72 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (byte) 100, (double) 10L, (double) (short) 100, (double) 1L, false);
        double double73 = rotation72.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation74 = rotation66.applyInverseTo(rotation72);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation75 = rotation46.applyInverseTo(rotation74);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation76 = rotation5.applyTo(rotation75);
        org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder77 = null;
        double[] doubleArray78 = rotation76.getAngles(rotationOrder77);
        java.lang.Class<?> wildcardClass79 = rotation76.getClass();
        org.junit.Assert.assertNotNull(vector3D12);
        org.junit.Assert.assertNotNull(vector3D19);
        org.junit.Assert.assertNotNull(vector3D27);
        org.junit.Assert.assertNotNull(vector3D34);
        org.junit.Assert.assertNotNull(rotation36);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d);
        org.junit.Assert.assertNotNull(rotation38);
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(vector3D54);
        org.junit.Assert.assertNotNull(vector3D61);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + (-0.0d) + "'", double65 == (-0.0d));
        org.junit.Assert.assertNotNull(rotation66);
        org.junit.Assert.assertTrue(Double.isNaN(double73));
        org.junit.Assert.assertNotNull(rotation74);
        org.junit.Assert.assertNotNull(rotation75);
        org.junit.Assert.assertNotNull(rotation76);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[NaN, NaN, NaN]");
        org.junit.Assert.assertNotNull(wildcardClass79);
    }

    @Test
    public void test0958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0958");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation20.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = rotation27.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation34 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D35 = rotation34.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation36 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D28, vector3D35);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation42 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D43 = rotation42.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation49 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D50 = rotation49.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation51 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D43, vector3D50);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation52 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D13, vector3D21, vector3D35, vector3D50);
        double double53 = rotation52.getQ3();
        double double54 = rotation52.getQ0();
        double double55 = rotation52.getQ2();
        double[][] doubleArray56 = rotation52.getMatrix();
        double double57 = rotation52.getQ3();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D35);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(vector3D50);
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertTrue(Double.isNaN(double55));
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertTrue(Double.isNaN(double57));
    }

    @Test
    public void test0959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0959");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double13 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation5, rotation12);
        double double14 = rotation12.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation20.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double28 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation20, rotation27);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation34 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D35 = rotation34.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation41 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double42 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation34, rotation41);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation43 = rotation27.applyInverseTo(rotation34);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation44 = rotation12.applyTo(rotation34);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D45 = rotation12.getAxis();
        double double46 = rotation12.getQ3();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 3.141592653589793d + "'", double14 == 3.141592653589793d);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertNotNull(vector3D35);
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertNotNull(rotation43);
        org.junit.Assert.assertNotNull(rotation44);
        org.junit.Assert.assertNotNull(vector3D45);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 1.0d + "'", double46 == 1.0d);
    }

    @Test
    public void test0960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0960");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-1.0d), (double) (byte) 10, (double) (byte) 100, (double) 0L, true);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation11 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D12 = rotation11.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation5.applyInverseTo(vector3D12);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation19 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D20 = rotation19.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation26 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D27 = rotation26.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation28 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D20, vector3D27);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation30 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D20, (double) 1L);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation31 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D13, vector3D20);
        double double32 = rotation31.getQ2();
        double double33 = rotation31.getQ3();
        org.junit.Assert.assertNotNull(vector3D12);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D20);
        org.junit.Assert.assertNotNull(vector3D27);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + (-0.005755946541407356d) + "'", double32 == (-0.005755946541407356d));
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.6331541195548093d + "'", double33 == 0.6331541195548093d);
    }

    @Test
    public void test0961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0961");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation20.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = rotation27.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation34 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D35 = rotation34.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation36 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D28, vector3D35);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation42 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D43 = rotation42.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation49 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D50 = rotation49.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation51 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D43, vector3D50);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation52 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D13, vector3D21, vector3D35, vector3D50);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation54 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D21, (double) 1);
        double double55 = rotation54.getQ1();
        org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder56 = null;
        double[] doubleArray57 = rotation54.getAngles(rotationOrder56);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation63 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) 0, 100.0d, (double) (short) 100, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation69 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-1.0d), (double) (byte) 10, (double) (byte) 100, (double) 0L, true);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation75 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D76 = rotation75.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation82 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D83 = rotation82.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation84 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D76, vector3D83);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D85 = rotation69.applyTo(vector3D76);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation87 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D76, 0.9996303825414301d);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D88 = rotation63.applyInverseTo(vector3D76);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D89 = rotation54.applyTo(vector3D88);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation90 = rotation54.revert();
        org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder91 = null;
        double[] doubleArray92 = rotation54.getAngles(rotationOrder91);
        double double93 = rotation54.getQ2();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D35);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(vector3D50);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.33900504942104487d + "'", double55 == 0.33900504942104487d);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[2.356194490192345, 0.9999999999999999, -2.356194490192345]");
        org.junit.Assert.assertNotNull(vector3D76);
        org.junit.Assert.assertNotNull(vector3D83);
        org.junit.Assert.assertNotNull(vector3D85);
        org.junit.Assert.assertNotNull(vector3D88);
        org.junit.Assert.assertNotNull(vector3D89);
        org.junit.Assert.assertNotNull(rotation90);
        org.junit.Assert.assertNotNull(doubleArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray92), "[2.356194490192345, 0.9999999999999999, -2.356194490192345]");
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 0.33900504942104487d + "'", double93 == 0.33900504942104487d);
    }

    @Test
    public void test0962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0962");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation20.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = rotation27.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation29 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D21, vector3D28);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D36 = rotation35.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation42 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D43 = rotation42.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation44 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D36, vector3D43);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation45 = rotation29.applyTo(rotation44);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation46 = rotation14.applyTo(rotation45);
        double double47 = rotation14.getQ3();
        double[][] doubleArray48 = rotation14.getMatrix();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.geometry.euclidean.threed.Rotation rotation50 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray48, (-108.9963038254143d));
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.geometry.euclidean.threed.NotARotationMatrixException; message: unable to orthogonalize matrix in 10 iterations");
        } catch (org.apache.commons.math.geometry.euclidean.threed.NotARotationMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(rotation45);
        org.junit.Assert.assertNotNull(rotation46);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray48);
    }

    @Test
    public void test0963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0963");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation16 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, (double) 100L);
        double double17 = rotation16.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation18 = rotation16.revert();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation24 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (byte) 100, (double) 10L, (double) (short) 100, (double) 1L, false);
        double double25 = rotation24.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation26 = rotation18.applyInverseTo(rotation24);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D27 = rotation24.getAxis();
        double double28 = rotation24.getAngle();
        double[][] doubleArray29 = rotation24.getMatrix();
        double double30 = rotation24.getQ3();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-0.0d) + "'", double17 == (-0.0d));
        org.junit.Assert.assertNotNull(rotation18);
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertNotNull(rotation26);
        org.junit.Assert.assertNotNull(vector3D27);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 1.0d + "'", double30 == 1.0d);
    }

    @Test
    public void test0964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0964");
        org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.geometry.euclidean.threed.Rotation rotation4 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(rotationOrder0, (-9.649660284921133d), (double) 100L, (-0.5d));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0965");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation20.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = rotation27.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation29 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D21, vector3D28);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D36 = rotation35.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation42 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D43 = rotation42.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation44 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D36, vector3D43);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation45 = rotation29.applyTo(rotation44);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation46 = rotation14.applyTo(rotation45);
        double[][] doubleArray47 = rotation46.getMatrix();
        double[][] doubleArray48 = rotation46.getMatrix();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation50 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray48, (double) (short) 100);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation52 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray48, (double) 100);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation54 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray48, 0.9950846276202212d);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation56 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray48, 1.7391742109522712d);
        org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder57 = null;
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray58 = rotation56.getAngles(rotationOrder57);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.geometry.euclidean.threed.CardanEulerSingularityException; message: Euler angles singularity");
        } catch (org.apache.commons.math.geometry.euclidean.threed.CardanEulerSingularityException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(rotation45);
        org.junit.Assert.assertNotNull(rotation46);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(doubleArray48);
    }

    @Test
    public void test0966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0966");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation21 = rotation14.applyInverseTo(rotation20);
        double double22 = rotation20.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation28 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D29 = rotation28.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double36 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation28, rotation35);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation42 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D43 = rotation42.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation49 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D50 = rotation49.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation51 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D43, vector3D50);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation57 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation58 = rotation51.applyInverseTo(rotation57);
        double double59 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation35, rotation51);
        double double60 = rotation51.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation61 = rotation20.applyInverseTo(rotation51);
        double[][] doubleArray62 = rotation51.getMatrix();
        double double63 = rotation51.getQ3();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(rotation21);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 3.141592653589793d + "'", double22 == 3.141592653589793d);
        org.junit.Assert.assertNotNull(vector3D29);
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(vector3D50);
        org.junit.Assert.assertNotNull(rotation58);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 3.141592653589793d + "'", double59 == 3.141592653589793d);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.0d + "'", double60 == 0.0d);
        org.junit.Assert.assertNotNull(rotation61);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 0.0d + "'", double63 == 0.0d);
    }

    @Test
    public void test0967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0967");
        org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.geometry.euclidean.threed.Rotation rotation4 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(rotationOrder0, (-100.0d), 0.011384871683009012d, (-0.005755946541407356d));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0968");
        org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.geometry.euclidean.threed.Rotation rotation4 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(rotationOrder0, 0.0019129169749405736d, 0.09900990099009903d, (-116.90457705856772d));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0969");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) 0, 100.0d, (double) (short) 100, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation11 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-1.0d), (double) (byte) 10, (double) (byte) 100, (double) 0L, true);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation17 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D18 = rotation17.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation24 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D25 = rotation24.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation26 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D18, vector3D25);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D27 = rotation11.applyTo(vector3D18);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation29 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D18, 0.9996303825414301d);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D30 = rotation5.applyInverseTo(vector3D18);
        double double31 = rotation5.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation37 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D38 = rotation37.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation44 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double45 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation37, rotation44);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation51 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D52 = rotation51.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation58 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double59 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation51, rotation58);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation60 = rotation44.applyInverseTo(rotation51);
        double double61 = rotation51.getQ0();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation62 = rotation5.applyInverseTo(rotation51);
        double double63 = rotation51.getQ1();
        org.junit.Assert.assertNotNull(vector3D18);
        org.junit.Assert.assertNotNull(vector3D25);
        org.junit.Assert.assertNotNull(vector3D27);
        org.junit.Assert.assertNotNull(vector3D30);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 3.141592653589793d + "'", double31 == 3.141592653589793d);
        org.junit.Assert.assertNotNull(vector3D38);
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertNotNull(vector3D52);
        org.junit.Assert.assertTrue(Double.isNaN(double59));
        org.junit.Assert.assertNotNull(rotation60);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 0.9996303825414301d + "'", double61 == 0.9996303825414301d);
        org.junit.Assert.assertNotNull(rotation62);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 0.01922366120271981d + "'", double63 == 0.01922366120271981d);
    }

    @Test
    public void test0970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0970");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation16 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, (double) 100L);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation22 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-1.0d), (double) (byte) 10, (double) (byte) 100, (double) 0L, true);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation28 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D29 = rotation28.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D36 = rotation35.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation37 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D29, vector3D36);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D38 = rotation22.applyTo(vector3D29);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation44 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D45 = rotation44.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation51 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D52 = rotation51.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation58 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D59 = rotation58.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation60 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D52, vector3D59);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation62 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D52, (double) 100L);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation63 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D45, vector3D52);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation69 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D70 = rotation69.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation71 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D38, vector3D52, vector3D70);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation77 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D78 = rotation77.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation84 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D85 = rotation84.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation86 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D78, vector3D85);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation87 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D70, vector3D85);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation88 = rotation87.revert();
        double[][] doubleArray89 = rotation87.getMatrix();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation91 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray89, 100.0d);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation93 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray89, 0.0d);
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D29);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D38);
        org.junit.Assert.assertNotNull(vector3D45);
        org.junit.Assert.assertNotNull(vector3D52);
        org.junit.Assert.assertNotNull(vector3D59);
        org.junit.Assert.assertNotNull(vector3D70);
        org.junit.Assert.assertNotNull(vector3D78);
        org.junit.Assert.assertNotNull(vector3D85);
        org.junit.Assert.assertNotNull(rotation88);
        org.junit.Assert.assertNotNull(doubleArray89);
    }

    @Test
    public void test0971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0971");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation20.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = rotation27.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation34 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D35 = rotation34.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation36 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D28, vector3D35);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation42 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D43 = rotation42.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation49 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D50 = rotation49.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation51 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D43, vector3D50);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation52 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D13, vector3D21, vector3D35, vector3D50);
        double double53 = rotation52.getQ1();
        double double54 = rotation52.getQ2();
        double[][] doubleArray55 = rotation52.getMatrix();
        org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder56 = null;
        double[] doubleArray57 = rotation52.getAngles(rotationOrder56);
        double double58 = rotation52.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation64 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) 10, 0.0d, (double) (byte) 0, 10.0d, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation70 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (byte) 100, (double) 10L, (double) (short) 100, (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation76 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D77 = rotation76.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation83 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D84 = rotation83.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation85 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D77, vector3D84);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation87 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D77, (double) 100L);
        double double88 = rotation87.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation89 = rotation70.applyInverseTo(rotation87);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation90 = rotation64.applyInverseTo(rotation87);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation91 = rotation90.revert();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation92 = rotation52.applyInverseTo(rotation91);
        org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder93 = null;
        double[] doubleArray94 = rotation92.getAngles(rotationOrder93);
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D35);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(vector3D50);
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[NaN, NaN, NaN]");
        org.junit.Assert.assertTrue(Double.isNaN(double58));
        org.junit.Assert.assertNotNull(vector3D77);
        org.junit.Assert.assertNotNull(vector3D84);
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + (-0.0d) + "'", double88 == (-0.0d));
        org.junit.Assert.assertNotNull(rotation89);
        org.junit.Assert.assertNotNull(rotation90);
        org.junit.Assert.assertNotNull(rotation91);
        org.junit.Assert.assertNotNull(rotation92);
        org.junit.Assert.assertNotNull(doubleArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray94), "[NaN, NaN, NaN]");
    }

    @Test
    public void test0972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0972");
        org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.geometry.euclidean.threed.Rotation rotation4 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(rotationOrder0, (double) 100, (double) 10.0f, 2.566370614359173d);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0973");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-0.1855270382668764d), 9.079262566818354d, 0.7177793011139257d, (-0.4265323853004136d), true);
    }

    @Test
    public void test0974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0974");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.054379424809409445d, (double) 10L, 28.016837073341897d, 0.8890808091523411d, false);
        double double6 = rotation5.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation19 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D20 = rotation19.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation21 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D13, vector3D20);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = rotation27.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation34 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D35 = rotation34.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation36 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D28, vector3D35);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation42 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D43 = rotation42.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation49 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D50 = rotation49.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation51 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D43, vector3D50);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation52 = rotation36.applyTo(rotation51);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation53 = rotation21.applyTo(rotation52);
        double[][] doubleArray54 = rotation53.getMatrix();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation56 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray54, (double) '4');
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation62 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(2.7755575615628914E-17d, (-8.717516503499631d), (-0.005755946541407356d), (double) (-1L), false);
        double double63 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation56, rotation62);
        double double64 = rotation62.getQ2();
        double double65 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation5, rotation62);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.8890808091523411d + "'", double6 == 0.8890808091523411d);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D20);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D35);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(vector3D50);
        org.junit.Assert.assertNotNull(rotation52);
        org.junit.Assert.assertNotNull(rotation53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 3.141592653589793d + "'", double63 == 3.141592653589793d);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + (-0.005755946541407356d) + "'", double64 == (-0.005755946541407356d));
        org.junit.Assert.assertTrue(Double.isNaN(double65));
    }

    @Test
    public void test0975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0975");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double13 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation5, rotation12);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation19 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D20 = rotation19.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation26 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double27 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation19, rotation26);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation28 = rotation12.applyInverseTo(rotation19);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation34 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D35 = rotation34.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation41 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D42 = rotation41.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation43 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D35, vector3D42);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation45 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D35, (double) 1L);
        double double46 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation19, rotation45);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation47 = rotation45.revert();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D48 = rotation47.getAxis();
        double double49 = rotation47.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D50 = rotation47.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation51 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.geometry.euclidean.threed.Rotation rotation52 = rotation47.applyTo(rotation51);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertNotNull(vector3D20);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertNotNull(rotation28);
        org.junit.Assert.assertNotNull(vector3D35);
        org.junit.Assert.assertNotNull(vector3D42);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.9456205751905904d + "'", double46 == 0.9456205751905904d);
        org.junit.Assert.assertNotNull(rotation47);
        org.junit.Assert.assertNotNull(vector3D48);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 1.0d + "'", double49 == 1.0d);
        org.junit.Assert.assertNotNull(vector3D50);
    }

    @Test
    public void test0976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0976");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double13 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation5, rotation12);
        double double14 = rotation12.getQ1();
        double double15 = rotation12.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation16 = rotation12.revert();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D17 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation23 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D24 = rotation23.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation30 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double31 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation23, rotation30);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation37 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D38 = rotation37.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation44 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D45 = rotation44.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation46 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D38, vector3D45);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation52 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation53 = rotation46.applyInverseTo(rotation52);
        double double54 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation30, rotation46);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D55 = rotation30.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation61 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-1.0d), (double) (byte) 10, (double) (byte) 100, (double) 0L, true);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation67 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D68 = rotation67.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation74 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D75 = rotation74.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation76 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D68, vector3D75);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D77 = rotation61.applyTo(vector3D68);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation78 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D55, vector3D77);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation84 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D85 = rotation84.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation91 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D92 = rotation91.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation93 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D85, vector3D92);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D94 = rotation78.applyTo(vector3D85);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation95 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D17, vector3D94);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation97 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D17, (-0.280459243752156d));
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 10.0d + "'", double14 == 10.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 3.141592653589793d + "'", double15 == 3.141592653589793d);
        org.junit.Assert.assertNotNull(rotation16);
        org.junit.Assert.assertNotNull(vector3D17);
        org.junit.Assert.assertNotNull(vector3D24);
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertNotNull(vector3D38);
        org.junit.Assert.assertNotNull(vector3D45);
        org.junit.Assert.assertNotNull(rotation53);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 3.141592653589793d + "'", double54 == 3.141592653589793d);
        org.junit.Assert.assertNotNull(vector3D55);
        org.junit.Assert.assertNotNull(vector3D68);
        org.junit.Assert.assertNotNull(vector3D75);
        org.junit.Assert.assertNotNull(vector3D77);
        org.junit.Assert.assertNotNull(vector3D85);
        org.junit.Assert.assertNotNull(vector3D92);
        org.junit.Assert.assertNotNull(vector3D94);
    }

    @Test
    public void test0977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0977");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (short) -1, (-0.8775825618903728d), (double) (byte) 100, 0.3388903615770647d, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        java.lang.Class<?> wildcardClass7 = vector3D6.getClass();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0978");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) 0, (double) ' ', (double) (byte) 100, 17.66239947251099d, true);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation11 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D12 = rotation11.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation18 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D19 = rotation18.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D12, vector3D19);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation26 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D27 = rotation26.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation33 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D34 = rotation33.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D27, vector3D34);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation41 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D42 = rotation41.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation48 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D49 = rotation48.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation50 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D42, vector3D49);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation51 = rotation35.applyTo(rotation50);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation52 = rotation20.applyTo(rotation51);
        double[][] doubleArray53 = rotation52.getMatrix();
        double double54 = rotation52.getQ1();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D55 = rotation52.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D56 = rotation5.applyInverseTo(vector3D55);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation62 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (byte) 100, (double) 10L, (double) (short) 100, (double) 1L, false);
        double double63 = rotation62.getQ2();
        double double64 = rotation62.getQ2();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation65 = rotation5.applyInverseTo(rotation62);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D66 = rotation5.getAxis();
        org.junit.Assert.assertNotNull(vector3D12);
        org.junit.Assert.assertNotNull(vector3D19);
        org.junit.Assert.assertNotNull(vector3D27);
        org.junit.Assert.assertNotNull(vector3D34);
        org.junit.Assert.assertNotNull(vector3D42);
        org.junit.Assert.assertNotNull(vector3D49);
        org.junit.Assert.assertNotNull(rotation51);
        org.junit.Assert.assertNotNull(rotation52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d);
        org.junit.Assert.assertNotNull(vector3D55);
        org.junit.Assert.assertNotNull(vector3D56);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 100.0d + "'", double63 == 100.0d);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 100.0d + "'", double64 == 100.0d);
        org.junit.Assert.assertNotNull(rotation65);
        org.junit.Assert.assertNotNull(vector3D66);
    }

    @Test
    public void test0979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0979");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation20.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = rotation27.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation29 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D21, vector3D28);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D36 = rotation35.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation42 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D43 = rotation42.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation44 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D36, vector3D43);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation45 = rotation29.applyTo(rotation44);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation46 = rotation14.applyTo(rotation45);
        double[][] doubleArray47 = rotation46.getMatrix();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation49 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray47, (double) '4');
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation51 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray47, (double) '4');
        double double52 = rotation51.getQ2();
        double double53 = rotation51.getQ0();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D54 = rotation51.getAxis();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(rotation45);
        org.junit.Assert.assertNotNull(rotation46);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.0d + "'", double52 == 0.0d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 1.0d + "'", double53 == 1.0d);
        org.junit.Assert.assertNotNull(vector3D54);
    }

    @Test
    public void test0980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0980");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double13 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation5, rotation12);
        double double14 = rotation12.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation20.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double28 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation20, rotation27);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation34 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D35 = rotation34.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation41 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double42 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation34, rotation41);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation43 = rotation27.applyInverseTo(rotation34);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation44 = rotation12.applyTo(rotation34);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D45 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation47 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D45, (double) (-1.0f));
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation49 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D45, 100.0d);
        double double50 = rotation49.getAngle();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 3.141592653589793d + "'", double14 == 3.141592653589793d);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertNotNull(vector3D35);
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertNotNull(rotation43);
        org.junit.Assert.assertNotNull(rotation44);
        org.junit.Assert.assertNotNull(vector3D45);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.5309649148733836d + "'", double50 == 0.5309649148733836d);
    }

    @Test
    public void test0981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0981");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double13 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation5, rotation12);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation19 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D20 = rotation19.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation26 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D27 = rotation26.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation28 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D20, vector3D27);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation34 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = rotation28.applyInverseTo(rotation34);
        double double36 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation12, rotation28);
        double double37 = rotation12.getAngle();
        double double38 = rotation12.getQ1();
        double double39 = rotation12.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder40 = null;
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray41 = rotation12.getAngles(rotationOrder40);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.geometry.euclidean.threed.CardanEulerSingularityException; message: Euler angles singularity");
        } catch (org.apache.commons.math.geometry.euclidean.threed.CardanEulerSingularityException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertNotNull(vector3D20);
        org.junit.Assert.assertNotNull(vector3D27);
        org.junit.Assert.assertNotNull(rotation35);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 3.141592653589793d + "'", double36 == 3.141592653589793d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 3.141592653589793d + "'", double37 == 3.141592653589793d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 10.0d + "'", double38 == 10.0d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 1.0d + "'", double39 == 1.0d);
    }

    @Test
    public void test0982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0982");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (byte) 100, (double) 10L, (double) (short) 100, (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation11 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D12 = rotation11.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation18 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D19 = rotation18.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D12, vector3D19);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation22 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D12, (double) 100L);
        double double23 = rotation22.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation24 = rotation5.applyInverseTo(rotation22);
        double double25 = rotation5.getQ3();
        double double26 = rotation5.getAngle();
        org.junit.Assert.assertNotNull(vector3D12);
        org.junit.Assert.assertNotNull(vector3D19);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + (-0.0d) + "'", double23 == (-0.0d));
        org.junit.Assert.assertNotNull(rotation24);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 1.0d + "'", double25 == 1.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
    }

    @Test
    public void test0983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0983");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (short) 10, (double) (byte) 0, 0.01922366120271981d, 0.9949879346007117d, true);
        double double6 = rotation5.getQ2();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D7 = rotation5.getAxis();
        double double8 = rotation5.getQ3();
        double[][] doubleArray9 = rotation5.getMatrix();
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0019129169749405736d + "'", double6 == 0.0019129169749405736d);
        org.junit.Assert.assertNotNull(vector3D7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.09900971983887621d + "'", double8 == 0.09900971983887621d);
        org.junit.Assert.assertNotNull(doubleArray9);
    }

    @Test
    public void test0984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0984");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        double[][] doubleArray15 = rotation14.getMatrix();
        double[][] doubleArray16 = rotation14.getMatrix();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation18 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray16, (double) 0);
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(doubleArray16);
    }

    @Test
    public void test0985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0985");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-0.1855270382668764d), (double) 1, Double.NaN, (double) (short) 100, false);
        double double6 = rotation5.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation7 = rotation5.revert();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation13 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D14 = rotation13.getAxis();
        double double15 = rotation13.getQ0();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D16 = rotation13.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D17 = rotation7.applyInverseTo(vector3D16);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation18 = rotation7.revert();
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertNotNull(rotation7);
        org.junit.Assert.assertNotNull(vector3D14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.9996303825414301d + "'", double15 == 0.9996303825414301d);
        org.junit.Assert.assertNotNull(vector3D16);
        org.junit.Assert.assertNotNull(vector3D17);
        org.junit.Assert.assertNotNull(rotation18);
    }

    @Test
    public void test0986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0986");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double13 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation5, rotation12);
        double double14 = rotation12.getAngle();
        double double15 = rotation12.getAngle();
        double double16 = rotation12.getQ0();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation22 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D23 = rotation22.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation29 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D30 = rotation29.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation31 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D23, vector3D30);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation37 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation38 = rotation31.applyInverseTo(rotation37);
        double double39 = rotation31.getQ2();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation45 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D46 = rotation45.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation52 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D53 = rotation52.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation54 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D46, vector3D53);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation60 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D61 = rotation60.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation67 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D68 = rotation67.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation69 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D61, vector3D68);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation70 = rotation54.applyTo(rotation69);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation76 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) 10, 0.0d, (double) (byte) 0, 10.0d, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation77 = rotation54.applyTo(rotation76);
        double double78 = rotation76.getAngle();
        double double79 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation31, rotation76);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation80 = rotation12.applyInverseTo(rotation31);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation86 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(3.1216925665368036d, (-8.717516503499631d), (-0.0d), 0.9949879346007117d, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation87 = rotation80.applyInverseTo(rotation86);
        java.lang.Class<?> wildcardClass88 = rotation86.getClass();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 3.141592653589793d + "'", double14 == 3.141592653589793d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 3.141592653589793d + "'", double15 == 3.141592653589793d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertNotNull(vector3D23);
        org.junit.Assert.assertNotNull(vector3D30);
        org.junit.Assert.assertNotNull(rotation38);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.0d + "'", double39 == 0.0d);
        org.junit.Assert.assertNotNull(vector3D46);
        org.junit.Assert.assertNotNull(vector3D53);
        org.junit.Assert.assertNotNull(vector3D61);
        org.junit.Assert.assertNotNull(vector3D68);
        org.junit.Assert.assertNotNull(rotation70);
        org.junit.Assert.assertNotNull(rotation77);
        org.junit.Assert.assertTrue(Double.isNaN(double78));
        org.junit.Assert.assertTrue(Double.isNaN(double79));
        org.junit.Assert.assertNotNull(rotation80);
        org.junit.Assert.assertNotNull(rotation87);
        org.junit.Assert.assertNotNull(wildcardClass88);
    }

    @Test
    public void test0987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0987");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double13 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation5, rotation12);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation19 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D20 = rotation19.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation26 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D27 = rotation26.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation28 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D20, vector3D27);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation34 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = rotation28.applyInverseTo(rotation34);
        double double36 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation12, rotation28);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D37 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation38 = rotation12.revert();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D39 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D40 = rotation12.applyTo(vector3D39);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertNotNull(vector3D20);
        org.junit.Assert.assertNotNull(vector3D27);
        org.junit.Assert.assertNotNull(rotation35);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 3.141592653589793d + "'", double36 == 3.141592653589793d);
        org.junit.Assert.assertNotNull(vector3D37);
        org.junit.Assert.assertNotNull(rotation38);
    }

    @Test
    public void test0988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0988");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.9456205751905904d, (-0.009949438965141721d), 1.7391742109522712d, (-1579.617450290328d), true);
    }

    @Test
    public void test0989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0989");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double13 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation5, rotation12);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation19 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D20 = rotation19.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation26 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D27 = rotation26.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation28 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D20, vector3D27);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation34 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = rotation28.applyInverseTo(rotation34);
        double double36 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation12, rotation28);
        double double37 = rotation12.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation43 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D44 = rotation43.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation50 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double51 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation43, rotation50);
        double double52 = rotation50.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation58 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D59 = rotation58.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation65 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double66 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation58, rotation65);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation72 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D73 = rotation72.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation79 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double80 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation72, rotation79);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation81 = rotation65.applyInverseTo(rotation72);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation82 = rotation50.applyTo(rotation72);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D83 = rotation50.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D84 = rotation12.applyInverseTo(vector3D83);
        double double85 = rotation12.getQ1();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation91 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) 0, (double) 1.0f, (double) 0.0f, 0.01922366120271981d, true);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation92 = rotation12.applyTo(rotation91);
        double[][] doubleArray93 = rotation92.getMatrix();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.geometry.euclidean.threed.Rotation rotation95 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray93, 0.33900504942104487d);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.geometry.euclidean.threed.NotARotationMatrixException; message: unable to orthogonalize matrix in 10 iterations");
        } catch (org.apache.commons.math.geometry.euclidean.threed.NotARotationMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertNotNull(vector3D20);
        org.junit.Assert.assertNotNull(vector3D27);
        org.junit.Assert.assertNotNull(rotation35);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 3.141592653589793d + "'", double36 == 3.141592653589793d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 3.141592653589793d + "'", double37 == 3.141592653589793d);
        org.junit.Assert.assertNotNull(vector3D44);
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 3.141592653589793d + "'", double52 == 3.141592653589793d);
        org.junit.Assert.assertNotNull(vector3D59);
        org.junit.Assert.assertTrue(Double.isNaN(double66));
        org.junit.Assert.assertNotNull(vector3D73);
        org.junit.Assert.assertTrue(Double.isNaN(double80));
        org.junit.Assert.assertNotNull(rotation81);
        org.junit.Assert.assertNotNull(rotation82);
        org.junit.Assert.assertNotNull(vector3D83);
        org.junit.Assert.assertNotNull(vector3D84);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 10.0d + "'", double85 == 10.0d);
        org.junit.Assert.assertNotNull(rotation92);
        org.junit.Assert.assertNotNull(doubleArray93);
    }

    @Test
    public void test0990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0990");
        org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.geometry.euclidean.threed.Rotation rotation4 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(rotationOrder0, 0.0d, (double) 10.0f, (-0.009949438965141721d));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0991");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) 10, 0.0d, (double) (byte) 0, 10.0d, false);
        double double6 = rotation5.getQ1();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation19 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D20 = rotation19.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation21 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D13, vector3D20);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = rotation27.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation34 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D35 = rotation34.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation41 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D42 = rotation41.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation43 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D35, vector3D42);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation49 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D50 = rotation49.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation56 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D57 = rotation56.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation58 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D50, vector3D57);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation59 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D20, vector3D28, vector3D42, vector3D57);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D60 = rotation5.applyTo(vector3D42);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation61 = rotation5.revert();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation62 = rotation61.revert();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation63 = rotation61.revert();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D64 = rotation63.getAxis();
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D20);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D35);
        org.junit.Assert.assertNotNull(vector3D42);
        org.junit.Assert.assertNotNull(vector3D50);
        org.junit.Assert.assertNotNull(vector3D57);
        org.junit.Assert.assertNotNull(vector3D60);
        org.junit.Assert.assertNotNull(rotation61);
        org.junit.Assert.assertNotNull(rotation62);
        org.junit.Assert.assertNotNull(rotation63);
        org.junit.Assert.assertNotNull(vector3D64);
    }

    @Test
    public void test0992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0992");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (byte) 100, (double) 10L, (double) (short) 100, (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation11 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D12 = rotation11.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation18 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D19 = rotation18.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D12, vector3D19);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation22 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D12, (double) 100L);
        double double23 = rotation22.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation24 = rotation5.applyInverseTo(rotation22);
        double double25 = rotation24.getQ1();
        double double26 = rotation24.getAngle();
        double[][] doubleArray27 = rotation24.getMatrix();
        java.lang.Class<?> wildcardClass28 = rotation24.getClass();
        org.junit.Assert.assertNotNull(vector3D12);
        org.junit.Assert.assertNotNull(vector3D19);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + (-0.0d) + "'", double23 == (-0.0d));
        org.junit.Assert.assertNotNull(rotation24);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 28.016837073341897d + "'", double25 == 28.016837073341897d);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertNotNull(wildcardClass28);
    }

    @Test
    public void test0993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0993");
        org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.geometry.euclidean.threed.Rotation rotation4 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(rotationOrder0, 0.0019129169749405736d, 2.7755575615628914E-17d, 3.1030128410395363d);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0994");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) 100, (double) (byte) -1, (double) (short) 10, 0.9456205751905904d, true);
        double double6 = rotation5.getQ0();
        double[][] doubleArray7 = rotation5.getMatrix();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.geometry.euclidean.threed.Rotation rotation9 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray7, (-0.9649660284921133d));
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.geometry.euclidean.threed.NotARotationMatrixException; message: unable to orthogonalize matrix in 10 iterations");
        } catch (org.apache.commons.math.geometry.euclidean.threed.NotARotationMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.9949438965141721d + "'", double6 == 0.9949438965141721d);
        org.junit.Assert.assertNotNull(doubleArray7);
    }

    @Test
    public void test0995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0995");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-1.0d), (double) (byte) 10, (double) (byte) 100, (double) 0L, true);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation11 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D12 = rotation11.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation18 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D19 = rotation18.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D12, vector3D19);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation5.applyTo(vector3D12);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) 10, 0.0d, (double) (byte) 0, 10.0d, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation33 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (byte) 100, (double) 10L, (double) (short) 100, (double) 1L, false);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation39 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D40 = rotation39.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation46 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D47 = rotation46.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation48 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D40, vector3D47);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation50 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D40, (double) 100L);
        double double51 = rotation50.getQ3();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation52 = rotation33.applyInverseTo(rotation50);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation53 = rotation27.applyInverseTo(rotation50);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation54 = rotation5.applyTo(rotation27);
        java.lang.Class<?> wildcardClass55 = rotation5.getClass();
        org.junit.Assert.assertNotNull(vector3D12);
        org.junit.Assert.assertNotNull(vector3D19);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D40);
        org.junit.Assert.assertNotNull(vector3D47);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + (-0.0d) + "'", double51 == (-0.0d));
        org.junit.Assert.assertNotNull(rotation52);
        org.junit.Assert.assertNotNull(rotation53);
        org.junit.Assert.assertNotNull(rotation54);
        org.junit.Assert.assertNotNull(wildcardClass55);
    }

    @Test
    public void test0996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0996");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation20.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double28 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation20, rotation27);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation34 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D35 = rotation34.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation41 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double42 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation34, rotation41);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation43 = rotation27.applyInverseTo(rotation34);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D44 = rotation43.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation45 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D44);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation47 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D44, (-0.280459243752156d));
        java.lang.Class<?> wildcardClass48 = rotation47.getClass();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertNotNull(vector3D35);
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertNotNull(rotation43);
        org.junit.Assert.assertNotNull(vector3D44);
        org.junit.Assert.assertNotNull(wildcardClass48);
    }

    @Test
    public void test0997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0997");
        org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.geometry.euclidean.threed.Rotation rotation4 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(rotationOrder0, 1.6481559849923735d, (-8.717516503499631d), 0.47438148773598054d);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0998");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation11 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D12 = rotation11.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation18 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double19 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation11, rotation18);
        double double20 = rotation18.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation26 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D27 = rotation26.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation33 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D34 = rotation33.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D27, vector3D34);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation41 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D42 = rotation41.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation48 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D49 = rotation48.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation50 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D42, vector3D49);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation51 = rotation35.applyTo(rotation50);
        double double52 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation18, rotation51);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation58 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D59 = rotation58.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation65 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double66 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation58, rotation65);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation72 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D73 = rotation72.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation79 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) (short) 10, (double) (-1L), (double) 1L, false);
        double double80 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation72, rotation79);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation81 = rotation65.applyInverseTo(rotation72);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation82 = rotation18.applyInverseTo(rotation72);
        double double83 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation5, rotation82);
        org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder84 = null;
        double[] doubleArray85 = rotation82.getAngles(rotationOrder84);
        double double86 = rotation82.getQ0();
        org.junit.Assert.assertNotNull(vector3D12);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 3.141592653589793d + "'", double20 == 3.141592653589793d);
        org.junit.Assert.assertNotNull(vector3D27);
        org.junit.Assert.assertNotNull(vector3D34);
        org.junit.Assert.assertNotNull(vector3D42);
        org.junit.Assert.assertNotNull(vector3D49);
        org.junit.Assert.assertNotNull(rotation51);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 3.141592653589793d + "'", double52 == 3.141592653589793d);
        org.junit.Assert.assertNotNull(vector3D59);
        org.junit.Assert.assertTrue(Double.isNaN(double66));
        org.junit.Assert.assertNotNull(vector3D73);
        org.junit.Assert.assertTrue(Double.isNaN(double80));
        org.junit.Assert.assertNotNull(rotation81);
        org.junit.Assert.assertNotNull(rotation82);
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 3.141592653589793d + "'", double83 == 3.141592653589793d);
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[-0.31746367442260337, 1.2637009275001716, 3.026886383418824]");
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + (-0.1730129508244783d) + "'", double86 == (-0.1730129508244783d));
    }

    @Test
    public void test0999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0999");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.9949438965141721d, (double) ' ', (-0.009949438965141721d), (-0.06415703545444096d), true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (-1L), 0.0d, (-0.0d), 17.66239947251099d, false);
        double double13 = rotation12.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D14 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation20.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = rotation27.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation29 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D21, vector3D28);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D36 = rotation35.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation42 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D43 = rotation42.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation44 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D36, vector3D43);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation50 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D51 = rotation50.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation57 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D58 = rotation57.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation59 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D51, vector3D58);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation60 = rotation44.applyTo(rotation59);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation61 = rotation29.applyTo(rotation60);
        double[][] doubleArray62 = rotation61.getMatrix();
        double double63 = rotation61.getQ1();
        double[][] doubleArray64 = rotation61.getMatrix();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation66 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray64, (double) 100L);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation68 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray64, 0.7881701093115122d);
        double double69 = rotation68.getAngle();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D70 = rotation68.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation71 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D14, vector3D70);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation77 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-1.0d), (double) (byte) 10, (double) (byte) 100, (double) 0L, true);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation83 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D84 = rotation83.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D85 = rotation77.applyInverseTo(vector3D84);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation91 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D92 = rotation91.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation93 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D14, vector3D84, vector3D92);
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertNotNull(vector3D14);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(vector3D51);
        org.junit.Assert.assertNotNull(vector3D58);
        org.junit.Assert.assertNotNull(rotation60);
        org.junit.Assert.assertNotNull(rotation61);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 0.0d + "'", double63 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d);
        org.junit.Assert.assertNotNull(vector3D70);
        org.junit.Assert.assertNotNull(vector3D84);
        org.junit.Assert.assertNotNull(vector3D85);
        org.junit.Assert.assertNotNull(vector3D92);
    }

    @Test
    public void test1000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test1000");
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation12 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation12.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation14 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D13);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation20 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = rotation20.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = rotation27.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation34 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D35 = rotation34.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation36 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D28, vector3D35);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation42 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D43 = rotation42.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation49 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) '4', (double) 1, (double) (short) 1, (double) (short) 0, true);
        org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D50 = rotation49.getAxis();
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation51 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D43, vector3D50);
        org.apache.commons.math.geometry.euclidean.threed.Rotation rotation52 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D13, vector3D21, vector3D35, vector3D50);
        double double53 = rotation52.getQ1();
        double double54 = rotation52.getQ0();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D35);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(vector3D50);
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertTrue(Double.isNaN(double54));
    }
}


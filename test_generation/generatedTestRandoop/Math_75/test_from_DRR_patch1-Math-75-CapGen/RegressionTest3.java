import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest3 {

    public static boolean debug = false;

    @Test
    public void test1501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1501");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double4 = frequency0.getCumPct((long) (short) 100);
        long long6 = frequency0.getCumFreq('#');
        frequency0.addValue((java.lang.Integer) 0);
        double double10 = frequency0.getPct((int) (byte) 10);
        long long12 = frequency0.getCumFreq('#');
        frequency0.addValue((java.lang.Integer) 10);
        java.lang.String str15 = frequency0.toString();
        long long17 = frequency0.getCumFreq((long) '4');
        long long19 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \nValue \t Freq. \t Pct. \t Cum Pct. \n100\t1\t100%\t100%\n\t1\t100%\t100%\n");
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n0\t1\t50%\t50%\n10\t1\t50%\t100%\n" + "'", str15, "Value \t Freq. \t Pct. \t Cum Pct. \n0\t1\t50%\t50%\n10\t1\t50%\t100%\n");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 2L + "'", long17 == 2L);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
    }

    @Test
    public void test1502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1502");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getPct((java.lang.Object) (byte) -1);
        double double4 = frequency0.getPct(1);
        double double6 = frequency0.getCumPct((int) '4');
        frequency0.addValue((long) '#');
        long long10 = frequency0.getCount((int) ' ');
        double double12 = frequency0.getCumPct((long) (short) 0);
        long long14 = frequency0.getCumFreq((java.lang.Object) '4');
        long long16 = frequency0.getCount('#');
        frequency0.clear();
        frequency0.addValue((java.lang.Integer) 1);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
    }

    @Test
    public void test1503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1503");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double4 = frequency0.getCumPct((long) (short) 100);
        long long6 = frequency0.getCumFreq('#');
        frequency0.addValue((java.lang.Integer) 0);
        double double10 = frequency0.getPct((int) (byte) 10);
        frequency0.clear();
        double double13 = frequency0.getPct((int) (short) 0);
        double double15 = frequency0.getCumPct((int) '4');
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
    }

    @Test
    public void test1504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1504");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double4 = frequency0.getCumPct(' ');
        double double6 = frequency0.getCumPct('#');
        double double8 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n0\t1\t50%\t50%\n10\t1\t50%\t100%\n");
        double double10 = frequency0.getCumPct((int) (short) 1);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
    }

    @Test
    public void test1505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1505");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        java.lang.String str3 = frequency0.toString();
        java.lang.Object obj4 = null;
        double double5 = frequency0.getCumPct(obj4);
        double double7 = frequency0.getCumPct('a');
        double double9 = frequency0.getCumPct((int) (byte) 100);
        long long11 = frequency0.getCount(0L);
        org.apache.commons.math.stat.Frequency frequency12 = new org.apache.commons.math.stat.Frequency();
        double double14 = frequency12.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        long long16 = frequency12.getCount((long) (short) 100);
        double double18 = frequency12.getPct((java.lang.Comparable<java.lang.String>) "");
        boolean boolean19 = frequency0.equals((java.lang.Object) "");
        long long21 = frequency0.getCumFreq((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n-1\t1\t100%\t100%\n");
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor22 = frequency0.valuesIterator();
        org.apache.commons.math.stat.Frequency frequency23 = new org.apache.commons.math.stat.Frequency();
        double double25 = frequency23.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double27 = frequency23.getCumPct((java.lang.Comparable<java.lang.String>) "");
        double double29 = frequency23.getPct((int) 'a');
        long long31 = frequency23.getCount((long) (byte) 1);
        frequency23.addValue('a');
        long long35 = frequency23.getCount('#');
        double double37 = frequency23.getCumPct((java.lang.Comparable<java.lang.String>) "");
        double double39 = frequency23.getCumPct(1);
        java.lang.String str40 = frequency23.toString();
        long long42 = frequency23.getCumFreq((long) 'a');
        boolean boolean43 = frequency0.equals((java.lang.Object) frequency23);
        java.lang.String str44 = frequency0.toString();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str3, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNotNull(wildcardComparableItor22);
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.0d + "'", double39 == 0.0d);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \na\t1\t100%\t100%\n" + "'", str40, "Value \t Freq. \t Pct. \t Cum Pct. \na\t1\t100%\t100%\n");
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str44, "Value \t Freq. \t Pct. \t Cum Pct. \n");
    }

    @Test
    public void test1506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1506");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double4 = frequency0.getPct(0);
        long long6 = frequency0.getCumFreq((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n0\t1\t50%\t50%\n100\t1\t50%\t100%\n");
        double double8 = frequency0.getPct((int) (byte) 1);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
    }

    @Test
    public void test1507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1507");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double4 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "");
        double double6 = frequency0.getPct((int) 'a');
        long long8 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        double double10 = frequency0.getCumPct('a');
        long long12 = frequency0.getCumFreq((int) '#');
        double double14 = frequency0.getCumPct((long) (short) 10);
        long long16 = frequency0.getCumFreq('4');
        long long18 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n100\t1\t100%\t100%\n");
        org.apache.commons.math.stat.Frequency frequency19 = new org.apache.commons.math.stat.Frequency();
        double double21 = frequency19.getPct((java.lang.Object) (byte) -1);
        long long23 = frequency19.getCumFreq((java.lang.Comparable<java.lang.String>) "hi!");
        double double24 = frequency0.getPct((java.lang.Object) "hi!");
        long long26 = frequency0.getCount((long) 100);
        double double28 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n35\t1\t100%\t100%\n");
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor29 = frequency0.valuesIterator();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertNotNull(wildcardComparableItor29);
    }

    @Test
    public void test1508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1508");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double4 = frequency0.getCumPct((long) (short) 100);
        long long6 = frequency0.getCumFreq('#');
        double double8 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.apache.commons.math.stat.Frequency frequency9 = new org.apache.commons.math.stat.Frequency();
        double double11 = frequency9.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double13 = frequency9.getCumPct((long) (short) 100);
        long long15 = frequency9.getCumFreq('#');
        org.apache.commons.math.stat.Frequency frequency16 = new org.apache.commons.math.stat.Frequency();
        double double18 = frequency16.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double20 = frequency16.getCumPct((long) (short) 100);
        long long22 = frequency16.getCumFreq('#');
        boolean boolean23 = frequency9.equals((java.lang.Object) long22);
        double double25 = frequency9.getCumPct((java.lang.Comparable<java.lang.String>) "");
        org.apache.commons.math.stat.Frequency frequency26 = new org.apache.commons.math.stat.Frequency();
        double double28 = frequency26.getPct((java.lang.Object) (byte) -1);
        double double30 = frequency26.getPct(1);
        double double32 = frequency26.getCumPct((int) '4');
        double double34 = frequency26.getPct((long) (byte) 10);
        long long35 = frequency9.getCumFreq((java.lang.Object) (byte) 10);
        long long37 = frequency9.getCumFreq((int) ' ');
        double double39 = frequency9.getPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n-1\t1\t100%\t100%\n");
        double double41 = frequency9.getCumPct((long) (byte) 1);
        frequency9.addValue((long) (-1));
        long long45 = frequency9.getCount((int) '#');
        double double46 = frequency0.getPct((java.lang.Object) '#');
        long long48 = frequency0.getCount('4');
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
    }

    @Test
    public void test1509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1509");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        long long4 = frequency0.getCount((long) (short) 100);
        org.apache.commons.math.stat.Frequency frequency5 = new org.apache.commons.math.stat.Frequency();
        double double7 = frequency5.getPct((java.lang.Object) (byte) -1);
        double double8 = frequency0.getPct((java.lang.Object) (byte) -1);
        double double10 = frequency0.getCumPct((java.lang.Object) (-1.0f));
        long long12 = frequency0.getCount('#');
        long long14 = frequency0.getCumFreq((java.lang.Object) '#');
        double double16 = frequency0.getPct('#');
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
    }

    @Test
    public void test1510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1510");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double4 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "");
        double double6 = frequency0.getPct((int) 'a');
        long long8 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        double double10 = frequency0.getCumPct('a');
        org.apache.commons.math.stat.Frequency frequency11 = new org.apache.commons.math.stat.Frequency();
        double double13 = frequency11.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double15 = frequency11.getCumPct((long) (short) 100);
        long long17 = frequency11.getCumFreq((long) (byte) -1);
        double double18 = frequency0.getPct((java.lang.Object) long17);
        boolean boolean20 = frequency0.equals((java.lang.Object) 10);
        java.lang.String str21 = frequency0.toString();
        org.apache.commons.math.stat.Frequency frequency22 = new org.apache.commons.math.stat.Frequency();
        double double24 = frequency22.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double26 = frequency22.getCumPct((long) (short) 100);
        long long28 = frequency22.getCumFreq('#');
        org.apache.commons.math.stat.Frequency frequency29 = new org.apache.commons.math.stat.Frequency();
        double double31 = frequency29.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double33 = frequency29.getCumPct((long) (short) 100);
        long long35 = frequency29.getCumFreq('#');
        boolean boolean36 = frequency22.equals((java.lang.Object) long35);
        double double38 = frequency22.getCumPct((java.lang.Comparable<java.lang.String>) "");
        org.apache.commons.math.stat.Frequency frequency39 = new org.apache.commons.math.stat.Frequency();
        double double41 = frequency39.getPct((java.lang.Object) (byte) -1);
        double double43 = frequency39.getPct(1);
        double double45 = frequency39.getCumPct((int) '4');
        double double47 = frequency39.getPct((long) (byte) 10);
        long long48 = frequency22.getCumFreq((java.lang.Object) (byte) 10);
        long long50 = frequency22.getCumFreq((int) ' ');
        frequency22.addValue((java.lang.Integer) (-1));
        double double53 = frequency0.getPct((java.lang.Object) (-1));
        double double55 = frequency0.getCumPct(1);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str21, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertTrue(Double.isNaN(double55));
    }

    @Test
    public void test1511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1511");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double4 = frequency0.getCumPct((long) (short) 100);
        long long6 = frequency0.getCumFreq('#');
        double double8 = frequency0.getCumPct('4');
        long long9 = frequency0.getSumFreq();
        frequency0.addValue((long) ' ');
        long long13 = frequency0.getCumFreq(100L);
        long long15 = frequency0.getCount((long) (short) 10);
        long long17 = frequency0.getCumFreq((long) 100);
        double double19 = frequency0.getCumPct((long) (short) 0);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1L + "'", long17 == 1L);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
    }

    @Test
    public void test1512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1512");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor3 = frequency0.valuesIterator();
        frequency0.addValue(100L);
        frequency0.addValue((java.lang.Integer) 0);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertNotNull(wildcardComparableItor3);
    }

    @Test
    public void test1513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1513");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double4 = frequency0.getCumPct((long) (short) 100);
        long long6 = frequency0.getCumFreq('#');
        org.apache.commons.math.stat.Frequency frequency7 = new org.apache.commons.math.stat.Frequency();
        double double9 = frequency7.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double11 = frequency7.getCumPct((long) (short) 100);
        long long13 = frequency7.getCumFreq('#');
        boolean boolean14 = frequency0.equals((java.lang.Object) long13);
        double double16 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "");
        org.apache.commons.math.stat.Frequency frequency17 = new org.apache.commons.math.stat.Frequency();
        double double19 = frequency17.getPct((java.lang.Object) (byte) -1);
        double double21 = frequency17.getPct(1);
        double double23 = frequency17.getCumPct((int) '4');
        double double25 = frequency17.getPct((long) (byte) 10);
        long long26 = frequency0.getCumFreq((java.lang.Object) (byte) 10);
        long long28 = frequency0.getCumFreq((int) ' ');
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor29 = frequency0.valuesIterator();
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor30 = frequency0.valuesIterator();
        frequency0.addValue((int) (byte) -1);
        java.lang.Class<?> wildcardClass33 = frequency0.getClass();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertNotNull(wildcardComparableItor29);
        org.junit.Assert.assertNotNull(wildcardComparableItor30);
        org.junit.Assert.assertNotNull(wildcardClass33);
    }

    @Test
    public void test1514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1514");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double4 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "");
        double double6 = frequency0.getPct((int) 'a');
        long long8 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        double double10 = frequency0.getCumPct('a');
        org.apache.commons.math.stat.Frequency frequency11 = new org.apache.commons.math.stat.Frequency();
        double double13 = frequency11.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double15 = frequency11.getCumPct((long) (short) 100);
        long long17 = frequency11.getCumFreq((long) (byte) -1);
        double double18 = frequency0.getPct((java.lang.Object) long17);
        boolean boolean20 = frequency0.equals((java.lang.Object) 10);
        java.lang.String str21 = frequency0.toString();
        long long23 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.apache.commons.math.stat.Frequency frequency24 = new org.apache.commons.math.stat.Frequency();
        double double26 = frequency24.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        java.lang.String str27 = frequency24.toString();
        java.lang.Object obj28 = null;
        double double29 = frequency24.getCumPct(obj28);
        double double31 = frequency24.getCumPct('a');
        double double33 = frequency24.getCumPct((int) (byte) 100);
        long long35 = frequency24.getCount(0L);
        double double36 = frequency0.getPct((java.lang.Object) long35);
        org.apache.commons.math.stat.Frequency frequency37 = new org.apache.commons.math.stat.Frequency();
        double double39 = frequency37.getPct((java.lang.Object) (byte) -1);
        frequency37.addValue((long) (short) 100);
        frequency37.addValue((long) 0);
        long long45 = frequency37.getCount('a');
        boolean boolean46 = frequency0.equals((java.lang.Object) frequency37);
        java.lang.String str47 = frequency37.toString();
        long long49 = frequency37.getCumFreq((long) (byte) 100);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str21, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str27, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n0\t1\t50%\t50%\n100\t1\t50%\t100%\n" + "'", str47, "Value \t Freq. \t Pct. \t Cum Pct. \n0\t1\t50%\t50%\n100\t1\t50%\t100%\n");
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 2L + "'", long49 == 2L);
    }

    @Test
    public void test1515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1515");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency();
        double double3 = frequency1.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double5 = frequency1.getCumPct((java.lang.Comparable<java.lang.String>) "");
        double double6 = frequency0.getCumPct((java.lang.Object) "");
        long long8 = frequency0.getCount('4');
        long long10 = frequency0.getCumFreq('4');
        long long12 = frequency0.getCount(0L);
        long long14 = frequency0.getCumFreq('4');
        frequency0.addValue((java.lang.Integer) 0);
        org.apache.commons.math.stat.Frequency frequency17 = new org.apache.commons.math.stat.Frequency();
        double double19 = frequency17.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double21 = frequency17.getCumPct((long) (short) 100);
        long long23 = frequency17.getCumFreq('#');
        frequency17.addValue((java.lang.Integer) 0);
        double double27 = frequency17.getCumPct((java.lang.Object) 10L);
        long long29 = frequency17.getCount((int) (short) 1);
        long long31 = frequency17.getCount((java.lang.Object) (-1L));
        long long33 = frequency17.getCount(' ');
        frequency17.addValue(0);
        double double37 = frequency17.getCumPct(100L);
        long long39 = frequency17.getCount(0);
        long long40 = frequency0.getCount((java.lang.Object) long39);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 1.0d + "'", double27 == 1.0d);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 1.0d + "'", double37 == 1.0d);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 2L + "'", long39 == 2L);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
    }

    @Test
    public void test1516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1516");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double4 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "");
        double double6 = frequency0.getPct((int) 'a');
        long long8 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        double double10 = frequency0.getCumPct('a');
        org.apache.commons.math.stat.Frequency frequency11 = new org.apache.commons.math.stat.Frequency();
        double double13 = frequency11.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double15 = frequency11.getCumPct((long) (short) 100);
        long long17 = frequency11.getCumFreq((long) (byte) -1);
        double double18 = frequency0.getPct((java.lang.Object) long17);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor19 = frequency0.valuesIterator();
        long long21 = frequency0.getCumFreq((java.lang.Object) (byte) -1);
        double double23 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double25 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \na\t1\t100%\t100%\n");
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertNotNull(wildcardComparableItor19);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue(Double.isNaN(double25));
    }

    @Test
    public void test1517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1517");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getPct((java.lang.Object) (byte) -1);
        double double4 = frequency0.getPct(1);
        double double6 = frequency0.getCumPct((int) '4');
        double double8 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        java.lang.Object obj9 = null;
        long long10 = frequency0.getCumFreq(obj9);
        java.lang.Object obj11 = null;
        double double12 = frequency0.getPct(obj11);
        long long14 = frequency0.getCumFreq(1);
        double double16 = frequency0.getPct((int) (short) 10);
        java.lang.String str17 = frequency0.toString();
        java.lang.Class<?> wildcardClass18 = frequency0.getClass();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str17, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test1518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1518");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double4 = frequency0.getCumPct((long) (short) 100);
        long long6 = frequency0.getCumFreq('#');
        frequency0.addValue((java.lang.Integer) 0);
        double double10 = frequency0.getPct((int) (byte) 10);
        frequency0.clear();
        double double13 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n0\t1\t100%\t100%\n");
        frequency0.addValue(1);
        double double17 = frequency0.getCumPct((int) (short) 0);
        long long19 = frequency0.getCount(0);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
    }

    @Test
    public void test1519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1519");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getPct((java.lang.Object) (byte) -1);
        frequency0.addValue((long) (short) 100);
        long long6 = frequency0.getCount('#');
        frequency0.addValue((-1L));
        org.apache.commons.math.stat.Frequency frequency9 = new org.apache.commons.math.stat.Frequency();
        double double11 = frequency9.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double13 = frequency9.getCumPct((long) (short) 100);
        long long15 = frequency9.getCumFreq('#');
        org.apache.commons.math.stat.Frequency frequency16 = new org.apache.commons.math.stat.Frequency();
        double double18 = frequency16.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double20 = frequency16.getCumPct((long) (short) 100);
        long long22 = frequency16.getCumFreq('#');
        boolean boolean23 = frequency9.equals((java.lang.Object) long22);
        double double25 = frequency9.getCumPct((java.lang.Comparable<java.lang.String>) "");
        org.apache.commons.math.stat.Frequency frequency26 = new org.apache.commons.math.stat.Frequency();
        double double28 = frequency26.getPct((java.lang.Object) (byte) -1);
        double double30 = frequency26.getPct(1);
        double double32 = frequency26.getCumPct((int) '4');
        double double34 = frequency26.getPct((long) (byte) 10);
        long long35 = frequency9.getCumFreq((java.lang.Object) (byte) 10);
        long long37 = frequency9.getCumFreq((int) ' ');
        double double39 = frequency9.getPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n-1\t1\t100%\t100%\n");
        double double41 = frequency9.getPct((int) '4');
        java.lang.Class<?> wildcardClass42 = frequency9.getClass();
        // The following exception was thrown during execution in test generation
        try {
            double double43 = frequency0.getPct((java.lang.Object) frequency9);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: org.apache.commons.math.stat.Frequency cannot be cast to java.lang.Comparable");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertNotNull(wildcardClass42);
    }

    @Test
    public void test1520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1520");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double4 = frequency0.getCumPct((long) (short) 100);
        java.lang.String str5 = frequency0.toString();
        frequency0.addValue((java.lang.Integer) 0);
        double double9 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n#\t1\t100%\t100%\n");
        frequency0.addValue((int) (byte) 0);
        org.apache.commons.math.stat.Frequency frequency12 = new org.apache.commons.math.stat.Frequency();
        double double14 = frequency12.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double16 = frequency12.getCumPct((long) (short) 100);
        long long18 = frequency12.getCumFreq('#');
        double double20 = frequency12.getCumPct('4');
        double double22 = frequency12.getPct((long) 0);
        long long23 = frequency0.getCount((java.lang.Object) 0);
        long long25 = frequency0.getCumFreq((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n32\t1\t100%\t100%\n");
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str5, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 2L + "'", long23 == 2L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
    }

    @Test
    public void test1521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1521");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        java.lang.String str3 = frequency0.toString();
        long long5 = frequency0.getCumFreq(0L);
        long long7 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \na\t1\t100%\t100%\n");
        long long9 = frequency0.getCount(' ');
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str3, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
    }

    @Test
    public void test1522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1522");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        java.lang.String str3 = frequency0.toString();
        java.lang.Object obj4 = null;
        double double5 = frequency0.getCumPct(obj4);
        double double7 = frequency0.getCumPct('a');
        double double9 = frequency0.getCumPct((int) (byte) 100);
        long long11 = frequency0.getCount(0L);
        double double13 = frequency0.getCumPct((long) (short) -1);
        org.apache.commons.math.stat.Frequency frequency14 = new org.apache.commons.math.stat.Frequency();
        double double16 = frequency14.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double18 = frequency14.getCumPct((java.lang.Comparable<java.lang.String>) "");
        double double20 = frequency14.getPct((int) 'a');
        frequency14.addValue((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        long long24 = frequency14.getCount((int) '4');
        long long26 = frequency14.getCumFreq((long) ' ');
        double double27 = frequency0.getCumPct((java.lang.Object) ' ');
        org.apache.commons.math.stat.Frequency frequency28 = new org.apache.commons.math.stat.Frequency();
        double double30 = frequency28.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double32 = frequency28.getCumPct((long) (short) 100);
        long long34 = frequency28.getCumFreq('#');
        frequency28.addValue((java.lang.Integer) 0);
        double double38 = frequency28.getPct((int) (byte) 10);
        long long40 = frequency28.getCumFreq('#');
        frequency28.addValue((java.lang.Integer) 10);
        double double44 = frequency28.getCumPct('a');
        long long45 = frequency0.getCumFreq((java.lang.Object) 'a');
        double double47 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        long long49 = frequency0.getCount((-1L));
        frequency0.addValue(1L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str3, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.0d + "'", double44 == 0.0d);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
    }

    @Test
    public void test1523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1523");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double4 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "");
        double double6 = frequency0.getPct((int) 'a');
        long long8 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        double double10 = frequency0.getCumPct('a');
        org.apache.commons.math.stat.Frequency frequency11 = new org.apache.commons.math.stat.Frequency();
        double double13 = frequency11.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double15 = frequency11.getCumPct((long) (short) 100);
        long long17 = frequency11.getCumFreq((long) (byte) -1);
        double double18 = frequency0.getPct((java.lang.Object) long17);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor19 = frequency0.valuesIterator();
        long long21 = frequency0.getCount(100);
        long long23 = frequency0.getCumFreq(0L);
        double double25 = frequency0.getCumPct('4');
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertNotNull(wildcardComparableItor19);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double25));
    }

    @Test
    public void test1524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1524");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getPct((java.lang.Object) (byte) -1);
        double double4 = frequency0.getPct(1);
        double double6 = frequency0.getCumPct((int) '4');
        frequency0.addValue((long) '#');
        double double10 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        double double12 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "");
        long long14 = frequency0.getCount('a');
        long long16 = frequency0.getCumFreq((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \na\t1\t100%\t100%\n");
        double double18 = frequency0.getPct('4');
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
    }

    @Test
    public void test1525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1525");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        long long4 = frequency0.getCount((java.lang.Object) 1L);
        double double6 = frequency0.getCumPct(1);
        double double8 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        long long10 = frequency0.getCount('a');
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor11 = frequency0.valuesIterator();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(wildcardComparableItor11);
    }

    @Test
    public void test1526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1526");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        org.apache.commons.math.stat.Frequency frequency3 = new org.apache.commons.math.stat.Frequency();
        double double5 = frequency3.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double7 = frequency3.getCumPct((java.lang.Comparable<java.lang.String>) "");
        double double9 = frequency3.getPct((int) 'a');
        long long11 = frequency3.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        double double13 = frequency3.getCumPct('a');
        long long15 = frequency3.getCumFreq((int) '#');
        java.lang.String str16 = frequency3.toString();
        boolean boolean17 = frequency0.equals((java.lang.Object) str16);
        long long19 = frequency0.getCount(' ');
        double double21 = frequency0.getPct('4');
        frequency0.addValue(100);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str16, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
    }

    @Test
    public void test1527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1527");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double4 = frequency0.getCumPct((long) (short) 100);
        java.lang.Object obj5 = null;
        boolean boolean6 = frequency0.equals(obj5);
        org.apache.commons.math.stat.Frequency frequency7 = new org.apache.commons.math.stat.Frequency();
        double double9 = frequency7.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        long long11 = frequency7.getCount((java.lang.Object) 1L);
        long long13 = frequency7.getCumFreq('4');
        long long15 = frequency7.getCumFreq((java.lang.Object) true);
        long long17 = frequency7.getCount((long) (short) 100);
        double double19 = frequency7.getCumPct('a');
        frequency7.clear();
        long long22 = frequency7.getCount((int) (byte) 100);
        long long23 = frequency0.getCumFreq((java.lang.Object) long22);
        double double25 = frequency0.getCumPct(10L);
        double double27 = frequency0.getPct((long) 1);
        frequency0.clear();
        frequency0.clear();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue(Double.isNaN(double27));
    }

    @Test
    public void test1528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1528");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        long long4 = frequency0.getCount((java.lang.Object) 1L);
        long long6 = frequency0.getCumFreq('4');
        long long8 = frequency0.getCumFreq((java.lang.Object) true);
        long long10 = frequency0.getCount((long) (short) 100);
        double double12 = frequency0.getCumPct('a');
        frequency0.clear();
        long long15 = frequency0.getCount((int) (byte) 100);
        org.apache.commons.math.stat.Frequency frequency16 = new org.apache.commons.math.stat.Frequency();
        double double18 = frequency16.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double20 = frequency16.getCumPct((long) (short) 100);
        long long22 = frequency16.getCumFreq('#');
        frequency16.addValue((java.lang.Integer) 0);
        double double26 = frequency16.getPct((int) (byte) 10);
        long long28 = frequency16.getCumFreq('#');
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor29 = frequency16.valuesIterator();
        // The following exception was thrown during execution in test generation
        try {
            long long30 = frequency0.getCumFreq((java.lang.Object) frequency16);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: org.apache.commons.math.stat.Frequency cannot be cast to java.lang.Comparable");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.0d + "'", double26 == 0.0d);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertNotNull(wildcardComparableItor29);
    }

    @Test
    public void test1529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1529");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getPct((java.lang.Object) (byte) -1);
        frequency0.addValue((long) (short) 100);
        double double6 = frequency0.getPct((int) (byte) 0);
        long long8 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n1\t1\t100%\t100%\n");
        long long10 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \na\t1\t100%\t100%\n");
        double double12 = frequency0.getPct(' ');
        long long14 = frequency0.getCumFreq('a');
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
    }

    @Test
    public void test1530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1530");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency();
        double double3 = frequency1.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double5 = frequency1.getCumPct((java.lang.Comparable<java.lang.String>) "");
        double double6 = frequency0.getCumPct((java.lang.Object) "");
        org.apache.commons.math.stat.Frequency frequency7 = new org.apache.commons.math.stat.Frequency();
        double double9 = frequency7.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double11 = frequency7.getCumPct((java.lang.Comparable<java.lang.String>) "");
        double double13 = frequency7.getPct((int) 'a');
        long long15 = frequency7.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        double double17 = frequency7.getCumPct('a');
        long long19 = frequency7.getCumFreq((int) '#');
        double double21 = frequency7.getCumPct((long) (short) 10);
        long long23 = frequency7.getCumFreq('4');
        org.apache.commons.math.stat.Frequency frequency24 = new org.apache.commons.math.stat.Frequency();
        double double26 = frequency24.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double28 = frequency24.getCumPct((long) (short) 100);
        double double30 = frequency24.getCumPct((java.lang.Object) 0);
        boolean boolean31 = frequency7.equals((java.lang.Object) double30);
        long long33 = frequency7.getCount('4');
        frequency7.addValue((java.lang.Integer) 10);
        double double37 = frequency7.getPct(0);
        double double38 = frequency0.getCumPct((java.lang.Object) 0);
        long long40 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n#\t1\t100%\t100%\n");
        long long42 = frequency0.getCount(' ');
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
    }

    @Test
    public void test1531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1531");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        frequency0.addValue((-1));
        double double6 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \na\t1\t100%\t100%\n");
        long long8 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "");
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
    }

    @Test
    public void test1532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1532");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        java.lang.String str3 = frequency0.toString();
        java.lang.Object obj4 = null;
        double double5 = frequency0.getCumPct(obj4);
        double double7 = frequency0.getCumPct('a');
        double double9 = frequency0.getCumPct((int) (byte) 100);
        long long11 = frequency0.getCount(0L);
        double double13 = frequency0.getCumPct((long) (short) -1);
        long long14 = frequency0.getSumFreq();
        frequency0.addValue((int) (byte) 100);
        frequency0.addValue((java.lang.Integer) 0);
        java.lang.String str19 = frequency0.toString();
        double double21 = frequency0.getPct((long) (short) 10);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str3, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n0\t1\t50%\t50%\n100\t1\t50%\t100%\n" + "'", str19, "Value \t Freq. \t Pct. \t Cum Pct. \n0\t1\t50%\t50%\n100\t1\t50%\t100%\n");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
    }

    @Test
    public void test1533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1533");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getPct((java.lang.Object) (byte) -1);
        double double4 = frequency0.getPct(1);
        double double6 = frequency0.getCumPct((int) '4');
        frequency0.addValue((long) '#');
        double double10 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        double double12 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "");
        java.lang.String str13 = frequency0.toString();
        frequency0.addValue((java.lang.Integer) 0);
        frequency0.addValue((int) (byte) 1);
        long long19 = frequency0.getCumFreq(' ');
        long long21 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n-1\t1\t100%\t100%\n");
        frequency0.addValue((int) (short) -1);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n35\t1\t100%\t100%\n" + "'", str13, "Value \t Freq. \t Pct. \t Cum Pct. \n35\t1\t100%\t100%\n");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
    }

    @Test
    public void test1534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1534");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        long long4 = frequency0.getCount((long) (short) 100);
        frequency0.clear();
        long long7 = frequency0.getCount((int) (short) 0);
        frequency0.addValue((java.lang.Comparable<java.lang.String>) "hi!");
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor10 = frequency0.valuesIterator();
        double double12 = frequency0.getCumPct((long) '4');
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(wildcardComparableItor10);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
    }

    @Test
    public void test1535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1535");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        long long4 = frequency0.getCount((java.lang.Object) 1L);
        long long6 = frequency0.getCumFreq('4');
        long long8 = frequency0.getCumFreq((java.lang.Object) true);
        double double10 = frequency0.getCumPct(' ');
        long long12 = frequency0.getCumFreq((int) '#');
        org.apache.commons.math.stat.Frequency frequency13 = new org.apache.commons.math.stat.Frequency();
        double double15 = frequency13.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double17 = frequency13.getCumPct((java.lang.Comparable<java.lang.String>) "");
        double double19 = frequency13.getPct((int) 'a');
        long long21 = frequency13.getCount((long) (byte) 1);
        boolean boolean22 = frequency0.equals((java.lang.Object) frequency13);
        long long24 = frequency13.getCumFreq((int) ' ');
        frequency13.clear();
        frequency13.addValue('4');
        double double29 = frequency13.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double31 = frequency13.getPct((int) (byte) -1);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d);
    }

    @Test
    public void test1536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1536");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getPct((java.lang.Object) (byte) -1);
        frequency0.addValue((long) (short) 100);
        frequency0.addValue((long) 0);
        long long8 = frequency0.getCount('a');
        long long10 = frequency0.getCumFreq((long) (short) -1);
        double double12 = frequency0.getCumPct('#');
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
    }

    @Test
    public void test1537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1537");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getPct((java.lang.Object) (byte) -1);
        double double4 = frequency0.getPct(1);
        double double6 = frequency0.getCumPct((int) '4');
        frequency0.addValue((long) '#');
        double double10 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        long long11 = frequency0.getSumFreq();
        double double13 = frequency0.getPct((int) (short) 100);
        double double15 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n35\t1\t50%\t50%\n100\t1\t50%\t100%\n");
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1L + "'", long11 == 1L);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
    }

    @Test
    public void test1538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1538");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        long long4 = frequency0.getCount((long) (short) 100);
        double double6 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "");
        long long8 = frequency0.getCount(0L);
        frequency0.addValue(1L);
        double double12 = frequency0.getCumPct((long) (byte) -1);
        // The following exception was thrown during execution in test generation
        try {
            frequency0.addValue('4');
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
    }

    @Test
    public void test1539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1539");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double4 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "");
        double double6 = frequency0.getPct((int) 'a');
        frequency0.addValue((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor9 = frequency0.valuesIterator();
        org.apache.commons.math.stat.Frequency frequency10 = new org.apache.commons.math.stat.Frequency();
        boolean boolean11 = frequency0.equals((java.lang.Object) frequency10);
        org.apache.commons.math.stat.Frequency frequency12 = new org.apache.commons.math.stat.Frequency();
        double double14 = frequency12.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        long long16 = frequency12.getCount((java.lang.Object) 1L);
        double double18 = frequency12.getCumPct(1);
        long long19 = frequency10.getCount((java.lang.Object) 1);
        frequency10.addValue(2L);
        org.apache.commons.math.stat.Frequency frequency22 = new org.apache.commons.math.stat.Frequency();
        double double24 = frequency22.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double26 = frequency22.getCumPct((java.lang.Comparable<java.lang.String>) "");
        double double28 = frequency22.getPct((int) 'a');
        long long30 = frequency22.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        double double32 = frequency22.getCumPct('a');
        org.apache.commons.math.stat.Frequency frequency33 = new org.apache.commons.math.stat.Frequency();
        double double35 = frequency33.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double37 = frequency33.getCumPct((long) (short) 100);
        long long39 = frequency33.getCumFreq((long) (byte) -1);
        double double40 = frequency22.getPct((java.lang.Object) long39);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor41 = frequency22.valuesIterator();
        long long43 = frequency22.getCumFreq((java.lang.Object) (byte) -1);
        double double45 = frequency22.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double46 = frequency10.getPct((java.lang.Object) "hi!");
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertNotNull(wildcardComparableItor9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertNotNull(wildcardComparableItor41);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.0d + "'", double46 == 0.0d);
    }

    @Test
    public void test1540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1540");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        java.lang.String str3 = frequency0.toString();
        frequency0.clear();
        long long6 = frequency0.getCumFreq((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \na\t1\t100%\t100%\n");
        long long8 = frequency0.getCount(100);
        frequency0.addValue((int) (byte) 100);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str3, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
    }

    @Test
    public void test1541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1541");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double4 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "");
        double double6 = frequency0.getPct((int) 'a');
        long long8 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        double double10 = frequency0.getCumPct('a');
        org.apache.commons.math.stat.Frequency frequency11 = new org.apache.commons.math.stat.Frequency();
        double double13 = frequency11.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double15 = frequency11.getCumPct((long) (short) 100);
        long long17 = frequency11.getCumFreq((long) (byte) -1);
        double double18 = frequency0.getPct((java.lang.Object) long17);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor19 = frequency0.valuesIterator();
        long long21 = frequency0.getCount(' ');
        long long23 = frequency0.getCount((long) (-1));
        double double25 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n35\t1\t100%\t100%\n");
        double double27 = frequency0.getPct((long) (short) -1);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertNotNull(wildcardComparableItor19);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue(Double.isNaN(double27));
    }

    @Test
    public void test1542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1542");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency();
        double double3 = frequency1.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double5 = frequency1.getCumPct((java.lang.Comparable<java.lang.String>) "");
        double double6 = frequency0.getCumPct((java.lang.Object) "");
        double double8 = frequency0.getPct((-1L));
        org.apache.commons.math.stat.Frequency frequency9 = new org.apache.commons.math.stat.Frequency();
        double double11 = frequency9.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        long long13 = frequency9.getCount((java.lang.Object) 1L);
        double double15 = frequency9.getCumPct(1);
        double double17 = frequency9.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        long long19 = frequency9.getCount('a');
        org.apache.commons.math.stat.Frequency frequency20 = new org.apache.commons.math.stat.Frequency();
        double double22 = frequency20.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        java.lang.String str23 = frequency20.toString();
        java.lang.Object obj24 = null;
        double double25 = frequency20.getCumPct(obj24);
        double double27 = frequency20.getCumPct('a');
        double double29 = frequency20.getCumPct((int) (byte) 100);
        frequency20.addValue((java.lang.Integer) 0);
        frequency9.addValue((java.lang.Object) 0);
        long long34 = frequency9.getCumFreq((long) (short) 1);
        double double35 = frequency0.getPct((java.lang.Object) (short) 1);
        long long37 = frequency0.getCount(1);
        long long39 = frequency0.getCount((int) (short) 10);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str23, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 1L + "'", long34 == 1L);
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
    }

    @Test
    public void test1543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1543");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        long long4 = frequency0.getCount((long) (short) 100);
        frequency0.addValue((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n35\t1\t100%\t100%\n");
        double double8 = frequency0.getPct((long) (byte) 1);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
    }

    @Test
    public void test1544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1544");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getPct((java.lang.Object) (byte) -1);
        frequency0.addValue((long) (short) 100);
        frequency0.addValue((long) 0);
        long long8 = frequency0.getCount('a');
        double double10 = frequency0.getCumPct((int) (short) 1);
        frequency0.addValue((java.lang.Integer) (-1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.5d + "'", double10 == 0.5d);
    }

    @Test
    public void test1545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1545");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        frequency0.addValue((int) (short) 100);
        double double6 = frequency0.getCumPct((int) (short) -1);
        long long8 = frequency0.getCumFreq((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n#\t1\t100%\t100%\n");
        double double10 = frequency0.getPct((int) (byte) -1);
        frequency0.addValue(1L);
        double double14 = frequency0.getCumPct((long) (short) 10);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.5d + "'", double14 == 0.5d);
    }

    @Test
    public void test1546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1546");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        java.lang.String str3 = frequency0.toString();
        java.lang.Object obj4 = null;
        double double5 = frequency0.getCumPct(obj4);
        double double7 = frequency0.getCumPct('a');
        double double9 = frequency0.getCumPct((int) (byte) 0);
        org.apache.commons.math.stat.Frequency frequency10 = new org.apache.commons.math.stat.Frequency();
        double double12 = frequency10.getPct((java.lang.Object) (byte) -1);
        double double14 = frequency10.getPct(1);
        double double16 = frequency10.getCumPct((int) '4');
        frequency10.addValue((long) '#');
        double double20 = frequency10.getPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        double double21 = frequency0.getPct((java.lang.Object) double20);
        org.apache.commons.math.stat.Frequency frequency22 = new org.apache.commons.math.stat.Frequency();
        double double24 = frequency22.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        long long26 = frequency22.getCount((java.lang.Object) 1L);
        long long28 = frequency22.getCumFreq('4');
        long long30 = frequency22.getCumFreq((java.lang.Object) true);
        double double32 = frequency22.getCumPct(' ');
        long long34 = frequency22.getCumFreq((int) '#');
        org.apache.commons.math.stat.Frequency frequency35 = new org.apache.commons.math.stat.Frequency();
        double double37 = frequency35.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double39 = frequency35.getCumPct((java.lang.Comparable<java.lang.String>) "");
        double double41 = frequency35.getPct((int) 'a');
        long long43 = frequency35.getCount((long) (byte) 1);
        boolean boolean44 = frequency22.equals((java.lang.Object) frequency35);
        long long46 = frequency35.getCumFreq((int) ' ');
        frequency35.clear();
        // The following exception was thrown during execution in test generation
        try {
            frequency0.addValue((java.lang.Object) frequency35);
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str3, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
    }

    @Test
    public void test1547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1547");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        java.lang.String str1 = frequency0.toString();
        long long3 = frequency0.getCumFreq((long) '4');
        double double5 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n1\t1\t100%\t100%\n");
        org.apache.commons.math.stat.Frequency frequency6 = new org.apache.commons.math.stat.Frequency();
        double double8 = frequency6.getPct((java.lang.Object) (byte) -1);
        double double10 = frequency6.getPct(1);
        double double12 = frequency6.getCumPct((int) '4');
        frequency6.addValue((long) '#');
        double double16 = frequency6.getCumPct(' ');
        java.lang.String str17 = frequency6.toString();
        long long19 = frequency6.getCount(0);
        long long21 = frequency6.getCount((long) (byte) 10);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor22 = frequency6.valuesIterator();
        frequency6.addValue((java.lang.Integer) 10);
        long long25 = frequency0.getCumFreq((java.lang.Object) 10);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str1, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n35\t1\t100%\t100%\n" + "'", str17, "Value \t Freq. \t Pct. \t Cum Pct. \n35\t1\t100%\t100%\n");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNotNull(wildcardComparableItor22);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
    }

    @Test
    public void test1548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1548");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        long long4 = frequency0.getCount((long) (short) 100);
        frequency0.addValue('4');
        double double8 = frequency0.getCumPct('4');
        double double10 = frequency0.getPct(' ');
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0d + "'", double8 == 1.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
    }

    @Test
    public void test1549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1549");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        java.lang.String str3 = frequency0.toString();
        java.lang.Object obj4 = null;
        double double5 = frequency0.getCumPct(obj4);
        double double7 = frequency0.getCumPct('a');
        double double9 = frequency0.getCumPct((int) (byte) 100);
        long long11 = frequency0.getCount(0L);
        double double13 = frequency0.getCumPct((long) (short) -1);
        long long14 = frequency0.getSumFreq();
        frequency0.addValue((int) (byte) 100);
        long long18 = frequency0.getCumFreq((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n1\t1\t100%\t100%\n");
        org.apache.commons.math.stat.Frequency frequency19 = new org.apache.commons.math.stat.Frequency();
        double double21 = frequency19.getPct((java.lang.Object) (byte) -1);
        double double23 = frequency19.getPct(1);
        double double25 = frequency19.getCumPct((int) '4');
        frequency19.addValue((long) '#');
        long long29 = frequency19.getCount((int) ' ');
        double double31 = frequency19.getCumPct((long) (short) 0);
        long long33 = frequency19.getCumFreq((java.lang.Object) '4');
        // The following exception was thrown during execution in test generation
        try {
            long long34 = frequency0.getCumFreq((java.lang.Object) frequency19);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: org.apache.commons.math.stat.Frequency cannot be cast to java.lang.Comparable");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str3, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
    }

    @Test
    public void test1550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1550");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double4 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "");
        double double6 = frequency0.getPct((int) 'a');
        long long8 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        double double10 = frequency0.getCumPct('a');
        org.apache.commons.math.stat.Frequency frequency11 = new org.apache.commons.math.stat.Frequency();
        double double13 = frequency11.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double15 = frequency11.getCumPct((long) (short) 100);
        long long17 = frequency11.getCumFreq((long) (byte) -1);
        double double18 = frequency0.getPct((java.lang.Object) long17);
        boolean boolean20 = frequency0.equals((java.lang.Object) 10);
        java.lang.String str21 = frequency0.toString();
        long long23 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.apache.commons.math.stat.Frequency frequency24 = new org.apache.commons.math.stat.Frequency();
        double double26 = frequency24.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        java.lang.String str27 = frequency24.toString();
        java.lang.Object obj28 = null;
        double double29 = frequency24.getCumPct(obj28);
        double double31 = frequency24.getCumPct('a');
        double double33 = frequency24.getCumPct((int) (byte) 100);
        long long35 = frequency24.getCount(0L);
        double double36 = frequency0.getPct((java.lang.Object) long35);
        org.apache.commons.math.stat.Frequency frequency37 = new org.apache.commons.math.stat.Frequency();
        double double39 = frequency37.getPct((java.lang.Object) (byte) -1);
        frequency37.addValue((long) (short) 100);
        frequency37.addValue((long) 0);
        long long45 = frequency37.getCount('a');
        boolean boolean46 = frequency0.equals((java.lang.Object) frequency37);
        double double48 = frequency37.getCumPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \nNaN\t1\t100%\t100%\n");
        double double50 = frequency37.getPct((int) 'a');
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str21, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str27, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.0d + "'", double50 == 0.0d);
    }

    @Test
    public void test1551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1551");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double4 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "");
        double double6 = frequency0.getPct((int) 'a');
        long long8 = frequency0.getCount((long) (byte) 1);
        frequency0.addValue('a');
        long long12 = frequency0.getCount('#');
        frequency0.clear();
        long long15 = frequency0.getCumFreq((long) (short) -1);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
    }

    @Test
    public void test1552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1552");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        java.lang.String str1 = frequency0.toString();
        double double3 = frequency0.getPct((int) (byte) 0);
        long long5 = frequency0.getCumFreq((int) '#');
        frequency0.addValue((long) 0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str1, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
    }

    @Test
    public void test1553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1553");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        long long4 = frequency0.getCount((java.lang.Object) 1L);
        long long6 = frequency0.getCumFreq('4');
        long long8 = frequency0.getCumFreq((java.lang.Object) true);
        long long10 = frequency0.getCount((long) (short) 100);
        double double12 = frequency0.getCumPct('a');
        double double14 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n10\t1\t100%\t100%\n");
        long long16 = frequency0.getCount('a');
        org.apache.commons.math.stat.Frequency frequency17 = new org.apache.commons.math.stat.Frequency();
        double double19 = frequency17.getPct((java.lang.Object) (byte) -1);
        frequency17.addValue((long) (short) 100);
        java.lang.Object obj22 = null;
        boolean boolean23 = frequency17.equals(obj22);
        frequency17.addValue((int) (short) 1);
        long long27 = frequency17.getCumFreq((int) (byte) 1);
        double double29 = frequency17.getCumPct((int) (short) 0);
        long long31 = frequency17.getCount((long) (byte) 0);
        java.lang.String str32 = frequency17.toString();
        // The following exception was thrown during execution in test generation
        try {
            double double33 = frequency0.getCumPct((java.lang.Object) frequency17);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: org.apache.commons.math.stat.Frequency cannot be cast to java.lang.Comparable");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 1L + "'", long27 == 1L);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n1\t1\t50%\t50%\n100\t1\t50%\t100%\n" + "'", str32, "Value \t Freq. \t Pct. \t Cum Pct. \n1\t1\t50%\t50%\n100\t1\t50%\t100%\n");
    }

    @Test
    public void test1554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1554");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getPct((java.lang.Object) (byte) -1);
        double double4 = frequency0.getPct(1);
        double double6 = frequency0.getCumPct((int) '4');
        frequency0.addValue(10);
        long long10 = frequency0.getCumFreq((long) 'a');
        java.lang.String str11 = frequency0.toString();
        double double13 = frequency0.getPct(' ');
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1L + "'", long10 == 1L);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n10\t1\t100%\t100%\n" + "'", str11, "Value \t Freq. \t Pct. \t Cum Pct. \n10\t1\t100%\t100%\n");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
    }

    @Test
    public void test1555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1555");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double4 = frequency0.getCumPct((long) (short) 100);
        long long6 = frequency0.getCumFreq('#');
        org.apache.commons.math.stat.Frequency frequency7 = new org.apache.commons.math.stat.Frequency();
        double double9 = frequency7.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double11 = frequency7.getCumPct((long) (short) 100);
        long long13 = frequency7.getCumFreq('#');
        boolean boolean14 = frequency0.equals((java.lang.Object) long13);
        double double16 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "");
        org.apache.commons.math.stat.Frequency frequency17 = new org.apache.commons.math.stat.Frequency();
        double double19 = frequency17.getPct((java.lang.Object) (byte) -1);
        double double21 = frequency17.getPct(1);
        double double23 = frequency17.getCumPct((int) '4');
        double double25 = frequency17.getPct((long) (byte) 10);
        long long26 = frequency0.getCumFreq((java.lang.Object) (byte) 10);
        long long28 = frequency0.getCumFreq((int) ' ');
        double double30 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n-1\t1\t100%\t100%\n");
        long long32 = frequency0.getCumFreq((long) '4');
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
    }

    @Test
    public void test1556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1556");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        java.lang.String str3 = frequency0.toString();
        java.lang.Object obj4 = null;
        double double5 = frequency0.getCumPct(obj4);
        double double7 = frequency0.getCumPct('a');
        double double9 = frequency0.getPct(1);
        double double11 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "");
        frequency0.addValue('a');
        org.apache.commons.math.stat.Frequency frequency14 = new org.apache.commons.math.stat.Frequency();
        double double16 = frequency14.getPct((java.lang.Object) (byte) -1);
        frequency14.addValue((long) (short) 100);
        java.lang.String str19 = frequency14.toString();
        boolean boolean20 = frequency0.equals((java.lang.Object) str19);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor21 = frequency0.valuesIterator();
        double double23 = frequency0.getCumPct(0);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str3, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n100\t1\t100%\t100%\n" + "'", str19, "Value \t Freq. \t Pct. \t Cum Pct. \n100\t1\t100%\t100%\n");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(wildcardComparableItor21);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
    }

    @Test
    public void test1557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1557");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getPct((java.lang.Object) (byte) -1);
        double double4 = frequency0.getPct(1);
        double double6 = frequency0.getCumPct((int) '4');
        frequency0.addValue((long) '#');
        double double10 = frequency0.getCumPct(' ');
        java.lang.String str11 = frequency0.toString();
        long long13 = frequency0.getCount(0);
        long long15 = frequency0.getCount('#');
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor16 = frequency0.valuesIterator();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n35\t1\t100%\t100%\n" + "'", str11, "Value \t Freq. \t Pct. \t Cum Pct. \n35\t1\t100%\t100%\n");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(wildcardComparableItor16);
    }

    @Test
    public void test1558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1558");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double4 = frequency0.getCumPct((long) (short) 100);
        double double6 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n100\t1\t100%\t100%\n");
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
    }

    @Test
    public void test1559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1559");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getPct((java.lang.Object) (byte) -1);
        double double4 = frequency0.getPct(1);
        double double6 = frequency0.getCumPct((int) '4');
        double double8 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        java.lang.Object obj9 = null;
        long long10 = frequency0.getCumFreq(obj9);
        long long12 = frequency0.getCumFreq((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n-1\t1\t100%\t100%\n");
        double double14 = frequency0.getCumPct((long) (short) 1);
        long long16 = frequency0.getCount((long) (byte) -1);
        double double18 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n35\t1\t100%\t100%\n");
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
    }

    @Test
    public void test1560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1560");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double4 = frequency0.getCumPct((long) (short) 100);
        long long6 = frequency0.getCumFreq('#');
        frequency0.addValue((java.lang.Integer) 0);
        double double10 = frequency0.getCumPct((java.lang.Object) 10L);
        org.apache.commons.math.stat.Frequency frequency11 = new org.apache.commons.math.stat.Frequency();
        double double13 = frequency11.getPct((java.lang.Object) (byte) -1);
        frequency11.addValue((long) (short) 100);
        java.lang.Object obj16 = null;
        boolean boolean17 = frequency11.equals(obj16);
        frequency11.addValue((int) (short) 1);
        long long21 = frequency11.getCumFreq((int) (byte) 1);
        boolean boolean22 = frequency0.equals((java.lang.Object) frequency11);
        double double24 = frequency11.getCumPct('#');
        long long26 = frequency11.getCount('4');
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1L + "'", long21 == 1L);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
    }

    @Test
    public void test1561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1561");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double4 = frequency0.getCumPct((long) (short) 100);
        long long6 = frequency0.getCumFreq('#');
        frequency0.addValue((java.lang.Integer) 0);
        double double10 = frequency0.getPct((int) (byte) 10);
        frequency0.clear();
        double double13 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n0\t1\t100%\t100%\n");
        frequency0.addValue(1);
        java.lang.String str16 = frequency0.toString();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n1\t1\t100%\t100%\n" + "'", str16, "Value \t Freq. \t Pct. \t Cum Pct. \n1\t1\t100%\t100%\n");
    }

    @Test
    public void test1562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1562");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double4 = frequency0.getCumPct((long) (short) 100);
        long long6 = frequency0.getCumFreq('#');
        frequency0.addValue((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n100\t1\t100%\t100%\n");
        double double10 = frequency0.getCumPct((int) '4');
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
    }

    @Test
    public void test1563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1563");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getPct((java.lang.Object) (byte) -1);
        frequency0.addValue((long) (short) 100);
        long long6 = frequency0.getCount('#');
        frequency0.addValue((-1L));
        frequency0.addValue((long) (short) 0);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
    }

    @Test
    public void test1564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1564");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        java.lang.String str3 = frequency0.toString();
        java.lang.Object obj4 = null;
        double double5 = frequency0.getCumPct(obj4);
        double double7 = frequency0.getCumPct('a');
        double double9 = frequency0.getPct(1);
        double double11 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "");
        double double13 = frequency0.getPct((int) (byte) 100);
        double double15 = frequency0.getPct('a');
        org.apache.commons.math.stat.Frequency frequency16 = new org.apache.commons.math.stat.Frequency();
        double double18 = frequency16.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        java.lang.String str19 = frequency16.toString();
        java.lang.Object obj20 = null;
        double double21 = frequency16.getCumPct(obj20);
        double double23 = frequency16.getCumPct('a');
        double double25 = frequency16.getCumPct((int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            double double26 = frequency0.getPct((java.lang.Object) frequency16);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: org.apache.commons.math.stat.Frequency cannot be cast to java.lang.Comparable");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str3, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str19, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue(Double.isNaN(double25));
    }

    @Test
    public void test1565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1565");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        long long4 = frequency0.getCount((java.lang.Object) 1L);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor5 = frequency0.valuesIterator();
        frequency0.addValue('4');
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor8 = frequency0.valuesIterator();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertNotNull(wildcardComparableItor5);
        org.junit.Assert.assertNotNull(wildcardComparableItor8);
    }

    @Test
    public void test1566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1566");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double4 = frequency0.getCumPct((long) (short) 100);
        long long6 = frequency0.getCumFreq((long) (byte) -1);
        long long8 = frequency0.getCount((long) (short) -1);
        double double10 = frequency0.getCumPct(1L);
        long long11 = frequency0.getSumFreq();
        java.lang.String str12 = frequency0.toString();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str12, "Value \t Freq. \t Pct. \t Cum Pct. \n");
    }

    @Test
    public void test1567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1567");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double4 = frequency0.getCumPct((long) (short) 100);
        long long6 = frequency0.getCumFreq('#');
        org.apache.commons.math.stat.Frequency frequency7 = new org.apache.commons.math.stat.Frequency();
        double double9 = frequency7.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double11 = frequency7.getCumPct((long) (short) 100);
        long long13 = frequency7.getCumFreq('#');
        boolean boolean14 = frequency0.equals((java.lang.Object) long13);
        double double16 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "");
        org.apache.commons.math.stat.Frequency frequency17 = new org.apache.commons.math.stat.Frequency();
        double double19 = frequency17.getPct((java.lang.Object) (byte) -1);
        double double21 = frequency17.getPct(1);
        double double23 = frequency17.getCumPct((int) '4');
        double double25 = frequency17.getPct((long) (byte) 10);
        long long26 = frequency0.getCumFreq((java.lang.Object) (byte) 10);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor27 = frequency0.valuesIterator();
        org.apache.commons.math.stat.Frequency frequency28 = new org.apache.commons.math.stat.Frequency();
        double double30 = frequency28.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double32 = frequency28.getCumPct((java.lang.Comparable<java.lang.String>) "");
        double double34 = frequency28.getPct((long) 100);
        boolean boolean35 = frequency0.equals((java.lang.Object) frequency28);
        long long37 = frequency28.getCount((int) (byte) 100);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertNotNull(wildcardComparableItor27);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
    }

    @Test
    public void test1568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1568");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        long long4 = frequency0.getCount((java.lang.Object) 1L);
        long long6 = frequency0.getCumFreq('4');
        long long8 = frequency0.getCumFreq((java.lang.Object) true);
        double double10 = frequency0.getCumPct(' ');
        long long12 = frequency0.getCumFreq((int) (byte) 1);
        frequency0.addValue(' ');
        long long16 = frequency0.getCount('a');
        org.apache.commons.math.stat.Frequency frequency17 = new org.apache.commons.math.stat.Frequency();
        double double19 = frequency17.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor20 = frequency17.valuesIterator();
        double double22 = frequency17.getPct(' ');
        double double24 = frequency17.getCumPct((int) (byte) 1);
        double double26 = frequency17.getCumPct(' ');
        frequency17.addValue('a');
        double double30 = frequency17.getCumPct((long) 0);
        // The following exception was thrown during execution in test generation
        try {
            frequency0.addValue((java.lang.Object) frequency17);
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertNotNull(wildcardComparableItor20);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d);
    }

    @Test
    public void test1569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1569");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double4 = frequency0.getCumPct((long) (short) 100);
        long long6 = frequency0.getCumFreq('#');
        org.apache.commons.math.stat.Frequency frequency7 = new org.apache.commons.math.stat.Frequency();
        double double9 = frequency7.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double11 = frequency7.getCumPct((long) (short) 100);
        long long13 = frequency7.getCumFreq('#');
        boolean boolean14 = frequency0.equals((java.lang.Object) long13);
        double double16 = frequency0.getCumPct(' ');
        org.apache.commons.math.stat.Frequency frequency17 = new org.apache.commons.math.stat.Frequency();
        double double19 = frequency17.getPct((java.lang.Object) (byte) -1);
        double double21 = frequency17.getPct(1);
        double double23 = frequency17.getCumPct((int) '4');
        double double25 = frequency17.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        frequency17.addValue((java.lang.Object) 1.0d);
        long long28 = frequency0.getCount((java.lang.Object) 1.0d);
        long long30 = frequency0.getCumFreq((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n0\t1\t50%\t50%\n100\t1\t50%\t100%\n");
        frequency0.addValue((long) (short) 0);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
    }

    @Test
    public void test1570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1570");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double4 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "");
        double double6 = frequency0.getPct((int) 'a');
        long long8 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        double double10 = frequency0.getCumPct('a');
        org.apache.commons.math.stat.Frequency frequency11 = new org.apache.commons.math.stat.Frequency();
        double double13 = frequency11.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double15 = frequency11.getCumPct((long) (short) 100);
        long long17 = frequency11.getCumFreq((long) (byte) -1);
        double double18 = frequency0.getPct((java.lang.Object) long17);
        boolean boolean20 = frequency0.equals((java.lang.Object) 10);
        java.lang.String str21 = frequency0.toString();
        double double23 = frequency0.getCumPct((int) (byte) 10);
        double double25 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double27 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \na\t1\t100%\t100%\n");
        frequency0.addValue(0L);
        long long31 = frequency0.getCount('4');
        org.apache.commons.math.stat.Frequency frequency32 = new org.apache.commons.math.stat.Frequency();
        double double34 = frequency32.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        long long36 = frequency32.getCount((long) (short) 100);
        org.apache.commons.math.stat.Frequency frequency37 = new org.apache.commons.math.stat.Frequency();
        double double39 = frequency37.getPct((java.lang.Object) (byte) -1);
        double double40 = frequency32.getPct((java.lang.Object) (byte) -1);
        double double42 = frequency32.getCumPct((java.lang.Object) (-1.0f));
        long long44 = frequency32.getCount('#');
        org.apache.commons.math.stat.Frequency frequency45 = new org.apache.commons.math.stat.Frequency();
        double double47 = frequency45.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double49 = frequency45.getCumPct((long) (short) 100);
        long long51 = frequency45.getCumFreq('#');
        org.apache.commons.math.stat.Frequency frequency52 = new org.apache.commons.math.stat.Frequency();
        double double54 = frequency52.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double56 = frequency52.getCumPct((long) (short) 100);
        long long58 = frequency52.getCumFreq('#');
        boolean boolean59 = frequency45.equals((java.lang.Object) long58);
        double double61 = frequency45.getCumPct((java.lang.Comparable<java.lang.String>) "");
        org.apache.commons.math.stat.Frequency frequency62 = new org.apache.commons.math.stat.Frequency();
        double double64 = frequency62.getPct((java.lang.Object) (byte) -1);
        double double66 = frequency62.getPct(1);
        double double68 = frequency62.getCumPct((int) '4');
        double double70 = frequency62.getPct((long) (byte) 10);
        long long71 = frequency45.getCumFreq((java.lang.Object) (byte) 10);
        long long73 = frequency45.getCumFreq((int) ' ');
        double double75 = frequency45.getPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n-1\t1\t100%\t100%\n");
        double double77 = frequency45.getCumPct((long) (byte) 1);
        double double78 = frequency32.getPct((java.lang.Object) double77);
        double double79 = frequency0.getPct((java.lang.Object) double77);
        java.lang.String str80 = frequency0.toString();
        long long82 = frequency0.getCumFreq((java.lang.Comparable<java.lang.String>) "");
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str21, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertTrue(Double.isNaN(double49));
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertTrue(Double.isNaN(double56));
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 0L + "'", long58 == 0L);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double61));
        org.junit.Assert.assertTrue(Double.isNaN(double64));
        org.junit.Assert.assertTrue(Double.isNaN(double66));
        org.junit.Assert.assertTrue(Double.isNaN(double68));
        org.junit.Assert.assertTrue(Double.isNaN(double70));
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 0L + "'", long71 == 0L);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 0L + "'", long73 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double75));
        org.junit.Assert.assertTrue(Double.isNaN(double77));
        org.junit.Assert.assertTrue(Double.isNaN(double78));
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 0.0d + "'", double79 == 0.0d);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n0\t1\t100%\t100%\n" + "'", str80, "Value \t Freq. \t Pct. \t Cum Pct. \n0\t1\t100%\t100%\n");
        org.junit.Assert.assertTrue("'" + long82 + "' != '" + 0L + "'", long82 == 0L);
    }

    @Test
    public void test1571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1571");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double4 = frequency0.getCumPct((long) (short) 100);
        long long6 = frequency0.getCumFreq('#');
        frequency0.addValue((java.lang.Integer) 0);
        double double10 = frequency0.getPct((int) (byte) 10);
        frequency0.clear();
        double double13 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n0\t1\t100%\t100%\n");
        frequency0.addValue(1);
        double double17 = frequency0.getCumPct((long) ' ');
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 1.0d + "'", double17 == 1.0d);
    }

    @Test
    public void test1572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1572");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double4 = frequency0.getCumPct((long) (short) 100);
        long long6 = frequency0.getCumFreq('#');
        org.apache.commons.math.stat.Frequency frequency7 = new org.apache.commons.math.stat.Frequency();
        double double9 = frequency7.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double11 = frequency7.getCumPct((long) (short) 100);
        long long13 = frequency7.getCumFreq('#');
        boolean boolean14 = frequency0.equals((java.lang.Object) long13);
        double double16 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "");
        org.apache.commons.math.stat.Frequency frequency17 = new org.apache.commons.math.stat.Frequency();
        double double19 = frequency17.getPct((java.lang.Object) (byte) -1);
        double double21 = frequency17.getPct(1);
        double double23 = frequency17.getCumPct((int) '4');
        double double25 = frequency17.getPct((long) (byte) 10);
        long long26 = frequency0.getCumFreq((java.lang.Object) (byte) 10);
        long long28 = frequency0.getCumFreq((int) ' ');
        double double30 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n-1\t1\t100%\t100%\n");
        frequency0.clear();
        java.lang.Object obj32 = null;
        boolean boolean33 = frequency0.equals(obj32);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test1573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1573");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        long long4 = frequency0.getCount((java.lang.Object) 1L);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor5 = frequency0.valuesIterator();
        long long7 = frequency0.getCumFreq(1);
        long long9 = frequency0.getCount(10L);
        double double11 = frequency0.getPct(0);
        frequency0.clear();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertNotNull(wildcardComparableItor5);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
    }

    @Test
    public void test1574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1574");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency();
        double double3 = frequency1.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double5 = frequency1.getCumPct((java.lang.Comparable<java.lang.String>) "");
        double double6 = frequency0.getCumPct((java.lang.Object) "");
        frequency0.addValue((java.lang.Integer) 1);
        long long10 = frequency0.getCumFreq((long) (-1));
        double double12 = frequency0.getCumPct((int) (short) 10);
        double double14 = frequency0.getCumPct((int) (short) 10);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.0d + "'", double12 == 1.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1.0d + "'", double14 == 1.0d);
    }

    @Test
    public void test1575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1575");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double4 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "");
        double double6 = frequency0.getPct((int) 'a');
        long long8 = frequency0.getCount((long) (byte) 1);
        org.apache.commons.math.stat.Frequency frequency9 = new org.apache.commons.math.stat.Frequency();
        double double11 = frequency9.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double13 = frequency9.getCumPct((long) (short) 100);
        long long15 = frequency9.getCumFreq((long) (byte) -1);
        long long16 = frequency0.getCount((java.lang.Object) (byte) -1);
        frequency0.addValue((java.lang.Integer) 1);
        long long20 = frequency0.getCumFreq('4');
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor21 = frequency0.valuesIterator();
        org.apache.commons.math.stat.Frequency frequency22 = new org.apache.commons.math.stat.Frequency();
        double double24 = frequency22.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double26 = frequency22.getCumPct((long) (short) 100);
        long long28 = frequency22.getCumFreq('#');
        frequency22.addValue((java.lang.Integer) 0);
        double double32 = frequency22.getPct((int) (byte) 10);
        long long34 = frequency22.getCumFreq('#');
        double double36 = frequency22.getPct((int) (byte) -1);
        long long38 = frequency22.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n0\t1\t50%\t50%\n10\t1\t50%\t100%\n");
        long long39 = frequency0.getCount((java.lang.Object) "Value \t Freq. \t Pct. \t Cum Pct. \n0\t1\t50%\t50%\n10\t1\t50%\t100%\n");
        frequency0.addValue((long) 0);
        long long43 = frequency0.getCount(2L);
        org.apache.commons.math.stat.Frequency frequency44 = new org.apache.commons.math.stat.Frequency();
        double double46 = frequency44.getPct((java.lang.Object) (byte) -1);
        frequency44.addValue((long) (short) 100);
        frequency44.addValue((long) 0);
        long long52 = frequency44.getCumFreq(' ');
        frequency44.addValue((long) 1);
        double double55 = frequency0.getCumPct((java.lang.Object) 1);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNotNull(wildcardComparableItor21);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.0d + "'", double36 == 0.0d);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 1.0d + "'", double55 == 1.0d);
    }

    @Test
    public void test1576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1576");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double4 = frequency0.getCumPct((long) (short) 100);
        long long6 = frequency0.getCumFreq((long) (byte) -1);
        frequency0.clear();
        double double9 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n-1\t1\t100%\t100%\n");
        long long11 = frequency0.getCount('a');
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
    }

    @Test
    public void test1577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1577");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getPct((java.lang.Object) (byte) -1);
        frequency0.addValue((long) (short) 100);
        double double6 = frequency0.getPct((int) (byte) 0);
        long long8 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n1\t1\t100%\t100%\n");
        long long10 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \na\t1\t100%\t100%\n");
        org.apache.commons.math.stat.Frequency frequency11 = new org.apache.commons.math.stat.Frequency();
        org.apache.commons.math.stat.Frequency frequency12 = new org.apache.commons.math.stat.Frequency();
        double double14 = frequency12.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double16 = frequency12.getCumPct((java.lang.Comparable<java.lang.String>) "");
        double double17 = frequency11.getCumPct((java.lang.Object) "");
        double double19 = frequency11.getPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n1.0\t1\t100%\t100%\n");
        // The following exception was thrown during execution in test generation
        try {
            frequency0.addValue((java.lang.Object) double19);
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
    }

    @Test
    public void test1578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1578");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        java.lang.String str3 = frequency0.toString();
        org.apache.commons.math.stat.Frequency frequency4 = new org.apache.commons.math.stat.Frequency();
        double double6 = frequency4.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double8 = frequency4.getCumPct((long) (short) 100);
        long long10 = frequency4.getCumFreq('#');
        java.lang.Class<?> wildcardClass11 = frequency4.getClass();
        boolean boolean12 = frequency0.equals((java.lang.Object) wildcardClass11);
        org.apache.commons.math.stat.Frequency frequency13 = new org.apache.commons.math.stat.Frequency();
        double double15 = frequency13.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        java.lang.String str16 = frequency13.toString();
        long long18 = frequency13.getCumFreq(0L);
        long long19 = frequency0.getCumFreq((java.lang.Object) 0L);
        org.apache.commons.math.stat.Frequency frequency20 = new org.apache.commons.math.stat.Frequency();
        java.lang.String str21 = frequency20.toString();
        double double23 = frequency20.getCumPct('a');
        java.lang.String str24 = frequency20.toString();
        double double25 = frequency0.getPct((java.lang.Object) str24);
        double double27 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \na\t1\t100%\t100%\n");
        long long29 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n35\t1\t50%\t50%\n100\t1\t50%\t100%\n");
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str3, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str16, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str21, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str24, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
    }

    @Test
    public void test1579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1579");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getPct((java.lang.Object) (byte) -1);
        frequency0.addValue((long) (short) 100);
        java.lang.String str5 = frequency0.toString();
        org.apache.commons.math.stat.Frequency frequency6 = new org.apache.commons.math.stat.Frequency();
        double double8 = frequency6.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double10 = frequency6.getPct(0);
        double double12 = frequency6.getCumPct('a');
        long long14 = frequency6.getCount(1);
        double double16 = frequency6.getPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        boolean boolean17 = frequency0.equals((java.lang.Object) double16);
        double double19 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n2\t1\t50%\t50%\n35\t1\t50%\t100%\n");
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n100\t1\t100%\t100%\n" + "'", str5, "Value \t Freq. \t Pct. \t Cum Pct. \n100\t1\t100%\t100%\n");
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
    }

    @Test
    public void test1580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1580");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double4 = frequency0.getCumPct((long) (short) 100);
        long long6 = frequency0.getCumFreq('#');
        frequency0.addValue((java.lang.Integer) 0);
        double double10 = frequency0.getPct((int) (byte) 10);
        java.lang.String str11 = frequency0.toString();
        double double13 = frequency0.getCumPct(0L);
        long long15 = frequency0.getCumFreq(100);
        org.apache.commons.math.stat.Frequency frequency16 = new org.apache.commons.math.stat.Frequency();
        double double18 = frequency16.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double20 = frequency16.getPct(0);
        double double22 = frequency16.getCumPct('a');
        org.apache.commons.math.stat.Frequency frequency23 = new org.apache.commons.math.stat.Frequency();
        double double25 = frequency23.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        java.lang.String str26 = frequency23.toString();
        java.lang.Object obj27 = null;
        double double28 = frequency23.getCumPct(obj27);
        double double30 = frequency23.getCumPct('a');
        double double32 = frequency23.getCumPct((int) (byte) 100);
        long long34 = frequency23.getCount(0L);
        double double35 = frequency16.getPct((java.lang.Object) long34);
        long long36 = frequency0.getCumFreq((java.lang.Object) long34);
        double double38 = frequency0.getPct('#');
        double double40 = frequency0.getPct((-1));
        double double42 = frequency0.getPct('a');
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor43 = frequency0.valuesIterator();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n0\t1\t100%\t100%\n" + "'", str11, "Value \t Freq. \t Pct. \t Cum Pct. \n0\t1\t100%\t100%\n");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 1.0d + "'", double13 == 1.0d);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1L + "'", long15 == 1L);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str26, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 1L + "'", long36 == 1L);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.0d + "'", double40 == 0.0d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.0d + "'", double42 == 0.0d);
        org.junit.Assert.assertNotNull(wildcardComparableItor43);
    }

    @Test
    public void test1581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1581");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double4 = frequency0.getCumPct((long) (short) 100);
        long long6 = frequency0.getCumFreq('#');
        org.apache.commons.math.stat.Frequency frequency7 = new org.apache.commons.math.stat.Frequency();
        double double9 = frequency7.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double11 = frequency7.getCumPct((long) (short) 100);
        long long13 = frequency7.getCumFreq('#');
        boolean boolean14 = frequency0.equals((java.lang.Object) long13);
        double double16 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "");
        org.apache.commons.math.stat.Frequency frequency17 = new org.apache.commons.math.stat.Frequency();
        double double19 = frequency17.getPct((java.lang.Object) (byte) -1);
        double double21 = frequency17.getPct(1);
        double double23 = frequency17.getCumPct((int) '4');
        double double25 = frequency17.getPct((long) (byte) 10);
        long long26 = frequency0.getCumFreq((java.lang.Object) (byte) 10);
        long long28 = frequency0.getCumFreq((int) ' ');
        double double30 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n-1\t1\t100%\t100%\n");
        double double32 = frequency0.getCumPct((long) (byte) 1);
        frequency0.addValue((long) (-1));
        long long36 = frequency0.getCount((int) '#');
        org.apache.commons.math.stat.Frequency frequency37 = new org.apache.commons.math.stat.Frequency();
        double double39 = frequency37.getPct((java.lang.Object) (byte) -1);
        frequency37.addValue((long) (short) 100);
        frequency37.addValue((long) 0);
        long long45 = frequency37.getCount((int) (short) 100);
        org.apache.commons.math.stat.Frequency frequency46 = new org.apache.commons.math.stat.Frequency();
        double double48 = frequency46.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double50 = frequency46.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        long long51 = frequency37.getCumFreq((java.lang.Object) "hi!");
        org.apache.commons.math.stat.Frequency frequency52 = new org.apache.commons.math.stat.Frequency();
        double double54 = frequency52.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double56 = frequency52.getCumPct((long) (short) 100);
        long long58 = frequency52.getCumFreq('#');
        double double60 = frequency52.getCumPct((int) (byte) 0);
        frequency52.addValue((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        long long64 = frequency52.getCount('a');
        frequency52.addValue((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n100\t1\t100%\t100%\n");
        long long67 = frequency37.getCount((java.lang.Object) "Value \t Freq. \t Pct. \t Cum Pct. \n100\t1\t100%\t100%\n");
        boolean boolean68 = frequency0.equals((java.lang.Object) frequency37);
        org.apache.commons.math.stat.Frequency frequency69 = new org.apache.commons.math.stat.Frequency();
        double double71 = frequency69.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        long long73 = frequency69.getCount((java.lang.Object) 1L);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor74 = frequency69.valuesIterator();
        double double76 = frequency69.getPct((long) (short) 10);
        double double77 = frequency37.getCumPct((java.lang.Object) (short) 10);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor78 = frequency37.valuesIterator();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 1L + "'", long45 == 1L);
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertTrue(Double.isNaN(double50));
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertTrue(Double.isNaN(double56));
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 0L + "'", long58 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double60));
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 0L + "'", long64 == 0L);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 0L + "'", long67 == 0L);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double71));
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 0L + "'", long73 == 0L);
        org.junit.Assert.assertNotNull(wildcardComparableItor74);
        org.junit.Assert.assertTrue(Double.isNaN(double76));
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 0.0d + "'", double77 == 0.0d);
        org.junit.Assert.assertNotNull(wildcardComparableItor78);
    }

    @Test
    public void test1582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1582");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \nNaN\t1\t100%\t100%\n");
        double double4 = frequency0.getPct((int) 'a');
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
    }

    @Test
    public void test1583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1583");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getPct((java.lang.Object) (byte) -1);
        double double4 = frequency0.getPct(1);
        double double6 = frequency0.getCumPct((int) '4');
        frequency0.addValue((long) '#');
        long long10 = frequency0.getCount((int) ' ');
        double double12 = frequency0.getCumPct((long) (short) 0);
        long long14 = frequency0.getCumFreq((java.lang.Object) '4');
        long long16 = frequency0.getCount('#');
        frequency0.clear();
        double double19 = frequency0.getCumPct('#');
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
    }

    @Test
    public void test1584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1584");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double4 = frequency0.getCumPct((long) (short) 100);
        long long6 = frequency0.getCumFreq('#');
        double double8 = frequency0.getCumPct('4');
        double double10 = frequency0.getPct((long) 0);
        frequency0.addValue((-1L));
        double double14 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n0\t1\t50%\t50%\n1\t1\t50%\t100%\n");
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
    }

    @Test
    public void test1585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1585");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double4 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "");
        double double6 = frequency0.getPct((int) 'a');
        long long8 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        double double10 = frequency0.getCumPct('a');
        long long12 = frequency0.getCumFreq((int) '#');
        java.lang.String str13 = frequency0.toString();
        double double15 = frequency0.getPct('#');
        long long16 = frequency0.getSumFreq();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str13, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
    }

    @Test
    public void test1586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1586");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double4 = frequency0.getCumPct((long) (short) 100);
        long long6 = frequency0.getCumFreq('#');
        frequency0.addValue((java.lang.Integer) 0);
        double double10 = frequency0.getPct((int) (byte) 10);
        java.lang.String str11 = frequency0.toString();
        double double13 = frequency0.getCumPct(0L);
        org.apache.commons.math.stat.Frequency frequency14 = new org.apache.commons.math.stat.Frequency();
        java.lang.String str15 = frequency14.toString();
        double double17 = frequency14.getCumPct('a');
        frequency14.addValue((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n35\t1\t100%\t100%\n");
        boolean boolean20 = frequency0.equals((java.lang.Object) frequency14);
        double double22 = frequency0.getCumPct((long) (byte) 1);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n0\t1\t100%\t100%\n" + "'", str11, "Value \t Freq. \t Pct. \t Cum Pct. \n0\t1\t100%\t100%\n");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 1.0d + "'", double13 == 1.0d);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str15, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d);
    }

    @Test
    public void test1587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1587");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double4 = frequency0.getCumPct((long) (short) 100);
        long long6 = frequency0.getCumFreq('#');
        frequency0.addValue((java.lang.Integer) 0);
        double double10 = frequency0.getCumPct((java.lang.Object) 10L);
        long long12 = frequency0.getCount((int) (short) 1);
        double double14 = frequency0.getCumPct('#');
        org.apache.commons.math.stat.Frequency frequency15 = new org.apache.commons.math.stat.Frequency();
        double double17 = frequency15.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double19 = frequency15.getCumPct((long) (short) 100);
        long long21 = frequency15.getCumFreq('#');
        org.apache.commons.math.stat.Frequency frequency22 = new org.apache.commons.math.stat.Frequency();
        double double24 = frequency22.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double26 = frequency22.getCumPct((long) (short) 100);
        long long28 = frequency22.getCumFreq('#');
        boolean boolean29 = frequency15.equals((java.lang.Object) long28);
        org.apache.commons.math.stat.Frequency frequency30 = new org.apache.commons.math.stat.Frequency();
        double double32 = frequency30.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        long long34 = frequency30.getCount((long) (short) 100);
        org.apache.commons.math.stat.Frequency frequency35 = new org.apache.commons.math.stat.Frequency();
        double double37 = frequency35.getPct((java.lang.Object) (byte) -1);
        double double38 = frequency30.getPct((java.lang.Object) (byte) -1);
        double double40 = frequency30.getCumPct((java.lang.Object) (-1.0f));
        double double42 = frequency30.getCumPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n-1\t1\t100%\t100%\n");
        org.apache.commons.math.stat.Frequency frequency43 = new org.apache.commons.math.stat.Frequency();
        double double45 = frequency43.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        long long47 = frequency43.getCount((long) (byte) 10);
        double double49 = frequency43.getCumPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n0\t1\t50%\t50%\n10\t1\t50%\t100%\n");
        frequency30.addValue((java.lang.Object) double49);
        boolean boolean51 = frequency15.equals((java.lang.Object) double49);
        boolean boolean52 = frequency0.equals((java.lang.Object) double49);
        double double54 = frequency0.getCumPct('4');
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double49));
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d);
    }

    @Test
    public void test1588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1588");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double4 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "");
        double double6 = frequency0.getPct((int) 'a');
        frequency0.addValue((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        long long10 = frequency0.getCount((int) (byte) 1);
        frequency0.addValue((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor13 = frequency0.valuesIterator();
        long long15 = frequency0.getCount((long) (-1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(wildcardComparableItor13);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
    }

    @Test
    public void test1589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1589");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double4 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "");
        double double6 = frequency0.getPct((int) 'a');
        long long8 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        double double10 = frequency0.getCumPct('a');
        org.apache.commons.math.stat.Frequency frequency11 = new org.apache.commons.math.stat.Frequency();
        double double13 = frequency11.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double15 = frequency11.getCumPct((long) (short) 100);
        long long17 = frequency11.getCumFreq((long) (byte) -1);
        double double18 = frequency0.getPct((java.lang.Object) long17);
        boolean boolean20 = frequency0.equals((java.lang.Object) 10);
        java.lang.String str21 = frequency0.toString();
        long long23 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.apache.commons.math.stat.Frequency frequency24 = new org.apache.commons.math.stat.Frequency();
        double double26 = frequency24.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        java.lang.String str27 = frequency24.toString();
        java.lang.Object obj28 = null;
        double double29 = frequency24.getCumPct(obj28);
        double double31 = frequency24.getCumPct('a');
        double double33 = frequency24.getCumPct((int) (byte) 100);
        long long35 = frequency24.getCount(0L);
        double double36 = frequency0.getPct((java.lang.Object) long35);
        double double38 = frequency0.getPct(' ');
        org.apache.commons.math.stat.Frequency frequency39 = new org.apache.commons.math.stat.Frequency();
        double double41 = frequency39.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double43 = frequency39.getCumPct((long) (short) 100);
        long long45 = frequency39.getCumFreq('#');
        org.apache.commons.math.stat.Frequency frequency46 = new org.apache.commons.math.stat.Frequency();
        double double48 = frequency46.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double50 = frequency46.getCumPct((long) (short) 100);
        long long52 = frequency46.getCumFreq('#');
        boolean boolean53 = frequency39.equals((java.lang.Object) long52);
        org.apache.commons.math.stat.Frequency frequency54 = new org.apache.commons.math.stat.Frequency();
        double double56 = frequency54.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        long long58 = frequency54.getCount((long) (short) 100);
        org.apache.commons.math.stat.Frequency frequency59 = new org.apache.commons.math.stat.Frequency();
        double double61 = frequency59.getPct((java.lang.Object) (byte) -1);
        double double62 = frequency54.getPct((java.lang.Object) (byte) -1);
        double double64 = frequency54.getCumPct((java.lang.Object) (-1.0f));
        double double66 = frequency54.getCumPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n-1\t1\t100%\t100%\n");
        org.apache.commons.math.stat.Frequency frequency67 = new org.apache.commons.math.stat.Frequency();
        double double69 = frequency67.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        long long71 = frequency67.getCount((long) (byte) 10);
        double double73 = frequency67.getCumPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n0\t1\t50%\t50%\n10\t1\t50%\t100%\n");
        frequency54.addValue((java.lang.Object) double73);
        boolean boolean75 = frequency39.equals((java.lang.Object) double73);
        long long76 = frequency0.getCumFreq((java.lang.Object) double73);
        long long77 = frequency0.getSumFreq();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str21, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str27, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertTrue(Double.isNaN(double50));
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double56));
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 0L + "'", long58 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double61));
        org.junit.Assert.assertTrue(Double.isNaN(double62));
        org.junit.Assert.assertTrue(Double.isNaN(double64));
        org.junit.Assert.assertTrue(Double.isNaN(double66));
        org.junit.Assert.assertTrue(Double.isNaN(double69));
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 0L + "'", long71 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double73));
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + 0L + "'", long76 == 0L);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 0L + "'", long77 == 0L);
    }

    @Test
    public void test1590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1590");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double4 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "");
        double double6 = frequency0.getPct((int) 'a');
        long long8 = frequency0.getCount((long) (byte) 1);
        frequency0.addValue('a');
        long long12 = frequency0.getCount('#');
        double double14 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "");
        double double16 = frequency0.getCumPct(1);
        frequency0.clear();
        org.apache.commons.math.stat.Frequency frequency18 = new org.apache.commons.math.stat.Frequency();
        double double20 = frequency18.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double22 = frequency18.getCumPct((java.lang.Comparable<java.lang.String>) "");
        double double24 = frequency18.getPct((int) 'a');
        long long26 = frequency18.getCount((long) (byte) 1);
        frequency18.addValue('a');
        long long30 = frequency18.getCount('#');
        long long32 = frequency18.getCount(1L);
        frequency18.clear();
        long long35 = frequency18.getCount('4');
        frequency18.addValue((java.lang.Integer) 10);
        long long38 = frequency0.getCumFreq((java.lang.Object) 10);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
    }

    @Test
    public void test1591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1591");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getPct((java.lang.Object) (byte) -1);
        double double4 = frequency0.getPct(1);
        double double6 = frequency0.getCumPct((int) '4');
        frequency0.addValue((long) '#');
        double double10 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        double double12 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "");
        java.lang.String str13 = frequency0.toString();
        frequency0.addValue((java.lang.Integer) 0);
        org.apache.commons.math.stat.Frequency frequency16 = new org.apache.commons.math.stat.Frequency();
        double double18 = frequency16.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double20 = frequency16.getCumPct((long) (short) 100);
        long long22 = frequency16.getCumFreq('#');
        org.apache.commons.math.stat.Frequency frequency23 = new org.apache.commons.math.stat.Frequency();
        double double25 = frequency23.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double27 = frequency23.getCumPct((long) (short) 100);
        long long29 = frequency23.getCumFreq('#');
        boolean boolean30 = frequency16.equals((java.lang.Object) long29);
        double double32 = frequency16.getCumPct((java.lang.Comparable<java.lang.String>) "");
        org.apache.commons.math.stat.Frequency frequency33 = new org.apache.commons.math.stat.Frequency();
        double double35 = frequency33.getPct((java.lang.Object) (byte) -1);
        double double37 = frequency33.getPct(1);
        double double39 = frequency33.getCumPct((int) '4');
        double double41 = frequency33.getPct((long) (byte) 10);
        long long42 = frequency16.getCumFreq((java.lang.Object) (byte) 10);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor43 = frequency16.valuesIterator();
        org.apache.commons.math.stat.Frequency frequency44 = new org.apache.commons.math.stat.Frequency();
        double double46 = frequency44.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double48 = frequency44.getCumPct((java.lang.Comparable<java.lang.String>) "");
        double double50 = frequency44.getPct((long) 100);
        boolean boolean51 = frequency16.equals((java.lang.Object) frequency44);
        double double53 = frequency16.getCumPct((long) (-1));
        long long55 = frequency16.getCount((long) '#');
        frequency16.addValue((java.lang.Integer) 100);
        org.apache.commons.math.stat.Frequency frequency58 = new org.apache.commons.math.stat.Frequency();
        double double60 = frequency58.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double62 = frequency58.getCumPct((long) (short) 100);
        boolean boolean63 = frequency16.equals((java.lang.Object) frequency58);
        double double65 = frequency58.getPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \nValue \t Freq. \t Pct. \t Cum Pct. \n\t1\t100%\t100%\n");
        long long67 = frequency58.getCumFreq('4');
        // The following exception was thrown during execution in test generation
        try {
            frequency0.addValue((java.lang.Object) '4');
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n35\t1\t100%\t100%\n" + "'", str13, "Value \t Freq. \t Pct. \t Cum Pct. \n35\t1\t100%\t100%\n");
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertNotNull(wildcardComparableItor43);
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertTrue(Double.isNaN(double50));
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 0L + "'", long55 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double60));
        org.junit.Assert.assertTrue(Double.isNaN(double62));
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double65));
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 0L + "'", long67 == 0L);
    }

    @Test
    public void test1592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1592");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        long long4 = frequency0.getCount((long) (short) 100);
        org.apache.commons.math.stat.Frequency frequency5 = new org.apache.commons.math.stat.Frequency();
        double double7 = frequency5.getPct((java.lang.Object) (byte) -1);
        double double8 = frequency0.getPct((java.lang.Object) (byte) -1);
        double double10 = frequency0.getCumPct((java.lang.Object) (-1.0f));
        double double12 = frequency0.getPct('a');
        frequency0.clear();
        long long14 = frequency0.getSumFreq();
        frequency0.addValue(' ');
        // The following exception was thrown during execution in test generation
        try {
            frequency0.addValue((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n35\t1\t100%\t100%\n");
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
    }

    @Test
    public void test1593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1593");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double4 = frequency0.getCumPct((long) (short) 100);
        long long6 = frequency0.getCumFreq('#');
        org.apache.commons.math.stat.Frequency frequency7 = new org.apache.commons.math.stat.Frequency();
        double double9 = frequency7.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double11 = frequency7.getCumPct((long) (short) 100);
        long long13 = frequency7.getCumFreq('#');
        boolean boolean14 = frequency0.equals((java.lang.Object) long13);
        double double16 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "");
        org.apache.commons.math.stat.Frequency frequency17 = new org.apache.commons.math.stat.Frequency();
        double double19 = frequency17.getPct((java.lang.Object) (byte) -1);
        double double21 = frequency17.getPct(1);
        double double23 = frequency17.getCumPct((int) '4');
        double double25 = frequency17.getPct((long) (byte) 10);
        long long26 = frequency0.getCumFreq((java.lang.Object) (byte) 10);
        long long28 = frequency0.getCumFreq((int) ' ');
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor29 = frequency0.valuesIterator();
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor30 = frequency0.valuesIterator();
        long long32 = frequency0.getCumFreq(1L);
        java.lang.Comparable<java.lang.String> strComparable33 = null;
        long long34 = frequency0.getCumFreq(strComparable33);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertNotNull(wildcardComparableItor29);
        org.junit.Assert.assertNotNull(wildcardComparableItor30);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
    }

    @Test
    public void test1594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1594");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double4 = frequency0.getCumPct((long) (short) 100);
        long long6 = frequency0.getCumFreq('#');
        org.apache.commons.math.stat.Frequency frequency7 = new org.apache.commons.math.stat.Frequency();
        double double9 = frequency7.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double11 = frequency7.getCumPct((long) (short) 100);
        long long13 = frequency7.getCumFreq('#');
        boolean boolean14 = frequency0.equals((java.lang.Object) long13);
        double double16 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "");
        org.apache.commons.math.stat.Frequency frequency17 = new org.apache.commons.math.stat.Frequency();
        double double19 = frequency17.getPct((java.lang.Object) (byte) -1);
        double double21 = frequency17.getPct(1);
        double double23 = frequency17.getCumPct((int) '4');
        double double25 = frequency17.getPct((long) (byte) 10);
        long long26 = frequency0.getCumFreq((java.lang.Object) (byte) 10);
        double double28 = frequency0.getCumPct(' ');
        frequency0.addValue((int) (byte) 10);
        double double32 = frequency0.getPct((java.lang.Object) (-1.0f));
        org.apache.commons.math.stat.Frequency frequency33 = new org.apache.commons.math.stat.Frequency();
        double double35 = frequency33.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double37 = frequency33.getCumPct((java.lang.Comparable<java.lang.String>) "");
        double double39 = frequency33.getPct((int) 'a');
        long long41 = frequency33.getCount((long) (byte) 1);
        long long43 = frequency33.getCumFreq((long) 100);
        frequency33.addValue((int) (byte) -1);
        double double46 = frequency0.getPct((java.lang.Object) (byte) -1);
        org.apache.commons.math.stat.Frequency frequency47 = new org.apache.commons.math.stat.Frequency();
        double double49 = frequency47.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double51 = frequency47.getCumPct((long) (short) 100);
        long long53 = frequency47.getCumFreq('#');
        double double55 = frequency47.getCumPct('4');
        long long56 = frequency47.getSumFreq();
        double double58 = frequency47.getCumPct((-1L));
        org.apache.commons.math.stat.Frequency frequency59 = new org.apache.commons.math.stat.Frequency();
        double double61 = frequency59.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double63 = frequency59.getCumPct((java.lang.Comparable<java.lang.String>) "");
        double double65 = frequency59.getPct((int) 'a');
        frequency59.addValue((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        frequency59.clear();
        double double70 = frequency59.getPct('4');
        long long71 = frequency47.getCount((java.lang.Object) double70);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor72 = frequency47.valuesIterator();
        boolean boolean73 = frequency0.equals((java.lang.Object) wildcardComparableItor72);
        long long75 = frequency0.getCount((long) '#');
        double double77 = frequency0.getPct((int) (byte) 10);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.0d + "'", double46 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double49));
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double55));
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 0L + "'", long56 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double58));
        org.junit.Assert.assertTrue(Double.isNaN(double61));
        org.junit.Assert.assertTrue(Double.isNaN(double63));
        org.junit.Assert.assertTrue(Double.isNaN(double65));
        org.junit.Assert.assertTrue(Double.isNaN(double70));
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 0L + "'", long71 == 0L);
        org.junit.Assert.assertNotNull(wildcardComparableItor72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 0L + "'", long75 == 0L);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 1.0d + "'", double77 == 1.0d);
    }

    @Test
    public void test1595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1595");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double4 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "");
        double double6 = frequency0.getPct((int) 'a');
        long long8 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        double double10 = frequency0.getCumPct('a');
        org.apache.commons.math.stat.Frequency frequency11 = new org.apache.commons.math.stat.Frequency();
        double double13 = frequency11.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double15 = frequency11.getCumPct((long) (short) 100);
        long long17 = frequency11.getCumFreq((long) (byte) -1);
        double double18 = frequency0.getPct((java.lang.Object) long17);
        boolean boolean20 = frequency0.equals((java.lang.Object) 10);
        long long22 = frequency0.getCumFreq((java.lang.Comparable<java.lang.String>) "");
        org.apache.commons.math.stat.Frequency frequency23 = new org.apache.commons.math.stat.Frequency();
        double double25 = frequency23.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double27 = frequency23.getCumPct((long) (short) 100);
        long long29 = frequency23.getCumFreq('#');
        frequency23.addValue((java.lang.Integer) 0);
        double double33 = frequency23.getCumPct((java.lang.Object) 10L);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor34 = frequency23.valuesIterator();
        frequency23.clear();
        // The following exception was thrown during execution in test generation
        try {
            double double36 = frequency0.getCumPct((java.lang.Object) frequency23);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: org.apache.commons.math.stat.Frequency cannot be cast to java.lang.Comparable");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0d + "'", double33 == 1.0d);
        org.junit.Assert.assertNotNull(wildcardComparableItor34);
    }

    @Test
    public void test1596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1596");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        java.lang.String str3 = frequency0.toString();
        java.lang.Object obj4 = null;
        double double5 = frequency0.getCumPct(obj4);
        double double7 = frequency0.getCumPct('a');
        double double9 = frequency0.getCumPct((int) (byte) 100);
        long long11 = frequency0.getCount(0L);
        double double13 = frequency0.getCumPct((long) (short) -1);
        long long14 = frequency0.getSumFreq();
        frequency0.addValue((int) (byte) 100);
        org.apache.commons.math.stat.Frequency frequency17 = new org.apache.commons.math.stat.Frequency();
        double double19 = frequency17.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        long long21 = frequency17.getCount((java.lang.Object) 1L);
        long long23 = frequency17.getCumFreq('4');
        long long25 = frequency17.getCumFreq((java.lang.Object) true);
        double double27 = frequency17.getCumPct(' ');
        long long29 = frequency17.getCumFreq((int) '#');
        org.apache.commons.math.stat.Frequency frequency30 = new org.apache.commons.math.stat.Frequency();
        double double32 = frequency30.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double34 = frequency30.getCumPct((java.lang.Comparable<java.lang.String>) "");
        double double36 = frequency30.getPct((int) 'a');
        long long38 = frequency30.getCount((long) (byte) 1);
        boolean boolean39 = frequency17.equals((java.lang.Object) frequency30);
        long long41 = frequency30.getCumFreq((long) (short) 1);
        double double42 = frequency0.getPct((java.lang.Object) (short) 1);
        long long44 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n-1\t1\t100%\t100%\n");
        double double46 = frequency0.getPct((int) (byte) 10);
        double double48 = frequency0.getPct((-1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str3, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.0d + "'", double42 == 0.0d);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.0d + "'", double46 == 0.0d);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d);
    }

    @Test
    public void test1597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1597");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency();
        double double3 = frequency1.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double5 = frequency1.getCumPct((java.lang.Comparable<java.lang.String>) "");
        double double7 = frequency1.getPct((int) 'a');
        long long9 = frequency1.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        double double11 = frequency1.getCumPct('a');
        org.apache.commons.math.stat.Frequency frequency12 = new org.apache.commons.math.stat.Frequency();
        double double14 = frequency12.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double16 = frequency12.getCumPct((long) (short) 100);
        long long18 = frequency12.getCumFreq((long) (byte) -1);
        double double19 = frequency1.getPct((java.lang.Object) long18);
        boolean boolean21 = frequency1.equals((java.lang.Object) 10);
        java.lang.String str22 = frequency1.toString();
        double double24 = frequency1.getCumPct((int) (byte) 10);
        frequency0.addValue((java.lang.Object) double24);
        org.apache.commons.math.stat.Frequency frequency26 = new org.apache.commons.math.stat.Frequency();
        double double28 = frequency26.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        java.lang.String str29 = frequency26.toString();
        org.apache.commons.math.stat.Frequency frequency30 = new org.apache.commons.math.stat.Frequency();
        double double32 = frequency30.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double34 = frequency30.getCumPct((long) (short) 100);
        long long36 = frequency30.getCumFreq('#');
        java.lang.Class<?> wildcardClass37 = frequency30.getClass();
        boolean boolean38 = frequency26.equals((java.lang.Object) wildcardClass37);
        frequency26.clear();
        double double41 = frequency26.getCumPct((int) (short) 0);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor42 = frequency26.valuesIterator();
        long long44 = frequency26.getCount((long) 0);
        org.apache.commons.math.stat.Frequency frequency45 = new org.apache.commons.math.stat.Frequency();
        double double47 = frequency45.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double49 = frequency45.getCumPct((java.lang.Comparable<java.lang.String>) "");
        double double51 = frequency45.getPct((int) 'a');
        double double53 = frequency45.getCumPct(' ');
        org.apache.commons.math.stat.Frequency frequency54 = new org.apache.commons.math.stat.Frequency();
        double double56 = frequency54.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        long long58 = frequency54.getCount((java.lang.Object) 1L);
        long long60 = frequency54.getCumFreq('4');
        long long62 = frequency54.getCumFreq((java.lang.Object) true);
        long long64 = frequency54.getCount((long) (short) 100);
        double double66 = frequency54.getPct((int) (short) 100);
        boolean boolean67 = frequency45.equals((java.lang.Object) (short) 100);
        double double69 = frequency45.getCumPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n0\t1\t50%\t50%\n10\t1\t50%\t100%\n");
        long long70 = frequency26.getCount((java.lang.Object) "Value \t Freq. \t Pct. \t Cum Pct. \n0\t1\t50%\t50%\n10\t1\t50%\t100%\n");
        // The following exception was thrown during execution in test generation
        try {
            frequency0.addValue((java.lang.Object) long70);
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str22, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str29, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertNotNull(wildcardComparableItor42);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertTrue(Double.isNaN(double49));
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertTrue(Double.isNaN(double56));
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 0L + "'", long58 == 0L);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 0L + "'", long60 == 0L);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 0L + "'", long62 == 0L);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 0L + "'", long64 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double66));
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double69));
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 0L + "'", long70 == 0L);
    }

    @Test
    public void test1598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1598");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double4 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "");
        double double6 = frequency0.getPct((int) 'a');
        long long8 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        double double10 = frequency0.getCumPct('a');
        org.apache.commons.math.stat.Frequency frequency11 = new org.apache.commons.math.stat.Frequency();
        double double13 = frequency11.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double15 = frequency11.getCumPct((long) (short) 100);
        long long17 = frequency11.getCumFreq((long) (byte) -1);
        double double18 = frequency0.getPct((java.lang.Object) long17);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor19 = frequency0.valuesIterator();
        frequency0.addValue((int) (byte) 10);
        double double23 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n-1\t1\t100%\t100%\n");
        org.apache.commons.math.stat.Frequency frequency24 = new org.apache.commons.math.stat.Frequency();
        double double26 = frequency24.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        java.lang.String str27 = frequency24.toString();
        java.lang.Object obj28 = null;
        double double29 = frequency24.getCumPct(obj28);
        double double31 = frequency24.getCumPct('a');
        double double33 = frequency24.getCumPct((int) (byte) 100);
        long long35 = frequency24.getCount(0L);
        org.apache.commons.math.stat.Frequency frequency36 = new org.apache.commons.math.stat.Frequency();
        double double38 = frequency36.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        long long40 = frequency36.getCount((long) (short) 100);
        double double42 = frequency36.getPct((java.lang.Comparable<java.lang.String>) "");
        boolean boolean43 = frequency24.equals((java.lang.Object) "");
        long long45 = frequency24.getCumFreq((long) 0);
        boolean boolean46 = frequency0.equals((java.lang.Object) 0);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertNotNull(wildcardComparableItor19);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str27, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test1599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1599");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        long long4 = frequency0.getCount((java.lang.Object) 1L);
        long long6 = frequency0.getCumFreq('4');
        long long8 = frequency0.getCumFreq((java.lang.Object) true);
        org.apache.commons.math.stat.Frequency frequency9 = new org.apache.commons.math.stat.Frequency();
        double double11 = frequency9.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double13 = frequency9.getCumPct((java.lang.Comparable<java.lang.String>) "");
        double double15 = frequency9.getPct((int) 'a');
        long long17 = frequency9.getCount((long) (byte) 1);
        frequency9.addValue('a');
        double double21 = frequency9.getCumPct(' ');
        boolean boolean22 = frequency0.equals((java.lang.Object) frequency9);
        java.lang.String str23 = frequency0.toString();
        double double25 = frequency0.getCumPct((int) (short) -1);
        frequency0.addValue((long) (short) 1);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str23, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue(Double.isNaN(double25));
    }

    @Test
    public void test1600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1600");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getPct((java.lang.Object) (byte) -1);
        double double4 = frequency0.getPct(1);
        double double6 = frequency0.getCumPct((int) '4');
        frequency0.addValue((long) '#');
        double double10 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        double double12 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "");
        java.lang.String str13 = frequency0.toString();
        long long15 = frequency0.getCount(1L);
        org.apache.commons.math.stat.Frequency frequency16 = new org.apache.commons.math.stat.Frequency();
        double double18 = frequency16.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        java.lang.String str19 = frequency16.toString();
        double double20 = frequency0.getCumPct((java.lang.Object) str19);
        long long22 = frequency0.getCount((long) (short) 100);
        org.apache.commons.math.stat.Frequency frequency23 = new org.apache.commons.math.stat.Frequency();
        double double25 = frequency23.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        long long27 = frequency23.getCount((long) (short) 100);
        frequency23.clear();
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor29 = frequency23.valuesIterator();
        // The following exception was thrown during execution in test generation
        try {
            long long30 = frequency0.getCount((java.lang.Object) frequency23);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: org.apache.commons.math.stat.Frequency cannot be cast to java.lang.Comparable");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n35\t1\t100%\t100%\n" + "'", str13, "Value \t Freq. \t Pct. \t Cum Pct. \n35\t1\t100%\t100%\n");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str19, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertNotNull(wildcardComparableItor29);
    }

    @Test
    public void test1601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1601");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        java.lang.String str3 = frequency0.toString();
        java.lang.Object obj4 = null;
        double double5 = frequency0.getCumPct(obj4);
        org.apache.commons.math.stat.Frequency frequency6 = new org.apache.commons.math.stat.Frequency();
        double double8 = frequency6.getPct((java.lang.Object) (byte) -1);
        double double10 = frequency6.getPct(1);
        double double12 = frequency6.getCumPct((int) '4');
        frequency6.addValue((long) '#');
        double double16 = frequency6.getPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        long long17 = frequency6.getSumFreq();
        double double18 = frequency0.getPct((java.lang.Object) long17);
        double double20 = frequency0.getCumPct('a');
        long long22 = frequency0.getCumFreq(' ');
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str3, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1L + "'", long17 == 1L);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
    }

    @Test
    public void test1602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1602");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        java.lang.String str3 = frequency0.toString();
        java.lang.Object obj4 = null;
        double double5 = frequency0.getCumPct(obj4);
        org.apache.commons.math.stat.Frequency frequency6 = new org.apache.commons.math.stat.Frequency();
        double double8 = frequency6.getPct((java.lang.Object) (byte) -1);
        double double10 = frequency6.getPct(1);
        double double12 = frequency6.getCumPct((int) '4');
        frequency6.addValue((long) '#');
        double double16 = frequency6.getPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        long long17 = frequency6.getSumFreq();
        double double18 = frequency0.getPct((java.lang.Object) long17);
        org.apache.commons.math.stat.Frequency frequency19 = new org.apache.commons.math.stat.Frequency();
        double double21 = frequency19.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double23 = frequency19.getCumPct((long) (short) 100);
        long long25 = frequency19.getCumFreq((long) (byte) -1);
        long long27 = frequency19.getCount((long) (short) 1);
        long long29 = frequency19.getCount((java.lang.Object) 10.0d);
        frequency19.addValue((int) '4');
        long long32 = frequency0.getCount((java.lang.Object) '4');
        org.apache.commons.math.stat.Frequency frequency33 = new org.apache.commons.math.stat.Frequency();
        double double35 = frequency33.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double37 = frequency33.getCumPct((java.lang.Comparable<java.lang.String>) "");
        double double39 = frequency33.getPct((int) 'a');
        long long41 = frequency33.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        double double43 = frequency33.getCumPct('a');
        long long45 = frequency33.getCumFreq((int) '#');
        double double47 = frequency33.getCumPct((long) (short) 10);
        long long49 = frequency33.getCumFreq('4');
        org.apache.commons.math.stat.Frequency frequency50 = new org.apache.commons.math.stat.Frequency();
        double double52 = frequency50.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double54 = frequency50.getCumPct((long) (short) 100);
        double double56 = frequency50.getCumPct((java.lang.Object) 0);
        boolean boolean57 = frequency33.equals((java.lang.Object) double56);
        long long59 = frequency33.getCount('4');
        frequency33.addValue((java.lang.Integer) 10);
        long long63 = frequency33.getCumFreq((long) ' ');
        long long65 = frequency33.getCount(' ');
        double double67 = frequency33.getCumPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n100\t1\t100%\t100%\n");
        long long68 = frequency0.getCumFreq((java.lang.Object) double67);
        org.apache.commons.math.stat.Frequency frequency69 = new org.apache.commons.math.stat.Frequency();
        double double71 = frequency69.getPct((java.lang.Object) (byte) -1);
        long long73 = frequency69.getCumFreq((java.lang.Comparable<java.lang.String>) "hi!");
        long long75 = frequency69.getCumFreq('#');
        double double77 = frequency69.getCumPct((int) (short) 100);
        long long78 = frequency69.getSumFreq();
        frequency0.addValue((java.lang.Object) long78);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str3, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1L + "'", long17 == 1L);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double52));
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertTrue(Double.isNaN(double56));
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 0L + "'", long59 == 0L);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 1L + "'", long63 == 1L);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 0L + "'", long65 == 0L);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.0d + "'", double67 == 0.0d);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 0L + "'", long68 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double71));
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 0L + "'", long73 == 0L);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 0L + "'", long75 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double77));
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + 0L + "'", long78 == 0L);
    }

    @Test
    public void test1603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1603");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double4 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "");
        double double6 = frequency0.getPct((int) 'a');
        long long8 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        double double10 = frequency0.getCumPct('a');
        long long12 = frequency0.getCumFreq((int) '#');
        double double14 = frequency0.getCumPct((long) (short) 10);
        long long16 = frequency0.getCumFreq('4');
        long long18 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n100\t1\t100%\t100%\n");
        org.apache.commons.math.stat.Frequency frequency19 = new org.apache.commons.math.stat.Frequency();
        double double21 = frequency19.getPct((java.lang.Object) (byte) -1);
        long long23 = frequency19.getCumFreq((java.lang.Comparable<java.lang.String>) "hi!");
        double double24 = frequency0.getPct((java.lang.Object) "hi!");
        long long26 = frequency0.getCount((long) 100);
        double double28 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n35\t1\t100%\t100%\n");
        double double30 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n0\t1\t50%\t50%\n10\t1\t50%\t100%\n");
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue(Double.isNaN(double30));
    }

    @Test
    public void test1604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1604");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency();
        double double3 = frequency1.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double5 = frequency1.getCumPct((java.lang.Comparable<java.lang.String>) "");
        double double6 = frequency0.getCumPct((java.lang.Object) "");
        long long8 = frequency0.getCount('4');
        long long10 = frequency0.getCumFreq('4');
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor11 = frequency0.valuesIterator();
        frequency0.addValue('a');
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(wildcardComparableItor11);
    }

    @Test
    public void test1605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1605");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double4 = frequency0.getPct(0);
        double double6 = frequency0.getCumPct('a');
        org.apache.commons.math.stat.Frequency frequency7 = new org.apache.commons.math.stat.Frequency();
        double double9 = frequency7.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        java.lang.String str10 = frequency7.toString();
        java.lang.Object obj11 = null;
        double double12 = frequency7.getCumPct(obj11);
        double double14 = frequency7.getCumPct('a');
        double double16 = frequency7.getCumPct((int) (byte) 100);
        long long18 = frequency7.getCount(0L);
        double double19 = frequency0.getPct((java.lang.Object) long18);
        long long21 = frequency0.getCount(100);
        double double23 = frequency0.getPct((int) (short) 100);
        double double25 = frequency0.getPct('#');
        org.apache.commons.math.stat.Frequency frequency26 = new org.apache.commons.math.stat.Frequency();
        double double28 = frequency26.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double30 = frequency26.getCumPct((java.lang.Comparable<java.lang.String>) "");
        double double32 = frequency26.getPct((int) 'a');
        long long34 = frequency26.getCount((long) (byte) 1);
        boolean boolean35 = frequency0.equals((java.lang.Object) long34);
        long long37 = frequency0.getCount((long) 10);
        long long39 = frequency0.getCount(1);
        frequency0.clear();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str10, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
    }

    @Test
    public void test1606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1606");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        long long4 = frequency0.getCount((java.lang.Object) 1L);
        long long6 = frequency0.getCumFreq('4');
        long long8 = frequency0.getCumFreq((java.lang.Object) true);
        double double10 = frequency0.getCumPct(' ');
        long long12 = frequency0.getCumFreq((int) (byte) 1);
        frequency0.addValue((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n1.0\t1\t100%\t100%\n");
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
    }

    @Test
    public void test1607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1607");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double4 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "");
        double double6 = frequency0.getPct((int) 'a');
        long long8 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        double double10 = frequency0.getCumPct('a');
        org.apache.commons.math.stat.Frequency frequency11 = new org.apache.commons.math.stat.Frequency();
        double double13 = frequency11.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double15 = frequency11.getCumPct((long) (short) 100);
        long long17 = frequency11.getCumFreq((long) (byte) -1);
        double double18 = frequency0.getPct((java.lang.Object) long17);
        long long20 = frequency0.getCount('4');
        double double22 = frequency0.getCumPct('a');
        long long24 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
    }

    @Test
    public void test1608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1608");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getPct((java.lang.Object) (byte) -1);
        double double4 = frequency0.getPct(1);
        double double6 = frequency0.getCumPct((int) '4');
        frequency0.addValue((long) '#');
        double double10 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        double double12 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "");
        java.lang.String str13 = frequency0.toString();
        frequency0.addValue((java.lang.Integer) 0);
        frequency0.addValue((int) (byte) 1);
        long long19 = frequency0.getCumFreq(' ');
        long long21 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n-1\t1\t100%\t100%\n");
        long long23 = frequency0.getCount((int) (short) 1);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n35\t1\t100%\t100%\n" + "'", str13, "Value \t Freq. \t Pct. \t Cum Pct. \n35\t1\t100%\t100%\n");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1L + "'", long23 == 1L);
    }

    @Test
    public void test1609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1609");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        java.lang.String str3 = frequency0.toString();
        java.lang.Object obj4 = null;
        double double5 = frequency0.getCumPct(obj4);
        org.apache.commons.math.stat.Frequency frequency6 = new org.apache.commons.math.stat.Frequency();
        double double8 = frequency6.getPct((java.lang.Object) (byte) -1);
        double double10 = frequency6.getPct(1);
        double double12 = frequency6.getCumPct((int) '4');
        frequency6.addValue((long) '#');
        double double16 = frequency6.getPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        long long17 = frequency6.getSumFreq();
        double double18 = frequency0.getPct((java.lang.Object) long17);
        double double20 = frequency0.getCumPct((long) 10);
        long long22 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \nhi!\t1\t100%\t100%\n");
        org.apache.commons.math.stat.Frequency frequency23 = new org.apache.commons.math.stat.Frequency();
        org.apache.commons.math.stat.Frequency frequency24 = new org.apache.commons.math.stat.Frequency();
        double double26 = frequency24.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double28 = frequency24.getCumPct((java.lang.Comparable<java.lang.String>) "");
        double double30 = frequency24.getPct((int) 'a');
        long long32 = frequency24.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        double double34 = frequency24.getCumPct('a');
        org.apache.commons.math.stat.Frequency frequency35 = new org.apache.commons.math.stat.Frequency();
        double double37 = frequency35.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double39 = frequency35.getCumPct((long) (short) 100);
        long long41 = frequency35.getCumFreq((long) (byte) -1);
        double double42 = frequency24.getPct((java.lang.Object) long41);
        boolean boolean44 = frequency24.equals((java.lang.Object) 10);
        java.lang.String str45 = frequency24.toString();
        double double47 = frequency24.getCumPct((int) (byte) 10);
        frequency23.addValue((java.lang.Object) double47);
        // The following exception was thrown during execution in test generation
        try {
            long long49 = frequency0.getCumFreq((java.lang.Object) frequency23);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: org.apache.commons.math.stat.Frequency cannot be cast to java.lang.Comparable");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str3, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1L + "'", long17 == 1L);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str45, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue(Double.isNaN(double47));
    }

    @Test
    public void test1610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1610");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double4 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "");
        double double6 = frequency0.getPct((int) 'a');
        long long8 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        double double10 = frequency0.getCumPct('a');
        long long12 = frequency0.getCumFreq((int) '#');
        double double14 = frequency0.getCumPct((long) (short) 10);
        long long16 = frequency0.getCumFreq('4');
        long long18 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n100\t1\t100%\t100%\n");
        double double20 = frequency0.getCumPct((long) (byte) -1);
        double double22 = frequency0.getPct((int) (byte) -1);
        long long24 = frequency0.getCumFreq(0L);
        org.apache.commons.math.stat.Frequency frequency25 = new org.apache.commons.math.stat.Frequency();
        double double27 = frequency25.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double29 = frequency25.getCumPct((java.lang.Comparable<java.lang.String>) "");
        double double31 = frequency25.getPct((int) 'a');
        long long33 = frequency25.getCount((long) (byte) 1);
        long long35 = frequency25.getCumFreq((long) 100);
        org.apache.commons.math.stat.Frequency frequency36 = new org.apache.commons.math.stat.Frequency();
        double double38 = frequency36.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        long long40 = frequency36.getCount((java.lang.Object) 1L);
        long long42 = frequency36.getCumFreq('4');
        long long44 = frequency36.getCumFreq((java.lang.Object) true);
        frequency25.addValue((java.lang.Object) long44);
        org.apache.commons.math.stat.Frequency frequency46 = new org.apache.commons.math.stat.Frequency();
        double double48 = frequency46.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double50 = frequency46.getCumPct((long) (short) 100);
        long long52 = frequency46.getCumFreq('#');
        frequency46.addValue((java.lang.Integer) 0);
        double double56 = frequency46.getCumPct((java.lang.Object) 10L);
        long long58 = frequency46.getCount((int) (short) 1);
        double double60 = frequency46.getCumPct('#');
        long long62 = frequency46.getCount((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean63 = frequency25.equals((java.lang.Object) "hi!");
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor64 = frequency25.valuesIterator();
        frequency25.addValue((-1L));
        boolean boolean67 = frequency0.equals((java.lang.Object) (-1L));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertTrue(Double.isNaN(double50));
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 1.0d + "'", double56 == 1.0d);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 0L + "'", long58 == 0L);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.0d + "'", double60 == 0.0d);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 0L + "'", long62 == 0L);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(wildcardComparableItor64);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
    }

    @Test
    public void test1611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1611");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor3 = frequency0.valuesIterator();
        double double5 = frequency0.getPct(' ');
        frequency0.addValue((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertNotNull(wildcardComparableItor3);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
    }

    @Test
    public void test1612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1612");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        frequency0.addValue((-1));
        java.lang.String str5 = frequency0.toString();
        long long7 = frequency0.getCount((long) 10);
        double double9 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n1\t1\t100%\t100%\n");
        java.lang.String str10 = frequency0.toString();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n-1\t1\t100%\t100%\n" + "'", str5, "Value \t Freq. \t Pct. \t Cum Pct. \n-1\t1\t100%\t100%\n");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n-1\t1\t100%\t100%\n" + "'", str10, "Value \t Freq. \t Pct. \t Cum Pct. \n-1\t1\t100%\t100%\n");
    }

    @Test
    public void test1613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1613");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double4 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "");
        double double6 = frequency0.getCumPct((int) (byte) -1);
        long long8 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "hi!");
        double double10 = frequency0.getCumPct((int) (byte) 10);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
    }

    @Test
    public void test1614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1614");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double4 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "");
        double double6 = frequency0.getPct((int) 'a');
        long long8 = frequency0.getCount((long) (byte) 1);
        long long10 = frequency0.getCumFreq((long) 100);
        org.apache.commons.math.stat.Frequency frequency11 = new org.apache.commons.math.stat.Frequency();
        double double13 = frequency11.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        long long15 = frequency11.getCount((java.lang.Object) 1L);
        long long17 = frequency11.getCumFreq('4');
        long long19 = frequency11.getCumFreq((java.lang.Object) true);
        frequency0.addValue((java.lang.Object) long19);
        org.apache.commons.math.stat.Frequency frequency21 = new org.apache.commons.math.stat.Frequency();
        double double23 = frequency21.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double25 = frequency21.getCumPct((long) (short) 100);
        long long27 = frequency21.getCumFreq('#');
        frequency21.addValue((java.lang.Integer) 0);
        double double31 = frequency21.getCumPct((java.lang.Object) 10L);
        long long33 = frequency21.getCount((int) (short) 1);
        double double35 = frequency21.getCumPct('#');
        long long37 = frequency21.getCount((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean38 = frequency0.equals((java.lang.Object) "hi!");
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor39 = frequency0.valuesIterator();
        java.lang.String str40 = frequency0.toString();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 1.0d + "'", double31 == 1.0d);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(wildcardComparableItor39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n0\t1\t100%\t100%\n" + "'", str40, "Value \t Freq. \t Pct. \t Cum Pct. \n0\t1\t100%\t100%\n");
    }

    @Test
    public void test1615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1615");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        long long4 = frequency0.getCount((long) (short) 100);
        double double6 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "");
        long long8 = frequency0.getCount(0L);
        frequency0.addValue(1L);
        frequency0.addValue((int) 'a');
        long long14 = frequency0.getCount(2L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
    }

    @Test
    public void test1616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1616");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double4 = frequency0.getCumPct((long) (short) 100);
        long long6 = frequency0.getCumFreq('#');
        frequency0.addValue((java.lang.Integer) 0);
        double double10 = frequency0.getPct((int) (byte) 10);
        long long12 = frequency0.getCumFreq('#');
        double double14 = frequency0.getPct((int) (byte) -1);
        double double16 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n100\t1\t100%\t100%\n");
        frequency0.clear();
        java.lang.Comparable<java.lang.String> strComparable18 = null;
        double double19 = frequency0.getPct(strComparable18);
        frequency0.addValue((java.lang.Integer) 100);
        long long23 = frequency0.getCount((long) (short) 0);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
    }

    @Test
    public void test1617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1617");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getPct((java.lang.Object) (byte) -1);
        double double4 = frequency0.getPct(1);
        double double6 = frequency0.getCumPct((int) '4');
        frequency0.addValue((long) '#');
        long long10 = frequency0.getCount((long) 0);
        long long11 = frequency0.getSumFreq();
        double double13 = frequency0.getCumPct((long) 1);
        double double15 = frequency0.getCumPct('4');
        double double17 = frequency0.getPct(' ');
        long long19 = frequency0.getCount((int) 'a');
        long long21 = frequency0.getCumFreq((long) '#');
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1L + "'", long11 == 1L);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1L + "'", long21 == 1L);
    }

    @Test
    public void test1618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1618");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double4 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "");
        double double6 = frequency0.getPct((int) 'a');
        long long8 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        double double10 = frequency0.getCumPct('a');
        org.apache.commons.math.stat.Frequency frequency11 = new org.apache.commons.math.stat.Frequency();
        double double13 = frequency11.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double15 = frequency11.getCumPct((long) (short) 100);
        long long17 = frequency11.getCumFreq((long) (byte) -1);
        double double18 = frequency0.getPct((java.lang.Object) long17);
        boolean boolean20 = frequency0.equals((java.lang.Object) 10);
        java.lang.String str21 = frequency0.toString();
        double double23 = frequency0.getCumPct((int) (byte) 10);
        double double25 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double27 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \na\t1\t100%\t100%\n");
        frequency0.addValue(0L);
        long long31 = frequency0.getCount('4');
        org.apache.commons.math.stat.Frequency frequency32 = new org.apache.commons.math.stat.Frequency();
        double double34 = frequency32.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        long long36 = frequency32.getCount((long) (short) 100);
        org.apache.commons.math.stat.Frequency frequency37 = new org.apache.commons.math.stat.Frequency();
        double double39 = frequency37.getPct((java.lang.Object) (byte) -1);
        double double40 = frequency32.getPct((java.lang.Object) (byte) -1);
        double double42 = frequency32.getCumPct((java.lang.Object) (-1.0f));
        long long44 = frequency32.getCount('#');
        org.apache.commons.math.stat.Frequency frequency45 = new org.apache.commons.math.stat.Frequency();
        double double47 = frequency45.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double49 = frequency45.getCumPct((long) (short) 100);
        long long51 = frequency45.getCumFreq('#');
        org.apache.commons.math.stat.Frequency frequency52 = new org.apache.commons.math.stat.Frequency();
        double double54 = frequency52.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double56 = frequency52.getCumPct((long) (short) 100);
        long long58 = frequency52.getCumFreq('#');
        boolean boolean59 = frequency45.equals((java.lang.Object) long58);
        double double61 = frequency45.getCumPct((java.lang.Comparable<java.lang.String>) "");
        org.apache.commons.math.stat.Frequency frequency62 = new org.apache.commons.math.stat.Frequency();
        double double64 = frequency62.getPct((java.lang.Object) (byte) -1);
        double double66 = frequency62.getPct(1);
        double double68 = frequency62.getCumPct((int) '4');
        double double70 = frequency62.getPct((long) (byte) 10);
        long long71 = frequency45.getCumFreq((java.lang.Object) (byte) 10);
        long long73 = frequency45.getCumFreq((int) ' ');
        double double75 = frequency45.getPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n-1\t1\t100%\t100%\n");
        double double77 = frequency45.getCumPct((long) (byte) 1);
        double double78 = frequency32.getPct((java.lang.Object) double77);
        double double79 = frequency0.getPct((java.lang.Object) double77);
        double double81 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n1\t1\t50%\t50%\n100\t1\t50%\t100%\n");
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str21, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertTrue(Double.isNaN(double49));
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertTrue(Double.isNaN(double56));
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 0L + "'", long58 == 0L);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double61));
        org.junit.Assert.assertTrue(Double.isNaN(double64));
        org.junit.Assert.assertTrue(Double.isNaN(double66));
        org.junit.Assert.assertTrue(Double.isNaN(double68));
        org.junit.Assert.assertTrue(Double.isNaN(double70));
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 0L + "'", long71 == 0L);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 0L + "'", long73 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double75));
        org.junit.Assert.assertTrue(Double.isNaN(double77));
        org.junit.Assert.assertTrue(Double.isNaN(double78));
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 0.0d + "'", double79 == 0.0d);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 0.0d + "'", double81 == 0.0d);
    }

    @Test
    public void test1619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1619");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double4 = frequency0.getCumPct((long) (short) 100);
        long long6 = frequency0.getCumFreq('#');
        org.apache.commons.math.stat.Frequency frequency7 = new org.apache.commons.math.stat.Frequency();
        double double9 = frequency7.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double11 = frequency7.getCumPct((long) (short) 100);
        long long13 = frequency7.getCumFreq('#');
        boolean boolean14 = frequency0.equals((java.lang.Object) long13);
        double double16 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "");
        org.apache.commons.math.stat.Frequency frequency17 = new org.apache.commons.math.stat.Frequency();
        double double19 = frequency17.getPct((java.lang.Object) (byte) -1);
        double double21 = frequency17.getPct(1);
        double double23 = frequency17.getCumPct((int) '4');
        double double25 = frequency17.getPct((long) (byte) 10);
        long long26 = frequency0.getCumFreq((java.lang.Object) (byte) 10);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor27 = frequency0.valuesIterator();
        long long29 = frequency0.getCumFreq((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n100\t1\t100%\t100%\n");
        long long31 = frequency0.getCumFreq((int) ' ');
        java.lang.String str32 = frequency0.toString();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertNotNull(wildcardComparableItor27);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str32, "Value \t Freq. \t Pct. \t Cum Pct. \n");
    }

    @Test
    public void test1620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1620");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getPct((java.lang.Object) (byte) -1);
        double double4 = frequency0.getPct(1);
        double double6 = frequency0.getCumPct((int) '4');
        frequency0.addValue((long) '#');
        double double10 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        long long11 = frequency0.getSumFreq();
        double double13 = frequency0.getPct('4');
        double double15 = frequency0.getPct(' ');
        frequency0.clear();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1L + "'", long11 == 1L);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
    }

    @Test
    public void test1621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1621");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getPct((java.lang.Object) (byte) -1);
        double double4 = frequency0.getPct(1);
        double double6 = frequency0.getCumPct((int) '4');
        double double8 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        java.lang.String str9 = frequency0.toString();
        org.apache.commons.math.stat.Frequency frequency10 = new org.apache.commons.math.stat.Frequency();
        double double12 = frequency10.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double14 = frequency10.getPct(0);
        double double16 = frequency10.getCumPct('a');
        long long18 = frequency10.getCount(1);
        double double20 = frequency10.getPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor21 = frequency10.valuesIterator();
        boolean boolean22 = frequency0.equals((java.lang.Object) wildcardComparableItor21);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str9, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertNotNull(wildcardComparableItor21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test1622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1622");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getPct((java.lang.Object) (byte) -1);
        double double4 = frequency0.getPct(1);
        double double6 = frequency0.getCumPct((int) '4');
        frequency0.addValue((long) '#');
        double double10 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        double double12 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "");
        java.lang.String str13 = frequency0.toString();
        frequency0.addValue((java.lang.Integer) 0);
        frequency0.addValue((int) (byte) 1);
        long long19 = frequency0.getCumFreq(' ');
        long long21 = frequency0.getCumFreq((int) (byte) 10);
        double double23 = frequency0.getPct((java.lang.Object) 10.0f);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n35\t1\t100%\t100%\n" + "'", str13, "Value \t Freq. \t Pct. \t Cum Pct. \n35\t1\t100%\t100%\n");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 2L + "'", long21 == 2L);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
    }

    @Test
    public void test1623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1623");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double4 = frequency0.getCumPct((long) (short) 100);
        long long6 = frequency0.getCumFreq('#');
        frequency0.addValue((java.lang.Integer) 0);
        double double10 = frequency0.getPct((int) (byte) 10);
        frequency0.clear();
        double double13 = frequency0.getPct((int) (short) 0);
        long long14 = frequency0.getSumFreq();
        long long16 = frequency0.getCumFreq((java.lang.Object) 0);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
    }

    @Test
    public void test1624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1624");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor3 = frequency0.valuesIterator();
        double double5 = frequency0.getPct(' ');
        frequency0.addValue((int) (byte) 10);
        org.apache.commons.math.stat.Frequency frequency8 = new org.apache.commons.math.stat.Frequency();
        double double10 = frequency8.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        java.lang.String str11 = frequency8.toString();
        java.lang.Object obj12 = null;
        double double13 = frequency8.getCumPct(obj12);
        double double15 = frequency8.getCumPct('a');
        double double17 = frequency8.getCumPct((int) (byte) 100);
        long long19 = frequency8.getCount(0L);
        double double21 = frequency8.getCumPct((long) (short) -1);
        org.apache.commons.math.stat.Frequency frequency22 = new org.apache.commons.math.stat.Frequency();
        double double24 = frequency22.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double26 = frequency22.getCumPct((java.lang.Comparable<java.lang.String>) "");
        double double28 = frequency22.getPct((int) 'a');
        frequency22.addValue((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        long long32 = frequency22.getCount((int) '4');
        long long34 = frequency22.getCumFreq((long) ' ');
        double double35 = frequency8.getCumPct((java.lang.Object) ' ');
        org.apache.commons.math.stat.Frequency frequency36 = new org.apache.commons.math.stat.Frequency();
        double double38 = frequency36.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double40 = frequency36.getCumPct((long) (short) 100);
        long long42 = frequency36.getCumFreq('#');
        frequency36.addValue((java.lang.Integer) 0);
        double double46 = frequency36.getPct((int) (byte) 10);
        long long48 = frequency36.getCumFreq('#');
        frequency36.addValue((java.lang.Integer) 10);
        double double52 = frequency36.getCumPct('a');
        long long53 = frequency8.getCumFreq((java.lang.Object) 'a');
        double double55 = frequency8.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        long long57 = frequency8.getCount((-1L));
        org.apache.commons.math.stat.Frequency frequency58 = new org.apache.commons.math.stat.Frequency();
        double double60 = frequency58.getPct((java.lang.Object) (byte) -1);
        double double62 = frequency58.getPct(1);
        double double64 = frequency58.getCumPct((int) '4');
        frequency58.addValue((long) '#');
        double double68 = frequency58.getPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        long long69 = frequency58.getSumFreq();
        double double71 = frequency58.getPct((int) (short) 100);
        long long73 = frequency58.getCumFreq(100);
        double double74 = frequency8.getCumPct((java.lang.Object) long73);
        double double76 = frequency8.getCumPct(10L);
        // The following exception was thrown during execution in test generation
        try {
            long long77 = frequency0.getCount((java.lang.Object) frequency8);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: org.apache.commons.math.stat.Frequency cannot be cast to java.lang.Comparable");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertNotNull(wildcardComparableItor3);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str11, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.0d + "'", double46 == 0.0d);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.0d + "'", double52 == 0.0d);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double55));
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 0L + "'", long57 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double60));
        org.junit.Assert.assertTrue(Double.isNaN(double62));
        org.junit.Assert.assertTrue(Double.isNaN(double64));
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 0.0d + "'", double68 == 0.0d);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 1L + "'", long69 == 1L);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 0.0d + "'", double71 == 0.0d);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 1L + "'", long73 == 1L);
        org.junit.Assert.assertTrue(Double.isNaN(double74));
        org.junit.Assert.assertTrue(Double.isNaN(double76));
    }

    @Test
    public void test1625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1625");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double4 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "");
        double double6 = frequency0.getPct((int) 'a');
        org.apache.commons.math.stat.Frequency frequency7 = new org.apache.commons.math.stat.Frequency();
        double double9 = frequency7.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double11 = frequency7.getCumPct((java.lang.Comparable<java.lang.String>) "");
        double double13 = frequency7.getPct((int) 'a');
        frequency7.addValue((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        long long17 = frequency7.getCount((int) '4');
        long long19 = frequency7.getCumFreq((long) ' ');
        frequency0.addValue((java.lang.Object) long19);
        long long22 = frequency0.getCount((int) (short) 10);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
    }

    @Test
    public void test1626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1626");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double4 = frequency0.getCumPct((long) (short) 100);
        long long6 = frequency0.getCumFreq('#');
        frequency0.addValue((java.lang.Integer) 0);
        double double10 = frequency0.getPct((int) (byte) 10);
        java.lang.String str11 = frequency0.toString();
        double double13 = frequency0.getCumPct(0L);
        long long15 = frequency0.getCumFreq(100);
        org.apache.commons.math.stat.Frequency frequency16 = new org.apache.commons.math.stat.Frequency();
        double double18 = frequency16.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double20 = frequency16.getPct(0);
        double double22 = frequency16.getCumPct('a');
        org.apache.commons.math.stat.Frequency frequency23 = new org.apache.commons.math.stat.Frequency();
        double double25 = frequency23.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        java.lang.String str26 = frequency23.toString();
        java.lang.Object obj27 = null;
        double double28 = frequency23.getCumPct(obj27);
        double double30 = frequency23.getCumPct('a');
        double double32 = frequency23.getCumPct((int) (byte) 100);
        long long34 = frequency23.getCount(0L);
        double double35 = frequency16.getPct((java.lang.Object) long34);
        long long36 = frequency0.getCumFreq((java.lang.Object) long34);
        long long38 = frequency0.getCount((int) (short) 10);
        double double40 = frequency0.getCumPct((long) 100);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n0\t1\t100%\t100%\n" + "'", str11, "Value \t Freq. \t Pct. \t Cum Pct. \n0\t1\t100%\t100%\n");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 1.0d + "'", double13 == 1.0d);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1L + "'", long15 == 1L);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str26, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 1L + "'", long36 == 1L);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 1.0d + "'", double40 == 1.0d);
    }

    @Test
    public void test1627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1627");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double4 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "");
        double double6 = frequency0.getPct((int) 'a');
        long long8 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        double double10 = frequency0.getCumPct('a');
        org.apache.commons.math.stat.Frequency frequency11 = new org.apache.commons.math.stat.Frequency();
        double double13 = frequency11.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double15 = frequency11.getCumPct((long) (short) 100);
        long long17 = frequency11.getCumFreq((long) (byte) -1);
        double double18 = frequency0.getPct((java.lang.Object) long17);
        long long20 = frequency0.getCumFreq((int) (short) -1);
        long long22 = frequency0.getCumFreq('4');
        java.lang.String str23 = frequency0.toString();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str23, "Value \t Freq. \t Pct. \t Cum Pct. \n");
    }

    @Test
    public void test1628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1628");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        long long4 = frequency0.getCount((long) (byte) 10);
        double double6 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n0\t1\t50%\t50%\n10\t1\t50%\t100%\n");
        double double8 = frequency0.getPct('#');
        double double10 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n#\t1\t100%\t100%\n");
        double double12 = frequency0.getCumPct(1);
        org.apache.commons.math.stat.Frequency frequency13 = new org.apache.commons.math.stat.Frequency();
        double double15 = frequency13.getPct((java.lang.Object) (byte) -1);
        double double17 = frequency13.getPct(1);
        double double19 = frequency13.getCumPct((int) '4');
        double double21 = frequency13.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        frequency13.addValue((java.lang.Object) 1.0d);
        double double25 = frequency13.getPct(1);
        double double27 = frequency13.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double28 = frequency0.getPct((java.lang.Object) double27);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
    }

    @Test
    public void test1629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1629");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getPct((java.lang.Object) (byte) -1);
        double double4 = frequency0.getPct(1);
        double double6 = frequency0.getCumPct((int) '4');
        double double8 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        java.lang.String str9 = frequency0.toString();
        org.apache.commons.math.stat.Frequency frequency10 = new org.apache.commons.math.stat.Frequency();
        double double12 = frequency10.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double14 = frequency10.getCumPct((java.lang.Comparable<java.lang.String>) "");
        double double16 = frequency10.getPct((int) 'a');
        long long18 = frequency10.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        double double20 = frequency10.getCumPct('a');
        org.apache.commons.math.stat.Frequency frequency21 = new org.apache.commons.math.stat.Frequency();
        double double23 = frequency21.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double25 = frequency21.getCumPct((long) (short) 100);
        long long27 = frequency21.getCumFreq((long) (byte) -1);
        double double28 = frequency10.getPct((java.lang.Object) long27);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor29 = frequency10.valuesIterator();
        long long31 = frequency10.getCumFreq((java.lang.Object) (byte) -1);
        long long32 = frequency0.getCount((java.lang.Object) (byte) -1);
        long long34 = frequency0.getCumFreq((long) (byte) 10);
        double double36 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \na\t1\t100%\t100%\n");
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str9, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertNotNull(wildcardComparableItor29);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double36));
    }

    @Test
    public void test1630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1630");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double4 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "");
        double double6 = frequency0.getPct((int) 'a');
        long long8 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        double double10 = frequency0.getCumPct('a');
        long long12 = frequency0.getCumFreq((int) '#');
        double double14 = frequency0.getCumPct((long) (short) 10);
        long long16 = frequency0.getCumFreq('4');
        long long18 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n100\t1\t100%\t100%\n");
        double double20 = frequency0.getPct('#');
        org.apache.commons.math.stat.Frequency frequency21 = new org.apache.commons.math.stat.Frequency();
        double double23 = frequency21.getPct((java.lang.Object) (byte) -1);
        double double25 = frequency21.getPct(1);
        frequency0.addValue((java.lang.Object) 1);
        double double28 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \na\t1\t100%\t100%\n");
        double double30 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n0\t1\t50%\t50%\n10\t1\t50%\t100%\n");
        frequency0.addValue((java.lang.Integer) 10);
        frequency0.addValue((java.lang.Integer) 1);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d);
    }

    @Test
    public void test1631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1631");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double4 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "");
        double double6 = frequency0.getPct((int) 'a');
        long long8 = frequency0.getCount((long) (byte) 1);
        frequency0.addValue('a');
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor11 = frequency0.valuesIterator();
        org.apache.commons.math.stat.Frequency frequency12 = new org.apache.commons.math.stat.Frequency();
        double double14 = frequency12.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double16 = frequency12.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double17 = frequency0.getCumPct((java.lang.Object) double16);
        long long19 = frequency0.getCumFreq((long) (short) 10);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(wildcardComparableItor11);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
    }

    @Test
    public void test1632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1632");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double4 = frequency0.getCumPct((long) (short) 100);
        long long6 = frequency0.getCumFreq((long) (byte) -1);
        long long8 = frequency0.getCount((long) (short) 1);
        long long10 = frequency0.getCount((long) 10);
        long long12 = frequency0.getCount((long) 10);
        long long14 = frequency0.getCumFreq(0L);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor15 = frequency0.valuesIterator();
        frequency0.addValue((-1L));
        // The following exception was thrown during execution in test generation
        try {
            frequency0.addValue((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n100\t1\t100%\t100%\n");
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(wildcardComparableItor15);
    }

    @Test
    public void test1633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1633");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double4 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "");
        double double6 = frequency0.getPct((int) 'a');
        long long8 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        double double10 = frequency0.getCumPct('a');
        org.apache.commons.math.stat.Frequency frequency11 = new org.apache.commons.math.stat.Frequency();
        double double13 = frequency11.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double15 = frequency11.getCumPct((long) (short) 100);
        long long17 = frequency11.getCumFreq((long) (byte) -1);
        double double18 = frequency0.getPct((java.lang.Object) long17);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor19 = frequency0.valuesIterator();
        long long21 = frequency0.getCount(' ');
        frequency0.clear();
        long long24 = frequency0.getCumFreq('#');
        double double26 = frequency0.getCumPct((long) (byte) -1);
        double double28 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \nValue \t Freq. \t Pct. \t Cum Pct. \n100\t1\t100%\t100%\n\t1\t100%\t100%\n");
        long long30 = frequency0.getCumFreq('a');
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertNotNull(wildcardComparableItor19);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
    }

    @Test
    public void test1634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1634");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        java.lang.String str3 = frequency0.toString();
        java.lang.Object obj4 = null;
        double double5 = frequency0.getCumPct(obj4);
        double double7 = frequency0.getCumPct('a');
        double double9 = frequency0.getCumPct((int) (byte) 100);
        long long11 = frequency0.getCount(0L);
        frequency0.addValue((long) (byte) 0);
        long long15 = frequency0.getCumFreq((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        double double17 = frequency0.getCumPct(10L);
        long long19 = frequency0.getCount((int) (byte) 10);
        org.apache.commons.math.stat.Frequency frequency20 = new org.apache.commons.math.stat.Frequency();
        double double22 = frequency20.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        java.lang.String str23 = frequency20.toString();
        java.lang.Object obj24 = null;
        double double25 = frequency20.getCumPct(obj24);
        double double27 = frequency20.getCumPct('a');
        double double29 = frequency20.getCumPct((int) (byte) 100);
        frequency20.addValue((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        long long33 = frequency20.getCumFreq((int) (short) 10);
        long long35 = frequency20.getCumFreq((java.lang.Object) (short) 100);
        double double36 = frequency0.getCumPct((java.lang.Object) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor37 = frequency0.valuesIterator();
        frequency0.addValue((long) '4');
        long long41 = frequency0.getCount('#');
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str3, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 1.0d + "'", double17 == 1.0d);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str23, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.0d + "'", double36 == 0.0d);
        org.junit.Assert.assertNotNull(wildcardComparableItor37);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
    }

    @Test
    public void test1635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1635");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double4 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "");
        double double6 = frequency0.getPct((int) 'a');
        long long8 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        double double10 = frequency0.getCumPct('a');
        long long12 = frequency0.getCumFreq((int) '#');
        double double14 = frequency0.getCumPct((long) (short) 10);
        long long16 = frequency0.getCumFreq('4');
        long long18 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n100\t1\t100%\t100%\n");
        double double20 = frequency0.getPct('#');
        double double22 = frequency0.getPct((int) (byte) 0);
        double double24 = frequency0.getPct('4');
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue(Double.isNaN(double24));
    }

    @Test
    public void test1636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1636");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double4 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "");
        double double6 = frequency0.getPct((int) 'a');
        frequency0.addValue((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        frequency0.clear();
        double double11 = frequency0.getPct('4');
        long long13 = frequency0.getCount((int) '4');
        long long15 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n0\t1\t100%\t100%\n");
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
    }

    @Test
    public void test1637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1637");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        long long4 = frequency0.getCount((java.lang.Object) 1L);
        long long6 = frequency0.getCumFreq('4');
        long long8 = frequency0.getCumFreq((java.lang.Object) true);
        double double10 = frequency0.getCumPct(' ');
        long long12 = frequency0.getCumFreq((int) '#');
        frequency0.addValue((java.lang.Integer) 1);
        double double16 = frequency0.getCumPct((long) (byte) 0);
        double double18 = frequency0.getPct('a');
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
    }

    @Test
    public void test1638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1638");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double4 = frequency0.getCumPct((long) (short) 100);
        long long6 = frequency0.getCumFreq((long) (byte) -1);
        long long8 = frequency0.getCount((long) (short) 1);
        long long10 = frequency0.getCumFreq((int) (byte) -1);
        frequency0.addValue(0L);
        org.apache.commons.math.stat.Frequency frequency13 = new org.apache.commons.math.stat.Frequency();
        double double15 = frequency13.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double17 = frequency13.getCumPct((java.lang.Comparable<java.lang.String>) "");
        double double19 = frequency13.getPct((int) 'a');
        long long21 = frequency13.getCount((long) (byte) 1);
        long long23 = frequency13.getCumFreq((long) 100);
        org.apache.commons.math.stat.Frequency frequency24 = new org.apache.commons.math.stat.Frequency();
        double double26 = frequency24.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        long long28 = frequency24.getCount((java.lang.Object) 1L);
        long long30 = frequency24.getCumFreq('4');
        long long32 = frequency24.getCumFreq((java.lang.Object) true);
        frequency13.addValue((java.lang.Object) long32);
        frequency13.clear();
        frequency13.addValue((long) ' ');
        // The following exception was thrown during execution in test generation
        try {
            frequency0.addValue((java.lang.Object) frequency13);
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
    }

    @Test
    public void test1639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1639");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getPct((java.lang.Object) (byte) -1);
        frequency0.addValue((long) (short) 100);
        java.lang.Object obj5 = null;
        boolean boolean6 = frequency0.equals(obj5);
        long long8 = frequency0.getCount('a');
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
    }

    @Test
    public void test1640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1640");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        java.lang.String str3 = frequency0.toString();
        java.lang.Object obj4 = null;
        double double5 = frequency0.getCumPct(obj4);
        double double7 = frequency0.getCumPct('a');
        double double9 = frequency0.getCumPct((int) (byte) 100);
        long long11 = frequency0.getCount(0L);
        double double13 = frequency0.getCumPct((long) (short) -1);
        org.apache.commons.math.stat.Frequency frequency14 = new org.apache.commons.math.stat.Frequency();
        double double16 = frequency14.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double18 = frequency14.getCumPct((java.lang.Comparable<java.lang.String>) "");
        double double20 = frequency14.getPct((int) 'a');
        frequency14.addValue((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        long long24 = frequency14.getCount((int) '4');
        long long26 = frequency14.getCumFreq((long) ' ');
        double double27 = frequency0.getCumPct((java.lang.Object) ' ');
        org.apache.commons.math.stat.Frequency frequency28 = new org.apache.commons.math.stat.Frequency();
        double double30 = frequency28.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double32 = frequency28.getCumPct((long) (short) 100);
        long long34 = frequency28.getCumFreq('#');
        frequency28.addValue((java.lang.Integer) 0);
        double double38 = frequency28.getPct((int) (byte) 10);
        long long40 = frequency28.getCumFreq('#');
        frequency28.addValue((java.lang.Integer) 10);
        double double44 = frequency28.getCumPct('a');
        long long45 = frequency0.getCumFreq((java.lang.Object) 'a');
        double double47 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        long long49 = frequency0.getCount((-1L));
        org.apache.commons.math.stat.Frequency frequency50 = new org.apache.commons.math.stat.Frequency();
        double double52 = frequency50.getPct((java.lang.Object) (byte) -1);
        double double54 = frequency50.getPct(1);
        double double56 = frequency50.getCumPct((int) '4');
        frequency50.addValue((long) '#');
        double double60 = frequency50.getPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        long long61 = frequency50.getSumFreq();
        double double63 = frequency50.getPct((int) (short) 100);
        long long65 = frequency50.getCumFreq(100);
        double double66 = frequency0.getCumPct((java.lang.Object) long65);
        double double68 = frequency0.getCumPct((long) (byte) 0);
        frequency0.clear();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str3, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.0d + "'", double44 == 0.0d);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double52));
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertTrue(Double.isNaN(double56));
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.0d + "'", double60 == 0.0d);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 1L + "'", long61 == 1L);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 0.0d + "'", double63 == 0.0d);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 1L + "'", long65 == 1L);
        org.junit.Assert.assertTrue(Double.isNaN(double66));
        org.junit.Assert.assertTrue(Double.isNaN(double68));
    }

    @Test
    public void test1641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1641");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double4 = frequency0.getCumPct((long) (short) 100);
        long long6 = frequency0.getCumFreq('#');
        org.apache.commons.math.stat.Frequency frequency7 = new org.apache.commons.math.stat.Frequency();
        double double9 = frequency7.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double11 = frequency7.getCumPct((long) (short) 100);
        long long13 = frequency7.getCumFreq('#');
        boolean boolean14 = frequency0.equals((java.lang.Object) long13);
        double double16 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "");
        org.apache.commons.math.stat.Frequency frequency17 = new org.apache.commons.math.stat.Frequency();
        double double19 = frequency17.getPct((java.lang.Object) (byte) -1);
        double double21 = frequency17.getPct(1);
        double double23 = frequency17.getCumPct((int) '4');
        double double25 = frequency17.getPct((long) (byte) 10);
        long long26 = frequency0.getCumFreq((java.lang.Object) (byte) 10);
        double double28 = frequency0.getCumPct(' ');
        frequency0.addValue((int) (byte) 10);
        double double32 = frequency0.getPct((java.lang.Object) (-1.0f));
        org.apache.commons.math.stat.Frequency frequency33 = new org.apache.commons.math.stat.Frequency();
        double double35 = frequency33.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double37 = frequency33.getCumPct((java.lang.Comparable<java.lang.String>) "");
        double double39 = frequency33.getPct((int) 'a');
        long long41 = frequency33.getCount((long) (byte) 1);
        long long43 = frequency33.getCumFreq((long) 100);
        frequency33.addValue((int) (byte) -1);
        double double46 = frequency0.getPct((java.lang.Object) (byte) -1);
        org.apache.commons.math.stat.Frequency frequency47 = new org.apache.commons.math.stat.Frequency();
        double double49 = frequency47.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double51 = frequency47.getCumPct((long) (short) 100);
        long long53 = frequency47.getCumFreq('#');
        double double55 = frequency47.getCumPct('4');
        long long56 = frequency47.getSumFreq();
        double double58 = frequency47.getCumPct((-1L));
        org.apache.commons.math.stat.Frequency frequency59 = new org.apache.commons.math.stat.Frequency();
        double double61 = frequency59.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double63 = frequency59.getCumPct((java.lang.Comparable<java.lang.String>) "");
        double double65 = frequency59.getPct((int) 'a');
        frequency59.addValue((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        frequency59.clear();
        double double70 = frequency59.getPct('4');
        long long71 = frequency47.getCount((java.lang.Object) double70);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor72 = frequency47.valuesIterator();
        boolean boolean73 = frequency0.equals((java.lang.Object) wildcardComparableItor72);
        long long75 = frequency0.getCount((long) '#');
        frequency0.clear();
        java.lang.Class<?> wildcardClass77 = frequency0.getClass();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.0d + "'", double46 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double49));
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double55));
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 0L + "'", long56 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double58));
        org.junit.Assert.assertTrue(Double.isNaN(double61));
        org.junit.Assert.assertTrue(Double.isNaN(double63));
        org.junit.Assert.assertTrue(Double.isNaN(double65));
        org.junit.Assert.assertTrue(Double.isNaN(double70));
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 0L + "'", long71 == 0L);
        org.junit.Assert.assertNotNull(wildcardComparableItor72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 0L + "'", long75 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass77);
    }

    @Test
    public void test1642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1642");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency();
        double double3 = frequency1.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double5 = frequency1.getCumPct((java.lang.Comparable<java.lang.String>) "");
        double double6 = frequency0.getCumPct((java.lang.Object) "");
        long long8 = frequency0.getCount('4');
        long long10 = frequency0.getCumFreq('4');
        java.lang.String str11 = frequency0.toString();
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str11, "Value \t Freq. \t Pct. \t Cum Pct. \n");
    }

    @Test
    public void test1643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1643");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency();
        double double3 = frequency1.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double5 = frequency1.getCumPct((java.lang.Comparable<java.lang.String>) "");
        double double6 = frequency0.getCumPct((java.lang.Object) "");
        double double8 = frequency0.getPct((-1L));
        org.apache.commons.math.stat.Frequency frequency9 = new org.apache.commons.math.stat.Frequency();
        double double11 = frequency9.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        long long13 = frequency9.getCount((java.lang.Object) 1L);
        double double15 = frequency9.getCumPct(1);
        double double17 = frequency9.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        long long19 = frequency9.getCount('a');
        org.apache.commons.math.stat.Frequency frequency20 = new org.apache.commons.math.stat.Frequency();
        double double22 = frequency20.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        java.lang.String str23 = frequency20.toString();
        java.lang.Object obj24 = null;
        double double25 = frequency20.getCumPct(obj24);
        double double27 = frequency20.getCumPct('a');
        double double29 = frequency20.getCumPct((int) (byte) 100);
        frequency20.addValue((java.lang.Integer) 0);
        frequency9.addValue((java.lang.Object) 0);
        long long34 = frequency9.getCumFreq((long) (short) 1);
        double double35 = frequency0.getPct((java.lang.Object) (short) 1);
        double double37 = frequency0.getPct('a');
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str23, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 1L + "'", long34 == 1L);
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertTrue(Double.isNaN(double37));
    }

    @Test
    public void test1644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1644");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        java.lang.String str1 = frequency0.toString();
        double double3 = frequency0.getCumPct('a');
        frequency0.addValue((java.lang.Integer) (-1));
        long long7 = frequency0.getCount((int) ' ');
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str1, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
    }

    @Test
    public void test1645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1645");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double4 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "");
        double double6 = frequency0.getPct((int) 'a');
        long long8 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        double double10 = frequency0.getCumPct('a');
        org.apache.commons.math.stat.Frequency frequency11 = new org.apache.commons.math.stat.Frequency();
        double double13 = frequency11.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double15 = frequency11.getCumPct((long) (short) 100);
        long long17 = frequency11.getCumFreq((long) (byte) -1);
        double double18 = frequency0.getPct((java.lang.Object) long17);
        boolean boolean20 = frequency0.equals((java.lang.Object) 10);
        java.lang.String str21 = frequency0.toString();
        double double23 = frequency0.getCumPct((int) (byte) 10);
        double double25 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double27 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \na\t1\t100%\t100%\n");
        frequency0.addValue('#');
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str21, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue(Double.isNaN(double27));
    }

    @Test
    public void test1646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1646");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double4 = frequency0.getCumPct((long) (short) 100);
        long long6 = frequency0.getCumFreq('#');
        frequency0.addValue((java.lang.Integer) 0);
        double double10 = frequency0.getPct((int) (byte) 10);
        long long12 = frequency0.getCount((long) 1);
        double double14 = frequency0.getCumPct((long) ' ');
        long long16 = frequency0.getCumFreq('a');
        frequency0.clear();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1.0d + "'", double14 == 1.0d);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
    }

    @Test
    public void test1647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1647");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double4 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "");
        double double6 = frequency0.getPct((int) 'a');
        long long8 = frequency0.getCount((long) (byte) 1);
        frequency0.addValue('a');
        long long12 = frequency0.getCount('#');
        double double14 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "");
        double double16 = frequency0.getCumPct(1);
        long long18 = frequency0.getCount((long) 'a');
        org.apache.commons.math.stat.Frequency frequency19 = new org.apache.commons.math.stat.Frequency();
        double double21 = frequency19.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double23 = frequency19.getCumPct((long) (short) 100);
        long long25 = frequency19.getCumFreq('#');
        double double27 = frequency19.getCumPct('4');
        double double29 = frequency19.getPct((long) 0);
        double double31 = frequency19.getPct('#');
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor32 = frequency19.valuesIterator();
        // The following exception was thrown during execution in test generation
        try {
            long long33 = frequency0.getCumFreq((java.lang.Object) frequency19);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: org.apache.commons.math.stat.Frequency cannot be cast to java.lang.Comparable");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertNotNull(wildcardComparableItor32);
    }

    @Test
    public void test1648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1648");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double4 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "");
        double double6 = frequency0.getPct((int) 'a');
        long long8 = frequency0.getCount((long) (byte) 1);
        frequency0.addValue('a');
        long long12 = frequency0.getCount('#');
        long long14 = frequency0.getCumFreq('a');
        // The following exception was thrown during execution in test generation
        try {
            frequency0.addValue((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \na\t1\t100%\t100%\n");
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1L + "'", long14 == 1L);
    }

    @Test
    public void test1649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1649");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double4 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "");
        double double6 = frequency0.getPct((int) 'a');
        long long8 = frequency0.getCount((long) (byte) 1);
        frequency0.addValue('a');
        long long12 = frequency0.getCount('#');
        double double14 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "");
        double double16 = frequency0.getCumPct(1);
        frequency0.clear();
        frequency0.clear();
        long long20 = frequency0.getCount('a');
        double double22 = frequency0.getCumPct((int) (short) 1);
        double double24 = frequency0.getPct(1);
        org.apache.commons.math.stat.Frequency frequency25 = new org.apache.commons.math.stat.Frequency();
        org.apache.commons.math.stat.Frequency frequency26 = new org.apache.commons.math.stat.Frequency();
        double double28 = frequency26.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double30 = frequency26.getCumPct((java.lang.Comparable<java.lang.String>) "");
        double double31 = frequency25.getCumPct((java.lang.Object) "");
        frequency25.clear();
        boolean boolean33 = frequency0.equals((java.lang.Object) frequency25);
        frequency0.addValue((java.lang.Integer) 10);
        long long37 = frequency0.getCumFreq(10);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 1L + "'", long37 == 1L);
    }

    @Test
    public void test1650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1650");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double4 = frequency0.getCumPct((long) (short) 100);
        long long6 = frequency0.getCumFreq('#');
        org.apache.commons.math.stat.Frequency frequency7 = new org.apache.commons.math.stat.Frequency();
        double double9 = frequency7.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double11 = frequency7.getCumPct((long) (short) 100);
        long long13 = frequency7.getCumFreq('#');
        boolean boolean14 = frequency0.equals((java.lang.Object) long13);
        double double16 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "");
        org.apache.commons.math.stat.Frequency frequency17 = new org.apache.commons.math.stat.Frequency();
        double double19 = frequency17.getPct((java.lang.Object) (byte) -1);
        double double21 = frequency17.getPct(1);
        double double23 = frequency17.getCumPct((int) '4');
        double double25 = frequency17.getPct((long) (byte) 10);
        long long26 = frequency0.getCumFreq((java.lang.Object) (byte) 10);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor27 = frequency0.valuesIterator();
        org.apache.commons.math.stat.Frequency frequency28 = new org.apache.commons.math.stat.Frequency();
        double double30 = frequency28.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double32 = frequency28.getCumPct((java.lang.Comparable<java.lang.String>) "");
        double double34 = frequency28.getPct((long) 100);
        boolean boolean35 = frequency0.equals((java.lang.Object) frequency28);
        double double37 = frequency0.getCumPct((long) (-1));
        long long39 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n0\t1\t50%\t50%\n10\t1\t50%\t100%\n");
        double double41 = frequency0.getCumPct('a');
        long long43 = frequency0.getCount(100L);
        long long45 = frequency0.getCount('#');
        long long47 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n1\t1\t50%\t50%\n100\t1\t50%\t100%\n");
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertNotNull(wildcardComparableItor27);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
    }

    @Test
    public void test1651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1651");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        long long4 = frequency0.getCount((java.lang.Object) 1L);
        long long6 = frequency0.getCumFreq('4');
        long long8 = frequency0.getCumFreq((java.lang.Object) true);
        double double10 = frequency0.getCumPct(' ');
        long long12 = frequency0.getCumFreq((int) '#');
        frequency0.addValue((java.lang.Integer) 1);
        double double16 = frequency0.getCumPct((long) (byte) 0);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor17 = frequency0.valuesIterator();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertNotNull(wildcardComparableItor17);
    }

    @Test
    public void test1652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1652");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double4 = frequency0.getCumPct((long) (short) 100);
        long long6 = frequency0.getCumFreq('#');
        frequency0.addValue((java.lang.Integer) 0);
        double double10 = frequency0.getPct((int) (byte) 10);
        long long12 = frequency0.getCumFreq('#');
        frequency0.addValue((java.lang.Integer) 10);
        java.lang.String str15 = frequency0.toString();
        org.apache.commons.math.stat.Frequency frequency16 = new org.apache.commons.math.stat.Frequency();
        double double18 = frequency16.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        java.lang.String str19 = frequency16.toString();
        java.lang.Object obj20 = null;
        double double21 = frequency16.getCumPct(obj20);
        double double23 = frequency16.getCumPct('a');
        double double25 = frequency16.getPct(1);
        double double26 = frequency0.getCumPct((java.lang.Object) 1);
        double double28 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n-1\t1\t100%\t100%\n");
        long long30 = frequency0.getCount((int) (short) 10);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n0\t1\t50%\t50%\n10\t1\t50%\t100%\n" + "'", str15, "Value \t Freq. \t Pct. \t Cum Pct. \n0\t1\t50%\t50%\n10\t1\t50%\t100%\n");
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str19, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.5d + "'", double26 == 0.5d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 1L + "'", long30 == 1L);
    }

    @Test
    public void test1653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1653");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double4 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "");
        double double6 = frequency0.getPct((int) 'a');
        long long8 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        double double10 = frequency0.getCumPct('a');
        long long12 = frequency0.getCumFreq((int) '#');
        double double14 = frequency0.getCumPct((long) (short) 10);
        long long16 = frequency0.getCumFreq('4');
        org.apache.commons.math.stat.Frequency frequency17 = new org.apache.commons.math.stat.Frequency();
        double double19 = frequency17.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double21 = frequency17.getCumPct((long) (short) 100);
        double double23 = frequency17.getCumPct((java.lang.Object) 0);
        boolean boolean24 = frequency0.equals((java.lang.Object) double23);
        long long26 = frequency0.getCount('4');
        frequency0.addValue((java.lang.Integer) 10);
        long long30 = frequency0.getCumFreq('#');
        long long31 = frequency0.getSumFreq();
        // The following exception was thrown during execution in test generation
        try {
            frequency0.addValue(' ');
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 1L + "'", long31 == 1L);
    }

    @Test
    public void test1654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1654");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        java.lang.String str3 = frequency0.toString();
        java.lang.Object obj4 = null;
        double double5 = frequency0.getCumPct(obj4);
        double double7 = frequency0.getCumPct('a');
        double double9 = frequency0.getPct(1);
        double double11 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "");
        long long13 = frequency0.getCumFreq((java.lang.Comparable<java.lang.String>) "");
        long long14 = frequency0.getSumFreq();
        frequency0.addValue((int) (byte) 1);
        org.apache.commons.math.stat.Frequency frequency17 = new org.apache.commons.math.stat.Frequency();
        double double19 = frequency17.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double21 = frequency17.getCumPct((long) (short) 100);
        long long23 = frequency17.getCumFreq('#');
        frequency17.addValue((java.lang.Integer) 0);
        double double27 = frequency17.getPct((int) (byte) 10);
        java.lang.String str28 = frequency17.toString();
        double double30 = frequency17.getCumPct(0L);
        long long32 = frequency17.getCumFreq(100);
        double double34 = frequency17.getCumPct((int) '4');
        double double36 = frequency17.getPct(' ');
        long long37 = frequency17.getSumFreq();
        boolean boolean38 = frequency0.equals((java.lang.Object) long37);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str3, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n0\t1\t100%\t100%\n" + "'", str28, "Value \t Freq. \t Pct. \t Cum Pct. \n0\t1\t100%\t100%\n");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 1.0d + "'", double30 == 1.0d);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 1L + "'", long32 == 1L);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 1.0d + "'", double34 == 1.0d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.0d + "'", double36 == 0.0d);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 1L + "'", long37 == 1L);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test1655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1655");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        long long4 = frequency0.getCount((long) (byte) 10);
        double double6 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n0\t1\t50%\t50%\n10\t1\t50%\t100%\n");
        double double8 = frequency0.getPct('#');
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor9 = frequency0.valuesIterator();
        org.apache.commons.math.stat.Frequency frequency10 = new org.apache.commons.math.stat.Frequency();
        org.apache.commons.math.stat.Frequency frequency11 = new org.apache.commons.math.stat.Frequency();
        double double13 = frequency11.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double15 = frequency11.getCumPct((java.lang.Comparable<java.lang.String>) "");
        double double16 = frequency10.getCumPct((java.lang.Object) "");
        // The following exception was thrown during execution in test generation
        try {
            double double17 = frequency0.getCumPct((java.lang.Object) frequency10);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: org.apache.commons.math.stat.Frequency cannot be cast to java.lang.Comparable");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertNotNull(wildcardComparableItor9);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
    }

    @Test
    public void test1656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1656");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getPct((java.lang.Object) (byte) -1);
        double double4 = frequency0.getPct(1);
        double double6 = frequency0.getCumPct((int) '4');
        frequency0.addValue((long) '#');
        double double10 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        double double12 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "");
        java.lang.String str13 = frequency0.toString();
        long long15 = frequency0.getCount(1L);
        org.apache.commons.math.stat.Frequency frequency16 = new org.apache.commons.math.stat.Frequency();
        double double18 = frequency16.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        java.lang.String str19 = frequency16.toString();
        double double20 = frequency0.getCumPct((java.lang.Object) str19);
        long long22 = frequency0.getCount((int) (short) 100);
        long long24 = frequency0.getCount('#');
        long long26 = frequency0.getCount(0L);
        frequency0.addValue((java.lang.Integer) 10);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n35\t1\t100%\t100%\n" + "'", str13, "Value \t Freq. \t Pct. \t Cum Pct. \n35\t1\t100%\t100%\n");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str19, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
    }

    @Test
    public void test1657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1657");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double4 = frequency0.getCumPct((long) (short) 100);
        long long6 = frequency0.getCumFreq('#');
        org.apache.commons.math.stat.Frequency frequency7 = new org.apache.commons.math.stat.Frequency();
        double double9 = frequency7.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double11 = frequency7.getCumPct((long) (short) 100);
        long long13 = frequency7.getCumFreq('#');
        boolean boolean14 = frequency0.equals((java.lang.Object) long13);
        double double16 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "");
        org.apache.commons.math.stat.Frequency frequency17 = new org.apache.commons.math.stat.Frequency();
        double double19 = frequency17.getPct((java.lang.Object) (byte) -1);
        double double21 = frequency17.getPct(1);
        double double23 = frequency17.getCumPct((int) '4');
        double double25 = frequency17.getPct((long) (byte) 10);
        long long26 = frequency0.getCumFreq((java.lang.Object) (byte) 10);
        long long28 = frequency0.getCumFreq((int) ' ');
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor29 = frequency0.valuesIterator();
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor30 = frequency0.valuesIterator();
        org.apache.commons.math.stat.Frequency frequency31 = new org.apache.commons.math.stat.Frequency();
        double double33 = frequency31.getPct((java.lang.Object) (byte) -1);
        frequency31.addValue((long) (short) 100);
        java.lang.Object obj36 = null;
        boolean boolean37 = frequency31.equals(obj36);
        frequency31.addValue((int) (short) 1);
        boolean boolean40 = frequency0.equals((java.lang.Object) (short) 1);
        frequency0.addValue('#');
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertNotNull(wildcardComparableItor29);
        org.junit.Assert.assertNotNull(wildcardComparableItor30);
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test1658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1658");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        java.lang.String str3 = frequency0.toString();
        frequency0.clear();
        org.apache.commons.math.stat.Frequency frequency5 = new org.apache.commons.math.stat.Frequency();
        double double7 = frequency5.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        long long9 = frequency5.getCount((java.lang.Object) 1L);
        long long11 = frequency5.getCumFreq('4');
        double double13 = frequency5.getPct((long) (byte) -1);
        boolean boolean14 = frequency0.equals((java.lang.Object) double13);
        long long16 = frequency0.getCount(100);
        frequency0.addValue('4');
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str3, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
    }

    @Test
    public void test1659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1659");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double4 = frequency0.getCumPct((long) (short) 100);
        long long6 = frequency0.getCumFreq('#');
        org.apache.commons.math.stat.Frequency frequency7 = new org.apache.commons.math.stat.Frequency();
        double double9 = frequency7.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double11 = frequency7.getCumPct((long) (short) 100);
        long long13 = frequency7.getCumFreq('#');
        boolean boolean14 = frequency0.equals((java.lang.Object) long13);
        double double16 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "");
        org.apache.commons.math.stat.Frequency frequency17 = new org.apache.commons.math.stat.Frequency();
        double double19 = frequency17.getPct((java.lang.Object) (byte) -1);
        double double21 = frequency17.getPct(1);
        double double23 = frequency17.getCumPct((int) '4');
        double double25 = frequency17.getPct((long) (byte) 10);
        long long26 = frequency0.getCumFreq((java.lang.Object) (byte) 10);
        frequency0.addValue((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n100\t1\t100%\t100%\n");
        frequency0.clear();
        long long31 = frequency0.getCount(' ');
        double double33 = frequency0.getCumPct(' ');
        double double35 = frequency0.getCumPct('a');
        double double37 = frequency0.getCumPct((long) (byte) -1);
        double double39 = frequency0.getPct(0);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertTrue(Double.isNaN(double39));
    }

    @Test
    public void test1660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1660");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double4 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "");
        double double6 = frequency0.getPct((int) 'a');
        long long8 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        double double10 = frequency0.getCumPct('a');
        long long12 = frequency0.getCumFreq((int) '#');
        double double14 = frequency0.getCumPct((long) (short) 10);
        long long16 = frequency0.getCumFreq('4');
        double double18 = frequency0.getPct('#');
        long long20 = frequency0.getCount(' ');
        double double22 = frequency0.getCumPct('#');
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
    }

    @Test
    public void test1661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1661");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double4 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "");
        double double6 = frequency0.getPct((int) 'a');
        long long8 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        double double10 = frequency0.getCumPct('a');
        org.apache.commons.math.stat.Frequency frequency11 = new org.apache.commons.math.stat.Frequency();
        double double13 = frequency11.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double15 = frequency11.getCumPct((long) (short) 100);
        long long17 = frequency11.getCumFreq((long) (byte) -1);
        double double18 = frequency0.getPct((java.lang.Object) long17);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor19 = frequency0.valuesIterator();
        long long21 = frequency0.getCount(' ');
        long long23 = frequency0.getCount(1);
        double double25 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "");
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertNotNull(wildcardComparableItor19);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double25));
    }

    @Test
    public void test1662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1662");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double4 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "");
        double double6 = frequency0.getPct((int) 'a');
        frequency0.addValue((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor9 = frequency0.valuesIterator();
        org.apache.commons.math.stat.Frequency frequency10 = new org.apache.commons.math.stat.Frequency();
        boolean boolean11 = frequency0.equals((java.lang.Object) frequency10);
        frequency10.addValue('4');
        long long15 = frequency10.getCount((java.lang.Object) (short) -1);
        // The following exception was thrown during execution in test generation
        try {
            frequency10.addValue((java.lang.Integer) (-1));
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertNotNull(wildcardComparableItor9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
    }

    @Test
    public void test1663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1663");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double4 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "");
        double double6 = frequency0.getPct((int) 'a');
        frequency0.addValue((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor9 = frequency0.valuesIterator();
        org.apache.commons.math.stat.Frequency frequency10 = new org.apache.commons.math.stat.Frequency();
        boolean boolean11 = frequency0.equals((java.lang.Object) frequency10);
        org.apache.commons.math.stat.Frequency frequency12 = new org.apache.commons.math.stat.Frequency();
        double double14 = frequency12.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double16 = frequency12.getCumPct((java.lang.Comparable<java.lang.String>) "");
        double double18 = frequency12.getPct((int) 'a');
        long long20 = frequency12.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        double double22 = frequency12.getCumPct('a');
        long long24 = frequency12.getCumFreq((int) '#');
        double double26 = frequency12.getCumPct((long) (short) 10);
        long long28 = frequency12.getCumFreq('4');
        org.apache.commons.math.stat.Frequency frequency29 = new org.apache.commons.math.stat.Frequency();
        double double31 = frequency29.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double33 = frequency29.getCumPct((long) (short) 100);
        double double35 = frequency29.getCumPct((java.lang.Object) 0);
        boolean boolean36 = frequency12.equals((java.lang.Object) double35);
        frequency12.addValue((java.lang.Integer) 10);
        org.apache.commons.math.stat.Frequency frequency39 = new org.apache.commons.math.stat.Frequency();
        double double41 = frequency39.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        long long43 = frequency39.getCount((long) (short) 100);
        double double45 = frequency39.getPct((java.lang.Comparable<java.lang.String>) "");
        long long47 = frequency39.getCumFreq((long) (-1));
        org.apache.commons.math.stat.Frequency frequency48 = new org.apache.commons.math.stat.Frequency();
        double double50 = frequency48.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double52 = frequency48.getCumPct((java.lang.Comparable<java.lang.String>) "");
        double double54 = frequency48.getPct((int) 'a');
        long long56 = frequency48.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        double double58 = frequency48.getCumPct('a');
        org.apache.commons.math.stat.Frequency frequency59 = new org.apache.commons.math.stat.Frequency();
        double double61 = frequency59.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double63 = frequency59.getCumPct((long) (short) 100);
        long long65 = frequency59.getCumFreq((long) (byte) -1);
        double double66 = frequency48.getPct((java.lang.Object) long65);
        boolean boolean68 = frequency48.equals((java.lang.Object) 10);
        java.lang.String str69 = frequency48.toString();
        long long71 = frequency48.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        double double72 = frequency39.getPct((java.lang.Object) long71);
        frequency39.addValue(100);
        long long76 = frequency39.getCount(' ');
        long long77 = frequency12.getCount((java.lang.Object) ' ');
        long long78 = frequency0.getCumFreq((java.lang.Object) ' ');
        java.lang.String str79 = frequency0.toString();
        double double81 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertNotNull(wildcardComparableItor9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double50));
        org.junit.Assert.assertTrue(Double.isNaN(double52));
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 0L + "'", long56 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double58));
        org.junit.Assert.assertTrue(Double.isNaN(double61));
        org.junit.Assert.assertTrue(Double.isNaN(double63));
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 0L + "'", long65 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double66));
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str69, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 0L + "'", long71 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double72));
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + 0L + "'", long76 == 0L);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 0L + "'", long77 == 0L);
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + 0L + "'", long78 == 0L);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \nValue \t Freq. \t Pct. \t Cum Pct. \n\t1\t100%\t100%\n" + "'", str79, "Value \t Freq. \t Pct. \t Cum Pct. \nValue \t Freq. \t Pct. \t Cum Pct. \n\t1\t100%\t100%\n");
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 1.0d + "'", double81 == 1.0d);
    }

    @Test
    public void test1664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1664");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double4 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "");
        double double6 = frequency0.getPct((int) 'a');
        long long8 = frequency0.getCount((long) (byte) 1);
        frequency0.addValue('a');
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor11 = frequency0.valuesIterator();
        double double13 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        long long15 = frequency0.getCumFreq((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n10\t1\t100%\t100%\n");
        long long17 = frequency0.getCount((int) (short) 10);
        org.apache.commons.math.stat.Frequency frequency18 = new org.apache.commons.math.stat.Frequency();
        double double20 = frequency18.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double22 = frequency18.getCumPct((java.lang.Comparable<java.lang.String>) "");
        double double24 = frequency18.getPct((int) 'a');
        long long26 = frequency18.getCount((long) (byte) 1);
        org.apache.commons.math.stat.Frequency frequency27 = new org.apache.commons.math.stat.Frequency();
        double double29 = frequency27.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double31 = frequency27.getCumPct((long) (short) 100);
        long long33 = frequency27.getCumFreq((long) (byte) -1);
        long long34 = frequency18.getCount((java.lang.Object) (byte) -1);
        java.lang.String str35 = frequency18.toString();
        boolean boolean36 = frequency0.equals((java.lang.Object) frequency18);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor37 = frequency0.valuesIterator();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(wildcardComparableItor11);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str35, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(wildcardComparableItor37);
    }

    @Test
    public void test1665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1665");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency();
        double double3 = frequency1.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double5 = frequency1.getCumPct((java.lang.Comparable<java.lang.String>) "");
        double double7 = frequency1.getPct((int) 'a');
        long long9 = frequency1.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        double double11 = frequency1.getCumPct('a');
        org.apache.commons.math.stat.Frequency frequency12 = new org.apache.commons.math.stat.Frequency();
        double double14 = frequency12.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double16 = frequency12.getCumPct((long) (short) 100);
        long long18 = frequency12.getCumFreq((long) (byte) -1);
        double double19 = frequency1.getPct((java.lang.Object) long18);
        boolean boolean21 = frequency1.equals((java.lang.Object) 10);
        java.lang.String str22 = frequency1.toString();
        double double24 = frequency1.getCumPct((int) (byte) 10);
        frequency0.addValue((java.lang.Object) double24);
        long long27 = frequency0.getCumFreq((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n1\t1\t100%\t100%\n");
        double double29 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n-1\t1\t50%\t50%\n0\t1\t50%\t100%\n");
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str22, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
    }

    @Test
    public void test1666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1666");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        long long4 = frequency0.getCount((long) (short) 100);
        frequency0.addValue((long) (byte) 1);
        double double8 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n#\t1\t100%\t100%\n");
        org.apache.commons.math.stat.Frequency frequency9 = new org.apache.commons.math.stat.Frequency();
        double double11 = frequency9.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double13 = frequency9.getCumPct((java.lang.Comparable<java.lang.String>) "");
        double double15 = frequency9.getPct((int) 'a');
        frequency9.addValue((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor18 = frequency9.valuesIterator();
        boolean boolean19 = frequency0.equals((java.lang.Object) wildcardComparableItor18);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertNotNull(wildcardComparableItor18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test1667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1667");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double4 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "");
        double double6 = frequency0.getPct((int) 'a');
        long long8 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        double double10 = frequency0.getCumPct('a');
        org.apache.commons.math.stat.Frequency frequency11 = new org.apache.commons.math.stat.Frequency();
        double double13 = frequency11.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double15 = frequency11.getCumPct((long) (short) 100);
        long long17 = frequency11.getCumFreq((long) (byte) -1);
        double double18 = frequency0.getPct((java.lang.Object) long17);
        boolean boolean20 = frequency0.equals((java.lang.Object) 10);
        java.lang.String str21 = frequency0.toString();
        long long23 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.apache.commons.math.stat.Frequency frequency24 = new org.apache.commons.math.stat.Frequency();
        double double26 = frequency24.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        java.lang.String str27 = frequency24.toString();
        java.lang.Object obj28 = null;
        double double29 = frequency24.getCumPct(obj28);
        double double31 = frequency24.getCumPct('a');
        double double33 = frequency24.getCumPct((int) (byte) 100);
        long long35 = frequency24.getCount(0L);
        double double36 = frequency0.getPct((java.lang.Object) long35);
        long long38 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n100\t1\t100%\t100%\n");
        frequency0.addValue('a');
        org.apache.commons.math.stat.Frequency frequency41 = new org.apache.commons.math.stat.Frequency();
        java.lang.String str42 = frequency41.toString();
        double double44 = frequency41.getCumPct('a');
        frequency41.addValue((java.lang.Comparable<java.lang.String>) "");
        long long47 = frequency0.getCumFreq((java.lang.Object) "");
        long long49 = frequency0.getCount('4');
        org.apache.commons.math.stat.Frequency frequency50 = new org.apache.commons.math.stat.Frequency();
        double double52 = frequency50.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double54 = frequency50.getCumPct((java.lang.Comparable<java.lang.String>) "");
        double double56 = frequency50.getPct((int) 'a');
        double double58 = frequency50.getCumPct(' ');
        long long60 = frequency50.getCumFreq(0);
        long long61 = frequency0.getCount((java.lang.Object) 0);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str21, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str27, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str42, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double52));
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertTrue(Double.isNaN(double56));
        org.junit.Assert.assertTrue(Double.isNaN(double58));
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 0L + "'", long60 == 0L);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 0L + "'", long61 == 0L);
    }

    @Test
    public void test1668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1668");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double4 = frequency0.getCumPct((long) (short) 100);
        long long6 = frequency0.getCumFreq((long) (byte) -1);
        frequency0.clear();
        double double9 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n-1\t1\t100%\t100%\n");
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor10 = frequency0.valuesIterator();
        java.lang.Object obj11 = null;
        double double12 = frequency0.getCumPct(obj11);
        long long14 = frequency0.getCount('a');
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertNotNull(wildcardComparableItor10);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
    }

    @Test
    public void test1669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1669");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        frequency0.addValue((java.lang.Integer) (-1));
        long long6 = frequency0.getCount('4');
        long long8 = frequency0.getCumFreq((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n#\t1\t100%\t100%\n");
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
    }

    @Test
    public void test1670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1670");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getPct((java.lang.Object) (byte) -1);
        frequency0.addValue((long) (short) 100);
        java.lang.Object obj5 = null;
        boolean boolean6 = frequency0.equals(obj5);
        frequency0.addValue((int) (short) 1);
        long long10 = frequency0.getCumFreq((int) (byte) 1);
        long long12 = frequency0.getCumFreq((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n35\t1\t100%\t100%\n");
        org.apache.commons.math.stat.Frequency frequency13 = new org.apache.commons.math.stat.Frequency();
        double double15 = frequency13.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double17 = frequency13.getCumPct((java.lang.Comparable<java.lang.String>) "");
        double double19 = frequency13.getPct((int) 'a');
        long long21 = frequency13.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        double double23 = frequency13.getCumPct('a');
        org.apache.commons.math.stat.Frequency frequency24 = new org.apache.commons.math.stat.Frequency();
        double double26 = frequency24.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double28 = frequency24.getCumPct((long) (short) 100);
        long long30 = frequency24.getCumFreq((long) (byte) -1);
        double double31 = frequency13.getPct((java.lang.Object) long30);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor32 = frequency13.valuesIterator();
        long long34 = frequency13.getCount(' ');
        long long36 = frequency13.getCount(1);
        boolean boolean37 = frequency0.equals((java.lang.Object) long36);
        org.apache.commons.math.stat.Frequency frequency38 = new org.apache.commons.math.stat.Frequency();
        double double40 = frequency38.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double42 = frequency38.getCumPct((java.lang.Comparable<java.lang.String>) "");
        double double44 = frequency38.getPct((long) 100);
        double double46 = frequency38.getPct(1L);
        frequency38.addValue(10);
        double double50 = frequency38.getPct((int) (byte) 100);
        boolean boolean51 = frequency0.equals((java.lang.Object) frequency38);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1L + "'", long10 == 1L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertNotNull(wildcardComparableItor32);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.0d + "'", double50 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
    }

    @Test
    public void test1671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1671");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getPct((java.lang.Object) (byte) -1);
        double double4 = frequency0.getPct(1);
        double double6 = frequency0.getCumPct((int) '4');
        org.apache.commons.math.stat.Frequency frequency7 = new org.apache.commons.math.stat.Frequency();
        double double9 = frequency7.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        long long11 = frequency7.getCount((long) (short) 100);
        org.apache.commons.math.stat.Frequency frequency12 = new org.apache.commons.math.stat.Frequency();
        double double14 = frequency12.getPct((java.lang.Object) (byte) -1);
        double double15 = frequency7.getPct((java.lang.Object) (byte) -1);
        double double17 = frequency7.getCumPct((java.lang.Object) (-1.0f));
        double double19 = frequency7.getCumPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n-1\t1\t100%\t100%\n");
        org.apache.commons.math.stat.Frequency frequency20 = new org.apache.commons.math.stat.Frequency();
        double double22 = frequency20.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        long long24 = frequency20.getCount((long) (byte) 10);
        double double26 = frequency20.getCumPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n0\t1\t50%\t50%\n10\t1\t50%\t100%\n");
        frequency7.addValue((java.lang.Object) double26);
        boolean boolean28 = frequency0.equals((java.lang.Object) frequency7);
        frequency0.addValue((long) ' ');
        long long32 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n0\t1\t50%\t50%\n1\t1\t50%\t100%\n");
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
    }

    @Test
    public void test1672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1672");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getPct((java.lang.Object) (byte) -1);
        double double4 = frequency0.getPct(1);
        double double6 = frequency0.getCumPct((int) '4');
        org.apache.commons.math.stat.Frequency frequency7 = new org.apache.commons.math.stat.Frequency();
        double double9 = frequency7.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        long long11 = frequency7.getCount((long) (short) 100);
        org.apache.commons.math.stat.Frequency frequency12 = new org.apache.commons.math.stat.Frequency();
        double double14 = frequency12.getPct((java.lang.Object) (byte) -1);
        double double15 = frequency7.getPct((java.lang.Object) (byte) -1);
        double double17 = frequency7.getCumPct((java.lang.Object) (-1.0f));
        double double19 = frequency7.getCumPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n-1\t1\t100%\t100%\n");
        org.apache.commons.math.stat.Frequency frequency20 = new org.apache.commons.math.stat.Frequency();
        double double22 = frequency20.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        long long24 = frequency20.getCount((long) (byte) 10);
        double double26 = frequency20.getCumPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n0\t1\t50%\t50%\n10\t1\t50%\t100%\n");
        frequency7.addValue((java.lang.Object) double26);
        boolean boolean28 = frequency0.equals((java.lang.Object) frequency7);
        long long30 = frequency0.getCount((long) 1);
        double double32 = frequency0.getCumPct(0);
        double double34 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n100\t1\t100%\t100%\n");
        double double36 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \nhi!\t1\t100%\t100%\n");
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertTrue(Double.isNaN(double36));
    }

    @Test
    public void test1673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1673");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        long long4 = frequency0.getCount((java.lang.Object) 1L);
        long long6 = frequency0.getCumFreq('4');
        long long8 = frequency0.getCumFreq((java.lang.Object) true);
        long long10 = frequency0.getCount((long) (short) 100);
        long long12 = frequency0.getCumFreq('a');
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
    }

    @Test
    public void test1674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1674");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double4 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "");
        double double6 = frequency0.getPct((int) 'a');
        long long8 = frequency0.getCount((long) (byte) 1);
        org.apache.commons.math.stat.Frequency frequency9 = new org.apache.commons.math.stat.Frequency();
        double double11 = frequency9.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double13 = frequency9.getCumPct((long) (short) 100);
        long long15 = frequency9.getCumFreq((long) (byte) -1);
        long long16 = frequency0.getCount((java.lang.Object) (byte) -1);
        frequency0.addValue((java.lang.Integer) 1);
        frequency0.addValue((java.lang.Integer) (-1));
        double double22 = frequency0.getPct((int) (short) -1);
        double double24 = frequency0.getCumPct((int) (byte) 0);
        double double26 = frequency0.getPct((long) (byte) -1);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.5d + "'", double22 == 0.5d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.5d + "'", double24 == 0.5d);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.5d + "'", double26 == 0.5d);
    }

    @Test
    public void test1675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1675");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        long long4 = frequency0.getCount((long) (byte) 10);
        double double6 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n0\t1\t50%\t50%\n10\t1\t50%\t100%\n");
        double double8 = frequency0.getPct('#');
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor9 = frequency0.valuesIterator();
        frequency0.addValue(100);
        java.lang.Class<?> wildcardClass12 = frequency0.getClass();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertNotNull(wildcardComparableItor9);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test1676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1676");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        long long4 = frequency0.getCount((java.lang.Object) 1L);
        double double6 = frequency0.getCumPct(1);
        double double8 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double10 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "");
        double double12 = frequency0.getPct((long) (-1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
    }

    @Test
    public void test1677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1677");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double4 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "");
        double double6 = frequency0.getPct((int) 'a');
        long long8 = frequency0.getCumFreq((int) (short) -1);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
    }

    @Test
    public void test1678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1678");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        java.lang.String str3 = frequency0.toString();
        double double5 = frequency0.getCumPct(0);
        long long7 = frequency0.getCumFreq((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n35\t1\t100%\t100%\n");
        long long9 = frequency0.getCumFreq((int) 'a');
        org.apache.commons.math.stat.Frequency frequency10 = new org.apache.commons.math.stat.Frequency();
        double double12 = frequency10.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        long long14 = frequency10.getCount((long) (byte) 10);
        double double16 = frequency10.getCumPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n0\t1\t50%\t50%\n10\t1\t50%\t100%\n");
        double double18 = frequency10.getPct('#');
        long long20 = frequency10.getCumFreq((java.lang.Object) (short) 100);
        org.apache.commons.math.stat.Frequency frequency21 = new org.apache.commons.math.stat.Frequency();
        double double23 = frequency21.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        java.lang.String str24 = frequency21.toString();
        java.lang.Object obj25 = null;
        double double26 = frequency21.getCumPct(obj25);
        double double28 = frequency21.getCumPct('a');
        double double30 = frequency21.getPct(1);
        double double32 = frequency21.getCumPct((java.lang.Comparable<java.lang.String>) "");
        frequency21.addValue('a');
        long long36 = frequency21.getCount('4');
        boolean boolean37 = frequency10.equals((java.lang.Object) '4');
        double double39 = frequency10.getPct(0);
        // The following exception was thrown during execution in test generation
        try {
            long long40 = frequency0.getCount((java.lang.Object) frequency10);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: org.apache.commons.math.stat.Frequency cannot be cast to java.lang.Comparable");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str3, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str24, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double39));
    }

    @Test
    public void test1679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1679");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double4 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "");
        double double6 = frequency0.getPct((int) 'a');
        long long8 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        double double10 = frequency0.getCumPct('a');
        double double12 = frequency0.getPct(1);
        double double14 = frequency0.getPct((long) (byte) -1);
        org.apache.commons.math.stat.Frequency frequency15 = new org.apache.commons.math.stat.Frequency();
        double double17 = frequency15.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        java.lang.String str18 = frequency15.toString();
        java.lang.Object obj19 = null;
        double double20 = frequency15.getCumPct(obj19);
        double double22 = frequency15.getCumPct('a');
        double double24 = frequency15.getPct(1);
        double double26 = frequency15.getCumPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \na\t1\t100%\t100%\n");
        long long28 = frequency15.getCount(' ');
        double double30 = frequency15.getCumPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n32\t1\t100%\t100%\n");
        // The following exception was thrown during execution in test generation
        try {
            double double31 = frequency0.getPct((java.lang.Object) frequency15);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: org.apache.commons.math.stat.Frequency cannot be cast to java.lang.Comparable");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str18, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
    }

    @Test
    public void test1680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1680");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getPct((java.lang.Object) (byte) -1);
        double double4 = frequency0.getPct(1);
        double double6 = frequency0.getCumPct((int) '4');
        frequency0.addValue((long) '#');
        double double10 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        long long11 = frequency0.getSumFreq();
        double double13 = frequency0.getPct('4');
        frequency0.addValue((java.lang.Integer) 100);
        frequency0.addValue((long) (byte) 1);
        double double19 = frequency0.getCumPct((long) (byte) 0);
        java.lang.Class<?> wildcardClass20 = frequency0.getClass();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1L + "'", long11 == 1L);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test1681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1681");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        long long4 = frequency0.getCount((long) (short) 100);
        org.apache.commons.math.stat.Frequency frequency5 = new org.apache.commons.math.stat.Frequency();
        double double7 = frequency5.getPct((java.lang.Object) (byte) -1);
        double double8 = frequency0.getPct((java.lang.Object) (byte) -1);
        double double10 = frequency0.getCumPct((java.lang.Object) (-1.0f));
        double double12 = frequency0.getPct('a');
        frequency0.clear();
        double double15 = frequency0.getPct(10);
        long long16 = frequency0.getSumFreq();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
    }

    @Test
    public void test1682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1682");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double4 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "");
        double double6 = frequency0.getPct((int) 'a');
        frequency0.addValue((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor9 = frequency0.valuesIterator();
        org.apache.commons.math.stat.Frequency frequency10 = new org.apache.commons.math.stat.Frequency();
        boolean boolean11 = frequency0.equals((java.lang.Object) frequency10);
        org.apache.commons.math.stat.Frequency frequency12 = new org.apache.commons.math.stat.Frequency();
        double double14 = frequency12.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        long long16 = frequency12.getCount((java.lang.Object) 1L);
        double double18 = frequency12.getCumPct(1);
        long long19 = frequency10.getCount((java.lang.Object) 1);
        java.lang.Comparable<java.lang.String> strComparable20 = null;
        double double21 = frequency10.getCumPct(strComparable20);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertNotNull(wildcardComparableItor9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
    }

    @Test
    public void test1683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1683");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double4 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "");
        double double6 = frequency0.getPct((int) 'a');
        long long8 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        double double10 = frequency0.getCumPct('a');
        long long12 = frequency0.getCumFreq((int) '#');
        double double14 = frequency0.getCumPct((long) (short) 10);
        long long16 = frequency0.getCumFreq('4');
        long long18 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n100\t1\t100%\t100%\n");
        double double20 = frequency0.getPct('#');
        org.apache.commons.math.stat.Frequency frequency21 = new org.apache.commons.math.stat.Frequency();
        double double23 = frequency21.getPct((java.lang.Object) (byte) -1);
        double double25 = frequency21.getPct(1);
        frequency0.addValue((java.lang.Object) 1);
        frequency0.clear();
        long long29 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "hi!");
        frequency0.addValue('#');
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
    }

    @Test
    public void test1684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1684");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        java.lang.String str3 = frequency0.toString();
        java.lang.Object obj4 = null;
        double double5 = frequency0.getCumPct(obj4);
        double double7 = frequency0.getCumPct('a');
        double double9 = frequency0.getPct(1);
        double double11 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "");
        frequency0.addValue('a');
        org.apache.commons.math.stat.Frequency frequency14 = new org.apache.commons.math.stat.Frequency();
        double double16 = frequency14.getPct((java.lang.Object) (byte) -1);
        frequency14.addValue((long) (short) 100);
        java.lang.String str19 = frequency14.toString();
        boolean boolean20 = frequency0.equals((java.lang.Object) str19);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor21 = frequency0.valuesIterator();
        org.apache.commons.math.stat.Frequency frequency22 = new org.apache.commons.math.stat.Frequency();
        double double24 = frequency22.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        java.lang.String str25 = frequency22.toString();
        org.apache.commons.math.stat.Frequency frequency26 = new org.apache.commons.math.stat.Frequency();
        double double28 = frequency26.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double30 = frequency26.getCumPct((long) (short) 100);
        long long32 = frequency26.getCumFreq('#');
        java.lang.Class<?> wildcardClass33 = frequency26.getClass();
        boolean boolean34 = frequency22.equals((java.lang.Object) wildcardClass33);
        frequency22.clear();
        double double37 = frequency22.getCumPct((int) (short) 0);
        double double38 = frequency0.getCumPct((java.lang.Object) (short) 0);
        long long40 = frequency0.getCount((-1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str3, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n100\t1\t100%\t100%\n" + "'", str19, "Value \t Freq. \t Pct. \t Cum Pct. \n100\t1\t100%\t100%\n");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(wildcardComparableItor21);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str25, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
    }

    @Test
    public void test1685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1685");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        long long4 = frequency0.getCount((long) (short) 100);
        double double6 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "");
        long long8 = frequency0.getCount(0L);
        frequency0.addValue(1L);
        frequency0.addValue((int) (byte) 100);
        // The following exception was thrown during execution in test generation
        try {
            frequency0.addValue((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n0\t1\t50%\t50%\n10\t1\t50%\t100%\n");
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
    }

    @Test
    public void test1686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1686");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getPct((java.lang.Object) (byte) -1);
        double double4 = frequency0.getPct(1);
        double double6 = frequency0.getCumPct((int) '4');
        frequency0.addValue((long) '#');
        double double10 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        long long11 = frequency0.getSumFreq();
        double double13 = frequency0.getPct('4');
        double double15 = frequency0.getPct(' ');
        long long16 = frequency0.getSumFreq();
        double double18 = frequency0.getCumPct((int) (short) 10);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1L + "'", long11 == 1L);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1L + "'", long16 == 1L);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
    }

    @Test
    public void test1687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1687");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getPct((java.lang.Object) (byte) -1);
        frequency0.addValue((long) (short) 100);
        frequency0.addValue((long) 0);
        frequency0.addValue(100);
        double double10 = frequency0.getPct(0);
        double double12 = frequency0.getCumPct(1L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.3333333333333333d + "'", double10 == 0.3333333333333333d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.3333333333333333d + "'", double12 == 0.3333333333333333d);
    }

    @Test
    public void test1688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1688");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double4 = frequency0.getCumPct((long) (short) 100);
        long long6 = frequency0.getCumFreq('#');
        frequency0.addValue((java.lang.Integer) 0);
        double double10 = frequency0.getPct((int) (byte) 10);
        long long12 = frequency0.getCount((long) 1);
        double double14 = frequency0.getCumPct((long) ' ');
        double double16 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n1\t1\t50%\t50%\n100\t1\t50%\t100%\n");
        long long18 = frequency0.getCumFreq('#');
        org.apache.commons.math.stat.Frequency frequency19 = new org.apache.commons.math.stat.Frequency();
        double double21 = frequency19.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double23 = frequency19.getCumPct((java.lang.Comparable<java.lang.String>) "");
        double double25 = frequency19.getPct((int) 'a');
        long long27 = frequency19.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        double double29 = frequency19.getCumPct('a');
        org.apache.commons.math.stat.Frequency frequency30 = new org.apache.commons.math.stat.Frequency();
        double double32 = frequency30.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double34 = frequency30.getCumPct((long) (short) 100);
        long long36 = frequency30.getCumFreq((long) (byte) -1);
        double double37 = frequency19.getPct((java.lang.Object) long36);
        long long39 = frequency19.getCount('4');
        org.apache.commons.math.stat.Frequency frequency40 = new org.apache.commons.math.stat.Frequency();
        double double42 = frequency40.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        long long44 = frequency40.getCount((long) (short) 100);
        org.apache.commons.math.stat.Frequency frequency45 = new org.apache.commons.math.stat.Frequency();
        double double47 = frequency45.getPct((java.lang.Object) (byte) -1);
        double double48 = frequency40.getPct((java.lang.Object) (byte) -1);
        double double50 = frequency40.getCumPct((java.lang.Object) (-1.0f));
        long long52 = frequency40.getCount('#');
        org.apache.commons.math.stat.Frequency frequency53 = new org.apache.commons.math.stat.Frequency();
        double double55 = frequency53.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double57 = frequency53.getCumPct((long) (short) 100);
        long long59 = frequency53.getCumFreq('#');
        org.apache.commons.math.stat.Frequency frequency60 = new org.apache.commons.math.stat.Frequency();
        double double62 = frequency60.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double64 = frequency60.getCumPct((long) (short) 100);
        long long66 = frequency60.getCumFreq('#');
        boolean boolean67 = frequency53.equals((java.lang.Object) long66);
        double double69 = frequency53.getCumPct((java.lang.Comparable<java.lang.String>) "");
        org.apache.commons.math.stat.Frequency frequency70 = new org.apache.commons.math.stat.Frequency();
        double double72 = frequency70.getPct((java.lang.Object) (byte) -1);
        double double74 = frequency70.getPct(1);
        double double76 = frequency70.getCumPct((int) '4');
        double double78 = frequency70.getPct((long) (byte) 10);
        long long79 = frequency53.getCumFreq((java.lang.Object) (byte) 10);
        long long81 = frequency53.getCumFreq((int) ' ');
        double double83 = frequency53.getPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n-1\t1\t100%\t100%\n");
        double double85 = frequency53.getCumPct((long) (byte) 1);
        double double86 = frequency40.getPct((java.lang.Object) double85);
        frequency19.addValue((java.lang.Object) double86);
        // The following exception was thrown during execution in test generation
        try {
            frequency0.addValue((java.lang.Object) double86);
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1.0d + "'", double14 == 1.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertTrue(Double.isNaN(double50));
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double55));
        org.junit.Assert.assertTrue(Double.isNaN(double57));
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 0L + "'", long59 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double62));
        org.junit.Assert.assertTrue(Double.isNaN(double64));
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 0L + "'", long66 == 0L);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double69));
        org.junit.Assert.assertTrue(Double.isNaN(double72));
        org.junit.Assert.assertTrue(Double.isNaN(double74));
        org.junit.Assert.assertTrue(Double.isNaN(double76));
        org.junit.Assert.assertTrue(Double.isNaN(double78));
        org.junit.Assert.assertTrue("'" + long79 + "' != '" + 0L + "'", long79 == 0L);
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + 0L + "'", long81 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double83));
        org.junit.Assert.assertTrue(Double.isNaN(double85));
        org.junit.Assert.assertTrue(Double.isNaN(double86));
    }

    @Test
    public void test1689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1689");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double4 = frequency0.getCumPct((long) (short) 100);
        long long6 = frequency0.getCumFreq('#');
        double double8 = frequency0.getCumPct('4');
        double double10 = frequency0.getPct((long) 0);
        double double12 = frequency0.getPct('#');
        long long14 = frequency0.getCount((long) (-1));
        frequency0.addValue((java.lang.Integer) (-1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
    }

    @Test
    public void test1690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1690");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency();
        double double3 = frequency1.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double5 = frequency1.getCumPct((java.lang.Comparable<java.lang.String>) "");
        double double6 = frequency0.getCumPct((java.lang.Object) "");
        frequency0.addValue((java.lang.Integer) 1);
        long long10 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "hi!");
        double double12 = frequency0.getCumPct('#');
        double double14 = frequency0.getCumPct('a');
        frequency0.addValue((long) (byte) 100);
        long long18 = frequency0.getCount(1);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1L + "'", long18 == 1L);
    }

    @Test
    public void test1691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1691");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        frequency0.addValue((java.lang.Integer) (-1));
        long long6 = frequency0.getCount('4');
        double double8 = frequency0.getPct('a');
        frequency0.addValue((long) (short) -1);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
    }

    @Test
    public void test1692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1692");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getPct((java.lang.Object) (byte) -1);
        double double4 = frequency0.getPct(1);
        double double6 = frequency0.getCumPct((int) '4');
        double double8 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        frequency0.addValue(100);
        long long12 = frequency0.getCount(100);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
    }

    @Test
    public void test1693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1693");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        java.lang.String str3 = frequency0.toString();
        java.lang.Object obj4 = null;
        double double5 = frequency0.getCumPct(obj4);
        double double7 = frequency0.getCumPct('a');
        double double9 = frequency0.getCumPct((int) (byte) 100);
        frequency0.addValue((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        double double13 = frequency0.getPct(0);
        org.apache.commons.math.stat.Frequency frequency14 = new org.apache.commons.math.stat.Frequency();
        double double16 = frequency14.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double18 = frequency14.getCumPct((java.lang.Comparable<java.lang.String>) "");
        double double20 = frequency14.getPct((int) 'a');
        long long22 = frequency14.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        double double24 = frequency14.getCumPct('a');
        org.apache.commons.math.stat.Frequency frequency25 = new org.apache.commons.math.stat.Frequency();
        double double27 = frequency25.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double29 = frequency25.getCumPct((long) (short) 100);
        long long31 = frequency25.getCumFreq((long) (byte) -1);
        double double32 = frequency14.getPct((java.lang.Object) long31);
        long long33 = frequency0.getCount((java.lang.Object) double32);
        long long34 = frequency0.getSumFreq();
        org.apache.commons.math.stat.Frequency frequency35 = new org.apache.commons.math.stat.Frequency();
        double double37 = frequency35.getPct((java.lang.Object) (byte) -1);
        frequency35.addValue((long) (short) 100);
        java.lang.Object obj40 = null;
        boolean boolean41 = frequency35.equals(obj40);
        frequency35.addValue((int) (short) 1);
        long long45 = frequency35.getCumFreq((int) (byte) 1);
        double double47 = frequency35.getCumPct((int) (short) 0);
        double double49 = frequency35.getPct((long) (byte) -1);
        java.lang.String str50 = frequency35.toString();
        // The following exception was thrown during execution in test generation
        try {
            long long51 = frequency0.getCount((java.lang.Object) frequency35);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: org.apache.commons.math.stat.Frequency cannot be cast to java.lang.Comparable");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str3, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 1L + "'", long34 == 1L);
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 1L + "'", long45 == 1L);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n1\t1\t50%\t50%\n100\t1\t50%\t100%\n" + "'", str50, "Value \t Freq. \t Pct. \t Cum Pct. \n1\t1\t50%\t50%\n100\t1\t50%\t100%\n");
    }

    @Test
    public void test1694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1694");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double4 = frequency0.getCumPct((long) (short) 100);
        long long6 = frequency0.getCumFreq((long) (byte) -1);
        frequency0.clear();
        double double9 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n-1\t1\t100%\t100%\n");
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor10 = frequency0.valuesIterator();
        double double12 = frequency0.getCumPct(100L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertNotNull(wildcardComparableItor10);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
    }

    @Test
    public void test1695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1695");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        long long4 = frequency0.getCount((long) (short) 100);
        frequency0.clear();
        org.apache.commons.math.stat.Frequency frequency6 = new org.apache.commons.math.stat.Frequency();
        double double8 = frequency6.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double10 = frequency6.getCumPct((java.lang.Comparable<java.lang.String>) "");
        double double12 = frequency6.getPct((int) 'a');
        long long14 = frequency6.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        double double16 = frequency6.getCumPct('a');
        long long18 = frequency6.getCumFreq((int) '#');
        double double20 = frequency6.getCumPct((long) (short) 10);
        long long22 = frequency6.getCumFreq('4');
        org.apache.commons.math.stat.Frequency frequency23 = new org.apache.commons.math.stat.Frequency();
        double double25 = frequency23.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double27 = frequency23.getCumPct((long) (short) 100);
        double double29 = frequency23.getCumPct((java.lang.Object) 0);
        boolean boolean30 = frequency6.equals((java.lang.Object) double29);
        frequency6.addValue((java.lang.Integer) 10);
        java.lang.Class<?> wildcardClass33 = frequency6.getClass();
        // The following exception was thrown during execution in test generation
        try {
            long long34 = frequency0.getCumFreq((java.lang.Object) wildcardClass33);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: java.lang.Class cannot be cast to java.lang.Comparable");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(wildcardClass33);
    }

    @Test
    public void test1696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1696");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double4 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "");
        double double6 = frequency0.getPct((int) 'a');
        long long8 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        double double10 = frequency0.getCumPct('a');
        org.apache.commons.math.stat.Frequency frequency11 = new org.apache.commons.math.stat.Frequency();
        double double13 = frequency11.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double15 = frequency11.getCumPct((long) (short) 100);
        long long17 = frequency11.getCumFreq((long) (byte) -1);
        double double18 = frequency0.getPct((java.lang.Object) long17);
        boolean boolean20 = frequency0.equals((java.lang.Object) 10);
        java.lang.String str21 = frequency0.toString();
        org.apache.commons.math.stat.Frequency frequency22 = new org.apache.commons.math.stat.Frequency();
        double double24 = frequency22.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double26 = frequency22.getCumPct((long) (short) 100);
        long long28 = frequency22.getCumFreq('#');
        org.apache.commons.math.stat.Frequency frequency29 = new org.apache.commons.math.stat.Frequency();
        double double31 = frequency29.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double33 = frequency29.getCumPct((long) (short) 100);
        long long35 = frequency29.getCumFreq('#');
        boolean boolean36 = frequency22.equals((java.lang.Object) long35);
        double double38 = frequency22.getCumPct((java.lang.Comparable<java.lang.String>) "");
        org.apache.commons.math.stat.Frequency frequency39 = new org.apache.commons.math.stat.Frequency();
        double double41 = frequency39.getPct((java.lang.Object) (byte) -1);
        double double43 = frequency39.getPct(1);
        double double45 = frequency39.getCumPct((int) '4');
        double double47 = frequency39.getPct((long) (byte) 10);
        long long48 = frequency22.getCumFreq((java.lang.Object) (byte) 10);
        long long50 = frequency22.getCumFreq((int) ' ');
        frequency22.addValue((java.lang.Integer) (-1));
        double double53 = frequency0.getPct((java.lang.Object) (-1));
        frequency0.clear();
        frequency0.addValue('4');
        // The following exception was thrown during execution in test generation
        try {
            frequency0.addValue(3L);
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str21, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double53));
    }

    @Test
    public void test1697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1697");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        long long4 = frequency0.getCount((java.lang.Object) 1L);
        long long6 = frequency0.getCumFreq('4');
        long long8 = frequency0.getCumFreq((java.lang.Object) true);
        double double10 = frequency0.getCumPct(' ');
        long long12 = frequency0.getCumFreq((int) '#');
        frequency0.addValue((java.lang.Integer) 1);
        double double16 = frequency0.getCumPct((long) (byte) 0);
        org.apache.commons.math.stat.Frequency frequency17 = new org.apache.commons.math.stat.Frequency();
        double double19 = frequency17.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        java.lang.String str20 = frequency17.toString();
        java.lang.Object obj21 = null;
        double double22 = frequency17.getCumPct(obj21);
        double double24 = frequency17.getCumPct('a');
        double double26 = frequency17.getCumPct((int) (byte) 100);
        frequency17.addValue((java.lang.Integer) 0);
        long long30 = frequency17.getCumFreq((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n35\t1\t100%\t100%\n");
        frequency17.clear();
        // The following exception was thrown during execution in test generation
        try {
            frequency0.addValue((java.lang.Object) frequency17);
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str20, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
    }

    @Test
    public void test1698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1698");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double4 = frequency0.getCumPct((long) (short) 100);
        long long6 = frequency0.getCumFreq('#');
        org.apache.commons.math.stat.Frequency frequency7 = new org.apache.commons.math.stat.Frequency();
        double double9 = frequency7.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double11 = frequency7.getCumPct((long) (short) 100);
        long long13 = frequency7.getCumFreq('#');
        boolean boolean14 = frequency0.equals((java.lang.Object) long13);
        double double16 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "");
        org.apache.commons.math.stat.Frequency frequency17 = new org.apache.commons.math.stat.Frequency();
        double double19 = frequency17.getPct((java.lang.Object) (byte) -1);
        double double21 = frequency17.getPct(1);
        double double23 = frequency17.getCumPct((int) '4');
        double double25 = frequency17.getPct((long) (byte) 10);
        long long26 = frequency0.getCumFreq((java.lang.Object) (byte) 10);
        frequency0.addValue((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n100\t1\t100%\t100%\n");
        long long30 = frequency0.getCumFreq((int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            frequency0.addValue((long) '#');
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
    }

    @Test
    public void test1699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1699");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double4 = frequency0.getPct(0);
        double double6 = frequency0.getCumPct('a');
        long long8 = frequency0.getCount(1);
        double double10 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        double double12 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double14 = frequency0.getCumPct((long) (byte) 1);
        double double16 = frequency0.getPct((long) '#');
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
    }

    @Test
    public void test1700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1700");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor3 = frequency0.valuesIterator();
        frequency0.addValue((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n1\t1\t50%\t50%\n100\t1\t50%\t100%\n");
        java.lang.Object obj6 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long7 = frequency0.getCumFreq(obj6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertNotNull(wildcardComparableItor3);
    }

    @Test
    public void test1701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1701");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double4 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "");
        double double6 = frequency0.getPct((int) 'a');
        long long8 = frequency0.getCount((long) (byte) 1);
        frequency0.addValue('a');
        long long12 = frequency0.getCount('#');
        long long14 = frequency0.getCount(1L);
        // The following exception was thrown during execution in test generation
        try {
            frequency0.addValue((java.lang.Integer) 10);
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
    }

    @Test
    public void test1702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1702");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getPct((java.lang.Object) (byte) -1);
        double double4 = frequency0.getPct(1);
        double double6 = frequency0.getCumPct((int) '4');
        frequency0.addValue((long) '#');
        double double10 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        double double12 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "");
        java.lang.String str13 = frequency0.toString();
        long long15 = frequency0.getCount(1L);
        double double17 = frequency0.getCumPct('#');
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n35\t1\t100%\t100%\n" + "'", str13, "Value \t Freq. \t Pct. \t Cum Pct. \n35\t1\t100%\t100%\n");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
    }

    @Test
    public void test1703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1703");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        java.lang.String str3 = frequency0.toString();
        java.lang.Object obj4 = null;
        double double5 = frequency0.getCumPct(obj4);
        double double7 = frequency0.getCumPct('a');
        double double9 = frequency0.getCumPct((int) (byte) 100);
        long long11 = frequency0.getCount(0L);
        frequency0.addValue((long) (byte) 0);
        long long15 = frequency0.getCumFreq((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        double double17 = frequency0.getCumPct(10L);
        long long19 = frequency0.getCount((int) (byte) 10);
        long long21 = frequency0.getCumFreq('a');
        double double23 = frequency0.getPct((long) 'a');
        long long25 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n32\t1\t100%\t100%\n");
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str3, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 1.0d + "'", double17 == 1.0d);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
    }

    @Test
    public void test1704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1704");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double4 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "");
        double double6 = frequency0.getPct((int) 'a');
        long long8 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        double double10 = frequency0.getCumPct('a');
        org.apache.commons.math.stat.Frequency frequency11 = new org.apache.commons.math.stat.Frequency();
        double double13 = frequency11.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double15 = frequency11.getCumPct((long) (short) 100);
        long long17 = frequency11.getCumFreq((long) (byte) -1);
        double double18 = frequency0.getPct((java.lang.Object) long17);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor19 = frequency0.valuesIterator();
        long long21 = frequency0.getCumFreq((java.lang.Object) (byte) -1);
        java.lang.String str22 = frequency0.toString();
        frequency0.addValue(0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertNotNull(wildcardComparableItor19);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str22, "Value \t Freq. \t Pct. \t Cum Pct. \n");
    }

    @Test
    public void test1705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1705");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        java.lang.String str3 = frequency0.toString();
        java.lang.Object obj4 = null;
        double double5 = frequency0.getCumPct(obj4);
        double double7 = frequency0.getCumPct('a');
        double double9 = frequency0.getCumPct((int) (byte) 100);
        long long11 = frequency0.getCount(0L);
        double double13 = frequency0.getCumPct((long) (short) -1);
        org.apache.commons.math.stat.Frequency frequency14 = new org.apache.commons.math.stat.Frequency();
        double double16 = frequency14.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double18 = frequency14.getCumPct((java.lang.Comparable<java.lang.String>) "");
        double double20 = frequency14.getPct((int) 'a');
        frequency14.addValue((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        long long24 = frequency14.getCount((int) '4');
        long long26 = frequency14.getCumFreq((long) ' ');
        double double27 = frequency0.getCumPct((java.lang.Object) ' ');
        org.apache.commons.math.stat.Frequency frequency28 = new org.apache.commons.math.stat.Frequency();
        double double30 = frequency28.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double32 = frequency28.getPct(0);
        double double34 = frequency28.getCumPct('a');
        frequency28.addValue((int) (byte) 10);
        long long37 = frequency0.getCumFreq((java.lang.Object) (byte) 10);
        double double39 = frequency0.getCumPct(1);
        long long40 = frequency0.getSumFreq();
        long long42 = frequency0.getCount(' ');
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str3, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
    }

    @Test
    public void test1706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1706");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double4 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "");
        double double6 = frequency0.getPct((int) 'a');
        long long8 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        double double10 = frequency0.getCumPct('a');
        org.apache.commons.math.stat.Frequency frequency11 = new org.apache.commons.math.stat.Frequency();
        double double13 = frequency11.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double15 = frequency11.getCumPct((long) (short) 100);
        long long17 = frequency11.getCumFreq((long) (byte) -1);
        double double18 = frequency0.getPct((java.lang.Object) long17);
        boolean boolean20 = frequency0.equals((java.lang.Object) 10);
        java.lang.String str21 = frequency0.toString();
        long long23 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        frequency0.addValue((java.lang.Integer) (-1));
        frequency0.addValue((long) 'a');
        long long28 = frequency0.getSumFreq();
        long long30 = frequency0.getCumFreq((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \nhi!\t1\t100%\t100%\n");
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str21, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 2L + "'", long28 == 2L);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
    }

    @Test
    public void test1707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1707");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        long long4 = frequency0.getCount((java.lang.Object) 1L);
        long long6 = frequency0.getCumFreq('4');
        long long8 = frequency0.getCumFreq((java.lang.Object) true);
        double double10 = frequency0.getCumPct(' ');
        long long12 = frequency0.getCumFreq((int) '#');
        org.apache.commons.math.stat.Frequency frequency13 = new org.apache.commons.math.stat.Frequency();
        double double15 = frequency13.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double17 = frequency13.getCumPct((java.lang.Comparable<java.lang.String>) "");
        double double19 = frequency13.getPct((int) 'a');
        long long21 = frequency13.getCount((long) (byte) 1);
        boolean boolean22 = frequency0.equals((java.lang.Object) frequency13);
        long long24 = frequency13.getCumFreq((long) (short) 1);
        double double26 = frequency13.getCumPct((long) (short) 0);
        double double28 = frequency13.getCumPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n1.0\t1\t100%\t100%\n");
        java.lang.Object obj29 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long30 = frequency13.getCount(obj29);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue(Double.isNaN(double28));
    }

    @Test
    public void test1708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1708");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getPct((java.lang.Object) (byte) -1);
        double double4 = frequency0.getPct(1);
        double double6 = frequency0.getCumPct((int) '4');
        frequency0.addValue((long) '#');
        double double10 = frequency0.getCumPct(' ');
        java.lang.String str11 = frequency0.toString();
        long long13 = frequency0.getCount(0);
        long long15 = frequency0.getCount((long) (byte) 10);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor16 = frequency0.valuesIterator();
        frequency0.addValue((java.lang.Integer) 10);
        org.apache.commons.math.stat.Frequency frequency19 = new org.apache.commons.math.stat.Frequency();
        double double21 = frequency19.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double23 = frequency19.getCumPct((long) (short) 100);
        long long25 = frequency19.getCumFreq('#');
        frequency19.addValue((java.lang.Integer) 0);
        double double29 = frequency19.getPct((int) (byte) 10);
        java.lang.String str30 = frequency19.toString();
        double double32 = frequency19.getCumPct(0L);
        long long34 = frequency19.getCumFreq(100);
        double double36 = frequency19.getCumPct((int) '4');
        double double38 = frequency19.getPct(' ');
        long long39 = frequency19.getSumFreq();
        // The following exception was thrown during execution in test generation
        try {
            double double40 = frequency0.getCumPct((java.lang.Object) frequency19);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: org.apache.commons.math.stat.Frequency cannot be cast to java.lang.Comparable");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n35\t1\t100%\t100%\n" + "'", str11, "Value \t Freq. \t Pct. \t Cum Pct. \n35\t1\t100%\t100%\n");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(wildcardComparableItor16);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n0\t1\t100%\t100%\n" + "'", str30, "Value \t Freq. \t Pct. \t Cum Pct. \n0\t1\t100%\t100%\n");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1.0d + "'", double32 == 1.0d);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 1L + "'", long34 == 1L);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 1.0d + "'", double36 == 1.0d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 1L + "'", long39 == 1L);
    }

    @Test
    public void test1709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1709");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double4 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "");
        double double6 = frequency0.getPct((int) 'a');
        long long8 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        double double10 = frequency0.getCumPct('a');
        org.apache.commons.math.stat.Frequency frequency11 = new org.apache.commons.math.stat.Frequency();
        double double13 = frequency11.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double15 = frequency11.getCumPct((long) (short) 100);
        long long17 = frequency11.getCumFreq((long) (byte) -1);
        double double18 = frequency0.getPct((java.lang.Object) long17);
        boolean boolean20 = frequency0.equals((java.lang.Object) 10);
        java.lang.String str21 = frequency0.toString();
        double double23 = frequency0.getCumPct((int) (byte) 10);
        frequency0.addValue((java.lang.Comparable<java.lang.String>) "");
        double double27 = frequency0.getPct('4');
        long long29 = frequency0.getCumFreq(1);
        double double31 = frequency0.getCumPct(' ');
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str21, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d);
    }

    @Test
    public void test1710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1710");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double4 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "");
        double double6 = frequency0.getPct((int) 'a');
        long long8 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        double double10 = frequency0.getCumPct('a');
        long long12 = frequency0.getCumFreq((int) '#');
        double double14 = frequency0.getCumPct((long) (short) 10);
        long long16 = frequency0.getCumFreq('4');
        org.apache.commons.math.stat.Frequency frequency17 = new org.apache.commons.math.stat.Frequency();
        double double19 = frequency17.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double21 = frequency17.getCumPct((long) (short) 100);
        double double23 = frequency17.getCumPct((java.lang.Object) 0);
        boolean boolean24 = frequency0.equals((java.lang.Object) double23);
        double double26 = frequency0.getPct('4');
        double double28 = frequency0.getCumPct('#');
        org.apache.commons.math.stat.Frequency frequency29 = new org.apache.commons.math.stat.Frequency();
        double double31 = frequency29.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double33 = frequency29.getCumPct((java.lang.Comparable<java.lang.String>) "");
        double double35 = frequency29.getPct((int) 'a');
        long long37 = frequency29.getCount((long) (byte) 1);
        frequency29.addValue('a');
        long long41 = frequency29.getCount('#');
        double double43 = frequency29.getCumPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n100\t1\t100%\t100%\n");
        org.apache.commons.math.stat.Frequency frequency44 = new org.apache.commons.math.stat.Frequency();
        double double46 = frequency44.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double48 = frequency44.getCumPct((long) (short) 100);
        long long50 = frequency44.getCumFreq('#');
        frequency44.addValue((java.lang.Integer) 0);
        double double54 = frequency44.getCumPct((java.lang.Object) 10L);
        long long56 = frequency44.getCount((int) (short) 1);
        double double58 = frequency44.getCumPct('#');
        long long59 = frequency29.getCumFreq((java.lang.Object) double58);
        double double61 = frequency29.getPct((int) (byte) -1);
        double double62 = frequency0.getPct((java.lang.Object) (byte) -1);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 1.0d + "'", double54 == 1.0d);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 0L + "'", long56 == 0L);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.0d + "'", double58 == 0.0d);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 0L + "'", long59 == 0L);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 0.0d + "'", double61 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double62));
    }

    @Test
    public void test1711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1711");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double4 = frequency0.getCumPct((long) (short) 100);
        long long6 = frequency0.getCumFreq('#');
        frequency0.addValue((java.lang.Integer) 0);
        org.apache.commons.math.stat.Frequency frequency9 = new org.apache.commons.math.stat.Frequency();
        double double11 = frequency9.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        long long13 = frequency9.getCount((java.lang.Object) 1L);
        long long15 = frequency9.getCumFreq('4');
        long long17 = frequency9.getCumFreq((java.lang.Object) true);
        org.apache.commons.math.stat.Frequency frequency18 = new org.apache.commons.math.stat.Frequency();
        double double20 = frequency18.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double22 = frequency18.getCumPct((java.lang.Comparable<java.lang.String>) "");
        double double24 = frequency18.getPct((int) 'a');
        long long26 = frequency18.getCount((long) (byte) 1);
        frequency18.addValue('a');
        double double30 = frequency18.getCumPct(' ');
        boolean boolean31 = frequency9.equals((java.lang.Object) frequency18);
        java.lang.String str32 = frequency9.toString();
        org.apache.commons.math.stat.Frequency frequency33 = new org.apache.commons.math.stat.Frequency();
        double double35 = frequency33.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        long long37 = frequency33.getCount((long) (short) 100);
        org.apache.commons.math.stat.Frequency frequency38 = new org.apache.commons.math.stat.Frequency();
        double double40 = frequency38.getPct((java.lang.Object) (byte) -1);
        double double41 = frequency33.getPct((java.lang.Object) (byte) -1);
        double double43 = frequency33.getCumPct((java.lang.Object) (-1.0f));
        long long45 = frequency33.getCumFreq(10L);
        long long46 = frequency33.getSumFreq();
        long long48 = frequency33.getCumFreq((int) (byte) 0);
        long long49 = frequency9.getCumFreq((java.lang.Object) long48);
        double double50 = frequency0.getCumPct((java.lang.Object) long48);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str32, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 1.0d + "'", double50 == 1.0d);
    }

    @Test
    public void test1712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1712");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getPct((java.lang.Object) (byte) -1);
        frequency0.addValue((long) (short) 100);
        java.lang.Object obj5 = null;
        boolean boolean6 = frequency0.equals(obj5);
        frequency0.addValue((int) (short) 1);
        long long10 = frequency0.getCumFreq((int) (byte) 1);
        double double12 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \nNaN\t1\t100%\t100%\n");
        double double14 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n10\t1\t100%\t100%\n");
        double double16 = frequency0.getPct((long) (short) 100);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1L + "'", long10 == 1L);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.5d + "'", double16 == 0.5d);
    }

    @Test
    public void test1713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1713");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        long long4 = frequency0.getCount((java.lang.Object) 1L);
        long long6 = frequency0.getCumFreq('4');
        long long8 = frequency0.getCumFreq((java.lang.Object) true);
        double double10 = frequency0.getCumPct(' ');
        long long12 = frequency0.getCumFreq((int) '#');
        org.apache.commons.math.stat.Frequency frequency13 = new org.apache.commons.math.stat.Frequency();
        double double15 = frequency13.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double17 = frequency13.getCumPct((java.lang.Comparable<java.lang.String>) "");
        double double19 = frequency13.getPct((int) 'a');
        long long21 = frequency13.getCount((long) (byte) 1);
        boolean boolean22 = frequency0.equals((java.lang.Object) frequency13);
        double double24 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n0\t1\t50%\t50%\n100\t1\t50%\t100%\n");
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
    }

    @Test
    public void test1714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1714");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double4 = frequency0.getCumPct((long) (short) 100);
        long long6 = frequency0.getCumFreq('#');
        org.apache.commons.math.stat.Frequency frequency7 = new org.apache.commons.math.stat.Frequency();
        double double9 = frequency7.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double11 = frequency7.getCumPct((long) (short) 100);
        long long13 = frequency7.getCumFreq('#');
        boolean boolean14 = frequency0.equals((java.lang.Object) long13);
        double double16 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "");
        org.apache.commons.math.stat.Frequency frequency17 = new org.apache.commons.math.stat.Frequency();
        double double19 = frequency17.getPct((java.lang.Object) (byte) -1);
        double double21 = frequency17.getPct(1);
        double double23 = frequency17.getCumPct((int) '4');
        double double25 = frequency17.getPct((long) (byte) 10);
        long long26 = frequency0.getCumFreq((java.lang.Object) (byte) 10);
        long long28 = frequency0.getCumFreq((int) ' ');
        frequency0.addValue((java.lang.Comparable<java.lang.String>) "hi!");
        org.apache.commons.math.stat.Frequency frequency31 = new org.apache.commons.math.stat.Frequency();
        double double33 = frequency31.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double35 = frequency31.getPct(0);
        double double37 = frequency31.getCumPct('a');
        long long39 = frequency31.getCount(1);
        double double41 = frequency31.getPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        long long42 = frequency0.getCumFreq((java.lang.Object) double41);
        java.lang.String str43 = frequency0.toString();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \nhi!\t1\t100%\t100%\n" + "'", str43, "Value \t Freq. \t Pct. \t Cum Pct. \nhi!\t1\t100%\t100%\n");
    }

    @Test
    public void test1715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1715");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency();
        double double3 = frequency1.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double5 = frequency1.getCumPct((java.lang.Comparable<java.lang.String>) "");
        double double6 = frequency0.getCumPct((java.lang.Object) "");
        double double8 = frequency0.getPct((-1L));
        org.apache.commons.math.stat.Frequency frequency9 = new org.apache.commons.math.stat.Frequency();
        double double11 = frequency9.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        long long13 = frequency9.getCount((java.lang.Object) 1L);
        double double15 = frequency9.getCumPct(1);
        double double17 = frequency9.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        long long19 = frequency9.getCount('a');
        org.apache.commons.math.stat.Frequency frequency20 = new org.apache.commons.math.stat.Frequency();
        double double22 = frequency20.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        java.lang.String str23 = frequency20.toString();
        java.lang.Object obj24 = null;
        double double25 = frequency20.getCumPct(obj24);
        double double27 = frequency20.getCumPct('a');
        double double29 = frequency20.getCumPct((int) (byte) 100);
        frequency20.addValue((java.lang.Integer) 0);
        frequency9.addValue((java.lang.Object) 0);
        long long34 = frequency9.getCumFreq((long) (short) 1);
        double double35 = frequency0.getPct((java.lang.Object) (short) 1);
        frequency0.clear();
        double double38 = frequency0.getPct(' ');
        frequency0.addValue((java.lang.Integer) 0);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor41 = frequency0.valuesIterator();
        frequency0.addValue((java.lang.Integer) 100);
        long long44 = frequency0.getSumFreq();
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str23, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 1L + "'", long34 == 1L);
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertNotNull(wildcardComparableItor41);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 2L + "'", long44 == 2L);
    }

    @Test
    public void test1716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1716");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double4 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "");
        double double6 = frequency0.getPct((int) 'a');
        long long8 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        double double10 = frequency0.getCumPct('a');
        org.apache.commons.math.stat.Frequency frequency11 = new org.apache.commons.math.stat.Frequency();
        double double13 = frequency11.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double15 = frequency11.getCumPct((long) (short) 100);
        long long17 = frequency11.getCumFreq((long) (byte) -1);
        double double18 = frequency0.getPct((java.lang.Object) long17);
        boolean boolean20 = frequency0.equals((java.lang.Object) 10);
        java.lang.String str21 = frequency0.toString();
        org.apache.commons.math.stat.Frequency frequency22 = new org.apache.commons.math.stat.Frequency();
        double double24 = frequency22.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double26 = frequency22.getCumPct((long) (short) 100);
        long long28 = frequency22.getCumFreq('#');
        org.apache.commons.math.stat.Frequency frequency29 = new org.apache.commons.math.stat.Frequency();
        double double31 = frequency29.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double33 = frequency29.getCumPct((long) (short) 100);
        long long35 = frequency29.getCumFreq('#');
        boolean boolean36 = frequency22.equals((java.lang.Object) long35);
        double double38 = frequency22.getCumPct((java.lang.Comparable<java.lang.String>) "");
        org.apache.commons.math.stat.Frequency frequency39 = new org.apache.commons.math.stat.Frequency();
        double double41 = frequency39.getPct((java.lang.Object) (byte) -1);
        double double43 = frequency39.getPct(1);
        double double45 = frequency39.getCumPct((int) '4');
        double double47 = frequency39.getPct((long) (byte) 10);
        long long48 = frequency22.getCumFreq((java.lang.Object) (byte) 10);
        long long50 = frequency22.getCumFreq((int) ' ');
        frequency22.addValue((java.lang.Integer) (-1));
        double double53 = frequency0.getPct((java.lang.Object) (-1));
        frequency0.clear();
        long long56 = frequency0.getCumFreq(0);
        frequency0.addValue((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \nNaN\t1\t100%\t100%\n");
        long long60 = frequency0.getCumFreq('a');
        double double62 = frequency0.getPct((long) (short) 10);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str21, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 0L + "'", long56 == 0L);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 0L + "'", long60 == 0L);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 0.0d + "'", double62 == 0.0d);
    }

    @Test
    public void test1717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1717");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double4 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "");
        double double6 = frequency0.getPct((int) 'a');
        long long8 = frequency0.getCount((long) (byte) 1);
        frequency0.addValue('a');
        long long12 = frequency0.getCount('#');
        double double14 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "");
        org.apache.commons.math.stat.Frequency frequency15 = new org.apache.commons.math.stat.Frequency();
        double double17 = frequency15.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        long long19 = frequency15.getCount((java.lang.Object) 1L);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor20 = frequency15.valuesIterator();
        boolean boolean21 = frequency0.equals((java.lang.Object) frequency15);
        long long22 = frequency0.getSumFreq();
        long long24 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n0\t1\t100%\t100%\n");
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertNotNull(wildcardComparableItor20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1L + "'", long22 == 1L);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
    }

    @Test
    public void test1718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1718");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getPct((java.lang.Object) (byte) -1);
        double double4 = frequency0.getPct(1);
        org.apache.commons.math.stat.Frequency frequency5 = new org.apache.commons.math.stat.Frequency();
        double double7 = frequency5.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double9 = frequency5.getPct(0);
        long long10 = frequency0.getCumFreq((java.lang.Object) double9);
        frequency0.addValue((long) '4');
        long long14 = frequency0.getCumFreq((int) (short) 100);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1L + "'", long14 == 1L);
    }

    @Test
    public void test1719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1719");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double4 = frequency0.getPct(0);
        double double6 = frequency0.getCumPct('a');
        org.apache.commons.math.stat.Frequency frequency7 = new org.apache.commons.math.stat.Frequency();
        double double9 = frequency7.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double11 = frequency7.getCumPct((java.lang.Comparable<java.lang.String>) "");
        double double13 = frequency7.getPct((int) 'a');
        frequency7.addValue((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        frequency7.clear();
        double double18 = frequency7.getPct('4');
        long long20 = frequency7.getCount((int) '4');
        double double21 = frequency0.getCumPct((java.lang.Object) long20);
        frequency0.addValue((long) (short) 1);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
    }

    @Test
    public void test1720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1720");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        java.lang.String str3 = frequency0.toString();
        java.lang.Object obj4 = null;
        double double5 = frequency0.getCumPct(obj4);
        double double7 = frequency0.getCumPct('a');
        double double9 = frequency0.getPct(1);
        frequency0.addValue((java.lang.Comparable<java.lang.String>) "hi!");
        java.lang.Class<?> wildcardClass12 = frequency0.getClass();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str3, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test1721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1721");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        java.lang.String str3 = frequency0.toString();
        java.lang.Object obj4 = null;
        double double5 = frequency0.getCumPct(obj4);
        double double7 = frequency0.getCumPct('a');
        double double9 = frequency0.getCumPct((int) (byte) 100);
        long long11 = frequency0.getCount(0L);
        double double13 = frequency0.getCumPct((long) (short) -1);
        long long14 = frequency0.getSumFreq();
        frequency0.addValue((int) (byte) 100);
        org.apache.commons.math.stat.Frequency frequency17 = new org.apache.commons.math.stat.Frequency();
        double double19 = frequency17.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        long long21 = frequency17.getCount((java.lang.Object) 1L);
        long long23 = frequency17.getCumFreq('4');
        long long25 = frequency17.getCumFreq((java.lang.Object) true);
        double double27 = frequency17.getCumPct(' ');
        long long29 = frequency17.getCumFreq((int) '#');
        org.apache.commons.math.stat.Frequency frequency30 = new org.apache.commons.math.stat.Frequency();
        double double32 = frequency30.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double34 = frequency30.getCumPct((java.lang.Comparable<java.lang.String>) "");
        double double36 = frequency30.getPct((int) 'a');
        long long38 = frequency30.getCount((long) (byte) 1);
        boolean boolean39 = frequency17.equals((java.lang.Object) frequency30);
        long long41 = frequency30.getCumFreq((long) (short) 1);
        double double42 = frequency0.getPct((java.lang.Object) (short) 1);
        long long44 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n-1\t1\t100%\t100%\n");
        long long46 = frequency0.getCount((-1));
        // The following exception was thrown during execution in test generation
        try {
            frequency0.addValue((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n0\t1\t50%\t50%\n1\t1\t50%\t100%\n");
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str3, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.0d + "'", double42 == 0.0d);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
    }

    @Test
    public void test1722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1722");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double4 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "");
        double double6 = frequency0.getPct((int) 'a');
        long long8 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        double double10 = frequency0.getCumPct('a');
        long long12 = frequency0.getCumFreq((int) '#');
        double double14 = frequency0.getCumPct((long) (short) 10);
        long long16 = frequency0.getCumFreq('4');
        long long18 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n100\t1\t100%\t100%\n");
        long long20 = frequency0.getCount(0);
        long long22 = frequency0.getCount(100);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
    }

    @Test
    public void test1723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1723");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getPct((java.lang.Object) (byte) -1);
        double double4 = frequency0.getPct(1);
        double double6 = frequency0.getCumPct((int) '4');
        double double8 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        frequency0.addValue((java.lang.Object) 1.0d);
        double double12 = frequency0.getPct(1);
        long long14 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "");
        double double16 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        long long18 = frequency0.getCount((int) (short) 1);
        double double20 = frequency0.getPct('4');
        double double22 = frequency0.getCumPct(' ');
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
    }

    @Test
    public void test1724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1724");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double4 = frequency0.getCumPct((long) (short) 100);
        long long6 = frequency0.getCumFreq('#');
        frequency0.addValue((java.lang.Integer) 0);
        double double10 = frequency0.getPct((int) (byte) 10);
        long long12 = frequency0.getCumFreq('#');
        frequency0.addValue((java.lang.Integer) 10);
        java.lang.String str15 = frequency0.toString();
        org.apache.commons.math.stat.Frequency frequency16 = new org.apache.commons.math.stat.Frequency();
        double double18 = frequency16.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        java.lang.String str19 = frequency16.toString();
        java.lang.Object obj20 = null;
        double double21 = frequency16.getCumPct(obj20);
        double double23 = frequency16.getCumPct('a');
        double double25 = frequency16.getPct(1);
        double double26 = frequency0.getCumPct((java.lang.Object) 1);
        double double28 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n-1\t1\t100%\t100%\n");
        // The following exception was thrown during execution in test generation
        try {
            frequency0.addValue((java.lang.Comparable<java.lang.String>) "hi!");
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n0\t1\t50%\t50%\n10\t1\t50%\t100%\n" + "'", str15, "Value \t Freq. \t Pct. \t Cum Pct. \n0\t1\t50%\t50%\n10\t1\t50%\t100%\n");
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str19, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.5d + "'", double26 == 0.5d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
    }

    @Test
    public void test1725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1725");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor3 = frequency0.valuesIterator();
        double double5 = frequency0.getPct(' ');
        frequency0.addValue('a');
        org.apache.commons.math.stat.Frequency frequency8 = new org.apache.commons.math.stat.Frequency();
        double double10 = frequency8.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double12 = frequency8.getCumPct((long) (short) 100);
        long long14 = frequency8.getCumFreq('#');
        frequency8.addValue((java.lang.Integer) 0);
        double double18 = frequency8.getPct((int) (byte) 10);
        long long20 = frequency8.getCumFreq('#');
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor21 = frequency8.valuesIterator();
        boolean boolean22 = frequency0.equals((java.lang.Object) frequency8);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor23 = frequency0.valuesIterator();
        double double25 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n0\t1\t100%\t100%\n");
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertNotNull(wildcardComparableItor3);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNotNull(wildcardComparableItor21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(wildcardComparableItor23);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
    }

    @Test
    public void test1726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1726");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \nNaN\t1\t100%\t100%\n");
        double double4 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n35\t1\t100%\t100%\n");
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
    }

    @Test
    public void test1727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1727");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double4 = frequency0.getCumPct((long) (short) 100);
        long long6 = frequency0.getCumFreq('#');
        double double8 = frequency0.getCumPct('4');
        long long9 = frequency0.getSumFreq();
        double double11 = frequency0.getCumPct((-1L));
        double double13 = frequency0.getCumPct(100);
        double double15 = frequency0.getCumPct((long) (short) -1);
        long long17 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \na\t1\t100%\t100%\n");
        long long19 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \nValue \t Freq. \t Pct. \t Cum Pct. \n100\t1\t100%\t100%\n\t1\t100%\t100%\n");
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
    }

    @Test
    public void test1728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1728");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getPct((java.lang.Object) (byte) -1);
        double double4 = frequency0.getPct(1);
        double double6 = frequency0.getCumPct((int) '4');
        frequency0.addValue((long) '#');
        double double10 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        frequency0.addValue((java.lang.Integer) 100);
        double double14 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        // The following exception was thrown during execution in test generation
        try {
            frequency0.addValue('4');
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
    }

    @Test
    public void test1729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1729");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double4 = frequency0.getCumPct((long) (short) 100);
        long long6 = frequency0.getCumFreq('#');
        frequency0.addValue((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n100\t1\t100%\t100%\n");
        long long10 = frequency0.getCumFreq((long) '#');
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
    }

    @Test
    public void test1730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1730");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        long long4 = frequency0.getCount((java.lang.Object) 1L);
        long long6 = frequency0.getCumFreq('4');
        long long8 = frequency0.getCumFreq((java.lang.Object) true);
        double double10 = frequency0.getCumPct(' ');
        long long12 = frequency0.getCumFreq((int) '#');
        frequency0.addValue((java.lang.Integer) 1);
        long long16 = frequency0.getCount((-1L));
        long long18 = frequency0.getCount((long) ' ');
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
    }

    @Test
    public void test1731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1731");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double4 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "");
        double double6 = frequency0.getPct((int) 'a');
        long long8 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        double double10 = frequency0.getCumPct('a');
        double double12 = frequency0.getPct((java.lang.Object) 1L);
        long long14 = frequency0.getCount('#');
        long long16 = frequency0.getCumFreq((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \nNaN\t1\t100%\t100%\n");
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
    }

    @Test
    public void test1732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1732");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double4 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "");
        double double6 = frequency0.getPct((int) 'a');
        long long8 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        double double10 = frequency0.getCumPct('a');
        long long12 = frequency0.getCumFreq((int) '#');
        double double14 = frequency0.getCumPct((long) (short) 10);
        long long16 = frequency0.getCumFreq((java.lang.Comparable<java.lang.String>) "");
        double double18 = frequency0.getPct('4');
        org.apache.commons.math.stat.Frequency frequency19 = new org.apache.commons.math.stat.Frequency();
        double double21 = frequency19.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        long long23 = frequency19.getCount((java.lang.Object) 1L);
        long long25 = frequency19.getCumFreq('4');
        long long27 = frequency19.getCumFreq((java.lang.Object) true);
        long long29 = frequency19.getCount((long) (short) 100);
        double double31 = frequency19.getCumPct('a');
        frequency19.clear();
        long long34 = frequency19.getCount((int) (byte) 100);
        double double35 = frequency0.getCumPct((java.lang.Object) long34);
        double double37 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.apache.commons.math.stat.Frequency frequency38 = new org.apache.commons.math.stat.Frequency();
        double double40 = frequency38.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double42 = frequency38.getCumPct((java.lang.Comparable<java.lang.String>) "");
        double double44 = frequency38.getPct((int) 'a');
        long long46 = frequency38.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        double double48 = frequency38.getCumPct('a');
        org.apache.commons.math.stat.Frequency frequency49 = new org.apache.commons.math.stat.Frequency();
        double double51 = frequency49.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double53 = frequency49.getCumPct((long) (short) 100);
        long long55 = frequency49.getCumFreq((long) (byte) -1);
        double double56 = frequency38.getPct((java.lang.Object) long55);
        boolean boolean58 = frequency38.equals((java.lang.Object) 10);
        java.lang.String str59 = frequency38.toString();
        long long61 = frequency38.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        double double63 = frequency38.getCumPct((-1));
        frequency38.clear();
        double double66 = frequency38.getPct(0);
        frequency38.addValue((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n0\t1\t50%\t50%\n10\t1\t50%\t100%\n");
        // The following exception was thrown during execution in test generation
        try {
            frequency0.addValue((java.lang.Object) frequency38);
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 0L + "'", long55 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double56));
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str59, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 0L + "'", long61 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double63));
        org.junit.Assert.assertTrue(Double.isNaN(double66));
    }

    @Test
    public void test1733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1733");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        java.lang.String str3 = frequency0.toString();
        java.lang.Object obj4 = null;
        double double5 = frequency0.getCumPct(obj4);
        double double7 = frequency0.getCumPct('a');
        double double9 = frequency0.getCumPct((int) (byte) 100);
        long long11 = frequency0.getCount(0L);
        frequency0.addValue((long) (byte) 0);
        double double15 = frequency0.getCumPct((int) (byte) 1);
        long long17 = frequency0.getCount(' ');
        org.apache.commons.math.stat.Frequency frequency18 = new org.apache.commons.math.stat.Frequency();
        double double20 = frequency18.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double22 = frequency18.getCumPct((java.lang.Comparable<java.lang.String>) "");
        double double24 = frequency18.getPct((long) 100);
        double double26 = frequency18.getPct(1L);
        frequency18.addValue(10);
        org.apache.commons.math.stat.Frequency frequency29 = new org.apache.commons.math.stat.Frequency();
        double double31 = frequency29.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double33 = frequency29.getCumPct((long) (short) 100);
        long long35 = frequency29.getCumFreq('#');
        org.apache.commons.math.stat.Frequency frequency36 = new org.apache.commons.math.stat.Frequency();
        double double38 = frequency36.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double40 = frequency36.getCumPct((long) (short) 100);
        long long42 = frequency36.getCumFreq('#');
        boolean boolean43 = frequency29.equals((java.lang.Object) long42);
        double double45 = frequency29.getCumPct((java.lang.Comparable<java.lang.String>) "");
        org.apache.commons.math.stat.Frequency frequency46 = new org.apache.commons.math.stat.Frequency();
        double double48 = frequency46.getPct((java.lang.Object) (byte) -1);
        double double50 = frequency46.getPct(1);
        double double52 = frequency46.getCumPct((int) '4');
        double double54 = frequency46.getPct((long) (byte) 10);
        long long55 = frequency29.getCumFreq((java.lang.Object) (byte) 10);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor56 = frequency29.valuesIterator();
        org.apache.commons.math.stat.Frequency frequency57 = new org.apache.commons.math.stat.Frequency();
        double double59 = frequency57.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double61 = frequency57.getCumPct((java.lang.Comparable<java.lang.String>) "");
        double double63 = frequency57.getPct((long) 100);
        boolean boolean64 = frequency29.equals((java.lang.Object) frequency57);
        double double66 = frequency29.getCumPct((long) (-1));
        long long68 = frequency29.getCount((long) '#');
        long long69 = frequency18.getCount((java.lang.Object) long68);
        boolean boolean70 = frequency0.equals((java.lang.Object) frequency18);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str3, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 1.0d + "'", double15 == 1.0d);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertTrue(Double.isNaN(double50));
        org.junit.Assert.assertTrue(Double.isNaN(double52));
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 0L + "'", long55 == 0L);
        org.junit.Assert.assertNotNull(wildcardComparableItor56);
        org.junit.Assert.assertTrue(Double.isNaN(double59));
        org.junit.Assert.assertTrue(Double.isNaN(double61));
        org.junit.Assert.assertTrue(Double.isNaN(double63));
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double66));
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 0L + "'", long68 == 0L);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 0L + "'", long69 == 0L);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
    }

    @Test
    public void test1734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1734");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double4 = frequency0.getCumPct((long) (short) 100);
        long long6 = frequency0.getCumFreq('#');
        frequency0.addValue((java.lang.Integer) 0);
        double double10 = frequency0.getCumPct((java.lang.Object) 10L);
        frequency0.addValue(100L);
        frequency0.addValue((java.lang.Integer) 1);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
    }

    @Test
    public void test1735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1735");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        frequency0.addValue((java.lang.Integer) (-1));
        double double6 = frequency0.getCumPct('a');
        org.apache.commons.math.stat.Frequency frequency7 = new org.apache.commons.math.stat.Frequency();
        double double9 = frequency7.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double11 = frequency7.getCumPct((long) (short) 100);
        long long13 = frequency7.getCumFreq('#');
        org.apache.commons.math.stat.Frequency frequency14 = new org.apache.commons.math.stat.Frequency();
        double double16 = frequency14.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double18 = frequency14.getCumPct((long) (short) 100);
        long long20 = frequency14.getCumFreq('#');
        boolean boolean21 = frequency7.equals((java.lang.Object) long20);
        double double23 = frequency7.getCumPct((java.lang.Comparable<java.lang.String>) "");
        org.apache.commons.math.stat.Frequency frequency24 = new org.apache.commons.math.stat.Frequency();
        double double26 = frequency24.getPct((java.lang.Object) (byte) -1);
        double double28 = frequency24.getPct(1);
        double double30 = frequency24.getCumPct((int) '4');
        double double32 = frequency24.getPct((long) (byte) 10);
        long long33 = frequency7.getCumFreq((java.lang.Object) (byte) 10);
        long long35 = frequency7.getCumFreq((int) ' ');
        double double37 = frequency7.getPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n-1\t1\t100%\t100%\n");
        double double39 = frequency7.getCumPct((long) (byte) 1);
        frequency7.addValue((long) (-1));
        long long43 = frequency7.getCount((int) '#');
        org.apache.commons.math.stat.Frequency frequency44 = new org.apache.commons.math.stat.Frequency();
        double double46 = frequency44.getPct((java.lang.Object) (byte) -1);
        frequency44.addValue((long) (short) 100);
        frequency44.addValue((long) 0);
        long long52 = frequency44.getCount((int) (short) 100);
        org.apache.commons.math.stat.Frequency frequency53 = new org.apache.commons.math.stat.Frequency();
        double double55 = frequency53.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double57 = frequency53.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        long long58 = frequency44.getCumFreq((java.lang.Object) "hi!");
        org.apache.commons.math.stat.Frequency frequency59 = new org.apache.commons.math.stat.Frequency();
        double double61 = frequency59.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double63 = frequency59.getCumPct((long) (short) 100);
        long long65 = frequency59.getCumFreq('#');
        double double67 = frequency59.getCumPct((int) (byte) 0);
        frequency59.addValue((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        long long71 = frequency59.getCount('a');
        frequency59.addValue((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n100\t1\t100%\t100%\n");
        long long74 = frequency44.getCount((java.lang.Object) "Value \t Freq. \t Pct. \t Cum Pct. \n100\t1\t100%\t100%\n");
        boolean boolean75 = frequency7.equals((java.lang.Object) frequency44);
        java.lang.String str76 = frequency44.toString();
        boolean boolean77 = frequency0.equals((java.lang.Object) str76);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 1L + "'", long52 == 1L);
        org.junit.Assert.assertTrue(Double.isNaN(double55));
        org.junit.Assert.assertTrue(Double.isNaN(double57));
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 0L + "'", long58 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double61));
        org.junit.Assert.assertTrue(Double.isNaN(double63));
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 0L + "'", long65 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double67));
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 0L + "'", long71 == 0L);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 0L + "'", long74 == 0L);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n0\t1\t50%\t50%\n100\t1\t50%\t100%\n" + "'", str76, "Value \t Freq. \t Pct. \t Cum Pct. \n0\t1\t50%\t50%\n100\t1\t50%\t100%\n");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
    }

    @Test
    public void test1736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1736");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double4 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "");
        double double6 = frequency0.getPct((int) 'a');
        long long8 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        double double10 = frequency0.getCumPct('a');
        long long12 = frequency0.getCumFreq((int) '#');
        java.lang.String str13 = frequency0.toString();
        double double15 = frequency0.getPct('#');
        org.apache.commons.math.stat.Frequency frequency16 = new org.apache.commons.math.stat.Frequency();
        double double18 = frequency16.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double20 = frequency16.getCumPct(' ');
        double double22 = frequency16.getCumPct('#');
        double double24 = frequency16.getCumPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n0\t1\t50%\t50%\n10\t1\t50%\t100%\n");
        long long26 = frequency16.getCount((long) (short) 10);
        double double27 = frequency0.getPct((java.lang.Object) long26);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str13, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
    }

    @Test
    public void test1737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1737");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        long long4 = frequency0.getCount((java.lang.Object) 1L);
        double double6 = frequency0.getCumPct(1);
        double double8 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        long long10 = frequency0.getCount('a');
        org.apache.commons.math.stat.Frequency frequency11 = new org.apache.commons.math.stat.Frequency();
        double double13 = frequency11.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        java.lang.String str14 = frequency11.toString();
        java.lang.Object obj15 = null;
        double double16 = frequency11.getCumPct(obj15);
        double double18 = frequency11.getCumPct('a');
        double double20 = frequency11.getCumPct((int) (byte) 100);
        frequency11.addValue((java.lang.Integer) 0);
        frequency0.addValue((java.lang.Object) 0);
        long long25 = frequency0.getCumFreq((long) (short) 1);
        frequency0.clear();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str14, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1L + "'", long25 == 1L);
    }

    @Test
    public void test1738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1738");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double4 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "");
        double double6 = frequency0.getPct((int) 'a');
        long long8 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        double double10 = frequency0.getCumPct('a');
        org.apache.commons.math.stat.Frequency frequency11 = new org.apache.commons.math.stat.Frequency();
        double double13 = frequency11.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double15 = frequency11.getCumPct((long) (short) 100);
        long long17 = frequency11.getCumFreq((long) (byte) -1);
        double double18 = frequency0.getPct((java.lang.Object) long17);
        boolean boolean20 = frequency0.equals((java.lang.Object) 10);
        long long22 = frequency0.getCumFreq((java.lang.Comparable<java.lang.String>) "");
        long long23 = frequency0.getSumFreq();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
    }

    @Test
    public void test1739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1739");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        java.lang.String str1 = frequency0.toString();
        double double3 = frequency0.getCumPct('a');
        java.lang.String str4 = frequency0.toString();
        double double6 = frequency0.getCumPct('a');
        java.lang.String str7 = frequency0.toString();
        double double9 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n100\t1\t100%\t100%\n");
        frequency0.clear();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str1, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str4, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str7, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue(Double.isNaN(double9));
    }

    @Test
    public void test1740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1740");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getPct((java.lang.Object) (byte) -1);
        double double4 = frequency0.getPct(1);
        double double6 = frequency0.getCumPct((int) '4');
        double double8 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        java.lang.Object obj9 = null;
        long long10 = frequency0.getCumFreq(obj9);
        java.lang.Object obj11 = null;
        double double12 = frequency0.getPct(obj11);
        long long14 = frequency0.getCumFreq(1);
        double double16 = frequency0.getPct((int) (short) 10);
        double double18 = frequency0.getCumPct(' ');
        double double20 = frequency0.getPct((int) '#');
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue(Double.isNaN(double20));
    }

    @Test
    public void test1741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1741");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        long long4 = frequency0.getCount((long) (short) 100);
        org.apache.commons.math.stat.Frequency frequency5 = new org.apache.commons.math.stat.Frequency();
        double double7 = frequency5.getPct((java.lang.Object) (byte) -1);
        double double8 = frequency0.getPct((java.lang.Object) (byte) -1);
        double double10 = frequency0.getCumPct((java.lang.Object) (-1.0f));
        long long12 = frequency0.getCount('#');
        double double14 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n1\t1\t100%\t100%\n");
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
    }

    @Test
    public void test1742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1742");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double4 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "");
        double double6 = frequency0.getPct((int) 'a');
        long long8 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        double double10 = frequency0.getCumPct('a');
        long long12 = frequency0.getCumFreq((int) '#');
        double double14 = frequency0.getCumPct((long) (short) 10);
        long long16 = frequency0.getCumFreq('4');
        org.apache.commons.math.stat.Frequency frequency17 = new org.apache.commons.math.stat.Frequency();
        double double19 = frequency17.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double21 = frequency17.getCumPct((long) (short) 100);
        long long23 = frequency17.getCumFreq('#');
        frequency17.addValue((java.lang.Integer) 0);
        double double27 = frequency17.getPct((int) (byte) 10);
        long long29 = frequency17.getCumFreq('#');
        double double31 = frequency17.getCumPct('4');
        long long32 = frequency0.getCount((java.lang.Object) '4');
        frequency0.clear();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
    }

    @Test
    public void test1743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1743");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double4 = frequency0.getCumPct((long) (short) 100);
        long long6 = frequency0.getCumFreq('#');
        frequency0.addValue((java.lang.Integer) 0);
        double double10 = frequency0.getCumPct((java.lang.Object) 10L);
        org.apache.commons.math.stat.Frequency frequency11 = new org.apache.commons.math.stat.Frequency();
        double double13 = frequency11.getPct((java.lang.Object) (byte) -1);
        frequency11.addValue((long) (short) 100);
        java.lang.Object obj16 = null;
        boolean boolean17 = frequency11.equals(obj16);
        frequency11.addValue((int) (short) 1);
        long long21 = frequency11.getCumFreq((int) (byte) 1);
        boolean boolean22 = frequency0.equals((java.lang.Object) frequency11);
        long long24 = frequency0.getCumFreq((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n#\t1\t100%\t100%\n");
        frequency0.addValue((java.lang.Integer) 0);
        long long28 = frequency0.getCumFreq((int) (short) -1);
        long long30 = frequency0.getCumFreq((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n-1\t1\t100%\t100%\n");
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1L + "'", long21 == 1L);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
    }

    @Test
    public void test1744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1744");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double4 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "");
        double double6 = frequency0.getPct((int) 'a');
        frequency0.addValue((int) (byte) 1);
        double double10 = frequency0.getCumPct((long) 0);
        double double12 = frequency0.getPct((int) (short) 100);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
    }

    @Test
    public void test1745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1745");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double4 = frequency0.getCumPct((long) (short) 100);
        long long6 = frequency0.getCumFreq('#');
        frequency0.addValue((java.lang.Integer) 0);
        double double10 = frequency0.getCumPct((java.lang.Object) 10L);
        long long12 = frequency0.getCount((int) (short) 1);
        double double14 = frequency0.getCumPct('#');
        frequency0.addValue((int) (short) 1);
        long long18 = frequency0.getCumFreq((long) (short) -1);
        long long20 = frequency0.getCount(1);
        org.apache.commons.math.stat.Frequency frequency21 = new org.apache.commons.math.stat.Frequency();
        double double23 = frequency21.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double25 = frequency21.getCumPct((long) (short) 100);
        long long27 = frequency21.getCumFreq('#');
        double double29 = frequency21.getCumPct((int) (byte) 0);
        frequency21.addValue((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        java.lang.String str32 = frequency21.toString();
        // The following exception was thrown during execution in test generation
        try {
            long long33 = frequency0.getCumFreq((java.lang.Object) frequency21);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: org.apache.commons.math.stat.Frequency cannot be cast to java.lang.Comparable");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1L + "'", long20 == 1L);
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \nValue \t Freq. \t Pct. \t Cum Pct. \n\t1\t100%\t100%\n" + "'", str32, "Value \t Freq. \t Pct. \t Cum Pct. \nValue \t Freq. \t Pct. \t Cum Pct. \n\t1\t100%\t100%\n");
    }

    @Test
    public void test1746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1746");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double4 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "");
        double double6 = frequency0.getPct((int) 'a');
        long long8 = frequency0.getCount((long) (byte) 1);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor9 = frequency0.valuesIterator();
        long long11 = frequency0.getCount((long) (byte) 0);
        org.apache.commons.math.stat.Frequency frequency12 = new org.apache.commons.math.stat.Frequency();
        double double14 = frequency12.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double16 = frequency12.getPct(0);
        double double18 = frequency12.getCumPct('a');
        org.apache.commons.math.stat.Frequency frequency19 = new org.apache.commons.math.stat.Frequency();
        double double21 = frequency19.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        java.lang.String str22 = frequency19.toString();
        java.lang.Object obj23 = null;
        double double24 = frequency19.getCumPct(obj23);
        double double26 = frequency19.getCumPct('a');
        double double28 = frequency19.getCumPct((int) (byte) 100);
        long long30 = frequency19.getCount(0L);
        double double31 = frequency12.getPct((java.lang.Object) long30);
        org.apache.commons.math.stat.Frequency frequency32 = new org.apache.commons.math.stat.Frequency();
        double double34 = frequency32.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double36 = frequency32.getCumPct((long) (short) 100);
        long long38 = frequency32.getCumFreq('#');
        frequency32.addValue((java.lang.Integer) 0);
        double double42 = frequency32.getPct((int) (byte) 10);
        long long44 = frequency32.getCount((long) 1);
        long long46 = frequency32.getCount('4');
        double double48 = frequency32.getPct('4');
        boolean boolean49 = frequency12.equals((java.lang.Object) '4');
        double double50 = frequency0.getCumPct((java.lang.Object) boolean49);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(wildcardComparableItor9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str22, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.0d + "'", double42 == 0.0d);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double50));
    }

    @Test
    public void test1747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1747");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getPct((java.lang.Object) (byte) -1);
        double double4 = frequency0.getPct(1);
        double double6 = frequency0.getCumPct((int) '4');
        frequency0.addValue((long) '#');
        double double10 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        double double12 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "");
        java.lang.String str13 = frequency0.toString();
        long long15 = frequency0.getCount(1L);
        org.apache.commons.math.stat.Frequency frequency16 = new org.apache.commons.math.stat.Frequency();
        double double18 = frequency16.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        java.lang.String str19 = frequency16.toString();
        double double20 = frequency0.getCumPct((java.lang.Object) str19);
        long long22 = frequency0.getCumFreq((long) 'a');
        long long24 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \nValue \t Freq. \t Pct. \t Cum Pct. \n0\t1\t50%\t50%\n100\t1\t50%\t100%\n\t1\t100%\t100%\n");
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n35\t1\t100%\t100%\n" + "'", str13, "Value \t Freq. \t Pct. \t Cum Pct. \n35\t1\t100%\t100%\n");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str19, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1L + "'", long22 == 1L);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
    }

    @Test
    public void test1748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1748");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        long long4 = frequency0.getCount((long) (byte) 10);
        double double6 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n0\t1\t50%\t50%\n10\t1\t50%\t100%\n");
        double double8 = frequency0.getPct('#');
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor9 = frequency0.valuesIterator();
        long long11 = frequency0.getCount('4');
        org.apache.commons.math.stat.Frequency frequency12 = new org.apache.commons.math.stat.Frequency();
        double double14 = frequency12.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double16 = frequency12.getCumPct((long) (short) 100);
        long long18 = frequency12.getCumFreq('#');
        frequency12.addValue((java.lang.Integer) 0);
        double double22 = frequency12.getPct((int) (byte) 10);
        long long24 = frequency12.getCount((long) 1);
        double double26 = frequency12.getCumPct((long) (short) 100);
        long long28 = frequency12.getCount((long) 0);
        org.apache.commons.math.stat.Frequency frequency29 = new org.apache.commons.math.stat.Frequency();
        double double31 = frequency29.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        long long33 = frequency29.getCount((long) (short) 100);
        frequency29.clear();
        frequency29.addValue('#');
        long long37 = frequency12.getCumFreq((java.lang.Object) '#');
        double double38 = frequency0.getCumPct((java.lang.Object) long37);
        frequency0.addValue((int) (short) 0);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertNotNull(wildcardComparableItor9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 1.0d + "'", double26 == 1.0d);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 1L + "'", long28 == 1L);
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double38));
    }

    @Test
    public void test1749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1749");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getPct((java.lang.Object) (byte) -1);
        double double4 = frequency0.getPct(1);
        double double6 = frequency0.getCumPct((int) '4');
        double double8 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        frequency0.addValue((java.lang.Object) 1.0d);
        double double12 = frequency0.getPct(1);
        double double14 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        long long16 = frequency0.getCumFreq('a');
        org.apache.commons.math.stat.Frequency frequency17 = new org.apache.commons.math.stat.Frequency();
        double double19 = frequency17.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double21 = frequency17.getCumPct((java.lang.Comparable<java.lang.String>) "");
        double double23 = frequency17.getPct((int) 'a');
        long long25 = frequency17.getCount((long) (byte) 1);
        frequency17.addValue('a');
        long long29 = frequency17.getCount('#');
        long long31 = frequency17.getCount(1L);
        frequency17.clear();
        long long34 = frequency17.getCount('4');
        // The following exception was thrown during execution in test generation
        try {
            long long35 = frequency0.getCumFreq((java.lang.Object) frequency17);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: org.apache.commons.math.stat.Frequency cannot be cast to java.lang.Comparable");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
    }

    @Test
    public void test1750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1750");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double4 = frequency0.getCumPct((long) (short) 100);
        long long6 = frequency0.getCumFreq((long) (byte) -1);
        long long8 = frequency0.getCount((long) (short) 1);
        long long10 = frequency0.getCount((java.lang.Object) 10.0d);
        double double12 = frequency0.getPct((int) (short) 0);
        long long14 = frequency0.getCumFreq((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n2\t1\t50%\t50%\n35\t1\t50%\t100%\n");
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
    }

    @Test
    public void test1751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1751");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getPct((java.lang.Object) (byte) -1);
        frequency0.addValue((long) (short) 100);
        java.lang.Object obj5 = null;
        boolean boolean6 = frequency0.equals(obj5);
        frequency0.addValue((int) (short) 1);
        long long10 = frequency0.getCumFreq((int) (byte) 1);
        double double12 = frequency0.getCumPct((int) (short) 0);
        long long14 = frequency0.getCumFreq((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        frequency0.clear();
        double double17 = frequency0.getPct('a');
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1L + "'", long10 == 1L);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
    }

    @Test
    public void test1752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1752");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        frequency0.addValue((java.lang.Integer) (-1));
        java.lang.String str5 = frequency0.toString();
        org.apache.commons.math.stat.Frequency frequency6 = new org.apache.commons.math.stat.Frequency();
        double double8 = frequency6.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        long long10 = frequency6.getCount((long) (short) 100);
        frequency6.addValue('4');
        boolean boolean13 = frequency0.equals((java.lang.Object) '4');
        double double15 = frequency0.getCumPct(' ');
        frequency0.addValue((java.lang.Integer) 100);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n-1\t1\t100%\t100%\n" + "'", str5, "Value \t Freq. \t Pct. \t Cum Pct. \n-1\t1\t100%\t100%\n");
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
    }

    @Test
    public void test1753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1753");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double4 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "");
        double double6 = frequency0.getPct((int) 'a');
        long long8 = frequency0.getCount((long) (byte) 1);
        org.apache.commons.math.stat.Frequency frequency9 = new org.apache.commons.math.stat.Frequency();
        double double11 = frequency9.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double13 = frequency9.getCumPct((long) (short) 100);
        long long15 = frequency9.getCumFreq((long) (byte) -1);
        long long16 = frequency0.getCount((java.lang.Object) (byte) -1);
        frequency0.addValue((java.lang.Integer) 1);
        long long20 = frequency0.getCumFreq('4');
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor21 = frequency0.valuesIterator();
        org.apache.commons.math.stat.Frequency frequency22 = new org.apache.commons.math.stat.Frequency();
        double double24 = frequency22.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double26 = frequency22.getCumPct((long) (short) 100);
        long long28 = frequency22.getCumFreq('#');
        frequency22.addValue((java.lang.Integer) 0);
        double double32 = frequency22.getPct((int) (byte) 10);
        long long34 = frequency22.getCumFreq('#');
        double double36 = frequency22.getPct((int) (byte) -1);
        long long38 = frequency22.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n0\t1\t50%\t50%\n10\t1\t50%\t100%\n");
        long long39 = frequency0.getCount((java.lang.Object) "Value \t Freq. \t Pct. \t Cum Pct. \n0\t1\t50%\t50%\n10\t1\t50%\t100%\n");
        frequency0.addValue((long) 0);
        long long43 = frequency0.getCount(2L);
        // The following exception was thrown during execution in test generation
        try {
            frequency0.addValue((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n1\t1\t50%\t50%\n100\t1\t50%\t100%\n");
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNotNull(wildcardComparableItor21);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.0d + "'", double36 == 0.0d);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
    }

    @Test
    public void test1754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1754");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double4 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "");
        double double6 = frequency0.getPct((int) 'a');
        long long8 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        double double10 = frequency0.getCumPct('a');
        org.apache.commons.math.stat.Frequency frequency11 = new org.apache.commons.math.stat.Frequency();
        double double13 = frequency11.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double15 = frequency11.getCumPct((long) (short) 100);
        long long17 = frequency11.getCumFreq((long) (byte) -1);
        double double18 = frequency0.getPct((java.lang.Object) long17);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor19 = frequency0.valuesIterator();
        long long21 = frequency0.getCount(' ');
        long long23 = frequency0.getCount((long) (-1));
        java.lang.Comparable<java.lang.String> strComparable24 = null;
        double double25 = frequency0.getCumPct(strComparable24);
        java.lang.Object obj26 = null;
        long long27 = frequency0.getCumFreq(obj26);
        java.lang.String str28 = frequency0.toString();
        long long30 = frequency0.getCount(' ');
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertNotNull(wildcardComparableItor19);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str28, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
    }

    @Test
    public void test1755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1755");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double4 = frequency0.getCumPct((long) (short) 100);
        long long6 = frequency0.getCumFreq('#');
        frequency0.addValue((java.lang.Integer) 0);
        double double10 = frequency0.getPct((int) (byte) 10);
        java.lang.String str11 = frequency0.toString();
        double double13 = frequency0.getCumPct(0L);
        long long15 = frequency0.getCumFreq(100);
        double double17 = frequency0.getCumPct((int) '4');
        double double19 = frequency0.getCumPct('a');
        long long21 = frequency0.getCumFreq('4');
        long long23 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n0\t1\t50%\t50%\n10\t1\t50%\t100%\n");
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n0\t1\t100%\t100%\n" + "'", str11, "Value \t Freq. \t Pct. \t Cum Pct. \n0\t1\t100%\t100%\n");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 1.0d + "'", double13 == 1.0d);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1L + "'", long15 == 1L);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 1.0d + "'", double17 == 1.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
    }

    @Test
    public void test1756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1756");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        frequency0.addValue((int) (short) 100);
        double double6 = frequency0.getCumPct((int) (short) -1);
        double double8 = frequency0.getCumPct((long) 100);
        org.apache.commons.math.stat.Frequency frequency9 = new org.apache.commons.math.stat.Frequency();
        double double11 = frequency9.getPct((java.lang.Object) (byte) -1);
        double double13 = frequency9.getPct(1);
        double double15 = frequency9.getCumPct((int) '4');
        double double17 = frequency9.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        frequency9.addValue((java.lang.Object) 1.0d);
        boolean boolean20 = frequency0.equals((java.lang.Object) 1.0d);
        org.apache.commons.math.stat.Frequency frequency21 = new org.apache.commons.math.stat.Frequency();
        double double23 = frequency21.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double25 = frequency21.getCumPct((java.lang.Comparable<java.lang.String>) "");
        double double27 = frequency21.getPct((int) 'a');
        long long29 = frequency21.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        double double31 = frequency21.getCumPct('a');
        long long33 = frequency21.getCumFreq((int) '#');
        double double35 = frequency21.getCumPct((long) (short) 10);
        long long37 = frequency21.getCumFreq('4');
        org.apache.commons.math.stat.Frequency frequency38 = new org.apache.commons.math.stat.Frequency();
        double double40 = frequency38.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double42 = frequency38.getCumPct((long) (short) 100);
        double double44 = frequency38.getCumPct((java.lang.Object) 0);
        boolean boolean45 = frequency21.equals((java.lang.Object) double44);
        frequency21.addValue((java.lang.Integer) 10);
        java.lang.Class<?> wildcardClass48 = frequency21.getClass();
        // The following exception was thrown during execution in test generation
        try {
            double double49 = frequency0.getCumPct((java.lang.Object) frequency21);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: org.apache.commons.math.stat.Frequency cannot be cast to java.lang.Comparable");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0d + "'", double8 == 1.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(wildcardClass48);
    }

    @Test
    public void test1757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1757");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double4 = frequency0.getCumPct((long) (short) 100);
        long long6 = frequency0.getCumFreq('#');
        double double8 = frequency0.getCumPct((int) (byte) 0);
        frequency0.addValue(100);
        long long12 = frequency0.getCumFreq((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \nValue \t Freq. \t Pct. \t Cum Pct. \n\t1\t100%\t100%\n");
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
    }

    @Test
    public void test1758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1758");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getPct((java.lang.Object) (byte) -1);
        double double4 = frequency0.getPct(1);
        double double6 = frequency0.getCumPct((int) '4');
        frequency0.addValue((long) '#');
        double double10 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        long long11 = frequency0.getSumFreq();
        double double13 = frequency0.getPct('4');
        double double15 = frequency0.getPct(' ');
        frequency0.addValue(2L);
        java.lang.String str18 = frequency0.toString();
        long long20 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n35\t1\t50%\t50%\n100\t1\t50%\t100%\n");
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1L + "'", long11 == 1L);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n2\t1\t50%\t50%\n35\t1\t50%\t100%\n" + "'", str18, "Value \t Freq. \t Pct. \t Cum Pct. \n2\t1\t50%\t50%\n35\t1\t50%\t100%\n");
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
    }

    @Test
    public void test1759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1759");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        java.lang.String str3 = frequency0.toString();
        java.lang.Object obj4 = null;
        double double5 = frequency0.getCumPct(obj4);
        double double7 = frequency0.getCumPct('a');
        double double9 = frequency0.getCumPct((int) (byte) 100);
        long long11 = frequency0.getCount(0L);
        double double13 = frequency0.getCumPct((long) (short) -1);
        org.apache.commons.math.stat.Frequency frequency14 = new org.apache.commons.math.stat.Frequency();
        double double16 = frequency14.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double18 = frequency14.getCumPct((java.lang.Comparable<java.lang.String>) "");
        double double20 = frequency14.getPct((int) 'a');
        frequency14.addValue((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        long long24 = frequency14.getCount((int) '4');
        long long26 = frequency14.getCumFreq((long) ' ');
        double double27 = frequency0.getCumPct((java.lang.Object) ' ');
        org.apache.commons.math.stat.Frequency frequency28 = new org.apache.commons.math.stat.Frequency();
        double double30 = frequency28.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double32 = frequency28.getPct(0);
        double double34 = frequency28.getCumPct('a');
        frequency28.addValue((int) (byte) 10);
        long long37 = frequency0.getCumFreq((java.lang.Object) (byte) 10);
        double double39 = frequency0.getCumPct(1);
        java.lang.String str40 = frequency0.toString();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str3, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str40, "Value \t Freq. \t Pct. \t Cum Pct. \n");
    }

    @Test
    public void test1760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1760");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getPct((java.lang.Object) (byte) -1);
        frequency0.addValue((long) (short) 100);
        frequency0.addValue((long) 0);
        frequency0.addValue(100);
        long long10 = frequency0.getCount((int) (short) 0);
        double double12 = frequency0.getCumPct('4');
        double double14 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n10\t1\t100%\t100%\n");
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1L + "'", long10 == 1L);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
    }

    @Test
    public void test1761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1761");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double4 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "");
        double double6 = frequency0.getPct((int) 'a');
        long long8 = frequency0.getCount((long) (byte) 1);
        frequency0.addValue('a');
        long long12 = frequency0.getCount('#');
        double double14 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "");
        double double16 = frequency0.getCumPct(1);
        frequency0.clear();
        frequency0.clear();
        org.apache.commons.math.stat.Frequency frequency19 = new org.apache.commons.math.stat.Frequency();
        double double21 = frequency19.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        java.lang.String str22 = frequency19.toString();
        java.lang.Object obj23 = null;
        double double24 = frequency19.getCumPct(obj23);
        double double26 = frequency19.getCumPct('a');
        double double28 = frequency19.getCumPct((int) (byte) 100);
        long long30 = frequency19.getCount(0L);
        double double32 = frequency19.getCumPct((long) (short) -1);
        org.apache.commons.math.stat.Frequency frequency33 = new org.apache.commons.math.stat.Frequency();
        double double35 = frequency33.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double37 = frequency33.getCumPct((java.lang.Comparable<java.lang.String>) "");
        double double39 = frequency33.getPct((int) 'a');
        frequency33.addValue((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        long long43 = frequency33.getCount((int) '4');
        long long45 = frequency33.getCumFreq((long) ' ');
        double double46 = frequency19.getCumPct((java.lang.Object) ' ');
        long long48 = frequency19.getCumFreq((int) (byte) -1);
        double double50 = frequency19.getCumPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n35\t1\t100%\t100%\n");
        double double52 = frequency19.getPct((int) (short) 100);
        org.apache.commons.math.stat.Frequency frequency53 = new org.apache.commons.math.stat.Frequency();
        double double55 = frequency53.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        java.lang.String str56 = frequency53.toString();
        java.lang.Object obj57 = null;
        double double58 = frequency53.getCumPct(obj57);
        double double60 = frequency53.getCumPct('a');
        double double62 = frequency53.getCumPct((int) (byte) 100);
        frequency53.addValue((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        long long66 = frequency53.getCumFreq((int) (short) 10);
        long long68 = frequency53.getCount('a');
        org.apache.commons.math.stat.Frequency frequency69 = new org.apache.commons.math.stat.Frequency();
        double double71 = frequency69.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double73 = frequency69.getCumPct((long) (short) 100);
        long long75 = frequency69.getCumFreq('#');
        frequency69.addValue((java.lang.Integer) 0);
        double double79 = frequency69.getPct((int) (byte) 10);
        long long81 = frequency69.getCumFreq('#');
        double double83 = frequency69.getCumPct('4');
        java.lang.String str84 = frequency69.toString();
        long long86 = frequency69.getCount((int) (short) -1);
        long long87 = frequency53.getCumFreq((java.lang.Object) (short) -1);
        double double88 = frequency19.getCumPct((java.lang.Object) (short) -1);
        long long90 = frequency19.getCumFreq('a');
        // The following exception was thrown during execution in test generation
        try {
            double double91 = frequency0.getPct((java.lang.Object) frequency19);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: org.apache.commons.math.stat.Frequency cannot be cast to java.lang.Comparable");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str22, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double50));
        org.junit.Assert.assertTrue(Double.isNaN(double52));
        org.junit.Assert.assertTrue(Double.isNaN(double55));
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str56, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue(Double.isNaN(double58));
        org.junit.Assert.assertTrue(Double.isNaN(double60));
        org.junit.Assert.assertTrue(Double.isNaN(double62));
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 0L + "'", long66 == 0L);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 0L + "'", long68 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double71));
        org.junit.Assert.assertTrue(Double.isNaN(double73));
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 0L + "'", long75 == 0L);
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 0.0d + "'", double79 == 0.0d);
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + 0L + "'", long81 == 0L);
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 0.0d + "'", double83 == 0.0d);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n0\t1\t100%\t100%\n" + "'", str84, "Value \t Freq. \t Pct. \t Cum Pct. \n0\t1\t100%\t100%\n");
        org.junit.Assert.assertTrue("'" + long86 + "' != '" + 0L + "'", long86 == 0L);
        org.junit.Assert.assertTrue("'" + long87 + "' != '" + 0L + "'", long87 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double88));
        org.junit.Assert.assertTrue("'" + long90 + "' != '" + 0L + "'", long90 == 0L);
    }

    @Test
    public void test1762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1762");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double4 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "");
        double double6 = frequency0.getPct((int) 'a');
        long long8 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        double double10 = frequency0.getCumPct('a');
        long long12 = frequency0.getCumFreq((int) '#');
        double double14 = frequency0.getCumPct((long) (short) 10);
        long long16 = frequency0.getCumFreq('4');
        org.apache.commons.math.stat.Frequency frequency17 = new org.apache.commons.math.stat.Frequency();
        double double19 = frequency17.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double21 = frequency17.getCumPct((long) (short) 100);
        double double23 = frequency17.getCumPct((java.lang.Object) 0);
        boolean boolean24 = frequency0.equals((java.lang.Object) double23);
        frequency0.addValue((java.lang.Integer) 10);
        org.apache.commons.math.stat.Frequency frequency27 = new org.apache.commons.math.stat.Frequency();
        double double29 = frequency27.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        long long31 = frequency27.getCount((long) (short) 100);
        double double33 = frequency27.getPct((java.lang.Comparable<java.lang.String>) "");
        long long35 = frequency27.getCumFreq((long) (-1));
        org.apache.commons.math.stat.Frequency frequency36 = new org.apache.commons.math.stat.Frequency();
        double double38 = frequency36.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double40 = frequency36.getCumPct((java.lang.Comparable<java.lang.String>) "");
        double double42 = frequency36.getPct((int) 'a');
        long long44 = frequency36.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        double double46 = frequency36.getCumPct('a');
        org.apache.commons.math.stat.Frequency frequency47 = new org.apache.commons.math.stat.Frequency();
        double double49 = frequency47.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double51 = frequency47.getCumPct((long) (short) 100);
        long long53 = frequency47.getCumFreq((long) (byte) -1);
        double double54 = frequency36.getPct((java.lang.Object) long53);
        boolean boolean56 = frequency36.equals((java.lang.Object) 10);
        java.lang.String str57 = frequency36.toString();
        long long59 = frequency36.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        double double60 = frequency27.getPct((java.lang.Object) long59);
        frequency27.addValue(100);
        long long64 = frequency27.getCount(' ');
        long long65 = frequency0.getCount((java.lang.Object) ' ');
        java.lang.String str66 = frequency0.toString();
        long long68 = frequency0.getCumFreq((long) (byte) 0);
        double double70 = frequency0.getPct((int) (byte) 100);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertTrue(Double.isNaN(double49));
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str57, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 0L + "'", long59 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double60));
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 0L + "'", long64 == 0L);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 0L + "'", long65 == 0L);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n10\t1\t100%\t100%\n" + "'", str66, "Value \t Freq. \t Pct. \t Cum Pct. \n10\t1\t100%\t100%\n");
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 0L + "'", long68 == 0L);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 0.0d + "'", double70 == 0.0d);
    }

    @Test
    public void test1763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1763");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        java.lang.String str1 = frequency0.toString();
        double double3 = frequency0.getCumPct('a');
        frequency0.addValue((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n35\t1\t100%\t100%\n");
        double double7 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n-1\t1\t100%\t100%\n");
        long long9 = frequency0.getCumFreq((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n0\t1\t50%\t50%\n10\t1\t50%\t100%\n");
        double double11 = frequency0.getCumPct((int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            frequency0.addValue('#');
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str1, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
    }

    @Test
    public void test1764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1764");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double4 = frequency0.getCumPct((long) (short) 100);
        long long6 = frequency0.getCumFreq('#');
        org.apache.commons.math.stat.Frequency frequency7 = new org.apache.commons.math.stat.Frequency();
        double double9 = frequency7.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double11 = frequency7.getCumPct((long) (short) 100);
        long long13 = frequency7.getCumFreq('#');
        boolean boolean14 = frequency0.equals((java.lang.Object) long13);
        double double16 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "");
        long long18 = frequency0.getCount('4');
        long long20 = frequency0.getCumFreq((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n#\t1\t100%\t100%\n");
        long long22 = frequency0.getCumFreq((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n1\t1\t100%\t100%\n");
        long long24 = frequency0.getCumFreq((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n1.0\t1\t100%\t100%\n");
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
    }

    @Test
    public void test1765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1765");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        long long4 = frequency0.getCount((long) (short) 100);
        double double6 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "");
        long long8 = frequency0.getCumFreq(0);
        double double10 = frequency0.getCumPct((long) (short) 1);
        long long12 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "");
        frequency0.clear();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
    }

    @Test
    public void test1766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1766");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double4 = frequency0.getCumPct((long) (short) 100);
        long long6 = frequency0.getCumFreq('#');
        frequency0.addValue((java.lang.Integer) 0);
        double double10 = frequency0.getPct((int) (byte) 10);
        long long12 = frequency0.getCount((long) 1);
        double double14 = frequency0.getCumPct((long) (short) 100);
        long long16 = frequency0.getCount((long) 0);
        frequency0.addValue((java.lang.Integer) 0);
        long long19 = frequency0.getSumFreq();
        long long21 = frequency0.getCumFreq((long) '#');
        frequency0.clear();
        org.apache.commons.math.stat.Frequency frequency23 = new org.apache.commons.math.stat.Frequency();
        double double25 = frequency23.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor26 = frequency23.valuesIterator();
        frequency23.clear();
        java.lang.Class<?> wildcardClass28 = frequency23.getClass();
        boolean boolean29 = frequency0.equals((java.lang.Object) wildcardClass28);
        double double31 = frequency0.getCumPct((long) 10);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1.0d + "'", double14 == 1.0d);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1L + "'", long16 == 1L);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 2L + "'", long19 == 2L);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 2L + "'", long21 == 2L);
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertNotNull(wildcardComparableItor26);
        org.junit.Assert.assertNotNull(wildcardClass28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double31));
    }

    @Test
    public void test1767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1767");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getPct((java.lang.Object) (byte) -1);
        double double4 = frequency0.getPct(1);
        double double6 = frequency0.getCumPct((int) '4');
        frequency0.addValue((long) '#');
        double double10 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        long long11 = frequency0.getSumFreq();
        double double13 = frequency0.getCumPct('#');
        org.apache.commons.math.stat.Frequency frequency14 = new org.apache.commons.math.stat.Frequency();
        double double16 = frequency14.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double18 = frequency14.getCumPct((java.lang.Comparable<java.lang.String>) "");
        double double20 = frequency14.getPct((long) 100);
        double double22 = frequency14.getPct(1L);
        long long23 = frequency0.getCumFreq((java.lang.Object) double22);
        // The following exception was thrown during execution in test generation
        try {
            frequency0.addValue((java.lang.Comparable<java.lang.String>) "");
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1L + "'", long11 == 1L);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
    }

    @Test
    public void test1768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1768");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        long long4 = frequency0.getCount((long) (short) 100);
        org.apache.commons.math.stat.Frequency frequency5 = new org.apache.commons.math.stat.Frequency();
        double double7 = frequency5.getPct((java.lang.Object) (byte) -1);
        double double8 = frequency0.getPct((java.lang.Object) (byte) -1);
        double double10 = frequency0.getCumPct((java.lang.Object) (-1.0f));
        double double12 = frequency0.getPct('a');
        frequency0.clear();
        double double15 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n1\t1\t100%\t100%\n");
        long long17 = frequency0.getCumFreq((int) (byte) 10);
        double double19 = frequency0.getCumPct((long) 1);
        org.apache.commons.math.stat.Frequency frequency20 = new org.apache.commons.math.stat.Frequency();
        double double22 = frequency20.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        long long24 = frequency20.getCount((long) (short) 100);
        frequency20.clear();
        frequency20.addValue('#');
        org.apache.commons.math.stat.Frequency frequency28 = new org.apache.commons.math.stat.Frequency();
        double double30 = frequency28.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double32 = frequency28.getCumPct((long) (short) 100);
        long long34 = frequency28.getCumFreq((long) (byte) -1);
        long long36 = frequency28.getCumFreq((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n-1\t1\t100%\t100%\n");
        long long37 = frequency20.getCumFreq((java.lang.Object) "Value \t Freq. \t Pct. \t Cum Pct. \n-1\t1\t100%\t100%\n");
        java.lang.String str38 = frequency20.toString();
        long long40 = frequency20.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n#\t1\t100%\t100%\n");
        // The following exception was thrown during execution in test generation
        try {
            double double41 = frequency0.getPct((java.lang.Object) frequency20);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: org.apache.commons.math.stat.Frequency cannot be cast to java.lang.Comparable");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n#\t1\t100%\t100%\n" + "'", str38, "Value \t Freq. \t Pct. \t Cum Pct. \n#\t1\t100%\t100%\n");
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
    }

    @Test
    public void test1769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1769");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double4 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "");
        double double6 = frequency0.getPct((int) 'a');
        long long8 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        double double10 = frequency0.getCumPct('a');
        long long12 = frequency0.getCumFreq((int) '#');
        org.apache.commons.math.stat.Frequency frequency13 = new org.apache.commons.math.stat.Frequency();
        double double15 = frequency13.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        frequency13.addValue((java.lang.Integer) (-1));
        long long19 = frequency13.getCumFreq('4');
        long long20 = frequency0.getCumFreq((java.lang.Object) long19);
        frequency0.addValue((java.lang.Integer) 1);
        frequency0.addValue((java.lang.Integer) 10);
        long long26 = frequency0.getCumFreq((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \nValue \t Freq. \t Pct. \t Cum Pct. \n0\t1\t50%\t50%\n100\t1\t50%\t100%\n\t1\t100%\t100%\n");
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
    }

    @Test
    public void test1770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1770");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        java.lang.String str3 = frequency0.toString();
        java.lang.Object obj4 = null;
        double double5 = frequency0.getCumPct(obj4);
        double double7 = frequency0.getCumPct('a');
        double double9 = frequency0.getCumPct((int) (byte) 100);
        frequency0.addValue((java.lang.Integer) 0);
        long long13 = frequency0.getCumFreq((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n35\t1\t100%\t100%\n");
        frequency0.clear();
        double double16 = frequency0.getPct((long) (byte) 0);
        long long18 = frequency0.getCount('4');
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str3, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
    }

    @Test
    public void test1771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1771");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double4 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "");
        double double6 = frequency0.getPct((int) 'a');
        long long8 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        double double10 = frequency0.getCumPct('a');
        org.apache.commons.math.stat.Frequency frequency11 = new org.apache.commons.math.stat.Frequency();
        double double13 = frequency11.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double15 = frequency11.getCumPct((long) (short) 100);
        long long17 = frequency11.getCumFreq((long) (byte) -1);
        double double18 = frequency0.getPct((java.lang.Object) long17);
        boolean boolean20 = frequency0.equals((java.lang.Object) 10);
        java.lang.String str21 = frequency0.toString();
        org.apache.commons.math.stat.Frequency frequency22 = new org.apache.commons.math.stat.Frequency();
        double double24 = frequency22.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double26 = frequency22.getCumPct((long) (short) 100);
        long long28 = frequency22.getCumFreq('#');
        org.apache.commons.math.stat.Frequency frequency29 = new org.apache.commons.math.stat.Frequency();
        double double31 = frequency29.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double33 = frequency29.getCumPct((long) (short) 100);
        long long35 = frequency29.getCumFreq('#');
        boolean boolean36 = frequency22.equals((java.lang.Object) long35);
        double double38 = frequency22.getCumPct((java.lang.Comparable<java.lang.String>) "");
        org.apache.commons.math.stat.Frequency frequency39 = new org.apache.commons.math.stat.Frequency();
        double double41 = frequency39.getPct((java.lang.Object) (byte) -1);
        double double43 = frequency39.getPct(1);
        double double45 = frequency39.getCumPct((int) '4');
        double double47 = frequency39.getPct((long) (byte) 10);
        long long48 = frequency22.getCumFreq((java.lang.Object) (byte) 10);
        long long50 = frequency22.getCumFreq((int) ' ');
        frequency22.addValue((java.lang.Integer) (-1));
        double double53 = frequency0.getPct((java.lang.Object) (-1));
        frequency0.clear();
        long long56 = frequency0.getCumFreq(0);
        frequency0.addValue((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \nNaN\t1\t100%\t100%\n");
        long long60 = frequency0.getCumFreq('a');
        // The following exception was thrown during execution in test generation
        try {
            frequency0.addValue((int) (byte) 1);
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str21, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 0L + "'", long56 == 0L);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 0L + "'", long60 == 0L);
    }

    @Test
    public void test1772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1772");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double4 = frequency0.getCumPct((long) (short) 100);
        long long6 = frequency0.getCumFreq('#');
        frequency0.addValue((java.lang.Integer) 0);
        double double10 = frequency0.getCumPct((java.lang.Object) 10L);
        long long12 = frequency0.getCount((int) (short) 1);
        double double14 = frequency0.getCumPct('#');
        double double16 = frequency0.getPct((long) (byte) 10);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
    }

    @Test
    public void test1773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1773");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double4 = frequency0.getCumPct((long) (short) 100);
        long long6 = frequency0.getCumFreq('#');
        double double8 = frequency0.getCumPct('4');
        double double10 = frequency0.getPct((long) 0);
        frequency0.clear();
        org.apache.commons.math.stat.Frequency frequency12 = new org.apache.commons.math.stat.Frequency();
        double double14 = frequency12.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double16 = frequency12.getPct(0);
        double double18 = frequency12.getCumPct('a');
        org.apache.commons.math.stat.Frequency frequency19 = new org.apache.commons.math.stat.Frequency();
        double double21 = frequency19.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        java.lang.String str22 = frequency19.toString();
        java.lang.Object obj23 = null;
        double double24 = frequency19.getCumPct(obj23);
        double double26 = frequency19.getCumPct('a');
        double double28 = frequency19.getCumPct((int) (byte) 100);
        long long30 = frequency19.getCount(0L);
        double double31 = frequency12.getPct((java.lang.Object) long30);
        double double33 = frequency12.getPct((-1));
        frequency12.addValue((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n0\t1\t50%\t50%\n100\t1\t50%\t100%\n");
        java.lang.String str36 = frequency12.toString();
        double double38 = frequency12.getCumPct((long) (short) 1);
        frequency12.addValue((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n1\t1\t100%\t100%\n");
        long long41 = frequency0.getCumFreq((java.lang.Object) "Value \t Freq. \t Pct. \t Cum Pct. \n1\t1\t100%\t100%\n");
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str22, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \nValue \t Freq. \t Pct. \t Cum Pct. \n0\t1\t50%\t50%\n100\t1\t50%\t100%\n\t1\t100%\t100%\n" + "'", str36, "Value \t Freq. \t Pct. \t Cum Pct. \nValue \t Freq. \t Pct. \t Cum Pct. \n0\t1\t50%\t50%\n100\t1\t50%\t100%\n\t1\t100%\t100%\n");
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
    }

    @Test
    public void test1774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1774");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double4 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "");
        double double6 = frequency0.getPct((int) 'a');
        long long8 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        double double10 = frequency0.getCumPct('a');
        long long12 = frequency0.getCumFreq((int) '#');
        double double14 = frequency0.getCumPct((long) (short) 10);
        long long16 = frequency0.getCumFreq('4');
        org.apache.commons.math.stat.Frequency frequency17 = new org.apache.commons.math.stat.Frequency();
        java.lang.String str18 = frequency17.toString();
        double double20 = frequency17.getCumPct('a');
        frequency17.addValue((java.lang.Comparable<java.lang.String>) "");
        double double24 = frequency17.getPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n0\t1\t100%\t100%\n");
        boolean boolean25 = frequency0.equals((java.lang.Object) "Value \t Freq. \t Pct. \t Cum Pct. \n0\t1\t100%\t100%\n");
        long long27 = frequency0.getCount((int) ' ');
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str18, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
    }

    @Test
    public void test1775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1775");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getPct((java.lang.Object) (byte) -1);
        double double4 = frequency0.getPct(1);
        double double6 = frequency0.getCumPct((int) '4');
        frequency0.addValue((long) '#');
        long long10 = frequency0.getCount((long) 0);
        long long11 = frequency0.getSumFreq();
        frequency0.clear();
        org.apache.commons.math.stat.Frequency frequency13 = new org.apache.commons.math.stat.Frequency();
        double double15 = frequency13.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        java.lang.String str16 = frequency13.toString();
        java.lang.Object obj17 = null;
        double double18 = frequency13.getCumPct(obj17);
        double double20 = frequency13.getCumPct('a');
        double double22 = frequency13.getCumPct((int) (byte) 100);
        long long24 = frequency13.getCount(0L);
        frequency13.addValue((long) (byte) 0);
        long long28 = frequency13.getCumFreq((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        long long29 = frequency0.getCumFreq((java.lang.Object) long28);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1L + "'", long11 == 1L);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str16, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
    }

    @Test
    public void test1776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1776");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getPct((java.lang.Object) (byte) -1);
        long long4 = frequency0.getCumFreq((java.lang.Comparable<java.lang.String>) "hi!");
        long long6 = frequency0.getCumFreq('#');
        frequency0.addValue((java.lang.Integer) 1);
        frequency0.addValue((long) 100);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
    }

    @Test
    public void test1777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1777");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getPct((java.lang.Object) (byte) -1);
        double double4 = frequency0.getPct(1);
        double double6 = frequency0.getCumPct((int) '4');
        frequency0.addValue((long) '#');
        double double10 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        double double12 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "");
        java.lang.String str13 = frequency0.toString();
        long long15 = frequency0.getCount(1L);
        long long17 = frequency0.getCount('a');
        org.apache.commons.math.stat.Frequency frequency18 = new org.apache.commons.math.stat.Frequency();
        double double20 = frequency18.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double22 = frequency18.getPct(0);
        double double24 = frequency18.getCumPct('a');
        org.apache.commons.math.stat.Frequency frequency25 = new org.apache.commons.math.stat.Frequency();
        double double27 = frequency25.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        java.lang.String str28 = frequency25.toString();
        java.lang.Object obj29 = null;
        double double30 = frequency25.getCumPct(obj29);
        double double32 = frequency25.getCumPct('a');
        double double34 = frequency25.getCumPct((int) (byte) 100);
        long long36 = frequency25.getCount(0L);
        double double37 = frequency18.getPct((java.lang.Object) long36);
        long long39 = frequency18.getCount(100);
        boolean boolean40 = frequency0.equals((java.lang.Object) frequency18);
        org.apache.commons.math.stat.Frequency frequency41 = new org.apache.commons.math.stat.Frequency();
        double double43 = frequency41.getPct((java.lang.Object) (byte) -1);
        double double45 = frequency41.getPct(1);
        double double47 = frequency41.getCumPct((int) '4');
        double double49 = frequency41.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        frequency41.addValue((java.lang.Object) 1.0d);
        double double52 = frequency0.getCumPct((java.lang.Object) 1.0d);
        frequency0.addValue((int) ' ');
        // The following exception was thrown during execution in test generation
        try {
            frequency0.addValue((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n35\t1\t50%\t50%\n100\t1\t50%\t100%\n");
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n35\t1\t100%\t100%\n" + "'", str13, "Value \t Freq. \t Pct. \t Cum Pct. \n35\t1\t100%\t100%\n");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str28, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertTrue(Double.isNaN(double49));
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.0d + "'", double52 == 0.0d);
    }

    @Test
    public void test1778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1778");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        java.lang.String str3 = frequency0.toString();
        java.lang.Object obj4 = null;
        double double5 = frequency0.getCumPct(obj4);
        double double7 = frequency0.getCumPct('a');
        double double9 = frequency0.getCumPct((int) (byte) 100);
        long long11 = frequency0.getCount(0L);
        double double13 = frequency0.getCumPct((long) (short) -1);
        org.apache.commons.math.stat.Frequency frequency14 = new org.apache.commons.math.stat.Frequency();
        double double16 = frequency14.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double18 = frequency14.getCumPct((java.lang.Comparable<java.lang.String>) "");
        double double20 = frequency14.getPct((int) 'a');
        frequency14.addValue((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        long long24 = frequency14.getCount((int) '4');
        long long26 = frequency14.getCumFreq((long) ' ');
        double double27 = frequency0.getCumPct((java.lang.Object) ' ');
        long long29 = frequency0.getCumFreq((int) (byte) -1);
        double double31 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n35\t1\t100%\t100%\n");
        double double33 = frequency0.getPct((int) (short) 100);
        long long35 = frequency0.getCumFreq((java.lang.Comparable<java.lang.String>) "hi!");
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str3, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
    }

    @Test
    public void test1779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1779");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getPct((java.lang.Object) (byte) -1);
        frequency0.addValue((long) (short) 100);
        java.lang.Object obj5 = null;
        boolean boolean6 = frequency0.equals(obj5);
        org.apache.commons.math.stat.Frequency frequency7 = new org.apache.commons.math.stat.Frequency();
        double double9 = frequency7.getPct((java.lang.Object) (byte) -1);
        frequency7.addValue((long) (short) 100);
        java.lang.Object obj12 = null;
        boolean boolean13 = frequency7.equals(obj12);
        frequency7.addValue((int) (short) 1);
        long long17 = frequency7.getCumFreq((int) (byte) 1);
        double double18 = frequency0.getPct((java.lang.Object) (byte) 1);
        frequency0.addValue((long) (short) 0);
        double double22 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \nNaN\t1\t100%\t100%\n");
        long long24 = frequency0.getCumFreq('4');
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1L + "'", long17 == 1L);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
    }

    @Test
    public void test1780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1780");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double4 = frequency0.getCumPct((long) (short) 100);
        java.lang.Object obj5 = null;
        boolean boolean6 = frequency0.equals(obj5);
        long long8 = frequency0.getCount('a');
        long long10 = frequency0.getCount((int) (byte) 10);
        frequency0.addValue((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \nValue \t Freq. \t Pct. \t Cum Pct. \n\t1\t100%\t100%\n");
        long long14 = frequency0.getCount(' ');
        org.apache.commons.math.stat.Frequency frequency15 = new org.apache.commons.math.stat.Frequency();
        double double17 = frequency15.getPct((java.lang.Object) (byte) -1);
        double double19 = frequency15.getPct(1);
        double double21 = frequency15.getCumPct((int) '4');
        frequency15.addValue((long) '#');
        double double25 = frequency15.getPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        double double27 = frequency15.getPct((java.lang.Comparable<java.lang.String>) "");
        java.lang.String str28 = frequency15.toString();
        long long30 = frequency15.getCount(1L);
        long long32 = frequency15.getCount('a');
        org.apache.commons.math.stat.Frequency frequency33 = new org.apache.commons.math.stat.Frequency();
        double double35 = frequency33.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double37 = frequency33.getPct(0);
        double double39 = frequency33.getCumPct('a');
        org.apache.commons.math.stat.Frequency frequency40 = new org.apache.commons.math.stat.Frequency();
        double double42 = frequency40.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        java.lang.String str43 = frequency40.toString();
        java.lang.Object obj44 = null;
        double double45 = frequency40.getCumPct(obj44);
        double double47 = frequency40.getCumPct('a');
        double double49 = frequency40.getCumPct((int) (byte) 100);
        long long51 = frequency40.getCount(0L);
        double double52 = frequency33.getPct((java.lang.Object) long51);
        long long54 = frequency33.getCount(100);
        boolean boolean55 = frequency15.equals((java.lang.Object) frequency33);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor56 = frequency15.valuesIterator();
        boolean boolean57 = frequency0.equals((java.lang.Object) wildcardComparableItor56);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n35\t1\t100%\t100%\n" + "'", str28, "Value \t Freq. \t Pct. \t Cum Pct. \n35\t1\t100%\t100%\n");
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str43, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertTrue(Double.isNaN(double49));
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double52));
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 0L + "'", long54 == 0L);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(wildcardComparableItor56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
    }

    @Test
    public void test1781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1781");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getPct((java.lang.Object) (byte) -1);
        double double4 = frequency0.getPct(1);
        org.apache.commons.math.stat.Frequency frequency5 = new org.apache.commons.math.stat.Frequency();
        double double7 = frequency5.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double9 = frequency5.getPct(0);
        long long10 = frequency0.getCumFreq((java.lang.Object) double9);
        long long12 = frequency0.getCumFreq((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        frequency0.addValue((java.lang.Integer) 1);
        java.lang.String str15 = frequency0.toString();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n1\t1\t100%\t100%\n" + "'", str15, "Value \t Freq. \t Pct. \t Cum Pct. \n1\t1\t100%\t100%\n");
    }

    @Test
    public void test1782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1782");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double4 = frequency0.getCumPct((long) (short) 100);
        long long6 = frequency0.getCumFreq('#');
        org.apache.commons.math.stat.Frequency frequency7 = new org.apache.commons.math.stat.Frequency();
        double double9 = frequency7.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double11 = frequency7.getCumPct((long) (short) 100);
        long long13 = frequency7.getCumFreq('#');
        boolean boolean14 = frequency0.equals((java.lang.Object) long13);
        double double16 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "");
        org.apache.commons.math.stat.Frequency frequency17 = new org.apache.commons.math.stat.Frequency();
        double double19 = frequency17.getPct((java.lang.Object) (byte) -1);
        double double21 = frequency17.getPct(1);
        double double23 = frequency17.getCumPct((int) '4');
        double double25 = frequency17.getPct((long) (byte) 10);
        long long26 = frequency0.getCumFreq((java.lang.Object) (byte) 10);
        double double28 = frequency0.getCumPct(' ');
        frequency0.addValue((int) (byte) 10);
        double double32 = frequency0.getPct((java.lang.Object) (-1.0f));
        org.apache.commons.math.stat.Frequency frequency33 = new org.apache.commons.math.stat.Frequency();
        double double35 = frequency33.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double37 = frequency33.getCumPct((java.lang.Comparable<java.lang.String>) "");
        double double39 = frequency33.getPct((int) 'a');
        long long41 = frequency33.getCount((long) (byte) 1);
        long long43 = frequency33.getCumFreq((long) 100);
        frequency33.addValue((int) (byte) -1);
        double double46 = frequency0.getPct((java.lang.Object) (byte) -1);
        org.apache.commons.math.stat.Frequency frequency47 = new org.apache.commons.math.stat.Frequency();
        double double49 = frequency47.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double51 = frequency47.getCumPct((long) (short) 100);
        long long53 = frequency47.getCumFreq('#');
        double double55 = frequency47.getCumPct('4');
        long long56 = frequency47.getSumFreq();
        double double58 = frequency47.getCumPct((-1L));
        org.apache.commons.math.stat.Frequency frequency59 = new org.apache.commons.math.stat.Frequency();
        double double61 = frequency59.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double63 = frequency59.getCumPct((java.lang.Comparable<java.lang.String>) "");
        double double65 = frequency59.getPct((int) 'a');
        frequency59.addValue((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        frequency59.clear();
        double double70 = frequency59.getPct('4');
        long long71 = frequency47.getCount((java.lang.Object) double70);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor72 = frequency47.valuesIterator();
        boolean boolean73 = frequency0.equals((java.lang.Object) wildcardComparableItor72);
        org.apache.commons.math.stat.Frequency frequency74 = new org.apache.commons.math.stat.Frequency();
        double double76 = frequency74.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        java.lang.String str77 = frequency74.toString();
        java.lang.Object obj78 = null;
        double double79 = frequency74.getCumPct(obj78);
        double double81 = frequency74.getCumPct('a');
        double double83 = frequency74.getCumPct((int) (byte) 100);
        long long85 = frequency74.getCount(0L);
        frequency74.addValue((long) (byte) 0);
        long long89 = frequency74.getCumFreq((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        double double91 = frequency74.getCumPct(' ');
        long long92 = frequency0.getCumFreq((java.lang.Object) ' ');
        double double94 = frequency0.getCumPct(0);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.0d + "'", double46 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double49));
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double55));
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 0L + "'", long56 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double58));
        org.junit.Assert.assertTrue(Double.isNaN(double61));
        org.junit.Assert.assertTrue(Double.isNaN(double63));
        org.junit.Assert.assertTrue(Double.isNaN(double65));
        org.junit.Assert.assertTrue(Double.isNaN(double70));
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 0L + "'", long71 == 0L);
        org.junit.Assert.assertNotNull(wildcardComparableItor72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double76));
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str77, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue(Double.isNaN(double79));
        org.junit.Assert.assertTrue(Double.isNaN(double81));
        org.junit.Assert.assertTrue(Double.isNaN(double83));
        org.junit.Assert.assertTrue("'" + long85 + "' != '" + 0L + "'", long85 == 0L);
        org.junit.Assert.assertTrue("'" + long89 + "' != '" + 0L + "'", long89 == 0L);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 0.0d + "'", double91 == 0.0d);
        org.junit.Assert.assertTrue("'" + long92 + "' != '" + 0L + "'", long92 == 0L);
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + 0.0d + "'", double94 == 0.0d);
    }

    @Test
    public void test1783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1783");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        java.lang.String str1 = frequency0.toString();
        double double3 = frequency0.getCumPct('a');
        frequency0.addValue((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n35\t1\t100%\t100%\n");
        double double7 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n-1\t1\t100%\t100%\n");
        long long9 = frequency0.getCumFreq((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n0\t1\t50%\t50%\n10\t1\t50%\t100%\n");
        double double11 = frequency0.getCumPct((int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            frequency0.addValue(100);
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str1, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
    }

    @Test
    public void test1784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1784");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        java.lang.String str3 = frequency0.toString();
        java.lang.Object obj4 = null;
        double double5 = frequency0.getCumPct(obj4);
        double double7 = frequency0.getCumPct('a');
        double double9 = frequency0.getCumPct((int) (byte) 100);
        long long11 = frequency0.getCount(0L);
        java.lang.String str12 = frequency0.toString();
        double double14 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        java.lang.String str15 = frequency0.toString();
        org.apache.commons.math.stat.Frequency frequency16 = new org.apache.commons.math.stat.Frequency();
        double double18 = frequency16.getPct((java.lang.Object) (byte) -1);
        double double20 = frequency16.getPct(1);
        double double22 = frequency16.getCumPct((int) '4');
        frequency16.addValue((long) '#');
        double double26 = frequency16.getPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        frequency16.addValue((java.lang.Integer) 100);
        double double30 = frequency16.getPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        double double32 = frequency16.getCumPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n0\t1\t100%\t100%\n");
        boolean boolean33 = frequency0.equals((java.lang.Object) "Value \t Freq. \t Pct. \t Cum Pct. \n0\t1\t100%\t100%\n");
        frequency0.clear();
        frequency0.addValue(100);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str3, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str12, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str15, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.0d + "'", double26 == 0.0d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test1785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1785");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        long long4 = frequency0.getCount((long) (short) 100);
        org.apache.commons.math.stat.Frequency frequency5 = new org.apache.commons.math.stat.Frequency();
        double double7 = frequency5.getPct((java.lang.Object) (byte) -1);
        double double8 = frequency0.getPct((java.lang.Object) (byte) -1);
        double double10 = frequency0.getCumPct((java.lang.Object) (-1.0f));
        double double12 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n-1\t1\t100%\t100%\n");
        org.apache.commons.math.stat.Frequency frequency13 = new org.apache.commons.math.stat.Frequency();
        double double15 = frequency13.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        long long17 = frequency13.getCount((long) (byte) 10);
        double double19 = frequency13.getCumPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n0\t1\t50%\t50%\n10\t1\t50%\t100%\n");
        frequency0.addValue((java.lang.Object) double19);
        org.apache.commons.math.stat.Frequency frequency21 = new org.apache.commons.math.stat.Frequency();
        double double23 = frequency21.getPct((java.lang.Object) (byte) -1);
        double double25 = frequency21.getPct(1);
        double double27 = frequency21.getCumPct((int) '4');
        frequency21.addValue((long) '#');
        double double31 = frequency21.getPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        double double33 = frequency21.getPct((java.lang.Comparable<java.lang.String>) "");
        double double34 = frequency0.getCumPct((java.lang.Object) "");
        frequency0.clear();
        long long37 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n0\t1\t50%\t50%\n100\t1\t50%\t100%\n");
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.0d + "'", double33 == 0.0d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
    }

    @Test
    public void test1786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1786");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double4 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "");
        double double6 = frequency0.getPct((int) 'a');
        double double8 = frequency0.getCumPct(' ');
        long long9 = frequency0.getSumFreq();
        long long11 = frequency0.getCumFreq((java.lang.Comparable<java.lang.String>) "");
        org.apache.commons.math.stat.Frequency frequency12 = new org.apache.commons.math.stat.Frequency();
        double double14 = frequency12.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor15 = frequency12.valuesIterator();
        frequency12.clear();
        org.apache.commons.math.stat.Frequency frequency17 = new org.apache.commons.math.stat.Frequency();
        double double19 = frequency17.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        java.lang.String str20 = frequency17.toString();
        java.lang.Object obj21 = null;
        double double22 = frequency17.getCumPct(obj21);
        double double24 = frequency17.getCumPct('a');
        double double26 = frequency17.getCumPct((int) (byte) 100);
        frequency17.addValue((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        double double29 = frequency12.getPct((java.lang.Object) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        frequency0.addValue((java.lang.Object) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        frequency0.addValue((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n0\t1\t100%\t100%\n");
        long long34 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \na\t1\t100%\t100%\n");
        double double36 = frequency0.getCumPct((long) (short) -1);
        double double38 = frequency0.getPct((long) (byte) -1);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertNotNull(wildcardComparableItor15);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str20, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.0d + "'", double36 == 0.0d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
    }

    @Test
    public void test1787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1787");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getPct((java.lang.Object) (byte) -1);
        frequency0.addValue((long) (short) 100);
        frequency0.addValue((long) 0);
        long long8 = frequency0.getCount('a');
        long long10 = frequency0.getCumFreq((long) (short) -1);
        frequency0.addValue((long) (short) -1);
        org.apache.commons.math.stat.Frequency frequency13 = new org.apache.commons.math.stat.Frequency();
        double double15 = frequency13.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double17 = frequency13.getCumPct((long) (short) 100);
        long long19 = frequency13.getCumFreq('#');
        frequency13.addValue((java.lang.Integer) 0);
        double double23 = frequency13.getPct((int) (byte) 10);
        long long25 = frequency13.getCount((long) 1);
        double double27 = frequency13.getCumPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n0\t1\t100%\t100%\n");
        // The following exception was thrown during execution in test generation
        try {
            double double28 = frequency0.getPct((java.lang.Object) frequency13);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: org.apache.commons.math.stat.Frequency cannot be cast to java.lang.Comparable");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d);
    }

    @Test
    public void test1788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1788");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double4 = frequency0.getCumPct((long) (short) 100);
        long long6 = frequency0.getCumFreq('#');
        org.apache.commons.math.stat.Frequency frequency7 = new org.apache.commons.math.stat.Frequency();
        double double9 = frequency7.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double11 = frequency7.getCumPct((long) (short) 100);
        long long13 = frequency7.getCumFreq('#');
        boolean boolean14 = frequency0.equals((java.lang.Object) long13);
        double double16 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "");
        org.apache.commons.math.stat.Frequency frequency17 = new org.apache.commons.math.stat.Frequency();
        double double19 = frequency17.getPct((java.lang.Object) (byte) -1);
        double double21 = frequency17.getPct(1);
        double double23 = frequency17.getCumPct((int) '4');
        double double25 = frequency17.getPct((long) (byte) 10);
        long long26 = frequency0.getCumFreq((java.lang.Object) (byte) 10);
        long long28 = frequency0.getCumFreq((int) ' ');
        double double30 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n-1\t1\t100%\t100%\n");
        double double32 = frequency0.getCumPct((long) (byte) 1);
        frequency0.addValue((long) (-1));
        long long36 = frequency0.getCount((int) '#');
        org.apache.commons.math.stat.Frequency frequency37 = new org.apache.commons.math.stat.Frequency();
        double double39 = frequency37.getPct((java.lang.Object) (byte) -1);
        frequency37.addValue((long) (short) 100);
        frequency37.addValue((long) 0);
        long long45 = frequency37.getCount((int) (short) 100);
        org.apache.commons.math.stat.Frequency frequency46 = new org.apache.commons.math.stat.Frequency();
        double double48 = frequency46.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double50 = frequency46.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        long long51 = frequency37.getCumFreq((java.lang.Object) "hi!");
        org.apache.commons.math.stat.Frequency frequency52 = new org.apache.commons.math.stat.Frequency();
        double double54 = frequency52.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double56 = frequency52.getCumPct((long) (short) 100);
        long long58 = frequency52.getCumFreq('#');
        double double60 = frequency52.getCumPct((int) (byte) 0);
        frequency52.addValue((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        long long64 = frequency52.getCount('a');
        frequency52.addValue((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n100\t1\t100%\t100%\n");
        long long67 = frequency37.getCount((java.lang.Object) "Value \t Freq. \t Pct. \t Cum Pct. \n100\t1\t100%\t100%\n");
        boolean boolean68 = frequency0.equals((java.lang.Object) frequency37);
        org.apache.commons.math.stat.Frequency frequency69 = new org.apache.commons.math.stat.Frequency();
        double double71 = frequency69.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        long long73 = frequency69.getCount((java.lang.Object) 1L);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor74 = frequency69.valuesIterator();
        double double76 = frequency69.getPct((long) (short) 10);
        double double77 = frequency37.getCumPct((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.Frequency frequency78 = new org.apache.commons.math.stat.Frequency();
        double double80 = frequency78.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        long long82 = frequency78.getCount((long) (short) 100);
        org.apache.commons.math.stat.Frequency frequency83 = new org.apache.commons.math.stat.Frequency();
        double double85 = frequency83.getPct((java.lang.Object) (byte) -1);
        double double86 = frequency78.getPct((java.lang.Object) (byte) -1);
        double double88 = frequency78.getCumPct((java.lang.Object) (-1.0f));
        double double90 = frequency78.getCumPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n-1\t1\t100%\t100%\n");
        frequency78.addValue((int) ' ');
        // The following exception was thrown during execution in test generation
        try {
            double double93 = frequency37.getCumPct((java.lang.Object) frequency78);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: org.apache.commons.math.stat.Frequency cannot be cast to java.lang.Comparable");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 1L + "'", long45 == 1L);
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertTrue(Double.isNaN(double50));
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertTrue(Double.isNaN(double56));
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 0L + "'", long58 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double60));
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 0L + "'", long64 == 0L);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 0L + "'", long67 == 0L);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double71));
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 0L + "'", long73 == 0L);
        org.junit.Assert.assertNotNull(wildcardComparableItor74);
        org.junit.Assert.assertTrue(Double.isNaN(double76));
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 0.0d + "'", double77 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double80));
        org.junit.Assert.assertTrue("'" + long82 + "' != '" + 0L + "'", long82 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double85));
        org.junit.Assert.assertTrue(Double.isNaN(double86));
        org.junit.Assert.assertTrue(Double.isNaN(double88));
        org.junit.Assert.assertTrue(Double.isNaN(double90));
    }

    @Test
    public void test1789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1789");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        java.lang.String str3 = frequency0.toString();
        java.lang.Object obj4 = null;
        double double5 = frequency0.getCumPct(obj4);
        double double7 = frequency0.getCumPct('a');
        double double9 = frequency0.getPct(1);
        org.apache.commons.math.stat.Frequency frequency10 = new org.apache.commons.math.stat.Frequency();
        double double12 = frequency10.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        java.lang.String str13 = frequency10.toString();
        java.lang.Object obj14 = null;
        double double15 = frequency10.getCumPct(obj14);
        double double17 = frequency10.getCumPct('a');
        double double19 = frequency10.getCumPct((int) (byte) 100);
        frequency10.addValue((java.lang.Integer) 0);
        double double23 = frequency10.getCumPct((int) ' ');
        frequency0.addValue((java.lang.Object) double23);
        org.apache.commons.math.stat.Frequency frequency25 = new org.apache.commons.math.stat.Frequency();
        double double27 = frequency25.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double29 = frequency25.getCumPct((java.lang.Comparable<java.lang.String>) "");
        double double31 = frequency25.getPct((int) 'a');
        frequency25.addValue((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        long long34 = frequency25.getSumFreq();
        boolean boolean35 = frequency0.equals((java.lang.Object) frequency25);
        double double37 = frequency25.getPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \nValue \t Freq. \t Pct. \t Cum Pct. \n\t1\t100%\t100%\n");
        double double39 = frequency25.getCumPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n#\t1\t100%\t100%\n");
        double double41 = frequency25.getCumPct('a');
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str3, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str13, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 1.0d + "'", double23 == 1.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 1L + "'", long34 == 1L);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 1.0d + "'", double39 == 1.0d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.0d + "'", double41 == 0.0d);
    }

    @Test
    public void test1790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1790");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double4 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "");
        double double6 = frequency0.getPct((int) 'a');
        frequency0.addValue((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        long long9 = frequency0.getSumFreq();
        org.apache.commons.math.stat.Frequency frequency10 = new org.apache.commons.math.stat.Frequency();
        double double12 = frequency10.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double14 = frequency10.getCumPct((long) (short) 100);
        long long16 = frequency10.getCumFreq('#');
        org.apache.commons.math.stat.Frequency frequency17 = new org.apache.commons.math.stat.Frequency();
        double double19 = frequency17.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double21 = frequency17.getCumPct((long) (short) 100);
        long long23 = frequency17.getCumFreq('#');
        boolean boolean24 = frequency10.equals((java.lang.Object) long23);
        double double26 = frequency10.getCumPct((java.lang.Comparable<java.lang.String>) "");
        org.apache.commons.math.stat.Frequency frequency27 = new org.apache.commons.math.stat.Frequency();
        double double29 = frequency27.getPct((java.lang.Object) (byte) -1);
        double double31 = frequency27.getPct(1);
        double double33 = frequency27.getCumPct((int) '4');
        double double35 = frequency27.getPct((long) (byte) 10);
        long long36 = frequency10.getCumFreq((java.lang.Object) (byte) 10);
        double double38 = frequency10.getCumPct(' ');
        frequency10.addValue((int) (byte) 10);
        long long42 = frequency10.getCumFreq((long) (short) 1);
        frequency10.addValue((java.lang.Integer) 1);
        double double45 = frequency0.getCumPct((java.lang.Object) 1);
        // The following exception was thrown during execution in test generation
        try {
            frequency0.addValue((java.lang.Integer) (-1));
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1L + "'", long9 == 1L);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.0d + "'", double45 == 0.0d);
    }

    @Test
    public void test1791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1791");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double4 = frequency0.getCumPct((long) (short) 100);
        long long6 = frequency0.getCumFreq('#');
        org.apache.commons.math.stat.Frequency frequency7 = new org.apache.commons.math.stat.Frequency();
        double double9 = frequency7.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double11 = frequency7.getCumPct((long) (short) 100);
        long long13 = frequency7.getCumFreq('#');
        boolean boolean14 = frequency0.equals((java.lang.Object) long13);
        double double16 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "");
        long long18 = frequency0.getCount('4');
        long long20 = frequency0.getCumFreq((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n#\t1\t100%\t100%\n");
        long long22 = frequency0.getCount((int) ' ');
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
    }

    @Test
    public void test1792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1792");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double4 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "");
        double double6 = frequency0.getPct((int) 'a');
        long long8 = frequency0.getCount((long) (byte) 1);
        frequency0.addValue('a');
        long long12 = frequency0.getCount('#');
        double double14 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n100\t1\t100%\t100%\n");
        org.apache.commons.math.stat.Frequency frequency15 = new org.apache.commons.math.stat.Frequency();
        double double17 = frequency15.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double19 = frequency15.getCumPct((long) (short) 100);
        long long21 = frequency15.getCumFreq('#');
        frequency15.addValue((java.lang.Integer) 0);
        double double25 = frequency15.getCumPct((java.lang.Object) 10L);
        long long27 = frequency15.getCount((int) (short) 1);
        double double29 = frequency15.getCumPct('#');
        long long30 = frequency0.getCumFreq((java.lang.Object) double29);
        long long32 = frequency0.getCount((long) 10);
        frequency0.clear();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 1.0d + "'", double25 == 1.0d);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
    }

    @Test
    public void test1793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1793");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        long long4 = frequency0.getCount((long) (short) 100);
        double double6 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "");
        long long8 = frequency0.getCumFreq((long) (-1));
        org.apache.commons.math.stat.Frequency frequency9 = new org.apache.commons.math.stat.Frequency();
        double double11 = frequency9.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double13 = frequency9.getCumPct((java.lang.Comparable<java.lang.String>) "");
        double double15 = frequency9.getPct((int) 'a');
        long long17 = frequency9.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        double double19 = frequency9.getCumPct('a');
        org.apache.commons.math.stat.Frequency frequency20 = new org.apache.commons.math.stat.Frequency();
        double double22 = frequency20.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double24 = frequency20.getCumPct((long) (short) 100);
        long long26 = frequency20.getCumFreq((long) (byte) -1);
        double double27 = frequency9.getPct((java.lang.Object) long26);
        boolean boolean29 = frequency9.equals((java.lang.Object) 10);
        java.lang.String str30 = frequency9.toString();
        long long32 = frequency9.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        double double33 = frequency0.getPct((java.lang.Object) long32);
        frequency0.addValue(100);
        double double37 = frequency0.getPct('a');
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str30, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d);
    }

    @Test
    public void test1794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1794");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double4 = frequency0.getCumPct((long) (short) 100);
        long long6 = frequency0.getCumFreq('#');
        frequency0.addValue((java.lang.Integer) 0);
        double double10 = frequency0.getPct((int) (byte) 10);
        java.lang.String str11 = frequency0.toString();
        double double13 = frequency0.getCumPct(0L);
        long long15 = frequency0.getCumFreq(100);
        org.apache.commons.math.stat.Frequency frequency16 = new org.apache.commons.math.stat.Frequency();
        double double18 = frequency16.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double20 = frequency16.getPct(0);
        double double22 = frequency16.getCumPct('a');
        org.apache.commons.math.stat.Frequency frequency23 = new org.apache.commons.math.stat.Frequency();
        double double25 = frequency23.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        java.lang.String str26 = frequency23.toString();
        java.lang.Object obj27 = null;
        double double28 = frequency23.getCumPct(obj27);
        double double30 = frequency23.getCumPct('a');
        double double32 = frequency23.getCumPct((int) (byte) 100);
        long long34 = frequency23.getCount(0L);
        double double35 = frequency16.getPct((java.lang.Object) long34);
        long long36 = frequency0.getCumFreq((java.lang.Object) long34);
        double double38 = frequency0.getPct('#');
        double double40 = frequency0.getPct((-1));
        long long41 = frequency0.getSumFreq();
        long long43 = frequency0.getCount(' ');
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n0\t1\t100%\t100%\n" + "'", str11, "Value \t Freq. \t Pct. \t Cum Pct. \n0\t1\t100%\t100%\n");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 1.0d + "'", double13 == 1.0d);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1L + "'", long15 == 1L);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str26, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 1L + "'", long36 == 1L);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.0d + "'", double40 == 0.0d);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 1L + "'", long41 == 1L);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
    }

    @Test
    public void test1795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1795");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        java.lang.String str3 = frequency0.toString();
        org.apache.commons.math.stat.Frequency frequency4 = new org.apache.commons.math.stat.Frequency();
        double double6 = frequency4.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double8 = frequency4.getCumPct((long) (short) 100);
        long long10 = frequency4.getCumFreq('#');
        java.lang.Class<?> wildcardClass11 = frequency4.getClass();
        boolean boolean12 = frequency0.equals((java.lang.Object) wildcardClass11);
        frequency0.clear();
        double double15 = frequency0.getCumPct((int) (short) 0);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor16 = frequency0.valuesIterator();
        long long18 = frequency0.getCount(100L);
        frequency0.addValue((long) (short) -1);
        double double22 = frequency0.getCumPct((long) (byte) -1);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str3, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertNotNull(wildcardComparableItor16);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d);
    }

    @Test
    public void test1796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1796");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getPct((java.lang.Object) (byte) -1);
        double double4 = frequency0.getPct(1);
        double double6 = frequency0.getCumPct((int) '4');
        frequency0.addValue((long) '#');
        double double10 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        frequency0.addValue((java.lang.Integer) 100);
        org.apache.commons.math.stat.Frequency frequency13 = new org.apache.commons.math.stat.Frequency();
        double double15 = frequency13.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double17 = frequency13.getPct(0);
        double double19 = frequency13.getCumPct('a');
        long long21 = frequency13.getCount(1);
        double double23 = frequency13.getPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        double double25 = frequency13.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean26 = frequency0.equals((java.lang.Object) frequency13);
        org.apache.commons.math.stat.Frequency frequency27 = new org.apache.commons.math.stat.Frequency();
        double double29 = frequency27.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double31 = frequency27.getCumPct((java.lang.Comparable<java.lang.String>) "");
        double double33 = frequency27.getPct((int) 'a');
        long long35 = frequency27.getCount((long) (byte) 1);
        long long37 = frequency27.getCumFreq((long) 100);
        org.apache.commons.math.stat.Frequency frequency38 = new org.apache.commons.math.stat.Frequency();
        double double40 = frequency38.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        long long42 = frequency38.getCount((java.lang.Object) 1L);
        long long44 = frequency38.getCumFreq('4');
        long long46 = frequency38.getCumFreq((java.lang.Object) true);
        frequency27.addValue((java.lang.Object) long46);
        double double49 = frequency27.getPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n100\t1\t100%\t100%\n");
        double double50 = frequency0.getPct((java.lang.Object) double49);
        long long52 = frequency0.getCumFreq(' ');
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.0d + "'", double50 == 0.0d);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
    }

    @Test
    public void test1797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1797");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double4 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "");
        double double6 = frequency0.getPct((int) 'a');
        long long8 = frequency0.getCumFreq(100);
        long long10 = frequency0.getCumFreq('4');
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
    }

    @Test
    public void test1798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1798");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double4 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "");
        double double6 = frequency0.getPct((int) 'a');
        long long8 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        double double10 = frequency0.getCumPct('a');
        org.apache.commons.math.stat.Frequency frequency11 = new org.apache.commons.math.stat.Frequency();
        double double13 = frequency11.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double15 = frequency11.getCumPct((long) (short) 100);
        long long17 = frequency11.getCumFreq((long) (byte) -1);
        double double18 = frequency0.getPct((java.lang.Object) long17);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor19 = frequency0.valuesIterator();
        long long21 = frequency0.getCount(' ');
        long long23 = frequency0.getCount((long) (-1));
        double double25 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n35\t1\t100%\t100%\n");
        frequency0.addValue(' ');
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertNotNull(wildcardComparableItor19);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double25));
    }

    @Test
    public void test1799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1799");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        long long4 = frequency0.getCount((long) (short) 100);
        org.apache.commons.math.stat.Frequency frequency5 = new org.apache.commons.math.stat.Frequency();
        double double7 = frequency5.getPct((java.lang.Object) (byte) -1);
        double double8 = frequency0.getPct((java.lang.Object) (byte) -1);
        double double10 = frequency0.getCumPct((java.lang.Object) (-1.0f));
        long long12 = frequency0.getCount('#');
        long long14 = frequency0.getCumFreq((java.lang.Object) '#');
        frequency0.addValue((int) 'a');
        double double18 = frequency0.getPct('4');
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
    }

    @Test
    public void test1800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1800");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor3 = frequency0.valuesIterator();
        frequency0.clear();
        org.apache.commons.math.stat.Frequency frequency5 = new org.apache.commons.math.stat.Frequency();
        double double7 = frequency5.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        java.lang.String str8 = frequency5.toString();
        java.lang.Object obj9 = null;
        double double10 = frequency5.getCumPct(obj9);
        double double12 = frequency5.getCumPct('a');
        double double14 = frequency5.getCumPct((int) (byte) 100);
        frequency5.addValue((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        double double17 = frequency0.getPct((java.lang.Object) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        long long19 = frequency0.getCumFreq((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \nNaN\t1\t100%\t100%\n");
        org.apache.commons.math.stat.Frequency frequency20 = new org.apache.commons.math.stat.Frequency();
        double double22 = frequency20.getPct((java.lang.Object) (byte) -1);
        double double24 = frequency20.getPct(1);
        double double26 = frequency20.getCumPct((int) '4');
        frequency20.addValue((long) '#');
        double double30 = frequency20.getPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        double double32 = frequency20.getPct((java.lang.Comparable<java.lang.String>) "");
        java.lang.String str33 = frequency20.toString();
        long long35 = frequency20.getCount(1L);
        long long37 = frequency20.getCount('a');
        org.apache.commons.math.stat.Frequency frequency38 = new org.apache.commons.math.stat.Frequency();
        double double40 = frequency38.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double42 = frequency38.getPct(0);
        double double44 = frequency38.getCumPct('a');
        org.apache.commons.math.stat.Frequency frequency45 = new org.apache.commons.math.stat.Frequency();
        double double47 = frequency45.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        java.lang.String str48 = frequency45.toString();
        java.lang.Object obj49 = null;
        double double50 = frequency45.getCumPct(obj49);
        double double52 = frequency45.getCumPct('a');
        double double54 = frequency45.getCumPct((int) (byte) 100);
        long long56 = frequency45.getCount(0L);
        double double57 = frequency38.getPct((java.lang.Object) long56);
        long long59 = frequency38.getCount(100);
        boolean boolean60 = frequency20.equals((java.lang.Object) frequency38);
        long long62 = frequency38.getCount((long) (byte) 10);
        double double63 = frequency0.getCumPct((java.lang.Object) (byte) 10);
        double double65 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \nValue \t Freq. \t Pct. \t Cum Pct. \n100\t1\t100%\t100%\n\t1\t100%\t100%\n");
        double double67 = frequency0.getCumPct((long) 10);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertNotNull(wildcardComparableItor3);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str8, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n35\t1\t100%\t100%\n" + "'", str33, "Value \t Freq. \t Pct. \t Cum Pct. \n35\t1\t100%\t100%\n");
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str48, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue(Double.isNaN(double50));
        org.junit.Assert.assertTrue(Double.isNaN(double52));
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 0L + "'", long56 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double57));
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 0L + "'", long59 == 0L);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 0L + "'", long62 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double63));
        org.junit.Assert.assertTrue(Double.isNaN(double65));
        org.junit.Assert.assertTrue(Double.isNaN(double67));
    }

    @Test
    public void test1801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1801");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double4 = frequency0.getCumPct((long) (short) 100);
        long long6 = frequency0.getCumFreq((long) (byte) -1);
        long long8 = frequency0.getCount((long) (short) 1);
        long long10 = frequency0.getCount((java.lang.Object) 10.0d);
        frequency0.addValue((int) '4');
        long long14 = frequency0.getCumFreq('a');
        frequency0.addValue((long) (short) -1);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
    }

    @Test
    public void test1802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1802");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double4 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "");
        double double6 = frequency0.getPct((int) 'a');
        long long8 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        double double10 = frequency0.getCumPct('a');
        org.apache.commons.math.stat.Frequency frequency11 = new org.apache.commons.math.stat.Frequency();
        double double13 = frequency11.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double15 = frequency11.getCumPct((long) (short) 100);
        long long17 = frequency11.getCumFreq((long) (byte) -1);
        double double18 = frequency0.getPct((java.lang.Object) long17);
        boolean boolean20 = frequency0.equals((java.lang.Object) 10);
        java.lang.String str21 = frequency0.toString();
        double double23 = frequency0.getCumPct((int) (byte) 10);
        double double25 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        frequency0.addValue('#');
        double double29 = frequency0.getCumPct('a');
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str21, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 1.0d + "'", double29 == 1.0d);
    }

    @Test
    public void test1803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1803");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        java.lang.String str3 = frequency0.toString();
        java.lang.Object obj4 = null;
        double double5 = frequency0.getCumPct(obj4);
        double double7 = frequency0.getCumPct('a');
        double double9 = frequency0.getCumPct((int) (byte) 100);
        long long11 = frequency0.getCount(0L);
        double double13 = frequency0.getCumPct((long) (short) -1);
        long long14 = frequency0.getSumFreq();
        frequency0.addValue((int) (byte) 100);
        org.apache.commons.math.stat.Frequency frequency17 = new org.apache.commons.math.stat.Frequency();
        double double19 = frequency17.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        long long21 = frequency17.getCount((java.lang.Object) 1L);
        long long23 = frequency17.getCumFreq('4');
        long long25 = frequency17.getCumFreq((java.lang.Object) true);
        double double27 = frequency17.getCumPct(' ');
        long long29 = frequency17.getCumFreq((int) '#');
        org.apache.commons.math.stat.Frequency frequency30 = new org.apache.commons.math.stat.Frequency();
        double double32 = frequency30.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double34 = frequency30.getCumPct((java.lang.Comparable<java.lang.String>) "");
        double double36 = frequency30.getPct((int) 'a');
        long long38 = frequency30.getCount((long) (byte) 1);
        boolean boolean39 = frequency17.equals((java.lang.Object) frequency30);
        long long41 = frequency30.getCumFreq((long) (short) 1);
        double double42 = frequency0.getPct((java.lang.Object) (short) 1);
        long long44 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n-1\t1\t100%\t100%\n");
        long long46 = frequency0.getCount((-1));
        long long48 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n-1\t1\t100%\t100%\n");
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor49 = frequency0.valuesIterator();
        long long51 = frequency0.getCount((int) (short) 100);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str3, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.0d + "'", double42 == 0.0d);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertNotNull(wildcardComparableItor49);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 1L + "'", long51 == 1L);
    }

    @Test
    public void test1804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1804");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double4 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "");
        double double6 = frequency0.getPct((int) 'a');
        long long8 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        double double10 = frequency0.getCumPct('a');
        long long12 = frequency0.getCumFreq((int) '#');
        double double14 = frequency0.getCumPct((long) (short) 10);
        long long16 = frequency0.getCumFreq('4');
        long long18 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n100\t1\t100%\t100%\n");
        double double20 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n-1\t1\t100%\t100%\n");
        double double22 = frequency0.getCumPct((int) (byte) 1);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue(Double.isNaN(double22));
    }

    @Test
    public void test1805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1805");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        java.lang.String str3 = frequency0.toString();
        java.lang.Object obj4 = null;
        double double5 = frequency0.getCumPct(obj4);
        double double7 = frequency0.getCumPct('a');
        double double9 = frequency0.getPct(1);
        org.apache.commons.math.stat.Frequency frequency10 = new org.apache.commons.math.stat.Frequency();
        double double12 = frequency10.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        java.lang.String str13 = frequency10.toString();
        java.lang.Object obj14 = null;
        double double15 = frequency10.getCumPct(obj14);
        double double17 = frequency10.getCumPct('a');
        double double19 = frequency10.getCumPct((int) (byte) 100);
        frequency10.addValue((java.lang.Integer) 0);
        double double23 = frequency10.getCumPct((int) ' ');
        frequency0.addValue((java.lang.Object) double23);
        org.apache.commons.math.stat.Frequency frequency25 = new org.apache.commons.math.stat.Frequency();
        double double27 = frequency25.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double29 = frequency25.getCumPct((java.lang.Comparable<java.lang.String>) "");
        double double31 = frequency25.getPct((int) 'a');
        frequency25.addValue((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        long long34 = frequency25.getSumFreq();
        boolean boolean35 = frequency0.equals((java.lang.Object) frequency25);
        double double37 = frequency25.getPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \nValue \t Freq. \t Pct. \t Cum Pct. \n\t1\t100%\t100%\n");
        double double39 = frequency25.getCumPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n#\t1\t100%\t100%\n");
        java.lang.String str40 = frequency25.toString();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str3, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str13, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 1.0d + "'", double23 == 1.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 1L + "'", long34 == 1L);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 1.0d + "'", double39 == 1.0d);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \nValue \t Freq. \t Pct. \t Cum Pct. \n\t1\t100%\t100%\n" + "'", str40, "Value \t Freq. \t Pct. \t Cum Pct. \nValue \t Freq. \t Pct. \t Cum Pct. \n\t1\t100%\t100%\n");
    }

    @Test
    public void test1806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1806");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        java.lang.String str3 = frequency0.toString();
        java.lang.Object obj4 = null;
        double double5 = frequency0.getCumPct(obj4);
        double double7 = frequency0.getCumPct('a');
        double double9 = frequency0.getCumPct((int) (byte) 100);
        frequency0.addValue((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        long long13 = frequency0.getCumFreq((int) (short) 10);
        long long15 = frequency0.getCumFreq((int) (short) 100);
        long long17 = frequency0.getCumFreq(2L);
        double double19 = frequency0.getPct(' ');
        double double21 = frequency0.getCumPct('4');
        double double23 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n1\t1\t100%\t100%\n");
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str3, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 1.0d + "'", double23 == 1.0d);
    }

    @Test
    public void test1807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1807");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        long long4 = frequency0.getCount((java.lang.Object) 1L);
        double double6 = frequency0.getCumPct(1);
        double double8 = frequency0.getPct((long) (-1));
        long long10 = frequency0.getCumFreq((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n32\t1\t100%\t100%\n");
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
    }

    @Test
    public void test1808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1808");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getPct((java.lang.Object) (byte) -1);
        double double4 = frequency0.getPct(1);
        double double6 = frequency0.getCumPct((int) '4');
        frequency0.addValue((long) '#');
        double double10 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        frequency0.addValue((java.lang.Integer) 100);
        double double14 = frequency0.getCumPct((int) ' ');
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
    }

    @Test
    public void test1809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1809");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double4 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "");
        double double6 = frequency0.getPct((int) 'a');
        long long8 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        double double10 = frequency0.getCumPct('a');
        org.apache.commons.math.stat.Frequency frequency11 = new org.apache.commons.math.stat.Frequency();
        double double13 = frequency11.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double15 = frequency11.getCumPct((long) (short) 100);
        long long17 = frequency11.getCumFreq((long) (byte) -1);
        double double18 = frequency0.getPct((java.lang.Object) long17);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor19 = frequency0.valuesIterator();
        long long21 = frequency0.getCumFreq('#');
        frequency0.addValue(10L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertNotNull(wildcardComparableItor19);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
    }

    @Test
    public void test1810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1810");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getPct((java.lang.Object) (byte) -1);
        double double4 = frequency0.getPct(1);
        double double6 = frequency0.getCumPct((int) '4');
        double double8 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        frequency0.addValue((java.lang.Object) 1.0d);
        double double12 = frequency0.getPct(1);
        long long14 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "");
        double double16 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double18 = frequency0.getPct((java.lang.Object) "");
        org.apache.commons.math.stat.Frequency frequency19 = new org.apache.commons.math.stat.Frequency();
        double double21 = frequency19.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double23 = frequency19.getCumPct((java.lang.Comparable<java.lang.String>) "");
        double double25 = frequency19.getPct((int) 'a');
        long long27 = frequency19.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        double double29 = frequency19.getCumPct('a');
        org.apache.commons.math.stat.Frequency frequency30 = new org.apache.commons.math.stat.Frequency();
        double double32 = frequency30.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double34 = frequency30.getCumPct((long) (short) 100);
        long long36 = frequency30.getCumFreq((long) (byte) -1);
        double double37 = frequency19.getPct((java.lang.Object) long36);
        boolean boolean39 = frequency19.equals((java.lang.Object) 10);
        java.lang.String str40 = frequency19.toString();
        long long42 = frequency19.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        long long44 = frequency19.getCount((long) (-1));
        boolean boolean45 = frequency0.equals((java.lang.Object) (-1));
        frequency0.clear();
        double double48 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \nValue \t Freq. \t Pct. \t Cum Pct. \n\t1\t100%\t100%\n");
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str40, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double48));
    }

    @Test
    public void test1811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1811");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        java.lang.String str3 = frequency0.toString();
        java.lang.Object obj4 = null;
        double double5 = frequency0.getCumPct(obj4);
        double double7 = frequency0.getCumPct('a');
        double double9 = frequency0.getCumPct((int) (byte) 100);
        long long11 = frequency0.getCount(0L);
        double double13 = frequency0.getCumPct((long) (short) -1);
        org.apache.commons.math.stat.Frequency frequency14 = new org.apache.commons.math.stat.Frequency();
        double double16 = frequency14.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double18 = frequency14.getCumPct((java.lang.Comparable<java.lang.String>) "");
        double double20 = frequency14.getPct((int) 'a');
        frequency14.addValue((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        long long24 = frequency14.getCount((int) '4');
        long long26 = frequency14.getCumFreq((long) ' ');
        double double27 = frequency0.getCumPct((java.lang.Object) ' ');
        org.apache.commons.math.stat.Frequency frequency28 = new org.apache.commons.math.stat.Frequency();
        double double30 = frequency28.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double32 = frequency28.getPct(0);
        double double34 = frequency28.getCumPct('a');
        frequency28.addValue((int) (byte) 10);
        long long37 = frequency0.getCumFreq((java.lang.Object) (byte) 10);
        double double39 = frequency0.getCumPct(1);
        long long40 = frequency0.getSumFreq();
        frequency0.addValue(0L);
        frequency0.addValue((int) '4');
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str3, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
    }

    @Test
    public void test1812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1812");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        java.lang.String str1 = frequency0.toString();
        long long3 = frequency0.getCount((int) (byte) 1);
        org.apache.commons.math.stat.Frequency frequency4 = new org.apache.commons.math.stat.Frequency();
        double double6 = frequency4.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double8 = frequency4.getCumPct((java.lang.Comparable<java.lang.String>) "");
        double double10 = frequency4.getPct((int) 'a');
        long long12 = frequency4.getCount((long) (byte) 1);
        long long14 = frequency4.getCumFreq((long) 100);
        frequency4.addValue((int) (byte) -1);
        long long17 = frequency0.getCount((java.lang.Object) (byte) -1);
        java.lang.Object obj18 = null;
        long long19 = frequency0.getCumFreq(obj18);
        double double21 = frequency0.getCumPct(' ');
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str1, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
    }

    @Test
    public void test1813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1813");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        java.lang.String str3 = frequency0.toString();
        java.lang.Object obj4 = null;
        double double5 = frequency0.getCumPct(obj4);
        double double7 = frequency0.getCumPct('a');
        double double9 = frequency0.getCumPct((int) (byte) 100);
        long long11 = frequency0.getCount(0L);
        double double13 = frequency0.getCumPct((long) (short) -1);
        long long14 = frequency0.getSumFreq();
        double double16 = frequency0.getPct(0L);
        org.apache.commons.math.stat.Frequency frequency17 = new org.apache.commons.math.stat.Frequency();
        double double19 = frequency17.getPct((java.lang.Object) (byte) -1);
        double double21 = frequency17.getPct(1);
        double double23 = frequency17.getCumPct((int) '4');
        long long25 = frequency17.getCount((int) (byte) 10);
        double double27 = frequency17.getPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n0\t1\t100%\t100%\n");
        boolean boolean28 = frequency0.equals((java.lang.Object) frequency17);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str3, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
    }

    @Test
    public void test1814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1814");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency();
        double double3 = frequency1.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double5 = frequency1.getCumPct((java.lang.Comparable<java.lang.String>) "");
        double double6 = frequency0.getCumPct((java.lang.Object) "");
        frequency0.addValue((java.lang.Integer) 1);
        long long10 = frequency0.getCumFreq(' ');
        long long12 = frequency0.getCumFreq(10L);
        long long14 = frequency0.getCount((long) (byte) 100);
        double double16 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \nhi!\t1\t100%\t100%\n");
        frequency0.clear();
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
    }

    @Test
    public void test1815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1815");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double4 = frequency0.getCumPct((long) (short) 100);
        long long6 = frequency0.getCumFreq('#');
        double double8 = frequency0.getCumPct('4');
        long long9 = frequency0.getSumFreq();
        double double11 = frequency0.getCumPct((-1L));
        long long12 = frequency0.getSumFreq();
        long long14 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \nValue \t Freq. \t Pct. \t Cum Pct. \n\t1\t100%\t100%\n");
        frequency0.addValue((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \nValue \t Freq. \t Pct. \t Cum Pct. \n100\t1\t100%\t100%\n\t1\t100%\t100%\n");
        double double18 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \nNaN\t1\t100%\t100%\n");
        double double20 = frequency0.getCumPct(' ');
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
    }

    @Test
    public void test1816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1816");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        long long4 = frequency0.getCount((long) (short) 100);
        frequency0.addValue((long) (byte) 1);
        long long8 = frequency0.getCumFreq('#');
        double double10 = frequency0.getCumPct('4');
        double double12 = frequency0.getCumPct('a');
        org.apache.commons.math.stat.Frequency frequency13 = new org.apache.commons.math.stat.Frequency();
        double double15 = frequency13.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        long long17 = frequency13.getCount((long) (short) 100);
        frequency13.clear();
        frequency13.addValue('#');
        org.apache.commons.math.stat.Frequency frequency21 = new org.apache.commons.math.stat.Frequency();
        double double23 = frequency21.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double25 = frequency21.getCumPct((long) (short) 100);
        long long27 = frequency21.getCumFreq((long) (byte) -1);
        long long29 = frequency21.getCumFreq((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n-1\t1\t100%\t100%\n");
        long long30 = frequency13.getCumFreq((java.lang.Object) "Value \t Freq. \t Pct. \t Cum Pct. \n-1\t1\t100%\t100%\n");
        double double32 = frequency13.getCumPct((int) (byte) -1);
        long long34 = frequency13.getCount(' ');
        frequency13.addValue('a');
        double double37 = frequency0.getPct((java.lang.Object) 'a');
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d);
    }

    @Test
    public void test1817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1817");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double4 = frequency0.getCumPct((long) (short) 100);
        long long6 = frequency0.getCumFreq('#');
        frequency0.addValue((java.lang.Integer) 0);
        double double10 = frequency0.getPct((int) (byte) 10);
        java.lang.String str11 = frequency0.toString();
        double double13 = frequency0.getCumPct(0L);
        long long15 = frequency0.getCumFreq(100);
        double double17 = frequency0.getCumPct((int) '4');
        double double19 = frequency0.getCumPct('a');
        long long21 = frequency0.getCount((-1));
        org.apache.commons.math.stat.Frequency frequency22 = new org.apache.commons.math.stat.Frequency();
        double double24 = frequency22.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        long long26 = frequency22.getCount((long) (short) 100);
        org.apache.commons.math.stat.Frequency frequency27 = new org.apache.commons.math.stat.Frequency();
        double double29 = frequency27.getPct((java.lang.Object) (byte) -1);
        double double30 = frequency22.getPct((java.lang.Object) (byte) -1);
        double double32 = frequency22.getCumPct((java.lang.Object) (-1.0f));
        double double34 = frequency22.getPct('a');
        frequency22.clear();
        org.apache.commons.math.stat.Frequency frequency36 = new org.apache.commons.math.stat.Frequency();
        double double38 = frequency36.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double40 = frequency36.getCumPct((java.lang.Comparable<java.lang.String>) "");
        double double42 = frequency36.getPct((int) 'a');
        long long44 = frequency36.getCount((long) (byte) 1);
        double double46 = frequency36.getPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        double double47 = frequency22.getPct((java.lang.Object) double46);
        frequency22.addValue('a');
        long long50 = frequency0.getCount((java.lang.Object) 'a');
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n0\t1\t100%\t100%\n" + "'", str11, "Value \t Freq. \t Pct. \t Cum Pct. \n0\t1\t100%\t100%\n");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 1.0d + "'", double13 == 1.0d);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1L + "'", long15 == 1L);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 1.0d + "'", double17 == 1.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
    }

    @Test
    public void test1818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1818");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getPct((java.lang.Object) (byte) -1);
        double double4 = frequency0.getPct(1);
        double double6 = frequency0.getCumPct((int) '4');
        frequency0.addValue((long) '#');
        java.lang.Class<?> wildcardClass9 = frequency0.getClass();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test1819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1819");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double4 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "");
        double double6 = frequency0.getPct((int) 'a');
        long long8 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        double double10 = frequency0.getCumPct('a');
        long long12 = frequency0.getCumFreq((int) '#');
        double double14 = frequency0.getCumPct((long) (short) 10);
        long long16 = frequency0.getCumFreq('4');
        long long18 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n100\t1\t100%\t100%\n");
        double double20 = frequency0.getPct('#');
        double double22 = frequency0.getPct((int) (byte) 0);
        long long24 = frequency0.getCumFreq((int) '#');
        long long26 = frequency0.getCumFreq(' ');
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
    }

    @Test
    public void test1820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1820");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency();
        double double3 = frequency1.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double5 = frequency1.getCumPct((java.lang.Comparable<java.lang.String>) "");
        double double6 = frequency0.getCumPct((java.lang.Object) "");
        frequency0.addValue((java.lang.Integer) 1);
        long long10 = frequency0.getCumFreq(' ');
        long long12 = frequency0.getCumFreq(10L);
        double double14 = frequency0.getPct((long) (short) 0);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
    }

    @Test
    public void test1821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1821");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double4 = frequency0.getCumPct((long) (short) 100);
        long long6 = frequency0.getCumFreq('#');
        org.apache.commons.math.stat.Frequency frequency7 = new org.apache.commons.math.stat.Frequency();
        double double9 = frequency7.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double11 = frequency7.getCumPct((long) (short) 100);
        long long13 = frequency7.getCumFreq('#');
        boolean boolean14 = frequency0.equals((java.lang.Object) long13);
        double double16 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "");
        org.apache.commons.math.stat.Frequency frequency17 = new org.apache.commons.math.stat.Frequency();
        double double19 = frequency17.getPct((java.lang.Object) (byte) -1);
        double double21 = frequency17.getPct(1);
        double double23 = frequency17.getCumPct((int) '4');
        double double25 = frequency17.getPct((long) (byte) 10);
        long long26 = frequency0.getCumFreq((java.lang.Object) (byte) 10);
        long long28 = frequency0.getCumFreq((int) ' ');
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor29 = frequency0.valuesIterator();
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor30 = frequency0.valuesIterator();
        frequency0.clear();
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor32 = frequency0.valuesIterator();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertNotNull(wildcardComparableItor29);
        org.junit.Assert.assertNotNull(wildcardComparableItor30);
        org.junit.Assert.assertNotNull(wildcardComparableItor32);
    }

    @Test
    public void test1822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1822");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getPct((java.lang.Object) (byte) -1);
        double double4 = frequency0.getPct(1);
        org.apache.commons.math.stat.Frequency frequency5 = new org.apache.commons.math.stat.Frequency();
        double double7 = frequency5.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double9 = frequency5.getPct(0);
        long long10 = frequency0.getCumFreq((java.lang.Object) double9);
        frequency0.addValue((long) '4');
        frequency0.clear();
        double double15 = frequency0.getCumPct((long) (byte) 1);
        double double17 = frequency0.getCumPct('4');
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
    }

    @Test
    public void test1823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1823");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double4 = frequency0.getCumPct((long) (short) 100);
        long long6 = frequency0.getCumFreq('#');
        frequency0.addValue((java.lang.Integer) 0);
        double double10 = frequency0.getPct((int) (byte) 10);
        java.lang.String str11 = frequency0.toString();
        double double13 = frequency0.getCumPct(0L);
        long long15 = frequency0.getCumFreq(100);
        org.apache.commons.math.stat.Frequency frequency16 = new org.apache.commons.math.stat.Frequency();
        double double18 = frequency16.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double20 = frequency16.getPct(0);
        double double22 = frequency16.getCumPct('a');
        org.apache.commons.math.stat.Frequency frequency23 = new org.apache.commons.math.stat.Frequency();
        double double25 = frequency23.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        java.lang.String str26 = frequency23.toString();
        java.lang.Object obj27 = null;
        double double28 = frequency23.getCumPct(obj27);
        double double30 = frequency23.getCumPct('a');
        double double32 = frequency23.getCumPct((int) (byte) 100);
        long long34 = frequency23.getCount(0L);
        double double35 = frequency16.getPct((java.lang.Object) long34);
        long long36 = frequency0.getCumFreq((java.lang.Object) long34);
        double double38 = frequency0.getPct('#');
        long long40 = frequency0.getCumFreq((int) (byte) 10);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n0\t1\t100%\t100%\n" + "'", str11, "Value \t Freq. \t Pct. \t Cum Pct. \n0\t1\t100%\t100%\n");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 1.0d + "'", double13 == 1.0d);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1L + "'", long15 == 1L);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str26, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 1L + "'", long36 == 1L);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 1L + "'", long40 == 1L);
    }

    @Test
    public void test1824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1824");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        long long4 = frequency0.getCount((java.lang.Object) 1L);
        long long6 = frequency0.getCumFreq('4');
        long long8 = frequency0.getCumFreq((java.lang.Object) true);
        double double10 = frequency0.getCumPct(' ');
        long long12 = frequency0.getCumFreq((int) '#');
        org.apache.commons.math.stat.Frequency frequency13 = new org.apache.commons.math.stat.Frequency();
        double double15 = frequency13.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double17 = frequency13.getCumPct((java.lang.Comparable<java.lang.String>) "");
        double double19 = frequency13.getPct((int) 'a');
        long long21 = frequency13.getCount((long) (byte) 1);
        boolean boolean22 = frequency0.equals((java.lang.Object) frequency13);
        long long24 = frequency13.getCumFreq((long) (short) 1);
        double double26 = frequency13.getCumPct((long) (short) 0);
        org.apache.commons.math.stat.Frequency frequency27 = new org.apache.commons.math.stat.Frequency();
        double double29 = frequency27.getPct((java.lang.Object) (byte) -1);
        frequency27.addValue((long) (short) 100);
        java.lang.Object obj32 = null;
        boolean boolean33 = frequency27.equals(obj32);
        org.apache.commons.math.stat.Frequency frequency34 = new org.apache.commons.math.stat.Frequency();
        double double36 = frequency34.getPct((java.lang.Object) (byte) -1);
        frequency34.addValue((long) (short) 100);
        java.lang.Object obj39 = null;
        boolean boolean40 = frequency34.equals(obj39);
        frequency34.addValue((int) (short) 1);
        long long44 = frequency34.getCumFreq((int) (byte) 1);
        double double45 = frequency27.getPct((java.lang.Object) (byte) 1);
        frequency13.addValue((java.lang.Object) (byte) 1);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 1L + "'", long44 == 1L);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.0d + "'", double45 == 0.0d);
    }

    @Test
    public void test1825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1825");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double4 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "");
        double double6 = frequency0.getPct((int) 'a');
        long long8 = frequency0.getCount((long) (byte) 1);
        long long10 = frequency0.getCount((long) (short) 10);
        org.apache.commons.math.stat.Frequency frequency11 = new org.apache.commons.math.stat.Frequency();
        double double13 = frequency11.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double15 = frequency11.getCumPct((long) (short) 100);
        long long17 = frequency11.getCumFreq('#');
        double double19 = frequency11.getCumPct('4');
        long long20 = frequency11.getSumFreq();
        frequency11.addValue((java.lang.Integer) 10);
        long long23 = frequency0.getCount((java.lang.Object) 10);
        org.apache.commons.math.stat.Frequency frequency24 = new org.apache.commons.math.stat.Frequency();
        double double26 = frequency24.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        long long28 = frequency24.getCount((java.lang.Object) 1L);
        long long30 = frequency24.getCumFreq('4');
        long long32 = frequency24.getCumFreq((java.lang.Object) true);
        double double34 = frequency24.getCumPct(' ');
        double double36 = frequency24.getCumPct((int) (byte) 100);
        org.apache.commons.math.stat.Frequency frequency37 = new org.apache.commons.math.stat.Frequency();
        double double39 = frequency37.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double41 = frequency37.getCumPct((long) (short) 100);
        long long43 = frequency37.getCumFreq('#');
        frequency37.addValue((java.lang.Integer) 0);
        double double47 = frequency37.getPct((int) (byte) 10);
        java.lang.String str48 = frequency37.toString();
        double double50 = frequency37.getCumPct(0L);
        long long52 = frequency37.getCumFreq(100);
        org.apache.commons.math.stat.Frequency frequency53 = new org.apache.commons.math.stat.Frequency();
        double double55 = frequency53.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double57 = frequency53.getPct(0);
        double double59 = frequency53.getCumPct('a');
        org.apache.commons.math.stat.Frequency frequency60 = new org.apache.commons.math.stat.Frequency();
        double double62 = frequency60.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        java.lang.String str63 = frequency60.toString();
        java.lang.Object obj64 = null;
        double double65 = frequency60.getCumPct(obj64);
        double double67 = frequency60.getCumPct('a');
        double double69 = frequency60.getCumPct((int) (byte) 100);
        long long71 = frequency60.getCount(0L);
        double double72 = frequency53.getPct((java.lang.Object) long71);
        long long73 = frequency37.getCumFreq((java.lang.Object) long71);
        long long75 = frequency37.getCount((int) (short) 10);
        long long76 = frequency24.getCount((java.lang.Object) long75);
        double double78 = frequency24.getPct((long) (byte) 100);
        long long80 = frequency24.getCumFreq((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n0\t1\t50%\t50%\n100\t1\t50%\t100%\n");
        double double81 = frequency0.getCumPct((java.lang.Object) long80);
        double double83 = frequency0.getCumPct(3L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n0\t1\t100%\t100%\n" + "'", str48, "Value \t Freq. \t Pct. \t Cum Pct. \n0\t1\t100%\t100%\n");
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 1.0d + "'", double50 == 1.0d);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 1L + "'", long52 == 1L);
        org.junit.Assert.assertTrue(Double.isNaN(double55));
        org.junit.Assert.assertTrue(Double.isNaN(double57));
        org.junit.Assert.assertTrue(Double.isNaN(double59));
        org.junit.Assert.assertTrue(Double.isNaN(double62));
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str63, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue(Double.isNaN(double65));
        org.junit.Assert.assertTrue(Double.isNaN(double67));
        org.junit.Assert.assertTrue(Double.isNaN(double69));
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 0L + "'", long71 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double72));
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 1L + "'", long73 == 1L);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 0L + "'", long75 == 0L);
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + 0L + "'", long76 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double78));
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + 0L + "'", long80 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double81));
        org.junit.Assert.assertTrue(Double.isNaN(double83));
    }

    @Test
    public void test1826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1826");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double4 = frequency0.getCumPct((long) (short) 100);
        long long6 = frequency0.getCumFreq('#');
        org.apache.commons.math.stat.Frequency frequency7 = new org.apache.commons.math.stat.Frequency();
        double double9 = frequency7.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double11 = frequency7.getCumPct((long) (short) 100);
        long long13 = frequency7.getCumFreq('#');
        boolean boolean14 = frequency0.equals((java.lang.Object) long13);
        double double16 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "");
        org.apache.commons.math.stat.Frequency frequency17 = new org.apache.commons.math.stat.Frequency();
        double double19 = frequency17.getPct((java.lang.Object) (byte) -1);
        double double21 = frequency17.getPct(1);
        double double23 = frequency17.getCumPct((int) '4');
        double double25 = frequency17.getPct((long) (byte) 10);
        long long26 = frequency0.getCumFreq((java.lang.Object) (byte) 10);
        double double28 = frequency0.getCumPct(' ');
        frequency0.addValue((int) (byte) 10);
        double double32 = frequency0.getPct((java.lang.Object) (-1.0f));
        org.apache.commons.math.stat.Frequency frequency33 = new org.apache.commons.math.stat.Frequency();
        double double35 = frequency33.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double37 = frequency33.getCumPct((java.lang.Comparable<java.lang.String>) "");
        double double39 = frequency33.getPct((int) 'a');
        long long41 = frequency33.getCount((long) (byte) 1);
        long long43 = frequency33.getCumFreq((long) 100);
        frequency33.addValue((int) (byte) -1);
        double double46 = frequency0.getPct((java.lang.Object) (byte) -1);
        org.apache.commons.math.stat.Frequency frequency47 = new org.apache.commons.math.stat.Frequency();
        double double49 = frequency47.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double51 = frequency47.getCumPct((long) (short) 100);
        long long53 = frequency47.getCumFreq('#');
        double double55 = frequency47.getCumPct('4');
        long long56 = frequency47.getSumFreq();
        double double58 = frequency47.getCumPct((-1L));
        org.apache.commons.math.stat.Frequency frequency59 = new org.apache.commons.math.stat.Frequency();
        double double61 = frequency59.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double63 = frequency59.getCumPct((java.lang.Comparable<java.lang.String>) "");
        double double65 = frequency59.getPct((int) 'a');
        frequency59.addValue((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        frequency59.clear();
        double double70 = frequency59.getPct('4');
        long long71 = frequency47.getCount((java.lang.Object) double70);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor72 = frequency47.valuesIterator();
        boolean boolean73 = frequency0.equals((java.lang.Object) wildcardComparableItor72);
        double double75 = frequency0.getPct('4');
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.0d + "'", double46 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double49));
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double55));
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 0L + "'", long56 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double58));
        org.junit.Assert.assertTrue(Double.isNaN(double61));
        org.junit.Assert.assertTrue(Double.isNaN(double63));
        org.junit.Assert.assertTrue(Double.isNaN(double65));
        org.junit.Assert.assertTrue(Double.isNaN(double70));
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 0L + "'", long71 == 0L);
        org.junit.Assert.assertNotNull(wildcardComparableItor72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 0.0d + "'", double75 == 0.0d);
    }

    @Test
    public void test1827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1827");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        long long4 = frequency0.getCount((long) (short) 100);
        org.apache.commons.math.stat.Frequency frequency5 = new org.apache.commons.math.stat.Frequency();
        double double7 = frequency5.getPct((java.lang.Object) (byte) -1);
        double double8 = frequency0.getPct((java.lang.Object) (byte) -1);
        double double10 = frequency0.getCumPct((java.lang.Object) (-1.0f));
        double double12 = frequency0.getPct('a');
        double double14 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \na\t1\t100%\t100%\n");
        long long16 = frequency0.getCumFreq((long) (short) -1);
        double double18 = frequency0.getCumPct((int) (byte) 1);
        long long19 = frequency0.getSumFreq();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
    }

    @Test
    public void test1828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1828");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        long long4 = frequency0.getCount((java.lang.Object) 1L);
        long long6 = frequency0.getCumFreq('4');
        long long8 = frequency0.getCumFreq((java.lang.Object) true);
        java.lang.String str9 = frequency0.toString();
        long long10 = frequency0.getSumFreq();
        double double12 = frequency0.getPct('a');
        long long14 = frequency0.getCumFreq('#');
        frequency0.addValue('4');
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str9, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
    }

    @Test
    public void test1829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1829");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        long long4 = frequency0.getCount((long) (short) 100);
        org.apache.commons.math.stat.Frequency frequency5 = new org.apache.commons.math.stat.Frequency();
        double double7 = frequency5.getPct((java.lang.Object) (byte) -1);
        double double8 = frequency0.getPct((java.lang.Object) (byte) -1);
        double double10 = frequency0.getCumPct((java.lang.Object) (-1.0f));
        double double12 = frequency0.getPct('a');
        double double14 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \na\t1\t100%\t100%\n");
        double double16 = frequency0.getPct('#');
        double double18 = frequency0.getCumPct(100L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
    }

    @Test
    public void test1830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1830");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double4 = frequency0.getCumPct((long) (short) 100);
        long long6 = frequency0.getCumFreq('#');
        double double8 = frequency0.getCumPct((int) (byte) 0);
        frequency0.addValue((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        long long12 = frequency0.getCount('a');
        frequency0.addValue((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n100\t1\t100%\t100%\n");
        long long16 = frequency0.getCumFreq((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n0\t1\t50%\t50%\n10\t1\t50%\t100%\n");
        long long18 = frequency0.getCount((long) (short) 10);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1L + "'", long16 == 1L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
    }

    @Test
    public void test1831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1831");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getPct((java.lang.Object) (byte) -1);
        double double4 = frequency0.getPct(1);
        double double6 = frequency0.getCumPct((int) '4');
        frequency0.addValue((long) '#');
        double double10 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        long long11 = frequency0.getSumFreq();
        double double13 = frequency0.getPct('4');
        double double15 = frequency0.getPct(' ');
        double double17 = frequency0.getCumPct(100L);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor18 = frequency0.valuesIterator();
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor19 = frequency0.valuesIterator();
        long long21 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n1.0\t1\t100%\t100%\n");
        double double23 = frequency0.getPct(1L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1L + "'", long11 == 1L);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 1.0d + "'", double17 == 1.0d);
        org.junit.Assert.assertNotNull(wildcardComparableItor18);
        org.junit.Assert.assertNotNull(wildcardComparableItor19);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
    }

    @Test
    public void test1832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1832");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double4 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "");
        double double6 = frequency0.getPct((int) 'a');
        long long8 = frequency0.getCount((long) (byte) 1);
        frequency0.addValue('a');
        long long12 = frequency0.getCount('#');
        double double14 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "");
        double double16 = frequency0.getCumPct(1);
        frequency0.clear();
        frequency0.clear();
        long long20 = frequency0.getCount('a');
        double double22 = frequency0.getCumPct((int) (short) 1);
        double double24 = frequency0.getPct(1);
        org.apache.commons.math.stat.Frequency frequency25 = new org.apache.commons.math.stat.Frequency();
        org.apache.commons.math.stat.Frequency frequency26 = new org.apache.commons.math.stat.Frequency();
        double double28 = frequency26.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double30 = frequency26.getCumPct((java.lang.Comparable<java.lang.String>) "");
        double double31 = frequency25.getCumPct((java.lang.Object) "");
        frequency25.clear();
        boolean boolean33 = frequency0.equals((java.lang.Object) frequency25);
        double double35 = frequency25.getCumPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n100\t1\t100%\t100%\n");
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double35));
    }

    @Test
    public void test1833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1833");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        java.lang.String str3 = frequency0.toString();
        org.apache.commons.math.stat.Frequency frequency4 = new org.apache.commons.math.stat.Frequency();
        double double6 = frequency4.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double8 = frequency4.getCumPct((long) (short) 100);
        long long10 = frequency4.getCumFreq('#');
        java.lang.Class<?> wildcardClass11 = frequency4.getClass();
        boolean boolean12 = frequency0.equals((java.lang.Object) wildcardClass11);
        frequency0.addValue((int) (byte) 10);
        double double16 = frequency0.getPct((int) (short) 100);
        double double18 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \na\t1\t100%\t100%\n");
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str3, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
    }

    @Test
    public void test1834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1834");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getPct((java.lang.Object) (byte) -1);
        double double4 = frequency0.getPct(1);
        double double6 = frequency0.getCumPct((int) '4');
        frequency0.addValue((long) '#');
        double double10 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        long long11 = frequency0.getSumFreq();
        double double13 = frequency0.getPct((int) (short) 100);
        double double15 = frequency0.getPct((long) (byte) 1);
        double double17 = frequency0.getCumPct((long) 100);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1L + "'", long11 == 1L);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 1.0d + "'", double17 == 1.0d);
    }

    @Test
    public void test1835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1835");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        long long4 = frequency0.getCount((long) (short) 100);
        frequency0.clear();
        frequency0.addValue('#');
        org.apache.commons.math.stat.Frequency frequency8 = new org.apache.commons.math.stat.Frequency();
        double double10 = frequency8.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double12 = frequency8.getCumPct((long) (short) 100);
        long long14 = frequency8.getCumFreq((long) (byte) -1);
        long long16 = frequency8.getCumFreq((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n-1\t1\t100%\t100%\n");
        long long17 = frequency0.getCumFreq((java.lang.Object) "Value \t Freq. \t Pct. \t Cum Pct. \n-1\t1\t100%\t100%\n");
        double double19 = frequency0.getCumPct((int) (byte) -1);
        long long21 = frequency0.getCumFreq((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \na\t1\t100%\t100%\n");
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
    }

    @Test
    public void test1836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1836");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        long long4 = frequency0.getCount((java.lang.Object) 1L);
        long long6 = frequency0.getCumFreq('4');
        long long8 = frequency0.getCumFreq((java.lang.Object) true);
        double double10 = frequency0.getCumPct(' ');
        long long12 = frequency0.getCumFreq((int) '#');
        long long14 = frequency0.getCumFreq((long) (short) 0);
        long long16 = frequency0.getCount((long) 100);
        frequency0.addValue((int) 'a');
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
    }

    @Test
    public void test1837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1837");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double4 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "");
        double double6 = frequency0.getPct((int) 'a');
        org.apache.commons.math.stat.Frequency frequency7 = new org.apache.commons.math.stat.Frequency();
        double double9 = frequency7.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double11 = frequency7.getCumPct((java.lang.Comparable<java.lang.String>) "");
        double double13 = frequency7.getPct((int) 'a');
        frequency7.addValue((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        long long17 = frequency7.getCount((int) '4');
        long long19 = frequency7.getCumFreq((long) ' ');
        frequency0.addValue((java.lang.Object) long19);
        double double22 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n0\t1\t100%\t100%\n");
        long long23 = frequency0.getSumFreq();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1L + "'", long23 == 1L);
    }

    @Test
    public void test1838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1838");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double4 = frequency0.getPct(0);
        double double6 = frequency0.getCumPct('a');
        long long8 = frequency0.getCount((long) (-1));
        org.apache.commons.math.stat.Frequency frequency9 = new org.apache.commons.math.stat.Frequency();
        double double11 = frequency9.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        long long13 = frequency9.getCount((java.lang.Object) 1L);
        double double15 = frequency9.getCumPct(1);
        double double17 = frequency9.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        long long19 = frequency9.getCount('a');
        double double20 = frequency0.getCumPct((java.lang.Object) 'a');
        org.apache.commons.math.stat.Frequency frequency21 = new org.apache.commons.math.stat.Frequency();
        double double23 = frequency21.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        frequency21.addValue((java.lang.Integer) (-1));
        double double27 = frequency21.getCumPct('a');
        // The following exception was thrown during execution in test generation
        try {
            frequency0.addValue((java.lang.Object) frequency21);
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d);
    }

    @Test
    public void test1839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1839");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        java.lang.String str3 = frequency0.toString();
        java.lang.Object obj4 = null;
        double double5 = frequency0.getCumPct(obj4);
        double double7 = frequency0.getCumPct('a');
        double double9 = frequency0.getCumPct((int) (byte) 100);
        frequency0.addValue((java.lang.Integer) 0);
        long long13 = frequency0.getCumFreq((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n35\t1\t100%\t100%\n");
        frequency0.clear();
        frequency0.addValue((long) (byte) 100);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str3, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
    }

    @Test
    public void test1840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1840");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double4 = frequency0.getCumPct((long) (short) 100);
        java.lang.Object obj5 = null;
        boolean boolean6 = frequency0.equals(obj5);
        org.apache.commons.math.stat.Frequency frequency7 = new org.apache.commons.math.stat.Frequency();
        double double9 = frequency7.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        long long11 = frequency7.getCount((java.lang.Object) 1L);
        long long13 = frequency7.getCumFreq('4');
        long long15 = frequency7.getCumFreq((java.lang.Object) true);
        long long17 = frequency7.getCount((long) (short) 100);
        double double19 = frequency7.getCumPct('a');
        frequency7.clear();
        long long22 = frequency7.getCount((int) (byte) 100);
        long long23 = frequency0.getCumFreq((java.lang.Object) long22);
        double double25 = frequency0.getCumPct(10L);
        double double27 = frequency0.getPct((long) 1);
        frequency0.clear();
        frequency0.addValue((long) (byte) 0);
        frequency0.clear();
        double double33 = frequency0.getCumPct(100);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue(Double.isNaN(double33));
    }

    @Test
    public void test1841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1841");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double4 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "");
        double double6 = frequency0.getPct((int) 'a');
        long long8 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        double double10 = frequency0.getCumPct('a');
        long long12 = frequency0.getCumFreq((int) '#');
        double double14 = frequency0.getCumPct((long) (short) 10);
        long long16 = frequency0.getCumFreq('4');
        org.apache.commons.math.stat.Frequency frequency17 = new org.apache.commons.math.stat.Frequency();
        double double19 = frequency17.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double21 = frequency17.getCumPct((long) (short) 100);
        double double23 = frequency17.getCumPct((java.lang.Object) 0);
        boolean boolean24 = frequency0.equals((java.lang.Object) double23);
        double double26 = frequency0.getPct('4');
        double double28 = frequency0.getCumPct('#');
        frequency0.addValue((long) 0);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue(Double.isNaN(double28));
    }

    @Test
    public void test1842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1842");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double4 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "");
        double double6 = frequency0.getPct((int) 'a');
        frequency0.addValue((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor9 = frequency0.valuesIterator();
        org.apache.commons.math.stat.Frequency frequency10 = new org.apache.commons.math.stat.Frequency();
        boolean boolean11 = frequency0.equals((java.lang.Object) frequency10);
        org.apache.commons.math.stat.Frequency frequency12 = new org.apache.commons.math.stat.Frequency();
        double double14 = frequency12.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        long long16 = frequency12.getCount((java.lang.Object) 1L);
        double double18 = frequency12.getCumPct(1);
        long long19 = frequency10.getCount((java.lang.Object) 1);
        java.lang.String str20 = frequency10.toString();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertNotNull(wildcardComparableItor9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str20, "Value \t Freq. \t Pct. \t Cum Pct. \n");
    }

    @Test
    public void test1843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1843");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double4 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "");
        double double6 = frequency0.getPct((long) 100);
        double double8 = frequency0.getCumPct((int) (byte) 100);
        double double10 = frequency0.getPct('4');
        long long12 = frequency0.getCount('4');
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
    }

    @Test
    public void test1844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1844");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        frequency0.addValue('a');
        double double6 = frequency0.getPct('a');
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
    }

    @Test
    public void test1845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1845");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double4 = frequency0.getCumPct((long) (short) 100);
        double double6 = frequency0.getPct((long) (short) 100);
        long long8 = frequency0.getCount(' ');
        org.apache.commons.math.stat.Frequency frequency9 = new org.apache.commons.math.stat.Frequency();
        double double11 = frequency9.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double13 = frequency9.getCumPct((java.lang.Comparable<java.lang.String>) "");
        double double15 = frequency9.getPct((int) 'a');
        long long17 = frequency9.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        double double19 = frequency9.getCumPct('a');
        org.apache.commons.math.stat.Frequency frequency20 = new org.apache.commons.math.stat.Frequency();
        double double22 = frequency20.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double24 = frequency20.getCumPct((long) (short) 100);
        long long26 = frequency20.getCumFreq((long) (byte) -1);
        double double27 = frequency9.getPct((java.lang.Object) long26);
        long long29 = frequency9.getCount('4');
        org.apache.commons.math.stat.Frequency frequency30 = new org.apache.commons.math.stat.Frequency();
        double double32 = frequency30.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        long long34 = frequency30.getCount((long) (short) 100);
        org.apache.commons.math.stat.Frequency frequency35 = new org.apache.commons.math.stat.Frequency();
        double double37 = frequency35.getPct((java.lang.Object) (byte) -1);
        double double38 = frequency30.getPct((java.lang.Object) (byte) -1);
        double double40 = frequency30.getCumPct((java.lang.Object) (-1.0f));
        long long42 = frequency30.getCount('#');
        org.apache.commons.math.stat.Frequency frequency43 = new org.apache.commons.math.stat.Frequency();
        double double45 = frequency43.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double47 = frequency43.getCumPct((long) (short) 100);
        long long49 = frequency43.getCumFreq('#');
        org.apache.commons.math.stat.Frequency frequency50 = new org.apache.commons.math.stat.Frequency();
        double double52 = frequency50.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double54 = frequency50.getCumPct((long) (short) 100);
        long long56 = frequency50.getCumFreq('#');
        boolean boolean57 = frequency43.equals((java.lang.Object) long56);
        double double59 = frequency43.getCumPct((java.lang.Comparable<java.lang.String>) "");
        org.apache.commons.math.stat.Frequency frequency60 = new org.apache.commons.math.stat.Frequency();
        double double62 = frequency60.getPct((java.lang.Object) (byte) -1);
        double double64 = frequency60.getPct(1);
        double double66 = frequency60.getCumPct((int) '4');
        double double68 = frequency60.getPct((long) (byte) 10);
        long long69 = frequency43.getCumFreq((java.lang.Object) (byte) 10);
        long long71 = frequency43.getCumFreq((int) ' ');
        double double73 = frequency43.getPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n-1\t1\t100%\t100%\n");
        double double75 = frequency43.getCumPct((long) (byte) 1);
        double double76 = frequency30.getPct((java.lang.Object) double75);
        frequency9.addValue((java.lang.Object) double76);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor78 = frequency9.valuesIterator();
        boolean boolean79 = frequency0.equals((java.lang.Object) frequency9);
        org.apache.commons.math.stat.Frequency frequency80 = new org.apache.commons.math.stat.Frequency();
        double double82 = frequency80.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        java.lang.String str83 = frequency80.toString();
        java.lang.Object obj84 = null;
        double double85 = frequency80.getCumPct(obj84);
        double double87 = frequency80.getCumPct('a');
        double double89 = frequency80.getCumPct((int) (byte) 100);
        frequency80.addValue((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        long long93 = frequency80.getCumFreq((int) (short) 10);
        long long95 = frequency80.getCumFreq((int) (short) 100);
        // The following exception was thrown during execution in test generation
        try {
            double double96 = frequency0.getCumPct((java.lang.Object) frequency80);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: org.apache.commons.math.stat.Frequency cannot be cast to java.lang.Comparable");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double52));
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 0L + "'", long56 == 0L);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double59));
        org.junit.Assert.assertTrue(Double.isNaN(double62));
        org.junit.Assert.assertTrue(Double.isNaN(double64));
        org.junit.Assert.assertTrue(Double.isNaN(double66));
        org.junit.Assert.assertTrue(Double.isNaN(double68));
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 0L + "'", long69 == 0L);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 0L + "'", long71 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double73));
        org.junit.Assert.assertTrue(Double.isNaN(double75));
        org.junit.Assert.assertTrue(Double.isNaN(double76));
        org.junit.Assert.assertNotNull(wildcardComparableItor78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double82));
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str83, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue(Double.isNaN(double85));
        org.junit.Assert.assertTrue(Double.isNaN(double87));
        org.junit.Assert.assertTrue(Double.isNaN(double89));
        org.junit.Assert.assertTrue("'" + long93 + "' != '" + 0L + "'", long93 == 0L);
        org.junit.Assert.assertTrue("'" + long95 + "' != '" + 0L + "'", long95 == 0L);
    }

    @Test
    public void test1846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1846");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double4 = frequency0.getCumPct((long) (short) 100);
        long long6 = frequency0.getCumFreq('#');
        org.apache.commons.math.stat.Frequency frequency7 = new org.apache.commons.math.stat.Frequency();
        double double9 = frequency7.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double11 = frequency7.getCumPct((long) (short) 100);
        long long13 = frequency7.getCumFreq('#');
        boolean boolean14 = frequency0.equals((java.lang.Object) long13);
        double double16 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "");
        org.apache.commons.math.stat.Frequency frequency17 = new org.apache.commons.math.stat.Frequency();
        double double19 = frequency17.getPct((java.lang.Object) (byte) -1);
        double double21 = frequency17.getPct(1);
        double double23 = frequency17.getCumPct((int) '4');
        double double25 = frequency17.getPct((long) (byte) 10);
        long long26 = frequency0.getCumFreq((java.lang.Object) (byte) 10);
        long long28 = frequency0.getCumFreq((int) ' ');
        frequency0.addValue((java.lang.Comparable<java.lang.String>) "hi!");
        org.apache.commons.math.stat.Frequency frequency31 = new org.apache.commons.math.stat.Frequency();
        double double33 = frequency31.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor34 = frequency31.valuesIterator();
        double double36 = frequency31.getPct(' ');
        frequency31.addValue('a');
        org.apache.commons.math.stat.Frequency frequency39 = new org.apache.commons.math.stat.Frequency();
        double double41 = frequency39.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double43 = frequency39.getCumPct((long) (short) 100);
        long long45 = frequency39.getCumFreq('#');
        frequency39.addValue((java.lang.Integer) 0);
        double double49 = frequency39.getPct((int) (byte) 10);
        long long51 = frequency39.getCumFreq('#');
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor52 = frequency39.valuesIterator();
        boolean boolean53 = frequency31.equals((java.lang.Object) frequency39);
        long long55 = frequency31.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n0\t1\t50%\t50%\n100\t1\t50%\t100%\n");
        double double56 = frequency0.getCumPct((java.lang.Object) long55);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertNotNull(wildcardComparableItor34);
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L);
        org.junit.Assert.assertNotNull(wildcardComparableItor52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 0L + "'", long55 == 0L);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.0d + "'", double56 == 0.0d);
    }

    @Test
    public void test1847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1847");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getPct((java.lang.Object) (byte) -1);
        double double4 = frequency0.getPct(1);
        double double6 = frequency0.getCumPct((int) '4');
        frequency0.addValue((long) '#');
        double double10 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        double double12 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "");
        java.lang.String str13 = frequency0.toString();
        long long15 = frequency0.getCumFreq('#');
        java.lang.String str16 = frequency0.toString();
        java.lang.String str17 = frequency0.toString();
        double double19 = frequency0.getCumPct((java.lang.Object) "Value \t Freq. \t Pct. \t Cum Pct. \n-1\t1\t50%\t50%\n0\t1\t50%\t100%\n");
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n35\t1\t100%\t100%\n" + "'", str13, "Value \t Freq. \t Pct. \t Cum Pct. \n35\t1\t100%\t100%\n");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n35\t1\t100%\t100%\n" + "'", str16, "Value \t Freq. \t Pct. \t Cum Pct. \n35\t1\t100%\t100%\n");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n35\t1\t100%\t100%\n" + "'", str17, "Value \t Freq. \t Pct. \t Cum Pct. \n35\t1\t100%\t100%\n");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
    }

    @Test
    public void test1848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1848");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        java.lang.String str3 = frequency0.toString();
        java.lang.Object obj4 = null;
        double double5 = frequency0.getCumPct(obj4);
        double double7 = frequency0.getCumPct('a');
        double double9 = frequency0.getPct(1);
        double double11 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "");
        long long13 = frequency0.getCumFreq((java.lang.Comparable<java.lang.String>) "");
        long long14 = frequency0.getSumFreq();
        frequency0.addValue((java.lang.Integer) 1);
        long long18 = frequency0.getCumFreq((int) (byte) 10);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str3, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1L + "'", long18 == 1L);
    }

    @Test
    public void test1849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1849");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getPct((java.lang.Object) (byte) -1);
        double double4 = frequency0.getPct(1);
        double double6 = frequency0.getCumPct((int) '4');
        frequency0.addValue((java.lang.Comparable<java.lang.String>) "hi!");
        long long9 = frequency0.getSumFreq();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1L + "'", long9 == 1L);
    }

    @Test
    public void test1850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1850");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double4 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "");
        double double6 = frequency0.getPct((int) 'a');
        long long8 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        double double10 = frequency0.getCumPct('a');
        org.apache.commons.math.stat.Frequency frequency11 = new org.apache.commons.math.stat.Frequency();
        double double13 = frequency11.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double15 = frequency11.getCumPct((long) (short) 100);
        long long17 = frequency11.getCumFreq((long) (byte) -1);
        double double18 = frequency0.getPct((java.lang.Object) long17);
        boolean boolean20 = frequency0.equals((java.lang.Object) 10);
        java.lang.String str21 = frequency0.toString();
        org.apache.commons.math.stat.Frequency frequency22 = new org.apache.commons.math.stat.Frequency();
        double double24 = frequency22.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double26 = frequency22.getCumPct((long) (short) 100);
        long long28 = frequency22.getCumFreq('#');
        org.apache.commons.math.stat.Frequency frequency29 = new org.apache.commons.math.stat.Frequency();
        double double31 = frequency29.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double33 = frequency29.getCumPct((long) (short) 100);
        long long35 = frequency29.getCumFreq('#');
        boolean boolean36 = frequency22.equals((java.lang.Object) long35);
        double double38 = frequency22.getCumPct((java.lang.Comparable<java.lang.String>) "");
        org.apache.commons.math.stat.Frequency frequency39 = new org.apache.commons.math.stat.Frequency();
        double double41 = frequency39.getPct((java.lang.Object) (byte) -1);
        double double43 = frequency39.getPct(1);
        double double45 = frequency39.getCumPct((int) '4');
        double double47 = frequency39.getPct((long) (byte) 10);
        long long48 = frequency22.getCumFreq((java.lang.Object) (byte) 10);
        long long50 = frequency22.getCumFreq((int) ' ');
        frequency22.addValue((java.lang.Integer) (-1));
        double double53 = frequency0.getPct((java.lang.Object) (-1));
        frequency0.clear();
        long long56 = frequency0.getCount(' ');
        double double58 = frequency0.getCumPct((long) (byte) 10);
        long long60 = frequency0.getCumFreq((-1L));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str21, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 0L + "'", long56 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double58));
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 0L + "'", long60 == 0L);
    }

    @Test
    public void test1851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1851");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double4 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "");
        double double6 = frequency0.getPct((int) 'a');
        frequency0.addValue((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        frequency0.clear();
        double double11 = frequency0.getPct('4');
        long long13 = frequency0.getCount((int) '4');
        long long15 = frequency0.getCount((long) ' ');
        frequency0.addValue(1L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
    }

    @Test
    public void test1852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1852");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        long long4 = frequency0.getCount((java.lang.Object) 1L);
        double double6 = frequency0.getCumPct(1);
        double double8 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        long long10 = frequency0.getCount('a');
        org.apache.commons.math.stat.Frequency frequency11 = new org.apache.commons.math.stat.Frequency();
        double double13 = frequency11.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        long long15 = frequency11.getCount((java.lang.Object) 1L);
        long long17 = frequency11.getCumFreq('4');
        long long19 = frequency11.getCumFreq((java.lang.Object) true);
        double double21 = frequency11.getCumPct(' ');
        long long23 = frequency11.getCumFreq((int) (byte) 1);
        frequency11.addValue(' ');
        double double27 = frequency11.getCumPct((int) (byte) 10);
        frequency0.addValue((java.lang.Object) double27);
        double double30 = frequency0.getCumPct((long) (byte) 100);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d);
    }

    @Test
    public void test1853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1853");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getPct((java.lang.Object) (byte) -1);
        double double4 = frequency0.getPct(1);
        double double6 = frequency0.getCumPct((int) '4');
        frequency0.addValue((long) '#');
        long long10 = frequency0.getCount((int) ' ');
        long long12 = frequency0.getCount((long) (short) -1);
        long long14 = frequency0.getCount(' ');
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
    }

    @Test
    public void test1854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1854");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        long long4 = frequency0.getCount((long) (byte) 10);
        double double6 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n0\t1\t50%\t50%\n10\t1\t50%\t100%\n");
        long long8 = frequency0.getCount(0);
        long long10 = frequency0.getCumFreq((java.lang.Comparable<java.lang.String>) "hi!");
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
    }

    @Test
    public void test1855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1855");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double4 = frequency0.getCumPct((long) (short) 100);
        long long6 = frequency0.getCumFreq('#');
        double double8 = frequency0.getCumPct((int) (byte) 0);
        long long10 = frequency0.getCount((long) '4');
        double double12 = frequency0.getPct((-1));
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor13 = frequency0.valuesIterator();
        org.apache.commons.math.stat.Frequency frequency14 = new org.apache.commons.math.stat.Frequency();
        java.lang.String str15 = frequency14.toString();
        long long17 = frequency14.getCount((int) (byte) 1);
        long long19 = frequency14.getCumFreq('4');
        long long21 = frequency14.getCount((int) (byte) 0);
        org.apache.commons.math.stat.Frequency frequency22 = new org.apache.commons.math.stat.Frequency();
        double double24 = frequency22.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double26 = frequency22.getCumPct((java.lang.Comparable<java.lang.String>) "");
        double double28 = frequency22.getPct((int) 'a');
        long long30 = frequency22.getCount((long) (byte) 1);
        long long32 = frequency22.getCumFreq((long) 100);
        org.apache.commons.math.stat.Frequency frequency33 = new org.apache.commons.math.stat.Frequency();
        double double35 = frequency33.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        long long37 = frequency33.getCount((java.lang.Object) 1L);
        long long39 = frequency33.getCumFreq('4');
        long long41 = frequency33.getCumFreq((java.lang.Object) true);
        frequency22.addValue((java.lang.Object) long41);
        frequency22.addValue((int) (short) -1);
        long long46 = frequency22.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n0\t1\t50%\t50%\n10\t1\t50%\t100%\n");
        long long48 = frequency22.getCumFreq(0);
        double double50 = frequency22.getPct((java.lang.Object) "Value \t Freq. \t Pct. \t Cum Pct. \n-1\t1\t100%\t100%\n");
        frequency14.addValue((java.lang.Object) "Value \t Freq. \t Pct. \t Cum Pct. \n-1\t1\t100%\t100%\n");
        // The following exception was thrown during execution in test generation
        try {
            double double52 = frequency0.getCumPct((java.lang.Object) frequency14);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: org.apache.commons.math.stat.Frequency cannot be cast to java.lang.Comparable");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertNotNull(wildcardComparableItor13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str15, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 2L + "'", long48 == 2L);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.0d + "'", double50 == 0.0d);
    }

    @Test
    public void test1856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1856");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        long long4 = frequency0.getCount((long) (short) 100);
        org.apache.commons.math.stat.Frequency frequency5 = new org.apache.commons.math.stat.Frequency();
        double double7 = frequency5.getPct((java.lang.Object) (byte) -1);
        double double8 = frequency0.getPct((java.lang.Object) (byte) -1);
        double double10 = frequency0.getCumPct((java.lang.Object) (-1.0f));
        double double12 = frequency0.getPct('a');
        long long14 = frequency0.getCount((int) (byte) -1);
        long long16 = frequency0.getCumFreq('a');
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
    }

    @Test
    public void test1857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1857");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        long long4 = frequency0.getCount((long) (byte) 10);
        double double6 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n0\t1\t50%\t50%\n10\t1\t50%\t100%\n");
        double double8 = frequency0.getPct('#');
        long long10 = frequency0.getCumFreq((java.lang.Object) (short) 100);
        long long12 = frequency0.getCumFreq((long) 10);
        double double14 = frequency0.getCumPct((long) 0);
        double double16 = frequency0.getCumPct((java.lang.Object) 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
    }

    @Test
    public void test1858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1858");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double4 = frequency0.getCumPct((long) (short) 100);
        long long6 = frequency0.getCumFreq('#');
        org.apache.commons.math.stat.Frequency frequency7 = new org.apache.commons.math.stat.Frequency();
        double double9 = frequency7.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double11 = frequency7.getCumPct((long) (short) 100);
        long long13 = frequency7.getCumFreq('#');
        boolean boolean14 = frequency0.equals((java.lang.Object) long13);
        double double16 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "");
        org.apache.commons.math.stat.Frequency frequency17 = new org.apache.commons.math.stat.Frequency();
        double double19 = frequency17.getPct((java.lang.Object) (byte) -1);
        double double21 = frequency17.getPct(1);
        double double23 = frequency17.getCumPct((int) '4');
        double double25 = frequency17.getPct((long) (byte) 10);
        long long26 = frequency0.getCumFreq((java.lang.Object) (byte) 10);
        double double28 = frequency0.getCumPct(' ');
        long long30 = frequency0.getCumFreq((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n-1\t1\t100%\t100%\n");
        frequency0.clear();
        java.lang.Class<?> wildcardClass32 = frequency0.getClass();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass32);
    }

    @Test
    public void test1859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1859");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        java.lang.String str3 = frequency0.toString();
        java.lang.Object obj4 = null;
        double double5 = frequency0.getCumPct(obj4);
        double double7 = frequency0.getCumPct('a');
        double double9 = frequency0.getCumPct((int) (byte) 100);
        long long11 = frequency0.getCount(0L);
        double double13 = frequency0.getCumPct((long) (short) -1);
        org.apache.commons.math.stat.Frequency frequency14 = new org.apache.commons.math.stat.Frequency();
        double double16 = frequency14.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double18 = frequency14.getCumPct((java.lang.Comparable<java.lang.String>) "");
        double double20 = frequency14.getPct((int) 'a');
        frequency14.addValue((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        long long24 = frequency14.getCount((int) '4');
        long long26 = frequency14.getCumFreq((long) ' ');
        double double27 = frequency0.getCumPct((java.lang.Object) ' ');
        org.apache.commons.math.stat.Frequency frequency28 = new org.apache.commons.math.stat.Frequency();
        double double30 = frequency28.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double32 = frequency28.getCumPct((long) (short) 100);
        long long34 = frequency28.getCumFreq('#');
        frequency28.addValue((java.lang.Integer) 0);
        double double38 = frequency28.getPct((int) (byte) 10);
        long long40 = frequency28.getCumFreq('#');
        frequency28.addValue((java.lang.Integer) 10);
        double double44 = frequency28.getCumPct('a');
        long long45 = frequency0.getCumFreq((java.lang.Object) 'a');
        frequency0.clear();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str3, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.0d + "'", double44 == 0.0d);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
    }

    @Test
    public void test1860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1860");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double4 = frequency0.getPct(0);
        double double6 = frequency0.getCumPct('a');
        org.apache.commons.math.stat.Frequency frequency7 = new org.apache.commons.math.stat.Frequency();
        double double9 = frequency7.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        java.lang.String str10 = frequency7.toString();
        java.lang.Object obj11 = null;
        double double12 = frequency7.getCumPct(obj11);
        double double14 = frequency7.getCumPct('a');
        double double16 = frequency7.getCumPct((int) (byte) 100);
        long long18 = frequency7.getCount(0L);
        double double19 = frequency0.getPct((java.lang.Object) long18);
        org.apache.commons.math.stat.Frequency frequency20 = new org.apache.commons.math.stat.Frequency();
        double double22 = frequency20.getPct((java.lang.Object) (byte) -1);
        double double24 = frequency20.getPct(1);
        double double26 = frequency20.getCumPct((int) '4');
        frequency20.addValue((long) '#');
        double double30 = frequency20.getPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        long long31 = frequency20.getSumFreq();
        double double33 = frequency20.getPct('4');
        double double35 = frequency20.getPct((long) (byte) -1);
        long long36 = frequency0.getCumFreq((java.lang.Object) (byte) -1);
        double double38 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \nhi!\t1\t100%\t100%\n");
        long long40 = frequency0.getCumFreq(3L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str10, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 1L + "'", long31 == 1L);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.0d + "'", double33 == 0.0d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
    }

    @Test
    public void test1861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1861");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double4 = frequency0.getPct(0);
        double double6 = frequency0.getCumPct('a');
        org.apache.commons.math.stat.Frequency frequency7 = new org.apache.commons.math.stat.Frequency();
        double double9 = frequency7.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double11 = frequency7.getCumPct((java.lang.Comparable<java.lang.String>) "");
        double double13 = frequency7.getPct((int) 'a');
        frequency7.addValue((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        frequency7.clear();
        double double18 = frequency7.getPct('4');
        long long20 = frequency7.getCount((int) '4');
        double double21 = frequency0.getCumPct((java.lang.Object) long20);
        long long23 = frequency0.getCumFreq((int) (byte) -1);
        org.apache.commons.math.stat.Frequency frequency24 = new org.apache.commons.math.stat.Frequency();
        double double26 = frequency24.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double28 = frequency24.getCumPct((java.lang.Comparable<java.lang.String>) "");
        double double30 = frequency24.getPct((int) 'a');
        long long32 = frequency24.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        double double34 = frequency24.getCumPct('a');
        org.apache.commons.math.stat.Frequency frequency35 = new org.apache.commons.math.stat.Frequency();
        double double37 = frequency35.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double39 = frequency35.getCumPct((long) (short) 100);
        long long41 = frequency35.getCumFreq((long) (byte) -1);
        double double42 = frequency24.getPct((java.lang.Object) long41);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor43 = frequency24.valuesIterator();
        long long45 = frequency24.getCount(' ');
        long long47 = frequency24.getCount((long) (-1));
        boolean boolean48 = frequency0.equals((java.lang.Object) (-1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertNotNull(wildcardComparableItor43);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test1862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1862");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double4 = frequency0.getCumPct((long) (short) 100);
        long long6 = frequency0.getCumFreq('#');
        frequency0.addValue((java.lang.Integer) 0);
        double double10 = frequency0.getPct((int) (byte) 10);
        frequency0.clear();
        double double13 = frequency0.getPct((int) (short) 0);
        double double15 = frequency0.getCumPct((int) (byte) 0);
        long long17 = frequency0.getCount('#');
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
    }

    @Test
    public void test1863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1863");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double4 = frequency0.getCumPct((long) (short) 100);
        long long6 = frequency0.getCumFreq('#');
        org.apache.commons.math.stat.Frequency frequency7 = new org.apache.commons.math.stat.Frequency();
        double double9 = frequency7.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double11 = frequency7.getCumPct((long) (short) 100);
        long long13 = frequency7.getCumFreq('#');
        boolean boolean14 = frequency0.equals((java.lang.Object) long13);
        double double16 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "");
        org.apache.commons.math.stat.Frequency frequency17 = new org.apache.commons.math.stat.Frequency();
        double double19 = frequency17.getPct((java.lang.Object) (byte) -1);
        double double21 = frequency17.getPct(1);
        double double23 = frequency17.getCumPct((int) '4');
        double double25 = frequency17.getPct((long) (byte) 10);
        long long26 = frequency0.getCumFreq((java.lang.Object) (byte) 10);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor27 = frequency0.valuesIterator();
        long long29 = frequency0.getCumFreq((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n100\t1\t100%\t100%\n");
        long long31 = frequency0.getCumFreq((int) ' ');
        long long33 = frequency0.getCount((int) (byte) -1);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertNotNull(wildcardComparableItor27);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
    }

    @Test
    public void test1864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1864");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double4 = frequency0.getCumPct((long) (short) 100);
        java.lang.Object obj5 = null;
        boolean boolean6 = frequency0.equals(obj5);
        long long8 = frequency0.getCount('a');
        long long10 = frequency0.getCount((int) (byte) 10);
        frequency0.addValue((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \nValue \t Freq. \t Pct. \t Cum Pct. \n\t1\t100%\t100%\n");
        double double14 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n0\t1\t100%\t100%\n");
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
    }

    @Test
    public void test1865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1865");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double4 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "");
        double double6 = frequency0.getPct((int) 'a');
        long long8 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        double double10 = frequency0.getCumPct('a');
        long long12 = frequency0.getCumFreq((int) '#');
        double double14 = frequency0.getCumPct((long) (short) 10);
        long long16 = frequency0.getCumFreq('4');
        org.apache.commons.math.stat.Frequency frequency17 = new org.apache.commons.math.stat.Frequency();
        double double19 = frequency17.getPct((java.lang.Object) (byte) -1);
        double double21 = frequency17.getPct(1);
        double double23 = frequency17.getCumPct((int) '4');
        frequency17.addValue((long) '#');
        long long27 = frequency17.getCount((int) ' ');
        boolean boolean28 = frequency0.equals((java.lang.Object) long27);
        double double30 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n1.0\t1\t100%\t100%\n");
        double double32 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \nValue \t Freq. \t Pct. \t Cum Pct. \n\t1\t100%\t100%\n");
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue(Double.isNaN(double32));
    }

    @Test
    public void test1866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1866");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        long long4 = frequency0.getCount((java.lang.Object) 1L);
        long long6 = frequency0.getCumFreq('4');
        long long8 = frequency0.getCumFreq((java.lang.Object) true);
        double double10 = frequency0.getCumPct(' ');
        long long12 = frequency0.getCumFreq((int) '#');
        org.apache.commons.math.stat.Frequency frequency13 = new org.apache.commons.math.stat.Frequency();
        double double15 = frequency13.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double17 = frequency13.getCumPct((java.lang.Comparable<java.lang.String>) "");
        double double19 = frequency13.getPct((int) 'a');
        long long21 = frequency13.getCount((long) (byte) 1);
        boolean boolean22 = frequency0.equals((java.lang.Object) frequency13);
        long long24 = frequency13.getCumFreq((long) 100);
        double double26 = frequency13.getPct((long) (short) 10);
        long long28 = frequency13.getCumFreq(0);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
    }

    @Test
    public void test1867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1867");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency();
        double double3 = frequency1.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double5 = frequency1.getCumPct((java.lang.Comparable<java.lang.String>) "");
        double double6 = frequency0.getCumPct((java.lang.Object) "");
        double double8 = frequency0.getPct((-1L));
        org.apache.commons.math.stat.Frequency frequency9 = new org.apache.commons.math.stat.Frequency();
        double double11 = frequency9.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        long long13 = frequency9.getCount((java.lang.Object) 1L);
        double double15 = frequency9.getCumPct(1);
        double double17 = frequency9.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        long long19 = frequency9.getCount('a');
        org.apache.commons.math.stat.Frequency frequency20 = new org.apache.commons.math.stat.Frequency();
        double double22 = frequency20.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        java.lang.String str23 = frequency20.toString();
        java.lang.Object obj24 = null;
        double double25 = frequency20.getCumPct(obj24);
        double double27 = frequency20.getCumPct('a');
        double double29 = frequency20.getCumPct((int) (byte) 100);
        frequency20.addValue((java.lang.Integer) 0);
        frequency9.addValue((java.lang.Object) 0);
        long long34 = frequency9.getCumFreq((long) (short) 1);
        double double35 = frequency0.getPct((java.lang.Object) (short) 1);
        long long37 = frequency0.getCumFreq((int) (byte) 0);
        long long39 = frequency0.getCumFreq((long) 0);
        org.apache.commons.math.stat.Frequency frequency40 = new org.apache.commons.math.stat.Frequency();
        double double42 = frequency40.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        long long44 = frequency40.getCount((long) (short) 100);
        frequency40.clear();
        long long47 = frequency40.getCount((int) (short) 0);
        frequency40.addValue((java.lang.Comparable<java.lang.String>) "hi!");
        frequency40.clear();
        // The following exception was thrown during execution in test generation
        try {
            long long51 = frequency0.getCount((java.lang.Object) frequency40);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: org.apache.commons.math.stat.Frequency cannot be cast to java.lang.Comparable");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str23, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 1L + "'", long34 == 1L);
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
    }

    @Test
    public void test1868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1868");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        java.lang.String str3 = frequency0.toString();
        java.lang.Object obj4 = null;
        double double5 = frequency0.getCumPct(obj4);
        double double7 = frequency0.getCumPct('a');
        double double9 = frequency0.getCumPct((int) (byte) 100);
        frequency0.addValue((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        double double13 = frequency0.getPct(0);
        org.apache.commons.math.stat.Frequency frequency14 = new org.apache.commons.math.stat.Frequency();
        double double16 = frequency14.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double18 = frequency14.getCumPct((java.lang.Comparable<java.lang.String>) "");
        double double20 = frequency14.getPct((int) 'a');
        long long22 = frequency14.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        double double24 = frequency14.getCumPct('a');
        org.apache.commons.math.stat.Frequency frequency25 = new org.apache.commons.math.stat.Frequency();
        double double27 = frequency25.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double29 = frequency25.getCumPct((long) (short) 100);
        long long31 = frequency25.getCumFreq((long) (byte) -1);
        double double32 = frequency14.getPct((java.lang.Object) long31);
        long long33 = frequency0.getCount((java.lang.Object) double32);
        double double35 = frequency0.getCumPct((int) '#');
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str3, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
    }

    @Test
    public void test1869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1869");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getPct((java.lang.Object) (byte) -1);
        double double4 = frequency0.getPct(1);
        double double6 = frequency0.getCumPct((int) '4');
        double double8 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        java.lang.String str9 = frequency0.toString();
        long long11 = frequency0.getCumFreq((long) (short) -1);
        frequency0.clear();
        long long14 = frequency0.getCount('#');
        long long16 = frequency0.getCumFreq((int) (byte) 0);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str9, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
    }

    @Test
    public void test1870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1870");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double4 = frequency0.getCumPct((long) (short) 100);
        long long6 = frequency0.getCumFreq('#');
        frequency0.addValue((java.lang.Integer) 0);
        double double10 = frequency0.getPct((int) (byte) 10);
        long long12 = frequency0.getCount((long) 1);
        long long14 = frequency0.getCount('4');
        long long15 = frequency0.getSumFreq();
        long long17 = frequency0.getCount(10);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1L + "'", long15 == 1L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
    }

    @Test
    public void test1871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1871");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getPct((java.lang.Object) (byte) -1);
        long long4 = frequency0.getCumFreq((java.lang.Comparable<java.lang.String>) "hi!");
        long long6 = frequency0.getCumFreq('#');
        double double8 = frequency0.getCumPct((int) (short) 100);
        long long9 = frequency0.getSumFreq();
        org.apache.commons.math.stat.Frequency frequency10 = new org.apache.commons.math.stat.Frequency();
        double double12 = frequency10.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double14 = frequency10.getCumPct((java.lang.Comparable<java.lang.String>) "");
        double double16 = frequency10.getPct((int) 'a');
        long long18 = frequency10.getCount((long) (byte) 1);
        frequency10.addValue('a');
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor21 = frequency10.valuesIterator();
        org.apache.commons.math.stat.Frequency frequency22 = new org.apache.commons.math.stat.Frequency();
        double double24 = frequency22.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double26 = frequency22.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double27 = frequency10.getCumPct((java.lang.Object) double26);
        double double29 = frequency10.getCumPct((int) 'a');
        boolean boolean30 = frequency0.equals((java.lang.Object) 'a');
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNotNull(wildcardComparableItor21);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test1872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1872");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double4 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "");
        double double6 = frequency0.getPct((int) 'a');
        long long8 = frequency0.getCount((long) (byte) 1);
        org.apache.commons.math.stat.Frequency frequency9 = new org.apache.commons.math.stat.Frequency();
        double double11 = frequency9.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double13 = frequency9.getCumPct((long) (short) 100);
        long long15 = frequency9.getCumFreq((long) (byte) -1);
        long long16 = frequency0.getCount((java.lang.Object) (byte) -1);
        java.lang.String str17 = frequency0.toString();
        frequency0.addValue(0L);
        long long21 = frequency0.getCount((int) (short) 100);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str17, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
    }

    @Test
    public void test1873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1873");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getPct((java.lang.Object) (byte) -1);
        double double4 = frequency0.getPct(1);
        double double6 = frequency0.getCumPct((int) '4');
        frequency0.addValue((long) '#');
        double double10 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        long long11 = frequency0.getSumFreq();
        double double13 = frequency0.getPct('4');
        frequency0.addValue((java.lang.Integer) 100);
        frequency0.clear();
        frequency0.addValue(10);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1L + "'", long11 == 1L);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
    }

    @Test
    public void test1874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1874");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        long long4 = frequency0.getCount((long) (short) 100);
        frequency0.addValue('4');
        frequency0.addValue('a');
        long long10 = frequency0.getCumFreq((long) 100);
        double double12 = frequency0.getPct(10L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
    }

    @Test
    public void test1875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1875");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        frequency0.addValue('a');
        org.apache.commons.math.stat.Frequency frequency5 = new org.apache.commons.math.stat.Frequency();
        java.lang.String str6 = frequency5.toString();
        long long8 = frequency5.getCount((int) (byte) 1);
        org.apache.commons.math.stat.Frequency frequency9 = new org.apache.commons.math.stat.Frequency();
        double double11 = frequency9.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double13 = frequency9.getCumPct((java.lang.Comparable<java.lang.String>) "");
        double double15 = frequency9.getPct((int) 'a');
        long long17 = frequency9.getCount((long) (byte) 1);
        long long19 = frequency9.getCumFreq((long) 100);
        frequency9.addValue((int) (byte) -1);
        long long22 = frequency5.getCount((java.lang.Object) (byte) -1);
        double double24 = frequency5.getPct((int) (byte) 10);
        long long26 = frequency5.getCount((int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            double double27 = frequency0.getPct((java.lang.Object) frequency5);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: org.apache.commons.math.stat.Frequency cannot be cast to java.lang.Comparable");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str6, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
    }

    @Test
    public void test1876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1876");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getPct((java.lang.Object) (byte) -1);
        double double4 = frequency0.getPct(1);
        double double6 = frequency0.getCumPct((int) '4');
        frequency0.addValue((java.lang.Comparable<java.lang.String>) "hi!");
        org.apache.commons.math.stat.Frequency frequency9 = new org.apache.commons.math.stat.Frequency();
        double double11 = frequency9.getPct((java.lang.Object) (byte) -1);
        double double13 = frequency9.getPct(1);
        double double15 = frequency9.getCumPct((int) '4');
        frequency9.addValue(10);
        long long19 = frequency9.getCumFreq((long) 'a');
        long long20 = frequency0.getCount((java.lang.Object) 'a');
        double double22 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n-1\t1\t50%\t50%\n0\t1\t50%\t100%\n");
        long long24 = frequency0.getCount((-1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 1L + "'", long19 == 1L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
    }

    @Test
    public void test1877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1877");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        java.lang.String str3 = frequency0.toString();
        java.lang.Object obj4 = null;
        double double5 = frequency0.getCumPct(obj4);
        org.apache.commons.math.stat.Frequency frequency6 = new org.apache.commons.math.stat.Frequency();
        double double8 = frequency6.getPct((java.lang.Object) (byte) -1);
        double double10 = frequency6.getPct(1);
        double double12 = frequency6.getCumPct((int) '4');
        frequency6.addValue((long) '#');
        double double16 = frequency6.getPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        long long17 = frequency6.getSumFreq();
        double double18 = frequency0.getPct((java.lang.Object) long17);
        org.apache.commons.math.stat.Frequency frequency19 = new org.apache.commons.math.stat.Frequency();
        double double21 = frequency19.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double23 = frequency19.getCumPct((long) (short) 100);
        long long25 = frequency19.getCumFreq((long) (byte) -1);
        long long27 = frequency19.getCount((long) (short) 1);
        long long29 = frequency19.getCount((java.lang.Object) 10.0d);
        frequency19.addValue((int) '4');
        long long32 = frequency0.getCount((java.lang.Object) '4');
        org.apache.commons.math.stat.Frequency frequency33 = new org.apache.commons.math.stat.Frequency();
        double double35 = frequency33.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double37 = frequency33.getCumPct((java.lang.Comparable<java.lang.String>) "");
        double double39 = frequency33.getPct((int) 'a');
        long long41 = frequency33.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        double double43 = frequency33.getCumPct('a');
        long long45 = frequency33.getCumFreq((int) '#');
        double double47 = frequency33.getCumPct((long) (short) 10);
        long long49 = frequency33.getCumFreq('4');
        org.apache.commons.math.stat.Frequency frequency50 = new org.apache.commons.math.stat.Frequency();
        double double52 = frequency50.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double54 = frequency50.getCumPct((long) (short) 100);
        double double56 = frequency50.getCumPct((java.lang.Object) 0);
        boolean boolean57 = frequency33.equals((java.lang.Object) double56);
        long long59 = frequency33.getCount('4');
        frequency33.addValue((java.lang.Integer) 10);
        long long63 = frequency33.getCumFreq((long) ' ');
        long long65 = frequency33.getCount(' ');
        double double67 = frequency33.getCumPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n100\t1\t100%\t100%\n");
        long long68 = frequency0.getCumFreq((java.lang.Object) double67);
        java.lang.String str69 = frequency0.toString();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str3, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1L + "'", long17 == 1L);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double52));
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertTrue(Double.isNaN(double56));
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 0L + "'", long59 == 0L);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 1L + "'", long63 == 1L);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 0L + "'", long65 == 0L);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.0d + "'", double67 == 0.0d);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 0L + "'", long68 == 0L);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str69, "Value \t Freq. \t Pct. \t Cum Pct. \n");
    }

    @Test
    public void test1878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1878");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getPct((java.lang.Object) (byte) -1);
        double double4 = frequency0.getPct(1);
        double double6 = frequency0.getCumPct((int) '4');
        long long8 = frequency0.getCount((int) (byte) 10);
        double double10 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n0\t1\t100%\t100%\n");
        java.lang.Class<?> wildcardClass11 = frequency0.getClass();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test1879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1879");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        java.lang.String str3 = frequency0.toString();
        java.lang.Object obj4 = null;
        double double5 = frequency0.getCumPct(obj4);
        double double7 = frequency0.getCumPct('a');
        double double9 = frequency0.getPct(1);
        double double11 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "");
        frequency0.addValue('a');
        long long15 = frequency0.getCumFreq('a');
        org.apache.commons.math.stat.Frequency frequency16 = new org.apache.commons.math.stat.Frequency();
        double double18 = frequency16.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        long long20 = frequency16.getCount((long) (short) 100);
        org.apache.commons.math.stat.Frequency frequency21 = new org.apache.commons.math.stat.Frequency();
        double double23 = frequency21.getPct((java.lang.Object) (byte) -1);
        double double24 = frequency16.getPct((java.lang.Object) (byte) -1);
        double double26 = frequency16.getCumPct((java.lang.Object) (-1.0f));
        frequency16.addValue((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n100\t1\t100%\t100%\n");
        org.apache.commons.math.stat.Frequency frequency29 = new org.apache.commons.math.stat.Frequency();
        double double31 = frequency29.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double33 = frequency29.getCumPct((java.lang.Comparable<java.lang.String>) "");
        double double35 = frequency29.getPct((int) 'a');
        long long37 = frequency29.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        double double39 = frequency29.getCumPct('a');
        org.apache.commons.math.stat.Frequency frequency40 = new org.apache.commons.math.stat.Frequency();
        double double42 = frequency40.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double44 = frequency40.getCumPct((long) (short) 100);
        long long46 = frequency40.getCumFreq((long) (byte) -1);
        double double47 = frequency29.getPct((java.lang.Object) long46);
        boolean boolean49 = frequency29.equals((java.lang.Object) 10);
        java.lang.String str50 = frequency29.toString();
        double double52 = frequency29.getCumPct((int) (byte) 10);
        org.apache.commons.math.stat.Frequency frequency53 = new org.apache.commons.math.stat.Frequency();
        double double55 = frequency53.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double57 = frequency53.getCumPct((java.lang.Comparable<java.lang.String>) "");
        double double59 = frequency53.getPct((int) 'a');
        long long61 = frequency53.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        double double63 = frequency53.getCumPct('a');
        org.apache.commons.math.stat.Frequency frequency64 = new org.apache.commons.math.stat.Frequency();
        double double66 = frequency64.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double68 = frequency64.getCumPct((long) (short) 100);
        long long70 = frequency64.getCumFreq((long) (byte) -1);
        double double71 = frequency53.getPct((java.lang.Object) long70);
        long long73 = frequency53.getCumFreq((int) (short) -1);
        double double74 = frequency29.getCumPct((java.lang.Object) (short) -1);
        double double75 = frequency16.getPct((java.lang.Object) double74);
        long long76 = frequency0.getCount((java.lang.Object) double75);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str3, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1L + "'", long15 == 1L);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str50, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue(Double.isNaN(double52));
        org.junit.Assert.assertTrue(Double.isNaN(double55));
        org.junit.Assert.assertTrue(Double.isNaN(double57));
        org.junit.Assert.assertTrue(Double.isNaN(double59));
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 0L + "'", long61 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double63));
        org.junit.Assert.assertTrue(Double.isNaN(double66));
        org.junit.Assert.assertTrue(Double.isNaN(double68));
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 0L + "'", long70 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double71));
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 0L + "'", long73 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double74));
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 0.0d + "'", double75 == 0.0d);
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + 0L + "'", long76 == 0L);
    }

    @Test
    public void test1880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1880");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double4 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "");
        double double6 = frequency0.getPct((int) 'a');
        long long8 = frequency0.getCount((long) (byte) 1);
        long long10 = frequency0.getCumFreq((long) 100);
        org.apache.commons.math.stat.Frequency frequency11 = new org.apache.commons.math.stat.Frequency();
        double double13 = frequency11.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        long long15 = frequency11.getCount((java.lang.Object) 1L);
        long long17 = frequency11.getCumFreq('4');
        long long19 = frequency11.getCumFreq((java.lang.Object) true);
        frequency0.addValue((java.lang.Object) long19);
        org.apache.commons.math.stat.Frequency frequency21 = new org.apache.commons.math.stat.Frequency();
        double double23 = frequency21.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double25 = frequency21.getCumPct((long) (short) 100);
        long long27 = frequency21.getCumFreq('#');
        frequency21.addValue((java.lang.Integer) 0);
        double double31 = frequency21.getCumPct((java.lang.Object) 10L);
        long long33 = frequency21.getCount((int) (short) 1);
        double double35 = frequency21.getCumPct('#');
        long long37 = frequency21.getCount((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean38 = frequency0.equals((java.lang.Object) "hi!");
        double double40 = frequency0.getCumPct('a');
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 1.0d + "'", double31 == 1.0d);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.0d + "'", double40 == 0.0d);
    }

    @Test
    public void test1881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1881");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        java.lang.String str3 = frequency0.toString();
        java.lang.Object obj4 = null;
        double double5 = frequency0.getCumPct(obj4);
        double double7 = frequency0.getCumPct('a');
        double double9 = frequency0.getPct(1);
        org.apache.commons.math.stat.Frequency frequency10 = new org.apache.commons.math.stat.Frequency();
        double double12 = frequency10.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        java.lang.String str13 = frequency10.toString();
        java.lang.Object obj14 = null;
        double double15 = frequency10.getCumPct(obj14);
        double double17 = frequency10.getCumPct('a');
        double double19 = frequency10.getCumPct((int) (byte) 100);
        frequency10.addValue((java.lang.Integer) 0);
        double double23 = frequency10.getCumPct((int) ' ');
        frequency0.addValue((java.lang.Object) double23);
        double double26 = frequency0.getPct((int) (byte) 1);
        long long28 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n-1\t1\t100%\t100%\n");
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str3, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str13, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 1.0d + "'", double23 == 1.0d);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.0d + "'", double26 == 0.0d);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
    }

    @Test
    public void test1882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1882");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        java.lang.String str3 = frequency0.toString();
        java.lang.Object obj4 = null;
        double double5 = frequency0.getCumPct(obj4);
        double double7 = frequency0.getCumPct('a');
        double double9 = frequency0.getCumPct((int) (byte) 100);
        long long11 = frequency0.getCount(0L);
        double double13 = frequency0.getCumPct((long) (short) -1);
        long long14 = frequency0.getSumFreq();
        frequency0.addValue((int) (byte) 100);
        org.apache.commons.math.stat.Frequency frequency17 = new org.apache.commons.math.stat.Frequency();
        double double19 = frequency17.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        long long21 = frequency17.getCount((java.lang.Object) 1L);
        long long23 = frequency17.getCumFreq('4');
        long long25 = frequency17.getCumFreq((java.lang.Object) true);
        double double27 = frequency17.getCumPct(' ');
        long long29 = frequency17.getCumFreq((int) '#');
        org.apache.commons.math.stat.Frequency frequency30 = new org.apache.commons.math.stat.Frequency();
        double double32 = frequency30.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double34 = frequency30.getCumPct((java.lang.Comparable<java.lang.String>) "");
        double double36 = frequency30.getPct((int) 'a');
        long long38 = frequency30.getCount((long) (byte) 1);
        boolean boolean39 = frequency17.equals((java.lang.Object) frequency30);
        long long41 = frequency30.getCumFreq((long) (short) 1);
        double double42 = frequency0.getPct((java.lang.Object) (short) 1);
        long long44 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n-1\t1\t100%\t100%\n");
        long long46 = frequency0.getCount((-1));
        long long48 = frequency0.getCumFreq('4');
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str3, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.0d + "'", double42 == 0.0d);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
    }

    @Test
    public void test1883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1883");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getPct((java.lang.Object) (byte) -1);
        double double4 = frequency0.getPct(1);
        double double6 = frequency0.getCumPct((int) '4');
        frequency0.addValue((long) '#');
        long long10 = frequency0.getCount((int) ' ');
        double double12 = frequency0.getCumPct((long) (byte) 1);
        frequency0.addValue((int) (byte) 100);
        long long16 = frequency0.getCumFreq((int) ' ');
        double double18 = frequency0.getCumPct(' ');
        double double20 = frequency0.getCumPct(0);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
    }

    @Test
    public void test1884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1884");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double4 = frequency0.getCumPct((long) (short) 100);
        long long6 = frequency0.getCumFreq('#');
        frequency0.addValue((java.lang.Integer) 0);
        double double10 = frequency0.getPct((int) (byte) 10);
        long long12 = frequency0.getCount((long) 1);
        double double14 = frequency0.getCumPct((long) (short) 100);
        long long16 = frequency0.getCount((long) 0);
        frequency0.addValue((java.lang.Integer) 0);
        long long19 = frequency0.getSumFreq();
        long long21 = frequency0.getCumFreq((long) '#');
        long long23 = frequency0.getCount((long) (byte) 0);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1.0d + "'", double14 == 1.0d);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1L + "'", long16 == 1L);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 2L + "'", long19 == 2L);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 2L + "'", long21 == 2L);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 2L + "'", long23 == 2L);
    }

    @Test
    public void test1885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1885");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double4 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "");
        double double6 = frequency0.getPct((int) 'a');
        long long8 = frequency0.getCount((long) (byte) 1);
        frequency0.addValue('a');
        long long12 = frequency0.getCount('#');
        long long14 = frequency0.getCount(1L);
        frequency0.clear();
        long long17 = frequency0.getCount('4');
        frequency0.addValue((java.lang.Integer) 10);
        double double21 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \na\t1\t100%\t100%\n");
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
    }

    @Test
    public void test1886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1886");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        long long4 = frequency0.getCount((long) (short) 100);
        org.apache.commons.math.stat.Frequency frequency5 = new org.apache.commons.math.stat.Frequency();
        double double7 = frequency5.getPct((java.lang.Object) (byte) -1);
        double double8 = frequency0.getPct((java.lang.Object) (byte) -1);
        double double10 = frequency0.getCumPct((java.lang.Object) (-1.0f));
        double double12 = frequency0.getPct('a');
        org.apache.commons.math.stat.Frequency frequency13 = new org.apache.commons.math.stat.Frequency();
        double double15 = frequency13.getPct((java.lang.Object) (byte) -1);
        double double17 = frequency13.getPct(1);
        double double19 = frequency13.getCumPct((int) '4');
        frequency13.addValue((long) '#');
        double double23 = frequency13.getPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        double double25 = frequency13.getPct((java.lang.Comparable<java.lang.String>) "");
        java.lang.String str26 = frequency13.toString();
        long long28 = frequency13.getCumFreq('#');
        java.lang.String str29 = frequency13.toString();
        long long31 = frequency13.getCumFreq((int) (byte) 0);
        double double33 = frequency13.getCumPct((int) (short) 100);
        // The following exception was thrown during execution in test generation
        try {
            double double34 = frequency0.getCumPct((java.lang.Object) frequency13);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: org.apache.commons.math.stat.Frequency cannot be cast to java.lang.Comparable");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n35\t1\t100%\t100%\n" + "'", str26, "Value \t Freq. \t Pct. \t Cum Pct. \n35\t1\t100%\t100%\n");
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n35\t1\t100%\t100%\n" + "'", str29, "Value \t Freq. \t Pct. \t Cum Pct. \n35\t1\t100%\t100%\n");
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0d + "'", double33 == 1.0d);
    }

    @Test
    public void test1887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1887");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getPct((java.lang.Object) (byte) -1);
        double double4 = frequency0.getPct(1);
        double double6 = frequency0.getCumPct((int) '4');
        double double8 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        frequency0.addValue((java.lang.Object) 1.0d);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor11 = frequency0.valuesIterator();
        double double13 = frequency0.getPct((long) 0);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertNotNull(wildcardComparableItor11);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
    }

    @Test
    public void test1888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1888");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getPct((java.lang.Object) (byte) -1);
        double double4 = frequency0.getPct(1);
        double double6 = frequency0.getCumPct((int) '4');
        frequency0.addValue((long) '#');
        long long10 = frequency0.getCount((int) ' ');
        double double12 = frequency0.getCumPct((long) (short) 0);
        double double14 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        frequency0.clear();
        frequency0.addValue((java.lang.Integer) 1);
        double double19 = frequency0.getCumPct(' ');
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
    }

    @Test
    public void test1889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1889");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double4 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "");
        double double6 = frequency0.getPct((int) 'a');
        long long8 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        double double10 = frequency0.getCumPct('a');
        double double12 = frequency0.getPct((java.lang.Object) 1L);
        long long14 = frequency0.getCount(10);
        frequency0.addValue((java.lang.Integer) 1);
        frequency0.addValue(0);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
    }

    @Test
    public void test1890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1890");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double4 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "");
        double double6 = frequency0.getPct((int) 'a');
        long long8 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        double double10 = frequency0.getCumPct('a');
        long long12 = frequency0.getCumFreq((int) '#');
        java.lang.String str13 = frequency0.toString();
        double double15 = frequency0.getPct('#');
        frequency0.addValue((java.lang.Comparable<java.lang.String>) "hi!");
        java.lang.Class<?> wildcardClass18 = frequency0.getClass();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str13, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test1891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1891");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double4 = frequency0.getCumPct((long) (short) 100);
        long long6 = frequency0.getCumFreq('#');
        org.apache.commons.math.stat.Frequency frequency7 = new org.apache.commons.math.stat.Frequency();
        double double9 = frequency7.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double11 = frequency7.getCumPct((long) (short) 100);
        long long13 = frequency7.getCumFreq('#');
        boolean boolean14 = frequency0.equals((java.lang.Object) long13);
        double double16 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "");
        org.apache.commons.math.stat.Frequency frequency17 = new org.apache.commons.math.stat.Frequency();
        double double19 = frequency17.getPct((java.lang.Object) (byte) -1);
        double double21 = frequency17.getPct(1);
        double double23 = frequency17.getCumPct((int) '4');
        double double25 = frequency17.getPct((long) (byte) 10);
        long long26 = frequency0.getCumFreq((java.lang.Object) (byte) 10);
        frequency0.addValue((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n100\t1\t100%\t100%\n");
        frequency0.clear();
        long long31 = frequency0.getCount(' ');
        double double33 = frequency0.getCumPct(' ');
        double double35 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n35\t1\t50%\t50%\n100\t1\t50%\t100%\n");
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertTrue(Double.isNaN(double35));
    }

    @Test
    public void test1892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1892");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        long long4 = frequency0.getCount((long) (short) 100);
        frequency0.clear();
        frequency0.addValue('#');
        org.apache.commons.math.stat.Frequency frequency8 = new org.apache.commons.math.stat.Frequency();
        double double10 = frequency8.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double12 = frequency8.getCumPct((long) (short) 100);
        long long14 = frequency8.getCumFreq((long) (byte) -1);
        long long16 = frequency8.getCumFreq((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n-1\t1\t100%\t100%\n");
        long long17 = frequency0.getCumFreq((java.lang.Object) "Value \t Freq. \t Pct. \t Cum Pct. \n-1\t1\t100%\t100%\n");
        double double19 = frequency0.getPct((int) (byte) -1);
        double double21 = frequency0.getPct('a');
        frequency0.clear();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
    }

    @Test
    public void test1893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1893");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        long long4 = frequency0.getCount((java.lang.Object) 1L);
        long long6 = frequency0.getCumFreq('4');
        long long8 = frequency0.getCumFreq((java.lang.Object) true);
        long long10 = frequency0.getCount((long) (short) 100);
        double double12 = frequency0.getCumPct('a');
        frequency0.clear();
        long long15 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n35\t1\t100%\t100%\n");
        java.lang.Comparable<java.lang.String> strComparable16 = null;
        // The following exception was thrown during execution in test generation
        try {
            frequency0.addValue(strComparable16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
    }

    @Test
    public void test1894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1894");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        org.apache.commons.math.stat.Frequency frequency3 = new org.apache.commons.math.stat.Frequency();
        double double5 = frequency3.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double7 = frequency3.getCumPct((java.lang.Comparable<java.lang.String>) "");
        double double9 = frequency3.getPct((int) 'a');
        long long11 = frequency3.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        double double13 = frequency3.getCumPct('a');
        long long15 = frequency3.getCumFreq((int) '#');
        java.lang.String str16 = frequency3.toString();
        boolean boolean17 = frequency0.equals((java.lang.Object) str16);
        long long19 = frequency0.getCount('4');
        frequency0.addValue((java.lang.Integer) (-1));
        long long23 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n-1\t1\t100%\t100%\n");
        long long25 = frequency0.getCumFreq(10L);
        org.apache.commons.math.stat.Frequency frequency26 = new org.apache.commons.math.stat.Frequency();
        double double28 = frequency26.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double30 = frequency26.getCumPct((java.lang.Comparable<java.lang.String>) "");
        double double32 = frequency26.getPct((int) 'a');
        long long34 = frequency26.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        double double36 = frequency26.getCumPct('a');
        org.apache.commons.math.stat.Frequency frequency37 = new org.apache.commons.math.stat.Frequency();
        double double39 = frequency37.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double41 = frequency37.getCumPct((long) (short) 100);
        long long43 = frequency37.getCumFreq((long) (byte) -1);
        double double44 = frequency26.getPct((java.lang.Object) long43);
        boolean boolean46 = frequency26.equals((java.lang.Object) 10);
        java.lang.String str47 = frequency26.toString();
        long long49 = frequency26.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        double double51 = frequency26.getCumPct((-1));
        frequency26.addValue((java.lang.Integer) (-1));
        java.lang.String str54 = frequency26.toString();
        long long55 = frequency0.getCount((java.lang.Object) str54);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str16, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1L + "'", long25 == 1L);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str47, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n-1\t1\t100%\t100%\n" + "'", str54, "Value \t Freq. \t Pct. \t Cum Pct. \n-1\t1\t100%\t100%\n");
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 0L + "'", long55 == 0L);
    }

    @Test
    public void test1895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1895");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getPct((java.lang.Object) (byte) -1);
        double double4 = frequency0.getPct(1);
        double double6 = frequency0.getCumPct((int) '4');
        frequency0.addValue((long) '#');
        double double10 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        long long11 = frequency0.getSumFreq();
        double double13 = frequency0.getPct((int) (short) 100);
        double double15 = frequency0.getCumPct((-1));
        // The following exception was thrown during execution in test generation
        try {
            frequency0.addValue((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n2\t1\t50%\t50%\n35\t1\t50%\t100%\n");
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1L + "'", long11 == 1L);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
    }

    @Test
    public void test1896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1896");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        frequency0.addValue((int) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor5 = frequency0.valuesIterator();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertNotNull(wildcardComparableItor5);
    }

    @Test
    public void test1897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1897");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        java.lang.String str3 = frequency0.toString();
        java.lang.Object obj4 = null;
        double double5 = frequency0.getCumPct(obj4);
        double double7 = frequency0.getCumPct('a');
        double double9 = frequency0.getCumPct((int) (byte) 100);
        long long11 = frequency0.getCount(0L);
        frequency0.addValue((long) (byte) 0);
        long long15 = frequency0.getCumFreq((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        java.lang.String str16 = frequency0.toString();
        double double18 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \nValue \t Freq. \t Pct. \t Cum Pct. \n\t1\t100%\t100%\n");
        long long19 = frequency0.getSumFreq();
        org.apache.commons.math.stat.Frequency frequency20 = new org.apache.commons.math.stat.Frequency();
        double double22 = frequency20.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double24 = frequency20.getCumPct((long) (short) 100);
        long long26 = frequency20.getCumFreq('#');
        frequency20.addValue((java.lang.Integer) 0);
        double double30 = frequency20.getCumPct((java.lang.Object) 10L);
        org.apache.commons.math.stat.Frequency frequency31 = new org.apache.commons.math.stat.Frequency();
        double double33 = frequency31.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        long long34 = frequency20.getCumFreq((java.lang.Object) double33);
        double double35 = frequency0.getPct((java.lang.Object) long34);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str3, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n0\t1\t100%\t100%\n" + "'", str16, "Value \t Freq. \t Pct. \t Cum Pct. \n0\t1\t100%\t100%\n");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 1L + "'", long19 == 1L);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 1.0d + "'", double30 == 1.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 1.0d + "'", double35 == 1.0d);
    }

    @Test
    public void test1898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1898");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        long long4 = frequency0.getCount((long) (short) 100);
        frequency0.addValue((long) (byte) 1);
        long long8 = frequency0.getCumFreq((int) (byte) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor9 = frequency0.valuesIterator();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1L + "'", long8 == 1L);
        org.junit.Assert.assertNotNull(wildcardComparableItor9);
    }

    @Test
    public void test1899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1899");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency();
        double double3 = frequency1.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double5 = frequency1.getCumPct((java.lang.Comparable<java.lang.String>) "");
        double double6 = frequency0.getCumPct((java.lang.Object) "");
        double double8 = frequency0.getPct((-1L));
        org.apache.commons.math.stat.Frequency frequency9 = new org.apache.commons.math.stat.Frequency();
        double double11 = frequency9.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        long long13 = frequency9.getCount((java.lang.Object) 1L);
        double double15 = frequency9.getCumPct(1);
        double double17 = frequency9.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        long long19 = frequency9.getCount('a');
        org.apache.commons.math.stat.Frequency frequency20 = new org.apache.commons.math.stat.Frequency();
        double double22 = frequency20.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        java.lang.String str23 = frequency20.toString();
        java.lang.Object obj24 = null;
        double double25 = frequency20.getCumPct(obj24);
        double double27 = frequency20.getCumPct('a');
        double double29 = frequency20.getCumPct((int) (byte) 100);
        frequency20.addValue((java.lang.Integer) 0);
        frequency9.addValue((java.lang.Object) 0);
        long long34 = frequency9.getCumFreq((long) (short) 1);
        double double35 = frequency0.getPct((java.lang.Object) (short) 1);
        frequency0.clear();
        double double38 = frequency0.getPct(' ');
        frequency0.addValue((java.lang.Integer) 0);
        // The following exception was thrown during execution in test generation
        try {
            frequency0.addValue('a');
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str23, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 1L + "'", long34 == 1L);
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertTrue(Double.isNaN(double38));
    }

    @Test
    public void test1900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1900");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency();
        double double3 = frequency1.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double5 = frequency1.getCumPct((java.lang.Comparable<java.lang.String>) "");
        double double7 = frequency1.getPct((int) 'a');
        long long9 = frequency1.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        double double11 = frequency1.getCumPct('a');
        org.apache.commons.math.stat.Frequency frequency12 = new org.apache.commons.math.stat.Frequency();
        double double14 = frequency12.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double16 = frequency12.getCumPct((long) (short) 100);
        long long18 = frequency12.getCumFreq((long) (byte) -1);
        double double19 = frequency1.getPct((java.lang.Object) long18);
        boolean boolean21 = frequency1.equals((java.lang.Object) 10);
        java.lang.String str22 = frequency1.toString();
        double double24 = frequency1.getCumPct((int) (byte) 10);
        frequency0.addValue((java.lang.Object) double24);
        double double27 = frequency0.getPct((int) (byte) 1);
        double double29 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n#\t1\t100%\t100%\n");
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str22, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
    }

    @Test
    public void test1901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1901");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getPct((java.lang.Object) (byte) -1);
        double double4 = frequency0.getPct(1);
        double double6 = frequency0.getCumPct((int) '4');
        double double8 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        frequency0.addValue((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n0\t1\t50%\t50%\n10\t1\t50%\t100%\n");
        long long12 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n100\t1\t100%\t100%\n");
        double double14 = frequency0.getCumPct((int) (byte) -1);
        org.apache.commons.math.stat.Frequency frequency15 = new org.apache.commons.math.stat.Frequency();
        double double17 = frequency15.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        long long19 = frequency15.getCount((long) (short) 100);
        frequency15.addValue('4');
        frequency15.addValue('a');
        long long25 = frequency15.getCumFreq((long) 100);
        long long26 = frequency0.getCount((java.lang.Object) long25);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
    }

    @Test
    public void test1902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1902");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double4 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "");
        double double6 = frequency0.getPct((int) 'a');
        long long8 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        double double10 = frequency0.getCumPct('a');
        org.apache.commons.math.stat.Frequency frequency11 = new org.apache.commons.math.stat.Frequency();
        double double13 = frequency11.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double15 = frequency11.getCumPct((long) (short) 100);
        long long17 = frequency11.getCumFreq((long) (byte) -1);
        double double18 = frequency0.getPct((java.lang.Object) long17);
        boolean boolean20 = frequency0.equals((java.lang.Object) 10);
        java.lang.String str21 = frequency0.toString();
        long long23 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        frequency0.addValue((java.lang.Integer) (-1));
        org.apache.commons.math.stat.Frequency frequency26 = new org.apache.commons.math.stat.Frequency();
        double double28 = frequency26.getPct((java.lang.Object) (byte) -1);
        double double30 = frequency26.getPct(1);
        double double32 = frequency26.getCumPct((int) '4');
        frequency26.addValue((long) '#');
        double double36 = frequency26.getPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        double double38 = frequency26.getPct((java.lang.Comparable<java.lang.String>) "");
        long long40 = frequency26.getCount('a');
        long long42 = frequency26.getCumFreq((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \na\t1\t100%\t100%\n");
        frequency0.addValue((java.lang.Object) long42);
        java.lang.String str44 = frequency0.toString();
        long long46 = frequency0.getCumFreq((int) (short) 10);
        frequency0.addValue((java.lang.Integer) 1);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str21, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.0d + "'", double36 == 0.0d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n-1\t1\t50%\t50%\n0\t1\t50%\t100%\n" + "'", str44, "Value \t Freq. \t Pct. \t Cum Pct. \n-1\t1\t50%\t50%\n0\t1\t50%\t100%\n");
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 2L + "'", long46 == 2L);
    }

    @Test
    public void test1903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1903");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double4 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "");
        double double6 = frequency0.getPct((int) 'a');
        long long8 = frequency0.getCount((long) (byte) 1);
        frequency0.addValue('a');
        long long12 = frequency0.getCount('#');
        double double14 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "");
        double double16 = frequency0.getCumPct(1);
        java.lang.String str17 = frequency0.toString();
        // The following exception was thrown during execution in test generation
        try {
            frequency0.addValue((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \nhi!\t1\t100%\t100%\n");
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \na\t1\t100%\t100%\n" + "'", str17, "Value \t Freq. \t Pct. \t Cum Pct. \na\t1\t100%\t100%\n");
    }

    @Test
    public void test1904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1904");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double4 = frequency0.getCumPct((long) (short) 100);
        long long6 = frequency0.getCumFreq('#');
        frequency0.addValue((java.lang.Integer) 0);
        double double10 = frequency0.getPct((int) (byte) 10);
        frequency0.clear();
        double double13 = frequency0.getPct((int) (short) 0);
        long long14 = frequency0.getSumFreq();
        double double16 = frequency0.getCumPct((long) (-1));
        double double18 = frequency0.getPct(' ');
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
    }

    @Test
    public void test1905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1905");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double4 = frequency0.getCumPct((long) (short) 100);
        long long6 = frequency0.getCumFreq('#');
        frequency0.addValue((java.lang.Integer) 0);
        double double10 = frequency0.getPct((int) (byte) 10);
        long long12 = frequency0.getCount((long) 1);
        long long14 = frequency0.getCount('4');
        java.lang.String str15 = frequency0.toString();
        long long17 = frequency0.getCount(1L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n0\t1\t100%\t100%\n" + "'", str15, "Value \t Freq. \t Pct. \t Cum Pct. \n0\t1\t100%\t100%\n");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
    }

    @Test
    public void test1906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1906");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        java.lang.String str3 = frequency0.toString();
        java.lang.Object obj4 = null;
        double double5 = frequency0.getCumPct(obj4);
        double double7 = frequency0.getCumPct('a');
        double double9 = frequency0.getPct(1);
        double double11 = frequency0.getPct(1);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str3, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
    }

    @Test
    public void test1907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1907");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        long long4 = frequency0.getCount((long) (short) 100);
        frequency0.addValue('4');
        frequency0.addValue('a');
        long long9 = frequency0.getSumFreq();
        frequency0.clear();
        org.apache.commons.math.stat.Frequency frequency11 = new org.apache.commons.math.stat.Frequency();
        double double13 = frequency11.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        java.lang.String str14 = frequency11.toString();
        java.lang.Object obj15 = null;
        double double16 = frequency11.getCumPct(obj15);
        double double18 = frequency11.getCumPct('a');
        double double20 = frequency11.getCumPct((int) (byte) 100);
        frequency11.addValue((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        long long24 = frequency11.getCumFreq((int) (short) 10);
        long long26 = frequency11.getCumFreq((int) (short) 100);
        long long28 = frequency11.getCumFreq(2L);
        boolean boolean29 = frequency0.equals((java.lang.Object) 2L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 2L + "'", long9 == 2L);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str14, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test1908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1908");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        java.lang.String str3 = frequency0.toString();
        java.lang.Object obj4 = null;
        double double5 = frequency0.getCumPct(obj4);
        double double7 = frequency0.getCumPct('a');
        double double9 = frequency0.getCumPct((int) (byte) 100);
        long long11 = frequency0.getCount(0L);
        double double13 = frequency0.getCumPct((long) (short) -1);
        long long14 = frequency0.getSumFreq();
        frequency0.addValue((int) (byte) 100);
        org.apache.commons.math.stat.Frequency frequency17 = new org.apache.commons.math.stat.Frequency();
        double double19 = frequency17.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        long long21 = frequency17.getCount((java.lang.Object) 1L);
        long long23 = frequency17.getCumFreq('4');
        long long25 = frequency17.getCumFreq((java.lang.Object) true);
        double double27 = frequency17.getCumPct(' ');
        long long29 = frequency17.getCumFreq((int) '#');
        org.apache.commons.math.stat.Frequency frequency30 = new org.apache.commons.math.stat.Frequency();
        double double32 = frequency30.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double34 = frequency30.getCumPct((java.lang.Comparable<java.lang.String>) "");
        double double36 = frequency30.getPct((int) 'a');
        long long38 = frequency30.getCount((long) (byte) 1);
        boolean boolean39 = frequency17.equals((java.lang.Object) frequency30);
        long long41 = frequency30.getCumFreq((long) (short) 1);
        double double42 = frequency0.getPct((java.lang.Object) (short) 1);
        long long44 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n-1\t1\t100%\t100%\n");
        double double46 = frequency0.getPct((int) (byte) 10);
        double double48 = frequency0.getCumPct('#');
        double double50 = frequency0.getCumPct((long) (byte) 0);
        double double52 = frequency0.getCumPct((long) (byte) 10);
        long long54 = frequency0.getCumFreq((java.lang.Comparable<java.lang.String>) "");
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str3, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.0d + "'", double42 == 0.0d);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.0d + "'", double46 == 0.0d);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.0d + "'", double50 == 0.0d);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.0d + "'", double52 == 0.0d);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 0L + "'", long54 == 0L);
    }

    @Test
    public void test1909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1909");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency();
        double double3 = frequency1.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double5 = frequency1.getCumPct((java.lang.Comparable<java.lang.String>) "");
        double double6 = frequency0.getCumPct((java.lang.Object) "");
        frequency0.addValue((java.lang.Integer) 1);
        long long10 = frequency0.getCumFreq(' ');
        long long12 = frequency0.getCumFreq(10L);
        long long14 = frequency0.getCount((long) 0);
        // The following exception was thrown during execution in test generation
        try {
            frequency0.addValue((java.lang.Comparable<java.lang.String>) "hi!");
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
    }

    @Test
    public void test1910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1910");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getPct((java.lang.Object) (byte) -1);
        double double4 = frequency0.getPct(1);
        double double6 = frequency0.getCumPct((int) '4');
        frequency0.addValue((long) '#');
        double double10 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        double double12 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "");
        long long14 = frequency0.getCount('a');
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor15 = frequency0.valuesIterator();
        frequency0.addValue((int) '#');
        frequency0.addValue((java.lang.Integer) (-1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(wildcardComparableItor15);
    }

    @Test
    public void test1911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1911");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double4 = frequency0.getCumPct((long) (short) 100);
        long long6 = frequency0.getCumFreq('#');
        org.apache.commons.math.stat.Frequency frequency7 = new org.apache.commons.math.stat.Frequency();
        double double9 = frequency7.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double11 = frequency7.getCumPct((long) (short) 100);
        long long13 = frequency7.getCumFreq('#');
        boolean boolean14 = frequency0.equals((java.lang.Object) long13);
        double double16 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "");
        org.apache.commons.math.stat.Frequency frequency17 = new org.apache.commons.math.stat.Frequency();
        double double19 = frequency17.getPct((java.lang.Object) (byte) -1);
        double double21 = frequency17.getPct(1);
        double double23 = frequency17.getCumPct((int) '4');
        double double25 = frequency17.getPct((long) (byte) 10);
        long long26 = frequency0.getCumFreq((java.lang.Object) (byte) 10);
        long long28 = frequency0.getCumFreq((int) ' ');
        frequency0.addValue((java.lang.Integer) (-1));
        double double32 = frequency0.getCumPct('4');
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor33 = frequency0.valuesIterator();
        org.apache.commons.math.stat.Frequency frequency34 = new org.apache.commons.math.stat.Frequency();
        double double36 = frequency34.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        java.lang.String str37 = frequency34.toString();
        java.lang.Object obj38 = null;
        double double39 = frequency34.getCumPct(obj38);
        double double41 = frequency34.getCumPct('a');
        double double43 = frequency34.getCumPct((int) (byte) 100);
        frequency34.addValue((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        long long47 = frequency34.getCumFreq((int) (short) 10);
        long long49 = frequency34.getCumFreq((java.lang.Object) (short) 100);
        long long51 = frequency34.getCumFreq((long) (-1));
        // The following exception was thrown during execution in test generation
        try {
            long long52 = frequency0.getCount((java.lang.Object) frequency34);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: org.apache.commons.math.stat.Frequency cannot be cast to java.lang.Comparable");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
        org.junit.Assert.assertNotNull(wildcardComparableItor33);
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str37, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L);
    }

    @Test
    public void test1912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1912");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double4 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "");
        double double6 = frequency0.getPct((long) 100);
        double double8 = frequency0.getPct(1L);
        frequency0.addValue(10);
        double double12 = frequency0.getPct((int) (byte) 100);
        double double14 = frequency0.getCumPct((int) (short) 100);
        double double16 = frequency0.getPct(10);
        frequency0.clear();
        long long19 = frequency0.getCount(' ');
        frequency0.addValue((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n0\t1\t50%\t50%\n10\t1\t50%\t100%\n");
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor22 = frequency0.valuesIterator();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1.0d + "'", double14 == 1.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 1.0d + "'", double16 == 1.0d);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertNotNull(wildcardComparableItor22);
    }

    @Test
    public void test1913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1913");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double4 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "");
        double double6 = frequency0.getPct((int) 'a');
        long long8 = frequency0.getCount((long) (byte) 1);
        org.apache.commons.math.stat.Frequency frequency9 = new org.apache.commons.math.stat.Frequency();
        double double11 = frequency9.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double13 = frequency9.getCumPct((long) (short) 100);
        long long15 = frequency9.getCumFreq((long) (byte) -1);
        long long16 = frequency0.getCount((java.lang.Object) (byte) -1);
        frequency0.addValue((java.lang.Integer) 1);
        frequency0.addValue((java.lang.Integer) (-1));
        double double22 = frequency0.getPct((int) (short) -1);
        long long24 = frequency0.getCount('4');
        double double26 = frequency0.getCumPct((long) '#');
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.5d + "'", double22 == 0.5d);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 1.0d + "'", double26 == 1.0d);
    }

    @Test
    public void test1914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1914");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getPct((java.lang.Object) (byte) -1);
        double double4 = frequency0.getPct(1);
        double double6 = frequency0.getCumPct((int) '4');
        frequency0.addValue((long) '#');
        long long10 = frequency0.getCount((int) ' ');
        double double12 = frequency0.getCumPct((long) (short) 0);
        long long14 = frequency0.getCumFreq((java.lang.Object) '4');
        long long16 = frequency0.getCount('#');
        frequency0.clear();
        double double19 = frequency0.getPct((int) (byte) 100);
        long long21 = frequency0.getCount((int) (short) 1);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
    }

    @Test
    public void test1915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1915");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double4 = frequency0.getCumPct((long) (short) 100);
        long long6 = frequency0.getCumFreq('#');
        frequency0.addValue((java.lang.Integer) 0);
        double double10 = frequency0.getPct((int) (byte) 10);
        long long12 = frequency0.getCumFreq('#');
        double double14 = frequency0.getCumPct('4');
        java.lang.String str15 = frequency0.toString();
        double double17 = frequency0.getPct('4');
        org.apache.commons.math.stat.Frequency frequency18 = new org.apache.commons.math.stat.Frequency();
        double double20 = frequency18.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double22 = frequency18.getCumPct((java.lang.Comparable<java.lang.String>) "");
        double double24 = frequency18.getPct((int) 'a');
        long long26 = frequency18.getCount((long) (byte) 1);
        frequency18.addValue('a');
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor29 = frequency18.valuesIterator();
        double double31 = frequency18.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        long long33 = frequency18.getCumFreq((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n10\t1\t100%\t100%\n");
        long long35 = frequency18.getCumFreq((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n-1\t1\t100%\t100%\n");
        long long36 = frequency0.getCumFreq((java.lang.Object) "Value \t Freq. \t Pct. \t Cum Pct. \n-1\t1\t100%\t100%\n");
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n0\t1\t100%\t100%\n" + "'", str15, "Value \t Freq. \t Pct. \t Cum Pct. \n0\t1\t100%\t100%\n");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertNotNull(wildcardComparableItor29);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
    }

    @Test
    public void test1916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1916");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        frequency0.addValue((java.lang.Integer) (-1));
        long long6 = frequency0.getCount('4');
        java.lang.String str7 = frequency0.toString();
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor8 = frequency0.valuesIterator();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n-1\t1\t100%\t100%\n" + "'", str7, "Value \t Freq. \t Pct. \t Cum Pct. \n-1\t1\t100%\t100%\n");
        org.junit.Assert.assertNotNull(wildcardComparableItor8);
    }

    @Test
    public void test1917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1917");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        long long4 = frequency0.getCount((java.lang.Object) 1L);
        long long6 = frequency0.getCumFreq('4');
        long long8 = frequency0.getCumFreq((java.lang.Object) true);
        double double10 = frequency0.getCumPct(' ');
        long long12 = frequency0.getCumFreq((int) '#');
        org.apache.commons.math.stat.Frequency frequency13 = new org.apache.commons.math.stat.Frequency();
        double double15 = frequency13.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double17 = frequency13.getCumPct((java.lang.Comparable<java.lang.String>) "");
        double double19 = frequency13.getPct((int) 'a');
        long long21 = frequency13.getCount((long) (byte) 1);
        boolean boolean22 = frequency0.equals((java.lang.Object) frequency13);
        long long24 = frequency13.getCumFreq((long) (short) 1);
        double double26 = frequency13.getCumPct((long) (short) 0);
        long long28 = frequency13.getCount((int) '4');
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
    }

    @Test
    public void test1918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1918");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        java.lang.String str3 = frequency0.toString();
        org.apache.commons.math.stat.Frequency frequency4 = new org.apache.commons.math.stat.Frequency();
        double double6 = frequency4.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double8 = frequency4.getCumPct((long) (short) 100);
        long long10 = frequency4.getCumFreq('#');
        java.lang.Class<?> wildcardClass11 = frequency4.getClass();
        boolean boolean12 = frequency0.equals((java.lang.Object) wildcardClass11);
        frequency0.clear();
        double double15 = frequency0.getCumPct((int) (short) 0);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor16 = frequency0.valuesIterator();
        long long18 = frequency0.getCount(100L);
        long long20 = frequency0.getCumFreq((int) 'a');
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str3, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertNotNull(wildcardComparableItor16);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
    }

    @Test
    public void test1919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1919");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        java.lang.String str3 = frequency0.toString();
        java.lang.Object obj4 = null;
        double double5 = frequency0.getCumPct(obj4);
        double double7 = frequency0.getCumPct('a');
        double double9 = frequency0.getCumPct((int) (byte) 100);
        frequency0.addValue((long) '#');
        long long13 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n100\t1\t100%\t100%\n");
        long long15 = frequency0.getCount('4');
        long long17 = frequency0.getCumFreq(' ');
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor18 = frequency0.valuesIterator();
        double double20 = frequency0.getCumPct((long) (byte) 0);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str3, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(wildcardComparableItor18);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
    }

    @Test
    public void test1920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1920");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        frequency0.addValue((int) (short) 100);
        double double6 = frequency0.getCumPct((int) (short) -1);
        double double8 = frequency0.getCumPct((long) 100);
        double double10 = frequency0.getCumPct((int) (byte) 100);
        long long12 = frequency0.getCount(3L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0d + "'", double8 == 1.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
    }

    @Test
    public void test1921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1921");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double4 = frequency0.getCumPct((long) (short) 100);
        long long6 = frequency0.getCumFreq('#');
        org.apache.commons.math.stat.Frequency frequency7 = new org.apache.commons.math.stat.Frequency();
        double double9 = frequency7.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double11 = frequency7.getCumPct((long) (short) 100);
        long long13 = frequency7.getCumFreq('#');
        boolean boolean14 = frequency0.equals((java.lang.Object) long13);
        double double16 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "");
        org.apache.commons.math.stat.Frequency frequency17 = new org.apache.commons.math.stat.Frequency();
        double double19 = frequency17.getPct((java.lang.Object) (byte) -1);
        double double21 = frequency17.getPct(1);
        double double23 = frequency17.getCumPct((int) '4');
        double double25 = frequency17.getPct((long) (byte) 10);
        long long26 = frequency0.getCumFreq((java.lang.Object) (byte) 10);
        long long28 = frequency0.getCumFreq((int) ' ');
        frequency0.addValue('#');
        long long32 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \nValue \t Freq. \t Pct. \t Cum Pct. \n\t1\t100%\t100%\n");
        double double34 = frequency0.getPct('#');
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 1.0d + "'", double34 == 1.0d);
    }

    @Test
    public void test1922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1922");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        java.lang.String str3 = frequency0.toString();
        java.lang.Object obj4 = null;
        double double5 = frequency0.getCumPct(obj4);
        double double7 = frequency0.getCumPct('a');
        double double9 = frequency0.getPct(1);
        org.apache.commons.math.stat.Frequency frequency10 = new org.apache.commons.math.stat.Frequency();
        double double12 = frequency10.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        java.lang.String str13 = frequency10.toString();
        java.lang.Object obj14 = null;
        double double15 = frequency10.getCumPct(obj14);
        double double17 = frequency10.getCumPct('a');
        double double19 = frequency10.getCumPct((int) (byte) 100);
        frequency10.addValue((java.lang.Integer) 0);
        double double23 = frequency10.getCumPct((int) ' ');
        frequency0.addValue((java.lang.Object) double23);
        org.apache.commons.math.stat.Frequency frequency25 = new org.apache.commons.math.stat.Frequency();
        double double27 = frequency25.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double29 = frequency25.getCumPct((java.lang.Comparable<java.lang.String>) "");
        double double31 = frequency25.getPct((int) 'a');
        frequency25.addValue((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        long long34 = frequency25.getSumFreq();
        boolean boolean35 = frequency0.equals((java.lang.Object) frequency25);
        long long37 = frequency25.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \nNaN\t1\t100%\t100%\n");
        double double39 = frequency25.getCumPct('a');
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str3, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str13, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 1.0d + "'", double23 == 1.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 1L + "'", long34 == 1L);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.0d + "'", double39 == 0.0d);
    }

    @Test
    public void test1923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1923");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double4 = frequency0.getCumPct((long) (short) 100);
        long long6 = frequency0.getCumFreq('#');
        double double8 = frequency0.getCumPct('4');
        long long9 = frequency0.getSumFreq();
        org.apache.commons.math.stat.Frequency frequency10 = new org.apache.commons.math.stat.Frequency();
        double double12 = frequency10.getPct((java.lang.Object) (byte) -1);
        double double14 = frequency10.getPct(1);
        double double16 = frequency10.getCumPct((int) '4');
        frequency10.addValue((long) '#');
        double double20 = frequency10.getPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        double double22 = frequency10.getPct((java.lang.Comparable<java.lang.String>) "");
        java.lang.String str23 = frequency10.toString();
        frequency10.addValue((java.lang.Integer) 0);
        double double27 = frequency10.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double28 = frequency0.getPct((java.lang.Object) double27);
        long long30 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        long long32 = frequency0.getCount((int) ' ');
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n35\t1\t100%\t100%\n" + "'", str23, "Value \t Freq. \t Pct. \t Cum Pct. \n35\t1\t100%\t100%\n");
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
    }

    @Test
    public void test1924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1924");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        java.lang.String str3 = frequency0.toString();
        java.lang.Object obj4 = null;
        double double5 = frequency0.getCumPct(obj4);
        double double7 = frequency0.getCumPct('a');
        double double9 = frequency0.getPct(1);
        double double11 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "");
        long long13 = frequency0.getCumFreq((java.lang.Comparable<java.lang.String>) "");
        long long14 = frequency0.getSumFreq();
        frequency0.addValue((java.lang.Integer) 1);
        long long18 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        // The following exception was thrown during execution in test generation
        try {
            frequency0.addValue(' ');
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str3, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
    }

    @Test
    public void test1925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1925");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double4 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "");
        double double6 = frequency0.getPct((int) 'a');
        long long8 = frequency0.getCount((long) (byte) 1);
        frequency0.addValue('a');
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor11 = frequency0.valuesIterator();
        org.apache.commons.math.stat.Frequency frequency12 = new org.apache.commons.math.stat.Frequency();
        double double14 = frequency12.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double16 = frequency12.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double17 = frequency0.getCumPct((java.lang.Object) double16);
        org.apache.commons.math.stat.Frequency frequency18 = new org.apache.commons.math.stat.Frequency();
        double double20 = frequency18.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double22 = frequency18.getCumPct((long) (short) 100);
        long long24 = frequency18.getCumFreq('#');
        double double26 = frequency18.getCumPct('4');
        long long27 = frequency18.getSumFreq();
        org.apache.commons.math.stat.Frequency frequency28 = new org.apache.commons.math.stat.Frequency();
        double double30 = frequency28.getPct((java.lang.Object) (byte) -1);
        double double32 = frequency28.getPct(1);
        double double34 = frequency28.getCumPct((int) '4');
        frequency28.addValue((long) '#');
        double double38 = frequency28.getPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        double double40 = frequency28.getPct((java.lang.Comparable<java.lang.String>) "");
        java.lang.String str41 = frequency28.toString();
        frequency28.addValue((java.lang.Integer) 0);
        double double45 = frequency28.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double46 = frequency18.getPct((java.lang.Object) double45);
        // The following exception was thrown during execution in test generation
        try {
            frequency0.addValue((java.lang.Object) frequency18);
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(wildcardComparableItor11);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.0d + "'", double40 == 0.0d);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n35\t1\t100%\t100%\n" + "'", str41, "Value \t Freq. \t Pct. \t Cum Pct. \n35\t1\t100%\t100%\n");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.0d + "'", double45 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double46));
    }

    @Test
    public void test1926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1926");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double4 = frequency0.getCumPct((long) (short) 100);
        java.lang.String str5 = frequency0.toString();
        frequency0.addValue((java.lang.Integer) 100);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str5, "Value \t Freq. \t Pct. \t Cum Pct. \n");
    }

    @Test
    public void test1927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1927");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double4 = frequency0.getCumPct((long) (short) 100);
        long long6 = frequency0.getCumFreq('#');
        org.apache.commons.math.stat.Frequency frequency7 = new org.apache.commons.math.stat.Frequency();
        double double9 = frequency7.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double11 = frequency7.getCumPct((long) (short) 100);
        long long13 = frequency7.getCumFreq('#');
        boolean boolean14 = frequency0.equals((java.lang.Object) long13);
        double double16 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "");
        org.apache.commons.math.stat.Frequency frequency17 = new org.apache.commons.math.stat.Frequency();
        double double19 = frequency17.getPct((java.lang.Object) (byte) -1);
        double double21 = frequency17.getPct(1);
        double double23 = frequency17.getCumPct((int) '4');
        double double25 = frequency17.getPct((long) (byte) 10);
        long long26 = frequency0.getCumFreq((java.lang.Object) (byte) 10);
        frequency0.addValue((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n100\t1\t100%\t100%\n");
        long long29 = frequency0.getSumFreq();
        org.apache.commons.math.stat.Frequency frequency30 = new org.apache.commons.math.stat.Frequency();
        double double32 = frequency30.getPct((java.lang.Object) (byte) -1);
        double double34 = frequency30.getPct(1);
        double double36 = frequency30.getCumPct((int) '4');
        org.apache.commons.math.stat.Frequency frequency37 = new org.apache.commons.math.stat.Frequency();
        double double39 = frequency37.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        long long41 = frequency37.getCount((long) (short) 100);
        org.apache.commons.math.stat.Frequency frequency42 = new org.apache.commons.math.stat.Frequency();
        double double44 = frequency42.getPct((java.lang.Object) (byte) -1);
        double double45 = frequency37.getPct((java.lang.Object) (byte) -1);
        double double47 = frequency37.getCumPct((java.lang.Object) (-1.0f));
        double double49 = frequency37.getCumPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n-1\t1\t100%\t100%\n");
        org.apache.commons.math.stat.Frequency frequency50 = new org.apache.commons.math.stat.Frequency();
        double double52 = frequency50.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        long long54 = frequency50.getCount((long) (byte) 10);
        double double56 = frequency50.getCumPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n0\t1\t50%\t50%\n10\t1\t50%\t100%\n");
        frequency37.addValue((java.lang.Object) double56);
        boolean boolean58 = frequency30.equals((java.lang.Object) frequency37);
        long long60 = frequency37.getCount(10);
        // The following exception was thrown during execution in test generation
        try {
            long long61 = frequency0.getCount((java.lang.Object) frequency37);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: org.apache.commons.math.stat.Frequency cannot be cast to java.lang.Comparable");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 1L + "'", long29 == 1L);
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertTrue(Double.isNaN(double49));
        org.junit.Assert.assertTrue(Double.isNaN(double52));
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 0L + "'", long54 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double56));
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 0L + "'", long60 == 0L);
    }

    @Test
    public void test1928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1928");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double4 = frequency0.getCumPct((long) (short) 100);
        long long6 = frequency0.getCumFreq((long) (byte) -1);
        frequency0.clear();
        java.lang.String str8 = frequency0.toString();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str8, "Value \t Freq. \t Pct. \t Cum Pct. \n");
    }

    @Test
    public void test1929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1929");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getPct((java.lang.Object) (byte) -1);
        frequency0.addValue((long) (short) 100);
        frequency0.addValue((long) 0);
        long long8 = frequency0.getCount((int) (short) 100);
        long long10 = frequency0.getCumFreq('a');
        // The following exception was thrown during execution in test generation
        try {
            frequency0.addValue((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1L + "'", long8 == 1L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
    }

    @Test
    public void test1930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1930");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        java.lang.String str1 = frequency0.toString();
        long long3 = frequency0.getCount((int) (byte) 1);
        double double5 = frequency0.getCumPct(0L);
        long long7 = frequency0.getCount(0L);
        org.apache.commons.math.stat.Frequency frequency8 = new org.apache.commons.math.stat.Frequency();
        double double10 = frequency8.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        java.lang.String str11 = frequency8.toString();
        java.lang.Object obj12 = null;
        double double13 = frequency8.getCumPct(obj12);
        double double15 = frequency8.getCumPct('a');
        double double17 = frequency8.getCumPct((int) (byte) 100);
        long long19 = frequency8.getCount(0L);
        double double21 = frequency8.getCumPct((long) (short) -1);
        org.apache.commons.math.stat.Frequency frequency22 = new org.apache.commons.math.stat.Frequency();
        double double24 = frequency22.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double26 = frequency22.getCumPct((java.lang.Comparable<java.lang.String>) "");
        double double28 = frequency22.getPct((int) 'a');
        frequency22.addValue((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        long long32 = frequency22.getCount((int) '4');
        long long34 = frequency22.getCumFreq((long) ' ');
        double double35 = frequency8.getCumPct((java.lang.Object) ' ');
        long long37 = frequency8.getCumFreq((int) (byte) -1);
        double double39 = frequency8.getCumPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n35\t1\t100%\t100%\n");
        double double41 = frequency8.getPct((int) (short) 100);
        // The following exception was thrown during execution in test generation
        try {
            frequency0.addValue((java.lang.Object) frequency8);
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str1, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str11, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertTrue(Double.isNaN(double41));
    }

    @Test
    public void test1931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1931");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        java.lang.String str3 = frequency0.toString();
        org.apache.commons.math.stat.Frequency frequency4 = new org.apache.commons.math.stat.Frequency();
        double double6 = frequency4.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double8 = frequency4.getCumPct((long) (short) 100);
        long long10 = frequency4.getCumFreq('#');
        java.lang.Class<?> wildcardClass11 = frequency4.getClass();
        boolean boolean12 = frequency0.equals((java.lang.Object) wildcardClass11);
        frequency0.clear();
        double double15 = frequency0.getCumPct((int) (short) 0);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor16 = frequency0.valuesIterator();
        double double18 = frequency0.getCumPct((int) 'a');
        double double20 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n2\t1\t50%\t50%\n35\t1\t50%\t100%\n");
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str3, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertNotNull(wildcardComparableItor16);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue(Double.isNaN(double20));
    }

    @Test
    public void test1932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1932");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double4 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "");
        double double6 = frequency0.getPct((int) 'a');
        long long8 = frequency0.getCount((long) (byte) 1);
        frequency0.addValue('a');
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor11 = frequency0.valuesIterator();
        org.apache.commons.math.stat.Frequency frequency12 = new org.apache.commons.math.stat.Frequency();
        double double14 = frequency12.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double16 = frequency12.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double17 = frequency0.getCumPct((java.lang.Object) double16);
        double double19 = frequency0.getCumPct('a');
        double double21 = frequency0.getCumPct(0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(wildcardComparableItor11);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 1.0d + "'", double19 == 1.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
    }

    @Test
    public void test1933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1933");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        long long4 = frequency0.getCount((long) (short) 100);
        double double6 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "");
        long long8 = frequency0.getCount(0L);
        double double10 = frequency0.getCumPct(10L);
        frequency0.addValue((java.lang.Integer) 0);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
    }

    @Test
    public void test1934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1934");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double4 = frequency0.getCumPct((long) (short) 100);
        long long6 = frequency0.getCumFreq('#');
        long long8 = frequency0.getCumFreq((java.lang.Comparable<java.lang.String>) "hi!");
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
    }

    @Test
    public void test1935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1935");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        org.apache.commons.math.stat.Frequency frequency3 = new org.apache.commons.math.stat.Frequency();
        double double5 = frequency3.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double7 = frequency3.getCumPct((java.lang.Comparable<java.lang.String>) "");
        double double9 = frequency3.getPct((int) 'a');
        long long11 = frequency3.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        double double13 = frequency3.getCumPct('a');
        long long15 = frequency3.getCumFreq((int) '#');
        java.lang.String str16 = frequency3.toString();
        boolean boolean17 = frequency0.equals((java.lang.Object) str16);
        long long19 = frequency0.getCount('4');
        org.apache.commons.math.stat.Frequency frequency20 = new org.apache.commons.math.stat.Frequency();
        double double22 = frequency20.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double24 = frequency20.getCumPct((java.lang.Comparable<java.lang.String>) "");
        double double26 = frequency20.getPct((int) 'a');
        frequency20.addValue((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor29 = frequency20.valuesIterator();
        org.apache.commons.math.stat.Frequency frequency30 = new org.apache.commons.math.stat.Frequency();
        boolean boolean31 = frequency20.equals((java.lang.Object) frequency30);
        // The following exception was thrown during execution in test generation
        try {
            long long32 = frequency0.getCount((java.lang.Object) frequency30);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: org.apache.commons.math.stat.Frequency cannot be cast to java.lang.Comparable");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str16, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertNotNull(wildcardComparableItor29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test1936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1936");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double4 = frequency0.getCumPct((long) (short) 100);
        long long6 = frequency0.getCumFreq('#');
        org.apache.commons.math.stat.Frequency frequency7 = new org.apache.commons.math.stat.Frequency();
        double double9 = frequency7.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double11 = frequency7.getCumPct((long) (short) 100);
        long long13 = frequency7.getCumFreq('#');
        boolean boolean14 = frequency0.equals((java.lang.Object) long13);
        org.apache.commons.math.stat.Frequency frequency15 = new org.apache.commons.math.stat.Frequency();
        double double17 = frequency15.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        long long19 = frequency15.getCount((long) (short) 100);
        org.apache.commons.math.stat.Frequency frequency20 = new org.apache.commons.math.stat.Frequency();
        double double22 = frequency20.getPct((java.lang.Object) (byte) -1);
        double double23 = frequency15.getPct((java.lang.Object) (byte) -1);
        double double25 = frequency15.getCumPct((java.lang.Object) (-1.0f));
        double double27 = frequency15.getCumPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n-1\t1\t100%\t100%\n");
        org.apache.commons.math.stat.Frequency frequency28 = new org.apache.commons.math.stat.Frequency();
        double double30 = frequency28.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        long long32 = frequency28.getCount((long) (byte) 10);
        double double34 = frequency28.getCumPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n0\t1\t50%\t50%\n10\t1\t50%\t100%\n");
        frequency15.addValue((java.lang.Object) double34);
        boolean boolean36 = frequency0.equals((java.lang.Object) double34);
        long long38 = frequency0.getCount(0);
        long long40 = frequency0.getCount(100L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
    }

    @Test
    public void test1937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1937");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double4 = frequency0.getCumPct((long) (short) 100);
        long long6 = frequency0.getCumFreq('#');
        frequency0.addValue((java.lang.Integer) 0);
        double double10 = frequency0.getCumPct((java.lang.Object) 10L);
        long long12 = frequency0.getCount((int) (short) 1);
        double double14 = frequency0.getCumPct('#');
        org.apache.commons.math.stat.Frequency frequency15 = new org.apache.commons.math.stat.Frequency();
        double double17 = frequency15.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor18 = frequency15.valuesIterator();
        double double20 = frequency15.getPct(' ');
        boolean boolean21 = frequency0.equals((java.lang.Object) double20);
        org.apache.commons.math.stat.Frequency frequency22 = new org.apache.commons.math.stat.Frequency();
        double double24 = frequency22.getPct((java.lang.Object) (byte) -1);
        double double26 = frequency22.getPct(1);
        double double28 = frequency22.getCumPct((int) '4');
        frequency22.addValue((long) '#');
        double double32 = frequency22.getPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        frequency22.addValue((java.lang.Integer) 100);
        org.apache.commons.math.stat.Frequency frequency35 = new org.apache.commons.math.stat.Frequency();
        double double37 = frequency35.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double39 = frequency35.getPct(0);
        double double41 = frequency35.getCumPct('a');
        long long43 = frequency35.getCount(1);
        double double45 = frequency35.getPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        double double47 = frequency35.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean48 = frequency22.equals((java.lang.Object) frequency35);
        boolean boolean49 = frequency0.equals((java.lang.Object) boolean48);
        org.apache.commons.math.stat.Frequency frequency50 = new org.apache.commons.math.stat.Frequency();
        double double52 = frequency50.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double54 = frequency50.getCumPct((java.lang.Comparable<java.lang.String>) "");
        double double56 = frequency50.getPct((int) 'a');
        frequency50.addValue((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor59 = frequency50.valuesIterator();
        long long60 = frequency50.getSumFreq();
        long long62 = frequency50.getCount(2L);
        double double63 = frequency0.getPct((java.lang.Object) long62);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertNotNull(wildcardComparableItor18);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double52));
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertTrue(Double.isNaN(double56));
        org.junit.Assert.assertNotNull(wildcardComparableItor59);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 1L + "'", long60 == 1L);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 0L + "'", long62 == 0L);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 1.0d + "'", double63 == 1.0d);
    }

    @Test
    public void test1938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1938");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        long long4 = frequency0.getCount((long) (short) 100);
        org.apache.commons.math.stat.Frequency frequency5 = new org.apache.commons.math.stat.Frequency();
        double double7 = frequency5.getPct((java.lang.Object) (byte) -1);
        double double8 = frequency0.getPct((java.lang.Object) (byte) -1);
        double double10 = frequency0.getCumPct((java.lang.Object) (-1.0f));
        double double12 = frequency0.getPct('a');
        long long14 = frequency0.getCumFreq(' ');
        java.lang.String str15 = frequency0.toString();
        double double17 = frequency0.getPct(1);
        long long19 = frequency0.getCumFreq((long) (-1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str15, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
    }

    @Test
    public void test1939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1939");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double4 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "");
        double double6 = frequency0.getPct((int) 'a');
        long long8 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        double double10 = frequency0.getCumPct('a');
        double double12 = frequency0.getPct((java.lang.Object) 1L);
        frequency0.addValue(' ');
        double double16 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n1\t1\t50%\t50%\n100\t1\t50%\t100%\n");
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
    }

    @Test
    public void test1940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1940");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        long long4 = frequency0.getCount((java.lang.Object) 1L);
        long long6 = frequency0.getCumFreq('4');
        long long8 = frequency0.getCumFreq((java.lang.Object) true);
        long long10 = frequency0.getCount((long) (short) 100);
        double double12 = frequency0.getCumPct('a');
        double double14 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n10\t1\t100%\t100%\n");
        long long16 = frequency0.getCount('a');
        long long17 = frequency0.getSumFreq();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
    }

    @Test
    public void test1941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1941");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double4 = frequency0.getCumPct((long) (short) 100);
        java.lang.Object obj5 = null;
        boolean boolean6 = frequency0.equals(obj5);
        frequency0.clear();
        frequency0.addValue((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n2\t1\t50%\t50%\n35\t1\t50%\t100%\n");
        long long11 = frequency0.getCount((int) (byte) 1);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
    }

    @Test
    public void test1942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1942");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        java.lang.String str3 = frequency0.toString();
        org.apache.commons.math.stat.Frequency frequency4 = new org.apache.commons.math.stat.Frequency();
        double double6 = frequency4.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double8 = frequency4.getCumPct((long) (short) 100);
        long long10 = frequency4.getCumFreq('#');
        java.lang.Class<?> wildcardClass11 = frequency4.getClass();
        boolean boolean12 = frequency0.equals((java.lang.Object) wildcardClass11);
        frequency0.clear();
        double double15 = frequency0.getCumPct((int) (short) 0);
        long long17 = frequency0.getCumFreq(10L);
        org.apache.commons.math.stat.Frequency frequency18 = new org.apache.commons.math.stat.Frequency();
        double double20 = frequency18.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        java.lang.String str21 = frequency18.toString();
        java.lang.Object obj22 = null;
        double double23 = frequency18.getCumPct(obj22);
        double double25 = frequency18.getCumPct('a');
        double double27 = frequency18.getCumPct((int) (byte) 100);
        long long29 = frequency18.getCount(0L);
        double double31 = frequency18.getCumPct((long) (short) -1);
        long long32 = frequency18.getSumFreq();
        frequency18.addValue((int) (byte) 100);
        org.apache.commons.math.stat.Frequency frequency35 = new org.apache.commons.math.stat.Frequency();
        double double37 = frequency35.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        long long39 = frequency35.getCount((java.lang.Object) 1L);
        long long41 = frequency35.getCumFreq('4');
        long long43 = frequency35.getCumFreq((java.lang.Object) true);
        double double45 = frequency35.getCumPct(' ');
        long long47 = frequency35.getCumFreq((int) '#');
        org.apache.commons.math.stat.Frequency frequency48 = new org.apache.commons.math.stat.Frequency();
        double double50 = frequency48.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double52 = frequency48.getCumPct((java.lang.Comparable<java.lang.String>) "");
        double double54 = frequency48.getPct((int) 'a');
        long long56 = frequency48.getCount((long) (byte) 1);
        boolean boolean57 = frequency35.equals((java.lang.Object) frequency48);
        long long59 = frequency48.getCumFreq((long) (short) 1);
        double double60 = frequency18.getPct((java.lang.Object) (short) 1);
        long long62 = frequency18.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n-1\t1\t100%\t100%\n");
        long long64 = frequency18.getCount((-1));
        long long66 = frequency18.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n-1\t1\t100%\t100%\n");
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor67 = frequency18.valuesIterator();
        // The following exception was thrown during execution in test generation
        try {
            double double68 = frequency0.getPct((java.lang.Object) wildcardComparableItor67);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: java.util.TreeMap$KeyIterator cannot be cast to java.lang.Comparable");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str3, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str21, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double50));
        org.junit.Assert.assertTrue(Double.isNaN(double52));
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 0L + "'", long56 == 0L);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 0L + "'", long59 == 0L);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.0d + "'", double60 == 0.0d);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 0L + "'", long62 == 0L);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 0L + "'", long64 == 0L);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 0L + "'", long66 == 0L);
        org.junit.Assert.assertNotNull(wildcardComparableItor67);
    }

    @Test
    public void test1943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1943");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double4 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "");
        double double6 = frequency0.getPct((int) 'a');
        long long8 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        double double10 = frequency0.getCumPct('a');
        org.apache.commons.math.stat.Frequency frequency11 = new org.apache.commons.math.stat.Frequency();
        double double13 = frequency11.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double15 = frequency11.getCumPct((long) (short) 100);
        long long17 = frequency11.getCumFreq((long) (byte) -1);
        double double18 = frequency0.getPct((java.lang.Object) long17);
        boolean boolean20 = frequency0.equals((java.lang.Object) 10);
        java.lang.String str21 = frequency0.toString();
        long long23 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.apache.commons.math.stat.Frequency frequency24 = new org.apache.commons.math.stat.Frequency();
        double double26 = frequency24.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        java.lang.String str27 = frequency24.toString();
        java.lang.Object obj28 = null;
        double double29 = frequency24.getCumPct(obj28);
        double double31 = frequency24.getCumPct('a');
        double double33 = frequency24.getCumPct((int) (byte) 100);
        long long35 = frequency24.getCount(0L);
        double double36 = frequency0.getPct((java.lang.Object) long35);
        long long38 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n100\t1\t100%\t100%\n");
        frequency0.addValue('a');
        org.apache.commons.math.stat.Frequency frequency41 = new org.apache.commons.math.stat.Frequency();
        java.lang.String str42 = frequency41.toString();
        double double44 = frequency41.getCumPct('a');
        frequency41.addValue((java.lang.Comparable<java.lang.String>) "");
        long long47 = frequency0.getCumFreq((java.lang.Object) "");
        long long49 = frequency0.getCount('4');
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor50 = frequency0.valuesIterator();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str21, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str27, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str42, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertNotNull(wildcardComparableItor50);
    }

    @Test
    public void test1944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1944");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        java.lang.String str3 = frequency0.toString();
        java.lang.Object obj4 = null;
        double double5 = frequency0.getCumPct(obj4);
        frequency0.addValue(' ');
        double double9 = frequency0.getPct('4');
        org.apache.commons.math.stat.Frequency frequency10 = new org.apache.commons.math.stat.Frequency();
        double double12 = frequency10.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        long long14 = frequency10.getCount((long) (short) 100);
        org.apache.commons.math.stat.Frequency frequency15 = new org.apache.commons.math.stat.Frequency();
        double double17 = frequency15.getPct((java.lang.Object) (byte) -1);
        double double18 = frequency10.getPct((java.lang.Object) (byte) -1);
        double double20 = frequency10.getCumPct((java.lang.Object) (-1.0f));
        double double22 = frequency10.getPct('a');
        double double24 = frequency10.getCumPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \na\t1\t100%\t100%\n");
        long long26 = frequency10.getCumFreq((long) (short) -1);
        long long27 = frequency0.getCumFreq((java.lang.Object) (short) -1);
        long long29 = frequency0.getCumFreq((long) '#');
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str3, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
    }

    @Test
    public void test1945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1945");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double4 = frequency0.getCumPct((long) (short) 100);
        long long6 = frequency0.getCumFreq('#');
        frequency0.addValue((java.lang.Integer) 0);
        double double10 = frequency0.getPct((int) (byte) 10);
        java.lang.String str11 = frequency0.toString();
        double double13 = frequency0.getPct('4');
        double double15 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n0\t1\t50%\t50%\n1\t1\t50%\t100%\n");
        frequency0.addValue((java.lang.Integer) 1);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n0\t1\t100%\t100%\n" + "'", str11, "Value \t Freq. \t Pct. \t Cum Pct. \n0\t1\t100%\t100%\n");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
    }

    @Test
    public void test1946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1946");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double4 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "");
        double double6 = frequency0.getPct((int) 'a');
        long long8 = frequency0.getCount((long) (byte) 1);
        frequency0.addValue('a');
        long long12 = frequency0.getCount('#');
        long long14 = frequency0.getCount(1L);
        frequency0.clear();
        long long17 = frequency0.getCount('4');
        long long19 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "hi!");
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
    }

    @Test
    public void test1947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1947");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double4 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "");
        double double6 = frequency0.getPct((int) 'a');
        long long8 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        double double10 = frequency0.getCumPct('a');
        long long12 = frequency0.getCumFreq((int) '#');
        double double14 = frequency0.getCumPct((long) (short) 10);
        long long16 = frequency0.getCumFreq('4');
        long long18 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n100\t1\t100%\t100%\n");
        long long20 = frequency0.getCount(0);
        double double22 = frequency0.getPct((int) ' ');
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
    }

    @Test
    public void test1948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1948");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        frequency0.addValue((int) (short) 100);
        double double6 = frequency0.getCumPct((int) (short) -1);
        long long8 = frequency0.getCount(' ');
        long long10 = frequency0.getCumFreq((long) (short) 0);
        double double12 = frequency0.getCumPct((long) 0);
        double double14 = frequency0.getCumPct((long) (byte) -1);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
    }

    @Test
    public void test1949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1949");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double4 = frequency0.getPct(0);
        double double6 = frequency0.getCumPct('a');
        long long8 = frequency0.getCount(1);
        double double10 = frequency0.getCumPct(0L);
        long long12 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \nValue \t Freq. \t Pct. \t Cum Pct. \n\t1\t100%\t100%\n");
        double double14 = frequency0.getPct(0L);
        org.apache.commons.math.stat.Frequency frequency15 = new org.apache.commons.math.stat.Frequency();
        double double17 = frequency15.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double19 = frequency15.getCumPct((long) (short) 100);
        long long21 = frequency15.getCumFreq('#');
        frequency15.addValue((java.lang.Integer) 0);
        double double25 = frequency15.getPct((int) (byte) 10);
        long long27 = frequency15.getCumFreq('#');
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor28 = frequency15.valuesIterator();
        double double30 = frequency15.getCumPct(100L);
        boolean boolean31 = frequency0.equals((java.lang.Object) double30);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertNotNull(wildcardComparableItor28);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 1.0d + "'", double30 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test1950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1950");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double4 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "");
        double double6 = frequency0.getPct((long) 100);
        double double8 = frequency0.getPct(1L);
        frequency0.addValue(10);
        double double12 = frequency0.getPct((int) (byte) 100);
        long long14 = frequency0.getCount(0);
        long long16 = frequency0.getCount(' ');
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
    }

    @Test
    public void test1951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1951");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        java.lang.String str3 = frequency0.toString();
        org.apache.commons.math.stat.Frequency frequency4 = new org.apache.commons.math.stat.Frequency();
        double double6 = frequency4.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double8 = frequency4.getCumPct((long) (short) 100);
        long long10 = frequency4.getCumFreq('#');
        java.lang.Class<?> wildcardClass11 = frequency4.getClass();
        boolean boolean12 = frequency0.equals((java.lang.Object) wildcardClass11);
        frequency0.clear();
        double double15 = frequency0.getCumPct((int) (short) 0);
        org.apache.commons.math.stat.Frequency frequency16 = new org.apache.commons.math.stat.Frequency();
        double double18 = frequency16.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        long long20 = frequency16.getCount((long) (short) 100);
        org.apache.commons.math.stat.Frequency frequency21 = new org.apache.commons.math.stat.Frequency();
        double double23 = frequency21.getPct((java.lang.Object) (byte) -1);
        double double24 = frequency16.getPct((java.lang.Object) (byte) -1);
        double double26 = frequency16.getCumPct((java.lang.Object) (-1.0f));
        frequency16.addValue((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n100\t1\t100%\t100%\n");
        org.apache.commons.math.stat.Frequency frequency29 = new org.apache.commons.math.stat.Frequency();
        double double31 = frequency29.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double33 = frequency29.getCumPct((java.lang.Comparable<java.lang.String>) "");
        double double35 = frequency29.getPct((int) 'a');
        long long37 = frequency29.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        double double39 = frequency29.getCumPct('a');
        org.apache.commons.math.stat.Frequency frequency40 = new org.apache.commons.math.stat.Frequency();
        double double42 = frequency40.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double44 = frequency40.getCumPct((long) (short) 100);
        long long46 = frequency40.getCumFreq((long) (byte) -1);
        double double47 = frequency29.getPct((java.lang.Object) long46);
        boolean boolean49 = frequency29.equals((java.lang.Object) 10);
        java.lang.String str50 = frequency29.toString();
        double double52 = frequency29.getCumPct((int) (byte) 10);
        org.apache.commons.math.stat.Frequency frequency53 = new org.apache.commons.math.stat.Frequency();
        double double55 = frequency53.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double57 = frequency53.getCumPct((java.lang.Comparable<java.lang.String>) "");
        double double59 = frequency53.getPct((int) 'a');
        long long61 = frequency53.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        double double63 = frequency53.getCumPct('a');
        org.apache.commons.math.stat.Frequency frequency64 = new org.apache.commons.math.stat.Frequency();
        double double66 = frequency64.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double68 = frequency64.getCumPct((long) (short) 100);
        long long70 = frequency64.getCumFreq((long) (byte) -1);
        double double71 = frequency53.getPct((java.lang.Object) long70);
        long long73 = frequency53.getCumFreq((int) (short) -1);
        double double74 = frequency29.getCumPct((java.lang.Object) (short) -1);
        double double75 = frequency16.getPct((java.lang.Object) double74);
        frequency0.addValue((java.lang.Object) double75);
        long long78 = frequency0.getCount(' ');
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str3, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str50, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue(Double.isNaN(double52));
        org.junit.Assert.assertTrue(Double.isNaN(double55));
        org.junit.Assert.assertTrue(Double.isNaN(double57));
        org.junit.Assert.assertTrue(Double.isNaN(double59));
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 0L + "'", long61 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double63));
        org.junit.Assert.assertTrue(Double.isNaN(double66));
        org.junit.Assert.assertTrue(Double.isNaN(double68));
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 0L + "'", long70 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double71));
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 0L + "'", long73 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double74));
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 0.0d + "'", double75 == 0.0d);
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + 0L + "'", long78 == 0L);
    }

    @Test
    public void test1952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1952");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        java.lang.String str3 = frequency0.toString();
        org.apache.commons.math.stat.Frequency frequency4 = new org.apache.commons.math.stat.Frequency();
        double double6 = frequency4.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double8 = frequency4.getCumPct((long) (short) 100);
        long long10 = frequency4.getCumFreq('#');
        java.lang.Class<?> wildcardClass11 = frequency4.getClass();
        boolean boolean12 = frequency0.equals((java.lang.Object) wildcardClass11);
        org.apache.commons.math.stat.Frequency frequency13 = new org.apache.commons.math.stat.Frequency();
        double double15 = frequency13.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        java.lang.String str16 = frequency13.toString();
        long long18 = frequency13.getCumFreq(0L);
        long long19 = frequency0.getCumFreq((java.lang.Object) 0L);
        org.apache.commons.math.stat.Frequency frequency20 = new org.apache.commons.math.stat.Frequency();
        java.lang.String str21 = frequency20.toString();
        double double23 = frequency20.getCumPct('a');
        java.lang.String str24 = frequency20.toString();
        double double25 = frequency0.getPct((java.lang.Object) str24);
        double double27 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \na\t1\t100%\t100%\n");
        java.lang.String str28 = frequency0.toString();
        long long29 = frequency0.getSumFreq();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str3, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str16, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str21, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str24, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str28, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
    }

    @Test
    public void test1953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1953");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getPct((java.lang.Object) (byte) -1);
        double double4 = frequency0.getPct(1);
        double double6 = frequency0.getCumPct((int) '4');
        double double8 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        frequency0.addValue((java.lang.Object) 1.0d);
        double double12 = frequency0.getPct(1);
        long long14 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "");
        double double16 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double18 = frequency0.getPct((java.lang.Object) "");
        long long20 = frequency0.getCount('a');
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
    }

    @Test
    public void test1954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1954");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        java.lang.String str3 = frequency0.toString();
        java.lang.Object obj4 = null;
        double double5 = frequency0.getCumPct(obj4);
        double double7 = frequency0.getCumPct('a');
        double double9 = frequency0.getCumPct((int) (byte) 100);
        frequency0.clear();
        long long11 = frequency0.getSumFreq();
        org.apache.commons.math.stat.Frequency frequency12 = new org.apache.commons.math.stat.Frequency();
        double double14 = frequency12.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        long long16 = frequency12.getCount((java.lang.Object) 1L);
        long long18 = frequency12.getCumFreq('4');
        double double20 = frequency12.getCumPct(100);
        double double21 = frequency0.getPct((java.lang.Object) 100);
        org.apache.commons.math.stat.Frequency frequency22 = new org.apache.commons.math.stat.Frequency();
        double double24 = frequency22.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        long long26 = frequency22.getCount((java.lang.Object) 1L);
        long long28 = frequency22.getCumFreq('4');
        long long30 = frequency22.getCumFreq((java.lang.Object) true);
        double double32 = frequency22.getCumPct(' ');
        long long34 = frequency22.getCumFreq((int) '#');
        org.apache.commons.math.stat.Frequency frequency35 = new org.apache.commons.math.stat.Frequency();
        double double37 = frequency35.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double39 = frequency35.getCumPct((java.lang.Comparable<java.lang.String>) "");
        double double41 = frequency35.getPct((int) 'a');
        long long43 = frequency35.getCount((long) (byte) 1);
        boolean boolean44 = frequency22.equals((java.lang.Object) frequency35);
        long long46 = frequency35.getCumFreq((long) 100);
        double double48 = frequency35.getPct((long) (short) 10);
        boolean boolean49 = frequency0.equals((java.lang.Object) double48);
        double double51 = frequency0.getCumPct((long) (byte) 1);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str3, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double51));
    }

    @Test
    public void test1955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1955");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getPct((java.lang.Object) (byte) -1);
        double double4 = frequency0.getPct(1);
        double double6 = frequency0.getCumPct((int) '4');
        double double8 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        java.lang.Object obj9 = null;
        long long10 = frequency0.getCumFreq(obj9);
        double double12 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n1.0\t1\t100%\t100%\n");
        org.apache.commons.math.stat.Frequency frequency13 = new org.apache.commons.math.stat.Frequency();
        double double15 = frequency13.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double17 = frequency13.getCumPct((long) (short) 100);
        long long19 = frequency13.getCumFreq('#');
        frequency13.addValue((java.lang.Integer) 0);
        double double23 = frequency13.getCumPct((java.lang.Object) 10L);
        long long25 = frequency13.getCount((int) (short) 1);
        double double27 = frequency13.getCumPct('#');
        org.apache.commons.math.stat.Frequency frequency28 = new org.apache.commons.math.stat.Frequency();
        double double30 = frequency28.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor31 = frequency28.valuesIterator();
        double double33 = frequency28.getPct(' ');
        boolean boolean34 = frequency13.equals((java.lang.Object) double33);
        org.apache.commons.math.stat.Frequency frequency35 = new org.apache.commons.math.stat.Frequency();
        double double37 = frequency35.getPct((java.lang.Object) (byte) -1);
        double double39 = frequency35.getPct(1);
        double double41 = frequency35.getCumPct((int) '4');
        frequency35.addValue((long) '#');
        double double45 = frequency35.getPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        frequency35.addValue((java.lang.Integer) 100);
        org.apache.commons.math.stat.Frequency frequency48 = new org.apache.commons.math.stat.Frequency();
        double double50 = frequency48.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double52 = frequency48.getPct(0);
        double double54 = frequency48.getCumPct('a');
        long long56 = frequency48.getCount(1);
        double double58 = frequency48.getPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        double double60 = frequency48.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean61 = frequency35.equals((java.lang.Object) frequency48);
        boolean boolean62 = frequency13.equals((java.lang.Object) boolean61);
        java.lang.Class<?> wildcardClass63 = frequency13.getClass();
        // The following exception was thrown during execution in test generation
        try {
            long long64 = frequency0.getCumFreq((java.lang.Object) frequency13);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: org.apache.commons.math.stat.Frequency cannot be cast to java.lang.Comparable");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 1.0d + "'", double23 == 1.0d);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertNotNull(wildcardComparableItor31);
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.0d + "'", double45 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double50));
        org.junit.Assert.assertTrue(Double.isNaN(double52));
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 0L + "'", long56 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double58));
        org.junit.Assert.assertTrue(Double.isNaN(double60));
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(wildcardClass63);
    }

    @Test
    public void test1956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1956");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double4 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "");
        double double6 = frequency0.getPct((int) 'a');
        long long8 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        double double10 = frequency0.getCumPct('a');
        org.apache.commons.math.stat.Frequency frequency11 = new org.apache.commons.math.stat.Frequency();
        double double13 = frequency11.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double15 = frequency11.getCumPct((long) (short) 100);
        long long17 = frequency11.getCumFreq((long) (byte) -1);
        double double18 = frequency0.getPct((java.lang.Object) long17);
        boolean boolean20 = frequency0.equals((java.lang.Object) 10);
        java.lang.String str21 = frequency0.toString();
        long long23 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.apache.commons.math.stat.Frequency frequency24 = new org.apache.commons.math.stat.Frequency();
        double double26 = frequency24.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        java.lang.String str27 = frequency24.toString();
        java.lang.Object obj28 = null;
        double double29 = frequency24.getCumPct(obj28);
        double double31 = frequency24.getCumPct('a');
        double double33 = frequency24.getCumPct((int) (byte) 100);
        long long35 = frequency24.getCount(0L);
        double double36 = frequency0.getPct((java.lang.Object) long35);
        long long38 = frequency0.getCumFreq((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n-1\t1\t100%\t100%\n");
        double double40 = frequency0.getCumPct(0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str21, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str27, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double40));
    }

    @Test
    public void test1957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1957");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double4 = frequency0.getCumPct((long) (short) 100);
        long long6 = frequency0.getCumFreq('#');
        frequency0.addValue((java.lang.Integer) 0);
        double double10 = frequency0.getPct((int) (byte) 10);
        java.lang.String str11 = frequency0.toString();
        double double13 = frequency0.getCumPct(0L);
        long long15 = frequency0.getCumFreq(100);
        double double17 = frequency0.getCumPct((int) '4');
        double double19 = frequency0.getPct(' ');
        long long20 = frequency0.getSumFreq();
        double double22 = frequency0.getPct((long) '4');
        // The following exception was thrown during execution in test generation
        try {
            frequency0.addValue((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \nNaN\t1\t100%\t100%\n");
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n0\t1\t100%\t100%\n" + "'", str11, "Value \t Freq. \t Pct. \t Cum Pct. \n0\t1\t100%\t100%\n");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 1.0d + "'", double13 == 1.0d);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1L + "'", long15 == 1L);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 1.0d + "'", double17 == 1.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1L + "'", long20 == 1L);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
    }

    @Test
    public void test1958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1958");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double4 = frequency0.getCumPct((long) (short) 100);
        long long6 = frequency0.getCumFreq('#');
        org.apache.commons.math.stat.Frequency frequency7 = new org.apache.commons.math.stat.Frequency();
        double double9 = frequency7.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double11 = frequency7.getCumPct((long) (short) 100);
        long long13 = frequency7.getCumFreq('#');
        boolean boolean14 = frequency0.equals((java.lang.Object) long13);
        double double16 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "");
        org.apache.commons.math.stat.Frequency frequency17 = new org.apache.commons.math.stat.Frequency();
        double double19 = frequency17.getPct((java.lang.Object) (byte) -1);
        double double21 = frequency17.getPct(1);
        double double23 = frequency17.getCumPct((int) '4');
        double double25 = frequency17.getPct((long) (byte) 10);
        long long26 = frequency0.getCumFreq((java.lang.Object) (byte) 10);
        long long28 = frequency0.getCumFreq((int) ' ');
        frequency0.addValue(2L);
        double double32 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n-1\t1\t50%\t50%\n0\t1\t50%\t100%\n");
        double double34 = frequency0.getPct(100L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
    }

    @Test
    public void test1959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1959");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double4 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "");
        double double6 = frequency0.getPct((int) 'a');
        long long8 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        double double10 = frequency0.getCumPct('a');
        org.apache.commons.math.stat.Frequency frequency11 = new org.apache.commons.math.stat.Frequency();
        double double13 = frequency11.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double15 = frequency11.getCumPct((long) (short) 100);
        long long17 = frequency11.getCumFreq((long) (byte) -1);
        double double18 = frequency0.getPct((java.lang.Object) long17);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor19 = frequency0.valuesIterator();
        long long21 = frequency0.getCumFreq((java.lang.Object) (byte) -1);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor22 = frequency0.valuesIterator();
        double double24 = frequency0.getCumPct((long) (-1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertNotNull(wildcardComparableItor19);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNotNull(wildcardComparableItor22);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
    }

    @Test
    public void test1960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1960");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double4 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "");
        double double6 = frequency0.getPct((int) 'a');
        frequency0.addValue((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        double double10 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n0\t1\t100%\t100%\n");
        org.apache.commons.math.stat.Frequency frequency11 = new org.apache.commons.math.stat.Frequency();
        double double13 = frequency11.getPct((java.lang.Object) (byte) -1);
        double double15 = frequency11.getPct(1);
        double double17 = frequency11.getCumPct((int) '4');
        frequency11.addValue((long) '#');
        long long21 = frequency11.getCount((long) 0);
        long long22 = frequency0.getCount((java.lang.Object) long21);
        // The following exception was thrown during execution in test generation
        try {
            frequency0.addValue((int) (byte) 100);
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
    }

    @Test
    public void test1961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1961");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double4 = frequency0.getCumPct((long) (short) 100);
        long long6 = frequency0.getCumFreq((long) (byte) -1);
        long long8 = frequency0.getCount((long) (short) 1);
        long long10 = frequency0.getCumFreq((int) (byte) -1);
        double double12 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n1\t1\t100%\t100%\n");
        double double14 = frequency0.getCumPct((int) (short) -1);
        long long15 = frequency0.getSumFreq();
        long long17 = frequency0.getCumFreq((int) (short) -1);
        frequency0.addValue(2L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
    }

    @Test
    public void test1962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1962");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        java.lang.String str3 = frequency0.toString();
        java.lang.Object obj4 = null;
        double double5 = frequency0.getCumPct(obj4);
        double double7 = frequency0.getCumPct('a');
        double double9 = frequency0.getCumPct((int) (byte) 100);
        long long11 = frequency0.getCount(0L);
        double double13 = frequency0.getCumPct((long) (short) -1);
        org.apache.commons.math.stat.Frequency frequency14 = new org.apache.commons.math.stat.Frequency();
        double double16 = frequency14.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double18 = frequency14.getCumPct((java.lang.Comparable<java.lang.String>) "");
        double double20 = frequency14.getPct((int) 'a');
        frequency14.addValue((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        long long24 = frequency14.getCount((int) '4');
        long long26 = frequency14.getCumFreq((long) ' ');
        double double27 = frequency0.getCumPct((java.lang.Object) ' ');
        org.apache.commons.math.stat.Frequency frequency28 = new org.apache.commons.math.stat.Frequency();
        double double30 = frequency28.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double32 = frequency28.getCumPct((long) (short) 100);
        long long34 = frequency28.getCumFreq('#');
        frequency28.addValue((java.lang.Integer) 0);
        double double38 = frequency28.getPct((int) (byte) 10);
        long long40 = frequency28.getCumFreq('#');
        frequency28.addValue((java.lang.Integer) 10);
        double double44 = frequency28.getCumPct('a');
        long long45 = frequency0.getCumFreq((java.lang.Object) 'a');
        double double47 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        long long49 = frequency0.getCount((-1L));
        org.apache.commons.math.stat.Frequency frequency50 = new org.apache.commons.math.stat.Frequency();
        double double52 = frequency50.getPct((java.lang.Object) (byte) -1);
        double double54 = frequency50.getPct(1);
        double double56 = frequency50.getCumPct((int) '4');
        frequency50.addValue((long) '#');
        double double60 = frequency50.getPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        long long61 = frequency50.getSumFreq();
        double double63 = frequency50.getPct((int) (short) 100);
        long long65 = frequency50.getCumFreq(100);
        double double66 = frequency0.getCumPct((java.lang.Object) long65);
        long long68 = frequency0.getCount('#');
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str3, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.0d + "'", double44 == 0.0d);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double52));
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertTrue(Double.isNaN(double56));
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.0d + "'", double60 == 0.0d);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 1L + "'", long61 == 1L);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 0.0d + "'", double63 == 0.0d);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 1L + "'", long65 == 1L);
        org.junit.Assert.assertTrue(Double.isNaN(double66));
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 0L + "'", long68 == 0L);
    }

    @Test
    public void test1963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1963");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getPct((java.lang.Object) (byte) -1);
        double double4 = frequency0.getPct(1);
        double double6 = frequency0.getCumPct((int) '4');
        double double8 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        java.lang.String str9 = frequency0.toString();
        org.apache.commons.math.stat.Frequency frequency10 = new org.apache.commons.math.stat.Frequency();
        double double12 = frequency10.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double14 = frequency10.getCumPct((java.lang.Comparable<java.lang.String>) "");
        double double16 = frequency10.getPct((int) 'a');
        long long18 = frequency10.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        double double20 = frequency10.getCumPct('a');
        org.apache.commons.math.stat.Frequency frequency21 = new org.apache.commons.math.stat.Frequency();
        double double23 = frequency21.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double25 = frequency21.getCumPct((long) (short) 100);
        long long27 = frequency21.getCumFreq((long) (byte) -1);
        double double28 = frequency10.getPct((java.lang.Object) long27);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor29 = frequency10.valuesIterator();
        long long31 = frequency10.getCumFreq((java.lang.Object) (byte) -1);
        long long32 = frequency0.getCount((java.lang.Object) (byte) -1);
        frequency0.addValue((java.lang.Integer) 0);
        double double36 = frequency0.getCumPct('a');
        frequency0.addValue((long) (byte) 100);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str9, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertNotNull(wildcardComparableItor29);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.0d + "'", double36 == 0.0d);
    }

    @Test
    public void test1964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1964");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getPct((java.lang.Object) (byte) -1);
        double double4 = frequency0.getPct(1);
        double double6 = frequency0.getCumPct((int) '4');
        double double8 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        frequency0.addValue((java.lang.Object) 1.0d);
        double double12 = frequency0.getPct(1);
        long long14 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "");
        double double16 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        long long18 = frequency0.getCount((int) (short) 1);
        org.apache.commons.math.stat.Frequency frequency19 = new org.apache.commons.math.stat.Frequency();
        double double21 = frequency19.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        java.lang.String str22 = frequency19.toString();
        java.lang.Object obj23 = null;
        double double24 = frequency19.getCumPct(obj23);
        double double26 = frequency19.getCumPct('a');
        double double28 = frequency19.getCumPct((int) (byte) 100);
        long long30 = frequency19.getCount(0L);
        double double32 = frequency19.getCumPct((long) (short) -1);
        double double34 = frequency19.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        frequency0.addValue((java.lang.Object) double34);
        frequency0.clear();
        org.apache.commons.math.stat.Frequency frequency37 = new org.apache.commons.math.stat.Frequency();
        double double39 = frequency37.getPct((java.lang.Object) (byte) -1);
        frequency37.addValue((long) (short) 100);
        java.lang.Object obj42 = null;
        boolean boolean43 = frequency37.equals(obj42);
        long long45 = frequency37.getCumFreq('a');
        boolean boolean46 = frequency0.equals((java.lang.Object) 'a');
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str22, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test1965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1965");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        java.lang.String str3 = frequency0.toString();
        org.apache.commons.math.stat.Frequency frequency4 = new org.apache.commons.math.stat.Frequency();
        double double6 = frequency4.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double8 = frequency4.getCumPct((long) (short) 100);
        long long10 = frequency4.getCumFreq('#');
        java.lang.Class<?> wildcardClass11 = frequency4.getClass();
        boolean boolean12 = frequency0.equals((java.lang.Object) wildcardClass11);
        frequency0.clear();
        long long15 = frequency0.getCumFreq(0);
        long long17 = frequency0.getCumFreq((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \nhi!\t1\t100%\t100%\n");
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str3, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
    }

    @Test
    public void test1966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1966");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        java.lang.String str1 = frequency0.toString();
        double double3 = frequency0.getCumPct('a');
        double double5 = frequency0.getPct((long) 100);
        frequency0.addValue((java.lang.Integer) 0);
        // The following exception was thrown during execution in test generation
        try {
            frequency0.addValue((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n0\t1\t50%\t50%\n10\t1\t50%\t100%\n");
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str1, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
    }

    @Test
    public void test1967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1967");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        long long4 = frequency0.getCount((java.lang.Object) 1L);
        long long6 = frequency0.getCumFreq('4');
        long long8 = frequency0.getCumFreq((java.lang.Object) true);
        double double10 = frequency0.getCumPct(' ');
        double double12 = frequency0.getCumPct((int) (byte) 100);
        long long14 = frequency0.getCount((int) (short) 100);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
    }

    @Test
    public void test1968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1968");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        long long4 = frequency0.getCount((java.lang.Object) 1L);
        double double6 = frequency0.getCumPct(1);
        double double8 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        frequency0.addValue(' ');
        double double12 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n100\t1\t100%\t100%\n");
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
    }

    @Test
    public void test1969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1969");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getPct((java.lang.Object) (byte) -1);
        double double4 = frequency0.getPct(1);
        double double6 = frequency0.getCumPct((int) '4');
        double double8 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        frequency0.addValue((java.lang.Object) 1.0d);
        double double12 = frequency0.getPct(1);
        long long14 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "");
        double double16 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double18 = frequency0.getPct((java.lang.Object) "");
        long long20 = frequency0.getCumFreq(' ');
        long long22 = frequency0.getCumFreq((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n0\t1\t50%\t50%\n100\t1\t50%\t100%\n");
        long long24 = frequency0.getCumFreq('a');
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
    }

    @Test
    public void test1970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1970");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getPct((java.lang.Object) (byte) -1);
        frequency0.addValue((long) (short) 100);
        java.lang.String str5 = frequency0.toString();
        frequency0.clear();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n100\t1\t100%\t100%\n" + "'", str5, "Value \t Freq. \t Pct. \t Cum Pct. \n100\t1\t100%\t100%\n");
    }

    @Test
    public void test1971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1971");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double4 = frequency0.getCumPct((long) (short) 100);
        double double6 = frequency0.getPct((long) (short) 100);
        long long8 = frequency0.getCount(100L);
        org.apache.commons.math.stat.Frequency frequency9 = new org.apache.commons.math.stat.Frequency();
        double double11 = frequency9.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        java.lang.String str12 = frequency9.toString();
        java.lang.Object obj13 = null;
        double double14 = frequency9.getCumPct(obj13);
        double double16 = frequency9.getCumPct('a');
        double double18 = frequency9.getPct(1);
        org.apache.commons.math.stat.Frequency frequency19 = new org.apache.commons.math.stat.Frequency();
        double double21 = frequency19.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        java.lang.String str22 = frequency19.toString();
        java.lang.Object obj23 = null;
        double double24 = frequency19.getCumPct(obj23);
        double double26 = frequency19.getCumPct('a');
        double double28 = frequency19.getCumPct((int) (byte) 100);
        frequency19.addValue((java.lang.Integer) 0);
        double double32 = frequency19.getCumPct((int) ' ');
        frequency9.addValue((java.lang.Object) double32);
        org.apache.commons.math.stat.Frequency frequency34 = new org.apache.commons.math.stat.Frequency();
        double double36 = frequency34.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        java.lang.String str37 = frequency34.toString();
        java.lang.Object obj38 = null;
        double double39 = frequency34.getCumPct(obj38);
        double double41 = frequency34.getCumPct('a');
        double double43 = frequency34.getPct(1);
        double double45 = frequency34.getCumPct((java.lang.Comparable<java.lang.String>) "");
        long long47 = frequency34.getCumFreq((java.lang.Comparable<java.lang.String>) "");
        double double48 = frequency9.getCumPct((java.lang.Object) long47);
        double double50 = frequency9.getCumPct((int) (byte) 1);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor51 = frequency9.valuesIterator();
        // The following exception was thrown during execution in test generation
        try {
            long long52 = frequency0.getCumFreq((java.lang.Object) frequency9);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: org.apache.commons.math.stat.Frequency cannot be cast to java.lang.Comparable");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str12, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str22, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1.0d + "'", double32 == 1.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str37, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.0d + "'", double50 == 0.0d);
        org.junit.Assert.assertNotNull(wildcardComparableItor51);
    }

    @Test
    public void test1972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1972");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double4 = frequency0.getCumPct((long) (short) 100);
        long long6 = frequency0.getCumFreq('#');
        frequency0.addValue((java.lang.Integer) 0);
        double double10 = frequency0.getCumPct((java.lang.Object) 10L);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor11 = frequency0.valuesIterator();
        double double13 = frequency0.getCumPct((long) (short) 0);
        long long15 = frequency0.getCount((int) 'a');
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertNotNull(wildcardComparableItor11);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 1.0d + "'", double13 == 1.0d);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
    }

    @Test
    public void test1973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1973");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        long long4 = frequency0.getCount((long) (byte) 10);
        double double6 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n0\t1\t50%\t50%\n10\t1\t50%\t100%\n");
        double double8 = frequency0.getPct('#');
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor9 = frequency0.valuesIterator();
        long long11 = frequency0.getCount('4');
        org.apache.commons.math.stat.Frequency frequency12 = new org.apache.commons.math.stat.Frequency();
        double double14 = frequency12.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double16 = frequency12.getCumPct((long) (short) 100);
        long long18 = frequency12.getCumFreq('#');
        frequency12.addValue((java.lang.Integer) 0);
        double double22 = frequency12.getPct((int) (byte) 10);
        long long24 = frequency12.getCount((long) 1);
        double double26 = frequency12.getCumPct((long) (short) 100);
        long long28 = frequency12.getCount((long) 0);
        org.apache.commons.math.stat.Frequency frequency29 = new org.apache.commons.math.stat.Frequency();
        double double31 = frequency29.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        long long33 = frequency29.getCount((long) (short) 100);
        frequency29.clear();
        frequency29.addValue('#');
        long long37 = frequency12.getCumFreq((java.lang.Object) '#');
        double double38 = frequency0.getCumPct((java.lang.Object) long37);
        org.apache.commons.math.stat.Frequency frequency39 = new org.apache.commons.math.stat.Frequency();
        double double41 = frequency39.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double43 = frequency39.getCumPct((java.lang.Comparable<java.lang.String>) "");
        double double45 = frequency39.getPct((int) 'a');
        frequency39.addValue((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        long long48 = frequency39.getSumFreq();
        org.apache.commons.math.stat.Frequency frequency49 = new org.apache.commons.math.stat.Frequency();
        double double51 = frequency49.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double53 = frequency49.getCumPct((long) (short) 100);
        long long55 = frequency49.getCumFreq('#');
        org.apache.commons.math.stat.Frequency frequency56 = new org.apache.commons.math.stat.Frequency();
        double double58 = frequency56.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double60 = frequency56.getCumPct((long) (short) 100);
        long long62 = frequency56.getCumFreq('#');
        boolean boolean63 = frequency49.equals((java.lang.Object) long62);
        double double65 = frequency49.getCumPct((java.lang.Comparable<java.lang.String>) "");
        org.apache.commons.math.stat.Frequency frequency66 = new org.apache.commons.math.stat.Frequency();
        double double68 = frequency66.getPct((java.lang.Object) (byte) -1);
        double double70 = frequency66.getPct(1);
        double double72 = frequency66.getCumPct((int) '4');
        double double74 = frequency66.getPct((long) (byte) 10);
        long long75 = frequency49.getCumFreq((java.lang.Object) (byte) 10);
        double double77 = frequency49.getCumPct(' ');
        frequency49.addValue((int) (byte) 10);
        long long81 = frequency49.getCumFreq((long) (short) 1);
        frequency49.addValue((java.lang.Integer) 1);
        double double84 = frequency39.getCumPct((java.lang.Object) 1);
        boolean boolean85 = frequency0.equals((java.lang.Object) frequency39);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertNotNull(wildcardComparableItor9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 1.0d + "'", double26 == 1.0d);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 1L + "'", long28 == 1L);
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 1L + "'", long48 == 1L);
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 0L + "'", long55 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double58));
        org.junit.Assert.assertTrue(Double.isNaN(double60));
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 0L + "'", long62 == 0L);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double65));
        org.junit.Assert.assertTrue(Double.isNaN(double68));
        org.junit.Assert.assertTrue(Double.isNaN(double70));
        org.junit.Assert.assertTrue(Double.isNaN(double72));
        org.junit.Assert.assertTrue(Double.isNaN(double74));
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 0L + "'", long75 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double77));
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + 0L + "'", long81 == 0L);
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 0.0d + "'", double84 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
    }

    @Test
    public void test1974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1974");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        org.apache.commons.math.stat.Frequency frequency3 = new org.apache.commons.math.stat.Frequency();
        double double5 = frequency3.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double7 = frequency3.getCumPct((java.lang.Comparable<java.lang.String>) "");
        double double9 = frequency3.getPct((int) 'a');
        long long11 = frequency3.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        double double13 = frequency3.getCumPct('a');
        long long15 = frequency3.getCumFreq((int) '#');
        java.lang.String str16 = frequency3.toString();
        boolean boolean17 = frequency0.equals((java.lang.Object) str16);
        long long19 = frequency0.getCount(' ');
        double double21 = frequency0.getPct('4');
        long long23 = frequency0.getCumFreq((long) '#');
        long long25 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \nValue \t Freq. \t Pct. \t Cum Pct. \n0\t1\t50%\t50%\n100\t1\t50%\t100%\n\t1\t100%\t100%\n");
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str16, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
    }

    @Test
    public void test1975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1975");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double4 = frequency0.getCumPct((long) (short) 100);
        long long6 = frequency0.getCumFreq('#');
        frequency0.addValue((java.lang.Integer) 0);
        double double10 = frequency0.getPct((int) (byte) 10);
        long long12 = frequency0.getCount('a');
        double double14 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        long long16 = frequency0.getCumFreq((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n100\t1\t100%\t100%\n");
        frequency0.addValue((long) (byte) 1);
        long long20 = frequency0.getCumFreq((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \nNaN\t1\t100%\t100%\n");
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
    }

    @Test
    public void test1976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1976");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double4 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "");
        double double6 = frequency0.getPct((int) 'a');
        long long8 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        double double10 = frequency0.getCumPct('a');
        org.apache.commons.math.stat.Frequency frequency11 = new org.apache.commons.math.stat.Frequency();
        double double13 = frequency11.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double15 = frequency11.getCumPct((long) (short) 100);
        long long17 = frequency11.getCumFreq((long) (byte) -1);
        double double18 = frequency0.getPct((java.lang.Object) long17);
        boolean boolean20 = frequency0.equals((java.lang.Object) 10);
        java.lang.String str21 = frequency0.toString();
        double double23 = frequency0.getCumPct((int) (byte) 10);
        double double25 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double27 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \na\t1\t100%\t100%\n");
        frequency0.addValue(0L);
        double double31 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor32 = frequency0.valuesIterator();
        java.lang.String str33 = frequency0.toString();
        long long35 = frequency0.getCount('#');
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str21, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d);
        org.junit.Assert.assertNotNull(wildcardComparableItor32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n0\t1\t100%\t100%\n" + "'", str33, "Value \t Freq. \t Pct. \t Cum Pct. \n0\t1\t100%\t100%\n");
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
    }

    @Test
    public void test1977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1977");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        long long4 = frequency0.getCount((long) (byte) 10);
        double double6 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n0\t1\t50%\t50%\n10\t1\t50%\t100%\n");
        double double8 = frequency0.getPct('#');
        double double10 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n#\t1\t100%\t100%\n");
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor11 = frequency0.valuesIterator();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertNotNull(wildcardComparableItor11);
    }

    @Test
    public void test1978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1978");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getPct((java.lang.Object) (byte) -1);
        double double4 = frequency0.getPct(1);
        double double6 = frequency0.getCumPct((int) '4');
        frequency0.addValue((long) '#');
        double double10 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        long long11 = frequency0.getSumFreq();
        double double13 = frequency0.getPct('4');
        double double15 = frequency0.getPct(' ');
        double double17 = frequency0.getCumPct(100L);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor18 = frequency0.valuesIterator();
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor19 = frequency0.valuesIterator();
        frequency0.addValue((java.lang.Integer) 1);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1L + "'", long11 == 1L);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 1.0d + "'", double17 == 1.0d);
        org.junit.Assert.assertNotNull(wildcardComparableItor18);
        org.junit.Assert.assertNotNull(wildcardComparableItor19);
    }

    @Test
    public void test1979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1979");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double4 = frequency0.getCumPct((long) (short) 100);
        long long6 = frequency0.getCumFreq('#');
        org.apache.commons.math.stat.Frequency frequency7 = new org.apache.commons.math.stat.Frequency();
        double double9 = frequency7.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double11 = frequency7.getCumPct((long) (short) 100);
        long long13 = frequency7.getCumFreq('#');
        boolean boolean14 = frequency0.equals((java.lang.Object) long13);
        double double16 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "");
        org.apache.commons.math.stat.Frequency frequency17 = new org.apache.commons.math.stat.Frequency();
        double double19 = frequency17.getPct((java.lang.Object) (byte) -1);
        double double21 = frequency17.getPct(1);
        double double23 = frequency17.getCumPct((int) '4');
        double double25 = frequency17.getPct((long) (byte) 10);
        long long26 = frequency0.getCumFreq((java.lang.Object) (byte) 10);
        long long28 = frequency0.getCumFreq((int) ' ');
        frequency0.addValue((java.lang.Comparable<java.lang.String>) "hi!");
        org.apache.commons.math.stat.Frequency frequency31 = new org.apache.commons.math.stat.Frequency();
        double double33 = frequency31.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double35 = frequency31.getPct(0);
        double double37 = frequency31.getCumPct('a');
        long long39 = frequency31.getCount(1);
        double double41 = frequency31.getPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        long long42 = frequency0.getCumFreq((java.lang.Object) double41);
        long long44 = frequency0.getCumFreq((int) '4');
        double double46 = frequency0.getCumPct((long) 100);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.0d + "'", double46 == 0.0d);
    }

    @Test
    public void test1980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1980");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double4 = frequency0.getCumPct((long) (short) 100);
        long long6 = frequency0.getCumFreq('#');
        frequency0.addValue((java.lang.Integer) 0);
        double double10 = frequency0.getPct((int) (byte) 10);
        long long12 = frequency0.getCumFreq('#');
        double double14 = frequency0.getPct((int) (byte) -1);
        double double16 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n100\t1\t100%\t100%\n");
        frequency0.clear();
        long long19 = frequency0.getCumFreq((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \nhi!\t1\t100%\t100%\n");
        org.apache.commons.math.stat.Frequency frequency20 = new org.apache.commons.math.stat.Frequency();
        double double22 = frequency20.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        java.lang.String str23 = frequency20.toString();
        java.lang.Object obj24 = null;
        double double25 = frequency20.getCumPct(obj24);
        double double27 = frequency20.getCumPct('a');
        double double29 = frequency20.getCumPct((int) (byte) 100);
        frequency20.addValue((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        long long33 = frequency20.getCumFreq((int) (short) 10);
        double double35 = frequency20.getCumPct((long) 10);
        // The following exception was thrown during execution in test generation
        try {
            double double36 = frequency0.getCumPct((java.lang.Object) frequency20);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: org.apache.commons.math.stat.Frequency cannot be cast to java.lang.Comparable");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str23, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
    }

    @Test
    public void test1981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1981");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getPct((java.lang.Object) (byte) -1);
        double double4 = frequency0.getPct(1);
        double double6 = frequency0.getCumPct((int) '4');
        double double8 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        java.lang.Object obj9 = null;
        long long10 = frequency0.getCumFreq(obj9);
        double double12 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n1.0\t1\t100%\t100%\n");
        frequency0.clear();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
    }

    @Test
    public void test1982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1982");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        long long4 = frequency0.getCount((long) (byte) 10);
        double double6 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n0\t1\t50%\t50%\n10\t1\t50%\t100%\n");
        double double8 = frequency0.getPct((long) (short) 1);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
    }

    @Test
    public void test1983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1983");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        long long4 = frequency0.getCount((long) (short) 100);
        double double6 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "");
        long long8 = frequency0.getCumFreq(0);
        double double10 = frequency0.getPct((long) (byte) -1);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
    }

    @Test
    public void test1984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1984");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        frequency0.addValue(100);
        double double6 = frequency0.getPct('a');
        long long8 = frequency0.getCount(10);
        frequency0.addValue((java.lang.Integer) 1);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
    }

    @Test
    public void test1985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1985");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        long long4 = frequency0.getCount((java.lang.Object) 1L);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor5 = frequency0.valuesIterator();
        long long7 = frequency0.getCumFreq(1);
        long long9 = frequency0.getCount(10L);
        frequency0.clear();
        long long11 = frequency0.getSumFreq();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertNotNull(wildcardComparableItor5);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
    }

    @Test
    public void test1986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1986");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        long long4 = frequency0.getCount((long) (short) 100);
        frequency0.clear();
        frequency0.addValue('#');
        org.apache.commons.math.stat.Frequency frequency8 = new org.apache.commons.math.stat.Frequency();
        double double10 = frequency8.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double12 = frequency8.getCumPct((long) (short) 100);
        long long14 = frequency8.getCumFreq((long) (byte) -1);
        long long16 = frequency8.getCumFreq((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n-1\t1\t100%\t100%\n");
        long long17 = frequency0.getCumFreq((java.lang.Object) "Value \t Freq. \t Pct. \t Cum Pct. \n-1\t1\t100%\t100%\n");
        org.apache.commons.math.stat.Frequency frequency18 = new org.apache.commons.math.stat.Frequency();
        double double20 = frequency18.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        java.lang.String str21 = frequency18.toString();
        java.lang.Object obj22 = null;
        double double23 = frequency18.getCumPct(obj22);
        double double25 = frequency18.getCumPct('a');
        double double27 = frequency18.getCumPct((int) (byte) 100);
        long long29 = frequency18.getCount(0L);
        double double31 = frequency18.getCumPct((long) (short) -1);
        org.apache.commons.math.stat.Frequency frequency32 = new org.apache.commons.math.stat.Frequency();
        double double34 = frequency32.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double36 = frequency32.getCumPct((java.lang.Comparable<java.lang.String>) "");
        double double38 = frequency32.getPct((int) 'a');
        frequency32.addValue((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        long long42 = frequency32.getCount((int) '4');
        long long44 = frequency32.getCumFreq((long) ' ');
        double double45 = frequency18.getCumPct((java.lang.Object) ' ');
        long long47 = frequency18.getCumFreq((int) (byte) -1);
        double double49 = frequency18.getCumPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n35\t1\t100%\t100%\n");
        boolean boolean50 = frequency0.equals((java.lang.Object) "Value \t Freq. \t Pct. \t Cum Pct. \n35\t1\t100%\t100%\n");
        // The following exception was thrown during execution in test generation
        try {
            frequency0.addValue((int) 'a');
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str21, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double49));
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test1987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1987");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency();
        double double3 = frequency1.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double5 = frequency1.getCumPct((java.lang.Comparable<java.lang.String>) "");
        double double6 = frequency0.getCumPct((java.lang.Object) "");
        frequency0.addValue((java.lang.Integer) 1);
        long long10 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "hi!");
        double double12 = frequency0.getCumPct('#');
        double double14 = frequency0.getCumPct('a');
        frequency0.addValue((long) (byte) 100);
        frequency0.addValue((long) (short) 1);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
    }

    @Test
    public void test1988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1988");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double4 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "");
        double double6 = frequency0.getPct((int) 'a');
        frequency0.addValue((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor9 = frequency0.valuesIterator();
        org.apache.commons.math.stat.Frequency frequency10 = new org.apache.commons.math.stat.Frequency();
        boolean boolean11 = frequency0.equals((java.lang.Object) frequency10);
        org.apache.commons.math.stat.Frequency frequency12 = new org.apache.commons.math.stat.Frequency();
        double double14 = frequency12.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        long long16 = frequency12.getCount((java.lang.Object) 1L);
        double double18 = frequency12.getCumPct(1);
        long long19 = frequency10.getCount((java.lang.Object) 1);
        double double21 = frequency10.getCumPct('4');
        long long23 = frequency10.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n-1\t1\t100%\t100%\n");
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertNotNull(wildcardComparableItor9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
    }

    @Test
    public void test1989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1989");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        java.lang.String str3 = frequency0.toString();
        java.lang.Object obj4 = null;
        double double5 = frequency0.getCumPct(obj4);
        double double7 = frequency0.getCumPct('a');
        double double9 = frequency0.getCumPct((int) (byte) 0);
        org.apache.commons.math.stat.Frequency frequency10 = new org.apache.commons.math.stat.Frequency();
        double double12 = frequency10.getPct((java.lang.Object) (byte) -1);
        double double14 = frequency10.getPct(1);
        double double16 = frequency10.getCumPct((int) '4');
        frequency10.addValue((long) '#');
        double double20 = frequency10.getPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        double double21 = frequency0.getPct((java.lang.Object) double20);
        long long23 = frequency0.getCumFreq(3L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str3, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
    }

    @Test
    public void test1990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1990");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor3 = frequency0.valuesIterator();
        double double5 = frequency0.getPct(' ');
        frequency0.addValue('a');
        double double9 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n0\t1\t50%\t50%\n10\t1\t50%\t100%\n");
        java.lang.Class<?> wildcardClass10 = frequency0.getClass();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertNotNull(wildcardComparableItor3);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test1991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1991");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double4 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "");
        double double6 = frequency0.getPct((int) 'a');
        long long8 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        double double10 = frequency0.getCumPct('a');
        long long12 = frequency0.getCumFreq((int) '#');
        double double14 = frequency0.getCumPct((long) (short) 10);
        long long16 = frequency0.getCumFreq('4');
        long long18 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n100\t1\t100%\t100%\n");
        double double20 = frequency0.getPct((int) ' ');
        long long22 = frequency0.getCount('4');
        long long24 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n1\t1\t100%\t100%\n");
        java.lang.Class<?> wildcardClass25 = frequency0.getClass();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test1992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1992");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double4 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "");
        double double6 = frequency0.getPct((int) 'a');
        long long8 = frequency0.getCount((long) (byte) 1);
        frequency0.addValue('a');
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor11 = frequency0.valuesIterator();
        double double13 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        long long15 = frequency0.getCumFreq((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n10\t1\t100%\t100%\n");
        org.apache.commons.math.stat.Frequency frequency16 = new org.apache.commons.math.stat.Frequency();
        double double18 = frequency16.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        long long20 = frequency16.getCount((java.lang.Object) 1L);
        double double22 = frequency16.getCumPct(1);
        double double24 = frequency16.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        long long26 = frequency16.getCount('a');
        org.apache.commons.math.stat.Frequency frequency27 = new org.apache.commons.math.stat.Frequency();
        double double29 = frequency27.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        java.lang.String str30 = frequency27.toString();
        java.lang.Object obj31 = null;
        double double32 = frequency27.getCumPct(obj31);
        double double34 = frequency27.getCumPct('a');
        double double36 = frequency27.getCumPct((int) (byte) 100);
        frequency27.addValue((java.lang.Integer) 0);
        frequency16.addValue((java.lang.Object) 0);
        org.apache.commons.math.stat.Frequency frequency40 = new org.apache.commons.math.stat.Frequency();
        double double42 = frequency40.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        java.lang.String str43 = frequency40.toString();
        java.lang.Object obj44 = null;
        double double45 = frequency40.getCumPct(obj44);
        double double47 = frequency40.getCumPct('a');
        double double49 = frequency40.getPct(1);
        org.apache.commons.math.stat.Frequency frequency50 = new org.apache.commons.math.stat.Frequency();
        double double52 = frequency50.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        java.lang.String str53 = frequency50.toString();
        java.lang.Object obj54 = null;
        double double55 = frequency50.getCumPct(obj54);
        double double57 = frequency50.getCumPct('a');
        double double59 = frequency50.getCumPct((int) (byte) 100);
        frequency50.addValue((java.lang.Integer) 0);
        double double63 = frequency50.getCumPct((int) ' ');
        frequency40.addValue((java.lang.Object) double63);
        long long65 = frequency16.getCount((java.lang.Object) double63);
        long long67 = frequency16.getCount((long) (short) 10);
        double double69 = frequency16.getPct((long) 1);
        boolean boolean70 = frequency0.equals((java.lang.Object) double69);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(wildcardComparableItor11);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str30, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str43, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertTrue(Double.isNaN(double49));
        org.junit.Assert.assertTrue(Double.isNaN(double52));
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str53, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue(Double.isNaN(double55));
        org.junit.Assert.assertTrue(Double.isNaN(double57));
        org.junit.Assert.assertTrue(Double.isNaN(double59));
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 1.0d + "'", double63 == 1.0d);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 0L + "'", long65 == 0L);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 0L + "'", long67 == 0L);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
    }

    @Test
    public void test1993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1993");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        long long4 = frequency0.getCount((long) (short) 100);
        double double6 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "");
        long long8 = frequency0.getCumFreq(0);
        double double10 = frequency0.getCumPct((long) (short) 1);
        double double12 = frequency0.getPct(' ');
        frequency0.addValue((long) 10);
        double double16 = frequency0.getPct(0L);
        org.apache.commons.math.stat.Frequency frequency17 = new org.apache.commons.math.stat.Frequency();
        double double19 = frequency17.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double21 = frequency17.getCumPct((long) (short) 100);
        long long23 = frequency17.getCumFreq('#');
        org.apache.commons.math.stat.Frequency frequency24 = new org.apache.commons.math.stat.Frequency();
        double double26 = frequency24.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double28 = frequency24.getCumPct((long) (short) 100);
        long long30 = frequency24.getCumFreq('#');
        boolean boolean31 = frequency17.equals((java.lang.Object) long30);
        double double33 = frequency17.getCumPct((java.lang.Comparable<java.lang.String>) "");
        org.apache.commons.math.stat.Frequency frequency34 = new org.apache.commons.math.stat.Frequency();
        double double36 = frequency34.getPct((java.lang.Object) (byte) -1);
        double double38 = frequency34.getPct(1);
        double double40 = frequency34.getCumPct((int) '4');
        double double42 = frequency34.getPct((long) (byte) 10);
        long long43 = frequency17.getCumFreq((java.lang.Object) (byte) 10);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor44 = frequency17.valuesIterator();
        org.apache.commons.math.stat.Frequency frequency45 = new org.apache.commons.math.stat.Frequency();
        double double47 = frequency45.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double49 = frequency45.getCumPct((java.lang.Comparable<java.lang.String>) "");
        double double51 = frequency45.getPct((long) 100);
        boolean boolean52 = frequency17.equals((java.lang.Object) frequency45);
        double double54 = frequency45.getCumPct(10L);
        double double56 = frequency45.getCumPct((int) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            double double57 = frequency0.getPct((java.lang.Object) frequency45);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: org.apache.commons.math.stat.Frequency cannot be cast to java.lang.Comparable");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertNotNull(wildcardComparableItor44);
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertTrue(Double.isNaN(double49));
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertTrue(Double.isNaN(double56));
    }

    @Test
    public void test1994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1994");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double4 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "");
        double double6 = frequency0.getPct((int) 'a');
        long long8 = frequency0.getCount((long) (byte) 1);
        frequency0.addValue('a');
        double double12 = frequency0.getCumPct((int) 'a');
        long long14 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n0\t1\t50%\t50%\n100\t1\t50%\t100%\n");
        long long16 = frequency0.getCumFreq(0L);
        long long18 = frequency0.getCumFreq((-1));
        long long20 = frequency0.getCumFreq('a');
        double double22 = frequency0.getCumPct(' ');
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1L + "'", long20 == 1L);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
    }

    @Test
    public void test1995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1995");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        java.lang.String str3 = frequency0.toString();
        java.lang.Object obj4 = null;
        double double5 = frequency0.getCumPct(obj4);
        double double7 = frequency0.getCumPct('a');
        double double9 = frequency0.getPct(1);
        long long11 = frequency0.getCumFreq((int) (byte) -1);
        double double13 = frequency0.getCumPct((int) (short) 0);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str3, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
    }

    @Test
    public void test1996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1996");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        long long4 = frequency0.getCount((long) (short) 100);
        org.apache.commons.math.stat.Frequency frequency5 = new org.apache.commons.math.stat.Frequency();
        double double7 = frequency5.getPct((java.lang.Object) (byte) -1);
        double double8 = frequency0.getPct((java.lang.Object) (byte) -1);
        double double10 = frequency0.getCumPct((java.lang.Object) (-1.0f));
        double double12 = frequency0.getPct('a');
        long long14 = frequency0.getCumFreq(' ');
        double double16 = frequency0.getCumPct((long) (byte) -1);
        long long18 = frequency0.getCumFreq((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.apache.commons.math.stat.Frequency frequency19 = new org.apache.commons.math.stat.Frequency();
        double double21 = frequency19.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double23 = frequency19.getCumPct((java.lang.Comparable<java.lang.String>) "");
        double double25 = frequency19.getPct((int) 'a');
        long long27 = frequency19.getCount((long) (byte) 1);
        long long29 = frequency19.getCumFreq((long) 100);
        org.apache.commons.math.stat.Frequency frequency30 = new org.apache.commons.math.stat.Frequency();
        double double32 = frequency30.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        long long34 = frequency30.getCount((java.lang.Object) 1L);
        long long36 = frequency30.getCumFreq('4');
        long long38 = frequency30.getCumFreq((java.lang.Object) true);
        frequency19.addValue((java.lang.Object) long38);
        long long41 = frequency19.getCount(0);
        boolean boolean42 = frequency0.equals((java.lang.Object) long41);
        double double44 = frequency0.getPct('a');
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 1L + "'", long41 == 1L);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double44));
    }

    @Test
    public void test1997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1997");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getPct((java.lang.Object) (byte) -1);
        double double4 = frequency0.getPct(1);
        double double6 = frequency0.getCumPct((int) '4');
        frequency0.addValue((long) '#');
        double double10 = frequency0.getCumPct(' ');
        java.lang.String str11 = frequency0.toString();
        long long13 = frequency0.getCount(0);
        long long15 = frequency0.getCount((long) (byte) 10);
        java.lang.String str16 = frequency0.toString();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n35\t1\t100%\t100%\n" + "'", str11, "Value \t Freq. \t Pct. \t Cum Pct. \n35\t1\t100%\t100%\n");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n35\t1\t100%\t100%\n" + "'", str16, "Value \t Freq. \t Pct. \t Cum Pct. \n35\t1\t100%\t100%\n");
    }

    @Test
    public void test1998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1998");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        java.lang.String str1 = frequency0.toString();
        long long3 = frequency0.getCount((int) (byte) 1);
        long long5 = frequency0.getCumFreq('4');
        long long7 = frequency0.getCount((int) (byte) 0);
        org.apache.commons.math.stat.Frequency frequency8 = new org.apache.commons.math.stat.Frequency();
        double double10 = frequency8.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double12 = frequency8.getCumPct((java.lang.Comparable<java.lang.String>) "");
        double double14 = frequency8.getPct((int) 'a');
        long long16 = frequency8.getCount((long) (byte) 1);
        long long18 = frequency8.getCumFreq((long) 100);
        org.apache.commons.math.stat.Frequency frequency19 = new org.apache.commons.math.stat.Frequency();
        double double21 = frequency19.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        long long23 = frequency19.getCount((java.lang.Object) 1L);
        long long25 = frequency19.getCumFreq('4');
        long long27 = frequency19.getCumFreq((java.lang.Object) true);
        frequency8.addValue((java.lang.Object) long27);
        frequency8.addValue((int) (short) -1);
        long long32 = frequency8.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n0\t1\t50%\t50%\n10\t1\t50%\t100%\n");
        long long34 = frequency8.getCumFreq(0);
        double double36 = frequency8.getPct((java.lang.Object) "Value \t Freq. \t Pct. \t Cum Pct. \n-1\t1\t100%\t100%\n");
        frequency0.addValue((java.lang.Object) "Value \t Freq. \t Pct. \t Cum Pct. \n-1\t1\t100%\t100%\n");
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor38 = frequency0.valuesIterator();
        frequency0.addValue((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \nNaN\t1\t100%\t100%\n");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str1, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 2L + "'", long34 == 2L);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.0d + "'", double36 == 0.0d);
        org.junit.Assert.assertNotNull(wildcardComparableItor38);
    }

    @Test
    public void test1999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1999");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double4 = frequency0.getCumPct((long) (short) 100);
        long long6 = frequency0.getCumFreq((long) (byte) -1);
        long long8 = frequency0.getCount((long) (short) -1);
        frequency0.addValue((java.lang.Integer) 1);
        long long12 = frequency0.getCount(0);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
    }

    @Test
    public void test2000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test2000");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double4 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "");
        double double6 = frequency0.getPct((int) 'a');
        frequency0.addValue((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor9 = frequency0.valuesIterator();
        org.apache.commons.math.stat.Frequency frequency10 = new org.apache.commons.math.stat.Frequency();
        boolean boolean11 = frequency0.equals((java.lang.Object) frequency10);
        frequency10.addValue('4');
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor14 = frequency10.valuesIterator();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertNotNull(wildcardComparableItor9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(wildcardComparableItor14);
    }
}

